

\;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1
;;;; BEGIN FILE ./reference/ccl/library/remote-lisp.lisp
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2
;;;-*- Mode: Lisp; Package: CCL -*-
;;;
;;; Copyright 2011 Clozure Associates
;;;
;;; Licensed under the Apache License, Version 2.0 (the "License");
;;; you may not use this file except in compliance with the License.
;;; You may obtain a copy of the License at
;;;
;;;     http://www.apache.org/licenses/LICENSE-2.0
;;;
;;; Unless required by applicable law or agreed to in writing, software
;;; distributed under the License is distributed on an "AS IS" BASIS,
;;; WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
;;; See the License for the specific language governing permissions and
;;; limitations under the License.
;;;

(in-package :ccl)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
;; swink client -- use this ccl to debug a remote ccl.
;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defclass remote-lisp-connection (swink:connection)
  ((features :initform nil :accessor rlisp-features)
   (lisp-implementation-type :initform "???" :accessor rlisp-lisp-implementation-type)
   (lisp-implementation-version :initform "???" :accessor rlisp-lisp-implementation-version)
   (machine-instance :initform "???" :accessor rlisp-machine-instance)
   (proxies :initform (make-hash-table :test 'eql :weak :value) :reader connection-proxies)))

(defmethod swink:thread-id ((conn remote-lisp-connection)) nil)

(defmethod update-rlisp-connection-info ((conn remote-lisp-connection)
                                         &key lisp-implementation-type
                                              lisp-implementation-version
                                              machine-instance
                                              (features nil featuresp)
                                         &allow-other-keys)
  (swink:with-connection-lock (conn)
    (when featuresp
      (setf (rlisp-features conn) features))
    (when machine-instance
      (setf (rlisp-machine-instance conn) machine-instance))
    (when lisp-implementation-type
      (setf (rlisp-lisp-implementation-type conn) lisp-implementation-type))
    (when lisp-implementation-version
      (setf (rlisp-lisp-implementation-version conn) lisp-implementation-version))))

;; Proxy for a thread on the remote server. 
(defclass remote-lisp-thread (swink:thread)
  (;; Local process running the local repl: interacting with user, sending to remote for execution.
   ;;    (the swink:thread-process slot has thread-id of the remote process)
   (control-process :initform nil :accessor swink:thread-control-process)
   (break-level :initform nil :accessor rthread-break-level)))

(defmethod swink:thread-class ((conn remote-lisp-connection)) 'remote-lisp-thread)

(defmethod rlisp-host-description ((rthread remote-lisp-thread))
  (rlisp-host-description (swink:thread-connection rthread)))

(defmethod rlisp-thread-description ((rthread remote-lisp-thread))
  (format nil "~a thread ~a" (rlisp-host-description rthread) (swink:thread-id rthread)))

(defmethod print-object ((rthread remote-lisp-thread) stream)
  (print-unreadable-object (rthread stream :type t :identity t)
    (princ (rlisp-thread-description rthread) stream)))

(defmethod rlisp/invoke-restart ((rthread remote-lisp-thread) name)
  (swink:send-event rthread `(:invoke-restart ,name)))

(defmethod rlisp/invoke-restart-in-context ((rthread remote-lisp-thread) index)
  (swink:send-event rthread `(:invoke-restart-in-context ,index)))

(defmethod rlisp/toplevel ((rthread remote-lisp-thread))
  (swink:send-event rthread `(:toplevel)))

(defmethod rlisp/interrupt ((rthread remote-lisp-thread))
  (swink:send-event rthread `(:interrupt)))

(defmethod rlisp-host-description ((conn remote-lisp-connection))
  (let ((socket (swink:connection-control-stream conn)))
    (if (open-stream-p socket)
      (format nil "~a:~a" (ipaddr-to-dotted (remote-host socket)) (remote-port socket))
      ":CLOSED")))

(defmethod print-object ((conn remote-lisp-connection) stream)
  (print-unreadable-object (conn stream :type t :identity t)
    (format stream "~a @~a"
            (rlisp-host-description conn)
            (rlisp-machine-instance conn))))


(defmethod start-rlisp-process ((conn remote-lisp-connection))
  (assert (null (swink:connection-control-process conn)))
  (setf (swink:connection-control-process conn)
        (process-run-function (format nil "swank-event-loop ~a" (remote-port (swink:connection-control-stream conn)))
          (lambda ()
            (setf (swink:connection-control-process conn) *current-process*)
            (with-simple-restart (swink:close-connection "Close connection")
              (loop (dispatch-event conn (swink:read-sexp conn)))))))
  (let ((info (swink:send-event-for-value conn `(:connection-info))))
    (when info
      (apply #'update-rlisp-connection-info conn info)))
  conn)


(defmethod dispatch-event ((conn remote-lisp-connection) thread.event)
  (swink::log-event "Dispatch-event ~s" thread.event)
  (destructuring-bind (sender-id . event) thread.event
    (swink:destructure-case event
      ((:end-connection condition)
       (declare (ignore condition))
       (swink:close-connection conn))
      ((:start-repl break-level)
       ;; Starting a new repl (possibly due to an error in a non-repl process)
       (let ((rthread (swink:make-new-thread conn sender-id)))
         (start-remote-listener rthread break-level)))
      ((:exit-repl)
       (let ((rthread (swink:find-thread conn sender-id)))
         (when (and rthread (swink:thread-control-process rthread))
           (exit-remote-listener rthread))))
      ((:return local-tag &rest values)
       ;; Note this interrupts the process rather than going through the event mechanism,
       ;; the caller has to set up the callback environment before sending the request.
       (when local-tag
         (apply #'swink:invoke-callback conn local-tag values)))
      ((:cancel-return local-tag)
       (when local-tag
         (swink:abort-callback conn local-tag)))
      (((:read-string :abort-read :write-string) stream-thread-id &rest args)
       ;; Do I/O stuff in the stream listener process, not the caller's listener
       ;; process (which might not even exist)
       (let ((stream-listener (swink:find-thread conn stream-thread-id)))
         (if stream-listener
           (swink:signal-event stream-listener (cons (car event) args))
           (warn "Missing listener for ~s" event))))
      ((:inspect remote-inspector)
       (let ((proxy (new-inspector-proxy conn remote-inspector)))
         (spawn-inspector *application* proxy)))
      ((:inspector-data tag segment)
       (let ((proxy (inspector-proxy-for-tag conn tag)))
         (register-inspector-proxy-segment proxy segment)))
      (t (let ((thread (swink:find-thread conn sender-id)))
           (when thread
             (swink:signal-event thread event))))))
  (swink::log-event "Dispatch-event done"))

(define-condition rlisp-read-aborted ()
  ((tag :initarg :tag :reader rlisp-read-aborted-tag)))

(defun rlisp-read-string (rthread tag)
  (handler-bind ((rlisp-read-aborted (lambda (c)
                                       (when (eql tag (rlisp-read-aborted-tag c))
                                         (return-from rlisp-read-string)))))
    (let ((text (and (swink:with-event-handling (rthread :restart t)
                       (peek-char nil *standard-input* nil)) ;; wait for first one, nil means eof
		     (read-available-text *standard-input*))))
      (swink:send-event (swink:thread-connection rthread) `(:return ,tag ,text)))))


(defclass remote-backtrace-context ()
  ((thread :initarg :thread :reader backtrace-context-thread)
   (break-level :initarg :break-level :reader backtrace-context-break-level)
   (continuable-p :initarg :continuable-p :reader backtrace-context-continuable-p)
   (restarts :initarg :restarts :reader backtrace-context-restarts)))

(defmethod remote-context-class ((application application)) 'remote-backtrace-context)

(defmethod swink:handle-event ((rthread remote-lisp-thread) event)
  (assert (eq (swink:thread-control-process rthread) *current-process*))
  (swink::log-event "Handle-event in thread ~s: ~s" (swink:thread-id rthread) event)
  (swink:destructure-case event
    ((:read-string remote-tag)
     (rlisp-read-string rthread remote-tag))
    ((:abort-read remote-tag)
     (signal 'rlisp-read-aborted :tag remote-tag))
    ((:write-string string)
     (write-string string))
    ((:read-loop level)
     (unless (eql level *break-level*)
       (warn ":READ-LOOP level confusion got ~s expected ~s" level (1+ *break-level*)))
     (invoke-restart 'debug-restart level)) ;; restart at same level, aborted current expression.
    ((:enter-break context-plist)
     (let* ((rcontext (apply #'make-instance (remote-context-class *application*)
                             :thread rthread
                             context-plist))
            (level (backtrace-context-break-level rcontext)))
       (unless (or (eql level 0) (eql level (1+ *break-level*)))
         (warn ":ENTER-BREAK level confusion got ~s expected ~s" level (1+ *break-level*)))
       ;(format t "~&Error: ~a" condition-text)
       ;(when *show-restarts-on-break*
       ;  (format t "~&Remote restarts:")
       ;  (loop for (name description) in restarts
       ;    do (format t "~&~a ~a" name description))
       ;  (fresh-line))
       (unwind-protect
           (progn
             (application-ui-operation *application* :enter-backtrace-context rcontext)
             (rlisp-read-loop rthread :break-level level))
         (application-ui-operation *application* :exit-backtrace-context rcontext))))
    ((:debug-return level) ;; return from level LEVEL read loop
     (invoke-restart 'debug-return level))))

(defmethod make-rrepl-thread ((conn remote-lisp-connection) name)
  (swink:send-event conn `(:spawn-repl ,name)))

(defun connect-to-swink (host port)
  (let* ((socket (make-socket :remote-host host :remote-port port :nodelay t))
         (conn (make-instance 'remote-lisp-connection :control-stream socket)))
    (start-rlisp-process conn)))

(defmethod close ((conn remote-lisp-connection) &key abort)
  ;; TODO: kill process.
  (close (swink:connection-control-stream conn) :abort abort))

(defun read-available-text (stream)
  (loop with buffer = (make-array 100 :element-type 'character :adjustable t :fill-pointer 0)
    for ch = (stream-read-char-no-hang stream)
    until (or (eq ch :eof) (null ch))
    do (vector-push-extend ch buffer)
    finally (return buffer)))

;; Return text for remote evaluation.
(defmethod wait-for-toplevel-form ((stream input-stream)) (peek-char t stream nil))
(defmethod toplevel-form-text ((stream input-stream)) (read-available-text stream))

(defmethod wait-for-toplevel-form ((stream synonym-stream))
  (wait-for-toplevel-form (symbol-value (synonym-stream-symbol stream))))
(defmethod toplevel-form-text ((stream synonym-stream))
  (toplevel-form-text (symbol-value (synonym-stream-symbol stream))))

(defmethod wait-for-toplevel-form ((stream two-way-stream))
  (if (typep stream 'echo-stream)
    (call-next-method)
    (wait-for-toplevel-form (two-way-stream-input-stream stream))))
(defmethod toplevel-form-text ((stream two-way-stream))
  (if (typep stream 'echo-stream)
    (call-next-method)
    (toplevel-form-text (two-way-stream-input-stream stream))))


(defmethod start-remote-listener ((rthread remote-lisp-thread) break-level)
  (when (swink:thread-control-process rthread) (error "Attempting to re-enter active listener"))
  (setf (rthread-break-level rthread) break-level)
  (create-rlisp-listener *application* rthread)
  ;; This is running in the server control process.  Don't process any other events until
  ;; the thread actually starts up.
  (process-wait "REPL startup" #'swink:thread-control-process rthread))

;; This can be invoked when the connection dies or break-loop is exited in a non-repl process.
(defmethod exit-remote-listener ((rthread remote-lisp-thread))
  (application-ui-operation *application* :deactivate-rlisp-listener rthread) ;; deactivate listener window
  (let ((process (swink:thread-control-process rthread)))
    (setf (swink:thread-control-process rthread) nil)
    (when process
      ;; This runs unwind-protects, which should clean up any streams
      (process-kill process))))

;; pass this as the initial-function in make-mcl-listener-process
(defmethod remote-listener-function ((rthread remote-lisp-thread))
  (setf (swink:thread-control-process rthread) *current-process*)
  (unless (or *inhibit-greeting* *quiet-flag*)
    (let ((conn (swink:thread-connection rthread)))
      (format t "~&Welcome to ~A ~A on ~A!"
              (rlisp-lisp-implementation-type conn)
              (rlisp-lisp-implementation-version conn)
              (rlisp-machine-instance conn))))
  (rlisp-read-loop rthread :break-level (rthread-break-level rthread)))

(defmethod create-rlisp-listener ((application application) rthread)
  (assert (null (swink:thread-control-process rthread)))
  ;; see make-mcl-listener-process
  (error "Not implemented yet"))

;; IDE read-loop with remote evaluation.
(defmethod rlisp-read-loop ((rthread remote-lisp-thread) &key break-level)
  (let* ((*break-level* break-level)  ;; used by prompt printing
         (*last-break-level* break-level)  ;; ditto
         (debug-return nil))
    (unwind-protect
        (loop
          (setf (rthread-break-level rthread) break-level)
          (restart-case
              ;; There are some UI actions that invoke local restarts by name, e.g. cmd-/ will invoke 'continue.
              ;; Catch those and just pass them to the remote.  The remote will then do whatever the restart
              ;; does, and will send back unwinding directions if appropriate.
              ;; Do continue with a restart-bind because don't want to abort whatever form is
              ;; about to be sent for evaluation, just in case the continue doesn't end up doing
              ;; anything on the remote end.
              (restart-bind ((continue (lambda () (rlisp/invoke-restart rthread 'continue))))
                (catch :toplevel
                  (loop
                    (catch :abort
                      (loop
                        (catch-cancel ;; exactly like :abort except prints Cancelled.
                         (rlisp-read-loop-internal rthread))
                        (rlisp/invoke-restart rthread 'abort)
                        (format *terminal-io* "~&Cancelled")))
                    (rlisp/invoke-restart rthread 'abort)))
                (rlisp/toplevel rthread))
            ;; These are invoked via invoke-restart-no-return, so must take non-local exit.
            (abort () (rlisp/invoke-restart rthread 'abort))
            (abort-break () (if (eql break-level 0)
                              (rlisp/invoke-restart rthread 'abort)
                              (rlisp/invoke-restart rthread 'abort-break)))
            ;; This is invoked when remote unwinds
            (debug-return (target-level)
               (setq debug-return t)
               (when (eql target-level break-level)
                 (return-from rlisp-read-loop))
               (when (> target-level break-level)
                 (error "Missed target level in debug-return - want ~s have ~s" target-level break-level))
               (invoke-restart 'debug-return target-level))
            (debug-restart (target-level)
               (unless (eql target-level break-level)
                 (when (> target-level break-level)
                   (error "Missed target level in debug-restart - want ~s have ~s" target-level break-level))
                 (setq debug-return t)
                 (invoke-restart 'debug-restart target-level))))
          (clear-input)
          (fresh-line))
      (unless debug-return
        (warn "Unknown exit from rlisp-read-loop!")))))

(defmethod rlisp-read-loop-internal ((rthread remote-lisp-thread))
  (let* ((input-stream *standard-input*)
         (sem (make-semaphore))
         (eof-count 0))
    (loop
      (force-output)
      (print-listener-prompt *standard-output* t)
      
      (swink:with-event-handling (rthread :restart t)
        (wait-for-toplevel-form input-stream))
      (multiple-value-bind (text env) (toplevel-form-text input-stream)
        (if (null text) ;; eof
          (progn
            (when (> (incf eof-count) *consecutive-eof-limit*)
              (#_ _exit 0))
            (unless (and (not *batch-flag*)
                         (not *quit-on-eof*)
                         (stream-eof-transient-p input-stream))
              (exit-interactive-process *current-process*))
            (stream-clear-input input-stream)
            (rlisp/invoke-restart rthread 'abort-break))
          (progn
            (setq eof-count 0)
            ;;(let* ((values (toplevel-eval form env)))
            ;;      (if print-result (toplevel-print values)))
            (let* ((package-name (loop for sym in (car env) for val in (cdr env)
                                   when (eq sym '*package*) do (return val))))
              (if *verbose-eval-selection*
                (let ((state (swink:send-event-for-value rthread
                                                         `(:read-eval-print-one ,text ,package-name)
                                                         :semaphore sem)))
                  (loop while state
                    do (force-output)
                    do (print-listener-prompt *standard-output* t)
                    do (swink:send-event-for-value rthread
                                                   `(:read-eval-print-next ,state)
                                                   :semaphore sem)))
                (swink:send-event-for-value rthread
                                            `(:read-eval-all-print-last ,text ,package-name)
                                            :semaphore sem)))))))))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; inspector support

;; TODO: tell server no longer need tag when the proxy gets gc'd.
(defclass remote-inspector-proxy (inspector::inspector)
  ((connection :initarg :connection :reader remote-inspector-proxy-connection)
   (tag :initarg :tag :reader remote-inspector-proxy-tag)
   (string :initarg :string :reader inspector::inspector-object-string)
   (count :initarg :count :reader inspector::inspector-line-count)
   ;; This is accumulating strings info from remote.
   (segments :initform nil)))

(defmethod initialize-instance :after ((proxy remote-inspector-proxy) &rest args)
  (declare (ignore args))
  (let ((conn (remote-inspector-proxy-connection proxy))
        (tag (remote-inspector-proxy-tag proxy)))
    (swink:with-connection-lock (conn)
      (assert (null (gethash tag (connection-proxies conn))))
      (setf (gethash tag (connection-proxies conn)) proxy))))

(defmethod spawn-inspector ((application application) (proxy remote-inspector-proxy))
  ;; Artist conception... we don't really support non-GUI client side, but it would
  ;; go something like this.
  (let* ((conn (remote-inspector-proxy-connection proxy))
         (thread (swink:find-thread conn t :key #'true))) ;; any thread.
    (when thread
      (process-interrupt (swink:thread-control-process thread) 'inspect proxy))))

(defmethod inspector::note-inspecting-item ((proxy remote-inspector-proxy))
  (let ((conn (remote-inspector-proxy-connection proxy))
        (tag (remote-inspector-proxy-tag proxy)))
    (swink:send-event conn `(:inspecting-item ,tag))))

(defmethod inspector::refresh-inspector ((proxy remote-inspector-proxy))
  (let ((conn (remote-inspector-proxy-connection proxy))
        (tag (remote-inspector-proxy-tag proxy)))
    (let ((remote-inspector (swink:send-event-for-value conn `(:refresh-inspector ,tag))))
      (new-inspector-proxy conn remote-inspector))))

(defmethod new-inspector-proxy ((conn remote-lisp-connection) remote-inspector)
  (destructuring-bind (remote-tag new-count . new-string) remote-inspector
    (let ((i (inspector-proxy-for-tag conn remote-tag)))
      (with-slots (string count) i
        ;; The proxy might have already existed, if received some segments for it before we got
        ;; here, but it better be uninitialized.
        (when count (error "Duplicate proxy for ~s" remote-tag))
        (setf string new-string count new-count))
      i)))

(defmethod inspector-proxy-for-tag ((conn remote-lisp-connection) remote-tag)
  (or (gethash remote-tag (connection-proxies conn))
      ;; Make a blank proxy to catch any segments that come in while we're initializing.
      (setf (gethash remote-tag (connection-proxies conn))
            (make-instance 'remote-inspector-proxy
              :connection conn
              :tag remote-tag
              :count nil))))

(defmethod register-inspector-proxy-segment ((proxy remote-inspector-proxy) segment)
  (with-slots (connection segments) proxy
    (swink:with-connection-lock (connection)
      (push segment segments))))

;; Get the strings for given line, pinging server if we don't already have it.
(defmethod remote-inspector-proxy-strings ((proxy remote-inspector-proxy) index)
  (with-slots (connection tag segments) proxy
    ;; No need to lock because we only ever push onto segments.
    (let ((last-segments nil)
          (result nil))
      (flet ((lookup (index segs)
               (loop for tail on segs until (eq tail last-segments)
                 as (start-index . strings) = (car tail) as pos = (- index start-index)
                 when (and (<= 0 pos) (< pos (length strings)))
                 do (progn
                      (setq result (aref strings pos))
                      (return t))
                 finally (setq last-segments segs))))
        (unless (lookup index segments)
          (swink:send-event connection `(:describe-more ,tag ,index))
          (process-wait "Remote Describe" (lambda ()
                                            (and (neq segments last-segments)
                                                 ;; something new has arrived
                                                 (lookup index segments)))))
        result))))


(defclass remote-inspector-line (inspector::inspector)
  ((parent :initarg :parent :reader remote-inspector-line-parent)
   (index :initarg :index :reader remote-inspector-line-index)
   ;; Lazily computed remote inspector proxy
   (proxy :initform nil)))

(defmethod inspector::inspector-line ((proxy remote-inspector-proxy) index)
  (destructuring-bind (label-string . value-string)
                      (remote-inspector-proxy-strings proxy index)
    (values (make-instance 'remote-inspector-line :parent proxy :index index)
            label-string
            value-string)))

(defmethod remote-inspector-line-proxy ((line remote-inspector-line))
  (with-slots (parent index proxy) line
    (or proxy
        (setf proxy
              (with-slots (connection tag) parent
                (let ((remote-inspector
                       (swink:send-event-for-value connection
                                                   `(:line-inspector ,tag ,index))))
                  (new-inspector-proxy connection remote-inspector)))))))

(defmethod inspector::inspector-line-count ((line remote-inspector-line))
  (inspector::inspector-line-count (remote-inspector-line-proxy line)))

(defmethod inspector::inspector-object-string ((line remote-inspector-line))
  (inspector::inspector-object-string (remote-inspector-line-proxy line)))

(defmethod inspector::inspector-line ((line remote-inspector-line) index)
  (inspector::inspector-line (remote-inspector-line-proxy line) index))

(defmethod inspector::note-inspecting-item ((line remote-inspector-line))
  (inspector::note-inspecting-item (remote-inspector-line-proxy line)))
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3
;;;; END FILE ./reference/ccl/library/remote-lisp.lisp
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4n









;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4n









;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4n









;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4n











\;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1
;;;; BEGIN FILE ./reference/ccl/library/macptr-termination.lisp
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2
; -*- Mode: Lisp; Package: CCL; -*-
;;;
;;; Copyright 1994-2009 Clozure Associates
;;;
;;; Licensed under the Apache License, Version 2.0 (the "License");
;;; you may not use this file except in compliance with the License.
;;; You may obtain a copy of the License at
;;;
;;;     http://www.apache.org/licenses/LICENSE-2.0
;;;
;;; Unless required by applicable law or agreed to in writing, software
;;; distributed under the License is distributed on an "AS IS" BASIS,
;;; WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
;;; See the License for the specific language governing permissions and
;;; limitations under the License.

;;; macptr-termination.lisp
;;;
;;; Allows you to associate a termination function with a macptr.
;;; The termination function will be called with the macptr as
;;; its single arg when the macptr is no longer accessible in the
;;; mac heap (i.e. when the garbage collector decides that its
;;; storage can be recycled).
;;;
;;; This file is provided primarily for backward compatibility.
;;; You can use terminate-when-unreachable for new code.

;; Modification History
;;
;; 11/26/96 bill Remove cons-terminable-macptr from the PPC version of the code.
;;               It referenced undefined $macptr-size and it was not used.
;; ------------- 4.0
;; 09/12/96 bill *slave-macptrs-table* is for non-terminable slaves.
;;               *terminable-slaves-table* is for terminable slaves.
;;               *terminable-slaves-table* is not weak, *slave-macptrs-table* still is.
;;               *terminable-slaves-table* is an EQL hash table which maps a copy of the
;;               slave to the master.
;;               When a slave is terminated, its entry is explicitly removed from *terminable-slaves-table*.
;;               This means that a master will be removed on the next GC after all of
;;               its slaves are terminated. Not optimal, but it guarantees that all the slaves are
;;               disposed before the master.
;; 08/23/96 bill A *save-exit-function* to clear-terminable-macptrs
;; 08/21/96 bill add the SK8 register-slave-macptr & teminable-macptr-p functions
;;               and the :deactivate-only keyword to deactivate-macptr
;; ------------- 4.0b1
;; 02/28/96 bill Make it work in PPC MCL
;;

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;
;;; Documentation
;;;

#|

SET-POST-EGC-HOOK-ENABLED-P value
  This package works by setting MCL's undocumented ccl::*post-gc-hook*.
The hook is normally called only after a full GC. If you want it to
be called after each ephemeral GC as well, call this with a true value.

POST-EGC-HOOK-ENABLED-P
  Returns true if the post gc hook will be called after EGC as well as
after full GC.�

ADD-PRE-GC-HOOK hook
DELETE-PRE-GC-HOOK hook
ADD-POST-GC-HOOK hook
DELETE-POST-GC-HOOK hook
  MCL's ccl::*pre-gc-hook* and ccl::*post-gc-hook* can each contain
either a function or NIL. These four functions extend that functionality
by maintaining a list of functions for each of the two hooks. Hooks are
compared with EQ, so it is best to pass a symbol that has a global
definition (see the last form in this file).

MAKE-TERMINABLE-MACPTR macptr termination-function &key master
  Creates and returns a terminable macptr. It will point at the same Mac
Heap address as the macptr arg. When the return value becomes scavengeable
(e.g. no longer accessible in the Lisp heap), will call the
termination-function with a single arg, the returned macptr. If the
termination-function's return value is non-NIL, will free the macptr.
Otherwise, will assume that you decided not to terminate it, and will
call the termination-function again the next time the GC runs and
it is scavengeable.  If master is supplied, then
initialize the new terminable macptr as a slave to the given master.
All slave terminable macptrs are terminated before their master is terminated.
Raise an error if macptr is not a macptr or the supplied master
is not a terminable macptr.

REGISTER-SLAVE-MACPTR slave-macptr master-macptr
  Registers a macptr as the slave of a terminable macptr.
A master terminable macptr is not terminated until all of its slaves
have been GC'ed (and terminated if appropriate).
Raise an error if master-macptr is not a terminable macptr.

TERMINABLE-MACPTR-P thing
returns t if thing is an active terminable or gcable macptr;
otherwise returns  nil.

DEACTIVATE-MACPTR macptr &key deactivate-only
  If macptr has an associated termination action,
cancel that action. If deactivate-only is nil, call the
termination action before canceling it, and change
the macptr to a dead macptr.  Raise an error if macptr
is not a macptr.  Return nil if not a terminable macptr
or if deactivate-only is nil and disposal function returns
nil;  otherwise return true.

|#

(in-package "CCL")

(provide "MACPTR-TERMINATION")

(export '(set-post-egc-hook-enabled-p post-egc-hook-enabled-p
          add-pre-gc-hook delete-pre-gc-hook add-post-gc-hook delete-post-gc-hook
          make-terminable-macptr register-slave-macptr terminable-macptr-p deactivate-macptr))

; Map slave-macptr to master-macptr
; This holds on to the master until the slave is GC'd
(defvar *slave-macptrs-table*
  (make-hash-table :test 'eq :weak :key))

; Map a copy of a terminable slave to its master
; This holds on to the master until the slave is terminated
(defvar *terminable-slaves-table*
  (make-hash-table :test 'eql))

(defun register-slave-macptr (slave-macptr master-macptr)
  (unless (terminable-macptr-p master-macptr)
    (error "~s is not a terminable macptr" master-macptr))
  (unless (macptrp slave-macptr)
    (setq slave-macptr (require-type slave-macptr 'macptr)))
  (if (terminable-macptr-p slave-macptr)
    (setf (gethash (%inc-ptr slave-macptr 0) *terminable-slaves-table*) master-macptr)
    (setf (gethash slave-macptr *slave-macptrs-table*) master-macptr)))

(defun dispose-gcable-macptr (macptr)
  (let ((flags (macptr-flags macptr)))
    ; we set to $flags_normal before calling the dispose function.
    ; (client code can and does depend on this).
    ; hence, if it aborts a memory leak results.
    ; if we were to wait until after the user function returns
    ; to put in the $flags_normal, then it will get called again
    ; and might try to free something twice: crash!
    (setf (macptr.flags macptr) #.$flags_normal)
    (case flags
      (#.$flags_normal nil)
      (#.$flags_DisposHandle (#_DisposeHandle macptr) t)
      (#.$flags_DisposPtr    (#_DisposePtr    macptr) t)
      (#.$flags_DisposWindow (#_DisposeWindow macptr) t)
      (#.$flags_DisposGWorld (#_DisposeGWorld macptr) t)
      (otherwise (error "Macptr has bogus flags")))))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;
;;; The PPC version uses the new general termination support
;;;

#+ppc-target
(progn

(eval-when (:compile-toplevel :execute)
  (require "LISPEQU"))

(defvar *macptr-termination-population*
  (%cons-terminatable-alist))

(defun make-terminable-macptr (macptr termination-function &key master)
  (let* ((p (%inc-ptr macptr 0))
         (cell (list (cons p termination-function)))
         (population *macptr-termination-population*))
    (without-interrupts
     (setf (cdr cell) (population-data population)
           (population-data population) cell))
    (when master
      (register-slave-macptr p master))
    p))

(defun terminable-macptr-p (thing)
  (or (not (eql $flags_normal (macptr-flags thing)))
      (member thing (population-data *macptr-termination-population*)
              :key 'car)))

(defun deactivate-macptr (macptr &key (deactivate-only t))
  (unless (macptrp macptr)
    (setq macptr (require-type macptr 'macptr)))
  (let ((termination-function nil)
        (population *macptr-termination-population*))
    (flet ((test (macptr cell) (and (eq macptr (car cell)) (setq termination-function (cdr cell)))))
      (declare (dynamic-extent #'test))
      (without-interrupts
       (setf (population-data population)
             (delete macptr (population-data population)
                     :test #'test
                     :count 1))))
    (when termination-function
      (remhash macptr *terminable-slaves-table*))
    (if deactivate-only
      termination-function
      (prog1
        (if termination-function
          (funcall termination-function macptr)
          (progn
            (dispose-gcable-macptr macptr)
            (remhash macptr *slave-macptrs-table*)))
        (macptr->dead-macptr macptr)))))

; The post GC hook
(defun terminate-macptrs ()
  (let ((population *macptr-termination-population*)
        list cell)
    (loop
      (without-interrupts
       (setq list (population-termination-list population))
       (unless list (return))
       (setf cell (car list)
             (population-termination-list population) (cdr list)
             (cdr list) nil))
      (let ((macptr (car cell)))
        (if (funcall (cdr cell) macptr)
          (remhash macptr *terminable-slaves-table*)
          (without-interrupts
           (setf (cdr list) (population-data population)
                 (population-data population) list)))))))

(defun macptr->dead-macptr (macptr)
  (if (macptrp macptr)
    (%macptr->dead-macptr macptr)
    (macptr->dead-macptr (require-type macptr 'macptr))))



; Call this before save-application.
; It makes no sense to keep terminable macptrs around after that.
; They'll be dead-macptr's then causing lots of grief.
(defun clear-terminable-macptrs ()
  (let ((population *macptr-termination-population*))
    (setf (population-data population) nil
          (population-termination-list population) nil)
    (clrhash *slave-macptrs-table*)))

)  ; end of #+ppc-target progn


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;
;;; The 68K version needs to work harder.
;;; It also requires a kernel patch.
;;; It won't work in a vanilla MCL 3.0 (or 2.0).
;;;

#-ppc-target
(progn

(eval-when (:compile-toplevel :execute)
  (require "LAPMACROS")

  (defconstant $flags_terminable 5)
  (defconstant $flags_terminate_when_ready 6)
  
  (defconstant $gc-finalize-macptrs-bit (- 26 $fixnumshift))
  (defconstant $gc-post-egc-hook-p (- 25 $fixnumshift))
  
  (def-accessors () %svref
    nil                                   ; macptr.ptr
    nil                                   ; macptr.flags
    macptr.link
    macptr.id
    macptr-size)
  
  ; This is not exported from the kernel. In future MCL versions, it
  ; will be and this definition will not be necessary.
  ; This value came from the lisp-8.map file for the new kernel
  (defconstant $gcable_ptrs (- #xD84 #x1000))
  )

(defun gcable-ptrs-head ()
  (lap-inline ()
    (move.l (a5 $gcable_ptrs) acc)))

(defun (setf macptr-flags) (value p)
  (setq p (require-type p 'macptr))
  (setq value (require-type value 'fixnum))
  (lap-inline (value p)
    (move.l arg_z atemp0)
    (getint arg_y)
    (move.l arg_y (atemp0 $macptr.flags)))
  value)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;
;;; cons-terminable-macptr & map-over-terminated-macptrs
;;; are the low-level interface to this package.
;;;

; Create a terminable macptr from another macptr
(defun cons-terminable-macptr (macptr &optional (id 0))
  (setq macptr (require-type macptr 'macptr))
  (setq id (require-type id 'fixnum))
  (let ((p (make-uvector macptr-size $v_macptr :initial-element 0)))
    (%setf-macptr p macptr)
    (setf (macptr-flags p) $flags_terminable
          (macptr.id p) id)
    (lap-inline (p)
      (move.l arg_z atemp0)
      (move.l (a5 $gcable_ptrs) (svref atemp0 macptr.link))
      (move.l atemp0 (a5 $gcable_ptrs)))
    p))

; Calls function with each terminated macptr.
; If function returns NIL, will not reap the macptr;
; it will reappear in the list of terminated macptrs after the next GC
; (assuming FUNCTION didn't store it somewhere).
(defun map-over-terminated-macptrs (function)
  (declare (fixnum *gc-event-status-bits*))
  (when (logbitp $gc-finalize-macptrs-bit *gc-event-status-bits*)
    (let ((done? nil))
      (unwind-protect
        (let ((p (gcable-ptrs-head)))
          (setq *gc-event-status-bits*
                (the fixnum 
                     (bitclr $gc-finalize-macptrs-bit *gc-event-status-bits*)))
          (loop
            (when (eql 0 p)
              (return))
            (when (eql $flags_terminate_when_ready (macptr-flags p))
              ; We set to $flags_normal BEFORE calling the user function.
              ; Hence, if it aborts a memory leak results.
              ; If we were to wait until after the user function returns
              ; to put in the $flags_normal, then it will get called again
              ; and might try to free something twice: CRASH!
              (setf (macptr-flags p) $flags_normal)
              (unless (funcall function p)
                (setf (macptr-flags p) $flags_terminable)))
            (setq p (macptr.link p)))
          (setq done? t))
        (unless done?
          (setq *gc-event-status-bits*
                (the fixnum
                     (bitset $gc-finalize-macptrs-bit *gc-event-status-bits*))))))))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;
;;; make-terminable-macptr is the user entry point.
;;;

; This table cannot be weak on key since hash tables are reaped before gcable-macptrs.
(defvar *termination-functions-table* (make-hash-table :test 'eql))

(defvar *terminable-macptr-max-id* most-negative-fixnum)
(defvar *free-terminable-macptr-ids* nil)

(defun make-terminable-macptr (macptr termination-function &key master)
  (let* ((id (or (pop *free-terminable-macptr-ids*)
                 (incf *terminable-macptr-max-id*)))
         (p (cons-terminable-macptr macptr id)))
    (setf (gethash id *termination-functions-table*) termination-function
          (gethash nil *termination-functions-table*) nil)       ; clear cache
    (when master
      (register-slave-macptr p master))
    p))

(defun terminable-macptr-p (thing)
  (not (eql $flags_normal (macptr-flags thing))))

(defun terminate-macptrs ()
  (map-over-terminated-macptrs
   #'(lambda (p)
       (let* ((id (macptr.id p))
              (termination-function (gethash id *termination-functions-table*)))
         (if termination-function
           (when (funcall termination-function p)
             (remhash id *termination-functions-table*)
             (remhash p *terminable-slaves-table*)
             (push id *free-terminable-macptr-ids*)
             t)
           (progn
             (cerror "Continue." "Can't find ~s in ~s"
                     p '*termination-functions-table*)
             t))))))

(defun deactivate-macptr (macptr &key (deactivate-only t))
  (setq macptr (require-type macptr 'macptr))
  (let ((flags (macptr-flags macptr))
        (termination-function nil))
    (unless (eql $flags_normal flags)
      (when (or (eql flags $flags_terminable)
                (eql flags $flags_terminate_when_ready))
        (setf (macptr-flags macptr) $flags_normal)
        (let ((id (macptr.id macptr)))
          (setq termination-function
                (if deactivate-only
                  t
                  (gethash id *termination-functions-table*)))
          (remhash id *termination-functions-table*)
          (push id *free-terminable-macptr-ids*)
          (remhash macptr *terminable-slaves-table*)))
      (if deactivate-only
        termination-function
        (prog1
          (if termination-function
            (funcall termination-function macptr)
            (progn
              (dispose-gcable-macptr macptr)
              (remhash macptr *slave-macptrs-table*)))
          (macptr->dead-macptr macptr))))))

#+ccl-3
(defun macptr->dead-macptr (macptrObject)
  (require-type macptrObject 'macptr)
  (lap-inline ()
    (:variable macptrobject)
    (move.l (varg macptrObject) atemp0)
    (set_vsubtype ($ $v_badptr) atemp0 da))
  macptrObject)
  
#-ccl-3
(defun macptr->dead-macptr (macptrObject)
  (require-type macptrObject 'macptr)
  (lap
    (move.l (varg macptrObject) atemp0)
    (move.b ($ $v_badptr) (atemp0 $v_subtype)))
  macptrObject)

; Call this before save-application.
; It makes no sense to keep terminable macptrs around after that.
; They'll be dead-macptr's then causing lots of grief.
(defun clear-terminable-macptrs ()
  (clrhash *termination-functions-table*)
  (clrhash *slave-macptrs-table*))

)  ; End of #-ppc-target progn

(pushnew 'clear-terminable-macptrs *save-exit-functions*)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;
;;; Backward compatibility for the gc-hook maintenance functions.
;;;

(defun add-pre-gc-hook (hook)
  (add-gc-hook hook :pre-gc))

(defun delete-pre-gc-hook (hook)
  (remove-gc-hook hook :pre-gc))

(defun add-post-gc-hook (hook)
  (add-gc-hook hook :post-gc))

(defun delete-post-gc-hook (hook)
  (remove-gc-hook hook :post-gc))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;
;;; Enabling the ccl::*post-gc-hook* after EGC
;;;

#|  ; These are built in now

(defun post-egc-hook-enabled-p ()
  (declare (fixnum *gc-event-status-bits*))
  (logbitp $gc-post-egc-hook-p *gc-event-status-bits*))

(defun set-post-egc-hook-enabled-p (value)
  (declare (fixnum *gc-event-status-bits*))
  (setq *gc-event-status-bits* 
        (if (setq value (not (null value)))
          (the fixnum (bitset $gc-post-egc-hook-p *gc-event-status-bits*))
          (the fixnum (bitclr $gc-post-egc-hook-p *gc-event-status-bits*))))
  value)

|#
  
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;
;;; Install the hook
;;;

(add-post-gc-hook 'terminate-macptrs)
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3
;;;; END FILE ./reference/ccl/library/macptr-termination.lisp
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4n









;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4n









;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4n









;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4n











\;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1
;;;; BEGIN FILE ./reference/ccl/library/core-files.lisp
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2
;;;
;;; Copyright 2009-2010 Clozure Associates
;;;
;;; Licensed under the Apache License, Version 2.0 (the "License");
;;; you may not use this file except in compliance with the License.
;;; You may obtain a copy of the License at
;;;
;;;     http://www.apache.org/licenses/LICENSE-2.0
;;;
;;; Unless required by applicable law or agreed to in writing, software
;;; distributed under the License is distributed on an "AS IS" BASIS,
;;; WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
;;; See the License for the specific language governing permissions and
;;; limitations under the License.

;; Functions to examine core files.

(in-package :ccl)

#+:linuxx8664-target
(progn


(defconstant $image-nsections 7)
(defconstant $image-data-offset-64 9)
(defconstant $image-header-size 16)

(defconstant $image-sect-code 0)
(defconstant $image-sect-size 4)
(defconstant $image-sect-header-size 8)

(export '(open-core close-core
          core-heap-utilization map-core-areas
          core-q core-l core-w core-b
          core-consp core-symbolp core-functionp core-listp core-nullp core-uvector-p
          core-uvtype core-uvtypep core-uvref core-uvsize
          core-car core-cdr core-object-typecode-type
          core-object-type-key  core-type-string
          copy-from-core core-list
          core-keyword-package core-find-package core-find-symbol
          core-package-names core-package-name
          core-map-symbols
          core-symbol-name core-symbol-value core-symbol-package core-symbol-plist
          core-gethash core-hash-table-count
          core-lfun-name core-lfun-bits core-nth-immediate
          core-find-class
          core-instance-class
          core-instance-p
          core-string=
          core-all-processes core-process-name
          core-find-process-for-id
          core-print
          core-print-call-history
          ))

(eval-when (:compile-toplevel :execute)
  (require "HASHENV" "ccl:xdump;hashenv"))

;; The intended way to use these facilities is to open up a particular core file once,
;; and then repeatedly call functions to examine it.  So for convenience, we keep the
;; core file in a global var, rather than making all user functions take an extra arg.
;; There is nothing intrinsic that would prevent having multiple core files open at once.

(defvar *current-core* nil)


(eval-when (load eval #-BOOTSTRAPPED compile)

(defstruct core-info
  pathname
  sections
  ;; uses either stream or ivector, determined at runtime
  streams
  ivectors
  ;; caches
  symbol-ptrs
  classes-hash-table-ptr
  lfun-names-table-ptr
  process-class
  )
)

(defmethod print-object :around ((core core-info) (stream t))
  (let ((*print-array* nil)
        (*print-simple-bit-vector* nil))
    (call-next-method)))

(declaim (type (or null core-info) *current-core*)
         (ftype (function () core-info) current-core)
         (inline current-core))

(defun current-core ()
  (or *current-core* (require-type *current-core* 'core-info)))

(defun close-core ()
  (let ((core *current-core*))
    (setq *current-core* nil)
    (when core
      (map nil #'close (core-info-streams core))
      (map nil #'unmap-ivector (core-info-ivectors core))
      t)))

;
(defmacro area-loop (with ptrvar &body body)
  (assert (eq with 'with))
  (let ((before (loop while (eq (car body) 'with)
                      nconc (list (pop body) (pop body) (pop body) (pop body)))))
    `(loop ,@before
           for ,ptrvar = (core-q (core-q (kernel-global-address 'all-areas)) target::area.succ)
             then (core-q ,ptrvar target::area.succ)
           until (eq (core-q area-ptr target::area.code) (ash area-void target::fixnum-shift))
           ,@body)))

(def-accessor-macros %svref
  %core-sect.start-addr
  %core-sect.offset
  %core-sect.end-addr
  %core-sect.ivector
  %core-sect.stream)

(defun make-core-sect (&key start end offset ivector stream)
  (vector start offset end ivector stream))


(defvar *core-info-class* 'core-info)

;; TODO: after load sections, check if highest heap address is a fixnum, and
;; arrange to use fixnum-only versions of the reading functions.
(defun open-core (pathname &key (image nil) (method :mmap) (core-info nil))
  (when *current-core*
    (close-core))
  (let* ((sections (read-sections pathname))
         (core (require-type (or core-info (make-instance *core-info-class*)) 'core-info)))
    (setf (core-info-pathname core) pathname)
    (setf (core-info-sections core) sections)
    (setf (core-info-symbol-ptrs core) nil)
    (setf (core-info-classes-hash-table-ptr core) nil)
    (setf (core-info-lfun-names-table-ptr core) nil)
    (setf (core-info-process-class core) nil)
    (setf (core-info-ivectors core) nil)
    (setf (core-info-streams core) nil)
    (ecase method
      (:mmap   (let ((mapped-vector (map-file-to-ivector pathname '(unsigned-byte 8))))
                 (multiple-value-bind (vector offset) (array-data-and-offset mapped-vector)
                   (push mapped-vector (core-info-ivectors core))
                   (loop for sect across sections
                         do (incf (%core-sect.offset sect) offset)
                         do (setf (%core-sect.ivector sect) vector)))))
      (:stream (let ((stream (open pathname :element-type '(unsigned-byte 8)
                                   :sharing :lock)))
                 (push stream (core-info-streams core))
                 (loop for sect across sections do (setf (%core-sect.stream sect) stream)))))
    (setq *current-core* core))
  ;;(unless (every (lambda (sect) (fixnump (car sect))) (core-info-sections (current-core)))
  ;;  (error "Non-fixnum addresses not supported"))
  (when (and image
             (area-loop with area-ptr
                        thereis (and (eq (core-q area-ptr target::area.code)
                                         (ash area-readonly target::fixnum-shift))
                                     (< (core-q area-ptr target::area.low) (core-q area-ptr target::area.active))
                                     (not (core-section-for-address (core-q area-ptr target::area.low))))))
    ;; Have a missing readonly section, and an image file that might contain it.
    (add-core-sections-from-image image))
  pathname)

#-run-external-program-to-find-sections
(defun sections-from-elf-file (pathname)
  (let* ((fd (fd-open (defaulted-native-namestring pathname) #$O_RDONLY)))
    (if (< fd 0)
      (signal-file-error fd pathname)
      (let* ((size (fd-size fd))
             (map (#_mmap +null-ptr+ size #$PROT_READ #$MAP_PRIVATE fd 0)))
        (if (eql map #$MAP_FAILED)
          (progn
            (fd-close fd)
            (error "Can't memory map file ~a." pathname))
          (unwind-protect
               (progn
                 (unless (and (eql (%get-unsigned-byte map 0) #x7f)
                              (eql (%get-unsigned-byte map 1) (char-code #\E))
                              (eql (%get-unsigned-byte map 2) (char-code #\L))
                              (eql (%get-unsigned-byte map 3) (char-code #\F))
                              (eql (pref map
                                         #+64-bit-host #>Elf64_Ehdr.e_type
                                         #-64-bit-host #>Elf32_Ehdr.e_type)
                                   #$ET_CORE))
                   (error "Not an ELF core file: ~a." pathname))
                 (let* ((nsects (pref map
                                      #+64-bit-host #>Elf64_Ehdr.e_shnum
                                      #-64-bit-host #>Elf32_Ehdr.e_shnum))
                        (sectptr (%inc-ptr map
                                           (pref map
                                                 #+64-bit-host #>Elf64_Ehdr.e_shoff
                                                 #-64-bit-host #>Elf32_Ehdr.e_shoff)))
                        (core-sections ()))
                   (dotimes (i nsects (sort (coerce core-sections 'vector)
                                            #'<
                                            :key (lambda (x) (%core-sect.start-addr x))))
                     (when (logtest #$SHF_ALLOC (pref sectptr
                                                      #+64-bit-host #>Elf64_Shdr.sh_flags
                                                      #-64-bit-host #>Elf32_Shdr.sh_flags))
                       (let* ((start (pref sectptr
                                           #+64-bit-host #>Elf64_Shdr.sh_addr
                                           #-64-bit-host #>Elf32_Shdr.sh_addr))
                              (end (+ start (pref sectptr
                                           #+64-bit-host #>Elf64_Shdr.sh_size
                                           #-64-bit-host #>Elf32_Shdr.sh_size)))
                              (offset (pref sectptr
                                           #+64-bit-host #>Elf64_Shdr.sh_offset
                                           #-64-bit-host #>Elf32_Shdr.sh_offset)))
                         (push (make-core-sect :start start :end end :offset offset)
                               core-sections)))
                     (%incf-ptr sectptr (record-length #+64-bit-host #>Elf64_Shdr
                                                       #-64-bit-host #>Elf32_Shdr)))))
            (#_munmap map size)
            (fd-close fd)))))))
                                             
                       
                       
                   
    
    
;; Kinda stupid to call external program for this...
(defun read-sections (pathname)
  #-run-external-program-to-find-sections (sections-from-elf-file pathname)
  #+run-external-program-to-find-sections
  (flet ((split (line start end)
           (loop while (setq start (position-if-not #'whitespacep line :start start :end end))
                 as match = (cdr (assq (char line start) '((#\[ . #\]) (#\( . #\)) (#\< . #\>))))
                 as next = (if match
                             (1+ (or (position match line :start (1+ start) :end end)
                                     (error "Unmatched ~c at position ~s" (char line start) start)))
                             (or (position-if #'whitespacep line :start start :end end) end))
                 collect (subseq line start next)
                 do (setq start next))))
    (let* ((file (defaulted-native-namestring pathname))
           (string (with-output-to-string (output)
                     #+readelf (ccl:run-program "readelf" `("--sections" "--wide" ,file) :output output)
                     #-readelf (ccl:run-program "objdump" `("-h" "-w" ,file) :output output)))
           (header-pos (or #+readelf (position #\[ string)
                           #-readelf (search "Idx Name" string)
                           (error "Cannot parse: ~%~a" string)))
           (sections (loop
                       for start = (1+ (position #\newline string :start header-pos)) then (1+ end)
                       for end = (or (position #\newline string :start start) (length string))
                       while (and (< start end) (find (aref string start) " 123456789"))
                       nconc
                       (multiple-value-bind (name address filepos size)
                         #+readelf
                         (destructuring-bind (number name type address filepos size &rest flags)
                             (split string start end)
                           (declare (ignore flags))
                           (assert (and (eql (char number 0) #\[) (eql (char number (1- (length number))) #\])))
                           (setq number (read-from-string number :start 1 :end (1- (length number))))
                           (when (eql number 0)
                             (shiftf size filepos address type))
                           (values name address filepos size))
                         #-readelf
                         (destructuring-bind (number name size address lma filepos &rest flags)
                             (split string start end)
                           (declare (ignore lma flags))
                           (parse-integer number :radix 10) ;; error checking only
                           (values name address filepos size))
                         (unless (or (equal name "") (eql (char name 0) #\.))
                           (setq address (parse-integer address :radix 16))
                           (setq filepos  (parse-integer filepos :radix 16))
                           (setq size (parse-integer size :radix 16))
                           (unless (eql size 0)
                             (list (list address filepos size)))))))
           (sections (sort sections #'< :key #'car));; sort by address
           (sections (let ((last (car (last sections))))  ;; hack for loop below
                       (nconc sections (list (list (+ (car last) (caddr last) 1) 0 0)))))
           (sections (loop
                       with cur-address = -1
                       with cur-filepos = -1
                       with cur-end = cur-address
                       for (address filepos size) in sections
                       unless (or (= (+ cur-filepos (- address cur-address)) filepos)
                                  (= cur-address cur-end))
                         collect (make-core-sect
                                      :start cur-address
                                      :end cur-end
                                      :offset cur-filepos)
                       do (if (= (+ cur-filepos (- address cur-address)) filepos)
                            (setq cur-end (max (+ address size) cur-end))
                            (progn
                              (assert (<= cur-end address));; no overlap.
                              (setq cur-address address cur-filepos filepos cur-end (+ address size)))))))
      (coerce sections 'vector))))


(defun add-core-sections-from-image (pathname)
  (with-open-file (header-stream  pathname :element-type '(signed-byte 32))
    (labels ((read-at (&optional pos)
               (when pos (file-position header-stream pos))
               (read-byte header-stream))
             (readn (pos) (+ (logand #xFFFFFFFF (read-at pos)) (ash (read-at) 32))))
      (let* ((sig '(#x4F70656E #x4D434C49 #x6D616765 #x46696C65))
             (end (file-length header-stream))
             (page-mask (1- *host-page-size*))
             (header (+ end (/ (read-at (1- end)) 4))))
        (unless (progn
                  (file-position header-stream (- end 4))
                  (loop repeat 3 as s in sig always (eql s (read-at))))
          (error "~s is not a ccl image file" pathname))
        (assert (and (integerp header) (< header end) (<= 0 header)))
        (file-position header-stream header)
        (assert (loop for s in sig always (eql s (read-at))))
        (let* ((nsections (read-at (+ header $image-nsections)))
               (offset
                #+64-bit-host (/ (+ (ash (read-at (+ header $image-data-offset-64)) 32)
                                    (logand #xFFFFFFFF (read-at))) 4)
                #-64-bit-host 0)
               (sections (loop repeat nsections
                               for pos upfrom (+ header $image-header-size) by $image-sect-header-size
                               for epos = (* 4 (+ header $image-header-size
                                                         (* nsections $image-sect-header-size)
                                                         offset))
                                 then (+ fpos mem-size)
                               as fpos = (logandc2 (+ epos page-mask) page-mask)
                               as mem-size = (readn (+ pos $image-sect-size))
                               when (eq (readn (+ pos $image-sect-code))
                                        (ash area-readonly target::fixnum-shift))
                                 collect (cons fpos mem-size)))
               (new (area-loop with area-ptr
                               when (and (eq (core-q area-ptr target::area.code)
                                             (ash area-readonly target::fixnum-shift))
                                         (< (core-q area-ptr target::area.low)
                                            (core-q area-ptr target::area.active))
                                         (not (core-section-for-address (core-q area-ptr target::area.low))))
                               collect (let* ((size (- (core-q area-ptr target::area.active)
                                                       (core-q area-ptr target::area.low)))
                                              (matches (remove size sections :key 'cdr :test-not 'eql)))

                                         ;; **** should just do nothing if not found
                                         (assert (eql (length matches) 1))
                                         (make-core-sect
                                          :start (core-q area-ptr target::area.low)
                                          :end (core-q area-ptr target::area.active)
                                          :offset (caar matches)))))
               (image-stream (open pathname :element-type '(unsigned-byte 8) :sharing :lock)))
          (unwind-protect
               (let ((core (current-core)))
                 (setf (core-info-sections core)
                       (sort (concatenate 'vector new (core-info-sections core))
                             #'< :key (lambda (s) (%core-sect.start-addr s))))
                 (push image-stream (core-info-streams core))
                 (loop for s in new do (setf (%core-sect.stream s) image-stream))
                 (setq image-stream nil))
            (when image-stream (close image-stream :abort t))))))))


(declaim (inline core-ivector-readb core-ivector-readw core-ivector-readl core-ivector-readq
                 core-stream-readb core-stream-readw core-stream-readl core-stream-readq))
(declaim (ftype (function (t t) (unsigned-byte 8)) core-ivector-readb core-stream-readb)
         (ftype (function (t t) (unsigned-byte 16)) core-ivector-readw core-stream-readw)
         (ftype (function (t t) (unsigned-byte 32)) core-ivector-readl core-stream-readl)
         (ftype (function (t t) (unsigned-byte 64)) core-ivector-readq core-stream-readq)
         (ftype (function (simple-vector) fixnum) core-section-for-address))

(define-condition invalid-core-address (simple-error)
  ()
  (:default-initargs :format-control "Unknown core address x~x"))

(declaim (inline core-section-for-address))
(defun core-section-for-address (address)
  (loop with sections = (core-info-sections (current-core))
        with len fixnum = (length sections)
        with low fixnum = -1
        with high fixnum = len
        do (let ((half (the fixnum (ash (%i+ high low) -1))))
             (declare (fixnum half))
             (when (eq half low)
               (return (and (%i<= 0 half)
                            (%i< half len)
                            (let ((sect (%svref sections half)))
                              (and (< address (%core-sect.end-addr (%svref sections half))) sect)))))
             (let ((sect (%svref sections half)))
               (if (%i<= (%core-sect.start-addr sect) address)
                 (setq low half)
                 (setq high half))))))

(defun core-heap-address-p (address)
  (core-section-for-address address))


(defun core-stream-readb (s offset)
  (declare (type basic-input-stream s) (optimize (speed 3) (safety 0)))
  (when offset (stream-position s offset))
  (read-byte s))

(defun core-stream-readw (s offset)
  (declare (type basic-input-stream s) (optimize (speed 3) (safety 0)))
  (when offset (stream-position s offset))
  (%i+ (core-stream-readb s nil) (%ilsl 8 (core-stream-readb s nil))))

(defun core-stream-readl (s offset)
  (declare (type basic-input-stream s) (optimize (speed 3) (safety 0)))
  (when offset (stream-position s offset))
  (%i+ (core-stream-readw s nil) (%ilsl 16 (core-stream-readw s nil))))

(defun core-stream-readq (s offset)
  (declare (type basic-input-stream s) (optimize (speed 3) (safety 0)))
  (when offset (stream-position s offset))
  (+ (core-stream-readl s nil) (ash (the fixnum (core-stream-readl s nil)) 32)))

(defun core-ivector-readb (vec offset)
  (declare (type (simple-array (unsigned-byte 8) (*)) vec) (fixnum offset)
           (optimize (speed 3) (safety 0)))
  (aref vec offset))

(defun core-ivector-readw (vec offset)
  (declare (optimize (speed 3) (safety 0)))
  (%i+ (core-ivector-readb vec offset) (%ilsl 8 (core-ivector-readb vec (+ offset 1)))))

(defun core-ivector-readl (vec offset)
  (declare (optimize (speed 3) (safety 0)))
  (%i+ (core-ivector-readw vec offset) (%ilsl 16 (core-ivector-readw vec (+ offset 2)))))

(defun core-ivector-readq (vec offset)
  (declare (optimize (speed 3) (safety 0)))
  (+ (core-ivector-readl vec offset) (ash (core-ivector-readl vec (+ offset 4)) 32)))


(defun core-q (address &optional (offset 0))
  (declare (optimize (speed 3) (safety 0)))
  (incf address offset)
  (let* ((sect (or (core-section-for-address address)
                   (error 'invalid-core-address
                          :format-arguments (list address))))
         (ivector (%core-sect.ivector sect))
         (pos (+ (%core-sect.offset sect) (- address (%core-sect.start-addr sect)))))
    (if ivector
      (core-ivector-readq ivector pos)
      (core-stream-readq (%core-sect.stream sect) pos))))


(defun core-l (address &optional (offset 0))
  (declare (optimize (speed 3) (safety 0)))
  (incf address offset)
  (let* ((sect (or (core-section-for-address address)
                   (error 'invalid-core-address
                          :format-arguments (list address))))
         (ivector (%core-sect.ivector sect))
         (pos (+ (%core-sect.offset sect) (- address (%core-sect.start-addr sect)))))
    (if ivector
      (core-ivector-readl ivector pos)
      (core-stream-readl (%core-sect.stream sect) pos))))

(defun core-w (address &optional (offset 0))
  (declare (optimize (speed 3) (safety 0)))
  (incf address offset)
  (let* ((sect (or (core-section-for-address address)
                   (error 'invalid-core-address
                          :format-arguments (list address))))
         (ivector (%core-sect.ivector sect))
         (pos (+ (%core-sect.offset sect) (- address (%core-sect.start-addr sect)))))
    (if ivector
      (core-ivector-readw ivector pos)
      (core-stream-readw (%core-sect.stream sect) pos))))

(defun core-b (address &optional (offset 0))
  (declare (optimize (speed 3) (safety 0)))
  (incf address offset)
  (let* ((sect (or (core-section-for-address address)
                   (error 'invalid-core-address
                          :format-arguments (list address))))
         (ivector (%core-sect.ivector sect))
         (pos (+ (%core-sect.offset sect) (- address (%core-sect.start-addr sect)))))
    (if ivector
      (core-ivector-readb ivector pos)
      (core-stream-readb (%core-sect.stream sect) pos))))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
;; general utilities

;; NIL is constant, assume is same in core as here.


(defun nil-relative-symbol-address (sym)
  (+ (target-nil-value)
     #x20  ;;; dunno why
     (* (or (position sym x86::*x86-nil-relative-symbols* :test #'eq)
            (error "Not a nil-relative symbol ~s" sym))
        target::symbol.size)
     (- target::fulltag-symbol target::fulltag-nil)))

(defun core-area-name (code)
  (or (heap-area-name code)
      (and (integerp code)
           (not (logtest code (1- (ash 1 target::fixnum-shift))))
           (heap-area-name (ash code (- target::fixnum-shift))))))

(defx86lapfunction %%raw-obj ((address arg_z))
  (unbox-fixnum address arg_z)
  (single-value-return))

(declaim (inline uvheader-p uvheader-typecode uvheader-size))

(defun uvheader-p (header)
  (let ((tag (logand header target::fulltagmask)))
    (declare (fixnum tag))
    (and (<= target::fulltag-nodeheader-0 tag)
         (<= tag target::fulltag-immheader-2)
         (neq tag target::fulltag-odd-fixnum))))

(defun uvheader-typecode (header)
  (the fixnum (logand #xFF header)))

(defun uvheader-size (header)
  (the fixnum (ash header (- target::num-subtag-bits))))

(defun uvheader-byte-size (header)
  (x8664::x8664-misc-byte-count (uvheader-typecode header) (uvheader-size header)))

(defun uvheader-type (header)
  (let* ((typecode (uvheader-typecode header))
         (low4 (logand typecode target::fulltagmask))
         (high4 (ash typecode (- target::ntagbits))))
    (declare (type (unsigned-byte 8) typecode)
             (type (unsigned-byte 4) low4 high4))
    (cond ((eql low4 x8664::fulltag-immheader-0)
           (%svref *immheader-0-types* high4))
          ((eql low4 x8664::fulltag-immheader-1)
           (%svref *immheader-1-types* high4))
          ((eql low4 x8664::fulltag-immheader-2)
           (%svref *immheader-2-types* high4))
          ((eql low4 x8664::fulltag-nodeheader-0)
           (%svref *nodeheader-0-types* high4))
          ((eql low4 x8664::fulltag-nodeheader-1)
           (%svref *nodeheader-1-types* high4))
          (t 'bogus))))

(defun uvheader-type-typecode (symbol &aux pos)
  (unless (eq symbol 'bogus)
    (cond ((setq pos (position symbol *immheader-0-types*))
           (%ilogior (%ilsl target::ntagbits pos) target::fulltag-immheader-0))
          ((setq pos (position symbol *immheader-1-types*))
           (%ilogior (%ilsl target::ntagbits pos) target::fulltag-immheader-1))
          ((setq pos (position symbol *immheader-2-types*))
           (%ilogior (%ilsl target::ntagbits pos) target::fulltag-immheader-2))
          ((setq pos (position symbol *nodeheader-0-types*))
           (%ilogior (%ilsl target::ntagbits pos) target::fulltag-nodeheader-0))
          ((setq pos (position symbol *nodeheader-1-types*))
           (%ilogior (%ilsl target::ntagbits pos) target::fulltag-nodeheader-1)))))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
;;  Core heap


(defun core-heap-area-code (area)
  (let ((code (heap-area-code area))
        (dynamic (ash (core-q (core-q (core-q (kernel-global-address 'all-areas))
                                      target::area.succ)
                              target::area.code)
                      (- target::fixnum-shift))))
    (if (or (fixnump area)
            (eq dynamic area-dynamic)
            ;; account for watched area having been inserted
            (<= code area-watched))
      code
      (1- code))))

(defun map-core-areas (function &key area)
  (if (eq area :tenured)
    (map-core-area (core-q (kernel-global-address 'tenured-area)) function)
    (area-loop with area-ptr
               with area = (cond ((or (eq area t) (eq area nil)) nil)
                                 ((consp area) (mapcar #'core-heap-area-code area))
                                 (t (list (core-heap-area-code area))))
               as code = (ash (core-q area-ptr target::area.code) (- target::fixnum-shift))
               do (when (and (<= area-readonly code)
                             (<= code area-dynamic)
                             (or (null area) (member code area))
                             (< (core-q area-ptr target::area.low) (core-q area-ptr target::area.active)))
                    #+debug
                    (format t "~& AREA at x~x, type = ~a low = x~x active = x~x (size = x~x out of x~x)"
                            area-ptr (core-area-name code)
                            (core-q area-ptr target::area.low)
                            (core-q area-ptr target::area.active)
                            (- (core-q area-ptr target::area.active) (core-q area-ptr target::area.low))
                            (- (core-q area-ptr target::area.high) (core-q area-ptr target::area.low)))
                    (map-core-area area-ptr function)))))

(defun map-core-area (area-ptr fun)
  (map-core-region (core-q area-ptr target::area.low)
		   (core-q area-ptr target::area.active)
		   fun))

(defun map-core-region (ptr end fun)
  (loop
    while (< ptr end) as header = (core-q ptr)
    do (cond ((uvheader-p header)
              (let ((subtag (uvheader-typecode header)))
                (funcall fun
                         (+ ptr (cond ((eq subtag target::subtag-symbol) target::fulltag-symbol)
                                      ((eq subtag target::subtag-function) target::fulltag-function)
                                      (t target::fulltag-misc)))))
              (let* ((bytes (uvheader-byte-size header))
                     (total (logandc2 (%i+ bytes (+ target::node-size (1- target::dnode-size)))
                                      (1- target::dnode-size))))
                (declare (fixnum bytes total))
                (incf ptr total)))
             (t
              (funcall fun (+ ptr target::fulltag-cons))
              (incf ptr target::cons.size)))))


(declaim (inline core-consp core-symbolp core-functionp core-listp core-nullp))

(defun core-consp (ptr)
  (eq (logand ptr target::fulltagmask) target::fulltag-cons))

(defun core-symbolp (ptr)
  (eq (logand ptr target::fulltagmask) target::fulltag-symbol))

(defun core-functionp (ptr)
  (eq (logand ptr target::fulltagmask) target::fulltag-function))

(defun core-listp (ptr)
  (eq (logand ptr target::tagmask) target::tag-list))

(defun core-nullp (obj)
  (eq (logand obj target::fulltagmask) target::fulltag-nil))

;; uvector utilities
(declaim (inline core-uvector-p core-uvheader core-uvtypecode core-uvtype))

(defun core-uvector-p (ptr)
  (%i>= (logand ptr target::fulltagmask) target::fulltag-misc))

(defun core-uvheader (vec-ptr)
  (core-q (logandc2 vec-ptr target::fulltagmask)))

(defun core-uvtypecode (vec-ptr)
  (uvheader-typecode (core-uvheader vec-ptr)))

(defun core-uvtype (vec-ptr)
  (uvheader-type (core-uvheader vec-ptr)))

(defmacro core-uvtypep (vec-ptr type &aux temp)
  (when (keywordp type)
    (setq type (type-keyword-code type)))
  (when (and (or (symbolp (setq temp type))
                 (and (quoted-form-p type)
                      (symbolp (setq temp (cadr type)))))
             (setq temp (find-symbol (symbol-name temp) :ccl))
             (setq temp (uvheader-type-typecode temp)))
    (setq type temp))
  (when (constant-symbol-p type)
    (setq temp (symbol-value type))
    (when (<= 0 temp #xFF) (setq type temp)))
  `(let ((vec-ptr ,vec-ptr))
     (and (core-uvector-p vec-ptr)
          (eq (core-uvtypecode vec-ptr) ,type))))

(defun core-uvref (vec-ptr index)
  (let* ((header (core-uvheader vec-ptr))
         (addr (+ (logandc2 vec-ptr target::fulltagmask) target::node-size))
         (typecode (uvheader-typecode header))
         (tag (%ilogand typecode target::fulltagmask))
         (len (uvheader-size header)))
    (assert (< -1 index len))
    (cond ((or (eq tag target::fulltag-nodeheader-0)
               (eq tag target::fulltag-nodeheader-1))
           (core-q addr (%ilsl target::word-shift index)))
          ((eq tag target::ivector-class-64-bit)
           (cond ((eq typecode target::subtag-double-float-vector)
                  (error "~s not implemented yet" 'target::subtag-double-float-vector))
                 (t
                  (core-q addr (%ilsl target::word-shift index)))))
          ((eq tag target::ivector-class-32-bit)
           (cond ((eq typecode target::subtag-simple-base-string)
                  (%code-char (core-l addr (%ilsl 2 index))))
                 ((eq typecode target::subtag-single-float-vector)
                  (error "~s not implemented yet" 'target::subtag-single-float-vector))
                 (t (core-l addr (%ilsl 2 index)))))
          ((eq typecode target::subtag-bit-vector)
           (let ((byte (core-b addr (%iasr 3 (%i+ index 7)))))
             (error "not implemented, for ~b" byte)))
          ((>= typecode target::min-8-bit-ivector-subtag)
           (core-b addr index))
          (t (core-w addr (%ilsl 1 index))))))

(defun core-uvsize (vec-ptr)
  (uvheader-size (core-uvheader vec-ptr)))

(defun core-car (obj)
  (assert (core-listp obj))
  (core-q obj target::cons.car))

(defun core-cdr (obj)
  (assert (core-listp obj))
  (core-q obj target::cons.cdr))

(defun core-object-typecode-type (obj)
  (let ((fulltag (logand obj target::fulltagmask)))
    (cond ((eq fulltag target::fulltag-cons) 'cons)
          ((eq fulltag target::fulltag-nil) 'null)
          ((eq (logand fulltag target::tagmask) target::tag-fixnum) 'fixnum)
          ((and (or (eq fulltag target::fulltag-imm-0)
                    (eq fulltag target::fulltag-imm-1))
                (fixnump obj))
           ;; Assumes we're running on same architecture as core file.
           (type-of (%%raw-obj obj)))
          ((eq (logand fulltag target::tagmask) target::tag-tra) 'tagged-return-address)
          ((eq fulltag target::fulltag-misc)
           ;; (core-uvtype obj)
           (handler-case (core-uvtype obj) (invalid-core-address () 'unmapped)))
          ((eq fulltag target::fulltag-symbol) 'symbol)
          ;; TODO: Could get hairier based on lfun-bits, but usually don't care.
          ((eq fulltag target::fulltag-function) 'function)
          (t (cerror "treat as ~*~s" "Invalid object tag at #x~x" obj 'bogus)
           'bogus))))

(defun core-object-type-key (obj)
  ;; Returns either a symbol (for built-in types) or a pointer to type symbol or class.
  ;; Whatever it returns must be suitable for use in an eql hash table; use core-type-string
  ;; to get a printable rep.
  (let ((type (core-object-typecode-type obj)))
    (case type
      (function (core-function-type obj))
      (internal-structure (core-istruct-type obj))
      (structure (core-struct-type obj))
      (instance (core-instance-type obj))
      (t type))))

(defun core-function-type (obj)
  (and (core-uvtypep obj :function)
       (let ((bits (core-lfun-bits obj)))
         (declare (fixnum bits))
         (or (if (logbitp $lfbits-trampoline-bit bits)
               (let* ((inner-fn (core-closure-function obj))
                      (inner-bits (core-lfun-bits inner-fn)))
                 (if (neq inner-fn obj)
                   (if (logbitp $lfbits-method-bit inner-bits)
                     'compiled-lexical-closure
                     (unless (logbitp $lfbits-gfn-bit inner-bits)
                       (if (logbitp $lfbits-cm-bit inner-bits)
                         'combined-method
                         'compiled-lexical-closure)))
                   'compiled-lexical-closure))
               (if (logbitp  $lfbits-method-bit bits)
                 'method-function
                 (unless (logbitp $lfbits-gfn-bit bits)
                   (if (logbitp $lfbits-cm-bit bits)
                     'combined-method
                     'function))))
             (core-class-name
              (core-uvref
               (core-nth-immediate obj gf.instance.class-wrapper)
               %wrapper-class))))))

(defun core-type-string (object-type)
  (with-output-to-string (s)
    (if (fixnump object-type)
      (core-print object-type s)
      (prin1 object-type s))))

(defun core-istruct-type (obj)
  (and (core-uvtypep obj :istruct)
       (core-car (core-uvref obj 0))))
       
(defun core-struct-type (obj)
  (and (core-uvtypep obj :struct)
       (core-uvref (core-car (core-uvref obj 0)) 1)))

(defun core-instance-type (obj)
  (and (core-uvtypep obj :instance)
       (core-class-name (core-instance-class obj))))

(defun core-class-name (class)
  (core-uvref (core-uvref class instance.slots) %class.name))

(defun core-object-type-and-size (obj)
  (let ((fulltag (logand obj target::fulltagmask)))
    (if (eq fulltag target::fulltag-cons)
      (values 'cons target::dnode-size target::dnode-size)
      (if (%i<= target::fulltag-misc fulltag)
        (let* ((header (core-uvheader obj))
               (logsize (uvheader-byte-size header))
               ;; total including header and alignment.
               (total (logandc2 (+ logsize target::node-size (1- target::dnode-size))
                                (1- target::dnode-size))))
          (values (uvheader-type header) logsize total))))))

(defun core-heap-utilization (&key (stream *debug-io*) area unit (sort :size) classes (threshold 0.00005))
  (let* ((obj-hash (make-hash-table :shared nil))
         (slotv-hash (make-hash-table :shared nil))
         (all nil))
    (map-core-areas (lambda (obj &aux (hash obj-hash))
                      (multiple-value-bind (type logsize physsize) (core-object-type-and-size obj)
                        (when classes
                          (when (core-uvtypep obj :slot-vector)
                            (setq hash slotv-hash
                                  obj (core-uvref obj slot-vector.instance)))
                          (setq type (core-object-type-key obj)))
                        (let ((a (or (gethash type hash)
                                     (setf (gethash type hash) (list 0 0 0)))))
                          (incf (car a))
                          (incf (cadr a) logsize)
                          (incf (caddr a) physsize))))
                    :area area)
    (maphash (lambda (type data)
               (push (cons (core-type-string type) data) all))
             obj-hash)
    (maphash (lambda (type data)
               (push (cons (concatenate 'string (core-type-string type) " slot-vector") data) all))
             slotv-hash)
    (report-heap-utilization all :stream stream :unit unit :sort sort :threshold threshold)))


(defstruct unresolved-address address)

(defmethod print-object ((obj unresolved-address) stream)
  (let* ((address (unresolved-address-address obj)))
    (if (and (core-uvector-p address)
             (not (handler-case (core-uvheader address) (invalid-core-address () nil))))
      (format stream "#<Unmapped #x~x >" address)
      (format stream "#<Core ~A~@[[~d]~] #x~x >"
              (or (ignore-errors (core-type-string (core-object-type-key address)))
                  (core-object-typecode-type address))
              (and (core-uvector-p address) (core-uvsize address))
            address))))

(defun copy-from-core (obj &key (depth 1))
  (check-type depth (integer 0))
  (when (unresolved-address-p obj)
    (setq obj (unresolved-address-address obj)))
  (let ((fulltag (logand obj target::fulltagmask)))
    (cond ((eq fulltag target::fulltag-nil) nil)
          ((eq (logand fulltag target::tagmask) target::tag-fixnum)
           (ash obj (- target::fixnum-shift)))
          ((and (fixnump obj)
                (or (eq fulltag target::fulltag-imm-0)
                    (eq fulltag target::fulltag-imm-1)))
           (%%raw-obj obj))
          ((< (decf depth) 0)
           (make-unresolved-address :address obj))
          ((and (%i<= target::fulltag-misc fulltag)
                (handler-case (core-uvheader obj) (invalid-core-address nil)))
           (or (and (core-uvtypep obj :package)
                    (find-package (core-package-name obj)))
               (let ((v (%copy-uvector-from-core obj depth)))
                 (when (and (symbolp v) (<= depth 1))
                   ;; Need to fix up the package slot else it's not useful
                   (let ((pp (%svref (symptr->symvector v) target::symbol.package-predicate-cell)))
                     (when (unresolved-address-p pp)
                       (setq pp (copy-from-core pp :depth 1)))
                     (when (and (consp pp) (unresolved-address-p (car pp)))
                       (let ((pkg (unresolved-address-address (car pp))))
                         (when (and (core-uvtypep pkg :package)
                                    (setq pkg (find-package (core-package-name pkg))))
                           (setf (car pp) pkg))))
                     (setf (%svref (symptr->symvector v) target::symbol.package-predicate-cell) pp))
                   ;; ditto for pname
                   (let ((pp (%svref (symptr->symvector v) target::symbol.pname-cell)))
                     (when (unresolved-address-p pp)
                       (setf (%svref (symptr->symvector v) target::symbol.pname-cell)
                             (copy-from-core pp :depth 1)))))
                 v)))
          ((eq fulltag target::fulltag-cons)
           (cons (copy-from-core (core-car obj) :depth depth)
                 (copy-from-core (core-cdr obj) :depth depth)))
          (t (make-unresolved-address :address obj)))))

(defun %copy-uvector-from-core (vec-ptr depth)
  (let* ((header (core-uvheader vec-ptr))
         (addr (+ (logandc2 vec-ptr target::fulltagmask) target::node-size))
         (typecode (uvheader-typecode header))
         (tag (logand typecode target::fulltagmask))
         (len (uvheader-size header))
         (vec (%alloc-misc len typecode)))
    (declare (type fixnum typecode tag len))
    (cond ((or (eq tag target::fulltag-nodeheader-0)
               (eq tag target::fulltag-nodeheader-1))
           (when (eq typecode target::subtag-function)
             ;; Don't bother copying the code for now
             (let ((skip (core-l addr)))
	       (declare (fixnum skip))
               (assert (<= 0 skip len))
               (incf addr (ash skip target::word-shift))
               (decf len skip)))
           (dotimes (i len)
	     (declare (fixnum i))
             (setf (%svref vec i)
                   (copy-from-core (core-q addr (%ilsl target::word-shift i)) :depth depth)))
           (let ((ptrtag (logand vec-ptr target::fulltagmask)))
             (cond ((eq ptrtag target::fulltag-symbol)
                    (%symvector->symptr vec))
                   ((eq ptrtag target::fulltag-function)
                    (%function-vector-to-function vec))
                   (t vec))))
          ((eq tag target::ivector-class-64-bit)
           (cond ((eq typecode target::subtag-double-float-vector)
                  (warn "~s not implemented yet" 'target::subtag-double-float-vector)
                  (make-unresolved-address :address vec-ptr))
                 (t
                  (dotimes (i len vec)
                    (setf (uvref vec i) (core-q addr (%ilsl target::word-shift i)))))))
          ((eq tag target::ivector-class-32-bit)
           (cond ((eq typecode target::subtag-simple-base-string)
                  (dotimes (i len vec)
                    (setf (uvref vec i) (%code-char (core-l addr (%ilsl 2 i))))))
                 ((eq typecode target::subtag-single-float-vector)
                  (warn "~s not implemented yet" 'target::subtag-single-float-vector)
                  (make-unresolved-address :address vec-ptr))
                 (t
                  (dotimes (i len vec)
                    (setf (uvref vec i) (core-l addr (%ilsl 2 i)))))))
          ((eq typecode target::subtag-bit-vector)
           (warn "bit vector not implemented yet")
           (make-unresolved-address :address vec-ptr))
          ((>= typecode target::min-8-bit-ivector-subtag)
           (dotimes (i len vec)
             (setf (uvref vec i) (core-b addr i))))
          (t
           (dotimes (i len vec)
             (setf (uvref vec i) (core-w addr (%ilsl 1 i))))))))

(defun map-core-pointers (fn &key area)
  (map-core-areas (lambda (obj)
                    (cond ((core-consp obj)
                           (funcall fn (core-car obj) obj 0)
                           (funcall fn (core-cdr obj) obj 1))
                          (t
                           (let* ((header (core-uvheader obj))
                                  (subtag (logand header target::fulltagmask)))
                             (when (or (eq subtag target::fulltag-nodeheader-0)
                                       (eq subtag target::fulltag-nodeheader-1))
                               (let* ((typecode (uvheader-typecode header))
                                      (len (uvheader-size header))
                                      (addr (+ (logandc2 obj target::fulltagmask) target::node-size)))
                                 (declare (fixnum typecode len))
                                 (when (eq typecode target::subtag-function)
                                   (let ((skip (core-l addr)))
                                     (declare (fixnum skip))
                                     (assert (<= 0 skip len))
                                     (incf addr (%ilsl target::word-shift skip))
                                     (decf len skip)))
                                 (dotimes (i len)
                                   (funcall fn (core-q addr (%ilsl target::word-shift i)) obj i))))))))
                  :area area))

(defun core-find-tra-function (tra)
  (assert (eq (logand tra target::tagmask) target::tag-tra))
  (map-core-areas (lambda (obj)
                    (when (core-uvtypep obj :function)
                      (let* ((addr (+ (logandc2 obj target::fulltagmask) target::node-size))
                             (skip  (core-l addr))
                             (offset (- tra addr)))
                        (when (<= 0 offset (ash skip target::word-shift))
                          (return-from core-find-tra-function (values obj (+ offset (- target::node-size
                                                                                       (logand obj target::fulltagmask)))))))))))

(defun core-instance-class (obj)
  (when (core-uvtypep obj :slot-vector)
    (setq obj (core-uvref obj slot-vector.instance)))
  (assert (core-uvtypep obj :instance))
  (core-uvref (core-uvref obj instance.class-wrapper) %wrapper-class))

(defun core-instance-p (obj class)
  (and (core-uvtypep obj :instance)
       (labels ((matchp (iclass)
                  (or (eql iclass class)
                      (loop for supers = (core-uvref (core-uvref iclass instance.slots) %class.local-supers)
                              then (core-cdr supers)
                            while (core-consp supers)
                            thereis (matchp (core-car supers))))))
         (matchp (core-instance-class obj)))))


(defun core-symptr (obj)
  (if (core-nullp obj)
    (nil-relative-symbol-address 'nil)
    (when (core-uvtypep obj :symbol)
      (let ((tag (logand obj target::fulltagmask)))
        (unless (eq tag target::fulltag-symbol)
          (incf obj (%i- target::fulltag-symbol tag))))
      obj)))
    
(defun core-symbol-name (obj)
  (when (setq obj (core-symptr obj))
    (copy-from-core (core-q obj target::symbol.pname) :depth 1)))

(defun core-symbol-value (obj)
  (when (setq obj (core-symptr obj))
    (core-q obj target::symbol.vcell)))

(defun core-symbol-package (obj)
  (when (setq obj (core-symptr obj))
    (let ((cell (core-q obj target::symbol.package-predicate)))
      (if (core-consp cell)
        (core-car cell)
        cell))))

(defun core-symbol-plist (obj)
  (when (setq obj (core-symptr obj))
    (core-cdr (core-q obj target::symbol.plist))))

(defun core-all-packages-ptr ()
  (core-symbol-value (nil-relative-symbol-address '%all-packages%)))

(defun core-keyword-package ()
  (core-symbol-value (nil-relative-symbol-address '*keyword-package*)))

(defun core-symbol-pointers ()
  (or (core-info-symbol-ptrs (current-core))
      (let ((vector (make-array 1000 :adjustable t :fill-pointer 0)))
        (map-core-areas (lambda (obj)
                          (when (core-symbolp obj)
                            (vector-push-extend obj vector))))
        (setf (core-info-symbol-ptrs (current-core)) vector))))

(defun core-map-symbols (fun)
  (loop for sym-ptr across (core-symbol-pointers) do (funcall fun sym-ptr)))


(defun core-string= (ptr string &aux (len (length string)))
  (assert (core-uvtypep ptr :simple-string))
  (when (eq (core-uvsize ptr) len)
    (loop for i from 0 below len
          always (eql (core-uvref ptr i) (aref string i)))))

(defun core-find-package (name &key error)
  (when (integerp name)
    (when (core-symbolp name)
      (setq name (core-q name target::symbol.pname)))
    (when (core-uvtypep name :simple-string)
      (setq name (copy-from-core name :depth 1))))
  (setq name (string name))
  (or (loop for list-ptr = (core-all-packages-ptr) then (core-cdr list-ptr)
            while (core-consp list-ptr)
            as pkg-ptr = (core-car list-ptr)
            when (loop for names-ptr = (core-uvref pkg-ptr pkg.names) then (core-cdr names-ptr)
                       while (core-consp names-ptr)
                       as name-ptr = (core-car names-ptr)
                       thereis (core-string= name-ptr name))
              do (return pkg-ptr))
      (and error (error "No package named ~s" name))))

(defun core-package-names (pkg-ptr)
  (assert (core-uvtypep pkg-ptr :package))
  (copy-from-core (core-uvref pkg-ptr pkg.names) :depth 2))

(defun core-package-name (pkg-ptr)
  (assert (core-uvtypep pkg-ptr :package))  
  (copy-from-core (core-car (core-uvref pkg-ptr pkg.names)) :depth 1))

(defun core-find-symbol (name &optional package)
  ;; Unlike cl:find-symbol, this doesn't look for inherited symbols,
  ;; you have to get the package right.
  (when (integerp name)
    (when (core-symbolp name)
      (when (null package)
        (setq package (core-symbol-package name)))
      (setq name (core-q name target::symbol.pname)))
    (when (core-uvtypep name :simple-string)
      (setq name (copy-from-core name :depth 1))))
  (when (and (null package) (non-nil-symbolp name))
    (setq package (symbol-package name)))
  (when (null package) (error "Package is required"))
  (let* ((symbol-name (string name))
         (name-len (length symbol-name))
         (pkg-ptr (if (and (integerp package) (core-uvtypep package :package))
                    package
                    (core-find-package (if (packagep package)
                                         (package-name package)
                                         package)
                                       :error t))))
    (multiple-value-bind (primary secondary) (hash-pname symbol-name name-len)
      (flet ((findsym (htab-ptr)
               (let* ((vec-ptr (core-car htab-ptr))
                      (vlen (core-uvsize vec-ptr)))
                 (loop for idx = (fast-mod primary vlen) then (+ i secondary)
                       for i = idx then (if (>= idx vlen) (- idx vlen) idx)
                       as sym = (core-uvref vec-ptr i)
                       until (eql sym 0)
                       do (when (and (core-symbolp sym)
                                     (core-string= (core-q sym target::symbol.pname) symbol-name))
                            (return (if (eq sym (nil-relative-symbol-address 'nil))
                                      (target-nil-value)
                                      sym)))))))
        (or (findsym (core-uvref pkg-ptr pkg.itab))
            (findsym (core-uvref pkg-ptr pkg.etab)))))))

(defun core-gethash (key-ptr hash-ptr)
  (when (core-uvtypep hash-ptr :istruct)
    (setq hash-ptr (core-uvref hash-ptr nhash.vector)))
  (assert (core-uvtypep hash-ptr :hash-vector))
  (loop for i from $nhash.vector_overhead below (core-uvsize hash-ptr) by 2
        do (when (eq (core-uvref hash-ptr i) key-ptr)
             (return (core-uvref hash-ptr (1+ i))))))

(defun core-hash-table-count (hash-ptr)
  (when (core-uvtypep hash-ptr :istruct)
    (setq hash-ptr (core-uvref hash-ptr nhash.vector)))
  (assert (core-uvtypep hash-ptr :hash-vector))
  (loop with rehashing = (%fixnum-address-of (%slot-unbound-marker))
        with free = (%fixnum-address-of (%unbound-marker))
        for i from $nhash.vector_overhead below (core-uvsize hash-ptr) by 2
        count (let ((value (core-uvref hash-ptr (1+ i))))
                (when (eq value rehashing)
                  (error "This table is being rehashed"))
                (neq value free))))

(defun core-classes-hash-table-ptr ()
  (or (core-info-classes-hash-table-ptr (current-core))
      (setf (core-info-classes-hash-table-ptr (current-core))
            (core-symbol-value (core-find-symbol '%find-classes%)))))

(defun core-find-class (name)
  (let* ((name-ptr (etypecase name
                     (integer 
                        (assert (core-symbolp name))
                        name)
                     (symbol (core-find-symbol name))))
         (hash-ptr (core-classes-hash-table-ptr))
         (cell (core-gethash name-ptr hash-ptr))
         (class (and cell (core-uvref cell class-cell-class))))
    (and class (core-uvtypep class :instance) class)))

(defun core-lfun-names-table-ptr ()
  (or (core-info-lfun-names-table-ptr (current-core))
      (setf (core-info-lfun-names-table-ptr (current-core))
            (core-symbol-value (core-find-symbol '*lfun-names*)))))

(defun core-nth-immediate (fn i)
  (assert (core-uvtypep fn :function))
  (let ((addr (+ (logandc2 fn target::fulltagmask) target::node-size)))
    (core-q addr (%ilsl target::word-shift (+ (core-l addr) i -1)))))

(defun core-closure-function (fun)
  (while (and (core-functionp fun)
              (logbitp $lfbits-trampoline-bit (core-lfun-bits fun)))
    (setq fun (core-nth-immediate fun 1))
    (when (core-uvtypep fun :simple-vector)
      (setq fun (core-uvref fun 0)))
    #+gz (assert (core-functionp fun)))
  fun)

(defun core-lfun-name (fn)
  (assert (core-functionp fn))
  (flet ((lfun-name (fn)
           (or (core-gethash fn (core-lfun-names-table-ptr))
               (let* ((lfbits (core-lfun-bits fn))
                      (name (if (and (logbitp $lfbits-gfn-bit lfbits)
                                     (not (logbitp $lfbits-method-bit lfbits)))
                                (core-uvref (core-nth-immediate fn gf.slots) sgf.name)
                                (unless (logbitp $lfbits-noname-bit lfbits)
                                  (core-uvref fn (- (core-uvsize fn) 2))))))
                 (and name
                      (not (eql name (%fixnum-address-of (%slot-unbound-marker))))
                      (not (core-nullp name))
                      name)))))
    (or (lfun-name fn)
        (let ((inner-fn (core-closure-function fn)))
          (and (core-functionp inner-fn)
               (not (eql inner-fn fn))
               (lfun-name inner-fn))))))

(defun core-list (ptr)
  (let ((cars (loop while (core-consp ptr)
                    collect (core-car ptr)
                    do (setq ptr (core-cdr ptr)))))
    (if (core-nullp ptr)
      cars
      (nconc cars ptr))))

(defun core-all-processes ()
  (let* ((sym (core-find-symbol 'all-processes))
         (closure (core-uvref sym target::symbol.fcell-cell))
         (imm-start (core-l (logandc2 closure target::fulltagmask) target::node-size))
         (imm-end (core-uvsize closure))
         (vcell (loop for idx from (1+ imm-start) below imm-end as imm = (core-uvref closure idx)
                      when (core-uvtypep imm :value-cell) return imm))
         (val (core-uvref vcell target::value-cell.value-cell))
         (processes (core-list val)))
    processes))

(defun core-process-name (proc)
  (assert (core-uvtypep proc :instance))
  (let ((slots (core-uvref proc ccl::instance.slots)))
    (copy-from-core (core-uvref slots 1) :depth 1)))

(defun core-process-tcr (proc)
  (assert (core-uvtypep proc :instance))
  (let* ((slots (core-uvref proc ccl::instance.slots))
         (thread (core-uvref slots 2)))
    (core-uvref thread ccl::lisp-thread.tcr)))

(defun core-find-process-for-id (lwp)
  (loop for proc in (core-all-processes)
        when (eql lwp (core-q (core-process-tcr proc) target::tcr.native-thread-id))
          return proc))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defun core-process-class ()
  (or (core-info-process-class (current-core))
      (setf (core-info-process-class (current-core))
            (core-find-class 'process))))

(defun core-print (obj &optional (stream t) depth)
  ;; TODO: could dispatch on core-object-typecode-type...
  (cond ((core-nullp obj) (format stream "NIL"))
        ((core-symbolp obj)
         (core-print-symbol obj stream))
        ((core-uvtypep obj :function)
         (core-print-function obj stream))
        ((core-instance-p obj (core-process-class))
         (core-print-process obj stream))
        ((and depth (< (decf depth) 0))
         (format stream "x~x" obj))
        ((core-consp obj)
         (loop for sep = "(" then " "
               for i from 0 below (or *print-length* 100)
               while (core-consp obj)
               do (format stream sep)
               do (core-print (core-car obj) stream depth)
               do (setq obj (core-cdr obj)))
         (unless (core-nullp obj)
           (format stream " . ")
           (core-print obj stream depth))
         (format stream ")"))
        (t (format stream "#<core ~a x~x>"
		   (or (ignore-errors (core-type-string (core-object-type-key obj)))
		       (core-object-typecode-type obj))
		   obj))))

(defun core-print-symbol (sym stream)
  (let ((package (core-symbol-package sym)))
    (cond ((core-nullp package)
           (format stream "#:"))
          ((eq package (core-keyword-package))
           (format stream ":"))
          (t (let ((pkgname (core-package-name package)))
               (etypecase pkgname
                 (unresolved-address (format stream "@~x::" (unresolved-address-address pkgname)))
                 (string (unless (string-equal pkgname "COMMON-LISP")
                           (format stream "~a::" pkgname)))))))
    (let ((symname (core-symbol-name sym)))
      (etypecase symname
        (unresolved-address (format stream "@~x" (unresolved-address-address symname)))
        (string (format stream "~a" symname)))))
  (values))

(defun core-lfun-bits (fun)
  (let ((unsigned (core-uvref fun (1- (core-uvsize fun)))))
    (ash (if (logbitp (1- (* target::node-size 8)) unsigned)
           (logior (ash -1 (* target::node-size 8)) unsigned)
           unsigned)
         (- target::fixnum-shift))))


(defun core-print-function (fun stream)
  (let* ((lfbits (core-lfun-bits fun))
         (name (core-lfun-name fun)))
    (format stream "#<")
    (cond ((or (null name) (core-nullp name))
           (format stream "Anonymous function"))
          ((logbitp $lfbits-method-bit lfbits)
           (assert (core-uvtypep name :instance))
           (let* ((slot-vector (core-uvref name instance.slots))
                  (method-qualifiers (core-uvref slot-vector %method.qualifiers))
                  (method-specializers (core-uvref slot-vector %method.specializers))
                  (method-name (core-uvref slot-vector %method.name)))
             (format stream "Method-Function ")
             (core-print method-name stream)
             (format stream " ")
             (unless (core-nullp method-qualifiers)
               (if (core-nullp (core-cdr method-qualifiers))
                 (core-print (core-car method-qualifiers) stream)
                 (core-print method-qualifiers stream))
               (format stream " "))
             ;; print specializer list but print names instead of classes.
             (loop for sep = "(" then " "
                   while (core-consp method-specializers)
                   do (format stream sep)
                   do (let ((spec (core-car method-specializers)))
                        (if (core-uvtypep spec :instance)
                          (let ((slots (core-uvref spec instance.slots)))
                            ;; specializer is either a class or a ccl::eql-specializer
                            (if (eql (core-uvsize slots) 3)
                              (progn
                                (format stream "(EQL ")
                                (core-print (core-uvref slots 2) stream)
                                (format stream ")"))
                              (core-print (core-uvref slots %class.name) stream)))
                          (core-print spec stream)))
                   do (setq method-specializers (core-cdr method-specializers)))
             (unless (core-nullp method-specializers)
               (format stream " . ")
               (core-print method-specializers stream))
             (format stream ")")))
          (t
           (if (logbitp $lfbits-gfn-bit lfbits)
               (format stream "Generic Function ")
               (format stream "Function "))
           (core-print name stream)))
    (format stream " x~x>" fun)))

(defun core-print-process (proc stream)
  (format stream "#<~a ~s LWP(~d) #x~x>"
          (core-symbol-name (core-instance-type proc))
          (core-process-name proc)
          (core-q (core-process-tcr proc) target::tcr.native-thread-id)
          proc))

(defun dwim-core-frame-pointer (tcr &optional end)
  (let* ((ret1valn (core-q (kernel-global-address 'ret1valaddr)))
         (lexprs (list (core-q (kernel-global-address 'lexpr-return))
                       (core-q (kernel-global-address 'lexpr-return1v))))
         (stack-area (core-q tcr target::tcr.vs-area))
         (fp (core-q stack-area target::area.high))
         (low (core-q stack-area target::area.low)))
    (flet ((validp (pp)
             (let ((tra (core-q pp target::lisp-frame.return-address)))
               (when (eql tra ret1valn)
                 (setq tra (core-q pp target::lisp-frame.xtra)))
               (or (eql (logand tra target::tagmask) target::tag-tra)
                   (eql tra 0)
                   (member tra lexprs)))))
      (decf fp (* 2 target::node-size))
      (when (and end (<= low end fp))
        (setq low (- end 8)))
      (loop while
            (loop for pp downfrom (- fp target::node-size) above low by target::node-size
                  do (when (eql (core-q pp target::lisp-frame.backptr) fp)
                       (when (validp pp)
                         (return (setq fp pp))))))
      fp)))

(defun core-stack-frame-values (tcr fp)
  (let* ((bottom (core-q fp target::lisp-frame.backptr))
         (top (if (eql 0 (core-q fp target::lisp-frame.return-address))
                (+ fp target::xcf.size)
                (+ fp (if (eql (core-q fp target::lisp-frame.return-address)
                               (core-q (kernel-global-address 'ret1valaddr)))
                        target::lisp-frame.size
                        target::lisp-frame.xtra))))
         (db-link (loop as db = (core-q tcr target::tcr.db-link) then (core-q db)
                        until (or (eql db 0) (>= db bottom))
                        when (<= top db) return db)))
    (loop for vsp from top below bottom by target::node-size
          when (eql vsp db-link)
            ;; The db-link will be followed by var and val, which we'll just collect normally
            do (setq db-link (core-q db-link) vsp (+ vsp target::node-size))
            and collect `(:db-link ,db-link)
          collect (core-q vsp))))

(defun core-print-call-history (process &key (stream t) origin detailed-p)
  (flet ((fp-backlink (fp vs-end)
           (let ((backlink (core-q fp target::lisp-frame.backptr)))
             (when (or (eql backlink 0)
                       (<= vs-end backlink)
                       (<= vs-end (core-q backlink target::lisp-frame.backptr)))
               (setq backlink vs-end))
             (assert (< fp backlink))
             backlink))
         (fp-tra (fp)
           (let ((tra (core-q fp target::lisp-frame.return-address)))
             (if (eql tra (core-q (kernel-global-address 'ret1valaddr)))
               (core-q fp target::lisp-frame.xtra)
               tra)))
         (recover-fn (pc)
           (when (and (eql (logand pc target::tagmask) target::tag-tra)
                      (eql (core-w pc) target::recover-fn-from-rip-word0)
                      (eql (core-b pc 2) target::recover-fn-from-rip-byte2))
             (+ pc target::recover-fn-from-rip-length
                (- (core-l pc target::recover-fn-from-rip-disp-offset)
                   #x100000000)))))
    (format stream "~&")
    (core-print process stream)
    (let* ((tcr (core-process-tcr process))
           (vs-area (core-q tcr target::tcr.vs-area))
           (vs-end (core-q vs-area target::area.high))
           (valence (core-q tcr target::tcr.valence))
           (fp (or origin
                   ;; TODO: find the registers in the core file!
                   (case valence
                     ;; TCR_STATE_LISP
                     (0 (let ((xp (core-q tcr target::tcr.suspend-context)))
                          (format stream "~&")
                          (if (eql xp 0)
                            (format stream "Unknown lisp context, guessing frame pointer:")
                            (core-print (core-q xp (* 10 target::node-size)) stream)) ;; r13 = fn
                          (if (eql xp 0)
                            (dwim-core-frame-pointer tcr)
                            ;; uc_mcontext.gregs[rbp]
                            (core-q xp (* 15 target::node-size)))))
                     ;; TCR_STATE_FOREIGN
                     (1 (format stream "~&In foreign code")
                        ;; the save-rbp seems to include some non-lisp frames sometimes,
                        ;; shave them down.
                        #+no (core-q tcr target::tcr.save-rbp)
                        (dwim-core-frame-pointer tcr (core-q tcr target::tcr.save-rbp)))
                     ;; TCR_STATE_EXCEPTION_WAIT
                     (2 (let ((xp (core-q tcr target::tcr.pending-exception-context)))
                          ;; regs start at index 5, in this order:
                          ;; arg_x temp1 ra0 save3 save2 fn save1 save0 arg_y arg_z
                          ;; rbp temp0 imm1 imm0 nargs rsp rip
                          (format stream " exception-wait")
                          (if (zerop xp)
                            (format stream "~&context unknown")
                            (let* ((fn (core-q xp (* 10 target::node-size)))
                                   (sp (core-q xp (* 20 target::node-size)))
                                   (ra (core-q sp)))
                              (if (and (core-functionp fn)
                                       (and (<= fn ra)
                                            (< ra (+ fn (* (core-uvsize fn) target::node-size)))))
                                (progn
                                  (format stream "~&")
                                  (core-print fn stream)
                                  (format stream " + ~d" (- ra fn)))
                                (progn
                                  (format stream "~&top of stack = x~x, r13 = " ra)
                                  (core-print fn stream)))))
                          (unless (zerop xp)
                            (core-q xp (* 15 target::node-size))))))
                   (error "Cannot find frame pointer"))))
      (unless (<= (core-q vs-area target::area.low) fp vs-end)
        (error "frame pointer x~x is not in stack area" fp))
      (loop while (< fp vs-end) for pc = (fp-tra fp) for fun = (recover-fn pc)
            do (format stream "~&fp: x~x  pc: x~x : " fp pc)
            do (cond (fun
                      (core-print fun stream)
                      (format stream " + ~d " (- pc fun)))
                     ((eql pc 0) ;; exception frame
                      (let* ((nominal-function (core-q fp target::xcf.nominal-function))
                             (obj (core-q fp target::xcf.containing-object)))
                        (when (core-functionp nominal-function)
                          (format stream "exception ")
                          (core-print nominal-function stream)
                          (format stream " + ~d"
                                  (if (eq (- obj target::fulltag-misc)
                                          (- nominal-function target::fulltag-function))
                                    (- (core-q fp target::xcf.relative-pc) target::tag-function)
                                    (let ((pc (core-q fp target::xcf.ra0)))
                                      (when (eql nominal-function (recover-fn pc))
                                        (- pc nominal-function))))))))
                     ((eql pc (core-q (kernel-global-address 'lexpr-return)))
                      (format stream "lexpr return"))
                     ((eql pc (core-q (kernel-global-address 'lexpr-return1v)))
                      (format stream "lexpr1v return"))
                     (t
                      (if (eql (logand pc target::tagmask) target::tag-tra)
                        (format stream " # couldn't recover function")
                        (unless (core-nullp pc)
                          (format stream "bad frame!")))
                      ;; can't trust backlink
                      (return)))
               ;; TODO: print stack addressses
            do (when detailed-p
                 (loop for val in (core-stack-frame-values tcr fp)
                       do (format stream "~&     ")
                       do (if (integerp val)
                            (handler-case (core-print val stream)
                              (error () (format stream "#<Error printing value @x~x>" val)))
                            (format stream "~a x~x" (car val) (cadr val)))))
            do (setq fp (fp-backlink fp vs-end))))))


)                             ; :x8664-target

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3
;;;; END FILE ./reference/ccl/library/core-files.lisp
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4n









;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4n









;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4n









;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4n











\;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1
;;;; BEGIN FILE ./reference/ccl/library/chud-metering.lisp
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2
;;;-*-Mode: LISP; Package: (CHUD (:USE CL CCL)) -*-
;;;
;;; Copyright 2005-2009 Clozure Associates
;;;
;;; Licensed under the Apache License, Version 2.0 (the "License");
;;; you may not use this file except in compliance with the License.
;;; You may obtain a copy of the License at
;;;
;;;     http://www.apache.org/licenses/LICENSE-2.0
;;;
;;; Unless required by applicable law or agreed to in writing, software
;;; distributed under the License is distributed on an "AS IS" BASIS,
;;; WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
;;; See the License for the specific language governing permissions and
;;; limitations under the License.

;;; Some of this is based on work done by Dan Knapp and Hamilton Link
;;; (and possibly others.)

(defpackage "CHUD"
  (:use "CL" "CCL")
  (:export "METER" "*SHARK-CONFIG-FILE*"))
  
(in-package "CHUD")

(eval-when (:compile-toplevel :load-toplevel :execute)
  (progn
    #-darwin-target
    (error "This code is Darwin/MacOSX-specific.")))


(defparameter *shark-session-path* nil)


(defparameter *shark-session-native-namestring* nil)

(defparameter *shark-config-file* nil "Full pathname of .cfg file to use for profiling, or NIL.")

(defun finder-open-file (namestring)
  "Open the file named by NAMESTRING, as if it was double-clicked on
in the finder"
  (run-program "/usr/bin/open" (list namestring) :output nil))

(defun ensure-shark-session-path ()
  (unless *shark-session-path*
    (multiple-value-bind (second minute hour date month year)
	(decode-universal-time (get-universal-time))
      (let* ((subdir (format nil "profiling-session-~A-~d_~d-~d-~d_~d.~d.~d"
			     (pathname-name
			      (car
			       ccl::*command-line-argument-list*))
			     (ccl::getpid)
			     month
			     date
			     year
			     hour
			     minute
			     second))
	     (dir (make-pathname :directory (append (pathname-directory (user-homedir-pathname)) (list subdir)) :defaults nil))
	     (native-name (ccl::native-untranslated-namestring dir)))
	(ensure-directories-exist dir)
	(setq *shark-session-native-namestring*
	      native-name
	      *shark-session-path* dir))))
  *shark-session-path*)


  

(defloadvar *shark-process* nil)
(defloadvar *sampling* nil)

(defvar *debug-shark-process-output* nil)




(defun terminate-shark-process ()
  (when *shark-process*
    (signal-external-process *shark-process* #$SIGUSR2))
  (setq *shark-process* nil
	*sampling* nil))

(defun toggle-sampling ()
  (if *shark-process*
    (progn
      (signal-external-process *shark-process* (if *sampling* #$SIGUSR2 #$SIGUSR1))
      (setq *sampling* (not *sampling*)))
    (warn "No active shark procsss")))

(defun enable-sampling ()
  (unless *sampling* (toggle-sampling)))

(defun disable-sampling ()
  (when *sampling* (toggle-sampling)))

(defun ensure-shark-process (reset hook)
  (when (or (null *shark-process*) reset)
    (terminate-shark-process)
    (let* ((args (list "-r" "-b" "-1" "-a" (format nil "~d" (ccl::getpid))
                       "-d" *shark-session-native-namestring*)))
      (when *shark-config-file*
	(push (ccl::native-untranslated-namestring *shark-config-file*)
	      args)
	(push "-m" args))
      (setq *shark-process*
	    (run-program "/usr/bin/shark"
			 args
			 :output :stream
			 :status-hook hook
			 :wait nil))
      (let* ((output (external-process-output-stream *shark-process*)))
	(do* ((line (read-line output nil nil) (read-line output nil nil)))
	     ((null line))
	  (when *debug-shark-process-output*
	    (format t "~&~a" line))
	  (when (search "ready." line :key #'char-downcase)
            (sleep 1)
	    (return)))))))

(defun display-shark-session-file (line)
  (let* ((last-quote (position #\' line :from-end t))
	 (first-quote (and last-quote (position #\' line :end (1- last-quote) :from-end t)))
	 (path (and first-quote  (subseq line (1+ first-quote) last-quote))))
    (when path (finder-open-file path))))
    
(defun scan-shark-process-output (p)
  (format t "~&;;; Waiting for shark to process samples ...")
  (with-interrupts-enabled 
      (let* ((out (ccl::external-process-output p)))
	(do* ((line (read-line out nil nil) (read-line out nil nil)))
	     ((null line))
	  (when *debug-shark-process-output*
	    (format t "~&~a" line))
	  (when (search "Created session file:" line)
            (format t "done.~&")
	    (display-shark-session-file line)
	    (return))))))



(defmacro meter (form &key reset debug-output)
  (let* ((hook (gensym))
	 (block (gensym))
	 (process (gensym)))
    `(block ,block
      (flet ((,hook (p)
	       (when (or (eq (external-process-status p) :exited)
			 (eq (external-process-status p) :signaled))
		 (setq *shark-process* nil
		       *sampling* nil))))
	(let* ((*debug-shark-process-output* ,debug-output))
          (ensure-shark-session-path)
	  (ensure-shark-process ,reset #',hook)
	  (unwind-protect
	       (progn
		 (enable-sampling)
		 ,form)
	    (disable-sampling)
	    (let* ((,process *shark-process*))
	      (when ,process
		(scan-shark-process-output ,process)))))))))

;;; Try to clean up after ourselves when the lisp quits.
(pushnew 'terminate-shark-process ccl::*save-exit-functions*)
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3
;;;; END FILE ./reference/ccl/library/chud-metering.lisp
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4n









;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4n









;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4n









;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4n











\;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1
;;;; BEGIN FILE ./reference/ccl/library/mac-file-io.lisp
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2
;;-*- Mode: Lisp; Package: CCL -*-
;;;
;;; Copyright 1994-2001 Clozure Associates
;;;
;;; Licensed under the Apache License, Version 2.0 (the "License");
;;; you may not use this file except in compliance with the License.
;;; You may obtain a copy of the License at
;;;
;;;     http://www.apache.org/licenses/LICENSE-2.0
;;;
;;; Unless required by applicable law or agreed to in writing, software
;;; distributed under the License is distributed on an "AS IS" BASIS,
;;; WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
;;; See the License for the specific language governing permissions and
;;; limitations under the License.
;;-*- Mode: Lisp; Package: CCL -*-
;;;
;;;   Copyright (C) 1994-2001 Digitool, Inc
;;;   This file is part of Opensourced MCL.
;;;
;;;   Opensourced MCL is free software; you can redistribute it and/or
;;;   modify it under the terms of the GNU Lesser General Public
;;;   License as published by the Free Software Foundation; either
;;;   version 2.1 of the License, or (at your option) any later version.
;;;
;;;   Opensourced MCL is distributed in the hope that it will be useful,
;;;   but WITHOUT ANY WARRANTY; without even the implied warranty of
;;;   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
;;;   Lesser General Public License for more details.
;;;
;;;   You should have received a copy of the GNU Lesser General Public
;;;   License along with this library; if not, write to the Free Software
;;;   Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
;;;


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
;; mac-file-io.lisp
;;

;; This file implements something similar to the high-level file I/O
;; primitives in Inside Macintosh.
;; It does NOT support asynchronous I/O (and neither does the Macintosh, really).

;; Routines that take an errorp parameter will signal an error if
;; the parameter is unspecified or true, otherwise, if there is an
;; error they return two values: NIL & the error number.
;; If there is no error, routines return one or more values the
;; first of which is non-NIL.

;;;;;;;;;;;;;
;;
;; Modification History
;;

(in-package "CCL")

(eval-when (:compile-toplevel :execute)
  (require 'sysequ))

(eval-when (:compile-toplevel :load-toplevel :execute)
  (export '(with-FSOpen-file FSOpen FSClose FSRead FSWrite setFPos getFPos getEOF)))

(defmacro with-FSOpen-file ((pb filename &optional read-write-p (vrefnum 0))
                            &body body)
  `(let ((,pb (FSOpen ,filename ,read-write-p ,vrefnum)))
     (unwind-protect
       (progn ,@body)
       (FSClose ,pb))))

(defmacro with-FSOpen-file-noerr ((pb filename &optional read-write-p (vrefnum 0))
                                  &body body)
  `(let ((,pb (ignore-errors
               (FSOpen ,filename ,read-write-p ,vrefnum))))
     (when ,pb
       (unwind-protect
         (progn ,@body)
         (FSClose ,pb)))))

; Returns a paramBlock for doing furthur I/O with the file
(defun FSOpen (filename &optional read-write-p (vrefnum 0) (errorp t)
                        (resolve-aliases-p t))
  (when resolve-aliases-p (setq filename (truename filename)))
  (let ((paramBlock (make-record :hparamblockrec))
        ok)
    (unwind-protect
      (with-pstrs ((pname (mac-namestring filename)))
        (setf (pref paramblock :hparamblockrec.ioNameptr) pname
              (pref paramblock :hparamblockrec.ioVrefnum) vrefnum
              (pref paramblock :hparamblockrec.ioVersNum) 0
              (pref paramblock :hparamblockrec.ioPermssn) (if read-write-p #$fsRdWrPerm #$fsRdPerm)
              (pref paramblock :hparamblockrec.ioMisc) (%null-ptr))
        (#_PBOpenSync paramBlock)
        (let ((res (pref paramBlock :hparamblockrec.ioResult)))
          (if (eql #$NoErr res)
            (progn
              (setf (pref paramblock :hparamblockrec.ioPosOffSet) 0
                    (pref paramblock :hparamblockrec.ioPosMode) #$fsAtMark)
              (setq ok t)
              paramBlock)
            (maybe-file-error errorp res filename))))
      (unless ok
        (#_DisposePtr paramBlock)))))

(defun FSClose (paramBlock &optional (errorp t))
  (#_PBCloseSync paramBlock)
  (let ((errnum (pref paramBlock :hparamblockrec.ioResult)))
    (#_DisposePtr paramBlock)
    (or (eql errnum #$noErr)
        (maybe-file-error errorp errnum))))

; Returns two values: the number of bytes actually read, and the
; location of the file mark.
(defun fsRead (paramBlock count buffer &optional (offset 0) (errorp t))
  (setf (pref paramBlock :hparamblockrec.ioBuffer) (%inc-ptr buffer offset)
        (pref paramBlock :hparamblockrec.ioReqCount) count)
  (#_PBReadSync paramBlock)
  (setf (pref paramBlock :hparamblockrec.ioPosMode) #$fsAtMark)
  (let ((errnum (pref paramBlock :hparamblockrec.ioResult)))
    (if (or (eql #$noErr errnum) (eql #$eofErr errnum))
      (values (pref paramBlock :hparamblockrec.ioActCount)
              (pref paramBlock :hparamblockrec.ioPosOffset))
      (maybe-file-error errorp errnum))))

; Returns two values: the number of bytes actually written, and the
; location of the file mark.
(defun fsWrite (paramBlock count buffer &optional (offset 0) (errorp t))
  (setf (pref paramBlock :hparamblockrec.ioBuffer) (%inc-ptr buffer offset)
        (pref paramBlock :hparamblockrec.ioReqCount) count)
  (#_PBWriteSync paramBlock)
  (setf (pref paramBlock :hparamblockrec.ioPosMode) #$fsAtMark)
  (let ((errnum (pref paramBlock :hparamblockrec.ioResult)))
    (if (or (eql #$noErr errnum) (eql #$eofErr errnum))
      (values (pref paramBlock :hparamblockrec.ioActCount)
              (pref paramBlock :hparamblockrec.ioPosOffset))
      (maybe-file-error errorp errnum))))

(defun setFPos (paramBlock pos)
  (setf (pref paramBlock :hparamblockrec.ioPosOffset) pos
        (pref paramblock :hparamblockrec.ioPosMode) #$fsFromStart)
  pos)

(defun getFPos (paramBlock)
  (pref paramBlock :hparamblockrec.ioPosOffset))

(defun getEOF (paramBlock &optional (errorp t))
  (let* ((errnum (#_PBGetEOFSync paramBlock)))
    (if (eql #$noErr errnum)
      (%ptr-to-int (pref paramblock :hparamblockrec.ioMisc))
      (maybe-file-error errorp errnum))))

(defun GetVInfo (&key (volName "") (vRefNum 0))
  (let* ((vol-pathname (truename (make-pathname :type nil :name nil :defaults volName)))
         (directory    (pathname-directory vol-pathname)))
    (assert (and directory (eq :absolute (car directory))))
    (rlet ((paramBlock :hparamblockrec))
      (with-returned-pstrs ((pname (cadr directory)))
        (setf (pref paramblock :hparamblockrec.ioCompletion) (%null-ptr)
              (pref paramblock :hparamblockrec.ioNamePtr)    pname
              (pref paramblock :hparamblockrec.ioVRefNum)    vRefNum
              (pref paramblock :hparamblockrec.ioVolIndex)   0)
        (values (#_PBHGetVInfoSync paramBlock)
                (* (%get-unsigned-long paramblock $ioVAlBlkSiz)         ; see IM:Files 2-46
                   (pref paramblock :hparamblockrec.ioVFrBlk))
                (pref paramblock :hparamblockrec.ioVRefNum)
                (%get-string (pref paramblock :hparamblockrec.ioNamePtr)))))))

(defun maybe-file-error (errorp errnum &optional filename)
  (if errorp
    (%err-disp errnum filename)
    (values nil errnum)))

(provide :mac-file-io)

; End of mac-file-io.lisp
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3
;;;; END FILE ./reference/ccl/library/mac-file-io.lisp
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4n









;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4n









;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4n









;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4n











\;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1
;;;; BEGIN FILE ./reference/ccl/library/leaks.lisp
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2
;;;-*-Mode: LISP; Package: ccl -*-
;;;
;;; Copyright 2008-2009 Clozure Associates
;;;
;;; Licensed under the Apache License, Version 2.0 (the "License");
;;; you may not use this file except in compliance with the License.
;;; You may obtain a copy of the License at
;;;
;;;     http://www.apache.org/licenses/LICENSE-2.0
;;;
;;; Unless required by applicable law or agreed to in writing, software
;;; distributed under the License is distributed on an "AS IS" BASIS,
;;; WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
;;; See the License for the specific language governing permissions and
;;; limitations under the License.

; leaks.lisp
; A few functions to help in finding memory leaks

(in-package :ccl)

(export '(find-referencers
          transitive-referencers
          map-heap-objects
          #+linux-target parse-proc-maps
          #+linux-target proc-maps-diff
          ))

(defun map-heap-objects (fn &key area)
  (flet ((mapper (thing)
           (when (eq (typecode thing) target::subtag-function)
             (setq thing (function-vector-to-function thing)))
           (when (eq (typecode thing) target::subtag-symbol)
             (setq thing (symvector->symptr thing)))
           (funcall fn thing)))
    (declare (dynamic-extent #'mapper))
    (%map-areas #'mapper area)))

;; Returns all objects that satisfy predicate of one of the types in
;; ccl::*heap-utilization-vector-type-names*
;; Note that these can contain stack-consed objects that are dead.
;; Use pointer-in-some-dynamic-area-p to be sure to follow only real objects
;; (ccl::heap-utilization) prints a useful list of object counts and sizes
;; per type.
(defun all-objects-of-type (type &optional predicate)
  (let ((typecode (position type ccl::*heap-utilization-vector-type-names*))
        (res nil))
    (when typecode
      (flet ((mapper (thing)
               (when (and (eq typecode (ccl::typecode thing))
                          (or (null predicate) (funcall predicate thing)))
                 (push thing res))))
        (declare (dynamic-extent #'mapper))
        (ccl::%map-areas #'mapper))
      res)))

;; Counts objects that satisfy predicate of one of the types in
;; ccl::*heap-utilization-vector-type-names*
(defun count-objects-of-type (type &optional predicate)
  (let ((typecode (position type ccl::*heap-utilization-vector-type-names*))
        (res 0))
    (when typecode
      (flet ((mapper (thing)
               (when (and (eq typecode (ccl::typecode thing))
                          (or (null predicate) (funcall predicate thing)))
                 (incf res))))
        (declare (dynamic-extent #'mapper))
        (ccl::%map-areas #'mapper))
      res)))

(defun count-conses ()
  (let ((res 0))
    (flet ((mapper (thing)
             (when (consp thing) (incf res))))
      (declare (dynamic-extent #'mapper))
      (ccl::%map-areas #'mapper))
    res))

;; Like set-difference, but uses a hash table to go faster.
(defun fast-set-difference (list1 list2 &optional (test #'eq))
  (let ((hash (make-hash-table :test test))
        (res nil))
    (dolist (e1 list1) (setf (gethash e1 hash) t))
    (dolist (e2 list2) (remhash e2 hash))
    (maphash (lambda (k v)
               (declare (ignore v))
               (push k res))
             hash)
    res))

;; Returns all heap references to object.  By default, includes
;; includes references from readonly, static and dynamic areas.
(defun find-referencers (object &optional area)
  (let ((res nil))
    (ccl::%map-areas
     (lambda (thing)
       (cond ((and (not (eq thing object))
                   (ccl::uvectorp thing)
                   (not (ccl::ivectorp thing)))
              (dotimes (i (ccl::uvsize thing))
                (when (eq object (ccl::uvref thing i))
                  (push thing res)
                  (return))))
             ((consp thing)
              (when(or (eq object (car thing))
                       (eq object (cdr thing)))
                (push thing res)))))
     area)
    res))

;; Return true if P is heap-consed
(defun pointer-in-some-dynamic-area-p (p)
 (block found
   (do-gc-areas (a)
     (when (eql (%fixnum-ref a target::area.code) ccl::area-dynamic)
       (when (ccl::%ptr-in-area-p p a)
         (return-from found t))))))

;; Find all transitive referencers to any object in the list
;; Returns a hash table with the references as keys.
(defun transitive-referencers (list-of-objects &key area (verbose t))
  (let ((found (make-hash-table :test 'eq))
        (objects (if (atom list-of-objects) (list list-of-objects) list-of-objects)))
    (loop for cons on objects
          do (setf (gethash cons found) t
                   (gethash (car cons) found) t))
    (ccl:gc)
    (when verbose (format t "Searching") (finish-output))
    (loop
      (let ((added-one nil))
        (when verbose (format t " ~d" (hash-table-count found)) (finish-output))
        (ccl::%map-areas
         (lambda (thing)
           (unless (gethash thing found)
             (when (cond ((eq (typecode thing) target::subtag-function)
                          (lfunloop for object in (function-vector-to-function thing)
                            thereis (gethash object found)))
                         ((and (gvectorp thing)
                               (not (eq thing (ccl::nhash.vector found)))
                               (not (eq thing found))
                               (not (packagep thing)))
                          (dotimes (i (ccl::uvsize thing))
                            (when (gethash (%svref thing i) found) (return t))))
                         ((consp thing)
                          (or (gethash (%car thing) found)
                              (gethash (%cdr thing) found))))
               (setf (gethash thing found) t
                     added-one t)
               (when (eq (typecode thing) target::subtag-function)
                 (setf (gethash (function-vector-to-function thing) found) t))
               (when (eq (typecode thing) target::subtag-symbol)
                 (setf (gethash (symvector->symptr thing) found) t)))))
         area)
        (unless added-one
          (return))))
    (when verbose (format t " done.~%") (finish-output))
    ;; Eliminate any cons that is referenced by another cons.
    ;; Also eliminate or replace objects that nobody will want to see.
    (let ((cons-refs (make-hash-table :test 'eq)))
      (loop for cons being the hash-keys of found
            when (consp cons)
              do
           (when (consp (car cons))
             (setf (gethash (car cons) cons-refs) t))
           (when (consp (cdr cons))
             (setf (gethash (cdr cons) cons-refs) t)))
      (loop for key being the hash-keys of found
            when (or (and (consp key) (gethash key cons-refs))
                     (and (consp key) (eq (car key) '%function-source-note))
                     (typep key 'hash-table-vector)
                     (and (typep key 'slot-vector)
                          (gethash (slot-vector.instance key) found))
                     #+x8664-target (typep key 'symbol-vector)
                     #+x8664-target (typep key 'function-vector)
                     )
              do
              (remhash key found))
      (loop for cons on objects
            do
         (remhash cons found)
         (remhash (car cons) found)))
      found))

;; One convenient way to print the hash table returned by transitive-referencers
(defun print-referencers (hash &key
                          predicate
                          (pause-period 20)
                          (print-circle t)
                          (print-length 20)
                          (print-level 5))
  (let ((cnt 0)
        (*print-circle* print-circle)
        (*print-length* print-length)
        (*print-level* print-level))
    (maphash (lambda (key value)
               (declare (ignore value))
               (when (or (null predicate) (funcall predicate key))
                 (format t "~s~%" key)
                 (when (> (incf cnt) pause-period)
                   (format t "Continue (Y/N)? ")
                   (unless (equalp (read-line) "Y")
                     (return-from print-referencers))
                   (setq cnt 0))))
             hash)))

;; Returns all the obsolete CLOS instances, those whose class has been
;; changed since they were created. Each will be updated as soon as
;; method dispatch is done on it."
(defun obsolete-instances (list)
  (let ((res nil))
    (dolist (i list)
      (when (eq 0 (ccl::%wrapper-hash-index (ccl::instance-class-wrapper i)))
        (push i res)))
    res))

;; Linux-only malloc leak finding
#+(and linux-target (not android-target))
(progn

;; (ccl::start-mtrace LOGFILE)
;; Do some work.
;; (ccl::stop-mtrace)
;; (ccl::parse-mtrace-log LOGFILE)
(defun start-mtrace (log-file &key gc-first)
  (delete-file log-file)
  (touch log-file)
  (setenv "MALLOC_TRACE" (native-translated-namestring (truename log-file)))
  (when gc-first (gc))
  (#_mtrace))

(defun stop-mtrace (&key gc-first)
  (when gc-first (gc))
  (#_muntrace))

(defun parse-mtrace-log (log-file &key (duplicate-alloc :show)
                                       (unmatched-free :collect)
                                       (failed-realloc :show)
                                       (hash (make-hash-table :test 'eql))
                                       (id nil))
  (let ((errors nil))
    (with-open-file (stream log-file)
      (loop for line = (read-line stream nil nil) while line
            as pos = (if (and (> (length line) 2) (eql (aref line 0) #\@) (eql (aref line 1) #\space))
                         (1+ (position #\space line :start 2))
                         0)
            as address = (let ((npos (+ pos 2)))
                           (when (and (< (+ npos 2) (length line))
                                      (eql (aref line npos) #\0)
                                      (eql (aref line (1+ npos)) #\x))
                             (parse-integer line :radix 16
                                            :start (+ npos 2)
                                            :end (position #\space line :start npos))))
            as last-data = (gethash address hash)
            do (ecase (aref line pos)
                 ((#\+ #\>)
                    (let ((this-data (if id (cons id line) line)))
                      (if last-data
                          (ecase duplicate-alloc
                            (:collect (push (list :duplicate
                                                  (if (eq (aref line pos) #\+) :alloc :realloc)
                                                  last-data this-data)
                                            errors))
                            ((:show nil) (format t "Duplicate ~a:~%~a~%~a~%"
                                                 (if (eq (aref line pos) #\+) "alloc" "realloc")
                                                 last-data this-data))
                            (:ignore nil))
                          (setf (gethash address hash) this-data))))
                 ((#\- #\<)
                    (if last-data
                        (remhash address hash)
                        (let ((this-data (if id (cons id line) line)))
                          (ecase unmatched-free
                            (:collect (push (list :unmatched
                                                  (if (eq (aref line pos) #\-) :free :realloc)
                                                  this-data)
                                            errors))
                            ((:show nil) (format t "Unmatched ~a: ~a~%"
                                                 (if (eq (aref line pos) #\-) "free" "realloc")
                                                 this-data))
                            (:ignore nil)))))
                 ((#\=) ;; ignore start/end
                    ;; (format t "~&~a" line)
                    nil)
                 ((#\!)
                    (let ((this-data (if id (cons id line) line)))
                      (ecase failed-realloc
                        (:collect (push (list :failed :realloc this-data) errors))
                        ((:show nil) (format t "Failed realloc: ~a" this-data))
                        (:ignore nil)))))))
    (values (nreverse errors) hash)))

(defun pretty-print-mtrace-summary (log-file)
  (multiple-value-bind (errors malloc-hash) (parse-mtrace-log log-file)
    (let* ((malloc-sum 0)
           (malloc-count 0)
           (free-count 0))
      (when (> (hash-table-count malloc-hash) 0)
        (format t "~&Malloced but not freed:~%")
        (loop for line being the hash-value of malloc-hash
              do (let* ((plus-pos (or (search " + " line) (search " > " line)))
                        (size-pos (position #\space line :start (+ plus-pos 3))))
                   (incf malloc-count)
                   (incf malloc-sum (parse-integer line :radix 16 :start (+ size-pos 3)))
                   (format t "~& ~A" line))))
      (when (find :unmatched errors :key #'car)
        (format t "~&Freed but not malloced:~%")
        (loop for (type nil line) in errors
              do (when (eq type :unmatched)
                   (incf free-count)
                   (format t " ~a" line))))
      (format t "~&~aK in ~a mallocs not freed, ~A frees not malloced"
              (/ malloc-sum 1024.0)
              malloc-count
              free-count)))
  (values))


;; Return the total number of bytes allocated by malloc()
(defun mallinfo ()
  (ccl:rlet ((mallinfo :mallinfo))
    (#_mallinfo mallinfo)
    (ccl::rref mallinfo :mallinfo.uordblks)))

#||
http://www.gnu.org/s/libc/manual/html_node/Statistics-of-Malloc.html

int arena
    This is the total size of memory allocated with sbrk by malloc, in bytes.
int ordblks
    This is the number of chunks not in use. (The memory allocator internally gets chunks of memory from the operating system, and then carves them up to satisfy individual malloc requests; see Efficiency and Malloc.)
int smblks
    This field is unused.
int hblks
    This is the total number of chunks allocated with mmap.
int hblkhd
    This is the total size of memory allocated with mmap, in bytes.
int usmblks
    This field is unused.
int fsmblks
    This field is unused.
int uordblks
    This is the total size of memory occupied by chunks handed out by malloc.
int fordblks
    This is the total size of memory occupied by free (not in use) chunks.
int keepcost
    This is the size of the top-most releasable chunk that normally borders the end of the heap (i.e., the high end of the virtual address space's data segment).
||#    

(defun show-malloc-info ()
  (rlet ((info :mallinfo))
    (#_mallinfo info)                   ;struct return invisible arg.
    (let* ((arena (pref info :mallinfo.arena))
           (ordblks (pref info :mallinfo.ordblks))
           (hblks (pref info :mallinfo.hblks))
           (hblkhd (pref info :mallinfo.hblkhd))
           (uordblks (pref info :mallinfo.uordblks))
           (fordblks (pref info :mallinfo.fordblks))
           (keepcost (pref info :mallinfo.keepcost)))
      (format t "~& arena size: ~d (#x~x)" arena arena)
      (format t "~& number of unused chunks = ~d" ordblks)
      (format t "~& number of mmap'ed chunks = ~d" hblks)
      (format t "~& total size of mmap'ed chunks = ~d (#x~x)" hblkhd hblkhd)
      (format t "~& total size of malloc'ed chunks = ~d (#x~x)" uordblks uordblks)
      (format t "~& total size of free chunks = ~d (#x~x)" fordblks fordblks)
      (format t "~& size of releaseable chunk = ~d (#x~x)" keepcost keepcost))))



;; Parse /proc/<pid>/maps
;; returns a list of (address perms name total-size clean-size dirty-size)
(defun parse-proc-maps (&optional (pid (ccl::getpid)))
  (let ((perm-cache ())
        (name-cache ()))
    (with-open-file (s (or (probe-file (format nil "/proc/~d/smaps" pid))
                           (format nil "/proc/~d/maps" pid)))
      (loop with current = nil
            for line = (read-line s nil) while line
            if (find #\- line)
              collect (let* ((low-end (position #\- line))
                             (high-end (position #\space line :start (1+ low-end)))
                             (perms-end (position #\space line :start (1+ high-end)))
                             (offset-end (position #\space line :start (1+ perms-end)))
                             (device-end (position #\space line :start (1+ offset-end)))
                             (inode-end (position #\space line :start (1+ device-end)))
                             (name-start (position #\space line :start inode-end :test-not #'eql))
                             (low (parse-integer line :start 0 :end low-end :radix 16))
                             (high (parse-integer line :start (1+ low-end) :end high-end :radix 16))
                             (perms (let ((p (subseq line (1+ high-end) perms-end)))
                                      (or (find p perm-cache :test #'equal)
                                          (car (setq perm-cache (cons p perm-cache))))))
                             (name (and name-start
                                        (let ((f (subseq line name-start)))
                                          (or (find f name-cache :test #'equal)
                                              (car (setq name-cache (cons f name-cache))))))))
                        (setq current (list low perms name (- high low) nil nil)))
            else do (let* ((key-end (position #\: line))
                           (size-start (position #\space line :start (1+ key-end) :test-not #'eql))
                           (size-end (position #\space line :start (1+ size-start)))
                           (size (parse-integer line :start size-start :end size-end :radix 10)))
                      (assert (string-equal " kB" line :start2 size-end))
                      (assert current)
                      (setq size (* size 1024))
                      (macrolet ((is (string)
                                   `(and (eql key-end ,(length string))
                                         (string-equal ,string line :end2 key-end))))
                        (cond ((or (is "Shared_Clean") (is "Private_Clean"))
                               (setf (nth 4 current) (+ (or (nth 4 current) 0) size)))
                              ((or (is "Shared_Dirty") (is "Private_Dirty"))
                               (setf (nth 5 current) (+ (or (nth 5 current) 0) size))))))))))

(defun proc-maps-diff (map1 map2)
  ;; Compute change from map1 to map2, return a list of (old-sect . new-sect)
  (let ((added (copy-list map2))
        (changed nil))
    (loop for m1 in map1 as match = (find (car m1) added :key #'car)
          do (when match
               (if (and (equal (nth 1 m1) (nth 1 match)) (equal (nth 2 m1) (nth 2 match)))
                   (setq added (delete match added))
                   (setq match nil)))
          do (unless (equalp m1 match)
               (push (list m1 match) changed)))
    (loop for new in added do (push (list nil new) changed))
    changed))

) ;; end of linux-only code

(defun get-allocation-sentinel (&key (gc-first t))
  ;; Return the object with the highest address that can be guaranteed to be at a lower
  ;; address than any newer objects.
  ;; If gc-first is true, can also conversely guarantee that all older objects are at a
  ;; lower address than the sentinel.  If gc-first is false, than there may be some
  ;; already-allocated objects at higher addresses, though no more than the size of the
  ;; youngest generation (and usually even less than that). Second value returned is the
  ;; size of the active region above the sentinel.
  (with-other-threads-suspended
    (when gc-first (gc)) ;; get rid of thread allocation chunks.  Wish could just egc...
    ;; This mustn't cons.  Ut really shouldn't deadlock either, but
    ;; it could.  (The GC shouldn't free malloc'ed things if any threads
    ;; are suspended when it wakes up whatever it suspended, since one
    ;; of those sleeping threads could own a malloc lock.)
    (let* ((first-area (%normalize-areas)) ;; youngest generation
           (min-base (loop with current = (%current-tcr)
                           for tcr = (%fixnum-ref current
                                                  #+win32-target
                                                  target::tcr-aux.next
                                                  #-win32-target
                                                  target::tcr.next)
                             then (%fixnum-ref tcr
                                               #+win32-target
                                               target::tcr-aux.next
                                               #-win32-target
                                               target::tcr.next)
                           as base fixnum = (%fixnum-ref tcr target::tcr.save-allocbase)
                           when (> base 0)
                             minimize base
                           until (eql tcr current)))
           (active (%fixnum-ref first-area  target::area.active))
           (limit (if (eql min-base 0) active min-base))
           (last-obj nil))
      ;; Normally will find it in the youngest generation, but loop in case limit = area.low.
      (block walk
        (flet ((skip (obj)
                 (declare (optimize (speed 3) (safety 0))) ;; lie
                 (unless (%i< obj limit)
                   (return-from walk))
                 (setq last-obj obj)))
          (declare (dynamic-extent #'skip))
          (loop for area = first-area then (%fixnum-ref area target::area.succ)
                until (neq (%fixnum-ref area target::area.code) area-dynamic)
                when (< (%fixnum-ref area target::area.low) (%fixnum-ref area target::area.active))
                  do (walk-static-area area #'skip))))
      (values last-obj (%i- active limit)))))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3
;;;; END FILE ./reference/ccl/library/leaks.lisp
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4n









;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4n









;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4n









;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4n











\;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1
;;;; BEGIN FILE ./reference/ccl/library/sequence-utils.lisp
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2
;;;; -*- Mode: Lisp; Syntax: ANSI-Common-Lisp; Base: 10; Package: cl-user -*-
;;;
;;; Copyright 2016 Clozure Associates
;;;
;;; Licensed under the Apache License, Version 2.0 (the "License");
;;; you may not use this file except in compliance with the License.
;;; You may obtain a copy of the License at
;;;
;;;     http://www.apache.org/licenses/LICENSE-2.0
;;;
;;; Unless required by applicable law or agreed to in writing, software
;;; distributed under the License is distributed on an "AS IS" BASIS,
;;; WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
;;; See the License for the specific language governing permissions and
;;; limitations under the License.
;;;; -*- Mode: Lisp; Syntax: ANSI-Common-Lisp; Base: 10; Package: cl-user -*-
;;;; ***********************************************************************
;;;; FILE IDENTIFICATION
;;;;
;;;; Name:          sequence-utils.lisp
;;;; Version:       0.2
;;;; Project:       utilities
;;;; Purpose:       utilities for working with sequences
;;;;
;;;; ***********************************************************************

(in-package "CCL")

;;; -----------------------------------------------------------------
;;; splitting sequences
;;; -----------------------------------------------------------------

;;; Split a sequence SEQ at each point where TEST is true 
;;; DIR should be one of :BEFORE, :AFTER or :ELIDE

(defun split-if (test seq &optional (dir :before))
  (remove-if
   #'(lambda (x) (equal x (subseq seq 0 0)))
   (loop for start fixnum = 0 
         then (if (eq dir :before) stop (the fixnum (1+ (the fixnum stop))))
         while (< start (length seq))
         for stop = (position-if 
                     test seq 
                     :start (if (eq dir :elide) start (the fixnum (1+ start))))
         collect (subseq 
                  seq start 
                  (if (and stop (eq dir :after)) 
                    (the fixnum (1+ (the fixnum stop))) 
                    stop))
         while stop)))
  
(defun split-if-char (char seq &optional dir)
  (split-if #'(lambda (ch) (eq ch char)) seq dir))

(defmethod split-lines ((text string))
  (delete-if (lambda (x) (string= x ""))
             (mapcar (lambda (s)
                       (string-trim '(#\return #\newline) s))
                     (split-if (lambda (c) (member c '(#\return #\newline) :test #'char=))
                               text))))

;;; -----------------------------------------------------------------
;;; matching subsequences
;;; -----------------------------------------------------------------

(defun match-subsequence (subseq seq &key (test #'eql) (start 0))
  (let ((max-index (1- (length seq))))
    (block matching
      ;; search for mismatches
      (dotimes (i (length subseq))
        (let ((pos (+ start i)))
          (when (or (> pos max-index)
                    (not (funcall test (elt seq pos)
                                  (elt subseq i))))
            (return-from matching nil))))
      ;; no mismatches found; return true
      (return-from matching t))))

(defun %find-matching-subsequence-backward (subseq seq &key (test #'eql) (start 0) end)
  (let ((end (or end (length seq)))
        (pos end)
        (min-index (or start 0)))
    (block finding
      (dotimes (i (- (length seq) start))
        (setf pos (- end i))
        (if (<= pos min-index)
            (return-from finding nil)
            (when (match-subsequence subseq seq :test test :start pos)
              (return-from finding pos))))
      nil)))

(defun %find-matching-subsequence-forward (subseq seq &key (test #'eql) (start 0) end)
  (let ((pos start)
        (max-index (or end (length seq))))
    (block finding
      (dotimes (i (- (length seq) start))
        (setf pos (+ start i))
        (if (>= pos max-index)
            (return-from finding nil)
            (when (match-subsequence subseq seq :test test :start pos)
              (return-from finding pos))))
      nil)))

(defun find-matching-subsequence (subseq seq &key (test #'eql) (start 0) end from-end)
  (if from-end
      (%find-matching-subsequence-backward subseq seq :test test :start start :end end)
      (%find-matching-subsequence-forward subseq seq :test test :start start :end end)))
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3
;;;; END FILE ./reference/ccl/library/sequence-utils.lisp
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4n









;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4n









;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4n









;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4n











\;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1
;;;; BEGIN FILE ./reference/ccl/library/intel-io.lisp
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2
;;;-*- Mode: Lisp; Package: CCL -*-
;;;
;;; Copyright 2010 Clozure Associates
;;;
;;; Licensed under the Apache License, Version 2.0 (the "License");
;;; you may not use this file except in compliance with the License.
;;; You may obtain a copy of the License at
;;;
;;;     http://www.apache.org/licenses/LICENSE-2.0
;;;
;;; Unless required by applicable law or agreed to in writing, software
;;; distributed under the License is distributed on an "AS IS" BASIS,
;;; WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
;;; See the License for the specific language governing permissions and
;;; limitations under the License.

(in-package "CCL")

;;; Some primitives for accessing Intel I/O ports from CCL.
;;; Note that port access requires special privileges which
;;; the OS may or may not provide (and generally only provides
;;; to root/privileged users if it does provide them.)
;;; Port addresses must be unsigned 16-bit integers.
;;; Values written via '%outb', '%outw', and '%outl' must be
;;; unsigned            8-bit    16-bit  or   32-bit integers
;;;
;;; (%inb port) - read an unsigned 8-bit byte from the specified I/O port
;;; (%inw port) -                  16-bit
;;; (%inl port) -                  32-bit
;;; (%outb val port) - write an unsigned 8-bit value to the specified I/O port
;;; (%outw val port) - write an unsigned 16-bit value to the specified I/O port
;;; (%outl val port) - write an unsigned 32-bit value to the specified I/O port


#+x8632-target
(progn
(defx8632lapfunction %inb ((port arg_z))
  (mark-as-imm temp1)
  (unbox-fixnum port edx)
  (:byte #xec)                          ;inb (%dx),%al
  (mark-as-node temp1)
  (movzbl (% al) (% eax))
  (box-fixnum eax arg_z)
  (single-value-return))

  
(defx8632lapfunction %inw ((port arg_z))
  (mark-as-imm temp1)
  (unbox-fixnum port edx)
  (:byte #x66) (:byte #xed)             ;inw (%dx),%ax
  (mark-as-node temp1)
  (movzwl (% ax) (% eax))
  (box-fixnum eax arg_z)
  (single-value-return))

(defx8632lapfunction %inl ((port arg_z))
  (mark-as-imm temp1)
  (unbox-fixnum port edx)
  (:byte #xed)                          ;inl (%dx),%eax
  (mark-as-node temp1)
  (jmp-subprim .SPmakeu32))


(defx8632lapfunction %outb ((val arg_y) (port arg_z))
  (unbox-fixnum val eax)
  (mark-as-imm temp1)
  (unbox-fixnum port edx)
  (:byte #xee)                          ;outb %al,(%dx)
  (mark-as-node temp1)
  (mov (% val) (% arg_z))
  (single-value-return))


(defx8632lapfunction %outw ((val arg_y) (port arg_z))
  (unbox-fixnum val eax)
  (mark-as-imm temp1)
  (unbox-fixnum port edx)
  (:byte #x66) (:byte #xef)                          ;outw %ax,(%dx)
  (mark-as-node temp1)
  (mov (% val) (% arg_z))
  (single-value-return))


(defx8632lapfunction %outl ((val arg_y) (port arg_z))
  (save-simple-frame)
  (pushl (% port))
  (movl (% val) (% arg_z))
  (call-subprim .SPgetu32)
  (popl (% temp0))
  (mark-as-imm temp1)
  (unbox-fixnum temp0 edx)
  (:byte #xef)                          ;outl %eax,(%dx)
  (mark-as-node temp1)
  (restore-simple-frame)
  (single-value-return))
)

#+x8664-target
(progn
(defx86lapfunction %inb ((port arg_z))
  (unbox-fixnum port rdx)
  (:byte #xec)                          ;inb (%dx),%al
  (movzbl (% al) (% eax))
  (box-fixnum rax arg_z)
  (single-value-return))

  
(defx86lapfunction %inw ((port arg_z))
  (unbox-fixnum port rdx)
  (:byte #x66) (:byte #xed)             ;inw (%dx),%ax
  (movzwl (% ax) (% eax))
  (box-fixnum rax arg_z)
  (single-value-return))

(defx86lapfunction %inl ((port arg_z))
  (unbox-fixnum port rdx)
  (:byte #xed)                          ;inl (%dx),%eax
  (box-fixnum rax arg_z)
  (single-value-return))


(defx86lapfunction %outb ((val arg_y) (port arg_z))
  (unbox-fixnum val rax)
  (unbox-fixnum port rdx)
  (:byte #xee)                          ;outb %al,(%dx)
  (movq (% val) (% arg_z))
  (single-value-return))


(defx86lapfunction %outw ((val arg_y) (port arg_z))
  (unbox-fixnum val rax)
  (unbox-fixnum port rdx)
  (:byte #x66) (:byte #xef)                          ;outw %ax,(%dx)
  (mov (% val) (% arg_z))
  (single-value-return))


(defx86lapfunction %outl ((val arg_y) (port arg_z))
  (unbox-fixnum val imm0)
  (unbox-fixnum port rdx)
  (:byte #xef)                          ;outl %eax,(%dx)
  (mov (% val) (% arg_z))
  (single-value-return))
)


;;; Linux provides two primitives which allow a process running as
;;; a privileged user to execute I/O instructions.

;;; #_ioperm can be used to gain/renounce access to a range if I/O
;;; ports; all ports in that range must be below #x4000.
;;; #_iopl can be used to set the calling process's privilege level
;;; to a value between 0 and 3; 0 being the level at which user code
;;; usually runs and 3 being the most privileged level.

#+(and linux-target x86-target)
(progn
(defun ioperm (enable-p first-port last-port)
  (check-type first-port (integer 0 (#x400)))
  (check-type last-port (integer 0 (#x400)))
  (unless (<= first-port last-port)
    (error "First port ~d must be <= last port ~d." first-port last-port))
  (or (eql 0
           (external-call "ioperm"
                          :unsigned-long first-port
                          :unsigned-long (1+ (- last-port first-port))
                          :int (if enable-p 1 0)
                          :int))
      (error "Error ~aing port access: ~a."
             (if enable-p "enabl" "disabl")
             (%strerror (%get-errno)))))

(defun iopl (level)
  (check-type level (integer 0 3))
  (or (eql 0 (external-call "iopl" :int level :int))
      (error "Can't set I/O privilege level to ~d: ~a."
             level
             (%strerror (%get-errno)))))
)

;;; Other OSes may provide similar functionality.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3
;;;; END FILE ./reference/ccl/library/intel-io.lisp
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4n









;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4n









;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4n









;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4n











\;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1
;;;; BEGIN FILE ./reference/ccl/library/mach-o.lisp
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2
;;;
;;; Copyright 2009 Clozure Associates
;;;
;;; Licensed under the Apache License, Version 2.0 (the "License");
;;; you may not use this file except in compliance with the License.
;;; You may obtain a copy of the License at
;;;
;;;     http://www.apache.org/licenses/LICENSE-2.0
;;;
;;; Unless required by applicable law or agreed to in writing, software
;;; distributed under the License is distributed on an "AS IS" BASIS,
;;; WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
;;; See the License for the specific language governing permissions and
;;; limitations under the License.

(defstruct mach-o-file
  header
  load-commands
  segments
  symbols
  strings)

(defmethod print-object ((m mach-o-file) stream)
  (print-unreadable-object (m stream :type t :identity t)))


(defstruct mach-o-string-table
  (hash (make-hash-table :test #'equal))
  (string (make-array 100 :element-type '(unsigned-byte 8) :fill-pointer 1 :adjustable t)))

(defstruct mach-o-symbol
  string-index
  type
  sect
  desc
  value)

(defun init-mach-o-string-table (fd symtab-command)
  (fd-lseek fd (pref symtab-command #>symtab_command.stroff) #$SEEK_SET)
  (let* ((strsize (pref symtab-command #>symtab_command.strsize))
         (nbytes (+ strsize strsize))
         (bytes (make-array nbytes :element-type '(unsigned-byte 8)))
         (out 0))
    (declare (fixnum nbytes strsize out))
    (%stack-block ((buf 32768))
      (do* ((n strsize))
           ((= n 0))
        (let* ((bufsize (fd-read fd buf (min n 32768))))
          (%copy-ptr-to-ivector buf 0 bytes out bufsize)
          (incf out bufsize)
          (decf n bufsize))))
    (make-mach-o-string-table
     :string (make-array nbytes
                         :element-type '(unsigned-byte 8)
                         :displaced-to bytes
                         :fill-pointer strsize
                         :adjustable t))))

(defun init-mach-o-symbols64 (fd symtab-command)
  (fd-lseek fd (pref symtab-command #>symtab_command.symoff) #$SEEK_SET)
  (rlet ((nlist #>nlist_64))
    (let* ((nsyms (pref symtab-command #>symtab_command.nsyms))
           (nentries (* nsyms 2))
           (vec (make-array nentries)))
      (declare (fixnum nsyms nentries))
      (flet ((read-nlist ()
               (fd-read fd nlist (record-length #>nlist_64))
               (make-mach-o-symbol :string-index (pref nlist #>nlist_64.n_un.n_strx)
                                   :type (pref nlist #>nlist_64.n_type)
                                   :sect (pref nlist #>nlist_64.n_sect)
                                   :desc (pref nlist #>nlist_64.n_desc)
                                   :value (pref nlist #>nlist_64.n_value))))
        (dotimes (i nsyms (make-array nentries
                                      :displaced-to vec
                                      :fill-pointer nsyms
                                      :adjustable t))
          (setf (svref vec i) (read-nlist)))))))
    

(defun read-header-and-load-commands64 (fd)
  (fd-lseek fd 0 #$SEEK_SET)
  (let* ((mh (make-record :mach_header_64))
         (mach-o (make-mach-o-file :header mh)))
    (when (= (fd-read fd mh (record-length :mach_header_64))
             (record-length :mach_header_64))
      (collect ((commands))
        (flet ((read-command ()
                 (rlet ((cmd :load_command))
                   (fd-read fd cmd (record-length :load_command))
                   (let* ((n (pref cmd :load_command.cmdsize))
                          (p (#_malloc n))
                          (q (%inc-ptr p (record-length :load_command))))
                     (#_memcpy p cmd (record-length :load_command))
                     (fd-read fd q (- n (record-length :load_command)))
                     (let* ((lcmd (pref cmd :load_command.cmd))
                            (ftype 
                             (cond ((= lcmd #$LC_SEGMENT_64)
                                    (load-record #>segment_command_64))
                                   ((= lcmd #$LC_SYMTAB)
                                    (load-record #>symtab_command))
                                   ((= lcmd #$LC_DYSYMTAB)
                                    (load-record #>dysymtab_command))
                                   ((= lcmd #$LC_LOAD_DYLINKER)
                                    (load-record #>dylinker_command))
                                   ((= lcmd #$LC_UUID)
                                    (load-record #>uuid_command))
                                   ((= lcmd #$LC_LOAD_DYLIB)
                                    (load-record #>dylib_command))
                                   ((= lcmd #$LC_UNIXTHREAD)
                                    (load-record #>thread_command)))))

                       (if ftype
                         (%set-macptr-type p (foreign-record-type-ordinal ftype))
                         (format t "~&~x" lcmd)))
                     p))))
          (dotimes (i (pref mh :mach_header_64.ncmds))
            (commands (read-command)))
          (setf (mach-o-file-load-commands mach-o) (commands))
          (dolist (cmd (mach-o-file-load-commands mach-o))
            (when (= #$LC_SYMTAB (pref cmd #>load_command.cmd))
              (setf (mach-o-file-strings mach-o)
                    (init-mach-o-string-table fd cmd)
                    (mach-o-file-symbols mach-o)
                    (init-mach-o-symbols64 fd cmd))))
          mach-o)))))

(defun mach-o-string-index (mo string)
  (let* ((bytes (make-array (the fixnum (+ (length string) 2)) :element-type '(unsigned-byte 8))))
    (declare (dynamic-extent bytes))
    (dotimes (i (length string))
      (setf (aref bytes (1+ i)) (char-code (char string i))))
    (let* ((pos (search bytes (mach-o-string-table-string (mach-o-file-strings mo)))))
      (when pos (1+ pos)))))
              
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3
;;;; END FILE ./reference/ccl/library/mach-o.lisp
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4n









;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4n









;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4n









;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4n











\;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1
;;;; BEGIN FILE ./reference/ccl/library/pty.lisp
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2
;;;-*-Mode: LISP; Package: CCL -*-
;;;
;;; Copyright 2002-2009 Clozure Associates
;;;
;;; Licensed under the Apache License, Version 2.0 (the "License");
;;; you may not use this file except in compliance with the License.
;;; You may obtain a copy of the License at
;;;
;;;     http://www.apache.org/licenses/LICENSE-2.0
;;;
;;; Unless required by applicable law or agreed to in writing, software
;;; distributed under the License is distributed on an "AS IS" BASIS,
;;; WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
;;; See the License for the specific language governing permissions and
;;; limitations under the License.

;;; (very) preliminary support for dealing with TTYs (and PTYs).

(in-package "CCL")

;;; Open a (connected) pair of pty file descriptors, such that anything
;;; written to one can be read from the other.
#+linuxppc-target
(eval-when (:load-toplevel :execute)
  (open-shared-library "libutil.so"))

(defun open-pty-pair ()
  (rlet ((alphap :unsigned 0)
	 (betap :unsigned 0))
    (let* ((status (#_openpty alphap betap (%null-ptr) (%null-ptr) (%null-ptr))))
      (if (eql status 0)
	(values (pref alphap :unsigned) (pref betap :unsigned))
	(%errno-disp (%get-errno))))))


(defun %get-tty-attributes (tty-fd &optional control-chars)
  (if (and control-chars
	   (not (and (typep control-chars 'simple-string)
		     (= (length control-chars) #$NCCS))))
    (report-bad-arg control-chars '(or null (simple-string #.#$NCCS))))
  (rlet ((attr :termios))
    (let* ((result (#_tcgetattr tty-fd attr)))
      (if (< result 0)
	(values nil nil nil nil nil nil nil)
	(progn
	  (if control-chars
            (%str-from-ptr (pref attr :termios.c_cc) #$NCCS control-chars))
	  (values
	   (pref attr :termios.c_iflag)
	   (pref attr :termios.c_oflag)
	   (pref attr :termios.c_cflag)
	   (pref attr :termios.c_lflag)
	   #+darwin-target 0
	   #-darwin-target
	   (pref attr :termios.c_line)
	   control-chars
	   (pref attr :termios.c_ispeed)
	   (pref attr :termios.c_ospeed)))))))

(defun %set-tty-attributes (tty &key
				input-modes
				output-modes
				control-modes
				local-modes
				control-chars
				input-speed
				output-speed)
  (if (and control-chars
	   (not (and (typep control-chars 'simple-string)
		     (= (length control-chars) #$NCCS))))
    (report-bad-arg control-chars '(or null (simple-string #.#$NCCS))))
  (rlet ((attr :termios))
	(let* ((get-ok (#_tcgetattr tty attr))
	       (write-back nil))
	  (when (eql 0 get-ok)
	    (when input-modes
	      (setf (pref attr :termios.c_iflag) input-modes)
	      (setq write-back t))
	    (when output-modes
	      (setf (pref attr :termios.c_oflag) output-modes)
	      (setq write-back t))
	    (when control-modes
	      (setf (pref attr :termios.c_cflag) control-modes)
	      (setq write-back t))
	    (when local-modes
	      (setf (pref attr :termios.c_lflag) local-modes)
	      (setq write-back t))
	    (when control-chars
              (%cstr-pointer control-chars (pref attr :termios.c_cc) nil)
	      (setq write-back t))
	    (when input-speed
	      (setf (pref attr :termios.c_ispeed) input-speed)
	      (setq write-back t))
	    (when output-speed
	      (setf (pref attr :termios.c_ospeed) output-speed)
	      (setq write-back t))
	    (and write-back
		 (eql 0 (#_tcsetattr tty #$TCSAFLUSH attr)))))))

(defun enable-tty-input-modes (tty mask)
  (let* ((old (nth-value 0 (%get-tty-attributes tty))))
    (when old
      (%set-tty-attributes tty :input-modes (logior old mask)))))

(defun disable-tty-input-modes (tty mask)
  (let* ((old (nth-value 0 (%get-tty-attributes tty))))
    (when old
      (%set-tty-attributes tty :input-modes (logand old (lognot mask))))))

(defun enable-tty-output-modes (tty mask)
  (let* ((old (nth-value 1 (%get-tty-attributes tty))))
    (when old
      (%set-tty-attributes tty :output-modes (logior old mask)))))

(defun disable-tty-output-modes (tty mask)
  (let* ((old (nth-value 1 (%get-tty-attributes tty))))
    (when old
      (%set-tty-attributes tty :output-modes (logand old (lognot mask))))))

(defun enable-tty-control-modes (tty mask)
  (let* ((old (nth-value 2 (%get-tty-attributes tty))))
    (when old
      (%set-tty-attributes tty :control-modes (logior old mask)))))

(defun disable-tty-control-modes (tty mask)
  (let* ((old (nth-value 2 (%get-tty-attributes tty))))
    (when old
      (%set-tty-attributes tty :control-modes (logand old (lognot mask))))))

(defun enable-tty-local-modes (tty mask)
  (let* ((old (nth-value 3 (%get-tty-attributes tty))))
    (when old
      (%set-tty-attributes tty :local-modes (logior old mask)))))

(defun disable-tty-local-modes (tty mask)
  (let* ((old (nth-value 3 (%get-tty-attributes tty))))
    (when old
      (%set-tty-attributes tty :local-modes (logand old (lognot mask))))))

(defun set-tty-raw (tty)
  (rlet ((attr :termios))
    (#_cfmakeraw attr)
    (eql 0 (#_tcsetattr tty #$TCSAFLUSH attr))))
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3
;;;; END FILE ./reference/ccl/library/pty.lisp
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4n









;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4n









;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4n









;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4n











\;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1
;;;; BEGIN FILE ./reference/ccl/library/dominance.lisp
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2
;;;-*-Mode: LISP; Package: CCL -*-
;;;
;;; Copyright 2010 Clozure Associates
;;;
;;; Licensed under the Apache License, Version 2.0 (the "License");
;;; you may not use this file except in compliance with the License.
;;; You may obtain a copy of the License at
;;;
;;;     http://www.apache.org/licenses/LICENSE-2.0
;;;
;;; Unless required by applicable law or agreed to in writing, software
;;; distributed under the License is distributed on an "AS IS" BASIS,
;;; WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
;;; See the License for the specific language governing permissions and
;;; limitations under the License.

(in-package "CCL")

;(setq *print-array* nil)
;(setq *print-simple-bit-vector* nil)

#+:linuxx8664-target
(progn

(export '(idom-heap-utilization))

#|
(open-core "home:core.28209")
(idom-heap-utilization :unit nil :sort :size)
|#

(defconstant half-fixnum-shift (ash (integer-length most-positive-fixnum) -1))

(defconstant half-fixnum-mask (1- (ash 1 half-fixnum-shift)))

(defstruct (core-graph (:include core-info) (:conc-name "CG.") (:constructor %cons-cg))
  (heap-base 0 :type fixnum)
  (heap-end 0 :type fixnum)
  (stage nil) ;; indication of what has been computed and what hasn't, so can restart.
  (head-p #.(make-array 0 :element-type 'bit) :type simple-bit-vector)
  (ptrs-p #.(make-array 0 :element-type 'bit) :type simple-bit-vector)
  ;; Nodes after eliminating single-entry and leaf objects
  (nodes #() :type simple-vector) ;; map postorder-idx -> dnode
  (revnodes #() :type simple-vector) ;; map dnode -> postorder-idx
  (roots () :type list)
  (predecessors #() :type simple-vector) ;; postorder-idx -> list of postorder indices of predecessors
  (node-doms #() :type simple-vector) ;; postorder-idx of node -> postorder-idx of its immediate dominator
  (idoms #() :type simple-vector) ;; sequence of postorder indices of immediate dominators
  (revidoms #() :type simple-vector) ;; map dnode -> index in idoms
  (logsizes #() :type simple-vector) ;; corresponding sequence of logical sizes (including all owned objects)
  (physizes #() :type simple-vector) ;; corresponding sequence of physical sizes (including all owned objects)
  )

(setq *core-info-class* 'core-graph)

(defparameter *cg-stages* '(nil :objects :leaves :postorder :predecessors :idoms :idom-sizes t))

(defmethod cg-compute :before (stage &aux (cg (current-core)))
  (assert (memq stage *cg-stages*))
  (check-type cg core-graph)
  (when (eql (cg.heap-base cg) 0)
    (let ((area-ptr (core-q (kernel-global-address 'tenured-area))))
      (setf (cg.heap-base cg) (core-q area-ptr target::area.low))
      (setf (cg.heap-end cg) (core-q area-ptr target::area.active))))
  ;; ensure have all the prereqs
  (loop for undone = (cdr (memq (cg.stage cg) *cg-stages*))
        while (memq stage (cdr undone))
        do (format t "~&Computing ~a" (car undone))
        do (cg-compute (car undone))))

(defmethod cg-compute :after (stage &aux (cg (current-core)))
  (setf (cg.stage cg) stage))

(defmethod cg-compute ((stage (eql t))) ;; before method does all the work
  nil)


(declaim (inline core-node-p))
(defun core-node-p (ptr) (or (core-consp  ptr) (core-uvector-p ptr)))

(declaim (inline dnode addr))

(defun dnode (base n) (the fixnum (ash (%i- n base) (- target::dnode-shift))))

(defun addr (base n) (%i+ base (ash (the fixnum n) target::dnode-shift)))

(defun tagged-ptr (ptr)
  (let ((header (core-q ptr)))
    (cond ((uvheader-p header)
           (let ((subtag (uvheader-typecode header)))
             (+ ptr (cond ((eq subtag target::subtag-symbol) target::fulltag-symbol)
                          ((eq subtag target::subtag-function) target::fulltag-function)
                          (t target::fulltag-misc)))) )
          (t
           (+ ptr target::fulltag-cons)))))

(defun core-physsize (obj)
  ;; (assert (core-node-p obj))
  (if (core-consp obj)
    target::dnode-size
    (logandc2 (+ (uvheader-byte-size (core-uvheader obj)) target::node-size (1- target::dnode-size))
              (1- target::dnode-size))))

(defun core-object-sizes (obj)
  (let ((fulltag (logand obj target::fulltagmask)))
    (if (eq fulltag target::fulltag-cons)
      (values target::dnode-size target::dnode-size)
      (if (%i<= target::fulltag-misc fulltag)
        (let* ((header (core-uvheader obj))
               (logsize (uvheader-byte-size header))
               ;; total including header and alignment.
               (total (logandc2 (+ logsize target::node-size (1- target::dnode-size))
                                (1- target::dnode-size))))
          (values logsize total))))))

(defun link-range (ptr)
  (declare (fixnum ptr))
  (let* ((addr (logandc2 ptr target::fulltagmask))
         (header (core-q addr))
         (end addr))
    (declare (fixnum addr end))
    (if (uvheader-p header)
      (let ((subtag (%ilogand header target::fulltagmask)))
        (declare (fixnum subtag))
        (when (or (eq subtag target::fulltag-nodeheader-0)
                  (eq subtag target::fulltag-nodeheader-1))
          (incf addr target::node-size)
          (setq end (+ addr (ash (uvheader-size header) target::word-shift)))
          (when (eql (uvheader-typecode header) target::subtag-function)
            (incf addr (ash (core-l addr) target::word-shift)))))
      (setq end (+ addr target::dnode-size)))
    (values addr end)))

(defmethod cg-compute ((stage (eql :objects)) &aux (cg (current-core)))
  "Compute incoming pointer counts"
  (let* ((base (cg.heap-base cg))
         (high (cg.heap-end cg))
         (ndnodes (dnode base high))
         (ptrs (make-array ndnodes :element-type 'bit :initial-element 0))
         (head (make-array ndnodes :element-type 'bit :initial-element 0)))
    (declare (fixnum base ndnodes)
             (type simple-bit-vector ptrs head))
    (map-core-region base high
                     (lambda (obj)
                       (multiple-value-bind (start end) (link-range obj)
                         (loop for addr from start below end by target::node-size
                               as ptr = (core-q addr)
                               do (when (and (<= base ptr) (< ptr high) (core-node-p ptr))
                                    (let ((dnode (dnode base ptr)))
                                      (setf (aref head dnode) (aref ptrs dnode))
                                      (setf (aref ptrs dnode) 1)))))
                       ;; Mark that have an object even if there are no refs to it.
                       (let ((dnode (dnode base obj)))
                         (when (eql (aref ptrs dnode) 0)
                           (setf (aref head dnode) 1)))))
    ;; head = 0, ptrs = 0  -- not an object (internal dnode)
    ;; head = 0, ptrs = 1  -- single-entry object (exactly one pointer to it)
    ;; head = 1, ptrs = 0  -- root object (no pointers to it)
    ;; head = 1, ptrs = 1  -- multiple-entry object
    (setf (cg.head-p cg) head)
    (setf (cg.ptrs-p cg) ptrs)
    cg))

(defmethod cg-compute ((stage (eql :leaves)) &aux (cg (current-core)))
  "Mark leaf nodes (nodes with no outgoing pointers)"
  (let* ((base (cg.heap-base cg))
	 (high (cg.heap-end cg))
         (ptrs (cg.ptrs-p cg))
         (head (cg.head-p cg)))
    (declare (fixnum base high))
    (loop for dn upfrom 0
          for h bit across head
          for p bit across ptrs
	  do (unless (and (eql h 0) (eql p 0))
	       (unless (multiple-value-bind (start end) (link-range (addr base dn))
			 (loop for addr from start below end by target::node-size
			    as val = (core-q addr)
			    thereis (and (<= base val) (< val high) (core-node-p val))))
		 (setf (aref head dn) 0)
		 (setf (aref ptrs dn) 0))))
    ;; head = 0, ptrs = 0  -- not an object (internal dnode) or a leaf
    ;; head = 0, ptrs = 1  -- single-entry object (exactly one pointer to it), not leaf
    ;; head = 1, ptrs = 0  -- root object (no pointers to it), not leaf
    ;; head = 1, ptrs = 1  -- multiple-entry object, not leaf
    cg))

(defun collect-root-dnodes (cg)
  (let ((head (cg.head-p cg))
	(ptrs (cg.ptrs-p cg)))
    (loop for dn = (position 1 head) then (position 1 head :start (1+ dn)) while dn
          when (eql (aref ptrs dn) 0) collect dn)))

(defmethod cg-compute ((stage (eql :postorder)) &aux (cg (current-core)))
  (let* ((roots (collect-root-dnodes cg))
	 (head (cg.head-p cg))
	 (ptrs (cg.ptrs-p cg))
         (halo-roots ())
         (n (count 1 head))
         (base (cg.heap-base cg))
         (high (cg.heap-end cg))
         (ndnodes (dnode base high))
         (seen (make-array ndnodes :element-type 'bit :initial-element 0))
         (nodes (make-array n))
         (node-count 0))
    (assert (< ndnodes (ash 1 half-fixnum-shift)))
    (flet ((dfs (root-dn)
             (setf (aref seen root-dn) 1)
             (let ((path (multiple-value-bind (start end) (link-range (addr base root-dn))
			   (list (list* start end root-dn)))))
               (loop
		  (destructuring-bind (start end . pred-dn) (car path)
		    (incf (caar path) target::node-size)
		    (if (eql start end)
			(progn
			  (when (eql (aref head pred-dn) 1)
			    (setf (aref nodes node-count) pred-dn)
			    (incf node-count))
			  (setq path (cdr path))
			  (when (null path) (return)))
			(let ((next (core-q start)))
			  (when (and (<= base next) (< next high) (core-node-p next))
			    (let ((next-dn (dnode base next)))
			      (if (eql (aref ptrs next-dn) 0) ;; root or leaf -- ignore leaf
				  (when (eql (aref head next-dn) 1) ;; previously assumed halo root
				    #+debug (warn "REASSIGNING HALO ROOT ~s -> ~d" (assq next-dn halo-roots) node-count)
				    (assert (eql (aref seen next-dn) 1))
				    (setf (aref ptrs next-dn) 1)
				    ;; not actually a root after all. Shift the region containing
				    ;; nodes from previous handling of next-dn to the end, as if
				    ;; just walked it right now.
				    (destructuring-bind (start . end) (cdr (assq next-dn halo-roots))
				      (shift-vector-region nodes start end node-count))
				    (setq halo-roots (delete next-dn halo-roots :key 'car)))
				  ;; non-leaf non-root
				  (when (eq (aref seen next-dn) 0)
				    (setf (aref seen next-dn) 1)
				    (multiple-value-bind (start end) (link-range next)
				      (push (list* start end next-dn) path)))))))))))))
      (map nil #'dfs roots)
      ;; Map through "halo" roots
      (loop until (eql (length nodes) node-count)
	 as circ = (loop for nd = (position 1 head) then (position 1 head :start (1+ nd)) while nd
		      when (eql (aref seen nd) 0) return nd)
	 do (when (null circ)
	      ;; Must have some cycles consisting of just single-entry nodes, since we caught all other ones
	      (setq circ (loop for nd = (position 1 ptrs) then (position 1 ptrs :start (1+ nd)) while nd
			    when (eql (aref seen nd) 0) return nd))
              #+debug (progn (format t "~&Breaking a SINGLE-NODE CYCLE at ") (core-print (tagged-ptr (addr (cg.heap-base cg) circ))))
	      (setf (aref head circ) 1))
	 do (let ((start node-count))
              #+debug (progn (format t "~&Breaking out a HALO ROOT at ") (core-print (tagged-ptr (addr (cg.heap-base cg) circ))))
	      (dfs circ)
	      ;; This just makes it faster to find these in the dfs, it gets undone below.
	      (setf (aref ptrs circ) 0)
	      (push (list* circ start node-count) halo-roots))))
    (setq roots (nconc (mapcar (lambda (x &aux (dn (car x)))
                                 (setf (aref ptrs dn) 1)
                                 dn)
                               halo-roots)
                       roots))
    (setf (cg.roots cg) roots)
    (setf (cg.nodes cg) nodes)
    cg))

(defun shift-vector-region (vector start mid end)
  ;; move the interval from START to MID to after the interval from MID to END.
  (loop as n2 = (- end mid) as n1 = (- mid start)
        while (and (> n2 0) (> n1 0))
        do (if (< n1 n2)
             (loop for i from start below mid
                   do (rotatef (aref vector i) (aref vector (+ i n1)))
                   finally (setq start mid mid (+ mid n1)))
             (loop for i from mid below end
                   do (rotatef (aref vector i) (aref vector (- i n1)))
                   finally (setq start (+ start n2))))))


(declaim (inline make-rev-map))

(defun make-rev-map (arr &optional (fn 'identity))
  (let* ((n (length arr))
         (revarr (make-array n)))
    (loop for i from 0 below n as dn = (funcall fn (aref arr i))
          do (setf (aref revarr i) (+ (ash i half-fixnum-shift) dn))) ;; [pidx ,, dn]
    (sort revarr #'< :key (lambda (i.d) (logand i.d half-fixnum-mask)))))

(defun index-for-dnode (revnodes dn)
  (declare (type simple-vector revnodes) (fixnum dn)
           (optimize (speed 3) (safety 0)))
  (let ((low 0)
        (high (length revnodes)))
    (declare (fixnum low high) )
    (loop
      (when (eq low high) (return nil))
      (let* ((half (ash (%i+ high low) -1))
             (val (%ilogand2 (%svref revnodes half) half-fixnum-mask)))
        (declare (fixnum half val))
        (when (eq val dn)
          (return (the fixnum (ash (the fixnum (%svref revnodes half)) (- half-fixnum-shift)))))
        (if (< val dn)
          (setq low (1+ half))
          (setq high half))))))

(defmacro do-pointers ((child-var addr) &body body)
  (let ((path (gensym))
        (start (gensym))
        (end (gensym)))
    ` (macrolet ((descend-pointers (child)
                   `(multiple-value-bind (start end) (link-range ,child)
                      (push (cons start end) ,',path))))
        (let ((,path nil))
          (descend-pointers ,addr)
          (loop
            (destructuring-bind (,start . ,end) (car ,path)
              (incf (caar ,path) target::node-size)
              (if (eq ,start ,end)
                (unless (setq ,path (cdr ,path)) (return))
                (let ((,child-var (core-q ,start)))
                  (when (core-node-p ,child-var)
                    ,@body)))))))))

(defmethod cg-compute ((stage (eql :predecessors)) &aux (cg (current-core)))
  (let* ((base (cg.heap-base cg))
         (high (cg.heap-end cg))
	 (roots (cg.roots cg))
	 (head (cg.head-p cg))
	 (ptrs (cg.ptrs-p cg))
	 (nodes (cg.nodes cg)) ;; pidx -> dn
         (n (length nodes))
         (revnodes (make-rev-map nodes)) ;; dn -> pidx
         (predecessors (make-array (1+ n) :initial-element 0)))
    (flet ((record-predecessor (dn pred-i)
             (let* ((i (index-for-dnode revnodes dn))
                    (old (aref predecessors i)))
               (cond ((eql old 0)
                      (setf (aref predecessors i) (1+ pred-i)))
                     ((fixnump old)
                      (if (eql (logandc2 old half-fixnum-mask) 0)
                        (setf (aref predecessors i) (+ (ash old half-fixnum-shift) pred-i))
                        ;; could do more here, but most cases are covered by the 2-elt optimization
                        (setf (aref predecessors i)
                              (list pred-i
                                    (logand old half-fixnum-mask) (1- (ash old (- half-fixnum-shift)))))))
                     (t (setf (aref predecessors i) (cons pred-i old)))))))
      (loop for dn across nodes as dn-idx upfrom 0
            do (ASSERT (eql dn-idx (index-for-dnode revnodes dn)))
            do (do-pointers (next (addr base dn))
                 (when (and (<= base next) (< next high))
                   (let ((next-dn (dnode base next)))
                     (when (eq (aref ptrs next-dn) 1) ;; non-leaf
                       (if (eql (aref head next-dn) 1) ;; stop at head node
			 (record-predecessor next-dn dn-idx)
			 (descend-pointers next)))))))
      ;; Pretend there is one single root node which is the predecessor of all our roots.
      (loop for root-dn in roots do (record-predecessor root-dn n)))
    (setf (cg.revnodes cg) revnodes)
    (setf (cg.predecessors cg) predecessors)
    cg))

(defun predecessor-list (predecessors i)
  (let ((p (aref predecessors i)))
    (cond ((eql p 0) '())
          ((fixnump p)
           (let ((p1 (logand p half-fixnum-mask)))
             (if (eql p p1)
               (list (1- p1))
               (list p1 (1- (ash p (- half-fixnum-shift)))))))
          (t p))))

;;; Ok, now on to compute dominance
;; immediate dominators per Cooper, Harvey, Kennedy.
(defmethod cg-compute ((stage (eql :idoms)) &aux (cg (current-core)))
  (let* ((predecessors (cg.predecessors cg))
	 (root-idx (1- (length predecessors)))
         (doms (make-array (1+ root-idx) :initial-element nil)))
    (flet ((intersect (i1 i2)
             (when (and i1 i2)
               (loop until (eq i1 i2)
                     do (loop while (< i1 i2) do (setq i1 (aref doms i1)))
                     do (loop while (< i2 i1) do (setq i2 (aref doms i2)))))
             (or i1 i2))
           (preds (i)
             (predecessor-list predecessors i)))
      (declare (inline intersect preds))
      (setf (aref doms root-idx) root-idx)
      (loop for changed = 0
            do (loop for i from (1- root-idx) downto 0
                     do (let ((new-idom nil))
                          (loop for p in (preds i)
                                do (when (aref doms p) (setq new-idom (intersect p new-idom))))
                          (unless (eql new-idom (aref doms i))
                            (setf (aref doms i) new-idom)
                            (incf changed))))
            DO (progn #+debug (format t "~&Finished loop, changed=~d~%" changed))
            while (> changed 0)))
    (setf (cg.node-doms cg) doms)
    (setf (cg.idoms cg) (sort (delete root-idx (remove-duplicates doms)) #'<))
    (let ((nodes (cg.nodes cg)))
      (setf (cg.revidoms cg) (make-rev-map (cg.idoms cg) (lambda (ni) (aref nodes ni)))))
    cg))

(defmethod cg-compute ((stage (eql :idom-sizes)) &aux (cg (current-core)))
  (let* ((nodes (cg.nodes cg))
         (idom-nodes (cg.idoms cg))
         (idom-revnodes (cg.revidoms cg))
         (seen (make-array (length (cg.head-p cg)) :element-type 'bit :initial-element 0))
         (base (cg.heap-base cg))
         (high (cg.heap-end cg))
	 (nidoms (length idom-nodes))
	 (logsizes (make-array nidoms))
	 (physizes (make-array nidoms)))
    ;; Any object that's not an idom is only reachable by one idom,
    ;; so don't need to reinit SEEN bits between iterations.
    (setf (cg.idoms cg) idom-nodes)
    (loop for i from 0 below nidoms as idom = (aref idom-nodes i)
	 do (let* ((dn (aref nodes idom))
		   (addr (addr base dn))
		   (ptr (tagged-ptr addr)))
	      (multiple-value-bind (logsize physsize) (core-object-sizes ptr)
		(do-pointers (next addr)
		  (when (and (<= base next) (< next high))
		    (let ((next-dn (dnode base next)))
		      (unless (or (index-for-dnode idom-revnodes next-dn)
				  (eql (aref seen next-dn) 1))
			(setf (aref seen next-dn) 1)
			(multiple-value-bind (this-logsize this-physsize) (core-object-sizes next)
			  (incf logsize this-logsize)
			  (incf physsize this-physsize))
			(descend-pointers next)))))
		(setf (aref logsizes i) logsize)
		(setf (aref physizes i) physsize))))
    (setf (cg.logsizes cg) logsizes)
    (setf (cg.physizes cg) physizes)
    cg))

(defun idom-set-heap-range (area)
  (check-type area (member :tenured :dynamic))
  (multiple-value-bind (base end)
      (cond ((eq area :tenured)
             (let ((area-ptr (core-q (kernel-global-address 'tenured-area))))
               (values (core-q area-ptr target::area.low)
                       (core-q area-ptr target::area.active))))
            ((eq area :dynamic)
             (let* ((newest (core-q (core-q (kernel-global-address 'all-areas)) target::area.succ))
                    (oldest (core-q (kernel-global-address 'tenured-area))))
               (assert (loop for this = newest then older as older = (core-q this target::area.succ)
                             until (eql this oldest)
                             always (eql (core-q this target::area.low) (core-q older target::area.active))))
               (values (core-q oldest target::area.low)
                       (core-q newest target::area.active)))))
    (let ((cg (current-core)))
      (unless (and (eq base (cg.heap-base cg))
                   (eq end (cg.heap-end cg)))
        (setf (cg.stage cg) nil)
        (setf (cg.heap-base cg) base)
        (setf (cg.heap-end cg) end)))))
  

(defun report-idom-heap-utilization (type-infos &key unit sort threshold)
  (let ((data  (loop for type being the hash-key of type-infos using (hash-value info)
                     collect (cons (core-type-string type) info))))
    (report-heap-utilization data :unit unit :sort sort :stream *standard-output* :threshold threshold)))

(defun idom-heap-utilization (&key unit (sort :size) (threshold 0.01) (area :tenured))
  (idom-set-heap-range area)
  (cg-compute t)
  (loop with cg = (current-core)
        with nodes = (cg.nodes cg)
        with type-infos = (make-hash-table :test 'eql)
        with base = (cg.heap-base cg)
        for idx across (cg.idoms cg)
        for logsz across (cg.logsizes cg)
        for physz across (cg.physizes cg)
        as type = (core-object-type-key (tagged-ptr (addr base (aref nodes idx))))
        as info = (or (gethash type type-infos) (setf (gethash type type-infos) (list 0 0 0)))
        do (incf (car info))
        do (incf (cadr info) logsz)
        do (incf (caddr info) physz)
        finally (report-idom-heap-utilization type-infos :unit unit :sort sort :threshold threshold)))

(defun idom-frontier-heap-utilization (&key unit (sort :size) (threshold 0.01) (area :tenured) (test nil))
  ;; Compute the heap utilization WITHIN selected idom trees, aggregated.
  (idom-set-heap-range area)
  (cg-compute :idoms)
  (let* ((cg (current-core))
         (nodes (cg.nodes cg))
         (idom-nodes (cg.idoms cg))
         (idom-revnodes (cg.revidoms cg))
         (seen (make-array (length (cg.head-p cg)) :element-type 'bit :initial-element 0))
         (base (cg.heap-base cg))
         (high (cg.heap-end cg))
	 (nidoms (length idom-nodes))
         (type-infos (make-hash-table :test 'eql)))
    (flet ((record (ptr)
             (multiple-value-bind (logsize physsize) (core-object-sizes ptr)
               (let* ((type (core-object-type-key ptr))
                      (info (or (gethash type type-infos) (setf (gethash type type-infos) (list 0 0 0)))))
                 (incf (car info))
                 (incf (cadr info) logsize)
                 (incf (caddr info) physsize)))))
      (loop for i from 0 below nidoms as idom = (aref idom-nodes i)
            do (let* ((dn (aref nodes idom))
                      (addr (addr base dn))
                      (ptr (tagged-ptr addr)))
                 (when (or (null test) (funcall test ptr))
                   ;; Ok, idom of interest.  Walk its subgraph
                   (record ptr)
                   (do-pointers (next addr)
                     (when (and (<= base next) (< next high))
                       (let ((next-dn (dnode base next)))
                         (unless (or (index-for-dnode idom-revnodes next-dn)
                                     (eql (aref seen next-dn) 1))
                           (setf (aref seen next-dn) 1)
                           (record next)
                           (descend-pointers next)))))))
            finally (report-idom-heap-utilization type-infos :unit unit :sort sort :threshold threshold)))))

)
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3
;;;; END FILE ./reference/ccl/library/dominance.lisp
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4n









;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4n









;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4n









;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4n











\;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1
;;;; BEGIN FILE ./reference/ccl/library/elf.lisp
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2
;;;
;;; Copyright 2009 Clozure Associates
;;;
;;; Licensed under the Apache License, Version 2.0 (the "License");
;;; you may not use this file except in compliance with the License.
;;; You may obtain a copy of the License at
;;;
;;;     http://www.apache.org/licenses/LICENSE-2.0
;;;
;;; Unless required by applicable law or agreed to in writing, software
;;; distributed under the License is distributed on an "AS IS" BASIS,
;;; WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
;;; See the License for the specific language governing permissions and
;;; limitations under the License.

(in-package "CCL")

(eval-when (:compile-toplevel :execute)
  (use-interface-dir :elf))


(defloadvar *readonly-area*
    (do-consing-areas (a)
      (when (eql (%fixnum-ref a target::area.code)
                 ccl::area-readonly)
        (return a))))

;;; String tables: used both for symbol names and for section names.
(defstruct elf-string-table
  (hash (make-hash-table :test #'equal))
  (string (make-array 100 :element-type '(unsigned-byte 8) :fill-pointer 1 :adjustable t)))

;;; Collect info about Elf symbols.
(defstruct elf-symbol-table
  (strings (make-elf-string-table))
  data                                  ; foreign pointer
  nsyms
  )

;;; Wrapper around libelf's "elf" pointer
(defstruct elf-object
  libelf-pointer
  fd
  pathname
  )


;;; Is libelf thread-safe ?  Who knows, there's no
;;; documentation ...
(defun libelf-error-string (&optional (errnum -1))
  (let* ((p (#_elf_errmsg errnum)))
    (if (%null-ptr-p p)
      (format nil "ELF error ~d" errnum)
      (%get-cstring p))))

(defloadvar *checked-libelf-version* nil)

(defun check-libelf-version ()
  (or *checked-libelf-version*
      (progn
        (open-shared-library "libelf.so")
        (let* ((version (#_elf_version #$EV_CURRENT)))
          (if (eql #$EV_NONE version)
            (error "ELF library initialization failed: ~a" (libelf-error-string)))
          (setq *checked-libelf-version* version)))))


;;; Prepate to create an ELF object file at PATHNAME, overwriting
;;; whatever might have been there.
(defun create-elf-object (pathname)
  (let* ((namestring (native-translated-namestring pathname))
         (fd (ccl::fd-open namestring
                           (logior #$O_RDWR #$O_CREAT #$O_TRUNC)
                           #o755)))
    (if (< fd 0)
      (signal-file-error fd pathname)
      (progn
        (check-libelf-version)
        (let* ((ptr (#_elf_begin fd #$ELF_C_WRITE +null-ptr+)))
          (if (%null-ptr-p ptr)
            (error "Can't initialize libelf object for ~s: ~a"
                   pathname (libelf-error-string))
            (make-elf-object :libelf-pointer (assert-pointer-type ptr :<E>lf)
                             :fd fd
                             :pathname pathname)))))))

(defun elf-end (object)
  (#_elf_end (elf-object-libelf-pointer object))
  (setf (elf-object-libelf-pointer object) nil
        (elf-object-fd object) nil))

(defun new-elf-file-header (object format type machine)
  (let* ((ehdr (#+64-bit-target #_elf64_newehdr #+32-bit-target #_elf32_newehdr (elf-object-libelf-pointer object))))
    (if (%null-ptr-p ehdr)
      (error "Can't create ELF file header for ~s: ~a"
             (elf-object-pathname object)
             (libelf-error-string))
      (progn
        (setf (paref (pref ehdr
                           #+64-bit-target :<E>lf64_<E>hdr.e_ident
                           #+32-bit-target :<E>lf32_<E>hdr.e_ident) (:* :unsigned-char) #$EI_DATA) format
              (pref ehdr
                    #+64-bit-target :<E>lf64_<E>hdr.e_machine
                    #+32-bit-target :<E>lf32_<E>hdr.e_machine) machine
              (pref ehdr
                    #+64-bit-target :<E>lf64_<E>hdr.e_type
                    #+32-bit-target :<E>lf32_<E>hdr.e_type) type
              (pref ehdr
                    #+64-bit-target :<E>lf64_<E>hdr.e_version
                    #+32-bit-target :<E>lf32_<E>hdr.e_version) *checked-libelf-version*)
        (assert-pointer-type ehdr
                             #+64-bit-target :<E>lf64_<E>hdr
                             #+32-bit-target :<E>lf32_<E>hdr)))))

(defun new-elf-program-header (object &optional (count 1))
  (let* ((phdr (#+64-bit-target #_elf64_newphdr #+32-bit-target #_elf32_newphdr (elf-object-libelf-pointer object) count)))
    (if (%null-ptr-p phdr)
      (error "Can't create ELF program header for ~s: ~a"
             (elf-object-pathname object)
             (libelf-error-string))
      (assert-pointer-type phdr
                           #+64-bit-target :<E>lf64_<P>hdr
                           #+32-bit-target :<E>lf32_<P>hdr))))

(defun new-elf-section (object)
  (let* ((scn (#_elf_newscn (elf-object-libelf-pointer object))))
    (if (%null-ptr-p scn)
      (error "Can' create ELF section for ~s: ~a"
             (elf-object-pathname object)
             (libelf-error-string))
      (assert-pointer-type scn :<E>lf_<S>cn))))

(defun elf-section-header-for-section (object section)
  (let* ((shdr (#+64-bit-target #_elf64_getshdr #+32-bit-target #_elf32_getshdr  section)))
    (if (%null-ptr-p shdr)
      (error "Can' obtain ELF section header for ~s: ~a"
             (elf-object-pathname object)
             (libelf-error-string))
      (assert-pointer-type shdr
                           #+64-bit-target :<E>lf64_<S>hdr
                           #+32-bit-target :<E>lf32_<S>hdr))))

(defun elf-data-pointer-for-section (object section)
  (let* ((data (#_elf_newdata section)))
    (if (%null-ptr-p data)
      (error "Can' obtain ELF data pointer for ~s: ~a"
             (elf-object-pathname object)
             (libelf-error-string))
      (assert-pointer-type data :<E>lf_<D>ata))))
                   

(defun elf-register-string (string table)
  (let* ((hash (elf-string-table-hash table))
         (s (elf-string-table-string table)))
    (when (gethash string hash)
      (format t "~& duplicate: ~s" string))
    (or (gethash string hash)
        (setf (gethash string hash)
              (let* ((n (length s)))
                (dotimes (i (length string) (progn (vector-push-extend 0 s) n))
                  (let* ((code (char-code (char string i))))
                    (declare (type (mod #x110000) code))
                    (if (> code 255)
                      (vector-push-extend (char-code #\sub) s)
                      (vector-push-extend code s)))))))))


(defun elf-lisp-function-name (f)
  (let* ((name (function-name f)))
    (if (and (symbolp name)
	     (eq f (fboundp name)))
      (with-standard-io-syntax
	(format nil "~s" name))
      (let ((str (format nil "~s" f)))
	(subseq (nsubstitute #\0 #\# (nsubstitute #\. #\Space str)) 1)))))


#+x86-target
(defun collect-elf-static-functions ()
  (collect ((functions))
    (purify)
    (block walk
      (%map-areas (lambda (o)
                    (when (typep o
                                 #+x8664-target 'function-vector
                                 #-x8664-target 'function)
                      (functions (function-vector-to-function o))))
                  :readonly
                  ))
    (functions)))

#+(or arm-target ppc-target)
(defun collect-elf-static-functions ()
  (ccl::purify)
  (multiple-value-bind (pure-low pure-high)
      (ccl::do-gc-areas (a)
        (when (eql(ccl::%fixnum-ref a target::area.code)
                  ccl::area-readonly)
          (return
            (values (ash (ccl::%fixnum-ref a target::area.low) target::fixnumshift)
                    (ash (ccl::%fixnum-ref a target::area.active) target::fixnumshift)))))
    (let* ((hash (make-hash-table :test #'eq))
           (code-vector-index #+ppc-target 0 #+arm-target 1))
      (ccl::%map-lfuns #'(lambda (f)
                           (let* ((code-vector  (ccl:uvref f code-vector-index))
                                  (startaddr (+ (ccl::%address-of code-vector)
                                                target::misc-data-offset)))
                             (when (and (>= startaddr pure-low)
                                        (< startaddr pure-high))
                               (push f (gethash code-vector hash))))))
      (let* ((n 0))
        (declare (fixnum n))
        (maphash #'(lambda (k v)
                     (declare (ignore k))
                     (if (null (cdr v))
                       (incf n)))
                 hash)
        (let* ((functions ()))
          (maphash #'(lambda (k v)
                       (declare (ignore k))
                       (when (null (cdr v))
                         (push (car v) functions)))
                   hash)
          (sort functions
                #'(lambda (x y)
                    (< (ccl::%address-of (uvref x code-vector-index))
                       (ccl::%address-of (uvref y code-vector-index))))))))))

(defun register-elf-functions (section-number)
  (let* ((functions (collect-elf-static-functions))
         (n (length functions))
         (data (#_calloc (1+ n) (record-length #+64-bit-target :<E>lf64_<S>ym
                                               #+32-bit-target :<E>lf32_<S>ym)))
         (string-table (make-elf-string-table)))
    (declare (fixnum n))
    (do* ((i 0 (1+ i))
          (p (%inc-ptr data
                       (record-length #+64-bit-target :<E>lf64_<S>ym
                                      #+32-bit-target :<E>lf32_<S>ym))
             (progn (%incf-ptr p
                               (record-length #+64-bit-target :<E>lf64_<S>ym
                                              #+32-bit-target :<E>lf32_<S>ym))
                    p))
          (f (pop functions) (pop functions)))
         ((= i n)
          (make-elf-symbol-table :strings string-table :data data :nsyms n))
      (declare (fixnum n))
      (setf (pref p
                  #+64-bit-target :<E>lf64_<S>ym.st_name
                  #+32-bit-target :<E>lf32_<S>ym.st_name)
            (elf-register-string (elf-lisp-function-name f) string-table)
            (pref p
                  #+64-bit-target :<E>lf64_<S>ym.st_info
                  #+32-bit-target :<E>lf32_<S>ym.st_info)
            (logior (ash #$STB_GLOBAL 4) #$STT_FUNC)
            (pref p
                  #+64-bit-target :<E>lf64_<S>ym.st_shndx
                  #+32-bit-target :<E>lf32_<S>ym.st_shndx) section-number
            (pref p
                  #+64-bit-target :<E>lf64_<S>ym.st_value
                  #+32-bit-target :<E>lf32_<S>ym.st_value)
            #+x86-target (%address-of f)
            #+ppc-target (- (%address-of (uvref f 0)) (- ppc::fulltag-misc ppc::node-size))
            #+arm-target (- (%address-of (uvref f 1)) (- arm::fulltag-misc arm::node-size))
            (pref p
                  #+64-bit-target :<E>lf64_<S>ym.st_size
                  #+32-bit-target :<E>lf32_<S>ym.st_size)
            #+x86-target (1+ (ash (1- (%function-code-words f)) target::word-shift))
            #+ppc-target (ash (uvsize (uvref f 0)) ppc::word-shift)
            #+arm-target (ash (uvsize (uvref f 1)) arm::word-shift)
            ))))

(defun elf-section-index (section)
  (#_elf_ndxscn section))

(defun elf-set-shstrab-section (object scn)
  #+freebsd-target
  (#_elf_setshstrndx (elf-object-libelf-pointer object) (elf-section-index scn))
  #-freebsd-target
  (declare (ignore object scn)))


(defun elf-init-section-data-from-string-table (object section string-table)
  (let* ((strings-data (elf-data-pointer-for-section object section))
         (s (elf-string-table-string string-table))
         (bytes (array-data-and-offset s))
         (n (length s))
         (buf (#_malloc n)))
    (%copy-ivector-to-ptr bytes 0 buf 0 n)
    (setf (pref strings-data :<E>lf_<D>ata.d_align) 1
          (pref strings-data :<E>lf_<D>ata.d_off) 0
          (pref strings-data :<E>lf_<D>ata.d_type) #$ELF_T_BYTE
          (pref strings-data :<E>lf_<D>ata.d_version) #$EV_CURRENT
          (pref strings-data :<E>lf_<D>ata.d_size) n
          (pref strings-data :<E>lf_<D>ata.d_buf) buf)
    n))

(defun elf-init-symbol-section-from-symbol-table (object section symbols)
  (let* ((symbols-data (elf-data-pointer-for-section object section))
         (buf (elf-symbol-table-data symbols))
         (nsyms (elf-symbol-table-nsyms symbols) )
         (n (* (1+ nsyms) (record-length #+64-bit-target :<E>lf64_<S>ym
                                         #+32-bit-target :<E>lf32_<S>ym))))
    (setf (pref symbols-data :<E>lf_<D>ata.d_align) 8
          (pref symbols-data :<E>lf_<D>ata.d_off) 0
          (pref symbols-data :<E>lf_<D>ata.d_type) #$ELF_T_SYM
          (pref symbols-data :<E>lf_<D>ata.d_version) #$EV_CURRENT
          (pref symbols-data :<E>lf_<D>ata.d_size) n
          (pref symbols-data :<E>lf_<D>ata.d_buf) buf)
    nsyms))

(defun elf-make-empty-data-for-section (object section &optional (size 0))
  (let* ((data (elf-data-pointer-for-section object section))
         (buf +null-ptr+))
    (setf (pref data :<E>lf_<D>ata.d_align) 0
          (pref data :<E>lf_<D>ata.d_off) 0
          (pref data :<E>lf_<D>ata.d_type) #$ELF_T_BYTE
          (pref data :<E>lf_<D>ata.d_version) #$EV_CURRENT
          (pref data :<E>lf_<D>ata.d_size) size
          (pref data :<E>lf_<D>ata.d_buf) buf)
    0))
  

(defun elf-flag-phdr (object cmd flags)
  (#_elf_flagphdr (elf-object-libelf-pointer object) cmd flags))

(defun elf-update (object cmd)
  (let* ((size (#_elf_update (elf-object-libelf-pointer object) cmd)))
    (if (< size 0)
      (error "elf_update failed for for ~s: ~a"
             (elf-object-pathname object)
             (libelf-error-string))
      size)))

(defun fixup-lisp-section-offset (fd eof sectnum)
  (fd-lseek fd 0 #$SEEK_SET)
  (rlet ((fhdr #+64-bit-target :<E>lf64_<E>hdr
               #+32-bit-target :<E>lf32_<E>hdr)
         (shdr #+64-bit-target :<E>lf64_<S>hdr
               #+32-bit-target :<E>lf32_<S>hdr))
    (fd-read fd fhdr (record-length #+64-bit-target :<E>lf64_<E>hdr
                                    #+32-bit-target :<E>lf32_<E>hdr))
    (let* ((pos (+ (pref fhdr #+64-bit-target :<E>lf64_<E>hdr.e_shoff
                         #+32-bit-target :<E>lf32_<E>hdr.e_shoff)
                   (* sectnum (pref fhdr #+64-bit-target :<E>lf64_<E>hdr.e_shentsize
                                    #+32-bit-target :<E>lf32_<E>hdr.e_shentsize)))))
      (fd-lseek fd pos #$SEEK_SET)
      (fd-read fd shdr (record-length #+64-bit-target :<E>lf64_<S>hdr
                                      #+32-bit-target :<E>lf32_<S>hdr))
      ;; On 64-bit platforms, the section data precedes the image
      ;; header; on 32-bit platforms, the image header and image
      ;; section table precede the image data for the first (static)
      ;; section.  With alignment, the header/section headers are
      ;; one 4K page, and the static section size is 8K ...
      (setf (pref shdr #+64-bit-target :<E>lf64_<S>hdr.sh_offset
                  #+32-bit-target :<E>lf32_<S>hdr.sh_offset)
            (+ #+32-bit-target #x1000 #+64-bit-target 0  #x2000 (logandc2 (+ eof 4095) 4095))) 
      (setf (pref shdr #+64-bit-target :<E>lf64_<S>hdr.sh_type
                  #+32-bit-target :<E>lf32_<S>hdr.sh_type)
            #$SHT_PROGBITS)
      (fd-lseek fd pos #$SEEK_SET)
      (fd-write fd shdr (record-length #+64-bit-target :<E>lf64_<S>hdr
                                       #+32-bit-target :<E>lf32_<S>hdr))
      t)))
  
(defun write-elf-symbols-to-file (pathname)
  (let* ((object (create-elf-object pathname))
         (file-header (new-elf-file-header object
                                           #+little-endian-target #$ELFDATA2LSB
                                           #+big-endian-target #$ELFDATA2MSB
                                           #$ET_DYN
                                           #+x8664-target #$EM_X86_64
                                           #+x8632-target #$EM_386
                                           #+ppc32-target #$EM_PPC
                                           #+ppc64-target #$EM_PPC64
                                           #+arm-target #$EM_ARM
                                           ))
         (program-header (new-elf-program-header object))
         (lisp-section (new-elf-section object))
         (symbols-section (new-elf-section object))
         (strings-section (new-elf-section object))
         (shstrtab-section (new-elf-section object))
         (prelink-id-section (new-elf-section object))
         (section-names (make-elf-string-table))
         (lisp-section-index (elf-section-index lisp-section))
         (symbols (register-elf-functions lisp-section-index))
         (lisp-section-header (elf-section-header-for-section object lisp-section))
         (symbols-section-header (elf-section-header-for-section object symbols-section))
         (strings-section-header (elf-section-header-for-section object strings-section))
         (shstrtab-section-header (elf-section-header-for-section object shstrtab-section))
         (prelink-id-section-header (elf-section-header-for-section object prelink-id-section)))
    
    (setf (pref file-header #+64-bit-target :<E>lf64_<E>hdr.e_shstrndx
                #+32-bit-target :<E>lf32_<E>hdr.e_shstrndx) (elf-section-index shstrtab-section))
    (setf (pref lisp-section-header #+64-bit-target :<E>lf64_<S>hdr.sh_name
                #+32-bit-target :<E>lf32_<S>hdr.sh_name) (elf-register-string ".lisp" section-names)
          (pref lisp-section-header #+64-bit-target :<E>lf64_<S>hdr.sh_type
                #+32-bit-target :<E>lf32_<S>hdr.sh_type) #$SHT_NOBITS
          (pref lisp-section-header #+64-bit-target :<E>lf64_<S>hdr.sh_flags
                #+32-bit-target :<E>lf32_<S>hdr.sh_flags) (logior #$SHF_WRITE #$SHF_ALLOC #$SHF_EXECINSTR)
          (pref lisp-section-header #+64-bit-target :<E>lf64_<S>hdr.sh_addr
                #+32-bit-target :<E>lf32_<S>hdr.sh_addr) (ash (%fixnum-ref *readonly-area* target::area.low) target::fixnumshift)
          (pref lisp-section-header #+64-bit-target :<E>lf64_<S>hdr.sh_size
                #+32-bit-target :<E>lf32_<S>hdr.sh_size) (ash (- (%fixnum-ref *readonly-area* target::area.active) (%fixnum-ref *readonly-area* target::area.low) )target::fixnumshift)
          (pref lisp-section-header #+64-bit-target :<E>lf64_<S>hdr.sh_offset
                #+32-bit-target :<E>lf32_<S>hdr.sh_offset) 0
          (pref lisp-section-header #+64-bit-target :<E>lf64_<S>hdr.sh_addralign
                #+32-bit-target :<E>lf32_<S>hdr.sh_addralign) 1)
    (setf (pref symbols-section-header #+64-bit-target :<E>lf64_<S>hdr.sh_name
                #+32-bit-target :<E>lf32_<S>hdr.sh_name) (elf-register-string ".symtab" section-names)
          (pref symbols-section-header #+64-bit-target :<E>lf64_<S>hdr.sh_type
                #+32-bit-target :<E>lf32_<S>hdr.sh_type) #$SHT_SYMTAB
          (pref symbols-section-header #+64-bit-target :<E>lf64_<S>hdr.sh_entsize
                #+32-bit-target :<E>lf32_<S>hdr.sh_entsize) (record-length #+64-bit-target :<E>lf64_<S>ym
                                                                           #+32-bit-target :<E>lf32_<S>ym)
          (pref symbols-section-header #+64-bit-target :<E>lf64_<S>hdr.sh_link
                #+32-bit-target :<E>lf32_<S>hdr.sh_link) (elf-section-index strings-section))
    (setf (pref strings-section-header #+64-bit-target :<E>lf64_<S>hdr.sh_name
                #+32-bit-target :<E>lf32_<S>hdr.sh_name) (elf-register-string ".strtab" section-names)
          (pref strings-section-header #+64-bit-target :<E>lf64_<S>hdr.sh_type
                #+32-bit-target :<E>lf32_<S>hdr.sh_type) #$SHT_STRTAB
          (pref strings-section-header #+64-bit-target :<E>lf64_<S>hdr.sh_flags
                #+32-bit-target :<E>lf32_<S>hdr.sh_flags) (logior #$SHF_STRINGS #$SHF_ALLOC))
    (setf (pref shstrtab-section-header #+64-bit-target :<E>lf64_<S>hdr.sh_name
                #+32-bit-target :<E>lf32_<S>hdr.sh_name) (elf-register-string ".shstrtab" section-names)
          (pref shstrtab-section-header #+64-bit-target :<E>lf64_<S>hdr.sh_type
                #+32-bit-target :<E>lf32_<S>hdr.sh_type) #$SHT_STRTAB
          (pref shstrtab-section-header #+64-bit-target :<E>lf64_<S>hdr.sh_flags
                #+32-bit-target :<E>lf32_<S>hdr.sh_flags) (logior #$SHF_STRINGS #$SHF_ALLOC))
    ;; The perf profiler recognizes prelinked libraries by the presence of
    ;; some section with this exact name; it doesn't care about the section's
    ;; contents or other attributes, currently.
    ;; We want that profiler to treat the lisp section as if it was prelinked.
    (setf (pref prelink-id-section-header #+64-bit-target :<E>lf64_<S>hdr.sh_name
                #+32-bit-target :<E>lf32_<S>hdr.sh_name) (elf-register-string ".gnu.prelink_undo" section-names))
    
    (elf-make-empty-data-for-section object lisp-section (ash (- (%fixnum-ref *readonly-area* target::area.active) (%fixnum-ref *readonly-area* target::area.low) )target::fixnumshift))
    (elf-init-section-data-from-string-table object strings-section (elf-symbol-table-strings symbols))
    (elf-init-section-data-from-string-table object shstrtab-section section-names)
    (elf-init-symbol-section-from-symbol-table object symbols-section symbols)
    (elf-make-empty-data-for-section object prelink-id-section 0)
    ;; Prepare in-memory data structures.
    (elf-update object #$ELF_C_NULL)
    ;; Fix up the program header.
    (setf (pref program-header
                #+64-bit-target :<E>lf64_<P>hdr.p_type
                #+32-bit-target :<E>lf32_<P>hdr.p_type) #$PT_PHDR
          (pref program-header #+64-bit-target :<E>lf64_<P>hdr.p_offset
                #+32-bit-target :<E>lf32_<P>hdr.p_offset)
          (pref file-header
                #+64-bit-target :<E>lf64_<E>hdr.e_phoff
                #+32-bit-target :<E>lf32_<E>hdr.e_phoff)
          (pref program-header
                #+64-bit-target :<E>lf64_<P>hdr.p_filesz
                #+32-bit-target :<E>lf32_<P>hdr.p_filesz)
          (#+64-bit-target #_elf64_fsize #+32-bit-target #_elf32_fsize #$ELF_T_PHDR 1 #$EV_CURRENT))
    ;; Mark the program header as being dirty.
    (elf-flag-phdr object #$ELF_C_SET #$ELF_F_DIRTY)
    (let* ((eof (elf-update object #$ELF_C_WRITE))
           (fd (elf-object-fd object)))
      (elf-end object)
      (fixup-lisp-section-offset fd eof lisp-section-index)
      (fd-close fd))
    pathname))

      
    
    
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3
;;;; END FILE ./reference/ccl/library/elf.lisp
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4n









;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4n









;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4n









;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4n











\;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1
;;;; BEGIN FILE ./reference/ccl/library/sockets.lisp
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2
;;;-*- Mode: Lisp; Package: CCL -*-
;;;
;;; Copyright 2001-2014 Clozure Associates
;;;
;;; Licensed under the Apache License, Version 2.0 (the "License");
;;; you may not use this file except in compliance with the License.
;;; You may obtain a copy of the License at
;;;
;;;     http://www.apache.org/licenses/LICENSE-2.0
;;;
;;; Unless required by applicable law or agreed to in writing, software
;;; distributed under the License is distributed on an "AS IS" BASIS,
;;; WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
;;; See the License for the specific language governing permissions and
;;; limitations under the License.

(in-package "CCL")



;;; basic socket API
(eval-when (:compile-toplevel :load-toplevel :execute)
  (export '(MAKE-SOCKET
	    ACCEPT-CONNECTION
	    DOTTED-TO-IPADDR
	    IPADDR-TO-DOTTED
	    IPADDR-TO-HOSTNAME
	    LOOKUP-HOSTNAME
	    LOOKUP-PORT
	    ;;with-pending-connect
	    RECEIVE-FROM
	    SEND-TO
	    SHUTDOWN
	    ;;socket-control
	    SOCKET-OS-FD
	    REMOTE-HOST
	    REMOTE-PORT
	    REMOTE-FILENAME
            REMOTE-SOCKET-ADDRESS
	    LOCAL-HOST
	    LOCAL-PORT
	    LOCAL-FILENAME
            LOCAL-SOCKET-ADDRESS
	    SOCKET-ADDRESS-FAMILY
	    SOCKET-CONNECT
            SOCKET-CONNECTED
	    SOCKET-FORMAT
	    SOCKET-TYPE
	    SOCKET-ERROR
	    SOCKET-ERROR-CODE
	    SOCKET-ERROR-IDENTIFIER
	    SOCKET-ERROR-SITUATION
	    SOCKET-CREATION-ERROR
	    SOCKET-CREATION-ERROR-CODE
	    SOCKET-CREATION-ERROR-IDENTIFIER
	    SOCKET-CREATION-ERROR-SITUATION
	    WITH-OPEN-SOCKET
            RESOLVE-ADDRESS
            SOCKET-ADDRESS-HOST
            SOCKET-ADDRESS-PORT
            SOCKET-ADDRESS-PATH))
  #+windows-target
  (defmacro check-winsock-error (form)
    (let* ((val (gensym)))
      `(let* ((,val ,form))
        (if (or (< ,val 0) (eql ,val #xffffffff))
          (%get-winsock-error)
          ,val))))
  (defmacro check-socket-error (form)
    #+windows-target `(check-winsock-error ,form)
    #-windows-target `(int-errno-call ,form))
  )

#+android-target
(eval-when (:compile-toplevel :execute)
  (def-foreign-type :sockaddr_storage (:struct :__kernel_sockaddr_storage)))


#+windows-target
(defun %get-winsock-error ()
  (- (#_WSAGetLastError)))

;;; The PPC is big-endian (uses network byte order), which makes
;;; things like #_htonl and #_htonl no-ops.  These functions aren't
;;; necessarily defined as functions in some header files (I'm sure
;;; that that either complies with or violates some C standard), and
;;; it doesn't seem to make much sense to fight that to do ff-calls
;;; to a couple of identity functions.

#+big-endian-target
(progn
  (defmacro HTONL (x) x)
  (defmacro HTONS (x) x)
  (defmacro NTOHL (x) x)
  (defmacro NTOHS (x) x))

#+little-endian-target
(progn
  (declaim (inline %bswap32 %bswap16))
  (defun %bswap32 (x)
    (declare (type (unsigned-byte 32) x))
    (%swap-u32 x))
  (defun %bswap16 (x)
    (declare (type (unsigned-byte 16) x))
    (%swap-u16 x))
  (defmacro HTONL (x) `(%bswap32 ,x))
  (defmacro HTONS (x) `(%bswap16 ,x))
  (defmacro NTOHL (x) `(%bswap32 ,x))
  (defmacro NTOHS (x) `(%bswap16 ,x)))

(defparameter *default-socket-character-encoding*
  nil)

(defmethod default-character-encoding ((domain (eql :socket)))
  *default-socket-character-encoding*)
  

;;; On some (hypothetical) little-endian platform, we might want to
;;; define HTONL and HTONS to actually swap bytes around.

(defpackage "OPENMCL-SOCKET"
  (:use "CL")
  (:import-from "CCL"
		"MAKE-SOCKET"
		"ACCEPT-CONNECTION"
		"DOTTED-TO-IPADDR"
		"IPADDR-TO-DOTTED"
		"IPADDR-TO-HOSTNAME"
		"LOOKUP-HOSTNAME"
		"LOOKUP-PORT"
		;;with-pending-connect
		"RECEIVE-FROM"
		"SEND-TO"
		"SHUTDOWN"
		;;socket-control
		"SOCKET-OS-FD"
		"REMOTE-HOST"
		"REMOTE-PORT"
		"REMOTE-FILENAME"
                "REMOTE-SOCKET-ADDRESS"
		"LOCAL-HOST"
		"LOCAL-PORT"
		"LOCAL-FILENAME"
                "LOCAL-SOCKET-ADDRESS"
		"SOCKET-ADDRESS-FAMILY"
		"SOCKET-CONNECT"
		"SOCKET-FORMAT"
		"SOCKET-TYPE"
		"SOCKET-ERROR"
		"SOCKET-ERROR-CODE"
		"SOCKET-ERROR-IDENTIFIER"
		"SOCKET-ERROR-SITUATION"
		"SOCKET-CREATION-ERROR"
		"SOCKET-CREATION-ERROR-CODE"
		"SOCKET-CREATION-ERROR-IDENTIFIER"
		"SOCKET-CREATION-ERROR-SITUATION"
		"WITH-OPEN-SOCKET"
                "RESOLVE-ADDRESS"
                "SOCKET-ADDRESS-HOST"
                "SOCKET-ADDRESS-PORT"
                "SOCKET-ADDRESS-PATH")
  (:export  "MAKE-SOCKET"
	    "ACCEPT-CONNECTION"
	    "DOTTED-TO-IPADDR"
	    "IPADDR-TO-DOTTED"
	    "IPADDR-TO-HOSTNAME"
	    "LOOKUP-HOSTNAME"
	    "LOOKUP-PORT"
	    ;;with-pending-connect
	    "RECEIVE-FROM"
	    "SEND-TO"
	    "SHUTDOWN"
	    ;;socket-control
	    "SOCKET-OS-FD"
	    "REMOTE-HOST"
	    "REMOTE-PORT"
	    "REMOTE-FILENAME"
            "REMOTE-SOCKET-ADDRESS"
	    "LOCAL-HOST"
	    "LOCAL-PORT"
	    "LOCAL-FILENAME"
            "LOCAL-SOCKET-ADDRESS"
	    "SOCKET-ADDRESS-FAMILY"
	    "SOCKET-CONNECT"
	    "SOCKET-FORMAT"
	    "SOCKET-TYPE"
	    "SOCKET-ERROR"
	    "SOCKET-ERROR-CODE"
	    "SOCKET-ERROR-IDENTIFIER"
	    "SOCKET-ERROR-SITUATION"
	    "SOCKET-CREATION-ERROR"
	    "SOCKET-CREATION-ERROR-CODE"
	    "SOCKET-CREATION-ERROR-IDENTIFIER"
	    "SOCKET-CREATION-ERROR-SITUATION"
	    "WITH-OPEN-SOCKET"
            "RESOLVE-ADDRESS"
            "SOCKET-ADDRESS-HOST"
            "SOCKET-ADDRESS-PORT"
            "SOCKET-ADDRESS-PATH"))

(define-condition socket-error (simple-stream-error)
  ((code :initarg :code :reader socket-error-code)
   (identifier :initform :unknown :initarg :identifier :reader socket-error-identifier)
   (situation :initarg :situation :reader socket-error-situation)))

(define-condition socket-creation-error (simple-error)
  ((code :initarg :code :reader socket-creation-error-code)
   (identifier :initform :unknown :initarg :identifier :reader socket-creation-error-identifier)
   (situation :initarg :situation :reader socket-creation-error-situation)
   (remote-address :initform nil :initarg :remote-address :accessor socket-creation-error-remote-address)))

(defparameter *gai-error-identifiers*
  (list #$EAI_AGAIN :try-again
	#$EAI_FAIL :no-recovery
	#$EAI_NONAME :host-not-found))

(defvar *socket-error-identifiers*
  #-windows-target
  (list #$EADDRINUSE :address-in-use
	#$ECONNABORTED :connection-aborted
	#$ENOBUFS :no-buffer-space
	#$ENOMEM :no-buffer-space
	#$ENFILE :no-buffer-space
	#$ETIMEDOUT :connection-timed-out
	#$ECONNREFUSED :connection-refused
	#$ENETUNREACH :host-unreachable
	#$EHOSTUNREACH :host-unreachable
	#$EHOSTDOWN :host-down
	#$ENETDOWN :network-down
	#$EADDRNOTAVAIL :address-not-available
	#$ENETRESET :network-reset
	#$ECONNRESET :connection-reset
	#$ESHUTDOWN :shutdown
	#$EACCES :access-denied
	#$EPERM :access-denied)
  #+windows-target
  (list #$WSAEADDRINUSE :address-in-use
	#$WSAECONNABORTED :connection-aborted
	#$WSAENOBUFS :no-buffer-space
	#$ENOMEM :no-buffer-space
	#$ENFILE :no-buffer-space
	#$WSAETIMEDOUT :connection-timed-out
	#$WSAECONNREFUSED :connection-refused
	#$WSAENETUNREACH :host-unreachable
	#$WSAEHOSTUNREACH :host-unreachable
	#$WSAEHOSTDOWN :host-down
	#$WSAENETDOWN :network-down
	#$WSAEADDRNOTAVAIL :address-not-available
	#$WSAENETRESET :network-reset
	#$WSAECONNRESET :connection-reset
	#$WSAESHUTDOWN :shutdown
	#$EACCES :access-denied
	#$EPERM :access-denied)
  )


(declaim (inline socket-call))
(defun socket-call (stream where res)
  (if (< res 0)
    (socket-error stream where res nil)
    res))

#-windows-target
(defun %gai-strerror (err)
  (let ((p (#_gai_strerror err)))
    (if (%null-ptr-p p)
      (format nil "Unknown nameserver error ~d" err)
      (%get-cstring p))))

(defun socket-error (stream where errno nameserver-p &key connect-address)
  "Creates and signals (via error) one of two socket error 
conditions, based on the state of the arguments."
  (unless nameserver-p
    (setq errno (abs errno)))
  (if stream
    (error (make-condition 'socket-error
			   :stream stream
			   :code errno
			   :identifier (getf *socket-error-identifiers* errno :unknown)
			   :situation where
			   :format-control "~a (error #~d) during ~a"
			   :format-arguments (list
					      #+windows-target
					      (%windows-error-string errno)
					      #-windows-target
					      (%strerror errno)
					      errno where)))
    (let* ((identifiers (if nameserver-p
                          *gai-error-identifiers*
                          *socket-error-identifiers*))
           (format-control (if nameserver-p
                             "~A (error #~D) during nameserver operation in ~A"
                             (if connect-address
                               "~A (error #~D) during attempt to connect to ~A"
                               "~A (error #~D) during socket creation operation in ~A")))
           (format-arguments (if connect-address
                               (list
                                #+windows-target
                                (%windows-error-string errno)
                                #-windows-target
                                (if nameserver-p
                                  (%gai-strerror errno)
                                  (%strerror errno))
                                errno
                                (socket-address-as-string connect-address))
                               (list
                                #+windows-target
                                (%windows-error-string errno)
                                #-windows-target
                                (if nameserver-p
                                  (%gai-strerror errno)
                                  (%strerror errno))
                                errno where))))
                              
      (error (make-condition 'socket-creation-error
			     :code errno
			     :identifier (getf identifiers errno :unknown)
			     :situation where
			     :format-control format-control
			     :format-arguments format-arguments
                             :remote-address connect-address)))))

;; If true, this will try to allow other cooperative processes to run
;; while socket io is happening.  Since CCL threads are preemptively
;; scheduled, this isn't particularly meaningful.
(defvar *multiprocessing-socket-io* nil)

(defmacro with-open-socket ((var . args) &body body
			    &aux (socket (make-symbol "socket"))
			         (done (make-symbol "done")))
  "Execute body with var bound to the result of applying make-socket to
make-socket-args. The socket gets closed on exit."
  `(let (,socket ,done)
     (unwind-protect
	 (multiple-value-prog1
	   (let ((,var (setq ,socket (make-socket ,@args))))
	     ,@body)
	   (setq ,done t))
       (when ,socket (close ,socket :abort (not ,done))))))

(defgeneric socket-address-family (socket)
  (:documentation "Return :internet, :internet6 or :file, as appropriate."))

(defmethod socket-address-family ((socket ip-socket))
  :internet)

(defmethod socket-address-family ((socket file-socket))
  :file)

(defgeneric socket-type (socket)
  (:documentation
   "Return :stream for tcp-stream and listener-socket, and :datagram
for udp-socket."))

(defmethod socket-type ((socket tcp-socket)) :stream)

(defmethod socket-type ((socket stream-file-socket)) :stream)

;;; Is this used by anybody?
(defgeneric socket-connect (stream)
 (:documentation
   "Return :active for tcp-stream, :passive for listener-socket, and socket-connected
for udp-socket"))

(defmethod socket-connect ((stream tcp-stream)) :active)

(defgeneric socket-format (stream)
  (:documentation
   "Return the socket format as specified by the :format argument to
make-socket."))

(defmethod socket-format ((stream tcp-stream))
  (if (eq (stream-element-type stream) 'character)
    :text
    ;; Should distinguish between :binary and :bivalent, but hardly
    ;; seems worth carrying around an extra slot just for that.
    :bivalent))

(defmethod socket-device ((stream tcp-stream))
  (let ((ioblock (stream-ioblock stream nil)))
    (and ioblock (ioblock-device ioblock))))

(defmethod socket-device ((stream file-socket-stream))
  (let ((ioblock (stream-ioblock stream nil)))
    (and ioblock (ioblock-device ioblock))))

(defmethod select-stream-class ((class tcp-stream) in-p out-p char-p)
  (declare (ignore char-p)) ; TODO: is there any real reason to care about this?
  ;; Yes, in general.  There is.
  (assert (and in-p out-p) () "Non-bidirectional tcp stream?")
  'fundamental-tcp-stream)

(defmethod map-to-basic-stream-class-name ((name (eql 'tcp-stream)))
  'basic-tcp-stream)

(defmethod select-stream-class ((s (eql 'basic-tcp-stream)) in-p out-p char-p)
  (declare (ignore char-p))
  (assert (and in-p out-p) () "Non-bidirectional tcp stream?")
  'basic-tcp-stream)

(defmethod map-to-basic-stream-class-name ((name (eql 'file-socket-stream)))
  'basic-file-socket-stream)

(defmethod select-stream-class ((class file-socket-stream) in-p out-p char-p)
  (declare (ignore char-p)) ; TODO: is there any real reason to care about this?
  (assert (and in-p out-p) () "Non-bidirectional file-socket stream?")
  'fundamental-file-socket-stream)

(defmethod select-stream-class ((s (eql 'basic-file-socket-stream)) in-p out-p char-p)
  (declare (ignore char-p))
  (assert (and in-p out-p) () "Non-bidirectional file-socket stream?")
  'basic-file-socket-stream)

(defmethod socket-format ((socket device-mixin))
  (or (getf (socket-keys socket) :format) :text))

(defgeneric close (socket &key abort)
  (:documentation
   "The close generic function can be applied to sockets. It releases the
operating system resources associated with the socket."))

(defmethod close ((socket device-mixin) &key abort)
  (declare (ignore abort))
  (when (socket-device socket)
    (fd-close (socket-device socket))
    (setf (socket-device socket) nil)
    t))

(defmethod close :after ((socket udp-socket) &key abort)
  (declare (ignore abort))
  (setf (socket-connected socket) nil))

(defmethod socket-connect ((stream listener-socket)) :passive)

(defmethod socket-connect ((stream file-listener-socket)) :passive)

(defun %socket-connect (fd socket-address &optional timeout-in-milliseconds)
  (let ((err (c_connect fd (sockaddr socket-address) (sockaddr-length socket-address) timeout-in-milliseconds)))
    (declare (fixnum err))
    (unless (eql err 0)
      #||(fd-close fd)||#
      (socket-error nil "connect" err nil :connect-address socket-address))))

(defmethod socket-type ((stream udp-socket)) :datagram)
(defmethod socket-connect ((stream udp-socket)) (socket-connected stream))
(defmethod socket-format ((stream udp-socket)) :binary)

(defgeneric socket-os-fd (socket)
  (:documentation
   "Return the native OS's representation of the socket, or NIL if the
socket is closed. On Unix, this is the Unix 'file descriptor', a small
non-negative integer. Note that it is rather dangerous to mess around
with tcp-stream fd's, as there is all sorts of buffering and asynchronous
I/O going on above the OS level. listener-socket and udp-socket fd's are
safer to mess with directly as there is less magic going on."))

;; Returns nil for closed stream...
(defmethod socket-os-fd ((socket socket))
  (socket-device socket))

#-windows-target
(defmethod local-socket-filename ((socket file-socket))
  (let ((address (local-socket-address socket)))
    (when address
      (socket-address-path address))))

#-windows-target
(defmethod remote-socket-filename ((socket file-socket))
  (let ((address (remote-socket-address socket)))
    (when address
      (socket-address-path address))))

#-windows-target
(defmethod local-filename ((socket file-socket))
  (local-socket-filename socket))

#-windows-target
(defmethod remote-filename ((socket file-socket))
  (remote-socket-filename socket))
  
(defgeneric remote-host (socket)
  (:documentation
   "Return the 32-bit unsigned IP address of the remote host, or NIL if
the socket is not connected."))

;; Returns NIL if socket is not connected
(defmethod remote-host ((socket socket))
  (host (remote-socket-address socket)))

(defgeneric remote-port (socket)
  (:documentation
   "Return the remote port number, or NIL if the socket is not connected."))

(defmethod remote-port ((socket socket))
  (port (remote-socket-address socket)))

(defun set-socket-fd-blocking (fd block-flag)
  #+windows-target
  (rlet ((argp :u_long (if block-flag 0 1)))
    (#_ioctlsocket fd #$FIONBIO argp))
  #-windows-target
  (if block-flag
    (fd-clear-flag fd #$O_NONBLOCK)
    (fd-set-flag fd #$O_NONBLOCK)))

(defun get-socket-fd-blocking (fd)
  "returns T iff socket is in blocking mode"
  #+windows-target (declare (ignore fd))
  #+windows-target t
  #-windows-target
  (not (logtest #$O_NONBLOCK (fd-get-flags fd))))

(defun set-socket-options (socket
                           &key 
                             keepalive
                             reuse-address
                             nodelay
                             broadcast
                             linger
                             (address-family :internet)
                             local-port
                             local-host
                             local-address
                             local-filename
                             type
                             connect
                             out-of-band-inline
			   &allow-other-keys)
  ;; see man socket(7) tcp(7) ip(7)
  (let ((fd (socket-device socket)))
    (when keepalive
      (int-setsockopt fd #$SOL_SOCKET #$SO_KEEPALIVE 1))
    (when reuse-address
      (int-setsockopt fd #$SOL_SOCKET #$SO_REUSEADDR 1))
    (when broadcast
      (int-setsockopt fd #$SOL_SOCKET #$SO_BROADCAST 1))
    (when out-of-band-inline
      (int-setsockopt fd #$SOL_SOCKET #$SO_OOBINLINE 1))
    (when (member address-family '(:internet :internet6))
      (when (eq type :stream)
	(rlet ((plinger :linger))
	  (setf (pref plinger :linger.l_onoff) (if linger 1 0)
		(pref plinger :linger.l_linger) (or linger 0))
	  (socket-call socket "setsockopt"
		       (c_setsockopt fd #$SOL_SOCKET #$SO_LINGER
				     plinger (record-length :linger)))))
      (when nodelay
	(int-setsockopt fd
			#+linux-target #$SOL_TCP
			#-linux-target #$IPPROTO_TCP
			#$TCP_NODELAY 1))
      (when (or local-port local-host local-address)
        (socket-bind-local socket (or local-address
                                      (resolve-address :host local-host
                                                       :port local-port
                                                       :connect connect
                                                       :address-family address-family
                                                       :socket-type type)))))
    (when (and (eq address-family :file)
	       (eq connect :passive))
      (unless local-filename
        (error "need :local-filename argument to create passive file socket"))
      #+windows-target (error "can't create file socket on Windows")
      #-windows-target (socket-bind-local socket (make-instance 'unix-socket-address :path local-filename)))))

;; I hope the inline declaration makes the &rest/apply's go away...
(declaim (inline make-ip-socket))
(defun make-ip-socket (&rest keys &key (type :stream) &allow-other-keys)
  (declare (dynamic-extent keys))
  (ecase type
    (:stream (apply #'make-tcp-socket keys))
    (:datagram (apply #'make-udp-socket keys))))

#-windows-target
(declaim (inline make-file-socket))
#-windows-target
(defun make-file-socket (&rest keys &key type &allow-other-keys)
  (declare (dynamic-extent keys))
  (ecase type
    ((nil :stream) (apply #'make-stream-file-socket keys))
    (:datagram (apply #'make-datagram-file-socket keys))))

(defun make-socket (&rest keys
		    &key
                      (address-family :internet)
                      (type :stream)
                      (connect :active)
                      remote-host remote-port remote-address
                      eol format
                      keepalive reuse-address nodelay broadcast linger
                      local-port local-host local-address
                      backlog class out-of-band-inline
                      local-filename remote-filename sharing basic
                      external-format (auto-close t)
                      connect-timeout input-timeout output-timeout deadline
                      fd)
  "Create and return a new socket."
  (declare (dynamic-extent keys))
  (declare (ignore type connect remote-host remote-port remote-address
		   eol format keepalive reuse-address nodelay
		   broadcast linger local-port local-host
		   local-address backlog class out-of-band-inline
		   local-filename remote-filename sharing basic
		   external-format auto-close connect-timeout
		   input-timeout output-timeout deadline fd))
  (ecase address-family
    #-windows-target
    ((:file) (apply #'make-file-socket keys))
    ((:internet :internet6) (apply #'make-ip-socket keys))))

(defun make-udp-socket (&rest keys
                        &key
                          (fd -1)
                          (connect :active)
                          (address-family :internet)
                          remote-host remote-port
                        &allow-other-keys)
  (unwind-protect
    (let (socket)
      (when (< fd 0)
        (setq fd (socket-call nil "socket"
                              (c_socket (ecase address-family
                                          (:internet #$PF_INET)
                                          (:internet6 #$PF_INET6))
                                        #$SOCK_DGRAM #$IPPROTO_UDP))))
      (setq socket (make-instance 'udp-socket
				  :device fd
				  :keys keys))
      (apply #'set-socket-options socket keys)
      (when (and (eql connect :active)
                 remote-host remote-port)
        (%socket-connect fd
                         (apply #'resolve-address
				:connect connect
				:address-family address-family
                                :host remote-host
                                :port remote-port
                                :allow-other-keys t
                                keys)
                         nil)
        (setf (socket-connected socket) t))
      (setq fd -1)
      socket)
    (unless (< fd 0)
      (fd-close fd))))

(defun make-tcp-socket (&rest keys
                        &key
                          (connect :active)
                          (fd -1)
                          (address-family :internet)
                          remote-host remote-port remote-address
                          backlog connect-timeout deadline
                        &allow-other-keys)
  (unwind-protect
       (progn
	 (when (< fd 0)
           (setq fd (socket-call nil "socket"
                                 (c_socket (ecase address-family
                                             (:internet #$PF_INET)
                                             (:internet6 #$PF_INET6))
                                           #$SOCK_STREAM #$IPPROTO_TCP))))
         (let ((socket (apply (ecase connect
                                (:active #'make-tcp-stream-socket)
                                (:passive #'make-tcp-listener-socket))
                              fd
                              keys)))
           (apply #'set-socket-options socket keys)
           (if (eql connect :passive)
	     (socket-call nil "listen" (c_listen fd (or backlog 5)))
	     (let ((timeout-in-milliseconds
		    (cond
		      (deadline
		       (max (round (- deadline (get-internal-real-time))
				   (/ internal-time-units-per-second 1000))
			    0))
		      (connect-timeout
		       (check-io-timeout connect-timeout)
		       (round (* connect-timeout 1000)))))
		   (socket-address (or remote-address
				       (apply #'resolve-address
					      :connect connect
					      :address-family address-family
					      :host remote-host
					      :port remote-port
					      :allow-other-keys t
					      keys))))
               (%socket-connect fd socket-address timeout-in-milliseconds)))
           (setq fd -1)
           socket))
    (unless (< fd 0)
      (fd-close fd))))

;;; A FILE-LISTENER-SOCKET should try to delete the filesystem
;;; entity when closing.

#-windows-target
(defmethod close :before ((s file-listener-socket) &key abort)
  (declare (ignore abort))
  (let* ((path (local-socket-filename s)))
    (when path (%delete-file path))))

#-windows-target
(defun make-stream-file-socket (&rest keys
                                &key
                                  (connect :active)
                                  backlog
                                  (fd -1)
                                &allow-other-keys)
  (unwind-protect
       (let (socket)
         (when (< fd 0)
           (setq fd (socket-call nil "socket" (c_socket #$PF_LOCAL #$SOCK_STREAM 0))))
         (setq socket
                (apply (ecase connect
                         (:active #'make-file-stream-socket)
                         (:passive #'make-file-listener-socket))
                       fd keys))
         (apply #'set-socket-options socket keys)
         (when (eql connect :passive)
           (socket-call nil "listen" (c_listen fd (or backlog 5))))
         (setq fd -1)
         socket)
    (unless (< fd 0)
      (fd-close fd))))

(defun make-datagram-file-socket (&rest keys)
  (declare (ignore keys))
  (error "Datagram file sockets aren't implemented."))

#-windows-target
(defun file-socket-connect (fd remote-filename)
  (%socket-connect fd (make-instance 'unix-socket-address :path remote-filename)))

#+windows-target
(defun file-socket-connect (fd remote-filename)
  (declare (ignore fd))
  (error "Can't create file socket to ~s on Windows" remote-filename))
  
(defun make-tcp-stream-socket (fd &rest keys &key &allow-other-keys)
  (apply #'make-tcp-stream fd keys))

#-windows-target
(defun make-file-stream-socket (fd &rest keys
                                   &key remote-filename
                                   &allow-other-keys)
  (unless remote-filename
    (error "need :remote-filename argument when creating file stream socket"))
  (file-socket-connect fd remote-filename)
  (apply #'make-file-socket-stream fd keys))


(defun make-tcp-stream (fd
                        &key (format :bivalent)
                             external-format
                             (class 'tcp-stream)
                             sharing
                             (basic t)
                             (auto-close t)
                             input-timeout
                             output-timeout
                             deadline
                        &allow-other-keys)
  (let* ((external-format (normalize-external-format :socket external-format)))
    (let ((element-type (ecase format
                          ((nil :text) 'character)
                          ((:binary :bivalent) '(unsigned-byte 8)))))
      ;; TODO: check out fd-stream-advance, -listen, -eofp, -force-output, -close
      ;; See if should specialize any of 'em.
      (make-fd-stream fd
                      :class class
                      :direction :io
                      :element-type element-type
                      :sharing sharing
                      :character-p (not (eq format :binary))
                      :encoding (external-format-character-encoding external-format)
                      :line-termination (external-format-line-termination external-format)
                      :basic basic
                      :auto-close auto-close
                      :input-timeout input-timeout
                      :output-timeout output-timeout
                      :deadline deadline))))

#-windows-target
(defun make-file-socket-stream (fd
                                &key (format :bivalent)
                                external-format
                                (class 'file-socket-stream)
                                sharing
                                basic
                                (auto-close t)
                                input-timeout
                                output-timeout
                                deadline
                                &allow-other-keys)
  (let* ((external-format (normalize-external-format :socket external-format)))
  
    (let ((element-type (ecase format
                          ((nil :text) 'character)
                          ((:binary :bivalent) '(unsigned-byte 8)))))
      ;; TODO: check out fd-stream-advance, -listen, -eofp, -force-output, -close
      ;; See if should specialize any of 'em.
      (make-fd-stream fd
                      :class class
                      :direction :io
                      :element-type element-type
                      :encoding (external-format-character-encoding external-format)
                      :line-termination (external-format-line-termination external-format)
                      :sharing sharing
                      :character-p (not (eq format :binary))
                      :basic basic
                      :auto-close auto-close
                      :input-timeout input-timeout
                      :output-timeout output-timeout
                      :deadline deadline))))

(defun make-tcp-listener-socket (fd &rest keys &key &allow-other-keys)
  (make-instance 'listener-socket
                 :device fd
                 :keys keys))

(defun make-file-listener-socket (fd &rest keys &key &allow-other-keys)
  (make-instance 'file-listener-socket
		 :device fd
		 :keys keys))

(defun socket-accept (fd wait)
  (flet ((_accept (fd async)
	   (let ((res (c_accept fd (%null-ptr) (%null-ptr))))
	     (declare (fixnum res))
	     ;; See the inscrutable note under ERROR HANDLING in
	     ;; man accept(2). This is my best guess at what they mean...
	     (if (and async (< res 0)
                      #+windows-target
                      (= res (- #$WSAEWOULDBLOCK))
                      #-windows-target
		      (or (eql res (- #$ENETDOWN))
			  (eql res (- #+linux-target #$EPROTO
				      #-linux-target  #$EPROTOTYPE))
			  (eql res (- #$ENOPROTOOPT))
			  (eql res (- #$EHOSTDOWN))
			  (eql res (- #+linux-target #$ENONET
				      #-linux-target #$ENETDOWN))
			  (eql res (- #$EHOSTUNREACH))
			  (eql res (- #$EOPNOTSUPP))
			  (eql res (- #$ENETUNREACH))))
	       (- #$EAGAIN)
               res))))
    (cond (wait
	    (with-eagain fd :input
	      (_accept fd *multiprocessing-socket-io*)))
	  (*multiprocessing-socket-io*
	    (_accept fd t))
	  (t ; if nowait was specified, temporarily force the socket to not block
             ;  (sockets are generally 'born blocking' in CCL)
	    (let ((was-blocking (get-socket-fd-blocking fd)))
	      (unwind-protect
		  (progn
                    (set-socket-fd-blocking fd nil)
		    (_accept fd t))
		(set-socket-fd-blocking fd was-blocking)))))))

(defun accept-socket-connection (socket wait stream-create-function &optional stream-args)
  (let ((listen-fd (socket-device socket))
	(fd -1))
    (unwind-protect
      (let ((keys (append stream-args (socket-keys socket))))
	(setq fd (socket-accept listen-fd wait))
	(cond ((>= fd 0)
	       (prog1 (apply stream-create-function fd keys)
		 (setq fd -1)))
	      ((eql fd (- #$EAGAIN)) nil)
	      (t (socket-error socket "accept" fd nil))))
      (when (>= fd 0)
	(fd-close fd)))))

(defgeneric accept-connection (socket &key wait stream-args)
  (:documentation
  "Extract the first connection on the queue of pending connections,
accept it (i.e. complete the connection startup protocol) and return a new
tcp-stream or file-socket-stream representing the newly established
connection.  The tcp stream inherits any properties of the listener socket
that are relevant (e.g. :keepalive, :nodelay, etc.) Additional arguments
may be specified using STREAM-ARGS. The original listener
socket continues to be open listening for more connections, so you can call
accept-connection on it again."))

(defmethod accept-connection ((socket listener-socket) &key (wait t) stream-args)
  (accept-socket-connection socket wait #'make-tcp-stream stream-args))

#-windows-target
(defmethod accept-connection ((socket file-listener-socket) &key (wait t) stream-args)
  (accept-socket-connection socket wait #'make-file-socket-stream stream-args))

(defun verify-socket-buffer (buf offset size)
  (unless offset (setq offset 0))
  (unless (<= (+ offset size) (length buf))
    (report-bad-arg size `(integer 0 ,(- (length buf) offset))))
  (multiple-value-bind (arr start) (array-data-and-offset buf)
    (setq buf arr offset (+ offset start)))
  ;; TODO: maybe should allow any raw vector
  (let ((subtype (typecode buf)))
    (unless #+ppc32-target (and (<= ppc32::min-8-bit-ivector-subtag subtype)
                                (<= subtype ppc32::max-8-bit-ivector-subtag))
            #+ppc64-target (= (the fixnum (logand subtype ppc64::fulltagmask))
                              ppc64::ivector-class-8-bit)
            #+x8632-target (and (<= x8632::min-8-bit-ivector-subtag subtype)
                                (<= subtype x8632::max-8-bit-ivector-subtag))
            #+x8664-target (and (>= subtype x8664::min-8-bit-ivector-subtag)
                                (<= subtype x8664::max-8-bit-ivector-subtag))
            #+arm-target (and (<= arm::min-8-bit-ivector-subtag subtype)
                                (<= subtype arm::max-8-bit-ivector-subtag))
      (report-bad-arg buf `(or (array (unsigned-byte 8))
			       (array (signed-byte 8))))))
  (values buf offset))

(defmethod send-to ((socket udp-socket) msg size
		    &key remote-host remote-port remote-address offset)
  "Send a UDP packet over a socket."
  (let ((socket-address (and (not (socket-connected socket))
                             (or remote-address
                                 (remote-socket-address socket)
                                 (resolve-address :host (or remote-host
                                                            (getf (socket-keys socket) :remote-host))
                                                  :port (or remote-port
                                                            (getf (socket-keys socket) :remote-port))
                                                  :connect :active
                                                  :address-family (socket-address-family socket)
                                                  :socket-type :datagram)))))
    (multiple-value-setq (msg offset) (verify-socket-buffer msg offset size))
    (%stack-block ((bufptr size))
      (%copy-ivector-to-ptr msg offset bufptr 0 size)
      (socket-call socket "sendto"
                   (with-eagain (socket-device socket) :output
                     (c_sendto (socket-device socket)
                               bufptr size 0
                               (if socket-address
                                   (sockaddr socket-address)
                                   (%null-ptr))
                               (if socket-address
                                   (sockaddr-length socket-address)
                                   0)))))))

(defmethod receive-from ((socket udp-socket) size &key buffer extract offset want-socket-address-p)
  "Read a UDP packet from a socket. If no packets are available, wait for
a packet to arrive. Returns three or four values:

If want-socket-address-p is false:

  The buffer with the data
  The number of bytes read
  The 32-bit unsigned IPv4 address or the 16 byte IPv6 address of the sender of the data
  The port number of the sender of the data.

If want-socket-address-p is true:

  The buffer with the data
  The number of bytes read
  The socket-address object describing the sender
"
  (let ((fd (socket-device socket))
	(vec-offset offset)
	(vec buffer)
	(ret-size -1)
        (socket-address (make-instance 'socket-address)))
    (when vec
      (multiple-value-setq (vec vec-offset)
	(verify-socket-buffer vec vec-offset size)))
    (rletz ((namelen :signed))
      (setf (pref namelen :signed) (sockaddr-length socket-address))
      (%stack-block ((bufptr size))
	(setq ret-size (socket-call socket "recvfrom"
			 (with-eagain fd :input
			   (c_recvfrom fd bufptr size 0 (sockaddr socket-address) namelen))))
        (upgrade-socket-address-from-sockaddr (pref (sockaddr socket-address) :sockaddr_storage.ss_family)
                                              socket-address)
	(unless vec
	  (setq vec (make-array ret-size
				:element-type
				(ecase (socket-format socket)
				  ((:binary) '(unsigned-byte 8))))
		vec-offset 0))
	(%copy-ptr-to-ivector bufptr 0 vec vec-offset ret-size))
      (let* ((buffer (cond ((null buffer)
                            vec)
                           ((or (not extract)
                                (and (eql 0 (or offset 0))
                                     (eql ret-size (length buffer))))
                            buffer)
                           (t 
                            (subseq vec vec-offset (+ vec-offset ret-size))))))
        (if want-socket-address-p
            (values buffer ret-size socket-address)
            (values buffer ret-size (host socket-address) (port socket-address)))))))

(defgeneric shutdown (socket &key direction)
  (:documentation
   "Shut down part of a bidirectional connection. This is useful if e.g.
you need to read responses after sending an end-of-file signal."))

(defmethod shutdown (socket &key direction)
  ;; TODO: should we ignore ENOTCONN error?  (at least make sure it
  ;; is a distinct, catchable error type).
  (let ((fd (socket-device socket)))
    (socket-call socket "shutdown"
      (c_shutdown fd (ecase direction
		       (:input #-windows-target #$SHUT_RD
			       #+windows-target #$SD_RECEIVE)
		       (:output #-windows-target #$SHUT_WR
				#+windows-target #$SD_SEND)
                       (:both #-windows-target #$SHUT_RDWR
			      #+windows-target #$SD_BOTH))))))

(defun dotted-to-ipaddr (name &key (errorp t))
  "Convert a dotted-string representation of a host address to a 32-bit
unsigned IP address."
  (let ((addr (_inet_aton name)))
    (if addr (ntohl addr)
      (and errorp (error "Invalid dotted address ~s" name)))))
    
(defun ipaddr-to-dotted (addr &key values)
  "Convert a 32-bit unsigned IP address into octets."
  (let* ((a (ldb (byte 8 24) addr))
	 (b (ldb (byte 8 16) addr))
	 (c (ldb (byte 8  8) addr))
	 (d (ldb (byte 8  0) addr)))
    (if values
      (values a b c d)
      (format nil "~d.~d.~d.~d" a b c d))))

(defun ipaddr-to-hostname (ipaddr &key ignore-cache)
  "Convert a 32-bit unsigned IP address into a host name string."
  (declare (ignore ignore-cache))
  (multiple-value-bind (name err) (c_gethostbyaddr (htonl ipaddr))
    (or name (socket-error nil "gethostbyaddr" err t))))
  

(defun int-getsockopt (socket level optname)
  (rlet ((valptr :signed)
         (vallen :signed))
    (setf (pref vallen :signed) 4)
    (let* ((err (c_getsockopt socket level optname valptr vallen)))
      (if (and (eql 0 err)
               (eql 4 (pref vallen :signed)))
        (pref valptr :signed)
	(socket-error socket "getsockopt" err nil)))))

(defun timeval-setsockopt (socket level optname timeout)
    (multiple-value-bind (seconds micros)
        (microseconds timeout)
      (rlet ((valptr :timeval :tv_sec seconds :tv_usec micros))
        (socket-call socket "setsockopt"
          (c_setsockopt socket level optname valptr (record-length :timeval))))))
                   
(defun int-setsockopt (socket level optname optval)
  (rlet ((valptr :signed))
    (setf (pref valptr :signed) optval)
    (socket-call socket "setsockopt"
      (c_setsockopt socket level optname valptr (record-length :signed)))))



            
(defun c_gethostbyaddr (addr-in-net-byte-order)
  (rletZ ((sin #>sockaddr_in))
    (setf (pref sin :sockaddr_in.sin_family) #$AF_INET
          (pref sin
                #+(or windows-target solaris-target) #>sockaddr_in.sin_addr.S_un.S_addr
                #-(or windows-target solaris-target) #>sockaddr_in.sin_addr.s_addr) addr-in-net-byte-order)
    #+(or darwin-target freebsd-target)
    (setf (pref sin :sockaddr_in.sin_len) (record-length :sockaddr_in))
    (%stack-block ((namep #$NI_MAXHOST))
      (let* ((err (#_getnameinfo sin (record-length #>sockaddr_in) namep #$NI_MAXHOST (%null-ptr) 0 #$NI_NAMEREQD)))
        (if (eql 0 err)
          (%get-cstring namep)
          (values nil err))))))

(defun _getservbyname (name proto)
  (with-cstrs ((name (string name))
	       (proto (string proto)))
    (let* ((servent-ptr (%null-ptr)))
      (declare (dynamic-extent servent-ptr))
      (%setf-macptr servent-ptr (#_getservbyname name proto))
      (unless (%null-ptr-p servent-ptr)
	(pref servent-ptr :servent.s_port)))))

(defun _inet_aton (string)
  (with-cstrs ((name string))
    #-windows-target
    (rlet ((addr :in_addr))
      (let* ((result #+freebsd-target (#___inet_aton name addr)
                     #-freebsd-target (#_inet_aton name addr)))
	(unless (eql result 0)
	  (pref addr
                #-solaris-target :in_addr.s_addr
                #+solaris-target #>in_addr.S_un.S_addr
                ))))
    #+windows-target
    (rlet ((addr :sockaddr_in)
           (addrlenp :int (record-length :sockaddr_in)))
      (setf (pref addr :sockaddr_in.sin_family) #$AF_INET)
      (when (zerop (#_WSAStringToAddressA name #$AF_INET (%null-ptr) addr addrlenp))
        (pref addr #>sockaddr_in.sin_addr.S_un.S_addr)))))

(defun c_socket_1 (domain type protocol)
  #-windows-target (int-errno-call (#_socket domain type protocol))
  #+windows-target (let* ((handle (#_socket domain type protocol)))
                     (if (< handle 0)
                       (%get-winsock-error)
                       handle)))

(defun c_socket (domain type protocol)
  (let* ((fd (c_socket_1 domain type protocol)))
    (when (or (eql fd (- #$EMFILE))
              (eql fd (- #$ENFILE)))
      (gc)
      (drain-termination-queue)
      (setq fd (c_socket_1 domain type protocol)))
    fd))
      

(defun c_bind (sockfd sockaddr addrlen)
  (check-socket-error (#_bind sockfd sockaddr addrlen)))


#+windows-target
(defun windows-connect-wait (sockfd timeout-in-milliseconds)
  (if (and timeout-in-milliseconds
           (< timeout-in-milliseconds 0))
    (setq timeout-in-milliseconds nil))
  (rlet ((writefds :fd_set)
         (exceptfds :fd_set)
         (tv :timeval :tv_sec 0 :tv_usec 0))
    (fd-zero writefds)
    (fd-zero exceptfds)
    (fd-set sockfd writefds)
    (fd-set sockfd exceptfds)
    (when timeout-in-milliseconds
      (multiple-value-bind (seconds milliseconds)
          (floor timeout-in-milliseconds 1000)
        (setf (pref tv :timeval.tv_sec) seconds
              (pref tv :timeval.tv_usec) (* 1000 milliseconds))))
    (> (#_select 1 (%null-ptr) writefds exceptfds (if timeout-in-milliseconds tv (%null-ptr))) 0)))
      
      
;;; If attempts to connect are interrupted, we basically have to
;;; wait in #_select (or the equivalent).  There's a good rant
;;; about these issues in:
;;; <http://www.madore.org/~david/computers/connect-intr.html>
(defun c_connect (sockfd addr len &optional timeout-in-milliseconds)
  (let* ((was-blocking (get-socket-fd-blocking sockfd)))
    (unwind-protect
         (progn
           (set-socket-fd-blocking sockfd nil)
           (let* ((err (check-socket-error (#_connect sockfd addr len))))
             (cond ((or (eql err (- #+windows-target #$WSAEINPROGRESS
                                    
                                    #-windows-target #$EINPROGRESS))
                        #+windows-target (eql err (- #$WSAEWOULDBLOCK))
                        (eql err (- #$EINTR)))
                    (if #+windows-target (windows-connect-wait sockfd timeout-in-milliseconds)
                        #-windows-target (process-output-wait sockfd timeout-in-milliseconds)
                      (- (int-getsockopt sockfd #$SOL_SOCKET #$SO_ERROR))
                      (- #+windows-target #$WSAETIMEDOUT #-windows-target #$ETIMEDOUT)))
                   (t err))))
      (set-socket-fd-blocking sockfd was-blocking))))

(defun c_listen (sockfd backlog)
  (check-socket-error (#_listen sockfd backlog)))

(defun c_accept (sockfd addrp addrlenp)
  (ignoring-eintr
   (check-socket-error (#_accept sockfd addrp addrlenp))))

(defun c_getsockname (sockfd addrp addrlenp)
  (check-socket-error (#_getsockname sockfd addrp addrlenp)))

(defun c_getpeername (sockfd addrp addrlenp)
  (check-socket-error (#_getpeername sockfd addrp addrlenp)))

#-windows-target
(defun c_socketpair (domain type protocol socketsptr)
  (check-socket-error (#_socketpair domain type protocol socketsptr)))


(defun c_sendto (sockfd msgptr len flags addrp addrlen)
  (ignoring-eintr (check-socket-error (#_sendto sockfd msgptr len flags addrp addrlen))))

(defun c_recvfrom (sockfd bufptr len flags addrp addrlenp)
  (ignoring-eintr (check-socket-error (#_recvfrom sockfd bufptr len flags addrp addrlenp))))

(defun c_shutdown (sockfd how)
  (check-socket-error (#_shutdown sockfd how)))

(defun c_setsockopt (sockfd level optname optvalp optlen)
  (check-socket-error (#_setsockopt sockfd level optname optvalp optlen)))

(defun c_getsockopt (sockfd level optname optvalp optlenp)
  (check-socket-error (#_getsockopt sockfd level optname optvalp optlenp)))

#-windows-target
(defun c_sendmsg (sockfd msghdrp flags)
  (check-socket-error (#_sendmsg sockfd msghdrp flags)))

#-windows-target
(defun c_recvmsg (sockfd msghdrp flags)
  (check-socket-error   (#_recvmsg sockfd msghdrp flags)))

;;; Return a list of currently configured interfaces, a la ifconfig.
(defstruct ip-interface
  name
  addr
  netmask
  flags
  address-family)

(defun dump-buffer (p n)
  (dotimes (i n (progn (terpri) (terpri)))
    (unless (logtest i 15)
      (format t "~&~8,'0x: " (%ptr-to-int (%inc-ptr p i))))
    (format t " ~2,'0x" (%get-byte p i))))

#-(or windows-target solaris-target)
(defun %get-ip-interfaces ()
  #-android-target
  (rlet ((p :address (%null-ptr)))
    (if (zerop (#_getifaddrs p))
      (unwind-protect
           (do* ((q (%get-ptr p) (pref q :ifaddrs.ifa_next))
                 (res ()))
                ((%null-ptr-p q) (nreverse res))
             (let* ((addr (pref q :ifaddrs.ifa_addr)))
               (when (and (not (%null-ptr-p addr))
                          (eql (pref addr :sockaddr.sa_family) #$AF_INET))
                 (push (make-ip-interface
                        :name (%get-cstring (pref q :ifaddrs.ifa_name))
                        :addr (ntohl (pref addr :sockaddr_in.sin_addr.s_addr))
                        :netmask (ntohl
                                  (pref (pref q :ifaddrs.ifa_netmask)
                                       :sockaddr_in.sin_addr.s_addr))
                        :flags (pref q :ifaddrs.ifa_flags)
                        :address-family #$AF_INET)
                       res))))
        (#_freeifaddrs (pref p :address))))))

#+solaris-target
(progn
  ;;; Interface translator has trouble with a lot of ioctl constants.
  (eval-when (:compile-toplevel :execute)
    (defconstant os::|SIOCGLIFNUM| #xc00c6982)
    (defconstant os::|SIOCGLIFCONF| #xc01069a5)
    (defconstant os::|SIOCGLIFADDR| #xc0786971)
    (defconstant os::|SIOCGLIFFLAGS| #xc0786975)
    (defconstant os::|SIOCGLIFNETMASK| #xc078697d)
    )

(defun %get-ip-interfaces ()
  (let* ((sock (c_socket #$PF_INET #$SOCK_DGRAM #$IPPROTO_UDP))
         (res nil))
    (when (>= sock 0)
      (unwind-protect
           (let* ((flags (logior #$LIFC_NOXMIT #$LIFC_TEMPORARY #$LIFC_ALLZONES))
                  (ninterfaces (rlet ((lifnum :lifnum
                                        :lifn_flags flags
                                        :lifn_family #$AF_INET
                                        :lifn_count 0))
                                 (#_ioctl sock os::SIOCGLIFNUM :address lifnum)
                                 (pref lifnum :lifnum.lifn_count))))
             (declare (fixnum ninterfaces))
             (when (> ninterfaces 0)
               (let* ((bufsize (* ninterfaces (record-length :lifreq))))
                 (%stack-block ((buf bufsize :clear t))
                   (rlet ((lifc :lifconf
                            :lifc_family #$AF_INET
                            :lifc_flags flags
                            :lifc_len bufsize
                            :lifc_lifcu.lifcu_buf buf))
                     (when (>= (#_ioctl sock os::SIOCGLIFCONF :address lifc) 0)
                       (do* ((i 0 (1+ i))
                             (p (pref lifc :lifconf.lifc_lifcu.lifcu_buf)
                                (%inc-ptr p (record-length :lifreq))))
                            ((= i ninterfaces))
                         (let* ((name (%get-cstring (pref p :lifreq.lifr_name)))
                                (address-family (pref p :lifreq.lifr_lifru.lifru_addr.ss_family))
                                (if-flags nil)
                                (address nil)
                                (netmask nil))
                           (if (>= (#_ioctl sock os::SIOCGLIFFLAGS :address p)
                                   0)
                             (setq if-flags (pref p :lifreq.lifr_lifru.lifru_flags)))
                           (if (>= (#_ioctl sock os::SIOCGLIFADDR :address p)
                                   0)
                             (setq address (pref
                                            (pref p :lifreq.lifr_lifru.lifru_addr)
                                            #>sockaddr_in.sin_addr.S_un.S_addr)))
                           (if (>= (#_ioctl sock os::SIOCGLIFNETMASK :address p)
                                   0)
                             (setq netmask (pref
                                            (pref p :lifreq.lifr_lifru.lifru_subnet)
                                            #>sockaddr_in.sin_addr.S_un.S_addr)))
                             
                           (push (make-ip-interface
                                  :name name
                                  :addr (ntohl address)
                                  :netmask (ntohl netmask)
                                  :flags if-flags
                                  :address-family address-family)
                                 res)))))))))
        (fd-close sock)))
    res))
)




#+windows-target
(defun %get-ip-interfaces ()
  (let* ((socket (#_socket #$AF_INET #$SOCK_DGRAM #$IPPROTO_IP)))
    (unwind-protect
         (rlet ((realoutlen #>DWORD 0))
           (do* ((reservedlen (* 4 (record-length #>INTERFACE_INFO))
                              (* 2 reservedlen)))
                ()
             (%stack-block ((buf reservedlen))
               (if (eql 0  (#_WSAIoctl
                            socket
                            #$SIO_GET_INTERFACE_LIST
                            (%null-ptr)
                            0
                            buf
                            reservedlen
                            realoutlen
                            (%null-ptr)
                            (%null-ptr)))
               (let* ((noutbytes (pref realoutlen #>DWORD)))
                 (when (< noutbytes reservedlen)
                   (let* ((interfaces nil))

                     (do* ((offset 0 (+ offset (record-length #>INTERFACE_INFO)))
                           (nameidx 0 (1+ nameidx)))
                          ((>= offset noutbytes))
                       (with-macptrs ((p (%inc-ptr buf offset)))
                         (push (make-ip-interface 
                                :name (format nil "ip~d" nameidx)
                                :addr (ntohl
                                       (pref (pref p #>INTERFACE_INFO.iiAddress)
                                             #>sockaddr_gen.AddressIn.sin_addr.S_un.S_addr))
                                :netmask (ntohl
                                          (pref (pref p #>INTERFACE_INFO.iiNetmask)
                                                #>sockaddr_gen.AddressIn.sin_addr.S_un.S_addr))
                                :flags (pref p #>INTERFACE_INFO.iiFlags)
                                :address-family #$AF_INET)
                               interfaces)))
                     (return interfaces))))
               (let* ((err (#_WSAGetLastError)))
                 (unless (eql err #$WSAEFAULT)
                   (return)))))))
      (#_closesocket socket))))

      


(defloadvar *ip-interfaces* ())

(defun ip-interfaces ()
  (or *ip-interfaces*
      (setq *ip-interfaces* (%get-ip-interfaces))))

;;; This should presumably happen after a configuration change.
;;; How do we detect a configuration change ?
(defun %reset-ip-interfaces ()
  (setq *ip-interfaces* ()))

;;; Return the first non-loopback interface that's up and whose address
;;; family is #$AF_INET.  If no such interface exists, return
;;; the loopback interface.
(defun primary-ip-interface ()
  (let* ((ifaces (ip-interfaces)))
    (or (find-if #'(lambda (i)
		     (and (eq #$AF_INET (ip-interface-address-family i))
                          (ip-interface-addr i)
			  (let* ((flags (ip-interface-flags i)))
			    (and (not (logtest #$IFF_LOOPBACK flags))
				 (logtest #$IFF_UP flags)))))
		 ifaces)
	(car ifaces))))

(defun primary-ip-interface-address ()
  (let* ((iface (primary-ip-interface)))
    (if iface
      (ip-interface-addr iface)
      (error "Can't determine primary IP interface"))))
	  
(defmethod stream-io-error ((stream socket) errno where)
  (socket-error stream where errno nil))

(defclass socket-address ()
  ((sockaddr :reader sockaddr :initform (make-gcable-record :sockaddr_storage))
   (sockaddr-length :reader sockaddr-length :initform (record-length :sockaddr_storage))))

(defmethod initialize-instance :after ((socket-address socket-address) &key)
  (loop for i below (sockaddr-length socket-address)
        do (setf (paref (sockaddr socket-address) :uint8_t i) 0)))

(defgeneric upgrade-socket-address-from-sockaddr (socket-address-family socket-address)
  (:documentation "Upgrade the class of the given socket-address
  instance to be the class of the socket-address subclass that
  corresponds to the given socket-address-family, which is expected to
  be an address family as encoded by the sockets API (i.e. #$AF_UNIX,
  #$AF_INET or #$AF_INET6).  This generic function is eql-specialized
  for all supported address families.  It is called after a system
  function like getaddrinfo() or getpeername() has been called to
  determine a sockaddr to turn it into a lisp object that can be
  conveniently manipulated."))

(defgeneric socket-address-as-string (socket-address)
  (:documentation "Return printable representation of the
  IP-SOCKET-ADDRESS"))

(defmethod socket-address-as-string ((socket-address socket-address))
  (format nil "[unparsed, AF ~A]" (pref (sockaddr socket-address) :sockaddr_storage.ss_family)))

(defmethod print-object ((socket-address socket-address) stream)
  (print-unreadable-object (socket-address stream :type t)
    (write-string (socket-address-as-string socket-address) stream)))

(defgeneric af (socket-address)
  (:documentation "Return the socket address family associated with
  the socket address object"))

(defun in6-addr-to-vec (in6-addr)
  (loop with result = (make-array 16 :element-type '(unsigned-byte 8))
        for i below 16
        do (setf (aref result i) (paref in6-addr :uint8_t i))
        finally (return result)))

(defun vec-to-in6-addr (vec in6-addr)
  (loop for i below 16
        do (setf (paref in6-addr :uint8_t i) (aref vec i))))

(defclass ip-socket-address (socket-address)
  ((host :initarg :host :reader host :reader socket-address-host)
   (port :initarg :port :reader port :reader socket-address-port)))

(defconstant +host-address-string-len+
  #-windows-target #$INET6_ADDRSTRLEN
  #+windows-target 64)

(defun host-address-as-string (ip-socket-address)
  (%stack-block ((namep +host-address-string-len+)
		 #+windows-target
		 (namelenp (record-length :int)))
    #-windows-target
    (multiple-value-bind (result errno)
        ;; Needs to be ccl:external-call because FreeBSD, for unclear
        ;; reasons, does not have #_inet_ntop, but rather
        ;; #___inet_ntop
        (ccl:external-call "inet_ntop"
                           :int (af ip-socket-address)
                           :address (ecase (af ip-socket-address)
                                      (#.#$AF_INET (pref (sockaddr ip-socket-address) :sockaddr_in.sin_addr))
                                      (#.#$AF_INET6 (pref (sockaddr ip-socket-address) :sockaddr_in6.sin6_addr)))
                           :address namep
                           :socklen_t +host-address-string-len+
                           :address)
      (if (%null-ptr-p result)
	  (error "could not convert address to string, error ~S" errno)
	  (%get-cstring namep)))
    #+windows-target
    (setf (pref namelenp :int) +host-address-string-len+)
    #+windows-target
    (if (zerop (#_WSAAddressToStringA (sockaddr ip-socket-address)
                                      (sockaddr-length ip-socket-address)
                                      (%null-ptr) namep namelenp))
        (%str-from-ptr namep (pref namelenp :int))
        (error "cannot convert host address to string, error ~A" (%get-winsock-error)))))

(defun ensure-string (port)
  (if (stringp port)
      port
      (princ-to-string port)))

(defun resolve-address (&key
                        host
                        port
                        (socket-type :stream)
                        (connect :active)
                        address-family
                        numeric-host-p
                        #-windows-target numeric-service-p
                        (singlep t)
                        (errorp t))
  "Resolve a host and/or port string to one or more socket-address
  instances.  Either host or port may be unspecified.  Calls
  getaddrinfo() underneath.
  
  singlep may be passed as NIL to make the function return a list of
  host addresses matching the specified query terms.  The default is to
  return the first matching address.
  
  errorp may be passed as NIL to return NIL if no match was found."
  
  ;; We have historically supported the use of an (unsigned-byte 32)
  ;; value to represent an IPv4 address. If existing code does that to
  ;; avoid overhead (name resolution, consing, what-have-you), then
  ;; that code may not appreciate the consing/mallocing we do here
  ;; to support that.
  (when (typep host '(unsigned-byte 32))
    (let* ((proto (ecase socket-type
		    ((nil :stream) "tcp")
		    (:datagram "udp")))
	   (inet-port (typecase port
			(fixnum (htons port))
			(string (_getservbyname port proto))
			(symbol (_getservbyname (string-downcase
						 (string port)) proto)))))
      (if (null inet-port)
          (when errorp
            (error "can't resolve port ~s with getservbyname" port))
          (let* ((socket-address (make-instance 'socket-address))
                 (sin (sockaddr socket-address)))
            (setf (pref sin :sockaddr_in.sin_family) #$AF_INET)
            (setf (pref sin
                        #+(or windows-target solaris-target) #>sockaddr_in.sin_addr.S_un.S_addr
                        #-(or windows-target solaris-target) :sockaddr_in.sin_addr.s_addr) (htonl host))
            (setf (pref sin :sockaddr_in.sin_port) inet-port)
            (upgrade-socket-address-from-sockaddr #$AF_INET socket-address)
            (return-from resolve-address socket-address)))))
  
  (with-cstrs ((host-buf (or host ""))
               (port-buf (string-downcase (or (ensure-string port) ""))))
    (rletZ ((hints #>addrinfo)
            (results :address))
      (setf (pref hints #>addrinfo.ai_socktype) (ecase socket-type
                                                  ((nil :stream) #$SOCK_STREAM)
                                                  (:datagram #$SOCK_DGRAM)))
      (when address-family
        (setf (pref hints #>addrinfo.ai_family) (ecase address-family
                                                  (:internet #$AF_INET)
                                                  (:internet6 #$AF_INET6))))
      (let ((flags 0))
        (when numeric-host-p
          (incf flags #$AI_NUMERICHOST))
	#-windows-target
        (when numeric-service-p
          (incf flags #$AI_NUMERICSERV))
        (when (eql connect :passive)
          (incf flags #$AI_PASSIVE))
        (setf (pref hints #>addrinfo.ai_flags) flags))
      (let* ((err (#_getaddrinfo (if host host-buf (%null-ptr))
                                 (if port port-buf (%null-ptr))
                                 hints
                                 results)))
        (if (eql 0 err)
            (prog1
              (or (loop for info = (pref results :address) then (pref info #>addrinfo.ai_next)
                    until (%null-ptr-p info)
                    for sockaddr = (pref info #>addrinfo.ai_addr)
                    for socket-address = (make-instance 'socket-address)
                    do (loop for i below (pref info #>addrinfo.ai_addrlen)
                         do (setf (paref (sockaddr socket-address) :uint8_t i)
                                  (paref sockaddr :uint8_t i)))
                    (upgrade-socket-address-from-sockaddr (pref (sockaddr socket-address) :sockaddr_storage.ss_family)
                                                          socket-address)
                    if singlep
                    do (return socket-address)
                    else
                    collect socket-address)
                  (when errorp
                    (error "cannot resolve local service host ~A port ~A connect ~S type ~S"
                           host port connect socket-type)))
              (#_freeaddrinfo (pref results :address)))
            (if errorp 
                (socket-error nil "getaddrinfo" err t) 
                (values nil err)))))))

(defclass ip4-socket-address (ip-socket-address)
  ())

(defmethod socket-address-family ((socket-address ip4-socket-address))
  :internet)

(defmethod socket-address-as-string ((socket-address ip4-socket-address))
  (format nil "~A:~A" (host-address-as-string socket-address) (port socket-address)))

(defmethod af ((socket-address ip4-socket-address))
  #$AF_INET)

(defmethod upgrade-socket-address-from-sockaddr ((address-family (eql #$AF_INET)) socket-address)
  (setf (slot-value socket-address 'sockaddr-length) (record-length #:sockaddr_in))
  (change-class socket-address 'ip4-socket-address
                :host (ntohl (pref (sockaddr socket-address)
                                   #-(or solaris-target windows-target) :sockaddr_in.sin_addr.s_addr
                                   #+(or solaris-target windows-target) #>sockaddr_in.sin_addr.S_un.S_addr))
                :port (ntohs (pref (sockaddr socket-address) :sockaddr_in.sin_port))))

(defclass ip6-socket-address (ip-socket-address)
  ())

(defmethod socket-address-family ((socket-address ip6-socket-address))
  :internet6)

(defmethod socket-address-as-string ((socket-address ip6-socket-address))
  (format nil "[~A]:~A" (host-address-as-string socket-address) (port socket-address)))

(defmethod af ((socket-address ip6-socket-address))
  #$AF_INET6)

(defmethod upgrade-socket-address-from-sockaddr ((address-family (eql #$AF_INET6)) socket-address)
  (setf (slot-value socket-address 'sockaddr-length) (record-length #:sockaddr_in6))
  (change-class socket-address 'ip6-socket-address
                :host (in6-addr-to-vec (pref (sockaddr socket-address) :sockaddr_in6.sin6_addr))
                :port (ntohs (pref (sockaddr socket-address) :sockaddr_in6.sin6_port))))

#-windows-target
(defclass unix-socket-address (socket-address)
  ((path :initarg :path :reader host :reader socket-address-path)))

#-windows-target
(defmethod initialize-instance :after ((socket-address unix-socket-address) &key path)
  (setf (pref (sockaddr socket-address) :sockaddr_un.sun_family) #$AF_UNIX
        (slot-value socket-address 'sockaddr-length) (copy-string-to-sockaddr_un path
                                                                                 (sockaddr socket-address)))
  #+(or darwin-target freebsd-target)
  (setf (pref (sockaddr socket-address) :sockaddr_un.sun_len) (sockaddr-length socket-address)))


#-windows-target
(defmethod socket-address-family ((socket-address unix-socket-address))
  :file)

#-windows-target
(defmethod af ((socket-address unix-socket-address))
  #$AF_UNIX)

#-windows-target
(defmethod port ((socket-address unix-socket-address))
  nil)

#-windows-target
(defmethod socket-address-as-string ((socket-address unix-socket-address))
  (format nil "~S" (socket-address-path socket-address)))

#-windows-target
(defconstant +socketaddr_un-sock-path-lan+ (/ (ensure-foreign-type-bits
                                               (foreign-record-field-type 
                                                (%find-foreign-record-type-field
                                                 (parse-foreign-type '(:struct :sockaddr_un)) :sun_path)))
                                              8))

#-windows-target
(defun copy-string-to-sockaddr_un (name sockaddr)
  "Copy a pathname to a sockaddr_un object, returning the length of
the resulting sockaddr."
  (let* ((namelen (length name))
         (copylen (min (1- +socketaddr_un-sock-path-lan+) namelen))
         (sun-path (pref sockaddr :sockaddr_un.sun_path)))
    (dotimes (i copylen)
      (setf (%get-unsigned-byte sun-path i)
            (let* ((code (char-code (schar name i))))
              (if (> code 255)
                  (char-code #\Sub)
                  code))))
    (setf (%get-unsigned-byte sun-path copylen) 0)
    (+ (record-length :sockaddr_un) (- +socketaddr_un-sock-path-lan+) 1 copylen)))

#-windows-target
(defmethod upgrade-socket-address-from-sockaddr ((address-family (eql #$AF_UNIX)) socket-address)
  (let ((sockaddr (sockaddr socket-address)))
    (change-class socket-address 'unix-socket-address
                  :path (when (and #+(or darwin-target freebsd-target) (plusp (pref sockaddr :sockaddr_un.sun_len))
                                   (not (zerop (paref (pref sockaddr :sockaddr_un.sun_path) :uint8_t 0))))
                          #+darwin-target
                          (%str-from-ptr (pref sockaddr :sockaddr_un.sun_path)
                                         (- (pref sockaddr :sockaddr_un.sun_len)
                                            (- (record-length :sockaddr_un) +socketaddr_un-sock-path-lan+)
                                            1))
                          #-darwin-target
                          (%get-cstring (pref sockaddr :sockaddr_un.sun_path))))))

(defmethod socket-bind-local (socket socket-address)
  (socket-call socket "bind" (c_bind (socket-device socket)
                                     (sockaddr socket-address)
                                     (sockaddr-length socket-address))))

(defun get-socket-address-from-call (socket function call-name)
  (let ((socket-address (make-instance 'socket-address)))
    (rlet ((namelen :signed (sockaddr-length socket-address)))
      (let ((err (funcall function (socket-device socket) (sockaddr socket-address) namelen)))
        (cond
          ((eql err (- #+windows-target #$WSAENOTCONN #-windows-target #$ENOTCONN))
           nil)
          ((< err 0)
           (socket-error socket call-name err nil))
          (t
           (upgrade-socket-address-from-sockaddr (pref (sockaddr socket-address) :sockaddr_storage.ss_family)
                                                 socket-address)))))))

(defmethod remote-socket-address ((socket socket))
  (when (socket-device socket)
    (get-socket-address-from-call socket #'c_getpeername "getpeername")))

(defmethod local-socket-address ((socket socket))
  (when (socket-device socket)
    (get-socket-address-from-call socket #'c_getsockname "getsockname")))

(defgeneric local-port (socket)
  (:documentation "Return the local port number."))

(defmethod local-port ((socket socket))
  (port (local-socket-address socket)))

(defgeneric local-host (socket)
  (:documentation
   "Return internal representation of the local IP address of the
   socket.  For IPv4 addresses, this is a 32 bit integer.  For IPv6
   addresses, it is a vector of 16 bytes."))

(defmethod local-host ((socket socket))
  (host (local-socket-address socket)))

(defun lookup-port (port proto)
  "Find the port number for the specified port and protocol."
  (if (fixnump port)
      port
      (let ((socket-address (resolve-address :port port
                                             :socket-type (if (stringp proto)
                                                              (case (find-symbol (string-upcase proto) :keyword)
                                                                (:udp :datagram)
                                                                (:tcp :stream))
                                                              proto)
                                             :errorp nil)))
        (when socket-address
          (port socket-address)))))

(defun lookup-hostname (host)
  "Convert a host spec in any of the acceptable formats into a 32-bit
unsigned IP address."
  (if (typep host 'integer)
      host
      (let ((socket-address (resolve-address :host host :address-family :internet :errorp nil)))
        (when socket-address
          (host socket-address)))))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defun snarf-url (url &key max-redirects (user-agent "CCL") &aux conn)
  "GET the contents of the url as a (VECTOR (UNSIGNED-BYTE 8))"
  (labels ((is-prefix (prefix string) (eql (length prefix) (string-lessp prefix string)))
	   (header (prefix lines)
	     (let ((line (find prefix lines :test #'is-prefix)))
	       (and line (string-trim ccl::wsp (subseq line (length prefix))))))
	   (header-value (prefix lines)
	     (let ((line (find prefix lines :test #'is-prefix)))
	       (and line (parse-integer line :start (length prefix)))))
	   (split-url (string)
             (if (is-prefix "/" string)
               (list nil 80 string)
               (if (not (is-prefix "http://" string))
                 (error "Unknown scheme in ~s" string)
                 (let* ((start (length "http://"))
                        (end (length string))
                        (ppos (or (position #\/ string :start start) end))
                        (hend (or (position #\: string :start start :end ppos) ppos)))
                   (list (subseq string start hend)
                         (if (< hend ppos) (parse-integer string :start (1+ hend) :end ppos) 80)
                         (if (< ppos end) (subseq string ppos) "/"))))))
	   (read-header (conn)
	     (loop as lines = (loop for line = (read-line conn nil)
				    until (= 0 (length line)) ; eof or empty line
				    collect line)
		   as status = (let ((status-line (pop lines)))
				 (or (parse-integer status-line
						    :start (position #\Space status-line)
						    :junk-allowed t)
				     0))
		   while (= status 100)
		   finally (return (values lines status)))))
    (unwind-protect
       (loop with original-url = url
	     with redirects = (or max-redirects 20)
	     with (host port path) = (split-url original-url)
	     do (setq conn (make-socket :remote-host host
					:remote-port port
					:external-format '(:character-encoding :us-ascii
							   :line-termination :crlf)))
	     do (format conn "GET ~a HTTP/1.1~%Host: ~a:~d~%Connection: close~%User-Agent: ~a~2%"
			path host port user-agent)
	     do (finish-output conn)
	     do (multiple-value-bind (header-lines status) (read-header conn)
		  (when (= status 200)
		    (let ((encoding (header "transfer-encoding:" header-lines)))
		      ;; Here would recognize chunked encoding if cared about that...
		      (when (and encoding (not (string-equal encoding "identity")))
			(error "Unsupported encoding ~s" encoding)))
		    (return
		      (let* ((count (header-value "content-length:" header-lines)))
			(if count
			    (let ((vec (make-array count :element-type '(unsigned-byte 8))))
			      (loop for i from 0 below count
				    do (setf (aref vec i) (read-byte conn)))
			      vec)
			    (let ((vec (make-array 1000
						   :element-type '(unsigned-byte 8)
						   :fill-pointer 0
						   :adjustable t)))
			      (loop for byte = (read-byte conn nil) while byte
				    do (vector-push-extend byte vec))
			      (subseq vec 0 (length vec)))))))
		  (unless (and (<= 300 status 399) (<= 0 (decf redirects)))
		    (if (<= 300 status 399)
			(error "Too many redirects")
			(error "Unknown response ~s" status)))
		  (let* ((new (or (header "location:" header-lines)
				  (error "Missing Location: header"))))
		    (destructuring-bind (new-host new-port new-path) (split-url new)
		      (when new-host
			(setq host new-host port new-port))
		      (setq path new-path))
		    (close conn)
		    (setq conn nil)))
      (when conn (close conn))))))
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3
;;;; END FILE ./reference/ccl/library/sockets.lisp
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4n









;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4n









;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4n









;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4n











\;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1
;;;; BEGIN FILE ./reference/ccl/library/jni.lisp
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2
;    Copyright (c) Rich Hickey. All rights reserved.
;    The use and distribution terms for this software are covered by the
;    Common Public License 1.0 (http://opensource.org/licenses/cpl.php)
;    which can be found in the file CPL.TXT at the root of this distribution.
;    By using this software in any fashion, you are agreeing to be bound by
;    the terms of this license.
;    You must not remove this notice, or any other, from this software.

#|
This is a straight wrapper around the JNI API
Originally I intended to expose this API directly, but it turns out
that JNI is very sensitive to errors, and, given bad args, wrong types etc
causes the JVM (and Lisp) to crash, not very much in the spirit of safe, robust,
interactive development offered by Lisp

So, now this just forms the substrate under jfli, which uses the Reflection API, and is much
more robust and error tolerant, at some cost in speed I guess.

Bottom line is you shouldn't be using this API directly unless you are extending jfli,
and then you must take care not to allow bad end-user data to pass through to JNI. 

Caveat emptor.

I have tried to limit LispWorks FLI code to this file.
|#

(defpackage :jni
  (:export
   :*jni-lib-path*
   :*pvm*
   :*penv*
   :register-invocation-handler
   :create-jvm
   :JNI-VERSION-1-2
   :JNI-VERSION-1-4
   :JNI-OK
   :java-ref
   :jvoid :jboolean :jbyte :jchar :jshort :jint :jlong :jfloat :jdouble :jsize
   :jobject :jclass :jthrowable :jstring :jarray
   :jboolean-array :jbyte-array :jchar-array :jshort-array :jint-array :jlong-array
   :jfloat-array :jdouble-array :jobject-array
   :jfield-id :jmethod-id :jweak
   :pvm :penv
   :jvalue
   :arg-array
   :jni-native-method :jni-env
   :java-vm :java-vm-option :jdk-1-1-init-args
   :jni-get-default-java-vm-init-args :java-vm-inits-args
   :jni-create-java-vm :jni-get-created-java-vms
   :try :try-null :try-neg
   :local-ref-to-global-ref :local-ref-to-string
   :def-jni-function :def-jni-functions :def-jni-constructor :def-jni-field
   :jaref :convert-to-java-string :convert-from-java-string :java-ref-p
   :is-name-of-primitive :split-package-and-class
   ;; Export JNIEnv function names, too
   :get-array-length :is-same-object :jni-find-class :is-assignable-from
   :delete-local-ref :new-object-array :new-int-array
   ))

(in-package :jni)

(defclass java-object (ccl::foreign-standard-object)
    ())

(defmethod print-object ((object java-object) stream)
  (print-unreadable-object (object stream :type t :identity t)
    (format stream "@#x~x" (ccl::%ptr-to-int object))))

(ccl::defloadvar *java-object-domain* nil)

(or *java-object-domain*
    (setq *java-object-domain*
          (ccl::register-foreign-object-domain :java
                                               :recognize #'ccl::false
                                               :class-of (lambda (x)
                                                           (declare (ignore x))
                                                           (find-class 'java-object))
                                               :classp #'ccl::false
                                               :instance-class-wrapper
                                               (lambda (x)
                                                 (declare (ignore x))
                                                 (ccl::class-own-wrapper
                                                  (find-class 'java-object)))
                                               :class-own-wrapper
                                               #'ccl::false
                                               :slots-vector #'ccl::false
                                               :class-ordinal #'ccl::false
                                               :set-class-ordinal
                                               #'ccl::false)))

(deftype java-ref () 'java-object)

(defun java-ref-p (x)
  (and (eql (ccl::typecode x) target::subtag-macptr)
       (eql (ccl::%macptr-domain x) *java-object-domain*)))


(eval-when (:compile-toplevel :load-toplevel :execute)
  (ccl:use-interface-dir :jni))

(defun string-append (&rest args)
  (declare (dynamic-extent args))
  (do* ((a args (cdr a)))
     ((null a) (apply #'concatenate 'string args))
    (let* ((arg (car a)))
      (unless (typep arg 'string)
        (setf (car a) (string arg))))))

(defvar *jni-lib-path*
#+:darwin-target "/System/Library/Frameworks/JavaVM.framework/JavaVM"
#+:win32-target "C:/Program Files/Java/jre6/bin/client/jvm.dll"
#+android-target "libdvm.so"
#-(or darwin-target win32-target android-target)
"need to define *jni-lib-path*"
"Set this to point to your jvm dll prior to calling create-jvm")

(ccl::defloadvar *pvm* nil)

;;; Map between lisp and Java booleans
(eval-when (:compile-toplevel)
  (declaim (inline jboolean-arg jboolean-result jobject-result jobject-arg)))

(defun jboolean-arg (val)
  (if (and val (not (eql val #$JNI_FALSE)))
    #$JNI_TRUE
    #$JNI_FALSE))

(defun jobject-arg (val)
  (or val ccl::+null-ptr+))


(defun jboolean-result (val)
  (not (eql val #$JNI_FALSE)))

;;; Might also want to register p for termination (finalization).
(defun jobject-result (val)
  (unless (ccl::%null-ptr-p val)
    (ccl::%set-macptr-domain val *java-object-domain*)
    val))



(defconstant JNI-VERSION-1-2 #$JNI_VERSION_1_2)
(defconstant JNI-VERSION-1-4 #$JNI_VERSION_1_4)
(defconstant JNI-OK #$JNI_OK)

(defun load-jni-lib (&optional (libpath *jni-lib-path*))
  (ccl:open-shared-library libpath))


(defun current-env ()
  "return a pointer to the current thread's JNIEnv, creating that environment
if necessary."
  (rlet ((pjnienv :address))
    (let* ((jvm (get-pvm)))
      (unless (eql jni-ok
                   (ff-call (pref jvm #>JavaVM.GetEnv)
                            :address jvm
                            :address pjnienv
                            :jint jni-version-1-4
                            :jint))
        (unless (eql jni-ok
                     (ff-call
                      (pref jvm #>JavaVM.AttachCurrentThread)
                      :address jvm
                      :address pjnienv
                      :address (ccl::%null-ptr)
                      :jint))
          (error "Can't attach thread to JVM ~s" jvm))))
    (let* ((result (pref pjnienv :address)))
      (ccl::%set-macptr-type result (load-time-value (ccl::foreign-type-ordinal (ccl::foreign-pointer-type-to (ccl::parse-foreign-type #>JNIEnv)))))
      result)))


;;; JNIEnv functions.

(defun process-jnienv-call-args (specs)
  (ccl::collect ((args))
    (do* ((specs specs (cddr specs)))
         ((null specs) (args))
      (let* ((type (car specs))
             (valform (cadr specs)))
        (args type)
        (case type
          (:jboolean (args `(jboolean-arg ,valform)))
          ((:jobject :jclass :jstring :jthrowable :jarray #>jbooleanArray
                     #>jbyteArray #>jcharArray #>jshortArray #>jintArray
                     #>jlongArray #>jfloatArray #>jdoubleArray #>jobjectArray)
           (args `(jobject-arg ,valform)))
          (t (args valform)))))))
  
(defmacro jnienv-call ((slot result-type) &rest specs)
  ;; We might want to special-case some result-types for finalization.
  (let* ((env (gensym))
         (accessor (ccl::escape-foreign-name (concatenate 'string "JNIEnv." slot)))
         (form
          `(let* ((,env (current-env)))
            (ff-call (pref ,env ,accessor) :address ,env ,@(process-jnienv-call-args specs) ,result-type))))
    (case result-type
      (:jboolean `(jboolean-result ,form))
      ((:jobject :jclass :jstring :jthrowable :jarray #>jbooleanArray
                 #>jbyteArray #>jcharArray #>jshortArray #>jintArray
                 #>jlongArray #>jfloatArray #>jdoubleArray #>jobjectArray)
       `(jobject-result ,form))
      (t form))))
                 

(defun get-version ()
  (jnienv-call ("GetVersion" :jint)))

(defun define-class (name loader buf len)
  (ccl::with-utf-8-cstrs ((cname name))
    (jnienv-call ("DefineClass" :jclass) 
                 :address cname
                 :jobject loader
                 (:* :jbyte) buf
                 :jsize len)))

(defun jni-find-class (name)
  (ccl::with-utf-8-cstrs ((cname name))
    (jnienv-call ("FindClass" :jclass) :address cname)))


(defun from-reflected-method (method)
  (jnienv-call ("FromReflectedMethod" #>jmethodID) :jobject method))

(defun from-reflected-field (field)
  (jnienv-call ("FromReflectedField" #>jfieldID) :jobject field))

(defun to-reflected-method (cls method-id is-static)
  (jnienv-call ("ToReflectedMethod" :jobject)
               :jclass cls
               #>jmethodID method-id
               :jboolean is-static))

(defun get-superclass (sub)
  (jnienv-call ("GetSuperclass" :jclass) :jclass sub))

(defun is-assignable-from (sub sup)
  
  (jnienv-call ("IsAssignableFrom" :jboolean) :jclass sub :jclass sup))

(defun to-reflected-field (cls field-id is-static)  
  (jnienv-call ("ToReflectedField" :jobject)
               :jclass cls
               #>jfieldID field-id
               :jboolean is-static))

(defun jni-throw (obj)
  (jnienv-call ("Throw" :jint) :jthrowable obj))

(defun throw-new (clazz msg)
  (ccl::with-utf-8-cstrs ((cmsg msg))
    (jnienv-call ("ThrowNew" :jint) :jclass clazz :address cmsg)))

(defun exception-occurred ()
  (jnienv-call ("ExceptionOccurred" :jthrowable)))

(defun exception-describe ()
  (jnienv-call ("ExceptionDescribe" :void)))

(defun exception-clear ()
  (jnienv-call ("ExceptionClear" :void)))

(defun fatal-error (msg)
  (ccl::with-utf-8-cstrs ((cmsg msg))
    (jnienv-call ("FatalError" :void) :address cmsg)))
  
(defun push-local-frame (capacity)
  (jnienv-call ("PushLocalFrame" :jint) :jint capacity))

(defun pop-local-frame (result)
  
  (jnienv-call ("PopLocalFrame" :jobject) :jobject result))

(defun new-global-ref (lobj)
  (jnienv-call ("NewGlobalRef" :jobject) :jobject lobj))

(defun delete-global-ref (gref)
  (jnienv-call ("DeleteGlobalRef" :void) :jobject gref))
  
(defun delete-local-ref (obj)
  (jnienv-call ("DeleteLocalRef" :void) :jobject obj))

(defun is-same-object (obj1 obj2)
  
  (jnienv-call ("IsSameObject" :jboolean) :jobject obj1 :jobject obj2))

(defun new-local-ref (ref)
  
  (jnienv-call ("NewLocalRef" :jobject) :jobject ref))

(defun ensure-local-capacity (capacity)
  (jnienv-call ("EnsureLocalCapacity" :jint) :jint capacity))

(defun alloc-object (clazz)
  (jnienv-call ("AllocObject" :jobject) :jclass clazz))

;;; We probably can't get very far with NewObject or NewObjectV, which
;;; depend on the underlying varargs mechanism.  NewObjectA is more
;;; tractable.

(defun new-object-a (clazz method-id args)
  
  (jnienv-call ("NewObjectA" :jobject) :jclass clazz #>jmethodID method-id (:* :jvalue) args))

(defun get-object-class (obj)
  (jnienv-call ("GetObjectClass" :jclass) :jobject obj))

(defun is-instance-of (obj clazz)
  
  (jnienv-call ("IsInstanceOf" :jboolean) :jobject obj :jclass clazz))

(defun get-method-id (clazz name sig)
  (ccl::with-utf-8-cstrs ((cname name)
                          (csig sig))
    (jnienv-call ("GetMethodID" #>jmethodID)
                 :jclass clazz :address cname :address csig)))

;;; Likewise for Call*Method and Call*MethodV vs Call*MethodA.

(defun call-object-method-a (obj method-id args)
  (jnienv-call ("CallObjectMethodA" :jobject)
               :jobject obj
               #>jmethodID method-id
               (:* :jvalue) args))

(defun call-boolean-method-a (obj method-id args)
  
  (jnienv-call ("CallBooleanMethodA" :jboolean)
               :jobject obj
               #>jmethodID method-id
               (:* :jvalue) args))

(defun call-byte-method-a (obj method-id args)
  (jnienv-call ("CallByteMethodA" :jbyte)
               :jobject obj
               #>jmethodID method-id
               (:* :jvalue) args))

(defun call-byte-method-a (obj method-id args)
  (jnienv-call ("CallCharMethodA" :jchar)
               :jobject obj
               #>jmethodID method-id
               (:* :jvalue) args))

(defun call-short-method-a (obj method-id args)
  (jnienv-call ("CallShortMethodA" :jshort)
               :jobject obj
               #>jmethodID method-id
               (:* :jvalue) args))

(defun call-int-method-a (obj method-id args)
  (jnienv-call ("CallIntMethodA" :jint)
               :jobject obj
               #>jmethodID method-id
               (:* :jvalue) args))

(defun call-long-method-a (obj method-id args)
  (jnienv-call ("CallLongMethodA" :jlong)
               :jobject obj
               #>jmethodID method-id
               (:* :jvalue) args))

(defun call-float-method-a (obj method-id args)
  (jnienv-call ("CallFloatMethodA" :jfloat)
               :jobject obj
               #>jmethodID method-id
               (:* :jvalue) args))

(defun call-double-method-a (obj method-id args)
  (jnienv-call ("CallDoubleMethodA" :jdouble)
               :jobject obj
               #>jmethodID method-id
               (:* :jvalue) args))

(defun call-void-method-a (obj method-id args)
  (jnienv-call ("CallVoidMethodA" :void)
               :jobject obj
               #>jmethodID method-id
               (:* :jvalue) args))

;;; Nonvirtual method calls.
(defun call-nonvirtual-object-method-a (obj method-id args)
  (jnienv-call ("CallNonvirtualObjectMethodA" :jobject)
               :jobject obj
               #>jmethodID method-id
               (:* :jvalue) args))

(defun call-nonvirtual-boolean-method-a (obj method-id args)
  
  (jnienv-call ("CallNonvirtualBooleanMethodA" :jboolean)
               :jobject obj
               #>jmethodID method-id
               (:* :jvalue) args))

(defun call-nonvirtual-byte-method-a (obj method-id args)
  (jnienv-call ("CallNonvirtualByteMethodA" :jbyte)
               :jobject obj
               #>jmethodID method-id
               (:* :jvalue) args))

(defun call-nonvirtual-char-method-a (obj method-id args)
  (jnienv-call ("CallNonvirtualCharMethodA" :jchar)
               :jobject obj
               #>jmethodID method-id
               (:* :jvalue) args))

(defun call-nonvirtual-short-method-a (obj method-id args)
  (jnienv-call ("CallNonvirtualShortMethodA" :jshort)
               :jobject obj
               #>jmethodID method-id
               (:* :jvalue) args))


(defun call-nonvirtual-int-method-a (obj method-id args)
  (jnienv-call ("CallNonvirtualIntMethodA" :jint)
               :jobject obj
               #>jmethodID method-id
               (:* :jvalue) args))

(defun call-nonvirtual-long-method-a (obj method-id args)
  (jnienv-call ("CallNonvirtualLongMethodA" :jlong)
               :jobject obj
               #>jmethodID method-id
               (:* :jvalue) args))

(defun call-nonvirtual-float-method-a (obj method-id args)
  (jnienv-call ("CallNonvirtualFloatMethodA" :jfloat)
               :jobject obj
               #>jmethodID method-id
               (:* :jvalue) args))

(defun call-nonvirtual-double-method-a (obj method-id args)
  (jnienv-call ("CallNonvirtualDoubleMethodA" :jdouble)
               :jobject obj
               #>jmethodID method-id
               (:* :jvalue) args))

(defun call-nonvirtual-void-method-a (obj method-id args)
  (jnienv-call ("CallNonvirtualVoidMethodA" :void)
               :jobject obj
               #>jmethodID method-id
               (:* :jvalue) args))

(defun get-field-id (clazz name sig)
  (ccl::with-utf-8-cstrs ((cname name)
                          (csig sig))
    (jnienv-call ("GetFieldID" #>jfieldID)
                 :jclass clazz
                 :address cname
                 :address csig)))

(defun get-object-field (obj field-id)
  
  (jnienv-call ("GetObjectField" :jobject)
               :jobject obj
               #>jfieldID field-id))

(defun get-boolean-field (obj field-id)
  
  (jnienv-call ("GetBooleanField" :jboolean)
               :jobject obj
               #>jfieldID field-id))

(defun get-byte-field (obj field-id)
  (jnienv-call ("GetByteField" :jbyte)
               :jobject obj
               #>jfieldID field-id))

(defun get-char-field (obj field-id)
  (jnienv-call ("GetCharField" :jchar)
               :jobject obj
               #>jfieldID field-id))

(defun get-short-field (obj field-id)
  (jnienv-call ("GetShortField" :jshort)
               :jobject obj
               #>jfieldID field-id))


(defun get-int-field (obj field-id)
  (jnienv-call ("GetIntField" :jint)
               :jobject obj
               #>jfieldID field-id))

(defun get-long-field (obj field-id)
  (jnienv-call ("GetLongField" :jlong)
               :jobject obj
               #>jfieldID field-id))

(defun get-float-field (obj field-id)
  (jnienv-call ("GetFloatField" :jfloat)
               :jobject obj
               #>jfieldID field-id))

(defun get-double-field (obj field-id)
  (jnienv-call ("GetDoubleField" :jdouble)
               :jobject obj
               #>jfieldID field-id))

(defun set-object-field (obj field-id val)
  (jnienv-call ("SetObjectField" :void)
               :jobject obj
               #>jfieldID field-id
               :jobject val))

(defun set-boolean-field (obj field-id val)
  (jnienv-call ("SetBooleanField" :void)
               :jobject obj
               #>jfieldID field-id
               :jboolean val))

(defun set-byte-field (obj field-id val)
  (jnienv-call ("SetByteField" :void)
               :jobject obj
               #>jfieldID field-id
               :jbyte val))

(defun set-char-field (obj field-id val)
  (jnienv-call ("SetCharField" :void)
               :jobject obj
               #>jfieldID field-id
               :jchar val))

(defun set-short-field (obj field-id val)
  (jnienv-call ("SetShortField" :void)
               :jobject obj
               #>jfieldID field-id
               :jshort val))

(defun set-int-field (obj field-id val)
  (jnienv-call ("SetIntField" :void)
               :jobject obj
               #>jfieldID field-id
               :jint val))

(defun set-long-field (obj field-id val)
  (jnienv-call ("SetLongField" :void)
               :jobject obj
               #>jfieldID field-id
               :jlong val))

(defun set-float-field (obj field-id val)
  (jnienv-call ("SetFloatField" :void)
               :jobject obj
               #>jfieldID field-id
               :jfloat val))

(defun set-double-field (obj field-id val)
  (jnienv-call ("SetDoubleField" :void)
               :jobject obj
               #>jfieldID field-id
               :jdouble val))

(defun get-static-method-id (clazz name sig)
  (ccl::with-utf-8-cstrs ((cname name)
                          (csig sig))
    (jnienv-call ("GetStaticMethodID" #>jmethodID)
                 :jclass clazz
                 :address cname
                 :address csig)))

(defun call-static-object-method-a (clazz method-id args)
  
  (jnienv-call ("CallStaticObjectMethodA" :jobject)
               :jclass clazz
               #>jmethodID method-id
               (:* :jvalue) args))

(defun call-static-boolean-method-a (clazz method-id args)
  
  (jnienv-call ("CallStaticBooleanMethodA" :jboolean)
               :jclass clazz
               #>jmethodID method-id
               (:* :jvalue) args))

(defun call-static-byte-method-a (clazz method-id args)
  (jnienv-call ("CallStaticByteMethodA" :jbyte)
               :jclass clazz
               #>jmethodID method-id
               (:* :jvalue) args))

(defun call-static-char-method-a (clazz method-id args)
  (jnienv-call ("CallStaticCharMethodA" :jchar)
               :jclass clazz
               #>jmethodID method-id
               (:* :jvalue) args))

(defun call-static-short-method-a (clazz method-id args)
  (jnienv-call ("CallStaticShortMethodA" :jshort)
               :jclass clazz
               #>jmethodID method-id
               (:* :jvalue) args))

(defun call-static-int-method-a (clazz method-id args)
  (jnienv-call ("CallStaticIntMethodA" :jint)
               :jclass clazz
               #>jmethodID method-id
               (:* :jvalue) args))

(defun call-static-long-method-a (clazz method-id args)
  (jnienv-call ("CallStaticLongMethodA" :jlong)
               :jclass clazz
               #>jmethodID method-id
               (:* :jvalue) args))

(defun call-static-float-method-a (clazz method-id args)
  (jnienv-call ("CallStaticFloatMethodA" :jfloat)
               :jclass clazz
               #>jmethodID method-id
               (:* :jvalue) args))

(defun call-static-double-method-a (clazz method-id args)
  (jnienv-call ("CallStaticDoubleMethodA" :jdouble)
               :jclass clazz
               #>jmethodID method-id
               (:* :jvalue) args))

(defun call-static-void-method-a (clazz method-id args)
  (jnienv-call ("CallStaticVoidMethodA" :void)
               :jclass clazz
               #>jmethodID method-id
               (:* :jvalue) args))

(defun get-static-field-id (clazz name sig)
  (ccl::with-utf-8-cstrs ((cname name)
                          (csig sig))
    (jnienv-call ("GetStaticFieldID" #>jfieldID)
                 :jclass clazz
                 :address cname
                 :address csig)))

(defun get-static-object-field (clazz field-id)
  (jnienv-call ("GetStaticObjectField" :jobject)
               :jclass clazz
               #>jfieldID field-id))

(defun get-static-boolean-field (clazz field-id)
  
  (jnienv-call ("GetStaticBooleanField" :jboolean)
               :jclass clazz
               #>jfieldID field-id))

(defun get-static-byte-field (clazz field-id)
  (jnienv-call ("GetStaticByteField" :jbyte)
               :jclass clazz
               #>jfieldID field-id))

(defun get-static-char-field (clazz field-id)
  (jnienv-call ("GetStaticCharField" :jchar)
               :jclass clazz
               #>jfieldID field-id))

(defun get-static-short-field (clazz field-id)
  (jnienv-call ("GetStaticShortField" :jshort)
               :jclass clazz
               #>jfieldID field-id))

(defun get-static-int-field (clazz field-id)
  (jnienv-call ("GetStaticIntField" :jint)
               :jclass clazz
               #>jfieldID field-id))

(defun get-static-long-field (clazz field-id)
  (jnienv-call ("GetStaticLongField" :jlong)
               :jclass clazz
               #>jfieldID field-id))

(defun get-static-float-field (clazz field-id)
  (jnienv-call ("GetStaticFloatField" :jfloat)
               :jclass clazz
               #>jfieldID field-id))

(defun get-static-double-field (clazz field-id)
  (jnienv-call ("GetStaticDoubleField" :jdouble)
               :jclass clazz
               #>jfieldID field-id))


(defun set-static-object-field (clazz field-id value)
  (jnienv-call ("SetStaticObjectField" :void)
               :jclass clazz
               #>jfieldID field-id
               :jobject value))

(defun set-static-boolean-field (clazz field-id value)
  (jnienv-call ("SetStaticBooleanField" :void)
               :jclass clazz
               #>jfieldID field-id
               :jboolean value))

(defun set-static-byte-field (clazz field-id value)
  (jnienv-call ("SetStaticByteField" :void)
               :jclass clazz
               #>jfieldID field-id
               :jbyte value))

(defun set-static-char-field (clazz field-id value)
  (jnienv-call ("SetStaticCharField" :void)
               :jclass clazz
               #>jfieldID field-id
               :jchar value))

(defun set-static-short-field (clazz field-id value)
  (jnienv-call ("SetStaticShortField" :void)
               :jclass clazz
               #>jfieldID field-id
               :jshort value))

(defun set-static-int-field (clazz field-id value)
  (jnienv-call ("SetStaticIntField" :void)
               :jclass clazz
               #>jfieldID field-id
               :jint value))

(defun set-static-long-field (clazz field-id value)
  (jnienv-call ("SetStaticLongField" :void)
               :jclass clazz
               #>jfieldID field-id
               :jlong value))

(defun set-static-float-field (clazz field-id value)
  (jnienv-call ("SetStaticFloatField" :void)
               :jclass clazz
               #>jfieldID field-id
               :jfloat value))

(defun set-static-double-field (clazz field-id value)
  (jnienv-call ("SetStaticDoubleField" :void)
               :jclass clazz
               #>jfieldID field-id
               :jdouble value))

(defun new-string (unicode len)
  (ccl::with-native-utf-16-cstrs ((cstring unicode))
    (jnienv-call ("NewString" :jstring)
                 (:* :jchar) cstring
                 :jsize len)))

(defun get-string-length (str)
  (jnienv-call ("GetStringLength" :jsize)
               :jstring str))

(defun get-string-chars (str is-copy)
  (jnienv-call ("GetStringChars" (:* :jchar))
               :jstring str
               (:* :jboolean) is-copy))

(defun release-string-chars (str chars)
  (jnienv-call ("ReleaseStringChars" :void)
               :jstring str
               (:* :jchar) chars))

(defun new-string-utf (string)
  (ccl::with-utf-8-cstrs ((cstring string))
    (jnienv-call ("NewStringUTF" :jstring)
                 :address cstring)))

(defun get-string-utf-chars (str)
  (rlet ((is-copy :jboolean))
    (let* ((chars (jnienv-call ("GetStringUTFChars" (:* :char))
                               :jstring str
                               (:* :jboolean) is-copy)))
      (values chars  (pref is-copy :jboolean)))))

(defun release-string-utf-chars (str chars)
  (jnienv-call ("ReleaseStringUTFChars" :void)
               :jstring str
               (:* :char) chars))

(defun get-array-length (array)
  (jnienv-call ("GetArrayLength" :jsize)
               :jArray array))

(defun new-object-array (len clazz init)
  (jnienv-call ("NewObjectArray" #>jobjectArray)
               :jsize len
               :jclass clazz
               :jobject init))

(defun get-object-array-element (array index)
  (jnienv-call ("GetObjectArrayElement" :jobject)
               #>jobjectArray array
               :jsize index))

(defun set-object-array-element (array index val)
  (jnienv-call ("SetObjectArrayElement" :void)
               #>jobjectArray array
               :jsize index
               :jobject val))

(defun new-boolean-array (len)
  (jnienv-call ("NewBooleanArray" #>jbooleanArray)
               :jsize len))

(defun new-byte-array (len)
  (jnienv-call ("NewByteArray" #>jbyteArray)
               :jsize len))

(defun new-char-array (len)
  (jnienv-call ("NewCharArray" #>jcharArray)
               :jsize len))

(defun new-short-array (len)
  (jnienv-call ("NewShortArray" #>jshortArray)
               :jsize len))

(defun new-int-array (len)
  (jnienv-call ("NewIntArray" #>jintArray)
               :jsize len))

(defun new-long-array (len)
  (jnienv-call ("NewLongArray" #>jlongArray)
               :jsize len))

(defun new-float-array (len)
  (jnienv-call ("NewFloatArray" #>jfloatArray)
               :jsize len))

(defun new-double-array (len)
  (jnienv-call ("NewDoubleArray" #>jdoubleArray)
               :jsize len))


(defun get-boolean-array-elements (array is-copy)
  (jnienv-call ("GetBooleanArrayElements" (:* :jboolean))
               #>jbooleanArray array
               (:* :jboolean) is-copy))

(defun get-byte-array-elements (array is-copy)
  (jnienv-call ("GetByteArrayElements" (:* :jbyte))
               #>jbyteArray array
               (:* :jboolean) is-copy))

(defun get-char-array-elements (array is-copy)
  (jnienv-call ("GetCharArrayElements" (:* :jchar))
               #>jcharArray array
               (:* :jboolean) is-copy))

(defun get-short-array-elements (array is-copy)
  (jnienv-call ("GetShortArrayElements" (:* :jshort))
               #>jshortArray array
               (:* :jboolean) is-copy))

(defun get-int-array-elements (array is-copy)
  (jnienv-call ("GetIntArrayElements" (:* :jint))
               #>jintArray array
               (:* :jboolean) is-copy))

(defun get-long-array-elements (array is-copy)
  (jnienv-call ("GetLongArrayElements" (:* :jlong))
               #>jlongArray array
               (:* :jboolean) is-copy))

(defun get-float-array-elements (array is-copy)
  (jnienv-call ("GetFloatArrayElements" (:* :jfloat))
               #>jfloatArray array
               (:* :jboolean) is-copy))

(defun get-double-array-elements (array is-copy)
  (jnienv-call ("GetDoubleArrayElements" (:* :jdouble))
               #>jdoubleArray array
               (:* :jboolean) is-copy))

(defun release-boolean-array-elements (array elems mode)
  (jnienv-call ("ReleaseBooleanArrayElements" :void)
               #>jbooleanArray array
               (:* jboolean) elems
               :jint mode))

(defun release-byte-array-elements (array elems mode)
  (jnienv-call ("ReleaseByteArrayElements" :void)
               #>jbyteArray array
               (:* jbyte) elems
               :jint mode))

(defun release-char-array-elements (array elems mode)
  (jnienv-call ("ReleaseCharArrayElements" :void)
               #>jcharArray array
               (:* jchar) elems
               :jint mode))

(defun release-short-array-elements (array elems mode)
  (jnienv-call ("ReleaseShortArrayElements" :void)
               #>jshortArray array
               (:* jshort) elems
               :jint mode))

(defun release-int-array-elements (array elems mode)
  (jnienv-call ("ReleaseIntArrayElements" :void)
               #>jintArray array
               (:* jint) elems
               :jint mode))

(defun release-long-array-elements (array elems mode)
  (jnienv-call ("ReleaseLongArrayElements" :void)
               #>jlongArray array
               (:* jlong) elems
               :jint mode))

(defun release-float-array-elements (array elems mode)
  (jnienv-call ("ReleaseFloatArrayElements" :void)
               #>jfloatArray array
               (:* jfloat) elems
               :jint mode))

(defun release-double-array-elements (array elems mode)
  (jnienv-call ("ReleaseDoubleArrayElements" :void)
               #>jdoubleArray array
               (:* jdouble) elems
               :jint mode))


(defun get-boolean-array-region (array start len buf)
  (jnienv-call ("GetBooleanArrayRegion" :void)
               #>jbooleanArray array
               :jsize start
               :jsize len
               (:* :jboolean) buf))

(defun get-byte-array-region (array start len buf)
  (jnienv-call ("GetByteArrayRegion" :void)
               #>jbyteArray array
               :jsize start
               :jsize len
               (:* :jbyte) buf))

(defun get-char-array-region (array start len buf)
  (jnienv-call ("GetCharArrayRegion" :void)
               #>jcharArray array
               :jsize start
               :jsize len
               (:* :jchar) buf))

(defun get-short-array-region (array start len buf)
  (jnienv-call ("GetShortArrayRegion" :void)
               #>jshortArray array
               :jsize start
               :jsize len
               (:* :jshort) buf))

(defun get-int-array-region (array start len buf)
  (jnienv-call ("GetIntArrayRegion" :void)
               #>jintArray array
               :jsize start
               :jsize len
               (:* :jint) buf))

(defun get-long-array-region (array start len buf)
  (jnienv-call ("GetLongArrayRegion" :void)
               #>jlongArray array
               :jsize start
               :jsize len
               (:* :jlong) buf))

(defun get-float-array-region (array start len buf)
  (jnienv-call ("GetFloatArrayRegion" :void)
               #>jfloatArray array
               :jsize start
               :jsize len
               (:* :jfloat) buf))

(defun get-double-array-region (array start len buf)
  (jnienv-call ("GetDoubleArrayRegion" :void)
               #>jdoubleArray array
               :jsize start
               :jsize len
               (:* :jdouble) buf))

(defun set-boolean-array-region (array start len buf)
  (jnienv-call ("SetBooleanArrayRegion" :void)
               #>jbooleanArray array
               :jsize start
               :jsize len
               (:* :jboolean) buf))

(defun set-byte-array-region (array start len buf)
  (jnienv-call ("SetByteArrayRegion" :void)
               #>jbyteArray array
               :jsize start
               :jsize len
               (:* :jbyte) buf))

(defun set-char-array-region (array start len buf)
  (jnienv-call ("SetCharArrayRegion" :void)
               #>jcharArray array
               :jsize start
               :jsize len
               (:* :jchar) buf))

(defun set-short-array-region (array start len buf)
  (jnienv-call ("SetShortArrayRegion" :void)
               #>jshortArray array
               :jsize start
               :jsize len
               (:* :jshort) buf))

(defun set-int-array-region (array start len buf)
  (jnienv-call ("SetIntArrayRegion" :void)
               #>jintArray array
               :jsize start
               :jsize len
               (:* :jint) buf))

(defun set-long-array-region (array start len buf)
  (jnienv-call ("SetLongArrayRegion" :void)
               #>jlongArray array
               :jsize start
               :jsize len
               (:* :jlong) buf))

(defun set-float-array-region (array start len buf)
  (jnienv-call ("SetFloatArrayRegion" :void)
               #>jfloatArray array
               :jsize start
               :jsize len
               (:* :jfloat) buf))

(defun set-double-array-region (array start len buf)
  (jnienv-call ("SetDoubleArrayRegion" :void)
               #>jdoubleArray array
               :jsize start
               :jsize len
               (:* :jdouble) buf))


(defun register-natives (clazz methods nmethods)
  (jnienv-call ("RegisterNatives":jint)
               :jclass clazz
               (:* #>JNINativeMethod) methods
               :jint nmethods))


(defun unregister-natives (clazz)
  (jnienv-call ("UnregisterNatives" :jint)
               :jclass clazz))

(defun monitor-enter (obj)
  (jnienv-call ("MonitorEnter" :jint)
               :jobject obj))

(defun monitor-exit (obj)
  (jnienv-call ("MonitorExit" :jint)
               :jobject obj))

(defun get-java-vm (vm)
  (jnienv-call ("GetJavaVM" :jint)
               (:* (:* #>JavaVM)) vm))

(defun get-string-region (str start len buf)
  (jnienv-call ("GetStringRegion" :void)
               :jstring str
               :jsize start
               :jsize len
               (:* :jchar) buf))

(defun get-string-utf-region (str start len buf)
  (jnienv-call ("GetStringUTFRegion" :void)
               :jstring str
               :jsize start
               :jsize len
               (:* :char) buf))

(defun get-primitive-array-critical (array is-copy)
  (jnienv-call ("GetPrimitiveArrayCritical" (:* :void))
               :jarray array
               (:* :jboolean) is-copy))

(defun release-primitive-array-critical(jarray carray mode)
  (jnienv-call ("ReleasePrimitiveArrayCritical" :void)
               :jarray jarray
               (:* :void) carray
               :jint mode))

(defun get-string-critical (string is-copy)
  (jnienv-call ("GetStringCritical" (:* :jchar))
               :jstring string
               (:* :jboolean) is-copy))

(defun release-string-critical (string cstring)
  (jnienv-call ("ReleaseStringCritical" :void)
               :jstring string
               (:* :jchar) cstring))

(defun new-weak-global-ref (obj)
  (jnienv-call ("NewWeakGlobalRef" :jweak)
               :jobject obj))

(defun delete-weak-global-ref (ref)
  (jnienv-call ("DeleteWeakGlobalRef" :void)
               :jweak ref))

(defun exception-check ()
  (jnienv-call ("ExceptionCheck" :jboolean)))
               

(defun new-direct-byte-buffer (address capacity)
  (jnienv-call ("NewDirectByteBuffer" :jobject)
               :address address
               :jlong capacity))

(defun get-direct-buffer-address (buf)
  (jnienv-call ("GetDirectBufferAddress" :address)
               :jobject buf))

(defun get-direct-buffer-capacity (buf)
  (jnienv-call ("GetDirectBufferCapacity" :jlong)
               :jobject buf))

;;; End of jnienv functions.  (Finally.)

(defun get-pvm ()
  (or *pvm*
      (error "JVM not loaded")))

#+later
(defun cleanup-jni-gref (gref)
  "set as a special free action to free java classes when no longer used by Lisp"
  (when (java-ref-p gref)
    (delete-global-ref gref)))

(defun create-jvm (&rest args)
  (declare (dynamic-extent args))
  "Creates the JVM, this can only be done once.
The option strings can be used to control the JVM, esp. the classpath:
\"-Djava.class.path=/Users/rich/Lisp/jfli.jar\""
  (when *pvm*
    (error "JVM already created, can only be started once"))
  (load-jni-lib)
  (ccl::call-with-string-vector
   (lambda (argv)
     (let* ((nargs (length args)))
       (rlet ((initargs :<J>ava<VMI>nit<A>rgs)
              (env (:* :<JNIE>nv))
              (vm (:* :<J>ava<VM>)))
         (%stack-block ((options (* nargs (ccl::record-length :<J>ava<VMO>ption))))
           (do* ((i 0 (1+ i))
                 (p options (%inc-ptr p (ccl::record-length :<J>ava<VMO>ption))))
                ((= i nargs))
             (setf (pref p :<J>ava<VMO>ption.option<S>tring)
                   (paref argv (:* (:* :char)) i)))
           (setf (pref initargs :<J>ava<VMI>nit<A>rgs.version) #$JNI_VERSION_1_4
                 (pref initargs :<J>ava<VMI>nit<A>rgs.n<O>ptions) nargs
                 (pref initargs :<J>ava<VMI>nit<A>rgs.options) options
                 (pref initargs :<J>ava<VMI>nit<A>rgs.ignore<U>nrecognized) #$JNI_TRUE)
           ;; In Darwin, JNI_CreateJavaVM will clobber the calling thread's
           ;; Mach exception ports, despite the fact that CCL is using them.
           ;; To work around this, call a function in the lisp kernel which
           ;; restores the thread's exception ports after calling
           ;; JNI_CreateJavaVM for us.
           (let* ((result
                   (ff-call #+darwin-target (ccl::%kernel-import target::kernel-import-jvm-init)
                            #+darwin-target :address
                            (foreign-symbol-address "JNI_CreateJavaVM")
                            :address vm
                            :address env
                            :address initargs
                            :int)))
             (if (>= result 0)
               (progn
                 (setq *pvm* (%get-ptr vm))
                 (values result (%get-ptr vm) (%get-ptr env)))
               (error "Can't create Java VM: result = ~d" result)))))))
   args
   :utf-8
   ))


;;;this is the FLI side of proxy support

(defvar *invocation-handler* nil
  "this will be set by jfli:enable-java-proxies to a function of 3 args")



;;;this will be set as the implementation of a native java function

(defcallback |LispInvocationHandler_invoke|
    (:address env :jobject obj :jobject proxy :jobject method :jobject args :jobject)
  (jobject-result obj)
  (jobject-result proxy)
  (jobject-result method)
  (jobject-result args)
  (jobject-arg 
   (do-invoke env obj proxy method args)))


(defun do-invoke (env obj proxy method args)
  (declare (ignore env))                ;it's not like we're on another thread
  (when *invocation-handler*
    (prog1
        (funcall *invocation-handler* proxy method args)
      ;;(jfli::invocation-handler proxy method args)
      (delete-local-ref obj))))

(defun try (result)
  (if (exception-check)
      (handle-exception)
    result))

;JNI will sometimes indicate theere is an exception via a return value
;so take advantage of that when possible vs. the call back to exception-check
(defun try-null (result)
  (if (or (null result) (ccl:%null-ptr-p result))
      (handle-exception)
    result))

(defun register-invocation-handler (invocation-handler)
  "sets up the Lisp handler and binds the native function - jfli.jar must be in the classpath"
  (setf *invocation-handler* invocation-handler)
  (rlet ((method #>JNINativeMethod))
    (let ((lih (try-null (jni-find-class "com/richhickey/jfli/LispInvocationHandler"))))
      (with-cstrs ((name "invoke")
                   (signature "(Ljava/lang/Object;Ljava/lang/reflect/Method;[Ljava/lang/Object;)Ljava/lang/Object;"))
        (setf (pref method #>JNINativeMethod.name) name
              (pref method #>JNINativeMethod.signature) signature
              (pref method #>JNINativeMethod.fnPtr) |LispInvocationHandler_invoke|)
      (register-natives lih method 1)))))


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;the code below provides for the generation of wrapper functions that use JNI to access
;methods and fields. This low-level interface is unsafe, in that JNI will not 
;check arg types etc on calls, and therefore should only be used to build safer high-level interfaces
;i.e. use jfli!
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;found on c.l.l
(eval-when (:compile-toplevel :load-toplevel :execute)
(defun replace-substrings (string substring replacement)
  (declare (optimize (speed 3))
           (type simple-string string substring replacement))
  (assert (> (length substring) 0) (substring)
    "Substring ~A must be of length ~D > 0"
    substring (length substring))
  (with-output-to-string (stream)
    (loop with substring-length = (length substring)
          for index = 0 then (+ match-index substring-length)
          for match-index = (search substring string :start2 index)
          do
          (write-string string stream :start index :end match-index)
          (when match-index
            (write-string replacement stream))
          while match-index)))


(defun local-ref-to-global-ref (lref)
  (when lref
    (let ((gref (new-global-ref lref)))
      #+laster
      (flag-special-free-action gref)
      (delete-local-ref lref)
      gref)))

(defun local-ref-to-string (lref)
  (prog1
      (convert-from-java-string lref)
    (delete-local-ref lref)))

(defun convert-to-java-string (s)
  (when s
    (try-null (new-string-utf (string s)))))

(defun convert-from-java-string (s)
  (when s
    (let ((chars (try-null (get-string-utf-chars s))))
      (prog1
          (ccl::%get-utf-8-cstring chars)
        (release-string-utf-chars s chars)))))

(defun jaref (array index)
  (try (get-object-array-element array index)))

(defun (setf jaref) (val array index)
  (try (set-object-array-element array index val)))

(defun convert-string-arg (s)
  "if s is stringp, make into java string, else presume it is a java string and return it"
  ;presumably faster than checking if s is a foreign pointer?
  (if (or (stringp s) (symbolp s))
      (convert-to-java-string s)
    s))

(defun process-arg (val type)
  (if (string-equal "java.lang.String" type)
    `(convert-string-arg ,val)
    `(or ,val ccl::+null-ptr+)))

(defmacro set-arg (args i val type)
  `(setf (pref (paref ,args (:* :jvalue) ,i)
          ,(jvalue-accessor-from-typename type))
    ,(process-arg val type)))

(defmacro with-arg-array (arg-array-name args &body body)
  (let ((i -1))
  `(%stack-block ((,arg-array-name (*  ,(length args) (ccl::record-length :jvalue))))
       ,@(mapcar #'(lambda (arg)
                     (list 'set-arg arg-array-name (incf i) (first arg) (second arg))) 
                 args)

       ,@body)))

(defun build-descriptor (params return-type)
  (string-append
   "("
   (apply #'string-append (mapcar #'(lambda (p)
                                      (type-descriptor-from-typename (second p)))
                                  params))
   ")"
   (type-descriptor-from-typename return-type)))

(defun get-class-and-method-id (class-name method-name descriptor is-static)
  (let ((class (local-ref-to-global-ref
                (try-null (jni-find-class class-name)))))
    (values class
            (if is-static
                (try-null (get-static-method-id class method-name descriptor))
              (try-null (get-method-id class method-name descriptor))))))


(defun get-class-and-field-id (class-name field-name descriptor is-static)
  (let ((class (local-ref-to-global-ref
                (try-null (jni-find-class class-name)))))
    (values class
            (if is-static
                (try-null (get-static-field-id class field-name descriptor))
              (try-null (get-field-id class field-name descriptor))))))

(defun is-name-of-primitive (s)
  (member s '("boolean" "byte" "char" "short" "int" "long" "float" "double" "void")
          :test #'string-equal))

(defun package-qualified-name (classname packagename)
  (cond
   ((is-name-of-primitive (subseq classname 0 (position #\< classname))) classname)
   ((find #\. classname) classname)     ;already qualified, presumably by another package
   (t (string-append packagename "." classname)))) 

(defun split-package-and-class (name)
    (let ((p (position #\. name :from-end t)))
      (unless p (error "must supply package-qualified classname"))
      (values (subseq name 0 p)
              (subseq name (1+ p)))))

(defun slot-from-typename (tn)
  (let ((prim (assoc tn
                     '(("boolean" . :z)
                       ("byte" . :b)
                       ("char" . :c)
                       ("short" . :s)
                       ("int" . :i)
                       ("long" . :j)
                       ("float" . :f)
                       ("double" . :d))
                     :test #'string-equal)))
    (if prim
        (rest prim)
      :l)))

(defun jvalue-accessor-from-typename (tn)
  (let ((prim (assoc tn
                     '(("boolean" . :jvalue.z)
                       ("byte" . :jvalue.b)
                       ("char" . :jvalue.c)
                       ("short" . :jvalue.s)
                       ("int" . :jvalue.i)
                       ("long" . :jvalue.j)
                       ("float" . :jvalue.f)
                       ("double" . :jvalue.d))
                     :test #'string-equal)))
    (if prim
        (rest prim)
      :jvalue.l)))

(defun name-component-from-typename (tn)
  (if (is-name-of-primitive tn)
      tn
    "object"))

(defun type-descriptor-from-typename (tn)
  (let ((prim (assoc tn
                     '(("boolean" . "Z")
                       ("byte" . "B")
                       ("char" . "C")
                       ("short" . "S")
                       ("int" . "I")
                       ("long" . "J")
                       ("float" . "F")
                       ("double" . "D")
                       ("void" . "V"))
                     :test #'string-equal)))
    (if prim
        (rest prim)
      (let ((array-depth (count #\< tn))
            (tn-with-slashes (replace-substrings tn "." "/")))
        (if (= 0 array-depth)
            (string-append "L" tn-with-slashes ";")
          (with-output-to-string (s)
            (dotimes (x array-depth)
              (write-string "[" s))
            (write-string (type-descriptor-from-typename
                           (subseq tn-with-slashes 0 (position #\< tn-with-slashes))) s)))))))

;not an exact reciprocal of type-descriptor-from-typename since reflection uses . not / as separator
(defun typename-from-reflection-type-descriptor (tn)
  (let ((prim (assoc tn
                     '(("Z" . "boolean")
                       ("B" . "byte")
                       ("C" . "char")
                       ("S" . "short")
                       ("I" . "int")
                       ("J" . "long")
                       ("F" . "float")
                       ("D" . "double")
                       ("V" . "void"))
                     :test #'string-equal)))
    (if prim
        (rest prim)
      (let ((array-depth (count #\[ tn)))
        (if (= 0 array-depth)
            (subseq tn 1 (1- (length tn))) ;strip leading L and trailing ;
          (with-output-to-string (s)
            (write-string (typename-from-reflection-type-descriptor (subseq tn array-depth)) s)
            (dotimes (x array-depth)
              (write-string "<>" s))))))))

(defun method-name-from-typename (tn static)
    (find-symbol (string-upcase (string-append "call-"
                                               (if static "static-" "")
                                             (name-component-from-typename tn)
                                             "-method-a")) :jni))

(defun field-get-name-from-typename (tn static)
    (find-symbol (string-upcase (string-append "get-"
                                               (if static "static-" "")
                                             (name-component-from-typename tn)
                                             "-field")) :jni))

(defun field-set-name-from-typename (tn static)
    (find-symbol (string-upcase (string-append "set-"
                                               (if static "static-" "")
                                             (name-component-from-typename tn)
                                             "-field")) :jni))
(defun process-return (return-type f &key raw-return)
  (cond
   ((or raw-return (is-name-of-primitive return-type)) f)
   ((string-equal "java.lang.String" return-type) `(local-ref-to-string ,f))
   (t `(local-ref-to-global-ref ,f))))

;JNI wrapper generators - will create functions in current package
;this needs more docs
(defmacro define-java-function (fname class-name return-type method-name params &key static raw-return)
  (let ((this (gensym))
        (class (gensym))
        (id (gensym))
        (args (gensym)))
    `(let (,class ,id)
       (defun ,fname ,(if static (mapcar #'first params)
                        (cons this (mapcar #'first params)))
         (when (null ,class)
           (multiple-value-setq (,class ,id)
               (get-class-and-method-id ,(replace-substrings class-name "." "/")
                                        ,method-name ,(build-descriptor params return-type) ,static)))
         (with-arg-array ,args ,(mapcar #'(lambda (param)
                                           (list (first param) (second param)))
                                       params)
           ,(process-return return-type
                            `(try (,(method-name-from-typename return-type static)
                                   ,(if static class this) ,id ,args))
                            :raw-return raw-return))))))

(defmacro define-java-field (getname class-name field-type field-name &key static)
  (let ((this (gensym))
        (class (gensym))
        (id (gensym))
        (val (gensym)))
    `(let (,class ,id)
       (flet ((load-ids ()
                (when (null ,class)
                  (multiple-value-setq (,class ,id)
                      (get-class-and-field-id ,(replace-substrings class-name "." "/")
                                              ,field-name ,(type-descriptor-from-typename field-type)
                                              ,static)))))
         (defun ,getname ,(if static () (list this))
           (load-ids)
           ,(process-return field-type
                            `(try (,(field-get-name-from-typename field-type static)
                                   ,(if static class this) ,id))))
         (defun (setf ,getname) ,(if static (list val) (list this val))
           (load-ids)
           (try (,(field-set-name-from-typename field-type static)
                 ,(if static class this) ,id ,(process-arg val field-type)))
           ,val)))))

(defmacro define-java-constructor (fname class-name params)
  (let ((class (gensym))
        (id (gensym))
        (args (gensym)))
    `(let (,class ,id)
       (defun ,fname ,(mapcar #'first params)
         (when (null ,class)
           (multiple-value-setq (,class ,id)
               (get-class-and-method-id ,(replace-substrings class-name "." "/")
                                        "<init>" ,(build-descriptor params "void") nil)))
         (with-arg-array ,args ,(mapcar #'(lambda (param)
                                           (list (first param) (second param)))
                                       params)
           (local-ref-to-global-ref (try-null (new-object-a ,class ,id ,args))))))))

(defun make-func-name (class method params append-param-types)
  ;probably a format one-liner that can do this
    (let ((base (string-append class "." method)))
      (if append-param-types
          (string-append base
                         (let ((param-types (mapcar #'second params)))
                           (if param-types
                               (string-append "<"
                                              (reduce #'(lambda (x y)
                                                          (string-append x "-" y)) param-types)
                                              ">")
                             "<>")))
        base)))

;these just do some name twiddling before calling define-java-xxx above
(defmacro def-jni-function (package-and-class method params return-typename
                                               &key static overloaded raw-return)
  (multiple-value-bind (package class) (split-package-and-class package-and-class)
    (let* ((fname (make-func-name class method params overloaded))
           (fsym (read-from-string fname)))
      `(locally ,(list 'define-java-function
                     fsym
                     package-and-class
                     (package-qualified-name return-typename package)
                     method
                     (mapcar #'(lambda (p)
                                 (list (first p) (package-qualified-name (second p) package)))
                             params)
                     :static static :raw-return raw-return)))))

(defmacro def-jni-functions (package-and-class &rest decls)
  `(locally ,@(mapcar #'(lambda (decl)
                          (list* 'def-jni-function package-and-class decl))
                      decls)))

(defmacro def-jni-constructor (package-and-class params &key overloaded)
  (multiple-value-bind (package class) (split-package-and-class package-and-class)
    (let* ((fname (make-func-name class "new" params overloaded))
           (fsym (read-from-string fname)))
      `(locally ,(list 'define-java-constructor
                     fsym 
                     package-and-class 
                     (mapcar #'(lambda (p)
                                 (list (first p) (package-qualified-name (second p) package)))
                             params))))))

(defmacro def-jni-field (package-and-class field typename &key static)
  (multiple-value-bind (package class) (split-package-and-class package-and-class)
    (let ((getsym (read-from-string (string-append class "." field
                                                   (if static "-accessor" ""))))
          (macsym (read-from-string (string-append class "." field))))
      `(locally 
         ,(list 'define-java-field getsym package-and-class
                (package-qualified-name typename package) field :static static)
         ,(when static
            `(define-symbol-macro ,macsym (,getsym)))))))

;we're going to use a little Java to do exception handling below
(def-jni-function "java.lang.Object"
                   "toString" () "String")

(def-jni-function "java.lang.reflect.InvocationTargetException"
                  "getTargetException" () "java.lang.Throwable")

(def-jni-functions "java.lang.Throwable"
                   ("getMessage" () "String")
                   ("getStackTrace" () "StackTraceElement<>"))

(defmacro do-jarray ((x array) &body body)
  (let ((gcount (gensym))
        (gi (gensym))
        (garray (gensym)))
    `(let* ((,garray ,array)
            (,gcount (get-array-length ,garray)))
       (dotimes (,gi ,gcount)
         (let ((,x (jaref ,garray ,gi)))
           ,@body)))))

#||
It is critical that if you call a JNI function that might throw an exception that you clear it,
otherwise the next Java call you make will cause a crash
||#

(defun handle-exception ()
  (let ((e (exception-occurred)))
    (when (not (ccl:%null-ptr-p e)) ;allow for safe calling in non-exceptional state
      (exception-clear)
      ;if the exception occurs in the reflection target, we really want that
      (when (is-instance-of e (jni-find-class "java/lang/reflect/InvocationTargetException"))
        (setf e (invocationtargetexception.gettargetexception e)))
      (error "~A" (with-output-to-string (s)
                    (format s "~A~%" (object.tostring e))
                    (do-jarray (x (throwable.getstacktrace e))
                      (format s "~A~%" (object.tostring x))))))))





(defun try-neg (result)
  (if (minusp result)
      (handle-exception)
    result))


)


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3
;;;; END FILE ./reference/ccl/library/jni.lisp
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4n









;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4n









;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4n









;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4n











\;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1
;;;; BEGIN FILE ./reference/ccl/library/cover.lisp
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2
;;;-*-Mode: LISP; Package: CCL -*-
;;;
;;; Copyright 2008-2009 Clozure Associates
;;;
;;; Licensed under the Apache License, Version 2.0 (the "License");
;;; you may not use this file except in compliance with the License.
;;; You may obtain a copy of the License at
;;;
;;;     http://www.apache.org/licenses/LICENSE-2.0
;;;
;;; Unless required by applicable law or agreed to in writing, software
;;; distributed under the License is distributed on an "AS IS" BASIS,
;;; WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
;;; See the License for the specific language governing permissions and
;;; limitations under the License.

;;; Code coverage reporting facility, originally inspired by SBCL's sb-cover API.

(in-package :ccl)

(eval-when (eval load compile)
  (export '(*compile-code-coverage*
            report-coverage
            reset-coverage
            clear-coverage
            save-coverage-in-file
            restore-coverage-from-file
            
            save-coverage  ;; stupid name, here for backward compatibility
            get-coverage
            restore-coverage
            combine-coverage
            read-coverage-from-file
            write-coverage-to-file
            
            reset-incremental-coverage
            get-incremental-coverage
            incremental-coverage-source-matches
            incremental-coverage-svn-matches
            
            coverage-statistics
            coverage-source-file
            coverage-expressions-total
            coverage-expressions-entered
            coverage-expressions-covered
            coverage-unreached-branches
            coverage-code-forms-total
            coverage-code-forms-covered
            coverage-functions-total
            coverage-functions-fully-covered
            coverage-functions-partly-covered
            coverage-functions-not-entered
            
            without-compiling-code-coverage)))

(defconstant $no-style 0)
(defconstant $not-executed-style 1)
(defconstant $totally-covered-style 2)
(defconstant $partially-covered-style 3)

;; These global values are for use in debugging only.  Exported functions always shadow these with thread-local tables.
(defparameter *file-coverage* ())
(defparameter *coverage-tags* nil)
(defparameter *code-note-tags* nil)
(defparameter *coverage-frame-name* "FF0")

(defparameter *code-note-subnotes* (make-hash-table :test #'eq))
(defparameter *code-note-function* (make-hash-table :test #'eq))
(defparameter *entry-note-function* (make-hash-table :test #'eq))
(defparameter *code-note-index* (make-hash-table :test #'eq))
(defparameter *emitted-code-notes* (make-array 10 :adjustable t :fill-pointer 0))

(defparameter *source-note-index* (make-hash-table :test #'eq))
(defparameter *source-code-notes* (make-hash-table :test #'eq))
(defparameter *covered-source-notes* (make-array 10 :adjustable t :fill-pointer 0))


(defmacro with-coverage-decoding ((&key tags (precompute t)) &body body)
  ;; Set up thread-local environment, and decode tags, since those aren't file-specific
  `(let* ((*coverage-tags* nil)
          (*code-note-tags* nil)
          (*file-coverage* nil)
          (*coverage-frame-name* (format nil "FF~x" (random most-positive-fixnum)))
          (*code-note-subnotes* (make-hash-table :test #'eq :shared nil))
          (*code-note-function* (make-hash-table :test #'eq :shared nil))
          (*entry-note-function* (make-hash-table :test #'eq :shared nil))
          (*code-note-index* ,(when precompute `(make-hash-table :test #'eq :shared nil)))
          (*emitted-code-notes* ,(when precompute `(make-array 100 :adjustable t :fill-pointer 0)))
          (*source-note-index* ,(when precompute `(make-hash-table :test #'eq :shared nil)))
          (*source-code-notes* ,(when precompute `(make-hash-table :test #'eq :shared nil)))
          (*covered-source-notes* ,(when precompute `(make-array 100 :adjustable t :fill-pointer 0))))
     ,@(when tags `((decode-coverage-tags ,tags)))
     ,@body))


(defmacro with-decoded-file-coverage ((coveragevar data &key) &body body)
  `(progn
     ;; Wonder if it'd be faster to make new tables instead of clrhash...
     (clrhash *code-note-subnotes*)
     (clrhash *code-note-function*)
     (clrhash *entry-note-function*)
     (when *code-note-index* (clrhash *code-note-index*))
     (when *emitted-code-notes* (setf (fill-pointer *emitted-code-notes*) 0))
     (when *source-note-index* (clrhash *source-note-index*))
     (when *covered-source-notes* (setf (fill-pointer *covered-source-notes*) 0))
     (when *source-code-notes* (clrhash *source-code-notes*))
     (let ((,coveragevar (decode-file-coverage ,data)))
       (push ,coveragevar *file-coverage*)
       ,@body)))


(defstruct (coverage-state (:conc-name "%COVERAGE-STATE-"))
  alist)

(defstruct incremental-coverage
  list)

;; Wrapper in case we ever want to do dwim on raw alists
(defun coverage-state-alist (coverage)
  (etypecase coverage
    (coverage-state (%coverage-state-alist coverage))))


(defstruct (ccl:coverage-statistics (:conc-name "COVERAGE-"))
  source-file
  expressions-total
  expressions-entered
  expressions-covered
  unreached-branches
  code-forms-total
  code-forms-covered
  functions-total
  functions-fully-covered
  functions-partly-covered
  functions-not-entered)


(defun file-coverage-file (entry)
  (car entry))

(defun file-coverage-functions (entry)
  (cadr entry))

(defun file-coverage-toplevel-functions (entry)
  (caddr entry))

(defun file-coverage-statistics (entry)
  (cdddr entry))

(defun file-coverage-index (entry)
  (position entry *file-coverage*))

(defun code-note-subnotes (note) ;; reversed parent chain
  (gethash note *code-note-subnotes*))

(defun emitted-code-note-p (note)
  (gethash note *code-note-function*))

(defun code-note-function (note)
  (gethash note *code-note-function*))

(defun entry-code-note-p (note)
  (gethash note *entry-note-function*))

(defun code-note-index (code-note)
  (gethash code-note *code-note-index*))

(defun code-note-tags (code-note)
  (gethash code-note *code-note-tags*))

(defun source-code-notes (source-note)
  (gethash source-note *source-code-notes*))

(defun source-note-index (source-note)
  (gethash source-note *source-note-index*))

(defun source-coverage (source)
  (loop with entered = nil and covered = t
        for note in  (source-code-notes source)
        do (case (code-note-code-coverage note)
             ((nil) (setq covered nil))
             ((full) (setq entered t))
             (t (setq entered t covered nil)))
        finally (return (and entered (if covered 'full t)))))

(defun map-function-coverage (lfun fn &optional refs)
  (let ((refs (cons lfun refs))
        (source (function-outermost-entry-source lfun)))
    (declare (dynamic-extent refs))
    (lfunloop for imm in lfun
              when (code-note-p imm)
              do (funcall fn imm)
              when (and (functionp imm)
                        (not (memq imm refs))
                        ;; Make sure this fn is in the source we're currently looking at.
                        ;; It might not be, if it is referenced via (load-time-value (foo))
                        ;; where (foo) returns an lfun from some different source entirely.
                        ;; CL-PPCRE does that.
                        (or (null source) (eq source (function-outermost-entry-source imm))))
              do (map-function-coverage imm fn refs))))

(defun collect-coverage-subfunctions (lfun refs)
  (let ((refs (cons lfun refs))
        (source (function-outermost-entry-source lfun)))
    (declare (dynamic-extent refs))
    (assert source) ;; all source-less functions have been eliminated.
    (nconc
     (and (function-entry-code-note lfun) (list lfun))
     (lfunloop for imm in lfun
               when (and (functionp imm)
                         (not (memq imm refs))
                         (eq source (function-outermost-entry-source imm)))
               nconc (collect-coverage-subfunctions imm refs)))))

(defun code-covered-info.file (data) (and (consp data) (car data)))
(defun code-covered-info.fns (data) (and (consp data) (if (consp (cdr data)) (cadr data) (cdr data))))
(defun code-covered-info.ef (data) (and (consp data) (consp (cdr data)) (caddr data)))
(defun code-covered-info.id (data) (and (consp data) (consp (cdr data)) (cadddr data)))

(defun code-covered-info-with-fns (data new-fns)
  (assert (consp data))
  (if (consp (cdr data))
    (let ((new (copy-list data)))
      (setf (cadr new) new-fns)
      new)
    (cons (car data) new-fns)))


(defun decode-file-coverage (data &key (precompute t))
  (let ((file (code-covered-info.file data)))
    (when file
      (let* ((file-name (pathname-name file))
             (file-type (pathname-type file))
             (toplevel-functions (loop for fn across (code-covered-info.fns data)
                                       nconc (iterate flatten ((fn fn))
                                               (let* ((entry (function-entry-code-note fn))
                                                      (source (and entry (nearest-source-note entry))))
                                                 (if source
                                                   (let ((source-file (source-note-filename source)))
                                                     ;; ignore fns from other files, as could happen through '#.(fun).
                                                     ;; Unfortunately, can't do this reliably since source-note-filename can involve
                                                     ;; a logical host not defined in this image, use a heuristic.
                                                     (when (and (equalp (pathname-name source-file) file-name)
                                                                (equalp (pathname-type source-file) file-type))
                                                       (list fn)))
                                                   ;; A top level function without source must be a compiler-generated toplevel
                                                   ;; form, ignore it and treat its subfunctions as top level.
                                                   (lfunloop for imm in fn
                                                     when (functionp imm) nconc (flatten imm)))))))
             (all-functions (delete-duplicates
                             ;; Duplicates are possible if you have multiple instances of
                             ;; (load-time-value (foo)) where (foo) returns an lfun.
                             ;; CL-PPCRE does that.
                             (loop for fn in toplevel-functions
                                   nconc (collect-coverage-subfunctions fn nil))))
             (coverage (list* file
                              all-functions
                              toplevel-functions
                              (make-coverage-statistics :source-file file))))
        ;; record emitted notes
        (loop for fn in all-functions as entry = (function-entry-code-note fn)
              do (assert (eq fn (gethash entry *entry-note-function* fn)))
              do (setf (gethash entry *entry-note-function*) fn)
              do (lfunloop for imm in fn
                   when (code-note-p imm)
                   do (setf (gethash imm *code-note-function*) fn)))
        ;; Now get the emitted subnotes of any note (including emitted subnotes of unemitted notes)
        (loop for note being the hash-key of *code-note-function*
              do (loop for n = note then parent as parent = (code-note-parent-note n)
                       do (push note (gethash parent *code-note-subnotes*));; parent = nil collects toplevel notes
                       while (and parent (not (gethash parent *code-note-function*)))))
        ;; Now get source mapping
        (when precompute
          (precompute-source-coverage coverage)
          ;; bit of overkill, but we end up always wanting them.
          (compute-file-coverage-statistics coverage))
        coverage))))

#+debug
(defun show-notes (note)
  (when (functionp note)
    (setq note (function-entry-code-note note)))
  (labels ((show (note indent label)
             (dotimes (i indent) (write-char #\space))
             (format t "~a ~a" label note)
             (unless (emitted-code-note-p note)
               (format t " [Not Emitted]"))
             (when (entry-code-note-p note)
               (format t " (Entry to ~s)" (entry-code-note-p note)))
             (when (code-note-acode-range note)
               (multiple-value-bind (s e) (decode-file-range (code-note-acode-range note))
                 (format t " [acode ~a:~a]" s e)))
             (format t "~%")
             (when (code-note-p note)
               (loop with subindent = (+ indent 3)
                     for sub in (code-note-subnotes note) as i upfrom 1
                     do (show sub subindent (format nil "~a~d." label i))))))
    (show note 0 "")))

(defun assoc-by-filename (path alist)
  (let* ((true-path (probe-file path)))
    (find-if #'(lambda (data)
                 (or (equalp (car data) path)
                     (and true-path (equalp (probe-file (car data)) true-path))))
             alist)))

(defun ccl:clear-coverage ()
  "Clear all files from the coverage database. The files will be re-entered
into the database when the FASL files (produced by compiling with
CCL:*COMPILE-CODE-COVERAGE* set to true) are loaded again into the
image."
  (setq *code-covered-functions* nil))

(defun reset-function-coverage (lfun)
  (map-function-coverage lfun #'(lambda (note)
                                  (setf (code-note-code-coverage note) nil))))

(defun reset-function-incremental-coverage (lfun)
  (map-function-coverage lfun #'(lambda (note)
                                  (when (code-note-code-coverage note)
                                    (setf (code-note-code-coverage note) :prior)))))

(defun ccl:reset-coverage ()
  "Reset all coverage data back to the `Not executed` state."
  (loop for data in *code-covered-functions*
        do (typecase data
             (cons
                (loop for fn across (code-covered-info.fns data)
                      do (reset-function-coverage fn)))
             (function (reset-function-coverage data)))))


(defun ccl:reset-incremental-coverage ()
  "Mark a starting point for recording incremental coverage.
   Has no effect on regular coverage recording."
  (loop for data in *code-covered-functions*
        do (typecase data
             (cons
                (loop for fn across (code-covered-info.fns data)
                      do (reset-function-incremental-coverage fn)))
             (function (reset-function-incremental-coverage data)))))


;; Name used for consistency checking across file save/restore
(defun function-covered-name (fn)
  (let ((name (function-name fn)))
    (and (symbolp name)
         (symbol-package name)
         name)))
  

(defun coverage-mismatch (why &rest args)
  ;; Throw to somebody who knows what file we're working on.
  (throw 'coverage-mismatch (cons why args)))

(defmacro with-coverage-mismatch-catch ((saved-file) &body body)
  `(let ((file ,saved-file))
     (with-simple-restart (ignore-file "Ignore ~s and continue" file)
       (let ((err (catch 'coverage-mismatch 
                    ,@body
                    nil)))
         (when err
           (error "Mismatched coverage data for ~s, ~?" file (car err) (cdr err)))))))


;; (name . #(i1 i2 ...)) where in is either an index or (index . subfncoverage).
(defun save-function-coverage (fn &optional (refs ()))
  (let ((refs (cons fn refs))
        (source (function-outermost-entry-source fn)))
    (declare (dynamic-extent refs))
    (cons (function-covered-name fn)
          ;; See comments in map-function-coverage
          (lfunloop for imm in fn as i upfrom 0
                    when (and (code-note-p imm)
                              (code-note-code-coverage imm))
                    collect i into list
                    when (and (functionp imm)
                              (not (memq imm refs))
                              (or (null source) (eq source (function-outermost-entry-source imm))))
                    collect (cons i (save-function-coverage imm refs)) into list
                    finally (return (and list (coerce list 'vector)))))))

(defun copy-function-coverage (fn-data)
  (cons (car fn-data)
        (and (cdr fn-data)
             (map 'vector #'(lambda (imm-data)
                              (if (consp imm-data)
                                (cons (car imm-data)
                                      (copy-function-coverage (cdr imm-data)))
                                imm-data))
                  (cdr fn-data)))))

(defun restore-function-coverage (fn saved-fn-data &optional (refs ()))
  (let* ((refs (cons fn refs))
         (source (function-outermost-entry-source fn))
         (saved-name (car saved-fn-data))
         (saved-imms (cdr saved-fn-data))
         (nimms (length saved-imms))
         (n 0))
    (declare (dynamic-extent refs))
    (unless (equalp saved-name (function-covered-name fn))
      (coverage-mismatch "had function ~s now have ~s" saved-name fn))
    ;; See comments in map-function-coverage
    (lfunloop for imm in fn as i upfrom 0
              when (code-note-p imm)
              do (let* ((next (and (< n nimms) (aref saved-imms n))))
                   (when (if (consp next) (<= (car next) i) (and next (< next i)))
                     (coverage-mismatch "in ~s" fn))
                   (when (setf (code-note-code-coverage imm)
                               (and (eql next i) 'restored))
                     (incf n)))
              when (and (functionp imm)
                        (not (memq imm refs))
                        (or (null source) (eq source (function-outermost-entry-source imm))))
              do (let* ((next (and (< n nimms) (aref saved-imms n))))
                   (unless (and (consp next) (eql (car next) i))
                     (coverage-mismatch "in ~s" fn))
                   (restore-function-coverage imm (cdr next) refs)
                   (incf n)))))


(defun add-function-coverage (fn-data new-fn-data)
  (let* ((fn-name (car fn-data))
         (imms (cdr fn-data))
         (new-fn-name (car new-fn-data))
         (new-imms (cdr new-fn-data)))
    (flet ((kar (x) (if (consp x) (%car x) x)))
      (declare (inline kar))
      (unless (equalp fn-name new-fn-name)
        (coverage-mismatch "function ~s vs. ~s" fn-name new-fn-name))
      (when new-imms
        (loop for new across new-imms
              as old = (find (kar new) imms :key #'kar)
              if (and (null old) (fixnump new))
                collect new into extras
              else do (unless (eql old new)
                        (if (and (consp new) (consp old))
                          (add-function-coverage (cdr old) (cdr new))
                          (coverage-mismatch "in function ~s" fn-name)))
              finally (when extras
                        (setf (cdr fn-data)
                              (sort (concatenate 'vector imms extras) #'< :key #'kar))))))
    fn-data))


(defun ccl:get-coverage ()
  "Returns a snapshot of the current coverage state"
  (make-coverage-state
   :alist (loop for data in *code-covered-functions*
                when (consp data)
                  collect (code-covered-info-with-fns
                               data (map 'vector #'save-function-coverage (code-covered-info.fns data))))))

;; Backward compatibility with sbcl name.
(setf (symbol-function 'ccl:save-coverage) #'ccl:get-coverage)

(defun ccl:combine-coverage (coverage-states)
  (let ((result nil))
    (map nil
         (lambda (coverage-state)
           (loop for saved-data in (coverage-state-alist coverage-state)
                 as saved-file = (code-covered-info.file saved-data)
                 as saved-fns = (code-covered-info.fns saved-data)
                 as result-data = (assoc-by-filename saved-file result)
                 as result-fns = (code-covered-info.fns result-data)
                 do (with-coverage-mismatch-catch (saved-file)
                      (cond ((null result-fns)
                             (push (code-covered-info-with-fns
                                    saved-data (map 'vector #'copy-function-coverage saved-fns))
                                   result))
                            ((not (eql (length result-fns) (length saved-fns)))
                             (coverage-mismatch "different function counts"))
                            (t
                             (unless (equal (code-covered-info.id saved-data)
                                            (code-covered-info.id result-data))
                               (cerror "Ignore the mismatch"
                                       "Combining different versions of file ~s (checksum mismatch)"
                                       saved-file))
                             (loop for result-fn across result-fns
                                   for saved-fn across saved-fns
                                   do (add-function-coverage result-fn saved-fn)))))))
         coverage-states)
    (make-coverage-state :alist (nreverse result))))


(defun ccl:restore-coverage (coverage-state)
  "Restore the code coverage data back to an earlier state produced by SAVE-COVERAGE."
  (loop for saved-data in (coverage-state-alist coverage-state)
        for saved-file = (code-covered-info.file saved-data)
        as saved-fns = (code-covered-info.fns saved-data)
        for current-data = (assoc-by-filename saved-file *code-covered-functions*)
        as fns = (and current-data (code-covered-info.fns current-data))
        do (with-coverage-mismatch-catch (saved-file)
             (cond ((null fns)
                    (warn "Couldn't restore saved coverage for ~s, no matching file present"
                          saved-file))
                   ((not (eql (length fns) (length saved-fns)))
                    (coverage-mismatch "had ~s functions, now have ~s"
                                       (length saved-fns) (length fns)))
                   (t 
                    (unless (equal (code-covered-info.id saved-data)
                                   (code-covered-info.id current-data))
                      (cerror "Ignore the mismatch"
                              "Restoring different version of file ~s (checksum mismatch)"
                              saved-file))
                    (map nil #'restore-function-coverage fns saved-fns))))))

(defun ccl:get-incremental-coverage (&key (reset t))
  "Return the delta coverage since the last reset of incremental coverage.
  If RESET is true (the default), it also resets incremental coverage now."
  ;; An incremental coverage snapshot is just a list of covered (i.e. entered) code notes.
  ;; It is not savable in a file.
  (let ((covered nil))
    (flet ((get-fn (note)
             (let ((coverage (code-note-code-coverage note)))
               (when (and coverage (not (eq coverage :prior)))
                 (when reset (setf (code-note-code-coverage note) :prior))
                 (push note covered)))))
      (loop for data in *code-covered-functions*
            when (consp data)
              do (loop for fn across (code-covered-info.fns data)
                       do (map-function-coverage fn #'get-fn)))
      (make-incremental-coverage :list covered))))

(defun decode-coverage-tags (tags)
  (when tags
    (let ((note->tags (make-hash-table :test #'eq :shared nil)))
      (flet ((register (i delta)
               (loop for note in (incremental-coverage-list delta) do (push i (gethash note note->tags)))))
        (etypecase tags
          (hash-table
           (let* ((count (hash-table-count tags))
                  (tags-vector (make-array count)))
             (enumerate-hash-keys-and-values tags tags-vector nil)
             (loop for i from 0 below count
                   do (register i (gethash (aref tags-vector i) tags)))
             (setq *coverage-tags* tags-vector)))
        (list
         (loop for i upfrom 0 as delta in tags do (register i delta)
               finally (setq *coverage-tags* i)))
        (vector
         (loop for i from 0 below (length tags) do (register i (aref tags i))
               finally (setq *coverage-tags* i)))))
      (setq *code-note-tags* note->tags))))


(defun ccl:incremental-coverage-svn-matches (collection &key (directory (current-directory)) (revision :base))
  "Given a hash table COLLECTION whose values are incremental coverage deltas, return a list
  of all keys corresponding to those deltas that intersect any region in a file in DIRECTORY that
  has changed since revision REVISION in subversion."
  (incremental-coverage-source-matches collection (get-svn-changes :directory directory
                                                                   :revision revision
                                                                   :reverse t)))

(defun ccl:incremental-coverage-source-matches (collection sources)
  "Given a hash table COLLECTION whose values are incremental coverage delta, return a list
  of all keys corresponding to deltas that intersect any region in SOURCES.  SOURCES
  should be a list of source notes and/or pathnames"
  (let ((alist ()))
    (loop for source in sources
          as file = (source-note-filename source)
          ;; Typically source notes will have eq filenames since created all at once, so the
          ;; assq will find it after the first time.
          as cell = (or (assq file alist)
                        (assoc-by-filename file alist)
                        (let* ((data (or (assoc-by-filename file *code-covered-functions*)
                                         (error "There is no coverage info for ~s" file)))
                               (cell (list* file data nil)))
                          (push cell alist)
                          cell))
          do (push source (cddr cell)))
    (with-coverage-decoding (:precompute nil)
      (loop for (nil data . sources) in alist
            do (with-decoded-file-coverage (coverage data)
                 (loop for sn in sources
                       as matches = (code-notes-for-region coverage (source-note-start-pos sn) (source-note-end-pos sn))
                       nconc (flet ((matches (delta)
                                      (loop for note in (incremental-coverage-list delta) thereis (memq note matches))))
                               (typecase collection
                                 (hash-table (loop for key being the hash-key of collection using (hash-value delta)
                                                   when (matches delta) collect key))
                                 (sequence (coerce (remove-if-not #'matches collection) 'list))))))))))




(defun nearest-source-note (note)
  (loop for n = note then (code-note-parent-note n)
        thereis (and n (code-note-source-note n))))

(defun code-note-emitted-parent (note)
  (loop while (setq note (code-note-parent-note note))
        when (emitted-code-note-p note) return note))

;; Given a region of a file, find a set of code notes that completely covers it, i.e.
;; a set such that if none of the code notes in the set have been executed, then it's guaranteed
;; that modifying the region is not going to affect execution.  Try to make that set as small
;; as possible.
(defun code-notes-for-region (coverage start-pos end-pos)
  (let* ((notes (loop for fn in (file-coverage-toplevel-functions coverage)
                      as note = (function-entry-code-note fn) as source = (nearest-source-note note)
                      when (and (or (null end-pos) (< (source-note-start-pos source) end-pos))
                                (or (null start-pos) (< start-pos (source-note-end-pos source))))
                        ;; This function intersects the region.  Find the smallest subnote that contains all
                        ;; of this function's part of the region.
                        collect (let ((start (max start-pos (source-note-start-pos source)))
                                      (end (min end-pos (source-note-end-pos source))))
                                  (iterate tighten ((note note))
                                    (loop for subnote in (code-note-subnotes note)
                                          as subsource = (nearest-source-note subnote)
                                          do (when (and (<= (source-note-start-pos subsource) start)
                                                        (<= end (source-note-end-pos subsource)))
                                               (return (tighten subnote)))
                                          finally (return note))))))
         (emitted-notes (iterate splat ((notes notes))
                          (loop for note in notes
                                nconc (if (emitted-code-note-p note)
                                        (list note)
                                        (splat (code-note-subnotes note)))))))
    emitted-notes))


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defvar *loading-coverage*)

(defun ccl:write-coverage-to-file (coverage pathname)
  "Write the coverage state COVERAGE in the file designated by PATHNAME"
  (with-open-file (stream pathname
                          :direction :output
                          :if-exists :supersede
                          :if-does-not-exist :create)
    (with-standard-io-syntax
      (let ((*package* (pkg-arg "CCL")))
        (format stream "(in-package :ccl)~%~s~%"
                `(setq *loading-coverage* ',(coverage-state-alist coverage)))))
    (values)))
  
(defun ccl:read-coverage-from-file (pathname)
  " Return the coverage state saved in the file.  Doesn't affect the current coverage state."
  (let ((*package* (pkg-arg "CCL"))
        (*loading-coverage* :none))
    (load pathname)
    (when (eq *loading-coverage* :none)
      (error "~s doesn't seem to be a saved coverage file" pathname))
    (make-coverage-state :alist *loading-coverage*)))

(defun ccl:save-coverage-in-file (pathname)
  "Save the current coverage state in the file designed by PATHNAME"
  (write-coverage-to-file (save-coverage) pathname))

(defun ccl:restore-coverage-from-file (pathname)
  "Set the current coverage state from the file designed by PATHNAME"
  (restore-coverage (read-coverage-from-file pathname)))

(defun common-coverage-directory ()
  (let* ((host :unknown)
         (rev-dir ()))
    (loop for data in *code-covered-functions*
          when (consp data)
            do (let ((file (probe-file (code-covered-info.file data))))
                 (when file
                   (cond ((eq host :unknown)
                          (setq host (pathname-host file)
                                rev-dir (reverse (pathname-directory file))))
                         ((not (equalp host (pathname-host file)))
                          (return-from common-coverage-directory nil))
                         (t
                          (let* ((path (pathname-directory file))
                                 (dir-len (length rev-dir))
                                 (len (length path)))
                            (if (< len dir-len)
                              (setq rev-dir (nthcdr (- dir-len len) rev-dir))
                              (setq path (subseq path 0 dir-len)))
                            (loop for pp on (reverse path) until (equalp pp rev-dir)
                                  do (pop rev-dir))))))))
    (unless (eq host :unknown)
      (make-pathname :host host :directory (reverse rev-dir)))))


(defun ccl:coverage-statistics ()
  (with-coverage-decoding ()
    (loop for data in *code-covered-functions*
          do (with-decoded-file-coverage (coverage data)
               (file-coverage-statistics coverage)))))

(defun compute-file-coverage-statistics (coverage)
  (count-unreached-branches coverage)
  (count-covered-aexps coverage)
  (count-covered-sexps coverage))

(defun native-file-namestring (file)
  (native-translated-namestring (make-pathname :name (pathname-name file)
                                               :type (pathname-type file))))


(defun ccl:report-coverage (output-file &key (external-format :default) (statistics t) (html t) (tags nil))
  "If :HTML is non-nil, generate an HTML report, consisting of an index file in OUTPUT-FILE
and, in the same directory, one html file for each instrumented source file that has been
loaded in the current session.
The external format of the source files can be specified with the EXTERNAL-FORMAT parameter.
If :STATISTICS is non-nil, a CSV file is generated with a table.  If
:STATISTICS is a filename, that file is used, else 'statistics.csv' is
written to the output directory.
If :TAGS is non-nil, it must be a hash table whose values are incremental coverage snapshots. This
causes the HTML report to include incremental coverage information"
  ;; TODO: *** How to present incremental coverage info in statistics file?
  (let* ((paths)
         (directory (make-pathname :name nil :type nil :defaults output-file))
         (coverage-dir (common-coverage-directory))
         (frame-file (and html (merge-pathnames output-file "index.html")))
         (index-file (and html (make-pathname :name (%str-cat (pathname-name frame-file) "_html")
                                              :defaults frame-file)))
         (tags-file (and tags (make-pathname :name (%str-cat (pathname-name frame-file) "_tags")
                                             :defaults frame-file)))
         (stats-file (and statistics (merge-pathnames (if (or (stringp statistics)
                                                              (pathnamep statistics))
                                                          (merge-pathnames statistics "statistics.csv")
                                                          "statistics.csv")
                                                      output-file))))
    (ensure-directories-exist directory)
    (with-coverage-decoding (:tags tags)
      (loop for data in *code-covered-functions* as file = (code-covered-info.file data)
            as truename =  (and file (or (probe-file file)
                                         (progn (warn "Cannot find ~s, won't report coverage" file)
                                                nil)))
            do (when truename
                 (let* ((src-name (enough-namestring truename coverage-dir))
                        (html-name (substitute
                                    #\_ #\: (substitute
                                             #\_ #\. (substitute
                                                      #\_ #\/ (namestring-unquote src-name))))))
                   (with-decoded-file-coverage (coverage data)
                     (when html
                       (let* ((checksum (fcomp-file-checksum file :external-format (code-covered-info.ef data))))
                         (unless (eql checksum (code-covered-info.id data))
                           (cerror "Try coloring anyway"
                                   "File ~s has changed since coverage source location info was recorded."
                                   file)))
                       (report-file-coverage frame-file coverage directory html-name external-format))
                     (push (list* src-name html-name coverage) paths)))))
      (when html
        (when tags-file
          (with-open-file (tags-stream tags-file
                                       :direction :output
                                       :if-exists :supersede
                                       :if-does-not-exist :create)
	    ;; have to create a style else changing style.width has no effect
            (format tags-stream "<html><head><style type='text/css'>
#tagsselect {  width: *; }
</style><script type='text/javascript'>
function tags_changed() {
  var file_frame = top.frames.T~a;
  if (file_frame) {
    var sel = document.getElementById('tagsselect');
    var len = sel.length;
    var tags = new Array();
    for (var i = 0; i < len; i++)
      if (sel[i].selected) tags.push(sel[i].value);
    file_frame.colorize(tags);
  }
}

function resize_tags() {
  var sel = document.getElementById('tagsselect');
  sel.style.width = sel.offsetParent.scrollWidth + 'px';
}

function init_tags () {
  var sel = document.getElementById('tagsselect');
  var len = sel.length;
  for (var i = 0; i < len; i++) sel[i].selected = true;
  sel.focus();
  sel.onchange = tags_changed;

  var fs = top.document.getElementById('tagsframeset');
  fs.cols = Math.min(sel.offsetLeft + sel.offsetWidth, 0.3 * fs.scrollWidth) + 'px,*';
  resize_tags();
}

function select_tags (tags) {
  var sel = document.getElementById('tagsselect');
  for (var i = 0; i < sel.length; i++) sel[i].selected = false;
  var len = tags.length;
  for (var i = 0; i < len; i++) sel[tags[i]].selected = true;
  tags_changed();
}

</script></head><body onload='init_tags()' onresize='resize_tags()'>"
		    *coverage-frame-name*)
            (write-coverage-tag-table tags-stream)
            (format tags-stream "</body></html>")))
        (with-open-file (html-stream frame-file
                                     :direction :output
                                     :if-exists :supersede
                                     :if-does-not-exist :create)
          (format html-stream "<html><head><script type='text/javascript'>~%~
function show_in_target_frame (w, elt) {
  var page_top = w.pageYOffset || w.document.documentElement.scrollTop || w.document.body.scrollTop;
  var page_height = w.innerHeight || w.document.documentElement.clientHeight || w.document.body.clientHeight;
  var elt_bottom = elt.offsetHeight;
  for (var p = elt; p && p.tagName != 'BODY'; p = p.offsetParent) elt_bottom += p.offsetTop;
  //  page height may or may not include the scroll bar, scroll a little extra just in case it does.
  var min_top = elt_bottom - (page_height - 20);
  if (page_top <= min_top) w.scrollTo(0, Math.ceil(min_top));
}

function ensure_target_frame (e) {
  var link = (e ? (e.target ? e.target : e.srcElement) : false);
  if (window.frames.length == 1) {
    var new_frame;~0@*~:[
      new_frame = document.createElement('frame');
      new_frame.name = 'T~1@*~a';
      if (link) new_frame.src = link.href;
~;
      new_frame = document.createElement('frameset');
      new_frame.id = 'tagsframeset';
      var tags_frame = document.createElement('frame');
      tags_frame.src = '~0@*~a';
      tags_frame.name = 'tagsframe';
      file_frame = document.createElement('frame');
      file_frame.name = 'T~1@*~a';
      if (link) file_frame.src = link.href;
      new_frame.appendChild(tags_frame);
      new_frame.appendChild(file_frame);
      // new_frame.cols = '20%,*';
    ~]
    var frameset = document.getElementById('topframeset');
    frameset.appendChild(new_frame);
    frameset.rows = '30%,*';

    if (link) show_in_target_frame(window.frames[0], link);
  }
  return true;
}

function send_links_to_frame (w) {
  for (var i = 0; i < w.document.links.length; i++) {
    var link = w.document.links[i];
    link.target = 'T~1@*~a';
    link.onclick = ensure_target_frame;
  }
}

function close_target_frame () {
  if (window.frames.length > 1) {
    var frameset = document.getElementById('topframeset');
    frameset.removeChild(frameset.childNodes[1]);
    frameset.rows = '*';
  }
  return false;
}
</script></head>
<frameset id='topframeset' rows='*'><frame src='~2@*~a' /></frameset></html>"
                  (and tags-file (native-file-namestring tags-file))
                  *coverage-frame-name*
                  (native-file-namestring index-file))))
      (when (null paths)
        (error "No code coverage data available"))
      (setq paths (sort paths #'(lambda (path1 path2)
                                  (let* ((f1 (car path1))
                                         (f2 (car path2)))
                                    (or (string< (directory-namestring f1)
                                                 (directory-namestring f2))
                                        (and (equal (pathname-directory f1)
                                                    (pathname-directory f2))
                                             (string< (file-namestring f1)
                                                      (file-namestring f2))))))))
      (if html
        (with-open-file (html-stream index-file
                                     :direction :output
                                     :if-exists :supersede
                                     :if-does-not-exist :create)
          (if stats-file
            (with-open-file (stats-stream stats-file
                                          :direction :output
                                          :if-exists :supersede
                                          :if-does-not-exist :create)
              (report-coverage-to-streams paths html-stream stats-stream))
            (report-coverage-to-streams paths html-stream nil)))
        (if stats-file
          (with-open-file (stats-stream stats-file
                                        :direction :output
                                        :if-exists :supersede
                                        :if-does-not-exist :create)
            (report-coverage-to-streams paths nil stats-stream))
          (error "One of :HTML or :STATISTICS must be non-nil"))))
    (values frame-file stats-file)))


(defun report-coverage-to-streams (paths html-stream stats-stream)
  (when html-stream
    (format html-stream "<html><head>~%")
    (write-coverage-styles html-stream)
    (format html-stream "~%</head>~%<body onload='if (top.send_links_to_frame) top.send_links_to_frame(self)'>"))
  (unless paths
    (warn "No coverage data found for any file, producing an empty report. Maybe you forgot to (SETQ CCL::*COMPILE-CODE-COVERAGE* T) before compiling?")
    (when html-stream (format html-stream "<h3>No code coverage data found.</h3>~%"))
    (when stats-stream (format stats-stream "No code coverage data found.~%"))
    (return-from report-coverage-to-streams))
  (when html-stream (format html-stream "<table class='summary'>"))
  (coverage-stats-head html-stream stats-stream t)
  (loop for prev = nil then src-name
        for (src-name report-name . coverage) in paths
        for even = nil then (not even)
        do (when (or (null prev)
                     (not (equal (pathname-directory (pathname src-name))
                                 (pathname-directory (pathname prev)))))
             (let ((dir (namestring (make-pathname :name nil :type nil :defaults src-name))))
               (when html-stream (format html-stream "<tr class='subheading'><td colspan='17'>~A</td></tr>~%" dir))
               (when stats-stream (format stats-stream "~a~%" dir))))
        do (coverage-stats-data html-stream stats-stream coverage even report-name src-name))
  (when html-stream (format html-stream "</table></body></html>")))

(defun style-for-coverage (coverage)
  (case coverage
    ((full) $totally-covered-style)
    ((nil) $not-executed-style)
    (t $partially-covered-style)))
  
(defun precompute-source-coverage (coverage)
  ;; linearize emitted notes with children preceding parents, and mark up fully covered ones.
  ;; This assumes code notes are never individually reset, so once something is fully
  ;; covered, it stays fully covered, so no need to reinit the setting, just update.
  (let ((subnotes *code-note-subnotes*)
        (vector *emitted-code-notes*)
        (index-hash *code-note-index*))
    (iterate descend ((note nil))
      (let ((full-p (and note (code-note-code-coverage note))))
        (loop for subnote in (gethash note subnotes)
              do (unless (descend subnote) (setq full-p nil))
              do (setf (gethash subnote index-hash) (vector-push-extend subnote vector)))
        (when full-p         ;; return true if full, nil if not.
          (setf (code-note-code-coverage note) 'full)))))
  ;; Find all source notes
  ;; Note that can't compute a source hierarchy because the reader flattens the backpointers
  ;; so each subnote points directly to the toplevel note.
  (labels ((subnotep (a b)
             (or (eq a b) (and a (subnotep (code-note-parent-note a) b))))
           (register (source emitted-notes)
             (assert emitted-notes)
             (let ((prior-notes (gethash source *source-code-notes*)))
               (if prior-notes
                 ;; In some cases, a single source form may be claimed by multiple code notes,
                 (setq emitted-notes
                       (nconc
                        (setq emitted-notes
                              (remove-if (lambda (new)
                                           (some (lambda (old) (subnotep new old)) prior-notes))
                                         emitted-notes))
                        (if emitted-notes
                          (remove-if (lambda (old)
                                       (some (lambda (new) (subnotep old new)) emitted-notes))
                                     prior-notes)
                          prior-notes)))
                 ;; Else this is the first time, record it
                 (vector-push-extend source *covered-source-notes*)))
             (setf (gethash source *source-code-notes*) emitted-notes)))
    (loop for note across *emitted-code-notes*
          as source = (code-note-source-note note)
          when source do (register source (list note))
            ;; want to look at all notes, even unemitted, so can get all source forms
            do (loop while (and (setq note (code-note-parent-note note))
                                (not (emitted-code-note-p note)))
                     when (setq source (code-note-source-note note))
                       do (register source (code-note-subnotes note))))
    (setf *covered-source-notes*
          (sort *covered-source-notes* #'< :key #'source-note-start-pos)) ;; this puts parents before children
    (loop for source across *covered-source-notes* as index upfrom 0
          do (setf (gethash source *source-note-index*) index)))
  (assert (eql (length *covered-source-notes*) (hash-table-count *source-code-notes*)))
  coverage)

(defun file-coverage-html-queue (coverage)
  (declare (ignore coverage)) ;; turns out everything we need is already in global variables
  ;; Collect top-level sources.  *covered-source-notes* is sorted by start address.
  (let ((queue (loop with vector = *covered-source-notes* with len = (length vector)
                     for start = 0 then end while (< start len)
                     as sn = (aref vector start)
                     as end = (loop with limit = (source-note-end-pos sn)
                                    for i from (1+ start) below len
                                    until (<= limit (source-note-start-pos (aref vector i)))
                                    finally (return i))
                     collect (list* end nil (source-note-end-pos sn)))));; (end-index acodes . end-pos)
    ;; Find all acode strings, assign them to appropriate toplevel source form, and collect
    ;; all code notes for each acode.
    (loop for note across *emitted-code-notes*
          when (code-note-acode-range note)
            do (let* ((source (nearest-source-note note))
                      (pos (source-note-start-pos source))
                      (cell (loop for cell in queue while (<= (cddr cell) pos) finally (return cell)))
                      (acode (%function-acode-string (code-note-function note)))
                      (acell (or (assq acode (cadr cell))
                                 (car (push (list* acode nil 0) (cadr cell))))));; (acode notes . src-pos)
                 (assert (and cell acode))
                 (setf (cddr acell) (min (cddr acell) pos));; earliest known source for this acode
                 (push note (cadr acell))))
    ;; Sort acode by source position within source form, sort notes by position within the acode,
    ;; get rid of the end-pos/src-pos fields since no longer needed.
    (loop for cell in queue
          do (setf (cdr cell) (sort (cadr cell) #'< :key #'cddr));; (end-index . acodes)
          do (loop for acell in (cdr cell)
                   do (setf (cdr acell) (sort (cadr acell) #'< :key #'code-note-acode-start-pos)))) ; (acode . notes)
    queue))


(defun function-outermost-entry-source (fn)
  ;; Find the outermost source form containing the fn.
  (loop with sn = nil
        for n = (function-entry-code-note fn) then (code-note-parent-note n)
        do (when (null n) (return nil))
        do (when (setq sn (code-note-source-note n))
             (loop for s = (source-note-source sn) while (source-note-p s)
                   do (setq sn s))
             (return sn))))


(defun report-file-coverage (index-file coverage directory html-name external-format)
  (with-open-file (js-stream (make-pathname :name html-name :type "js" :defaults directory)
                             :direction :output
                             :if-exists :supersede
                             :if-does-not-exist :create)
    (write-coverage-js-file js-stream coverage))
  (with-open-file (html-stream (make-pathname :name html-name :type "html" :defaults directory)
                               :direction :output
                               :if-exists :supersede
                               :if-does-not-exist :create)
    (write-coverage-html-file index-file html-name html-stream coverage external-format)))

(defun write-char-to-html (ch stream)
  (if (or (alphanumericp ch) (find ch "()+-:* ")) ;; common and safe
    (write-char ch stream)
    (format stream "&#~D;" (char-code ch))))


(defun write-coverage-tag-table (html-stream)
  (let* ((tags *coverage-tags*)
         (named-p (not (fixnump tags)))
         (count (if named-p (length tags) tags)))
    (format html-stream "~&<form width='*'><select multiple size='~d' width='*' id='tagsselect' onchange='tags_changed();'>~%" count)
    (loop for i from 0 below count
          do (format html-stream "<option value='~d'>" i)
          do (if named-p
               (let* ((tag (aref tags i))
                      (name (typecase tag
                              (string tag)
                              (symbol (symbol-name tag))
                              (t (princ-to-string tag)))))
                 (loop for ch across name do (write-char-to-html ch html-stream)))
               (format html-stream "[~d]" i))
          do (format html-stream "</option>~%"))
    (format html-stream "</select></form>~%")))

(defun write-coverage-html-file (index-file html-name html-stream coverage source-external-format)
  (let ((*print-case* :downcase))

    (format html-stream "<html><head>")
    (write-coverage-styles html-stream)
    (format html-stream "<script src='~a.js'></script>~%" html-name)
    (format html-stream "</head><body onload='init_file()'>")

    (format html-stream "<h3><a id='backlink' href=~s>Coverage report:</a> ~a <br />~%</h3>~%"
            (native-file-namestring index-file)
            (file-coverage-file coverage))
    (format html-stream "<table class='summary'>")
    (file-coverage-stats-html html-stream)
    (format html-stream "</table>")

    ;;(format html-stream "~2%<a href='javascript:DEBUG_OUT(CodeParents)'>Doit</a><div id='foo'>Debug output here</div>")

    (format html-stream "<div class='key'><b>Key</b><br />~%")
    (format html-stream "<div class='st~a'>Fully covered - every single instruction executed</div>" $totally-covered-style)
    (format html-stream "<div class='st~a'>Partly covered - entered but some subforms not executed</div>" $partially-covered-style)
    (format html-stream "<div class='st~a'>Never entered - not a single instruction executed</div>" $not-executed-style)
    (format html-stream "<div class='stsource'>Uninstrumented - a form whose coverage was not measured</div>")
    (format html-stream "</div><p></p>~%")

    (output-spanned-html html-stream coverage source-external-format)

    (format html-stream "</body></html>")))

#|
var COV = ['unknown', 'not', 'all', 'some'];
function DEBUG_OUT(text) {
  var msg = document.getElementById('foo');
  msg.innerHTML = msg.innerHTML + '<br />' + text;
}
|#

;; This goes in each file.
(defparameter $coverage-javascript "

function init_file () {
  if (top.close_target_frame) {
    var backlink = document.getElementById('backlink');
    backlink.innerHTML = '[Close]<p>';
    backlink.onclick = top.close_target_frame;
  }
  colorize (true);
}

function tags_intersect (tags1, tags2) {   // tags2 = true means all tags.
  var ntags = tags1.length - 1;
  if (tags2 === true)
    return (ntags > 0);
  for (var i = 0; i < ntags; i++) {
    var tag1 = tags1[i];
    for (var j = 0; j < tags2.length; j++)
      if (tag1 == tags2[j]) return true;
  }
  return false;
}

function is_member (elt, vec) {
  for (var i = 0; i < vec.length; i++) {
    if (vec[i] == elt) return true;
  }
  return false;
}

function set_stats_with_pct(name, count, total) {
  var pct;

  if (total > 0) {
    var pct = (count * 100) / total;
    pct = pct.toFixed(1) + '&#37;';
  }
  else {
    pct = '--';
  }
  
  document.getElementById(name).innerHTML = count;

  document.getElementById(name + 'Pct').innerHTML =  pct;
}

function colorize (tags_to_show) {
  var style;

  // Compute acode coverage and colorize acode
  var total = (CodeTags ? CodeTags.length : CodeCoverage.length) - 1;
  var num_entered = 0;
  var coverage = new Array(total);

  for (var cn = 0; cn < total; cn++) {
    var covered = (CodeTags ? tags_intersect(CodeTags[cn], tags_to_show) : CodeCoverage[cn]);
    style = (covered ? ALL_COVERED : NOT_COVERED);

    var sub_style = coverage[cn];
    if (sub_style && (style != sub_style)) style = PARTLY_COVERED;

    coverage[cn] = style; // save for source coloring use below
    if (style != NOT_COVERED) num_entered++;
    var parent = CodeParents[cn];
    if (parent) {
      var sibs_style = coverage[parent];
      if (sibs_style != style) coverage[parent] = (!sibs_style ? style : PARTLY_COVERED);
    }

  var elt = document.getElementById('f~dc' + cn);  // some notes don't have a matched up source.
  if (elt) elt.className = 'st' + style;
  }


  document.getElementById('acodeTotal').innerHTML = total;
  set_stats_with_pct('acodeCovered', num_entered, total);

  // Count unreached branches (aka maximal unentered forms)
  var total = coverage.length;
  var num_branches = 0;
  var parent;
  for (var cn = 0; cn < total; cn++) {
    if ((coverage[cn] == NOT_COVERED) && // not covered
        (parent = CodeParents[cn]) &&  // has a parent
        (coverage[parent] != NOT_COVERED) &&  // that's covered
        (!is_member(cn, FunctionNotes))) // and not an entry note
      num_branches++;
  }

  document.getElementById('branchUnreached').innerHTML = num_branches;


  // Colorize Source
  var total = (SourceCodeNotes ? SourceCodeNotes.length : SourceCoverage.length) - 1;
  var num_all = 0, num_partly = 0;

  for (var sn = 0; sn < total; sn++) {
    if (SourceCodeNotes) {
      var notes = SourceCodeNotes[sn];
      for (var i = 0, style = NO_DATA; i < (notes.length - 1); i++) {
        var note_style = coverage[notes[i]];
        if (style != note_style) style = (style == NO_DATA ? note_style : PARTLY_COVERED);
      }
    }
    else {
      style = SourceCoverage[sn];
    }

    switch (style) {
      case ALL_COVERED: num_all++; break;
      case PARTLY_COVERED: num_partly++; break;
    }

   document.getElementById('f~:*~ds' + sn).className = 'st' + style;

  }
  document.getElementById('srcTotal').innerHTML = total;
  set_stats_with_pct('srcEntered', num_all + num_partly, total);
  set_stats_with_pct('srcCovered', num_all, total);

  var total = FunctionNotes.length - 1;
  var num_all = 0, num_partly = 0, num_not = 0;

  for (var i = 0; i < total; i++) {
    var cn = FunctionNotes[i];
    switch (coverage[FunctionNotes[i]]) {
      case ALL_COVERED: num_all++; break;
      case PARTLY_COVERED: num_partly++; break;
      case NOT_COVERED: num_not++; break;
    }
  }

  document.getElementById('fnTotal').innerHTML = total;
  set_stats_with_pct('fnCovered', num_all, total);
  set_stats_with_pct('fnPartly', num_partly, total);
  set_stats_with_pct('fnUnentered', num_not, total);


}

function show_tags (sn) {
  tags_frame = top.frames.tagsframe;
  if (tags_frame && tags_frame.select_tags) {
    var tags = new Array();
    var outer_notes = SourceCodeNotes[sn].slice(0);
    var total = CodeTags.length - 1;
    for (cn = total - 1; cn >= 0; cn--) {
      if (is_member(CodeParents[cn], outer_notes)) {
         outer_notes.push(cn);
         var new_tags = CodeTags[cn];
         var n = new_tags.length - 1;
         for (i = 0; i < n; i++) {
           var tag = new_tags[i];
           if (!is_member(tag, tags)) tags.push(tag);
         }
      }
    }
    tags_frame.select_tags(tags);
  }
}

")


(defmacro write-js-array (js-stream-expr var-expr data-expr writer)
  (let ((js-stream (gensym))
        (var (gensym))
        (data (gensym)))
    `(let ((,js-stream ,js-stream-expr)
           (,var ,var-expr)
           (,data ,data-expr))
       (when ,var (format ,js-stream "~2&var ~a = " ,var))
       (format ,js-stream "[")
       (loop with len = (and (vectorp ,data) (length ,data))
             for index upfrom 0
             while (if len (< index len) ,data)
             as note = (if len (aref ,data index) (pop ,data))
             do (funcall ,writer ,js-stream note)
             do (write-string (if (eql 49 (mod index 50)) #.(format nil ",~% ") ", ") ,js-stream))
       ;; Add an element at the end because otherwise get the wrong length if last element is empty
       (format ,js-stream "'end']")
       (when ,var (format ,js-stream ";~%")))))

;; output with a line break every 100 entries
(defun write-coverage-js-file (js-stream coverage)
  (flet ((write-code-parent (js-stream cn)
           (let* ((parent (code-note-emitted-parent cn)))
             (when parent
               (format js-stream "~a" (code-note-index parent)))))
         (write-function-note (js-stream fn)
           (format js-stream "~a" (code-note-index (function-entry-code-note fn))))
         (write-source-coverage (js-stream sn)
           (format js-stream "~a" (style-for-coverage (source-coverage sn))))
         (write-code-coverage (js-stream cn)
           (when (code-note-code-coverage cn) (format js-stream "1")))
         (write-source-notes (js-stream sn)
           (write-js-array js-stream nil (source-code-notes sn)
                           (lambda (js-stream cn) (format js-stream "~a" (code-note-index cn)))))
         (write-code-tags (js-stream cn)
           (write-js-array js-stream nil (code-note-tags cn)
                           (lambda (js-stream tag) (format js-stream "~a" tag)))))

    (format js-stream "~&var NO_DATA = ~d, NOT_COVERED = ~d, ALL_COVERED = ~d, PARTLY_COVERED = ~d;~2%"
            $not-executed-style $not-executed-style $totally-covered-style $partially-covered-style)
    (write-js-array js-stream "CodeParents" *emitted-code-notes* #'write-code-parent)
    (write-js-array js-stream "FunctionNotes" (file-coverage-functions coverage) #'write-function-note)
    (cond (*coverage-tags*
           (write-js-array js-stream "CodeTags" *emitted-code-notes* #'write-code-tags)
           (write-js-array js-stream "SourceCodeNotes" *covered-source-notes* #'write-source-notes)
           (format js-stream "~&var CodeCoverage;")
           (format js-stream "~&var SourceCoverage;"))
          (t
           (format js-stream "~&var CodeTags;")
           (format js-stream "~&var SourceCodeNotes;")
           (write-js-array js-stream "CodeCoverage" *emitted-code-notes* #'write-code-coverage)
           (write-js-array js-stream "SourceCoverage" *covered-source-notes* #'write-source-coverage)))
    (format js-stream $coverage-javascript (file-coverage-index coverage))
    (terpri js-stream)))

(defstruct coverage-html-state
  input
  output
  prefix
  (file-pos 0)
  (line-no 0)
  (column 0))

(defun coverage-html-start-line (s)
  (let ((line-no (coverage-html-state-line-no s))
        (output (coverage-html-state-output s)))
    (when line-no
      (setf (coverage-html-state-line-no s) (incf line-no))
      (format output "<span class='line'>~a</span>" line-no))
    (write-char #\space output)))

(defun coverage-html-copy-to (s end &optional end-at-newline-p whitespace-only-p)
  (let ((input (coverage-html-state-input s))
        (output (coverage-html-state-output s))
        (file-pos (coverage-html-state-file-pos s)))
    (assert (<= file-pos end))
    (loop until (eql file-pos end)
          as ch = (read-char input)
          do (when (and whitespace-only-p (not (whitespacep ch)))
               (unread-char ch input)
               (return))
             ;; Source note positions are file positions, not character positions, but assume
             ;; non-control ascii chars are 1 byte so don't have to call stream-position all the time.
          do (setq file-pos (if (< 31 (char-code ch) 127)
                              (1+ file-pos)
                              (let ((newpos (stream-position input)))
                                (assert (<= newpos end))
                                newpos)))
          do (when (eql (coverage-html-state-column s) 0) (coverage-html-start-line s))
          do (case ch
               (#\newline
                  (write-char #\Newline output)
                  (setf (coverage-html-state-column s) 0)
                  (when end-at-newline-p (return)))
               (#\tab
                  (let ((count (- 8 (mod (coverage-html-state-column s) 8))))
                    (write-string "        " output :end count)
                    (incf (coverage-html-state-column s) count)))
               (t
                  (incf (coverage-html-state-column s))
                  (write-char-to-html ch output))))
    (assert (eql file-pos (stream-position input)))
    (setf (coverage-html-state-file-pos s) file-pos)))

(defun output-coverage-html-acode (s note-queue)
  (let* ((output (coverage-html-state-output s))
         (input (coverage-html-state-input s))
         (prefix (coverage-html-state-prefix s))
         (end (stream-length input)))
    (when (< (coverage-html-state-file-pos s) end)
      (iterate output-subnotes ((limit end))
        (loop while (and note-queue (<= (code-note-acode-end-pos (car note-queue)) limit))
              do (let ((note (pop note-queue)))
                   (coverage-html-copy-to s (code-note-acode-start-pos note))
                   ;; skip leading whitespace -- this is necessary for acode, else looks weird.
                   (coverage-html-copy-to s (code-note-acode-end-pos note) nil t)
                   (format output "<span id='~a~d'>" prefix (code-note-index note))
                   (output-subnotes (code-note-acode-end-pos note))
                   (format output "</span>")))
        (coverage-html-copy-to s limit)))))

(defun output-coverage-html-source (s start end)
  (let* ((output (coverage-html-state-output s))
         (input (coverage-html-state-input s))
         (prefix (coverage-html-state-prefix s))
         (vector *covered-source-notes*)
         (len (length vector))
         (outer-note (and (< start end) (aref vector start)))
         (nextpos (if (< end len) (source-note-start-pos (aref vector end)) (stream-length input))))
    (when (< (coverage-html-state-file-pos s) nextpos)
      (format output "<div class='source'><code>")
      (when outer-note
        ;; The first time through this will just do the first note, because that's all that fits.
        (iterate output-subnotes ((outer-note outer-note))
          (loop with outer-end = (source-note-end-pos outer-note)
                as note = (and (< start end) (aref vector start))
                while (and note (<= (source-note-end-pos note) outer-end))
                do (progn
                     (coverage-html-copy-to s (source-note-start-pos note))
                     (format output "<span id='~a~d'>" prefix start)
                     (incf start)
                     (output-subnotes note)
                     (format output "</span>"))
                finally (coverage-html-copy-to s outer-end))))
      ;; Copy the rest of the last line, or to end if called without a note.
      (coverage-html-copy-to s nextpos outer-note)
      (format output "</code></div>~%"))))

(defun output-spanned-html (html-stream coverage external-format)
  (with-open-file (source-stream (file-coverage-file coverage) :external-format external-format)
    (let* ((queue (file-coverage-html-queue coverage))
           (prefix (format nil "f~d" (file-coverage-index coverage)))
           (s (make-coverage-html-state :input source-stream
                                        :output html-stream
                                        :prefix (%str-cat prefix "s"))))
      (loop 
        for start = 0 then end as (end . acodes) in queue
        do (output-coverage-html-source s start end)
        do (format html-stream "<a href=javascript:swap('~at~d')><span class='toggle' id='p~2:*~at~d'>Show expansion</span></a>~%" prefix start)
        do (when *coverage-tags*
             (format html-stream "&nbsp;&nbsp;&nbsp;<a href=javascript:show_tags(~d)><span class='toggle'>Show tags</span></a>~%" start))
        do (format html-stream "<div class='acode' id='a~at~d'><code>" prefix start)
        do (loop for (acode . notes) in acodes
                 do (with-input-from-vector (astream acode :external-format :utf-8)
                      (let ((cs (make-coverage-html-state :input astream
                                                          :output html-stream
                                                          :prefix (%str-cat prefix "c")
                                                          :line-no nil)))
                        (output-coverage-html-acode cs notes)
                        (fresh-line html-stream))))
        do (format html-stream "</code></div><hr/>~%")
           ;; output the rest of file, no notes.
        finally (output-coverage-html-source s start start)))))

(defun coverage-stats-head (html-stream stats-stream include-source-p)
  (when html-stream
    (format html-stream "<tr class='head-row'>")
    (when include-source-p (format html-stream "<td></td>"))
    (format html-stream "<td class='main-head' colspan='5'>Expressions</td>")
    (format html-stream "<td class='main-head' colspan='1'>Branches</td>")
    (format html-stream "<td class='main-head' colspan='3'>Code Forms</td>")
    (format html-stream "<td class='main-head' colspan='7'>Functions</td></tr>")
    (format html-stream "<tr class='head-row'>")
    (let ((fields '(;; Expressions
                    "Total" "Entered" "% entered" "Fully covered" "% fully covered"
                    ;; Branches
                    "total unreached"
                    ;; Code forms
                    "Total" "Covered" "% covered"
                    ;; Functions
                    "Total" "Fully covered" "% fully covered" "Partly covered" "% partly covered" "Not entered" "% not entered")))
      (when include-source-p (push "Source file" fields))
      (format html-stream "~{<td width='60px'>~A</td>~}" fields))
    (format html-stream "</tr>"))
  (when stats-stream
    (format stats-stream "~{~a~^,~}"
            `("Source file"
              "Expressions Total" "Expressions Entered" "% Expressions Entered"
              "Unreached Branches"
              "Code Forms Total" "Code Forms Covered" "% Code Forms Covered"
              "Functions Total" "Functions Fully Covered" "% Functions Fully Covered"
              "Functions Partly Covered" "% Functions Partly Covered"
              "Functions Not Entered" "% Functions Not Entered"))))

(defun file-coverage-stats-html (html-stream)
  (format html-stream "<table class='summary'>")
  (coverage-stats-head html-stream nil nil)
  (format html-stream "<tr class='odd'>")
  (format html-stream "~{<td id='~a'></td>~}"
          '("srcTotal" "srcEntered" "srcEnteredPct" "srcCovered" "srcCoveredPct"
            "branchUnreached"
            "acodeTotal" "acodeCovered" "acodeCoveredPct"
            "fnTotal" "fnCovered" "fnCoveredPct" "fnPartly" "fnPartlyPct" "fnUnentered" "fnUnenteredPct"))
  (format html-stream "</table>"))
  
(defun coverage-stats-data (html-stream stats-stream coverage evenp report-name src-name)
  (when html-stream
    (format html-stream "<tr class='~:[odd~;even~]'>" evenp)
    (format html-stream "<td class='text-cell'><a href='~a.html'>~a</a></td>" report-name src-name))
  (when stats-stream
    (format stats-stream "~a," (file-coverage-file coverage)))

  (let* ((stats (file-coverage-statistics coverage))
         (total (coverage-expressions-total stats))
         (entered (coverage-expressions-entered stats))
         (covered (coverage-expressions-covered stats))
         (exp-counts (list total
                           entered (if (> total 0) (* 100.0d0 (/ entered total)) '--)
                           covered (if (> total 0) (* 100.0d0 (/ covered total)) '--))))
    (when html-stream
      (format html-stream "~{<td>~:[-~;~:*~a~]</td><td>~:[-~;~:*~a~]</td><td>~:[-~;~:*~5,1f%~]</td><td>~:[-~;~:*~a~]</td><td>~:[-~;~:*~5,1f%~]</td>~}" exp-counts))
    (when stats-stream
      (format stats-stream "~{~:[~;~:*~a~],~:[~;~:*~a~],~:[~;~:*~5,1f%~],~:[~;~:*~a~],~:[~;~:*~5,1f%~],~}" exp-counts)))

  (let ((count (coverage-unreached-branches (file-coverage-statistics coverage))))
    (when html-stream
      (format html-stream "<td>~:[-~;~:*~a~]</td>" count))
    (when stats-stream
      (format stats-stream "~:[~;~:*~a~]," count)))

  (let* ((stats (file-coverage-statistics coverage))
         (total (coverage-code-forms-total stats))
         (covered (coverage-code-forms-covered stats))
         (exp-counts (list total covered (if (> total 0) (* 100.0d0 (/ covered total)) '--))))
    (when html-stream
      (format html-stream "~{<td>~:[-~;~:*~a~]</td><td>~:[-~;~:*~a~]</td><td>~:[-~;~:*~5,1f%~]</td>~}" exp-counts))
    (when stats-stream
      (format stats-stream "~{~:[~;~:*~a~],~:[~;~:*~a~],~:[~;~:*~5,1f%~],~}" exp-counts)))

  (let* ((stats (file-coverage-statistics coverage))
         (total (coverage-functions-total stats))
         (fully (coverage-functions-fully-covered stats))
         (partly (coverage-functions-partly-covered stats))
         (never (coverage-functions-not-entered stats))
         (counts (list fully
                       (if (> total 0) (* 100.0 (/ fully total)) '--)
                       partly
                       (if (> total 0) (* 100.0 (/ partly total)) '--)
                       never
                       (if (> total 0) (* 100.0 (/ never total)) '--))))
    (when html-stream
      (format html-stream "<td>~:[-~;~:*~a~]</td>~{<td>~:[-~;~:*~a~]</td><td>~:[-~;~:*~5,1f%~]</td>~}</tr>" total counts))
    (when stats-stream
      (format stats-stream "~:[~;~:*~a~],~{~:[~;~:*~a~],~:[-~;~:*~5,1f%~]~^,~}~%" total counts))))

(defun count-covered-aexps (coverage)
  (let ((covered 0) (total 0)
        (entry-full 0) (entry-part 0) (entry-never 0) (entry-total 0))
    (loop for note across *emitted-code-notes*
          do (incf total)
          do (when (code-note-code-coverage note)
               (incf covered))
          do (when (entry-code-note-p note)
               (incf entry-total)
               (case (code-note-code-coverage note)
                 ((full) (incf entry-full))
                 ((nil) (incf entry-never))
                 (t (incf entry-part)))))
    (let ((stats (file-coverage-statistics coverage)))
      (setf (coverage-code-forms-total stats) total)
      (setf (coverage-code-forms-covered stats) covered)
      (setf (coverage-functions-total stats) entry-total)
      (setf (coverage-functions-fully-covered stats) entry-full)
      (setf (coverage-functions-partly-covered stats) entry-part)
      (setf (coverage-functions-not-entered stats) entry-never))))


(defun count-covered-sexps (coverage)
  ;; Count the number of source expressions that have been entered or covered
  (let ((entered 0) (covered 0) (total (length *covered-source-notes*)))
    (loop for source across *covered-source-notes* as cover = (source-coverage source)
          do (when cover
               (incf entered)
               (when (eq cover 'full) (incf covered))))
    (let ((stats (file-coverage-statistics coverage)))
      (setf (coverage-expressions-total stats) total)
      (setf (coverage-expressions-entered stats) entered)
      (setf (coverage-expressions-covered stats) covered))))

(defun count-unreached-branches (coverage)
  ;; Count the number of maximal unentered code forms, i.e. unentered code forms
  ;; whose parent was entered.
  (let ((count (loop for note across *emitted-code-notes*
                     count (and (null (code-note-code-coverage note));; uncovered
                                (not (entry-code-note-p note));; not entry note
                                (setq note (code-note-emitted-parent note));; has a parent
                                (code-note-code-coverage note)))));; that's covered
    (let ((stats (file-coverage-statistics coverage)))
      (setf (coverage-unreached-branches stats) count))))

(defun write-coverage-styles (html-stream)
  (format html-stream "<style type='text/css'>
*.st~a { background-color: #ffaaaa }
*.st~a { background-color: #aaffaa }
*.st~a { background-color: #44dd44 }
*.stsource { background-color: #eeeeee; }
*.key { margin: 20px; width: 88ex }
*.source { width: 120ex; background-color: #eeeeee; padding-left: 5px;
             /* border-style: solid none none none; border-width: 1px;
             border-color: #dddddd */
             white-space: pre; }

*.acode { border-left: 1px dashed #c0c0c0;
         margin-top: 1ex;
         margin-left: 6ex;
         margin-bottom: 2ex;
         white-space: pre;
         display: none; }

*.line { color: #666666; float: left; width: 6ex; text-align: right; margin-right: 1ex; }

*.toggle { font-size: small; }

table.summary tr.head-row { background-color: #aaaaff }
table.summary tr td.text-cell { text-align: left }
table.summary tr td.main-head { text-align: center }
table.summary tr td { text-align: right }
table.summary tr.even { background-color: #eeeeff }
table.summary tr.subheading { background-color: #aaaaff}
table.summary tr.subheading td { text-align: left; font-weight: bold; padding-left: 5ex; }

</style>

<script type='text/javascript'>
function swap (id) {
  var acode = document.getElementById('a' + id);
  var prompt = document.getElementById('p' + id);
  if (acode.style.display == 'block') {
      acode.style.display = 'none';
      prompt.innerHTML = 'Show expansion';
  } else {
    acode.style.display = 'block';
    prompt.innerHTML = 'Hide expansion';
  }
}
</script>
"
          $not-executed-style
          $partially-covered-style
          $totally-covered-style
          ))
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3
;;;; END FILE ./reference/ccl/library/cover.lisp
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4n









;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4n









;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4n









;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4n











\;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1
;;;; BEGIN FILE ./reference/ccl/library/parse-ffi.lisp
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2
;;;-*-Mode: LISP; Package: CCL -*-
;;;
;;; Copyright 2001-2009 Clozure Associates
;;;
;;; Licensed under the Apache License, Version 2.0 (the "License");
;;; you may not use this file except in compliance with the License.
;;; You may obtain a copy of the License at
;;;
;;;     http://www.apache.org/licenses/LICENSE-2.0
;;;
;;; Unless required by applicable law or agreed to in writing, software
;;; distributed under the License is distributed on an "AS IS" BASIS,
;;; WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
;;; See the License for the specific language governing permissions and
;;; limitations under the License.

(in-package "CCL")

(defvar *parse-ffi-target-ftd* *target-ftd*)
(defvar *ffi-lisp-readtable* (copy-readtable nil))
(defvar *ffi-ordinal* -1)
(defpackage "C" (:use))
(defvar *lparen-symbol* (intern "(" (find-package "C")))
(defvar *rparen-symbol* (intern ")" (find-package "C")))
(defvar *leftbracket-symbol* (intern "[" (find-package "C")))
(defvar *rightbracket-symbol* (intern "]" (find-package "C")))
(defvar *sharp-symbol* (intern "#" (find-package "C")))
(defvar *sharp-sharp-symbol* (intern "##" (find-package "C")))
(defvar *comma-symbol* (intern "," (find-package "C")))


(defstruct (ffi-macro (:include ffi-type))
  args
  expansion
  disposition
  tokens
  expression )

(defstruct (ffi-enum (:include ffi-type)))

(defvar *ffi-typedefs*)
(defvar *ffi-global-typedefs* nil)
(defvar *ffi-unions*)
(defvar *ffi-global-unions* nil)
(defvar *ffi-transparent-unions* nil)
(defvar *ffi-global-transparent-unions* nil)
(defvar *ffi-structs*)
(defvar *ffi-global-structs* nil)
(defvar *ffi-functions*)
(defvar *ffi-global-functions* nil)
(defvar *ffi-global-constants* nil)
(defvar *ffi-global-vars* nil)
(defvar *ffi-objc-classes* nil)
(defvar *ffi-global-objc-classes* nil)
(defvar *ffi-global-objc-messages* nil)
;;; Some things are just too hard to parse, but are important.
;;; Override those things with simpler versions.
(defvar *ffi-macro-overrides*
  '((:macro ("{override}" 0) "_IOC_TYPECHECK ( t )" "sizeof(t)")))

(defvar *ffi-void-reference* '(:primitive :void))



(defun find-or-create-ffi-struct (string)
  (or (gethash string *ffi-structs*)
      (setf (gethash string *ffi-structs*)
            (make-ffi-struct :string string
                             :name (unless (digit-char-p (schar string 0))
                                     (escape-foreign-name string))))))

(defun find-or-create-ffi-union (string)
  (or (gethash string *ffi-unions*)
      (setf (gethash string *ffi-unions*)
            (make-ffi-union :string string
                            :name (unless (digit-char-p (schar string 0))
                                    (escape-foreign-name string))))))

(defun find-or-create-ffi-transparent-union (string)
  (or (gethash string *ffi-transparent-unions*)
      (setf (gethash string *ffi-transparent-unions*)
            (make-ffi-transparent-union :string string
                                        :name (unless (digit-char-p (schar string 0))
                                                (escape-foreign-name string))))))

(defun find-or-create-ffi-objc-class (string)
  (or (gethash string *ffi-objc-classes*)
      (setf (gethash string *ffi-objc-classes*)
            (make-ffi-objc-class :string string
                                 :name (escape-foreign-name string)))))

(defun find-or-create-ffi-objc-message (string)
  (or (gethash string *ffi-global-objc-messages*)
      (setf (gethash string *ffi-global-objc-messages*)
            (make-ffi-objc-message :string string))))

(defun find-or-create-ffi-typedef (string)
  (or (gethash string *ffi-typedefs*)
      (setf (gethash string *ffi-typedefs*)
            (make-ffi-typedef :string string
                              :name (escape-foreign-name string)))))

(defun eval-complex-c-expression (string constant-alist)
  (declare (ignore string constant-alist)))

(defun eval-c-float-string (string)
  (setq string (nstring-upcase string))
  ;; Make the c float string (which may contain trailing garbage)
  ;; look enough like a lisp float string that READ-FROM-STRING will
  ;; work.
  ;; There can be some trailing garbage on the string, or it might
  ;; end in a decimal point.
  ;; The trailing garbage might be a size specifier : #\L or #\F,
  ;; to denote a LONG-DOUBLE or a (single) FLOAT.
  ;; MCL can't deal with LONG-DOUBLEs, and will assume that an
  ;; unqualified float constant is a SINGLE-FLOAT (or whatever
  ;; *READ-DEFAULT-FLOAT-FORMAT* says.  We may have to add or
  ;; change an exponent marker.
  (let* ((lastpos (1- (length string)))
         (lastchar (schar string lastpos))
         (size :double))
    (case lastchar
      (#\L (setq size :long-double) (setf (schar string lastpos) #\Space))
      (#\F (setq size :single) (setf (schar string lastpos) #\Space))
      (#\. (setq string (concatenate 'string string "0"))))
    (unless (eq size :long-double)
      (let* ((epos (position #\E string))
             (dpos (position #\D string)))
        (if (eq size :double)
          (if epos
            (setf (schar string epos) #\d)
            (setq string (concatenate 'string string "d0")))
          (if dpos
            (setf (schar string dpos) #\e))))
      (values (ignore-errors (let* ((*readtable* *ffi-lisp-readtable*))
                               (read-from-string string)))))))

(defun read-c-number (stream char)
  (loop collect char into chars
        with class = :integer
        with hex = nil
        with octal = (eql char #\0)
        do (setq char (read-char stream nil nil))
        while (or (find char "0123456789abcdefABCDEFxulXUL.")
                  (and (find char "+-")
                       (char-equal (car (last chars)) #\e)))   ;signed exponent
        do (cond ((char-equal char #\x) 
                  (setq hex t octal nil))
                 ((and (not hex) (or (char-equal char #\.) (char-equal char #\e)))
                  (setq class :float)))
        finally
        (when char (unread-char char stream))
        (setq chars (coerce chars 'string))
        (if (eq class :integer)
          (return
            (values
             (ignore-errors
               (parse-integer chars
                              :start (if hex 2 0)
                              :radix (if hex 16 (if octal 8 10))
                              :junk-allowed t))))
          (return (eval-c-float-string chars)))))

(defun eval-c-number (string char)
  (loop collect char into chars
        with class = :integer
        with hex = nil
        with octal = (eql char #\0)
        with len = (length string)
        with i = 0
        do (setq char (if (< (incf i) len) (schar string i)))
        while (or (find char "0123456789abcdefABCDEFxulXUL.")
                  (and (find char "+-")
                       (char-equal (car (last chars)) #\e)))   ;signed exponent
        do (cond ((char-equal char #\x) 
                  (setq hex t octal nil))
                 ((and (not hex) (or (char-equal char #\.) (char-equal char #\e)))
                  (setq class :float)))
        finally
          (setq chars (coerce chars 'string))
          (if (eq class :integer)
            (return
              (values
               (ignore-errors
                 (parse-integer chars
                                :start (if hex 2 0)
                                :radix (if hex 16 (if octal 8 10))
                                :junk-allowed t))))
            (return (eval-c-float-string chars)))))

;;; For our purposes (evaluating constant expressions in C macros),
;;; we don't have to get this exactly right (since the result is
;;; only going to be used in a size-of or cast operation.)
;;; All pointer types would therefore look identical.

(defvar *the-ffi-pointer-type* (parse-foreign-type '(* t)))

;;; If we don't get this right the first time, we never will;
;;; if there's nothing better, just return the void type.

(defvar *the-ffi-void-type* (parse-foreign-type :void))

(defun parse-c-ffi-type (spec)
  (flet ((parse-it-or-lose (spec)
           (or (ignore-errors (parse-foreign-type spec))
               *the-ffi-void-type*))
         (make-type-name (name)
	   (escape-foreign-name (string name))))
    (cond ((eq (car (last spec)) 'c::*) *the-ffi-pointer-type*)
          ((member (car spec) '(c::|struct| c::|union|))
           (parse-it-or-lose (mapcar #'make-type-name spec)))
          ((null (cdr spec))
           (parse-it-or-lose (make-type-name (car spec))))
          (t
           ;;; A qualified primitive type
           (let* ((primitive (parse-it-or-lose (make-type-name (car (last spec))))))
             (if (eq primitive *the-ffi-void-type*)
               primitive
               (let* ((long 0)
                      (explicitly-signed nil))
                 (declare (fixnum long))
                 (if
                   (dolist (token (butlast spec) t)
                     (case token
                       (c::|unsigned| (setq explicitly-signed :unsigned))
                       (c::|signed| (setq explicitly-signed :signed))
                       (c::|long| (incf long))
                       (c::|short| (decf long))
                       (t (return nil))))
                   (cond ((typep primitive 'foreign-integer-type)
                          (let* ((prim-bits (foreign-type-bits primitive))
                                 (prim-signed (foreign-integer-type-signed primitive)))
                            (if (> long 1)
                              (make-foreign-integer-type :bits 64
                                                         :signed (or (not explicitly-signed)
                                                                     (eq explicitly-signed :signed)))
                              (if (< long 0)
                                (make-foreign-integer-type :bits 16
                                                           :signed (or (not explicitly-signed)
                                                                       (eq explicitly-signed :signed)))
                                (if (= long 1)
                                  (make-foreign-integer-type :bits 32
                                                             :signed (or (not explicitly-signed)
                                                                         (eq explicitly-signed :signed)))
                                  (make-foreign-integer-type :bits prim-bits
                                                             :signed
                                                             (case explicitly-signed
                                                               (:signed t)
                                                               (:unsigned nil)
                                                               (t prim-signed))))))))
                         ((and (= long 1)
                               (typep primitive 'foreign-double-float-type))
                          (parse-it-or-lose :long-double))
                         (t *the-ffi-void-type*))
                   *the-ffi-void-type*))))))))
                                                               
(defun eval-parsed-c-expression (expression constant-alist)
  (if (atom expression)
    (if (identifierp expression)
      (find-constant expression constant-alist)
      (if (typep expression 'character)
        (char-code expression)
        expression))
    (let* ((operator (car expression))
           (operands (cdr expression))
           (noperands (length operands)))
      (case operator
        (c::resolve-type (let* ((foreign-type  (ignore-errors (parse-c-ffi-type (car operands)))))
                           (when foreign-type
                             (setf (cdr expression) nil
                                   (car expression) foreign-type)
                             )))
        (c::curly-bracketed-list ())
        (t
         (if (typep operator 'foreign-type)
           operator
         (when (do* ((tail (cdr expression) (cdr tail)))
                    ((null tail) t)
                 (let* ((expr (car tail))
                        (value (eval-parsed-c-expression expr constant-alist)))
                   (unless value (return))
                   (unless (eq expr value)
                     (rplaca tail value))))
           (case noperands
             (1
              (let* ((operand (cadr expression)))
                (case operator
                  (c::! (if (zerop operand) 1 0))
                  (c::- (- operand))
		  (c::+ operand)
                  (c::~ (lognot operand))
                  (c::size-of
                   (let* ((bits (ignore-errors (ensure-foreign-type-bits operand))))
                     (when bits
                       (ash (+ bits 7) -3))))
                  (t
                   ;(break "~s" expression)
		   nil))))
             (2
              (let* ((a (car operands))
                     (b (cadr operands)))
                (case operator
                  (c::<< (ash a b))
                  (c::>> (ash a (- b)))
                  (c::* (* a b))
                  (c::/ (if (zerop b) 0 (values (floor a b)))) ; or maybe TRUNCATE ?
                  (c::+ (+ a b))
                  (c::- (- a b))
                  (c::\| (logior a b))
                  (c::\& (logand a b))
                  (c::cast (if (foreign-typep (setq b (eval-parsed-c-expression b constant-alist)) a)
                             b
                             (if (and (typep a 'foreign-integer-type)
                                      (not (foreign-integer-type-signed a))
                                      (typep b 'integer)
                                      (not (> (integer-length b)
                                              (foreign-integer-type-bits a))))
                               (logand b (1- (ash 1 (foreign-integer-type-bits a))))
                               (if (and (typep a 'foreign-pointer-type)
                                        (typep b 'integer)
                                        (<= (integer-length b) 16))
                                 (progn                                   
                                   (%int-to-ptr (logand b #xffffffff)))))))
                               
                                           
                  (t 
		   ;(break "binary op = ~s ~s ~s" operator a b)
		   nil))))
             (t
              ;(break "expression = ~s" expression)
	      nil)))))))))

(defun eval-c-expression (macro constant-alist macro-table)
  (let* ((string (ffi-macro-expansion macro))
         (len (length string)))
    (if (= len 0)
      1
      (progn
        (unless (ffi-macro-tokens macro)
          (let* ((transitive (gethash (ffi-macro-expansion macro) macro-table)))
            (if transitive
              (setf (ffi-macro-tokens macro) transitive
                    (gethash (ffi-macro-name macro) macro-table) transitive)
              (multiple-value-bind (tokens error) (ignore-errors (string-to-tokens string))
                (if error
                  (setf (ffi-macro-disposition macro) :bad-tokenize)
                  (setf (ffi-macro-tokens macro) tokens))))))
        (unless (ffi-macro-expression macro)
          (let* ((tokens (ffi-macro-tokens macro)))
            (when tokens
              (multiple-value-bind (expression error)
                  (ignore-errors (parse-c-expression tokens
                                                     :constants constant-alist
                                                     :expand-macros macro-table ))
                (if (or error (null expression))
                  (progn
                    ;(format t "~& parse failed: ~s ~s" (ffi-macro-name macro)  string)
                    ;(format t "~&  tokens = ~s, error = ~a" tokens error)
                    (setf (ffi-macro-disposition macro) :bad-parse))
                  (setf (ffi-macro-expression macro) expression))))))
        (let* ((expression (ffi-macro-expression macro)))
          (when expression (values (eval-parsed-c-expression expression constant-alist) t)))))))

;;; Repeatedly iterate over the macros until nothing new's defined.
(defun process-defined-macros (ffi-macros constant-alist parameterized-macros)
  (let* ((new-def ()))
    (loop
        (setq new-def nil)
        (dolist (macro ffi-macros)
          (unless (ffi-macro-disposition macro)
            (let* ((expansion (ffi-macro-expansion macro))
                   (name (ffi-macro-name macro))
                   (value nil))
              (if (string= name expansion)
                (setf (ffi-macro-disposition macro) t)
                (when (setq value (eval-c-expression macro constant-alist parameterized-macros))
                  (push (cons name value) constant-alist)
                  (setf (ffi-macro-disposition macro) t)
                  (setq new-def t))))))
        (unless new-def
          (return (values (reverse constant-alist) nil))))))

(defun reference-ffi-type (spec)
  (case (car spec)
    (:typedef (list :typedef (find-or-create-ffi-typedef (cadr spec))))
    (:struct-ref (list :struct (find-or-create-ffi-struct (cadr spec))))
    (:union-ref (list :union (find-or-create-ffi-union (cadr spec))))
    (:transparent-union-ref
     (list :transparent-union (find-or-create-ffi-transparent-union (cadr spec))))
    (:enum-ref `(:primitive :signed))
    (:function `(:primitive (* t)))
    (:pointer (list :pointer (reference-ffi-type (cadr spec))))
    (:array (list :array (cadr spec) (reference-ffi-type (caddr spec))))
    (:void *ffi-void-reference*)
    (t
     (list :primitive
           (ecase (car spec)
	     (:char (if (getf (ftd-attributes *parse-ffi-target-ftd*)
                              :signed-char)
		      '(:signed 8)
		      '(:unsigned 8)))
             (:signed-char  '(:signed 8))
             (:unsigned-char '(:unsigned 8))
             (:short '(:signed 16))
             (:unsigned-short '(:unsigned 16))
             ((:vec128 :unsigned-long-long-long) '(:unsigned 128))
             (:signed-long-long-long '(:signed 128))
             (:int '(:signed 32))
             (:long (ecase (or
                            (getf
                             (ftd-attributes *parse-ffi-target-ftd*)
                             :bits-per-long)
                            (getf
                             (ftd-attributes *parse-ffi-target-ftd*)
                             :bits-per-word))
                      (32 '(:signed 32))
                      (64 '(:signed 64))))
             (:unsigned  '(:unsigned 32))
             (:unsigned-long (ecase (or
                                     (getf
                                      (ftd-attributes *parse-ffi-target-ftd*)
                                      :bits-per-long)
                                     (getf
                                      (ftd-attributes *parse-ffi-target-ftd*)
                                      :bits-per-word))
                               (32 '(:unsigned 32))
                               (64 '(:unsigned 64))))
             (:long-long '(:signed 64))
             ((:vec64 :unsigned-long-long) '(:unsigned 64))
             (:float :float)
             (:double :double)
             (:long-double :long-float)
             (:complex-int :complex-int)
             (:complex-float :complex-float)
             (:complex-double :complex-double)
             (:complex-long-double :complex-long-float)
             (:long-long-long :long-long-long)
             #|(:void :void)|#)))))
             
             
(defun process-ffi-fieldlist (fields)
  (let* ((parsed-fields ()))
    (dolist (field fields (nreverse parsed-fields))
      (let* ((field-name (escape-foreign-name (car field)))
             (field-descr (cadr field)))
        (destructuring-bind (field-type offset width)
            (cdr field-descr)
          (push (cons field-name
                      (ecase (car field-descr)
                        (:field `(,(reference-ffi-type field-type) ,(ash offset 3) ,(ash width 3)))
                        (:bitfield `((:primitive (:unsigned ,width)) ,offset ,width))))
                parsed-fields))))))

(defun process-ffi-union (form)
  (destructuring-bind (source-info string fields &optional alignform)
      (cdr form)
    (declare (ignore source-info))
    (let* ((union (find-or-create-ffi-union string)))
      (setf (ffi-union-ordinal union) (incf *ffi-ordinal*))
      (when alignform
	(setf (ffi-union-alt-alignment-bits union) (cadr alignform)))
      (unless (ffi-union-fields union)
	(setf (ffi-union-fields union)
	      (process-ffi-fieldlist fields)))
      union)))

(defun process-ffi-transparent-union (form)
  (destructuring-bind (source-info string fields &optional alignform)
      (cdr form)
    (declare (ignore source-info))
    (let* ((union (find-or-create-ffi-transparent-union string)))
      (setf (ffi-transparent-union-ordinal union) (incf *ffi-ordinal*))
      (when alignform
	(setf (ffi-transparent-union-alt-alignment-bits union) (cadr alignform)))
      (unless (ffi-transparent-union-fields union)
	(setf (ffi-transparent-union-fields union)
	      (process-ffi-fieldlist fields)))
      union)))

(defun process-ffi-struct (form)
  (destructuring-bind (source-info string fields &optional alignform)
      (cdr form)
    (declare (ignore source-info))
    (let* ((struct (find-or-create-ffi-struct string)))
      (setf (ffi-struct-ordinal struct) (incf *ffi-ordinal*))
      (when alignform
	(setf (ffi-struct-alt-alignment-bits struct) (cadr alignform)))
      (unless (ffi-struct-fields struct)
	(setf (ffi-struct-fields struct)
	      (process-ffi-fieldlist fields)))
      struct)))

(defun process-ffi-objc-class (form)
  (destructuring-bind (source-info class-name superclass-form protocols ivars) (cdr form)
    (declare (ignore source-info))
    (let* ((class (find-or-create-ffi-objc-class class-name)))
      (setf (ffi-objc-class-ordinal class) (incf *ffi-ordinal*))
      (unless (ffi-objc-class-super-foreign-name class)
        (let* ((super-name (car superclass-form)))
          (unless (eq super-name :void)
            (setf (ffi-objc-class-super-foreign-name class)
                  super-name))))
      (unless (ffi-objc-class-protocol-names class)
        (setf (ffi-objc-class-protocol-names class) protocols))
      (unless (ffi-objc-class-own-ivars class)
        (setf (ffi-objc-class-own-ivars class)
              (process-ffi-fieldlist ivars)))
      class)))

(defun process-ffi-objc-method (form)
  (destructuring-bind (method-type source-info class-name category-name message-name arglist result-type) form
    (declare (ignore source-info category-name))
    (let* ((flags ()))
      (if (or (eq method-type :objc-class-method)
              (eq method-type :objc-protocol-class-method))
        (setf (getf flags :class) t))
      (if (or (eq method-type :objc-protocol-class-method)
              (eq method-type :objc-protocol-instance-method))
        (setf (getf flags :protocol) t))
      (let* ((message (find-or-create-ffi-objc-message message-name))
             (class-method-p (getf flags :class))
             (method
              (make-ffi-objc-method :class-name class-name
                                    :arglist (mapcar #'reference-ffi-type
                                                     arglist)
                                    :result-type (reference-ffi-type
                                                  result-type)
                                    :flags flags)))
        (unless (dolist (m (ffi-objc-message-methods message))
                  (when (and (equal (ffi-objc-method-class-name m)
                                    class-name)
                             (eq (getf (ffi-objc-method-flags m) :class)
                                 class-method-p))
                    (return t)))
          (push method (ffi-objc-message-methods message)))))))
      
(defun process-ffi-typedef (form)
  (let* ((string (caddr form))
         (def (find-or-create-ffi-typedef string)))
    (setf (ffi-typedef-ordinal def) (incf *ffi-ordinal*))
    (unless (ffi-typedef-type def)
      (setf (ffi-typedef-type def) (reference-ffi-type (cadddr form))))
    def))


(defun process-ffi-function (form)
  (let* ((name (caddr form))
         (ftype (cadddr form)))
    (make-ffi-function :string name
                       :arglist (mapcar #'reference-ffi-type (cadr ftype))
                       :return-value (reference-ffi-type (caddr ftype)))))

(defun process-ffi-macro (form)
  (let* ((name-form (caddr form))
         (expansion (cadddr form))
         (name name-form)
         (args nil)
         (space-pos (position #\space name-form)))
    (when space-pos
      (setq name (subseq name-form 0 space-pos))
      (let* ((open-pos (position #\( name-form))
             (close-pos (position #\) name-form)))
        (when (and open-pos close-pos (> close-pos open-pos))
          (let* ((arg-string (subseq name-form open-pos close-pos))
                 (arg-tokens (ignore-errors (string-to-tokens arg-string)))
                 (arg-names (let* ((l ()))
                              (dolist (arg-token arg-tokens (nreverse l))
                                (unless (or (eq arg-token 'c::|,|)
                                            (eq arg-token *lparen-symbol*))
                                  (push arg-token l)))))
                 (body-tokens (ignore-errors (string-to-tokens expansion))))
            (when (and arg-names body-tokens)
              (setq args (list arg-names body-tokens)
                    expansion name))))))
    (make-ffi-macro :name name :args args :expansion expansion)))

(defun process-ffi-enum (form)
  (declare (ignore form)))

(defun process-ffi-var (form)
  (let* ((name (caddr form))
         (type (cadddr form)))
    (cons name (reference-ffi-type type))))

(defun process-ffi-enum-ident (form)
  (cons (caddr form) (cadddr form)))

(defun ensure-referenced-type-defined (spec)
  (declare (ignorable spec))
  (when nil
  (ecase (car spec)
    (:primitive)
    (:typedef (define-typedef-from-ffi-info (cadr spec)))
    (:struct (ensure-struct-defined (cadr spec)))
    (:union (ensure-union-defined (cadr spec)))
    (:transparent-union (ensure-transparent-union-defined (cadr spec)))
    (:pointer (ensure-referenced-type-defined (cadr spec)))
    (:array (ensure-referenced-type-defined (caddr spec)))
    (:function (dolist (arg (ffi-function-arglist (cadr spec)))
                 (ensure-referenced-type-defined arg))
               (ensure-referenced-type-defined (ffi-function-return-value (cadr spec))))
    )))

  
(defun ensure-fields-defined (fields)
  (dolist (f fields)
    (let* ((ftype (cadr f)))
      (ensure-referenced-type-defined ftype))))

(defun record-global-objc-class (c)
  (when *ffi-global-objc-classes*
    (setf (gethash (ffi-objc-class-string c) *ffi-global-objc-classes*) c)))

(defun define-objc-class-from-ffi-info (c)
  (unless (ffi-objc-class-defined c)
    (setf (ffi-objc-class-defined c) t)
    (record-global-objc-class c)
    (ensure-fields-defined (ffi-objc-class-own-ivars c))))

(defun record-global-union (u)
  (when (and *ffi-global-unions* (ffi-union-fields u))
    (setf (gethash (ffi-union-reference u) *ffi-global-unions*) u)))

(defun record-global-transparent-union (u)
  (when (and *ffi-global-transparent-unions* (ffi-transparent-union-fields u))
    (setf (gethash (ffi-transparent-union-reference u) *ffi-global-transparent-unions*) u)))

(defun define-union-from-ffi-info (u)
  (unless (ffi-union-defined u)
    (setf (ffi-union-defined u) t)
    (record-global-union u)
    (when (ffi-union-name u)
      (let* ((fields (ffi-union-fields u)))
        (ensure-fields-defined fields)))))

(defun define-transparent-union-from-ffi-info (u)
  (unless (ffi-transparent-union-defined u)
    (setf (ffi-transparent-union-defined u) t)
    (record-global-transparent-union u)
    (when (ffi-transparent-union-name u)
      (let* ((fields (ffi-transparent-union-fields u)))
        (ensure-fields-defined fields)))))

(defun ensure-union-defined (u)
  (let* ((name (ffi-union-name u)))
    (if name
      (define-union-from-ffi-info u)
      (ensure-fields-defined (ffi-union-fields u)))))

(defun ensure-transparent-union-defined (u)
  (let* ((name (ffi-transparent-union-name u)))
    (if name
      (define-transparent-union-from-ffi-info u)
      (ensure-fields-defined (ffi-transparent-union-fields u)))))

(defun record-global-struct (s)
  (when (and *ffi-global-structs* (ffi-struct-fields s))
    (setf (gethash (ffi-struct-reference s) *ffi-global-structs*) s)))

(defun define-struct-from-ffi-info (s)
  (unless (ffi-struct-defined s)
    (setf (ffi-struct-defined s) t)
    (record-global-struct s)
    (when (typep (ffi-struct-name s) 'keyword)
      (let* ((fields (ffi-struct-fields s)))
        (ensure-fields-defined fields)))))

(defun ensure-struct-defined (s)
  (let* ((name (ffi-struct-name s)))
    (if (typep name 'keyword)
      (define-struct-from-ffi-info s)
      (ensure-fields-defined (ffi-struct-fields s)))))

(defun record-global-typedef (def)
  (when *ffi-global-typedefs*
    (setf (gethash (ffi-typedef-string def) *ffi-global-typedefs*) def)))
  
(defun define-typedef-from-ffi-info (def)
  (unless (ffi-typedef-defined def)
    (setf (ffi-typedef-defined def) t)
    (record-global-typedef def)
    (let* ((target (ffi-typedef-type def)))
      (unless (and (consp target)
		   (member (car target) '(:struct :union :transparent-union :primitive)))
	(ensure-referenced-type-defined target)))))

(defun record-global-constant (name val)
  (when *ffi-global-constants*
    (setf (gethash name *ffi-global-constants*) val)))
      
(defun emit-ffi-constant (name val)
  (record-global-constant name val))

(defun record-global-var (name type)
  (when *ffi-global-vars*
    (setf (gethash name *ffi-global-vars*) type)))

(defun emit-ffi-var (name type)
  (record-global-var name type))


(defun ffi-record-type-p (typeref)
  (case (car typeref)
    ((:struct :union :transparent-union) t)
    (:typedef (ffi-record-type-p (ffi-typedef-type (cadr typeref))))
    (t nil)))

(defun record-global-function (ffi-function)
  (when *ffi-global-functions*
    (setf (gethash (ffi-function-string ffi-function) *ffi-global-functions*)
	  ffi-function)))

(defun emit-function-decl (ffi-function)
  (let* ((args (ffi-function-arglist ffi-function))
         (retval (ffi-function-return-value ffi-function)))
    (if (eq (car (last args)) *ffi-void-reference*)
      (setq args (butlast args)))
    (dolist (arg args) (ensure-referenced-type-defined arg))
    (ensure-referenced-type-defined retval)
    (record-global-function ffi-function)))


(defun read-ffi-toplevel-form (stream eof-value)
  (loop
    (let* ((ch (peek-char  nil stream nil eof-value)))
      (cond ((eq ch eof-value) (return eof-value))
            ((eql ch #\() (return (read stream nil eof-value)))
            (t (read-line stream))))))

(defun parse-ffi (inpath)
  (let* ((*ffi-typedefs* (make-hash-table :test 'string= :hash-function 'sxhash))
         (*ffi-unions* (make-hash-table :test 'string= :hash-function 'sxhash))
         (*ffi-transparent-unions* (make-hash-table :test 'string= :hash-function 'sxhash))
         (*ffi-structs* (make-hash-table :test 'string= :hash-function 'sxhash))
         (*ffi-objc-classes* (make-hash-table :test 'string= :hash-function 'sxhash)) 
         (argument-macros (make-hash-table :test 'equal)))
    (let* ((defined-types ())
           (defined-constants ())
           (defined-macros ())
           (defined-functions ())
           (defined-vars ()))
      (with-open-file (in inpath)
        (let* ((*ffi-ordinal* -1))
          (let* ((*package* (find-package "KEYWORD")))
            (do* ((form (read-ffi-toplevel-form in :eof)
                        (read-ffi-toplevel-form in :eof)))
                 ((eq form :eof))
              (case (car form)
                (:struct (push (process-ffi-struct form) defined-types))
                (:objc-class (push (process-ffi-objc-class form) defined-types))
                ((:objc-class-method
                  :objc-instance-method
                  :objc-protocol-class-method
                  :objc-protocol-instance-method
                  )
                 (process-ffi-objc-method form))
                (:function (push (process-ffi-function form) defined-functions))
                (:macro (let* ((m (process-ffi-macro form))
                               (args (ffi-macro-args m)))
                          (if args
                            (setf (gethash (string (ffi-macro-name m)) argument-macros) args)
                            (push m defined-macros))))
                (:type (push (process-ffi-typedef form) defined-types))
                (:var (push (process-ffi-var form) defined-vars))
                (:enum-ident (push (process-ffi-enum-ident form) defined-constants))
                (:enum (process-ffi-enum form))
                (:union (push (process-ffi-union form) defined-types))
                (:transparent-union (push (process-ffi-transparent-union form) defined-types)))))
          (dolist (override *ffi-macro-overrides*)
            (let* ((m (process-ffi-macro override))
                   (args (ffi-macro-args m)))
              (if args
                (setf (gethash (string (ffi-macro-name m)) argument-macros) args)
                (push m defined-macros))))
          (multiple-value-bind (new-constants new-macros)
              (process-defined-macros defined-macros (reverse defined-constants) argument-macros)
	    ;; If we're really lucky, we might be able to turn some C macros
	    ;; into lisp macros.  We can probably turn some C macros into
	    ;; lisp constants.
            (declare (ignore new-macros))
            (dolist (x (reverse new-constants))
              (emit-ffi-constant (car x) (cdr x)))
            (dolist (x defined-vars)
              (emit-ffi-var (car x) (cdr x)))
            (dolist (x (sort defined-types #'< :key #'ffi-type-ordinal))
              (typecase x
                (ffi-struct (define-struct-from-ffi-info x))
                (ffi-union (define-union-from-ffi-info x))
                (ffi-transparent-union (define-transparent-union-from-ffi-info x))
                (ffi-typedef (define-typedef-from-ffi-info x))
                (ffi-objc-class (define-objc-class-from-ffi-info x))))
            (dolist (f defined-functions) (emit-function-decl f))))))))

(defun parse-standard-ffi-files (dirname &optional target)
  (let* ((backend (if target (find-backend target) *target-backend*))
         (ftd (backend-target-foreign-type-data backend))
         (*parse-ffi-target-ftd* ftd)
         (*target-ftd* ftd)
         (*target-backend* backend)
	 (d (use-interface-dir dirname ftd))
	 (interface-dir (merge-pathnames
			 (interface-dir-subdir d)
			 (ftd-interface-db-directory ftd)))
	 (*prepend-underscores-to-ffi-function-names*
          (getf (ftd-attributes ftd) :prepend-underscores))
	 (*ffi-global-typedefs* (make-hash-table :test 'string= :hash-function 'sxhash))
	 (*ffi-global-unions* (make-hash-table :test 'string= :hash-function 'sxhash))
         (*ffi-global-transparent-unions* (make-hash-table :test 'string= :hash-function 'sxhash))
	 (*ffi-global-structs* (make-hash-table :test 'string= :hash-function 'sxhash))
         (*ffi-global-objc-classes* (make-hash-table :test 'string= :hash-function 'sxhash))
         (*ffi-global-objc-messages* (make-hash-table :test 'string= :hash-function 'sxhash)) 
	 (*ffi-global-functions* (make-hash-table :test 'string= :hash-function 'sxhash))
	 (*ffi-global-constants* (make-hash-table :test 'string= :hash-function 'sxhash))
         (*ffi-global-vars* (make-hash-table :test 'string= :hash-function 'sxhash)))
         
    (dolist (f (directory (merge-pathnames ";C;**;*.ffi"
					   interface-dir)))
      (format t "~&~s ..." f)
      (parse-ffi f )
      (format t "~&"))
    (with-new-db-file (constants-cdbm (merge-pathnames
                                       "new-constants.cdb"
                                       interface-dir))
      (maphash #'(lambda (name def)
                   (db-define-constant constants-cdbm name def))
	       *ffi-global-constants*))
    (with-new-db-file (types-cdbm (merge-pathnames
				       "new-types.cdb"
				       interface-dir))
      (maphash #'(lambda (name def)
		   (declare (ignore name))
		   (save-ffi-typedef types-cdbm def))
	       *ffi-global-typedefs*))
    (with-new-db-file (records-cdbm (merge-pathnames
                                     "new-records.cdb"
                                     interface-dir))
      (maphash #'(lambda (name def)
		   (declare (ignore name))
                   (save-ffi-union records-cdbm def))
	       *ffi-global-unions*)
      (maphash #'(lambda (name def)
                   (declare (ignore name))
                   (save-ffi-transparent-union records-cdbm def))
               *ffi-global-transparent-unions*)
                         
      (maphash #'(lambda (name def)
		   (declare (ignore name))
		   (save-ffi-struct records-cdbm def))
	       *ffi-global-structs*))
    (with-new-db-file (function-cdbm (merge-pathnames
					   "new-functions.cdb"
					   interface-dir))
      (maphash #'(lambda (name def)
		   (declare (ignore name))
		   (save-ffi-function function-cdbm def))
	       *ffi-global-functions*))
    (with-new-db-file (class-cdbm (merge-pathnames
                                   "new-objc-classes.cdb"
                                   interface-dir))
      (maphash #'(lambda (name def)
                   (declare (ignore name))
                   (save-ffi-objc-class class-cdbm def))
               *ffi-global-objc-classes*))
    (with-new-db-file (vars-cdbm (merge-pathnames
                             "new-vars.cdb"
                             interface-dir))
      (maphash #'(lambda (name type)
                   (db-define-var vars-cdbm name type))
               *ffi-global-vars*))
    (with-new-db-file (methods-cdbm  (merge-pathnames
                                      "new-objc-methods.cdb"
                                      interface-dir))
      (maphash #'(lambda (name message)
                   (declare (ignore name))
                   (save-ffi-objc-message methods-cdbm message))
               *ffi-global-objc-messages*))
    (install-new-db-files ftd d)))

(defvar *c-readtable* (copy-readtable nil))
(setf (readtable-case *c-readtable*) :preserve)


;;; Each element of operators can be a symbol or a list of a symbol, a
;;; function, and args All the symbols must start with the character
;;; for which this is the macro-character fcn The entries must be in
;;; the right order, e.g. dictionary order, so any two symbols with a
;;; common prefix are adjacent in the list.  Furthermore each symbol
;;; in the list must be preceded by every non-empty leading substring
;;; of that symbol, since we only have one character of look-ahead in
;;; the stream.
(defun operator-macro (operators)
  ;; The tree is an alist keyed by character (with a nil key at the end for the default)
  ;; The cdr of each entry is either a symbol to produce, another decision tree,
  ;; or a list of a function to call and additional arguments for the function
  (let ((decision-tree (make-decision-tree operators)))
    (labels ((read-c-operator (stream char)
               (declare (ignore char))
               (loop with decision-tree = decision-tree
                     as char = (read-char stream nil nil)   ; eof => nil which works too
                     as elem = (assoc char decision-tree)
                     do (unless elem
                          (unread-char char stream)
                          (setq elem (assoc nil decision-tree)))
                        (setq elem (cdr elem))
                        (cond ((symbolp elem) 
                               (return elem))
                              ((symbolp (car elem)) 
                               (return (apply (car elem) stream (cdr elem))))
                              (t (setq decision-tree elem)))))
             (read-c-singleton-operator (stream char)
               (declare (ignore stream char))
               (first operators))
             (read-c-macro-character (stream char)
               (declare (ignore char))
               (apply (car decision-tree) stream (cdr decision-tree))))
      (cond ((symbolp decision-tree) #'read-c-singleton-operator)
            ((consp (car decision-tree)) #'read-c-operator)
            (t #'read-c-macro-character)))))

(defun make-decision-tree (operators)
  (labels ((recurse (operators chars-so-far) ;returns new operators and decision tree element
             (let ((next-char (aref (key (first operators))
                                    (length chars-so-far)))
                   (alist nil))
               (setq chars-so-far (append chars-so-far (list next-char)))
               (loop while operators
                 as key = (key (first operators))
                 while (every #'char= key chars-so-far)
                 do (if (= (length key) (length chars-so-far))
                      (push (cons nil (val (pop operators))) alist)
                      (multiple-value-bind (remaining-operators elem)
                          (recurse operators chars-so-far)
                        (push elem alist)
                        (setq operators remaining-operators))))
               (values operators 
                       (cons next-char (if (cdr alist) alist (cdar alist))))))
           (key (operator)
             (string (if (atom operator) operator (car operator))))
           (val (operator)
             (if (atom operator) operator (cdr operator))))
    (multiple-value-bind (left-over elem) (recurse operators nil)
      (when left-over
        (error "Malformed operators list ~S:~S" (ldiff operators left-over) left-over))
      (cdr elem))))

;;; Doesn't support the L prefix for wide characters.  What a complete kludge!
(defun c-read-string (stream single-quote)
  (loop with delimiter = (if single-quote #\' #\")
        as char = (read-char stream nil nil)
        do (cond ((null char)
                  (c-parse-error stream "Unmatched ~A" delimiter))
                 ((char= char delimiter)

                  (return (if single-quote
                              (char-code (car chars))
                              (coerce chars 'string))))
                 ((char= char #\\)
                  (setq char (read-char stream nil nil))
                  (unless char (c-parse-error stream "EOF after backslash in string"))
                  (let ((tem (assoc char '((#\n . #\newline)
                                           (#\t . #\tab)
                                           (#\v . #\^K)
                                           (#\b . #\backspace)
                                           (#\r . #\return)
                                           (#\f . #\page)
                                           (#\a . #\bell)
                                           (#\\ . #\\)
                                           (#\? . #\?)
                                           (#\' . #\')
                                           (#\" . #\")))))
                    (cond (tem (setq char (cdr tem)))
                          ((char<= #\0 char #\7)
                           (setq char (loop while (char<= #\0 char #\7) for count from 1
                                            with sum = 0
                                            do (setq sum (+ (* sum 8) (digit-char-p char)))
                                               (setq char (read-char stream nil nil))
                                            until (= count 3)
                                            finally 
                                              (unread-char char stream)
                                              (return (code-char sum)))))
                          ((char= char #\x)
                           (setq char (loop with sum = 0
                                            as char = (read-char stream)
                                            while (or (char<= #\0 char #\9)
                                                      (char<= #\A char #\F)
                                                      (char<= #\a char #\f))
                                            do (setq sum (+ (* sum 16) (digit-char-p char 16)))
                                            finally 
                                              (unread-char char stream)
                                              (return (code-char sum)))))))))
        collect char into chars))

(dolist (char '(#\_))
  (set-syntax-from-char char #\A *c-readtable*))

(dolist (op '( (c::! c::!=)
               ((\" c-read-string nil))
               (|#| |##|)            ; # and ## are pre-processor operators
               (c::% c::%=)
               (c::& c::&= c::&&)
               ((\' c-read-string t))
               (c::\()
               (c::\))
               (c::* c::*=)
               (c::+ c::+= c::++)
               (c::- c::-= c::-- c::->)
               (c::\,)
               (c::|.| c::|.*| c::|..| c::|...|)                 ; .01 will fail to parse as 0.01
               (c::/ c::/= (// c-read-line-comment) (/* c-read-block-comment))
               (c::\: c::\:\:)
               (c::\;)
               (c::< c::<= c::<< c::<<=)
               (c::= c::==)
               (c::> c::>= c::>> c::>>=)
               (c::?)
               (c::[)
               (c::\\)
               (c::])
               (c::^ c::^=)
               (c::{)
               (c::\| c::\|= c::\|\|)
               (c::})
               (c::~)
               ;; C++ doesn't define any meaning for these, treat them as operators
               (c::\$)
               (c::\@)
               (c::\`)
               ))
  (set-macro-character (char (string (if (atom (car op)) (car op) (caar op))) 0)
                       (operator-macro op)
                       nil              ;token-terminating
                       *c-readtable*))

(dolist (char '(#\0 #\1 #\2 #\3 #\4 #\5 #\6 #\7 #\8 #\9))
  (set-macro-character char 'read-c-number t *c-readtable*))


(defvar *backslash-symbol* 'c::|\\|)

(defvar *pending-tokens* ())

(defun unread-token (token)
  (push token *pending-tokens*)
  token)

(defun next-token (stream)
  (if *pending-tokens*
    (pop *pending-tokens*)
    (do* ((tok (read-preserving-whitespace stream nil :eof)
                       (read-preserving-whitespace stream nil :eof)))
                 ((or (not (eq tok *backslash-symbol*))
                      (not (eq (peek-char nil stream nil nil) #\Newline)))
                  tok)     
	     ;; Consume the #\newline that followed #\\.  Yecch.
	     (read-char stream nil nil))))
              
(defun string-to-tokens (string)
  (with-input-from-string (stream string)
    (let* ((*package* (find-package "C"))
           (*readtable* *c-readtable*)
           (tokens ()))
      (loop
          (let* ((token (next-token stream)))
            (when (eq token :eof)
              (return (nreverse tokens)))
            (push token tokens))))))


(defun identifierp (token)
  (and (symbolp token)
       (let ((char (char (symbol-name token) 0)))
	 (or (alpha-char-p char) (char= char #\_)))))


(defun evaluate-type-name (x)
  (let* ((name (car x)))
    (if (and (atom name) nil (null (cdr x)))
      name)))
      

(defun find-constant (x constants)
  (when (symbolp x)
    (cdr (assoc (string x) constants :test #'string=))))

(defun find-user-or-primitive-type (x)
  x
  nil)

(defun macro-definition (id table)
  (gethash (string id) table))

(defun expand-c-macro (name parameters arguments body stream macros-not-to-expand macro-table)
  (let ((expansion nil))
    (unless (= (length arguments) (length parameters))
      (c-parse-error stream "Expected ~D argument~:P to macro ~A but got ~D argument~:P."
			 (length parameters) name (length arguments)))
    (loop while body
      as token = (pop body)
      as next = (first body)
      as argno = (position token parameters) do
      (cond ((and argno (eq next *sharp-sharp-symbol*)) ; parameter ## token/parameter
	     (pop body)
	     (setq next (pop body))
	     (let ((next-argno (position next parameters)))
	       (push (intern (concatenate 'string (c-stringize-token-list (nth argno arguments))
					  (if next-argno
					    (c-stringize-token-list (nth next-argno arguments))
					    (c-stringize-token next))))
		     expansion)))
	    (argno			; normal parameter substitution
	     (setq expansion (nreconc (expand-c-macros-in-token-list (nth argno arguments)
                                                                     stream macros-not-to-expand
                                                                     macro-table)
				      expansion)))
	    ((and (eq token *sharp-sharp-symbol*) ; token ## parameter
		  (setq argno (position next parameters)))
	     (pop body)
	     (push (intern (concatenate 'string (c-stringize-token (pop expansion))
					(c-stringize-token-list (nth argno arguments))))
		   expansion))
	    ((and (eq token *sharp-symbol*)	; # parameter
		  (setq argno (position next parameters)))
	     (pop body)
	     (push (c-stringize-token-list (nth argno arguments)) expansion))
	    (t (push token expansion))))
    (expand-c-macros-in-token-list (nreverse expansion) stream
                                   (adjoin name macros-not-to-expand)
                                   macro-table)))

(defun expand-c-macros-in-token-list (tokens stream macros-not-to-expand macro-table)
  (loop
      while tokens
    as token = (pop tokens)
    as macro = (and (symbolp token)
                    (not (member token macros-not-to-expand))
                    (macro-definition token macro-table))
    if macro
    nconc (if (eq (first macro) :none) 
            (expand-c-macros-in-token-list (second macro) stream 
                                           (adjoin token macros-not-to-expand) macro-table)
            (expand-c-macro token (first macro)
                            (let ((open (pop tokens)))
                              (unless (eq open *lparen-symbol*)
                                (c-parse-error
                                 stream
                                 "~A where open parenthesis expected after macro name ~A"
                                 open token))
                              (loop with done = nil
                                    collect
                                    (loop as token = (if tokens (pop tokens)
                                                       (c-parse-error stream
                                                                      "Unexpected impossible EOF"))
                                          with level = 0
                                          do (cond ((eq token *lparen-symbol*) (incf level))
                                                   ((eq token *rparen-symbol*)
                                                    (if (plusp level) (decf level) (setq done t))))
                                                  until (or done (and (zerop level)
                                                                      (eq token *comma-symbol*)))
                                                  collect token)
                                    until done))
                            (second macro) stream macros-not-to-expand macro-table))
    else collect token))

(defun parse-c-expression (token-list &key  constants additional-constants 
                                          expand-macros)
  (labels ((next ()
             (unless token-list
               (fail "Unterminated expression or unbalanced parentheses"))
             (pop token-list))
           (peek ()
             (car token-list))
           (unread (token)
             (push token token-list))
           (collect-parenthesized ()
             (loop with level = 0
                   as token = (next)
                   until (and (eq token *rparen-symbol*) (= level 0))
                   collect token
                   do (case token
                        (#.*lparen-symbol* (incf level))
                        (#.*rparen-symbol* (decf level)))))
           (fail (format-string &rest format-arguments)
             (apply #'c-parse-error nil format-string format-arguments))
           (parse-expression ()
             (parse-assignment))
           (parse-assignment ()
             (let ((left (parse-conditional)))
               (if (eq (peek) 'c::|=|)
                 (let ((right (progn (next) (parse-assignment))))
                   (list 'setf left right))
                 left)))
           (parse-conditional ()
             (let ((left (parse-logical-or)))
               (if (eq (peek) 'c::|?|)
                 (let ((then (progn (next) (parse-expression)))
                       (else (if (eq (peek) 'c::|:|)
                               (progn (next) (parse-conditional))
                               (fail "~A where : was expected" (peek)))))
                   (list 'if left then else))
                 left)))
           (parse-logical-or ()
             (let ((left (parse-logical-and)))
               (loop while (eq (peek) 'c::|\|\||)
                     do (setq left (list (next) left (parse-logical-and))))
               left))
           (parse-logical-and ()
             (let ((left (parse-bitwise-ior)))
               (loop while (eq (peek) 'c::|&&|)
                     do (setq left (list (next) left (parse-bitwise-ior))))
               left))
           (parse-bitwise-ior ()
             (let ((left (parse-bitwise-xor)))
               (loop while (eq (peek) 'c::|\||)
                     do (setq left (list (next) left (parse-bitwise-xor))))
               left))
           (parse-bitwise-xor ()
             (let ((left (parse-bitwise-and)))
               (loop while (eq (peek) 'c::|\^|)
                     do (setq left (list (next) left (parse-bitwise-and))))
               left))
           (parse-bitwise-and ()
             (let ((left (parse-equality)))
               (loop while (eq (peek) 'c::|&|)
                     do (setq left (list (next) left (parse-equality))))
               left))
           (parse-equality ()
             (let ((left (parse-relational)))
               (loop while (member (peek) '(c::|==| c::|!=|))
                     do (setq left (list (next) left (parse-relational))))
               left))
           (parse-relational ()
             (let ((left (parse-shift)))
               (loop while (member (peek) '(c::|<| c::|>| c::|<=| c::|>=|))
                     do (setq left (list (next) left (parse-shift))))
               left))
           (parse-shift ()
             (let ((left (parse-additive)))
               (loop while (member (peek) '(c::|<<| c::|>>|))
                     do (setq left (list (next) left (parse-additive))))
               left))
           (parse-additive ()
             (let ((left (parse-multiplicative)))
               (loop while (member (peek) '(c::|+| c::|-|))
                     do (setq left (list (next) left (parse-multiplicative))))
               left))
           (parse-multiplicative ()
             (let ((left (parse-pointer-to-member)))
               (loop while (member (peek) '(c::|*| c::|/| c::|%|))
                     do (setq left (list (next) left (parse-pointer-to-member))))
               left))
           (parse-pointer-to-member ()
             (let ((left (parse-unary)))
               (loop while (member (peek) '(c::|.*| c::|->*|))
                     do (setq left (list (next) left (parse-unary))))
               left))
           (parse-unary ()              ; subsumes parse-cast, thus accepting some invalid programs
             (let ((token (next)))      ; --- doesn't support new and delete yet
               (cond ((member token '(c::|+| c::|-| c::|!| c::|~| c::|++| c::|--|))
                      ;;--- doesn't yet have special support for calling destructors...
                      (list token (parse-unary)))
                     ((eq token 'c::|*|)
                      (list 'c::indirect (parse-unary)))
                     ((eq token 'c::|&|)
                      (list 'c::address-of (parse-unary)))
                     ((eq token 'c::|sizeof|)
                      (unless (eq (peek) *lparen-symbol*)          ; Require open paren, maybe it's really optional
                        (fail "~A where ( was expected after sizeof" (peek)))
                      (next)            ; Swallow open parenthesis
                      `(c::size-of (c::resolve-type ,(loop as token = (next)
                                                           until (eq token *rparen-symbol*)
                                                           collect token))))
                     (t (parse-postfix token)))))
           (parse-postfix (token)
             (loop with left = (parse-primary token)
                   as right =  (peek) do
                   (setq left
                         (cond ((eq right *leftbracket-symbol*)
                                (next)          ; swallow [
                                (let ((subscript (parse-expression))
                                      (delimiter (next)))
                                  (unless (eq delimiter *rightbracket-symbol*)
                                  (fail "~A where ] expected after subscript" delimiter))
                                  `(c::aref ,left ,subscript)))
                               ((eq right *lparen-symbol*)
                                (next)          ; swallow open parenthesis
                                (let ((macro (and expand-macros
                                                  (identifierp left)
                                                  (macro-definition left expand-macros))))
                                  (cond ((and macro (not (eq (first macro) ':none)))
                                         ;; Function-like macro - constant-like was alraedy handled
                                         (let ((more-tokens 
                                                (expand-c-macro left (first macro)
                                                                (collect-macro-arguments)
                                                                (second macro) nil '()
                                                                expand-macros)))
                                           (setq token-list (append more-tokens token-list))
                                           (parse-expression)))
                                        ((valid-type-name? (list left))
                                         ;; This is an explicit type conversion
                                         `(c::cast ,(evaluate-type-name (list left))
                                           ,@(parse-argument-list)))
                                        (t nil #|`(c::call ,left ,@(parse-argument-list))|#))))
                               ((memq right '(c::|.| c::|->|))
                                (next)          ; swallow operator
                                `(,right ,left ,(parse-primary (next))))  ; parse-name, really
                               ((eq right 'c::|++|)
                                (next)          ; swallow operator
                                `(c::postfix++ ,left))
                               ((eq right 'c::|--|)
                                (next)          ; swallow operator
                                `(c::postfix-- ,left))
                               (t (return left))))))
           (parse-primary (token)
               (cond ((identifierp token)
                        ;; nonqualified name
                        (let ((value (find-constant token constants)))
                          (cond (value 
                                 (setq value (list value) token-list `(,@value #.*rparen-symbol* ,@token-list))
                                 (parse-parenthesized))
                                ((setq value (assoc token additional-constants))
                                 (cdr value))
                                ((and expand-macros
                                      (setq value (macro-definition-of-token token))
                                      (eq (first value) ':none))
                                 (setq token-list (append (expand-c-macros-in-token-list 
                                                           (second value) nil (list token) expand-macros)
                                                          token-list ))
                                 (parse-primary (next)))
                                (t token))))
                     ((eq token *lparen-symbol*)
                      (let* ((save-token-list token-list)
                            (type-name (collect-parenthesized))
                            (type (valid-type-name? type-name)))
                        (cond (type
                               ;; This is a cast
                               ;; Doing cast here is easier but accepts some invalid programs
                               (progn
                                 `(c::cast (,type) ,(parse-unary))))
                              (t
                               ;; These are ordinary grouping parentheses
                               (setq token-list save-token-list)
                               (parse-parenthesized)))))
                     ((eq token 'c::|{|)
                      (cons 'c::curly-bracketed-list
                            (loop as token = (next)
                                  until (eq token 'c::|}|)
                                  do (unread token)
                                  collect (parse-expression)
                                  do (let ((delimiter (peek)))
                                       (case delimiter
                                         (c::|,| (next))
                                         (c::|}| )
                                         (otherwise 
                                          (fail "~A where , or } was expected" delimiter)))))))
                     ((numberp token) token)
                     ((stringp token) token)
                     ((eq token 'c::|::|)
                      (fail "Unary :: is not supported yet"))
                     (t (fail "~A is unrecognized syntax in an expression" token))))
           (parse-parenthesized ()
             (prog1 (parse-expression)
               (let ((close (next)))
                 (unless (eq close *rparen-symbol*)
                   (fail "~A where ) was expected" close)))))
           (parse-argument-list ()
             (if (eq (peek) *rparen-symbol*)
               (progn (next) '())
               (loop as arg = (parse-expression)
                     as delimiter = (next)
                     collect arg
                     do (unless (or (eq delimiter 'c::|,|) (eq delimiter *rparen-symbol*))
                          (fail "~A where , or ) expected in function arguments"
                                delimiter))
                     while (eq delimiter 'c::|,|))))
           (collect-macro-arguments ()
             (loop with done = nil with first = t
                   collect (loop as token = (next) with level = 0
                                 do (cond ((eq token *lparen-symbol*) (incf level))
                                          ((eq token *rparen-symbol*) 
                                           (when first   ; () has to be treated as a special case
                                             (return-from collect-macro-arguments '()))
                                           (if (plusp level) (decf level) (setq done t))))
                                    (setq first nil)
                                 until (or done (and (zerop level) (eq token 'c::|,|)))
                                 collect token)
                   until done))
           
           ;;--- The following type-name routines don't support the full C++ syntax
           ;;--- Maybe we will add ::, arrays, functions, and God knows what later
           (valid-type-name? (token-list &optional tailp)
             (let* ((type (ignore-errors (parse-c-ffi-type token-list))))
               tailp
               (return-from valid-type-name?
                 (if (and type (not (eq type *the-ffi-void-type*)))
                   type)))
                                              
             ;; At least one type-specifier followed by an optional abstract-declarator
             ;; For now the type-specifier cannot contain :: and the only
             ;; abstract-declarators we accept are stars (not functions, arrays)
             (cond ((null token-list) tailp)
                   ((member (car token-list) '(c::|long| c::|short| c::|signed| c::|unsigned|))
                    (valid-type-name? (cdr token-list) t))
                   ((and (identifierp (car token-list))
                         (find-user-or-primitive-type (car token-list)))
                    (valid-type-name? (cdr token-list) t))
                   ;((eq (car token-list) '|::|) (valid-type-name? (cdr token-list)))
                   ((and tailp (eq (car token-list) 'c::|*|))
                    (valid-type-name? (cdr token-list) t))
                   (t nil))))
    (prog1 (parse-expression)
      (when token-list
        (fail "~{~A ~} left over after expression" token-list)))))

(defun c-parse-error (stream format &rest args)
  (declare (ignore stream))
  (apply #'error format args))

(pushnew '(c-parse-error . 1) ccl::*format-arg-functions* :test #'equal)

(defun macro-definition-of-token (x)
  (declare (ignore x)))

(defun c-stringize-token-list (tokens)
  (apply #'concatenate 'string (mapcar #'c-stringize-token tokens)))

(defun c-stringize-token (token)
  (etypecase token
    (symbol (string token))
    (string token)
    (number (princ-to-string token))))

(defun install-new-db-files (ftd d)
  (let* ((dir (merge-pathnames (interface-dir-subdir d)
			       (ftd-interface-db-directory ftd))))
    (flet ((rename-and-reopen (was-open path newpath)
	     (let* ((path (merge-pathnames path dir))
		    (newpath (merge-pathnames newpath dir)))
	       (when was-open
		 (cdb-close was-open))
	       (when (probe-file path)
		 (rename-file path
			      (concatenate 'string (namestring (truename path)) "-BAK")
			      :if-exists :supersede))
	       (rename-file newpath path)
	       (when was-open
		 (cdb-open path)))))
      (without-interrupts
       (setf (interface-dir-constants-interface-db-file d)
	     (rename-and-reopen
	      (interface-dir-constants-interface-db-file d)
	      "constants.cdb"
	      "new-constants.cdb"))
       (setf (interface-dir-functions-interface-db-file d)
	     (rename-and-reopen
	      (interface-dir-functions-interface-db-file d)
	      "functions.cdb"
	      "new-functions.cdb"))
       (setf (interface-dir-records-interface-db-file d)
	     (rename-and-reopen
	      (interface-dir-records-interface-db-file d)
	      "records.cdb"
	      "new-records.cdb"))
       (setf (interface-dir-types-interface-db-file d)
	     (rename-and-reopen
	      (interface-dir-types-interface-db-file d)
	      "types.cdb"
	      "new-types.cdb"))
       (setf (interface-dir-vars-interface-db-file d)
	     (rename-and-reopen
	      (interface-dir-vars-interface-db-file d)
	      "vars.cdb"
	      "new-vars.cdb"))
       (setf (interface-dir-objc-classes-interface-db-file d)
	     (rename-and-reopen
	      (interface-dir-objc-classes-interface-db-file d)
	      "objc-classes.cdb"
	      "new-objc-classes.cdb"))
       (setf (interface-dir-objc-methods-interface-db-file d)
	     (rename-and-reopen
	      (interface-dir-objc-methods-interface-db-file d)
	      "objc-methods.cdb"
	      "new-objc-methods.cdb")))))
  t)


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3
;;;; END FILE ./reference/ccl/library/parse-ffi.lisp
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4n









;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4n









;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4n









;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4n











\;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1
;;;; BEGIN FILE ./reference/ccl/library/pascal-strings.lisp
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2
;;;-*- Mode: Lisp; Package: CCL -*-
;;;
;;; Copyright 2003-2009 Clozure Associates
;;;
;;; Licensed under the Apache License, Version 2.0 (the "License");
;;; you may not use this file except in compliance with the License.
;;; You may obtain a copy of the License at
;;;
;;;     http://www.apache.org/licenses/LICENSE-2.0
;;;
;;; Unless required by applicable law or agreed to in writing, software
;;; distributed under the License is distributed on an "AS IS" BASIS,
;;; WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
;;; See the License for the specific language governing permissions and
;;; limitations under the License.


;;; Utilities for dealing with Pascal strings
;;;
;;; In 68K Mac Pascal, strings were represented by a pointer to a
;;; "length byte", which indicated the number of data bytes immediately
;;; following.

(in-package "CCL")

(eval-when (:compile-toplevel :load-toplevel :execute)
  ;; What else should be exported ?  What else should be added
  ;; to this file ?
  (export '(with-pstrs with-returned-pstrs %get-string)))

(defun %pstr-pointer (string pointer)
  (multiple-value-bind (s o n) (dereference-base-string string)
    (declare (fixnum o n))
    (%copy-ivector-to-ptr s o pointer 1 n)
    (setf (%get-byte pointer 0) n))
  nil)

(defun %pstr-segment-pointer (string pointer start end)
  (declare (fixnum start end))
  (let* ((n (- end start)))
    (multiple-value-bind (s o) (dereference-base-string string)
      (declare (fixnum o))
      (%copy-ivector-to-ptr s (the fixnum (+ o start)) pointer 1 n)
    (setf (%get-byte pointer 0) n)
    nil)))

(defun %get-string (pointer)
  (let* ((len (%get-unsigned-byte pointer)))
    (%copy-ptr-to-ivector
     pointer
     1
     (make-string len :element-type 'base-char)
     0
     len)))

(defun (setf %get-string) (lisp-string pointer)
  (let* ((len (length lisp-string)))
    (multiple-value-bind (string offset)
        (dereference-base-string lisp-string)
      (setf (%get-unsigned-byte pointer) len)
      (%copy-ivector-to-ptr string offset pointer 1 len))
    lisp-string))

(defmacro with-pstr ((sym str &optional start end) &rest body &environment env)
  (multiple-value-bind (body decls) (parse-body body env nil)
    (if (and (base-string-p str) (null start) (null end))
      (let ((strlen (%i+ (length str) 1)))
        `(%stack-block ((,sym ,strlen))
           ,@decls
           (%pstr-pointer ,str ,sym)
           ,@body))
      (let ((strname (gensym))
            (start-name (gensym))
            (end-name (gensym)))
        `(let ((,strname ,str)
               ,@(if (or start end)
                   `((,start-name ,(or start 0))
                     (,end-name ,(or end `(length ,strname))))))
           (%vstack-block (,sym
                           (the fixnum
                             (1+
                              (the fixnum
                                ,(if (or start end)
                                     `(byte-length
                                       ,strname ,start-name ,end-name)
                                     `(length ,strname))))))
             ,@decls
             ,(if (or start end)
                `(%pstr-segment-pointer ,strname ,sym ,start-name ,end-name)
                `(%pstr-pointer ,strname ,sym))
             ,@body))))))


(defmacro with-returned-pstr ((sym str &optional start end) &body body)
   `(%stack-block ((,sym 256))
      ,(if (or start end)
         `(%pstr-segment-pointer ,str ,sym ,start ,end)
         `(%pstr-pointer ,str ,sym))
      ,@body))

(defmacro with-pstrs (speclist &body body)
   (with-specs-aux 'with-pstr speclist body))

(defmacro with-returned-pstrs (speclist &body body)
   (with-specs-aux 'with-returned-pstr speclist body))


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3
;;;; END FILE ./reference/ccl/library/pascal-strings.lisp
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4n









;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4n









;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4n









;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4n











\;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1
;;;; BEGIN FILE ./reference/ccl/library/serial-streams.lisp
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2
;;;-*-Mode: LISP; Package: CCL -*-
;;;
;;; Copyright 1994-2010 Clozure Associates
;;;
;;; Licensed under the Apache License, Version 2.0 (the "License");
;;; you may not use this file except in compliance with the License.
;;; You may obtain a copy of the License at
;;;
;;;     http://www.apache.org/licenses/LICENSE-2.0
;;;
;;; Unless required by applicable law or agreed to in writing, software
;;; distributed under the License is distributed on an "AS IS" BASIS,
;;; WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
;;; See the License for the specific language governing permissions and
;;; limitations under the License.

(in-package "CCL")

;;; Real (RS-232) serial devices are pretty rare these days;
;;; USB to serial devices are fairly common.

(defclass serial-stream (fd-stream
                         buffered-binary-io-stream-mixin
                         buffered-character-io-stream-mixin)
    ())

(defmethod select-stream-class ((s serial-stream) in-p out-p char-p)
  (declare (ignore in-p out-p char-p))
  'serial-stream)


(defun ttyname (fd)
  (let* ((p (#_ttyname fd)))
    (if (%null-ptr-p p)
      "<unknown>"
      (%get-cstring p))))

(defvar *baud-rates*
  '((50 . #.#$B50)
    (75 . #.#$B75)
    (110 . #.#$B110)
    (134 . #.#$B134)
    (150 . #.#$B150)
    (200 . #.#$B200)
    (300 . #.#$B300)
    (600 . #.#$B600)
    (1200 . #.#$B1200)
    (1800 . #.#$B1800)
    (2400 . #.#$B2400)
    (4800 . #.#$B4800)
    (9600 . #.#$B9600)
    (19200 . #.#$B19200)
    (38400 . #.#$B38400)
    (57600 . #.#$B57600)
    (115200 . #.#$B115200)
    (230400 . #.#$B230400)
    ;; It's the world's most advanced Operating System!
    #-darwin-target
    (460800 . #.#$B460800)))

(defun encode-baud-rate (rate)
  (or (cdr (assoc rate *baud-rates*))
      (error "Unsupported baud rate - ~s." rate)))

;;; There are supposedly ~60 flags that can be set in a termios
;;; structure; this only allows a few of them to be set explicitly,
;;; and is otherwise oriented towards "communicating with a device
;;; via a serial port" rather than "comminicating with a user via
;;; a serial port."
(defun setup-serial-device (fd &key (baud-rate nil baud-rate-p)
                               (parity nil parity-p)
                               (char-bits nil char-bits-p)
                               (stop-bits nil stop-bits-p)
                               (flow-control nil flow-control-p)
                               &allow-other-keys)
  (rlet ((settings :termios))
    (flet ((check-error (result operation)
             (if (< result 0)
               (error "Error trying to ~a for fd ~d : ~a" operation fd (%strerror (%get-errno)))
               result)))
      (check-error (#_tcgetattr fd settings) "get serial settings")
      (let* ((orig-cflag (pref settings :termios.c_cflag))
             (cflag orig-cflag)
             (orig-iflag (pref settings :termios.c_cflag))
             (iflag orig-iflag)
             (orig-oflag (pref settings :termios.c_oflag))
             (oflag orig-oflag)
             (orig-lflag (pref settings :termios.c_lflag))
             (lflag orig-lflag))
        ;; Inhibit input/output translation/canonicalization
        (setq oflag 0)
        (setq iflag (logandc2 iflag
                              (logior #$IGNBRK #$BRKINT #$ICRNL
                                      #$INLCR #$PARMRK #$INPCK #$ISTRIP)))
        (setq lflag (logandc2 lflag
                              (logior #$ECHO #$ECHONL #$ICANON #$IEXTEN #$ISIG)))
        (when baud-rate-p
          (check-error (#_cfsetspeed settings (encode-baud-rate baud-rate))
                       "set baud rate"))

        (when parity-p
          (setq cflag
                (ecase parity
                  (:even (logior #$PARENB (logandc2 cflag #$PARODD)))
                  (:odd  (logior #$PARENB (logior cflag #$PARODD)))
                  ((:none nil) (logandc2 cflag #$PARENB)))))
        (when char-bits-p
          (setq cflag
                (logior (logandc2 cflag #$CSIZE)
                        (ecase char-bits
                          (5 #$CS5)
                          (6 #$CS6)
                          (7 #$CS7)
                          (8 #$CS8)))))
        (when flow-control-p
          (setq iflag (logandc2 iflag (logior #$IXON #$IXOFF))
                cflag (logandc2 cflag #$CRTSCTS))
          
          (ecase flow-control
            ((:hardware :rts/cts) (setq cflag (logior cflag #$CRTSCTS)))
            ((:software :xon/xoff) (setq iflag (logior iflag #$IXON #$IXOFF)))
            ((:none nil))))
        (when stop-bits-p
          (setq cflag
                (ecase stop-bits
                  (1 (logandc2 cflag #$CSTOPB))
                  (2 (logior cflag #$CSTOPB)))))
        (unless (eql cflag orig-cflag)
          (setf (pref settings :termios.c_cflag) cflag))
        (unless (eql iflag orig-iflag)
          (setf (pref settings :termios.c_iflag) iflag))
        (unless (eq lflag orig-lflag)
          (setf (pref settings :termios.c_lflag) lflag))
        (unless (eq oflag orig-oflag)
          (setf (pref settings :termios.c_lflag) oflag))
        (check-error (#_tcsetattr fd #$TCSANOW settings) "set serial settings")))))

(defmethod setup-serial-stream ((s serial-stream) &rest initargs)
  (apply #'setup-serial-device (stream-device s :input) initargs))
      

(defun get-serial-attributes (fd)
  (flet ((check-error (result operation)
           (if (< result 0)
             (error "Error trying to ~a for fd ~d : ~a" operation fd (%strerror (%get-errno)))
             result)))
    (rlet ((settings :termios))
      (check-error (#_tcgetattr fd settings) "get serial attributes")
      (let* ((cflag (pref settings :termios.c_cflag)))
        (values
         (car (rassoc
                   (check-error (#_cfgetispeed settings) "determine baud rate")
                   *baud-rates*))
         (if (logtest #$PARENB cflag)
                (if (logtest #$PARODD cflag)
                  :odd
                  :even)
                :none)
         (case (logand #$CSIZE cflag)
                (#.#$CS5 5)
                (#.#$CS6 6)
                (#.#$CS7 7)
                (#.#$CS8 8))
         (if (logtest cflag #$CSTOPB)
                2
                1)
         (if (logtest cflag #$CRTSCTS)
           :rts/cts
           (if (logtest (pref settings :termios.c_iflag)
                        (logior #$IXON #$IXOFF))
             :xon/xoff
             :none)))))))

(defmethod print-object ((s serial-stream) out)
  (print-unreadable-object (s out :type t :identity t)
    (let* ((ioblock (stream-ioblock s nil))
           (fd (and ioblock (ioblock-device ioblock)))
           (encoding (and ioblock (encoding-name (ioblock-encoding ioblock)))))
      (if fd
        (multiple-value-bind (baud parity char-bits stop-bits flow-control)
            (ignore-errors (get-serial-attributes fd))
          (format out "~s (~a [~d]) ~d,~c~d~d ~a"
                  encoding
                  (ttyname fd)
                  fd
                  baud
                  (case parity
                    (:even #\E)
                    (:odd #\O)
                    (t #\N))
                  char-bits
                  stop-bits
                  (string-downcase flow-control)))
        (format out "~s" :closed)))))

(defun make-serial-stream (device-name
                           &rest initargs
                           &key (format :bivalent)
                           external-format
                           (class 'serial-stream)
                           sharing
                           (basic nil)
                           (auto-close t)
                           input-timeout
                           output-timeout
                           deadline
                           &allow-other-keys)
  
  (let* ((external-format (normalize-external-format t external-format))
         (element-type (ecase format
                         ((nil :text) 'character)
                         ((:binary :bivalent) '(unsigned-byte 8))))
         (fd (fd-open device-name (logior #$O_RDWR #$O_NOCTTY))))
    (when (< fd 0)
      (error "Error opening ~s: ~a" device-name (%strerror (%get-errno))))
    (unless (isatty fd)
      (fd-close fd)
      (error "Not a serial device: ~s." device-name))
    (let* ((stream (make-fd-stream fd
                                   :class class
                                   :direction :io
                                   :element-type element-type
                                   :sharing sharing
                                   :character-p (not (eq format :binary))
                                   :encoding (external-format-character-encoding external-format)
                                   :line-termination (external-format-line-termination external-format)
                                   :basic basic
                                   :auto-close auto-close
                                   :input-timeout input-timeout
                                   :output-timeout output-timeout
                                   :deadline deadline)))
      (apply #'setup-serial-stream stream initargs)
      stream)))
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3
;;;; END FILE ./reference/ccl/library/serial-streams.lisp
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4n









;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4n









;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4n









;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4n











\;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1
;;;; BEGIN FILE ./reference/ccl/library/splay-tree.lisp
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2
;;;-*-Mode: LISP; Package: CCL -*-
;;;
;;; Copyright 2003-2009 Clozure Associates
;;;
;;; Licensed under the Apache License, Version 2.0 (the "License");
;;; you may not use this file except in compliance with the License.
;;; You may obtain a copy of the License at
;;;
;;;     http://www.apache.org/licenses/LICENSE-2.0
;;;
;;; Unless required by applicable law or agreed to in writing, software
;;; distributed under the License is distributed on an "AS IS" BASIS,
;;; WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
;;; See the License for the specific language governing permissions and
;;; limitations under the License.

(in-package "CCL")


;;; A (partial) implementation of SPLAY-TREEs, which are binary trees
;;; that reorganize themselves so that the most recently accessed keys
;;; cluster near the tree's root.

(defstruct (tree-node
             (:constructor make-tree-node (key value)))
  key
  value
  left                                  ; the child < this key, or NIL
  right                                 ; the child > this key, or NIL
  parent                                ; we're the root if NIL.   
  )

(defmethod print-object ((node tree-node) stream)
  (print-unreadable-object (node stream :type t :identity t)
    (let* ((*print-circle* t))
      (format stream "~s -> ~s" (tree-node-key node) (tree-node-value node)))))


(defun tree-node-is-leaf (n)
  (and (null (tree-node-left n))
       (null (tree-node-right n))))

(defun tree-node-is-root (n)
  (null (tree-node-parent n)))

;;; Is node the left child of its parent ?
(defun tree-node-is-left (n)
  (let* ((parent (tree-node-parent n)))
    (and parent (eq n (tree-node-left parent)))))

(defun tree-node-is-right (n)
  (let* ((parent (tree-node-parent n)))
    (and parent (eq n (tree-node-right parent)))))

(defun tree-node-set-right (node newright)
  (when (setf (tree-node-right node) newright)
    (setf (tree-node-parent newright) node)))

(defun tree-node-set-left (node newleft)
  (when (setf (tree-node-left node) newleft)
    (setf (tree-node-parent newleft) node)))             

(defun tree-node-replace-child (node old new)
  (if (eq old (tree-node-left node))
    (tree-node-set-left node new)
    (tree-node-set-right node new)))

(defstruct (splay-tree (:constructor %make-splay-tree))
  (root nil #|:type (or null splay-tree-node)|#)
  equal                                 ; true if x = y
  less                                  ; true if x < y
  (count 0)
  )

(defmethod print-object ((tree splay-tree) stream)
  (print-unreadable-object (tree stream :type t :identity t)
    (format stream "count = ~d, root = ~s"
	    (splay-tree-count tree)
	    (splay-tree-root tree))))
	    


;;; Returns tree-node or NIL
(defun binary-tree-get (tree key)
  (do* ((equal (splay-tree-equal tree))
        (less (splay-tree-less tree))
        (node (splay-tree-root tree)))
       ((null node))
    (let* ((node-key (tree-node-key node)))
      (if (funcall equal key node-key)
        (return node)
        (if (funcall less key node-key)
          (setq node (tree-node-left node))
          (setq node (tree-node-right node)))))))

;;; No node with matching key exists in the tree
(defun binary-tree-insert (tree node)
  (let* ((root (splay-tree-root tree)))
    (if (null root)
      (setf (splay-tree-root tree) node)
      (do* ((less (splay-tree-less tree))
            (key (tree-node-key node))
            (current root)
            (parent nil))
           ((null current)
            (if (funcall less key (tree-node-key parent))
              (tree-node-set-left parent node)
              (tree-node-set-right parent node)))
        (setq parent current)
        (if (funcall less key (tree-node-key current))
          (setq current (tree-node-left current))
          (setq current (tree-node-right current))))))
  (incf (splay-tree-count tree)))
    
            
;;; Replace the node's parent with the node itself, updating the
;;; affected children so that the binary tree remains properly
;;; ordered.
(defun binary-tree-rotate (tree node)
  (when (and node (not (tree-node-is-root node)))
    (let* ((parent (tree-node-parent node))
           (grandparent (if parent (tree-node-parent parent)))
           (was-left (tree-node-is-left node)))
      (if grandparent
        (tree-node-replace-child grandparent parent node)
        (setf (splay-tree-root tree) node
              (tree-node-parent node) nil))
      (if was-left
        (progn
          (tree-node-set-left parent (tree-node-right node))
          (tree-node-set-right node parent))
        (progn
          (tree-node-set-right parent (tree-node-left node))
          (tree-node-set-left node parent))))))

;;; Keep rotating the node (and maybe its parent) until the node's the
;;; root of tree.
(defun splay-tree-splay (tree node)
  (when node
    (do* ()
         ((tree-node-is-root node))
      (let* ((parent (tree-node-parent node))
             (grandparent (tree-node-parent parent)))
        (cond ((null grandparent)
               (binary-tree-rotate tree node)) ; node is now root
              ((eq (tree-node-is-left node)
                   (tree-node-is-left parent))
               (binary-tree-rotate tree parent)
               (binary-tree-rotate tree node))
              (t
               (binary-tree-rotate tree node)
               (binary-tree-rotate tree node)))))))


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;
;;; The more-or-less public API follows.
;;;
;;; I suppose that we should support DELETE as well, and perhaps
;;; UPDATE (find the node and modify its key in place.)  For now,
;;; SPLAY-TREE-PUT assumes that no node with a matching key exists.
;;; Access to the tree has to be serialized by the caller.

(defun splay-tree-get (tree key &optional default)
  (let* ((node (binary-tree-get tree key)))
    (if node
      (progn
        (splay-tree-splay tree node)
        (tree-node-value node))
      default)))

(defun splay-tree-put (tree key value)
  (let* ((node (make-tree-node key value)))
    (binary-tree-insert tree node)
    (splay-tree-splay tree node)
    value))

;;; Note that the tree wants two comparison functions.  This may
;;; increase the chance that builtin CL functions can be used; a tree
;;; whose keys are real numbers could use #'= and #'<, for instance.
;;; Using two comparison functions is (at best) only slightly better
;;; than insisting that a single comparison function return (values
;;; equal less), or (member -1 0 1), or some other convention.

(defun make-splay-tree (equal less)
  (check-type equal function)
  (check-type less function)
  (%make-splay-tree :equal equal :less less))

;;; Do an inorder traversal of the splay tree, applying function F
;;; to the value of each node.

(defun map-splay-tree (tree f)
  (labels ((map-tree-node (node)
	     (when node
	       (map-tree-node (tree-node-left node))
	       (funcall f (tree-node-value node))
	       (map-tree-node (tree-node-right node)))))
    (map-tree-node (splay-tree-root tree))))

(defun map-splay-tree-keys-and-values (tree f)
  (labels ((map-tree-node (node)
	     (when node
	       (map-tree-node (tree-node-left node))
	       (funcall f (tree-node-key node) (tree-node-value node))
	       (map-tree-node (tree-node-right node)))))
    (map-tree-node (splay-tree-root tree)))) 
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3
;;;; END FILE ./reference/ccl/library/splay-tree.lisp
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4n









;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4n









;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4n









;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4n











\;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1
;;;; BEGIN FILE ./reference/ccl/library/lisp-package.lisp
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2
;;;-*-Mode: LISP; Package: ccl -*-
;;;
;;; Copyright 1994-2009 Clozure Associates
;;;
;;; Licensed under the Apache License, Version 2.0 (the "License");
;;; you may not use this file except in compliance with the License.
;;; You may obtain a copy of the License at
;;;
;;;     http://www.apache.org/licenses/LICENSE-2.0
;;;
;;; Unless required by applicable law or agreed to in writing, software
;;; distributed under the License is distributed on an "AS IS" BASIS,
;;; WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
;;; See the License for the specific language governing permissions and
;;; limitations under the License.

; lisp-package.lisp
; Define a lisp package that attempts to behave like CLTL-1.

(in-package "CCL")

(defpackage "LISP"
  (:use )
  (:import-from "COMMON-LISP"
                "&ALLOW-OTHER-KEYS"
                "&AUX"
                "&BODY"
                "&ENVIRONMENT"
                "&KEY"
                "&OPTIONAL"
                "&REST"
                "&WHOLE"
                "*"
                "**"
                "***"
                "*DEBUG-IO*"
                "*DEFAULT-PATHNAME-DEFAULTS*"
                "*ERROR-OUTPUT*"
                "*FEATURES*"
                "*LOAD-VERBOSE*"
                "*MACROEXPAND-HOOK*"
                "*PACKAGE*"
                "*PRINT-ARRAY*"
                "*PRINT-BASE*"
                "*PRINT-CASE*"
                "*PRINT-CIRCLE*"
                "*PRINT-ESCAPE*"
                "*PRINT-GENSYM*"
                "*PRINT-LENGTH*"
                "*PRINT-LEVEL*"
                "*PRINT-PRETTY*"
                "*PRINT-RADIX*"
                "*QUERY-IO*"
                "*RANDOM-STATE*"
                "*READ-BASE*"
                "*READ-DEFAULT-FLOAT-FORMAT*"
                "*READ-SUPPRESS*"
                "*READTABLE*"
                "*STANDARD-INPUT*"
                "*STANDARD-OUTPUT*"
                "*TERMINAL-IO*"
                "*TRACE-OUTPUT*"
                "+"
                "++"
                "+++"
                "-"
                "/"
                "//"
                "///"
                "/="
                "1+"
                "1-"
                "<"
                "<="
                "="
                ">"
                ">="
                "ABS"
                "ACONS"
                "ACOS"
                "ACOSH"
                "ADJOIN"
                "ADJUST-ARRAY"
                "ADJUSTABLE-ARRAY-P"
                "ALPHA-CHAR-P"
                "ALPHANUMERICP"
                "AND"
                "APPEND"
                "APPLY"
                "APROPOS"
                "APROPOS-LIST"
                "AREF"
                "ARRAY"
                "ARRAY-DIMENSION"
                "ARRAY-DIMENSION-LIMIT"
                "ARRAY-DIMENSIONS"
                "ARRAY-ELEMENT-TYPE"
                "ARRAY-HAS-FILL-POINTER-P"
                "ARRAY-IN-BOUNDS-P"
                "ARRAY-RANK"
                "ARRAY-RANK-LIMIT"
                "ARRAY-ROW-MAJOR-INDEX"
                "ARRAY-TOTAL-SIZE"
                "ARRAY-TOTAL-SIZE-LIMIT"
                "ARRAYP"
                "ASH"
                "ASIN"
                "ASINH"
                "ASSERT"
                "ASSOC"
                "ASSOC-IF"
                "ASSOC-IF-NOT"
                "ATAN"
                "ATANH"
                "ATOM"
                "BIGNUM"
                "BIT"
                "BIT-AND"
                "BIT-ANDC1"
                "BIT-ANDC2"
                "BIT-EQV"
                "BIT-IOR"
                "BIT-NAND"
                "BIT-NOR"
                "BIT-NOT"
                "BIT-ORC1"
                "BIT-ORC2"
                "BIT-VECTOR"
                "BIT-VECTOR-P"
                "BIT-XOR"
                "BLOCK"
                "BOOLE"
                "BOOLE-1"
                "BOOLE-2"
                "BOOLE-AND"
                "BOOLE-ANDC1"
                "BOOLE-ANDC2"
                "BOOLE-C1"
                "BOOLE-C2"
                "BOOLE-CLR"
                "BOOLE-EQV"
                "BOOLE-IOR"
                "BOOLE-NAND"
                "BOOLE-NOR"
                "BOOLE-ORC1"
                "BOOLE-ORC2"
                "BOOLE-SET"
                "BOOLE-XOR"
                "BOTH-CASE-P"
                "BOUNDP"
                "BREAK"
                "BUTLAST"
                "BYTE"
                "BYTE-POSITION"
                "BYTE-SIZE"
                "CAAAAR"
                "CAAADR"
                "CAAAR"
                "CAADAR"
                "CAADDR"
                "CAADR"
                "CAAR"
                "CADAAR"
                "CADADR"
                "CADAR"
                "CADDAR"
                "CADDDR"
                "CADDR"
                "CADR"
                "CALL-ARGUMENTS-LIMIT"
                "CAR"
                "CASE"
                "CATCH"
                "CCASE"
                "CDAAAR"
                "CDAADR"
                "CDAAR"
                "CDADAR"
                "CDADDR"
                "CDADR"
                "CDAR"
                "CDDAAR"
                "CDDADR"
                "CDDAR"
                "CDDDAR"
                "CDDDDR"
                "CDDDR"
                "CDDR"
                "CDR"
                "CEILING"
                "CERROR"
                "CHAR"
                "CHAR-CODE"
                "CHAR-CODE-LIMIT"
                "CHAR-DOWNCASE"
                "CHAR-EQUAL"
;                "CHAR-FONT"
                "CHAR-GREATERP"
                "CHAR-INT"
                "CHAR-LESSP"
                "CHAR-NAME"
                "CHAR-NOT-EQUAL"
                "CHAR-NOT-GREATERP"
                "CHAR-NOT-LESSP"
                "CHAR-UPCASE"
                "CHAR/="
                "CHAR<"
                "CHAR<="
                "CHAR="
                "CHAR>"
                "CHAR>="
                "CHARACTER"
                "CHARACTERP"
                "CHECK-TYPE"
                "CIS"
                "CLEAR-INPUT"
                "CLEAR-OUTPUT"
                "CLOSE"
                "CLRHASH"
                "CODE-CHAR"
                "COERCE"
                "COMPILATION-SPEED"
                "COMPILE"
                "COMPILE-FILE"
                "COMPILED-FUNCTION"
                "COMPILED-FUNCTION-P"
                "COMPLEX"
                "COMPLEXP"
                "CONCATENATE"
                "COND"
                "CONJUGATE"
                "CONS"
                "CONSP"
                "CONSTANTP"
                "COPY-ALIST"
                "COPY-LIST"
                "COPY-READTABLE"
                "COPY-SEQ"
                "COPY-SYMBOL"
                "COPY-TREE"
                "COS"
                "COSH"
                "COUNT"
                "COUNT-IF"
                "COUNT-IF-NOT"
                "CTYPECASE"
                "DECF"
                "DECLARATION"
                "DECLARE"
                "DECODE-FLOAT"
                "DECODE-UNIVERSAL-TIME"
                "DEFCONSTANT"
                "DEFINE-MODIFY-MACRO"
                "DEFMACRO"
                "DEFPARAMETER"
                "DEFSETF"
                "DEFSTRUCT"
                "DEFTYPE"
                "DEFUN"
                "DEFVAR"
                "DELETE"
                "DELETE-DUPLICATES"
                "DELETE-FILE"
                "DELETE-IF"
                "DELETE-IF-NOT"
                "DENOMINATOR"
                "DEPOSIT-FIELD"
                "DESCRIBE"
                "DIGIT-CHAR-P"
                "DIRECTORY"
                "DIRECTORY-NAMESTRING"
                "DISASSEMBLE"
                "DO"
                "DO*"
                "DO-ALL-SYMBOLS"
                "DO-EXTERNAL-SYMBOLS"
                "DO-SYMBOLS"
                "DOCUMENTATION"
                "DOLIST"
                "DOTIMES"
                "DOUBLE-FLOAT"
                "DOUBLE-FLOAT-EPSILON"
                "DOUBLE-FLOAT-NEGATIVE-EPSILON"
                "DPB"
                "DRIBBLE"
                "ECASE"
                "ED"
                "EIGHTH"
                "ELT"
                "ENCODE-UNIVERSAL-TIME"
                "ENDP"
                "ENOUGH-NAMESTRING"
                "EQ"
                "EQL"
                "EQUAL"
                "EQUALP"
                "ERROR"
                "ETYPECASE"
                "EVAL"
                "EVAL-WHEN"
                "EVENP"
                "EVERY"
                "EXP"
                "EXPT"
                "FBOUNDP"
                "FCEILING"
                "FFLOOR"
                "FIFTH"
                "FILE-AUTHOR"
                "FILE-LENGTH"
                "FILE-NAMESTRING"
                "FILE-POSITION"
                "FILE-WRITE-DATE"
                "FILL"
                "FILL-POINTER"
                "FIND"
                "FIND-ALL-SYMBOLS"
                "FIND-IF"
                "FIND-IF-NOT"
                "FIND-PACKAGE"
                "FIND-SYMBOL"
                "FINISH-OUTPUT"
                "FIRST"
                "FIXNUM"
                "FLET"
                "FLOAT"
                "FLOAT-DIGITS"
                "FLOAT-PRECISION"
                "FLOAT-RADIX"
                "FLOAT-SIGN"
                "FLOATP"
                "FLOOR"
                "FMAKUNBOUND"
                "FORCE-OUTPUT"
                "FORMAT"
                "FOURTH"
                "FRESH-LINE"
                "FROUND"
                "FTRUNCATE"
                "FTYPE"
                "FUNCALL"
                "FUNCTION"
                "GCD"
                "GENSYM"
                "GENTEMP"
                "GET"
                "GET-DECODED-TIME"
                "GET-DISPATCH-MACRO-CHARACTER"
                "GET-INTERNAL-REAL-TIME"
                "GET-INTERNAL-RUN-TIME"
                "GET-MACRO-CHARACTER"
                "GET-OUTPUT-STREAM-STRING"
                "GET-PROPERTIES"
                "GET-UNIVERSAL-TIME"
                "GETF"
                "GETHASH"
                "GO"
                "GRAPHIC-CHAR-P"
                "HASH-TABLE"
                "HASH-TABLE-COUNT"
                "HASH-TABLE-P"
                "HOST-NAMESTRING"
                "IDENTITY"
                "IF"
                "IGNORE"
                "IMAGPART"
                "INCF"
                "INLINE"
                "INPUT-STREAM-P"
                "INSPECT"
                "INTEGER"
                "INTEGER-DECODE-FLOAT"
                "INTEGER-LENGTH"
                "INTEGERP"
                "INTERN"
                "INTERNAL-TIME-UNITS-PER-SECOND"
                "INTERSECTION"
                "ISQRT"
                "KEYWORD"
                "KEYWORDP"
                "LABELS"
                "LAMBDA"
                "LAMBDA-LIST-KEYWORDS"
                "LAMBDA-PARAMETERS-LIMIT"
                "LAST"
                "LCM"
                "LDB"
                "LDB-TEST"
                "LDIFF"
                "LEAST-NEGATIVE-DOUBLE-FLOAT"
                "LEAST-NEGATIVE-LONG-FLOAT"
                "LEAST-NEGATIVE-SHORT-FLOAT"
                "LEAST-NEGATIVE-SINGLE-FLOAT"
                "LEAST-POSITIVE-DOUBLE-FLOAT"
                "LEAST-POSITIVE-LONG-FLOAT"
                "LEAST-POSITIVE-SHORT-FLOAT"
                "LEAST-POSITIVE-SINGLE-FLOAT"
                "LENGTH"
                "LET"
                "LET*"
                "LISP-IMPLEMENTATION-TYPE"
                "LISP-IMPLEMENTATION-VERSION"
                "LIST"
                "LIST*"
                "LIST-ALL-PACKAGES"
                "LIST-LENGTH"
                "LISTEN"
                "LISTP"
                "LOAD"
                "LOCALLY"
                "LOG"
                "LOGAND"
                "LOGANDC1"
                "LOGANDC2"
                "LOGBITP"
                "LOGCOUNT"
                "LOGEQV"
                "LOGIOR"
                "LOGNAND"
                "LOGNOR"
                "LOGNOT"
                "LOGORC1"
                "LOGORC2"
                "LOGTEST"
                "LOGXOR"
                "LONG-FLOAT"
                "LONG-FLOAT-EPSILON"
                "LONG-FLOAT-NEGATIVE-EPSILON"
                "LONG-SITE-NAME"
                "LOOP"
                "LOWER-CASE-P"
                "MACHINE-INSTANCE"
                "MACHINE-TYPE"
                "MACHINE-VERSION"
                "MACRO-FUNCTION"
                "MACROEXPAND"
                "MACROEXPAND-1"
                "MACROLET"
                "MAKE-ARRAY"
                "MAKE-BROADCAST-STREAM"
                "MAKE-CONCATENATED-STREAM"
                "MAKE-DISPATCH-MACRO-CHARACTER"
                "MAKE-ECHO-STREAM"
                "MAKE-HASH-TABLE"
                "MAKE-LIST"
                "MAKE-PATHNAME"
                "MAKE-RANDOM-STATE"
                "MAKE-SEQUENCE"
                "MAKE-STRING"
                "MAKE-STRING-INPUT-STREAM"
                "MAKE-STRING-OUTPUT-STREAM"
                "MAKE-SYMBOL"
                "MAKE-SYNONYM-STREAM"
                "MAKE-TWO-WAY-STREAM"
                "MAKUNBOUND"
                "MAP"
                "MAPC"
                "MAPCAN"
                "MAPCAR"
                "MAPCON"
                "MAPHASH"
                "MAPL"
                "MAPLIST"
                "MASK-FIELD"
                "MAX"
                "MEMBER"
                "MEMBER-IF"
                "MEMBER-IF-NOT"
                "MERGE"
                "MERGE-PATHNAMES"
                "MIN"
                "MINUSP"
                "MISMATCH"
                "MOD"
                "MOST-NEGATIVE-DOUBLE-FLOAT"
                "MOST-NEGATIVE-FIXNUM"
                "MOST-NEGATIVE-LONG-FLOAT"
                "MOST-NEGATIVE-SHORT-FLOAT"
                "MOST-NEGATIVE-SINGLE-FLOAT"
                "MOST-POSITIVE-DOUBLE-FLOAT"
                "MOST-POSITIVE-FIXNUM"
                "MOST-POSITIVE-LONG-FLOAT"
                "MOST-POSITIVE-SHORT-FLOAT"
                "MOST-POSITIVE-SINGLE-FLOAT"
                "MULTIPLE-VALUE-BIND"
                "MULTIPLE-VALUE-CALL"
                "MULTIPLE-VALUE-LIST"
                "MULTIPLE-VALUE-PROG1"
                "MULTIPLE-VALUE-SETQ"
                "MULTIPLE-VALUES-LIMIT"
                "NAME-CHAR"
                "NAMESTRING"
                "NBUTLAST"
                "NCONC"
                "NIL"
                "NINTERSECTION"
                "NINTH"
                "NOT"
                "NOTANY"
                "NOTEVERY"
                "NOTINLINE"
                "NRECONC"
                "NREVERSE"
                "NSET-DIFFERENCE"
                "NSET-EXCLUSIVE-OR"
                "NSTRING-CAPITALIZE"
                "NSTRING-DOWNCASE"
                "NSTRING-UPCASE"
                "NSUBLIS"
                "NSUBST"
                "NSUBST-IF"
                "NSUBST-IF-NOT"
                "NSUBSTITUTE"
                "NSUBSTITUTE-IF"
                "NSUBSTITUTE-IF-NOT"
                "NTH"
                "NTHCDR"
                "NULL"
                "NUMBER"
                "NUMBERP"
                "NUMERATOR"
                "NUNION"
                "ODDP"
                "OPEN"
                "OPTIMIZE"
                "OR"
                "OTHERWISE"
                "OUTPUT-STREAM-P"
                "PACKAGE"
                "PACKAGE-NAME"
                "PACKAGE-NICKNAMES"
                "PACKAGE-SHADOWING-SYMBOLS"
                "PACKAGE-USE-LIST"
                "PACKAGE-USED-BY-LIST"
                "PACKAGEP"
                "PAIRLIS"
                "PARSE-INTEGER"
                "PARSE-NAMESTRING"
                "PATHNAME"
                "PATHNAME-DEVICE"
                "PATHNAME-DIRECTORY"
                "PATHNAME-HOST"
                "PATHNAME-NAME"
                "PATHNAME-TYPE"
                "PATHNAME-VERSION"
                "PATHNAMEP"
                "PEEK-CHAR"
                "PHASE"
                "PI"
                "PLUSP"
                "POP"
                "POSITION"
                "POSITION-IF"
                "POSITION-IF-NOT"
                "PPRINT"
                "PRIN1"
                "PRIN1-TO-STRING"
                "PRINC"
                "PRINC-TO-STRING"
                "PRINT"
                "PROBE-FILE"
                "PROCLAIM"
                "PROG"
                "PROG*"
                "PROG1"
                "PROG2"
                "PROGN"
                "PROGV"
                "PSETF"
                "PSETQ"
                "PUSH"
                "PUSHNEW"
                "QUOTE"
                "RANDOM"
                "RANDOM-STATE"
                "RANDOM-STATE-P"
                "RASSOC"
                "RASSOC-IF"
                "RASSOC-IF-NOT"
                "RATIO"
                "RATIONAL"
                "RATIONALIZE"
                "RATIONALP"
                "READ"
                "READ-BYTE"
                "READ-CHAR"
                "READ-CHAR-NO-HANG"
                "READ-DELIMITED-LIST"
                "READ-FROM-STRING"
                "READ-LINE"
                "READ-PRESERVING-WHITESPACE"
                "READTABLE"
                "READTABLEP"
                "REALPART"
                "REDUCE"
                "REM"
                "REMF"
                "REMHASH"
                "REMOVE"
                "REMOVE-DUPLICATES"
                "REMOVE-IF"
                "REMOVE-IF-NOT"
                "REMPROP"
                "RENAME-FILE"
                "RENAME-PACKAGE"
                "REPLACE"
                "REST"
                "RETURN"
                "RETURN-FROM"
                "REVAPPEND"
                "REVERSE"
                "ROOM"
                "ROTATEF"
                "ROUND"
                "RPLACA"
                "RPLACD"
                "SAFETY"
                "SATISFIES"
                "SBIT"
                "SCALE-FLOAT"
                "SCHAR"
                "SEARCH"
                "SECOND"
                "SEQUENCE"
                "SET"
;                "SET-CHAR-BIT"
                "SET-DIFFERENCE"
                "SET-DISPATCH-MACRO-CHARACTER"
                "SET-EXCLUSIVE-OR"
                "SET-MACRO-CHARACTER"
                "SET-SYNTAX-FROM-CHAR"
                "SETF"
                "SETQ"
                "SEVENTH"
                "SHIFTF"
                "SHORT-FLOAT"
                "SHORT-FLOAT-EPSILON"
                "SHORT-FLOAT-NEGATIVE-EPSILON"
                "SHORT-SITE-NAME"
                "SIGNED-BYTE"
                "SIGNUM"
                "SIMPLE-ARRAY"
                "SIMPLE-BIT-VECTOR"
                "SIMPLE-BIT-VECTOR-P"
                "SIMPLE-STRING"
                "SIMPLE-STRING-P"
                "SIMPLE-VECTOR"
                "SIMPLE-VECTOR-P"
                "SIN"
                "SINGLE-FLOAT"
                "SINGLE-FLOAT-EPSILON"
                "SINGLE-FLOAT-NEGATIVE-EPSILON"
                "SINH"
                "SIXTH"
                "SLEEP"
                "SOFTWARE-TYPE"
                "SOFTWARE-VERSION"
                "SOME"
                "SORT"
                "SPACE"
                "SPECIAL"
                "SPEED"
                "SQRT"
                "STABLE-SORT"
                "STANDARD-CHAR"
                "STANDARD-CHAR-P"
                "STEP"
                "STREAM"
                "STREAM-ELEMENT-TYPE"
                "STREAMP"
                "STRING"
                "STRING-CAPITALIZE"
;                "STRING-CHAR"
;                "STRING-CHAR-P"
                "STRING-DOWNCASE"
                "STRING-EQUAL"
                "STRING-GREATERP"
                "STRING-LEFT-TRIM"
                "STRING-LESSP"
                "STRING-NOT-EQUAL"
                "STRING-NOT-GREATERP"
                "STRING-NOT-LESSP"
                "STRING-RIGHT-TRIM"
                "STRING-TRIM"
                "STRING-UPCASE"
                "STRING/="
                "STRING<"
                "STRING<="
                "STRING="
                "STRING>"
                "STRING>="
                "STRINGP"
                "STRUCTURE"
                "SUBLIS"
                "SUBSEQ"
                "SUBSETP"
                "SUBST"
                "SUBST-IF"
                "SUBST-IF-NOT"
                "SUBSTITUTE"
                "SUBSTITUTE-IF"
                "SUBSTITUTE-IF-NOT"
                "SUBTYPEP"
                "SVREF"
                "SXHASH"
                "SYMBOL"
                "SYMBOL-FUNCTION"
                "SYMBOL-NAME"
                "SYMBOL-PACKAGE"
                "SYMBOL-PLIST"
                "SYMBOL-VALUE"
                "SYMBOLP"
                "T"
                "TAGBODY"
                "TAILP"
                "TAN"
                "TANH"
                "TENTH"
                "TERPRI"
                "THE"
                "THIRD"
                "THROW"
                "TIME"
                "TRACE"
                "TREE-EQUAL"
                "TRUENAME"
                "TRUNCATE"
                "TYPE"
                "TYPE-OF"
                "TYPECASE"
                "TYPEP"
                "UNINTERN"
                "UNION"
                "UNLESS"
                "UNREAD-CHAR"
                "UNSIGNED-BYTE"
                "UNTRACE"
                "UNWIND-PROTECT"
                "UPPER-CASE-P"
                "USER-HOMEDIR-PATHNAME"
                "VALUES"
                "VALUES-LIST"
                "VARIABLE"
                "VECTOR"
                "VECTOR-POP"
                "VECTOR-PUSH"
                "VECTOR-PUSH-EXTEND"
                "VECTORP"
                "WARN"
                "WHEN"
                "WITH-INPUT-FROM-STRING"
                "WITH-OPEN-FILE"
                "WITH-OPEN-STREAM"
                "WITH-OUTPUT-TO-STRING"
                "WRITE"
                "WRITE-BYTE"
                "WRITE-CHAR"
                "WRITE-LINE"
                "WRITE-STRING"
                "WRITE-TO-STRING"
                "Y-OR-N-P"
                "YES-OR-NO-P"
                "ZEROP"
		"*MODULES*"
		"PROVIDE"
		"REQUIRE")
  (:import-from "CCL"
                "*BREAK-ON-WARNINGS*"
                "COMPILER-LET"
		"*APPLYHOOK*"
		"*EVALHOOK*"
		"APPLYHOOK"
		"EVALHOOK"
		"SPECIAL-FORM-P"
		"GET-SETF-METHOD"
		"GET-SETF-METHOD-MULTIPLE-VALUE"
		"DEFINE-SETF-METHOD"
)
  (:shadow "IN-PACKAGE"
           "FUNCTIONP"
           "MAKE-PACKAGE"
           "SHADOW"
           "SHADOWING-IMPORT"
           "EXPORT"
           "UNEXPORT"
           "USE-PACKAGE"
           "UNUSE-PACKAGE"
           "IMPORT")
  (:export
   "&ALLOW-OTHER-KEYS"
   "&AUX"
   "&BODY"
   "&ENVIRONMENT"
   "&KEY"
   "&OPTIONAL"
   "&REST"
   "&WHOLE"
   "*"
   "**"
   "***"
   "*APPLYHOOK*"
   "*BREAK-ON-WARNINGS*"
   "*DEBUG-IO*"
   "*DEFAULT-PATHNAME-DEFAULTS*"
   "*ERROR-OUTPUT*"
   "*EVALHOOK*"
   "*FEATURES*"
   "*LOAD-VERBOSE*"
   "*MODULES*"
   "*MACROEXPAND-HOOK*"
   "*PACKAGE*"
   "*PRINT-ARRAY*"
   "*PRINT-BASE*"
   "*PRINT-CASE*"
   "*PRINT-CIRCLE*"
   "*PRINT-ESCAPE*"
   "*PRINT-GENSYM*"
   "*PRINT-LENGTH*"
   "*PRINT-LEVEL*"
   "*PRINT-PRETTY*"
   "*PRINT-RADIX*"
   "*QUERY-IO*"
   "*RANDOM-STATE*"
   "*READ-BASE*"
   "*READ-DEFAULT-FLOAT-FORMAT*"
   "*READ-SUPPRESS*"
   "*READTABLE*"
   "*STANDARD-INPUT*"
   "*STANDARD-OUTPUT*"
   "*TERMINAL-IO*"
   "*TRACE-OUTPUT*"
   "+"
   "++"
   "+++"
   "-"
   "/"
   "//"
   "///"
   "/="
   "1+"
   "1-"
   "<"
   "<="
   "="
   ">"
   ">="
   "ABS"
   "ACONS"
   "ACOS"
   "ACOSH"
   "ADJOIN"
   "ADJUST-ARRAY"
   "ADJUSTABLE-ARRAY-P"
   "ALPHA-CHAR-P"
   "ALPHANUMERICP"
   "AND"
   "APPEND"
   "APPLY"
   "APPLYHOOK"
   "APROPOS"
   "APROPOS-LIST"
   "AREF"
   "ARRAY"
   "ARRAY-DIMENSION"
   "ARRAY-DIMENSION-LIMIT"
   "ARRAY-DIMENSIONS"
   "ARRAY-ELEMENT-TYPE"
   "ARRAY-HAS-FILL-POINTER-P"
   "ARRAY-IN-BOUNDS-P"
   "ARRAY-RANK"
   "ARRAY-RANK-LIMIT"
   "ARRAY-ROW-MAJOR-INDEX"
   "ARRAY-TOTAL-SIZE"
   "ARRAY-TOTAL-SIZE-LIMIT"
   "ARRAYP"
   "ASH"
   "ASIN"
   "ASINH"
   "ASSERT"
   "ASSOC"
   "ASSOC-IF"
   "ASSOC-IF-NOT"
   "ATAN"
   "ATANH"
   "ATOM"
   "BIGNUM"
   "BIT"
   "BIT-AND"
   "BIT-ANDC1"
   "BIT-ANDC2"
   "BIT-EQV"
   "BIT-IOR"
   "BIT-NAND"
   "BIT-NOR"
   "BIT-NOT"
   "BIT-ORC1"
   "BIT-ORC2"
   "BIT-VECTOR"
   "BIT-VECTOR-P"
   "BIT-XOR"
   "BLOCK"
   "BOOLE"
   "BOOLE-1"
   "BOOLE-2"
   "BOOLE-AND"
   "BOOLE-ANDC1"
   "BOOLE-ANDC2"
   "BOOLE-C1"
   "BOOLE-C2"
   "BOOLE-CLR"
   "BOOLE-EQV"
   "BOOLE-IOR"
   "BOOLE-NAND"
   "BOOLE-NOR"
   "BOOLE-ORC1"
   "BOOLE-ORC2"
   "BOOLE-SET"
   "BOOLE-XOR"
   "BOTH-CASE-P"
   "BOUNDP"
   "BREAK"
   "BUTLAST"
   "BYTE"
   "BYTE-POSITION"
   "BYTE-SIZE"
   "CAAAAR"
   "CAAADR"
   "CAAAR"
   "CAADAR"
   "CAADDR"
   "CAADR"
   "CAAR"
   "CADAAR"
   "CADADR"
   "CADAR"
   "CADDAR"
   "CADDDR"
   "CADDR"
   "CADR"
   "CALL-ARGUMENTS-LIMIT"
   "CAR"
   "CASE"
   "CATCH"
   "CCASE"
   "CDAAAR"
   "CDAADR"
   "CDAAR"
   "CDADAR"
   "CDADDR"
   "CDADR"
   "CDAR"
   "CDDAAR"
   "CDDADR"
   "CDDAR"
   "CDDDAR"
   "CDDDDR"
   "CDDDR"
   "CDDR"
   "CDR"
   "CEILING"
   "CERROR"
   "CHAR"
   "CHAR-BIT"
   "CHAR-BITS"
   "CHAR-BITS-LIMIT"
   "CHAR-CODE"
   "CHAR-CODE-LIMIT"
   "CHAR-CONTROL-BIT"
   "CHAR-DOWNCASE"
   "CHAR-EQUAL"
   "CHAR-FONT"
   "CHAR-FONT-LIMIT"
   "CHAR-GREATERP"
   "CHAR-HYPER-BIT"
   "CHAR-INT"
   "CHAR-LESSP"
   "CHAR-META-BIT"
   "CHAR-NAME"
   "CHAR-NOT-EQUAL"
   "CHAR-NOT-GREATERP"
   "CHAR-NOT-LESSP"
   "CHAR-SUPER-BIT"
   "CHAR-UPCASE"
   "CHAR/="
   "CHAR<"
   "CHAR<="
   "CHAR="
   "CHAR>"
   "CHAR>="
   "CHARACTER"
   "CHARACTERP"
   "CHECK-TYPE"
   "CIS"
   "CLEAR-INPUT"
   "CLEAR-OUTPUT"
   "CLOSE"
   "CLRHASH"
   "CODE-CHAR"
   "COERCE"
   "COMMON"
   "COMMONP"
   "COMPILATION-SPEED"
   "COMPILE"
   "COMPILE-FILE"
   "COMPILED-FUNCTION"
   "COMPILED-FUNCTION-P"
   "COMPILER-LET"
   "COMPLEX"
   "COMPLEXP"
   "CONCATENATE"
   "COND"
   "CONJUGATE"
   "CONS"
   "CONSP"
   "CONSTANTP"
   "COPY-ALIST"
   "COPY-LIST"
   "COPY-READTABLE"
   "COPY-SEQ"
   "COPY-SYMBOL"
   "COPY-TREE"
   "COS"
   "COSH"
   "COUNT"
   "COUNT-IF"
   "COUNT-IF-NOT"
   "CTYPECASE"
   "DECF"
   "DECLARATION"
   "DECLARE"
   "DECODE-FLOAT"
   "DECODE-UNIVERSAL-TIME"
   "DEFCONSTANT"
   "DEFINE-MODIFY-MACRO"
   "DEFINE-SETF-METHOD"
   "DEFMACRO"
   "DEFPARAMETER"
   "DEFSETF"
   "DEFSTRUCT"
   "DEFTYPE"
   "DEFUN"
   "DEFVAR"
   "DELETE"
   "DELETE-DUPLICATES"
   "DELETE-FILE"
   "DELETE-IF"
   "DELETE-IF-NOT"
   "DENOMINATOR"
   "DEPOSIT-FIELD"
   "DESCRIBE"
   "DIGIT-CHAR"
   "DIGIT-CHAR-P"
   "DIRECTORY"
   "DIRECTORY-NAMESTRING"
   "DISASSEMBLE"
   "DO"
   "DO*"
   "DO-ALL-SYMBOLS"
   "DO-EXTERNAL-SYMBOLS"
   "DO-SYMBOLS"
   "DOCUMENTATION"
   "DOLIST"
   "DOTIMES"
   "DOUBLE-FLOAT"
   "DOUBLE-FLOAT-EPSILON"
   "DOUBLE-FLOAT-NEGATIVE-EPSILON"
   "DPB"
   "DRIBBLE"
   "ECASE"
   "ED"
   "EIGHTH"
   "ELT"
   "ENCODE-UNIVERSAL-TIME"
   "ENDP"
   "ENOUGH-NAMESTRING"
   "EQ"
   "EQL"
   "EQUAL"
   "EQUALP"
   "ERROR"
   "ETYPECASE"
   "EVAL"
   "EVAL-WHEN"
   "EVALHOOK"
   "EVENP"
   "EVERY"
   "EXP"
   "EXPORT"
   "EXPT"
   "FBOUNDP"
   "FCEILING"
   "FFLOOR"
   "FIFTH"
   "FILE-AUTHOR"
   "FILE-LENGTH"
   "FILE-NAMESTRING"
   "FILE-POSITION"
   "FILE-WRITE-DATE"
   "FILL"
   "FILL-POINTER"
   "FIND"
   "FIND-ALL-SYMBOLS"
   "FIND-IF"
   "FIND-IF-NOT"
   "FIND-PACKAGE"
   "FIND-SYMBOL"
   "FINISH-OUTPUT"
   "FIRST"
   "FIXNUM"
   "FLET"
   "FLOAT"
   "FLOAT-DIGITS"
   "FLOAT-PRECISION"
   "FLOAT-RADIX"
   "FLOAT-SIGN"
   "FLOATP"
   "FLOOR"
   "FMAKUNBOUND"
   "FORCE-OUTPUT"
   "FORMAT"
   "FOURTH"
   "FRESH-LINE"
   "FROUND"
   "FTRUNCATE"
   "FTYPE"
   "FUNCALL"
   "FUNCTION"
   "FUNCTIONP"
   "GCD"
   "GENSYM"
   "GENTEMP"
   "GET"
   "GET-DECODED-TIME"
   "GET-DISPATCH-MACRO-CHARACTER"
   "GET-INTERNAL-REAL-TIME"
   "GET-INTERNAL-RUN-TIME"
   "GET-MACRO-CHARACTER"
   "GET-OUTPUT-STREAM-STRING"
   "GET-PROPERTIES"
   "GET-SETF-METHOD"
   "GET-SETF-METHOD-MULTIPLE-VALUE"
   "GET-UNIVERSAL-TIME"
   "GETF"
   "GETHASH"
   "GO"
   "GRAPHIC-CHAR-P"
   "HASH-TABLE"
   "HASH-TABLE-COUNT"
   "HASH-TABLE-P"
   "HOST-NAMESTRING"
   "IDENTITY"
   "IF"
   "IGNORE"
   "IMAGPART"
   "IMPORT"
   "IN-PACKAGE"
   "INCF"
   "INLINE"
   "INPUT-STREAM-P"
   "INSPECT"
   "INT-CHAR"
   "INTEGER"
   "INTEGER-DECODE-FLOAT"
   "INTEGER-LENGTH"
   "INTEGERP"
   "INTERN"
   "INTERNAL-TIME-UNITS-PER-SECOND"
   "INTERSECTION"
   "ISQRT"
   "KEYWORD"
   "KEYWORDP"
   "LABELS"
   "LAMBDA"
   "LAMBDA-LIST-KEYWORDS"
   "LAMBDA-PARAMETERS-LIMIT"
   "LAST"
   "LCM"
   "LDB"
   "LDB-TEST"
   "LDIFF"
   "LEAST-NEGATIVE-DOUBLE-FLOAT"
   "LEAST-NEGATIVE-LONG-FLOAT"
   "LEAST-NEGATIVE-SHORT-FLOAT"
   "LEAST-NEGATIVE-SINGLE-FLOAT"
   "LEAST-POSITIVE-DOUBLE-FLOAT"
   "LEAST-POSITIVE-LONG-FLOAT"
   "LEAST-POSITIVE-SHORT-FLOAT"
   "LEAST-POSITIVE-SINGLE-FLOAT"
   "LENGTH"
   "LET"
   "LET*"
   "LISP-IMPLEMENTATION-TYPE"
   "LISP-IMPLEMENTATION-VERSION"
   "LIST"
   "LIST*"
   "LIST-ALL-PACKAGES"
   "LIST-LENGTH"
   "LISTEN"
   "LISTP"
   "LOAD"
   "LOCALLY"
   "LOG"
   "LOGAND"
   "LOGANDC1"
   "LOGANDC2"
   "LOGBITP"
   "LOGCOUNT"
   "LOGEQV"
   "LOGIOR"
   "LOGNAND"
   "LOGNOR"
   "LOGNOT"
   "LOGORC1"
   "LOGORC2"
   "LOGTEST"
   "LOGXOR"
   "LONG-FLOAT"
   "LONG-FLOAT-EPSILON"
   "LONG-FLOAT-NEGATIVE-EPSILON"
   "LONG-SITE-NAME"
   "LOOP"
   "LOWER-CASE-P"
   "MACHINE-INSTANCE"
   "MACHINE-TYPE"
   "MACHINE-VERSION"
   "MACRO-FUNCTION"
   "MACROEXPAND"
   "MACROEXPAND-1"
   "MACROLET"
   "MAKE-ARRAY"
   "MAKE-BROADCAST-STREAM"
   "MAKE-CHAR"
   "MAKE-CONCATENATED-STREAM"
   "MAKE-DISPATCH-MACRO-CHARACTER"
   "MAKE-ECHO-STREAM"
   "MAKE-HASH-TABLE"
   "MAKE-LIST"
   "MAKE-PACKAGE"
   "MAKE-PATHNAME"
   "MAKE-RANDOM-STATE"
   "MAKE-SEQUENCE"
   "MAKE-STRING"
   "MAKE-STRING-INPUT-STREAM"
   "MAKE-STRING-OUTPUT-STREAM"
   "MAKE-SYMBOL"
   "MAKE-SYNONYM-STREAM"
   "MAKE-TWO-WAY-STREAM"
   "MAKUNBOUND"
   "MAP"
   "MAPC"
   "MAPCAN"
   "MAPCAR"
   "MAPCON"
   "MAPHASH"
   "MAPL"
   "MAPLIST"
   "MASK-FIELD"
   "MAX"
   "MEMBER"
   "MEMBER-IF"
   "MEMBER-IF-NOT"
   "MERGE"
   "MERGE-PATHNAMES"
   "MIN"
   "MINUSP"
   "MISMATCH"
   "MOD"
   "MOST-NEGATIVE-DOUBLE-FLOAT"
   "MOST-NEGATIVE-FIXNUM"
   "MOST-NEGATIVE-LONG-FLOAT"
   "MOST-NEGATIVE-SHORT-FLOAT"
   "MOST-NEGATIVE-SINGLE-FLOAT"
   "MOST-POSITIVE-DOUBLE-FLOAT"
   "MOST-POSITIVE-FIXNUM"
   "MOST-POSITIVE-LONG-FLOAT"
   "MOST-POSITIVE-SHORT-FLOAT"
   "MOST-POSITIVE-SINGLE-FLOAT"
   "MULTIPLE-VALUE-BIND"
   "MULTIPLE-VALUE-CALL"
   "MULTIPLE-VALUE-LIST"
   "MULTIPLE-VALUE-PROG1"
   "MULTIPLE-VALUE-SETQ"
   "MULTIPLE-VALUES-LIMIT"
   "NAME-CHAR"
   "NAMESTRING"
   "NBUTLAST"
   "NCONC"
   "NIL"
   "NINTERSECTION"
   "NINTH"
   "NOT"
   "NOTANY"
   "NOTEVERY"
   "NOTINLINE"
   "NRECONC"
   "NREVERSE"
   "NSET-DIFFERENCE"
   "NSET-EXCLUSIVE-OR"
   "NSTRING-CAPITALIZE"
   "NSTRING-DOWNCASE"
   "NSTRING-UPCASE"
   "NSUBLIS"
   "NSUBST"
   "NSUBST-IF"
   "NSUBST-IF-NOT"
   "NSUBSTITUTE"
   "NSUBSTITUTE-IF"
   "NSUBSTITUTE-IF-NOT"
   "NTH"
   "NTHCDR"
   "NULL"
   "NUMBER"
   "NUMBERP"
   "NUMERATOR"
   "NUNION"
   "ODDP"
   "OPEN"
   "OPTIMIZE"
   "OR"
   "OTHERWISE"
   "OUTPUT-STREAM-P"
   "PACKAGE"
   "PACKAGE-NAME"
   "PACKAGE-NICKNAMES"
   "PACKAGE-SHADOWING-SYMBOLS"
   "PACKAGE-USE-LIST"
   "PACKAGE-USED-BY-LIST"
   "PACKAGEP"
   "PAIRLIS"
   "PARSE-INTEGER"
   "PARSE-NAMESTRING"
   "PATHNAME"
   "PATHNAME-DEVICE"
   "PATHNAME-DIRECTORY"
   "PATHNAME-HOST"
   "PATHNAME-NAME"
   "PATHNAME-TYPE"
   "PATHNAME-VERSION"
   "PATHNAMEP"
   "PEEK-CHAR"
   "PHASE"
   "PI"
   "PLUSP"
   "POP"
   "POSITION"
   "POSITION-IF"
   "POSITION-IF-NOT"
   "PPRINT"
   "PRIN1"
   "PRIN1-TO-STRING"
   "PRINC"
   "PRINC-TO-STRING"
   "PRINT"
   "PROBE-FILE"
   "PROCLAIM"
   "PROG"
   "PROG*"
   "PROG1"
   "PROG2"
   "PROGN"
   "PROGV"
   "PROVIDE"
   "PSETF"
   "PSETQ"
   "PUSH"
   "PUSHNEW"
   "QUOTE"
   "RANDOM"
   "RANDOM-STATE"
   "RANDOM-STATE-P"
   "RASSOC"
   "RASSOC-IF"
   "RASSOC-IF-NOT"
   "RATIO"
   "RATIONAL"
   "RATIONALIZE"
   "RATIONALP"
   "READ"
   "READ-BYTE"
   "READ-CHAR"
   "READ-CHAR-NO-HANG"
   "READ-DELIMITED-LIST"
   "READ-FROM-STRING"
   "READ-LINE"
   "READ-PRESERVING-WHITESPACE"
   "READTABLE"
   "READTABLEP"
   "REALPART"
   "REDUCE"
   "REM"
   "REMF"
   "REMHASH"
   "REMOVE"
   "REMOVE-DUPLICATES"
   "REMOVE-IF"
   "REMOVE-IF-NOT"
   "REMPROP"
   "RENAME-FILE"
   "RENAME-PACKAGE"
   "REPLACE"
   "REQUIRE"
   "REST"
   "RETURN"
   "RETURN-FROM"
   "REVAPPEND"
   "REVERSE"
   "ROOM"
   "ROTATEF"
   "ROUND"
   "RPLACA"
   "RPLACD"
   "SAFETY"
   "SATISFIES"
   "SBIT"
   "SCALE-FLOAT"
   "SCHAR"
   "SEARCH"
   "SECOND"
   "SEQUENCE"
   "SET"
   "SET-CHAR-BIT"
   "SET-DIFFERENCE"
   "SET-DISPATCH-MACRO-CHARACTER"
   "SET-EXCLUSIVE-OR"
   "SET-MACRO-CHARACTER"
   "SET-SYNTAX-FROM-CHAR"
   "SETF"
   "SETQ"
   "SEVENTH"
   "SHADOW"
   "SHADOWING-IMPORT"
   "SHIFTF"
   "SHORT-FLOAT"
   "SHORT-FLOAT-EPSILON"
   "SHORT-FLOAT-NEGATIVE-EPSILON"
   "SHORT-SITE-NAME"
   "SIGNED-BYTE"
   "SIGNUM"
   "SIMPLE-ARRAY"
   "SIMPLE-BIT-VECTOR"
   "SIMPLE-BIT-VECTOR-P"
   "SIMPLE-STRING"
   "SIMPLE-STRING-P"
   "SIMPLE-VECTOR"
   "SIMPLE-VECTOR-P"
   "SIN"
   "SINGLE-FLOAT"
   "SINGLE-FLOAT-EPSILON"
   "SINGLE-FLOAT-NEGATIVE-EPSILON"
   "SINH"
   "SIXTH"
   "SLEEP"
   "SOFTWARE-TYPE"
   "SOFTWARE-VERSION"
   "SOME"
   "SORT"
   "SPACE"
   "SPECIAL"
   "SPEED"
   "SQRT"
   "STABLE-SORT"
   "STANDARD-CHAR"
   "STANDARD-CHAR-P"
   "STEP"
   "STREAM"
   "STREAM-ELEMENT-TYPE"
   "STREAMP"
   "STRING"
   "STRING-CAPITALIZE"
   "STRING-CHAR"
   "STRING-CHAR-P"
   "STRING-DOWNCASE"
   "STRING-EQUAL"
   "STRING-GREATERP"
   "STRING-LEFT-TRIM"
   "STRING-LESSP"
   "STRING-NOT-EQUAL"
   "STRING-NOT-GREATERP"
   "STRING-NOT-LESSP"
   "STRING-RIGHT-TRIM"
   "STRING-TRIM"
   "STRING-UPCASE"
   "STRING/="
   "STRING<"
   "STRING<="
   "STRING="
   "STRING>"
   "STRING>="
   "STRINGP"
   "STRUCTURE"
   "SUBLIS"
   "SUBSEQ"
   "SUBSETP"
   "SUBST"
   "SUBST-IF"
   "SUBST-IF-NOT"
   "SUBSTITUTE"
   "SUBSTITUTE-IF"
   "SUBSTITUTE-IF-NOT"
   "SUBTYPEP"
   "SVREF"
   "SXHASH"
   "SYMBOL"
   "SYMBOL-FUNCTION"
   "SYMBOL-NAME"
   "SYMBOL-PACKAGE"
   "SYMBOL-PLIST"
   "SYMBOL-VALUE"
   "SYMBOLP"
   "T"
   "TAGBODY"
   "TAILP"
   "TAN"
   "TANH"
   "TENTH"
   "TERPRI"
   "THE"
   "THIRD"
   "THROW"
   "TIME"
   "TRACE"
   "TREE-EQUAL"
   "TRUENAME"
   "TRUNCATE"
   "TYPE"
   "TYPE-OF"
   "TYPECASE"
   "TYPEP"
   "UNEXPORT"
   "UNINTERN"
   "UNION"
   "UNLESS"
   "UNREAD-CHAR"
   "UNSIGNED-BYTE"
   "UNTRACE"
   "UNUSE-PACKAGE"
   "UNWIND-PROTECT"
   "UPPER-CASE-P"
   "USE-PACKAGE"
   "USER-HOMEDIR-PATHNAME"
   "VALUES"
   "VALUES-LIST"
   "VARIABLE"
   "VECTOR"
   "VECTOR-POP"
   "VECTOR-PUSH"
   "VECTOR-PUSH-EXTEND"
   "VECTORP"
   "WARN"
   "WHEN"
   "WITH-INPUT-FROM-STRING"
   "WITH-OPEN-FILE"
   "WITH-OPEN-STREAM"
   "WITH-OUTPUT-TO-STRING"
   "WRITE"
   "WRITE-BYTE"
   "WRITE-CHAR"
   "WRITE-LINE"
   "WRITE-STRING"
   "WRITE-TO-STRING"
   "Y-OR-N-P"
   "YES-OR-NO-P"
   "ZEROP"
   ))

(%resize-package (find-package "LISP"))

(defpackage "USER"
  (:use "LISP" "CCL"))  

(defconstant lisp:char-control-bit 0)
(defconstant lisp:char-meta-bit 0)
(defconstant lisp:char-super-bit 0)
(defconstant lisp:char-hyper-bit 0)
(defconstant lisp:char-bits-limit 1)
(defconstant lisp:char-font-limit 1)

(defun lisp:int-char (i)
  (cl:code-char i))

(defun lisp:char-bits (c)
  (require-type c 'character)
  0)

(defun lisp:char-font (c)
  (require-type c 'character)
  0)

(defun lisp:digit-char (weight &optional (radix 10) font)
  (when (and font (not (eql font 0)))
    (error "Non-zero ~S (~S) not supported" 'font font))
  (cl:digit-char weight radix))

; 'It is an error to give char-bit the name of a bit not supported by the
;   implementation'
(defun lisp:char-bit (char name)
  (declare (ignore char))
  (error "Unsupported character bit name ~S." name))

(defun lisp:set-char-bit (char name newvalue)
  (declare (ignore char newvalue))
  (error "Unsupported character bit name ~S." name))

(defun lisp:make-char (char &optional bits font)
  (flet ((non-supported (argname argval)
           (if (and argval (not (eql argval 0)))
             (error "Non-zero ~S argument (~S) not supported." argname argval))))
    (non-supported 'bits bits)
    (non-supported 'font font)
    (require-type char 'character)))

; A tragic waste of precious silicon.
(define-setf-method char-bit (place bit-name &environment env)
  (multiple-value-bind (dummies vals newval setter getter)
		       (get-setf-method place env)
    (let ((btemp (gensym))
	  (gnuval (gensym)))
      (values `(,@dummies ,btemp)
	      `(,@vals ,bit-name)
	      (list gnuval)
	      `(let ((,(car newval)
		      (set-char-bit ,getter ,btemp ,gnuval)))
		 ,setter
		 ,gnuval)
	      `(char-bit ,getter ,btemp)))))

(defun lisp:in-package (package-name &rest rest &key
                                     nicknames use internal-size external-size)
  (declare (ignore nicknames use internal-size external-size))
  (declare (dynamic-extent rest))
  (apply 'old-in-package package-name rest))

(defun lisp:functionp (x)
  (or (symbolp x)
      (and (consp x) (eq (ccl::%car x) 'lambda))
      (cl:functionp x)))

(setf (cl:find-class 'lisp:string-char) (cl:find-class 'cl:base-char)
      (symbol-function 'lisp:string-char-p) #'cl:characterp)

(dolist (sym '(lisp:make-package lisp:in-package lisp:shadow lisp:shadowing-import
               lisp:export lisp:unexport lisp:use-package lisp:unuse-package
               lisp:import))
  (unless (eq sym 'lisp:in-package)
    (setf (symbol-function sym)
          (symbol-function (find-symbol (symbol-name sym) "COMMON-LISP"))))
  (pushnew sym *fcomp-eval-always-functions*))

(provide :lisp-package)
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3
;;;; END FILE ./reference/ccl/library/lisp-package.lisp
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4n









;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4n









;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4n









;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4n











\;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1
;;;; BEGIN FILE ./reference/ccl/library/loop.lisp
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2
;;;   -*- Mode: LISP; Syntax: Common-lisp; Package: (ANSI-LOOP "COMMON-LISP"); Base: 10; Lowercase:T -*-
;;;
;;; Copyright 1986-1992 Clozure Associates
;;;
;;; Licensed under the Apache License, Version 2.0 (the "License");
;;; you may not use this file except in compliance with the License.
;;; You may obtain a copy of the License at
;;;
;;;     http://www.apache.org/licenses/LICENSE-2.0
;;;
;;; Unless required by applicable law or agreed to in writing, software
;;; distributed under the License is distributed on an "AS IS" BASIS,
;;; WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
;;; See the License for the specific language governing permissions and
;;; limitations under the License.
;;;   -*- Mode: LISP; Syntax: Common-lisp; Package: (ANSI-LOOP "COMMON-LISP"); Base: 10; Lowercase:T -*-
;;;>
;;;> Portions of LOOP are Copyright (c) 1986 by the Massachusetts Institute of Technology.
;;;> All Rights Reserved.
;;;> 
;;;> Permission to use, copy, modify and distribute this software and its
;;;> documentation for any purpose and without fee is hereby granted,
;;;> provided that the M.I.T. copyright notice appear in all copies and that
;;;> both that copyright notice and this permission notice appear in
;;;> supporting documentation.  The names "M.I.T." and "Massachusetts
;;;> Institute of Technology" may not be used in advertising or publicity
;;;> pertaining to distribution of the software without specific, written
;;;> prior permission.  Notice must be given in supporting documentation that
;;;> copying distribution is by permission of M.I.T.  M.I.T. makes no
;;;> representations about the suitability of this software for any purpose.
;;;> It is provided "as is" without express or implied warranty.
;;;> 
;;;>      Massachusetts Institute of Technology
;;;>      77 Massachusetts Avenue
;;;>      Cambridge, Massachusetts  02139
;;;>      United States of America
;;;>      +1-617-253-1000
;;;>
;;;> Portions of LOOP are Copyright (c) 1989, 1990, 1991, 1992 by Symbolics, Inc.
;;;> All Rights Reserved.
;;;> 
;;;> Permission to use, copy, modify and distribute this software and its
;;;> documentation for any purpose and without fee is hereby granted,
;;;> provided that the Symbolics copyright notice appear in all copies and
;;;> that both that copyright notice and this permission notice appear in
;;;> supporting documentation.  The name "Symbolics" may not be used in
;;;> advertising or publicity pertaining to distribution of the software
;;;> without specific, written prior permission.  Notice must be given in
;;;> supporting documentation that copying distribution is by permission of
;;;> Symbolics.  Symbolics makes no representations about the suitability of
;;;> this software for any purpose.  It is provided "as is" without express
;;;> or implied warranty.
;;;> 
;;;> Symbolics, CLOE Runtime, and Minima are trademarks, and CLOE, Genera,
;;;> and Zetalisp are registered trademarks of Symbolics, Inc.
;;;>
;;;>      Symbolics, Inc.
;;;>      8 New England Executive Park, East
;;;>      Burlington, Massachusetts  01803
;;;>      United States of America
;;;>      +1-617-221-1000

;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;
;;; Modification History
;;;
;;; 07/28/92 bill loop-bind-block now does destructuring correctly.
;;; 07/07/92 bill Prevent one more warning in loop-hash-table-iteration-path
;;; 04/23/92 bill loop-do-finally now supports "finally return expr"
;;;               and "finally [do | doing] {expr}*" instead of just
;;;               "finally {expr}*".
;;; 03/23/92 gb   Use IGNORABLE declarations when (if (multiple-value-setq (...) ...) ...)
;;;               involved.
;;; ------------- 2.0
;;; 03/12/92 bill gb's patches to prevent compiler warnings
;;;               for hash-values, hash-types, and symbols

;;;; LOOP Iteration Macro

(defpackage ANSI-LOOP (:use "COMMON-LISP"))

(in-package :ansi-loop)

;;; Technology.
;;;
;;; The LOOP iteration macro is one of a number of pieces of code
;;; originally developed at MIT for which free distribution has been
;;; permitted, as long as the code is not sold for profit, and as long
;;; as notification of MIT's interest in the code is preserved.
;;;
;;; This version of LOOP, which is almost entirely rewritten both as
;;; clean-up and to conform with the ANSI Lisp LOOP standard, started
;;; life as MIT LOOP version 829 (which was a part of NIL, possibly
;;; never released).
;;;
;;; A "light revision" was performed by me (Glenn Burke) while at
;;; Palladian Software in April 1986, to make the code run in Common
;;; Lisp.  This revision was informally distributed to a number of
;;; people, and was sort of the "MIT" version of LOOP for running in
;;; Common Lisp.
;;;
;;; A later more drastic revision was performed at Palladian perhaps a
;;; year later.  This version was more thoroughly Common Lisp in style,
;;; with a few miscellaneous internal improvements and extensions.  I
;;; have lost track of this source, apparently never having moved it to
;;; the MIT distribution point.  I do not remember if it was ever
;;; distributed.
;;;
;;; This revision for the ANSI standard is based on the code of my April
;;; 1986 version, with almost everything redesigned and/or rewritten.


;;; The design of this LOOP is intended to permit, using mostly the same
;;; kernel of code, up to three different "loop" macros:
;;; 
;;; (1) The unextended, unextensible ANSI standard LOOP;
;;;
;;; (2) A clean "superset" extension of the ANSI LOOP which provides
;;; functionality similar to that of the old LOOP, but "in the style of"
;;; the ANSI LOOP.  For instance, user-definable iteration paths, with a
;;; somewhat cleaned-up interface.
;;;
;;; (3) Extensions provided in another file which can make this LOOP
;;; kernel behave largely compatibly with the Genera-vintage LOOP macro,
;;; with only a small addition of code (instead of two whole, separate,
;;; LOOP macros).
;;;
;;; Each of the above three LOOP variations can coexist in the same LISP
;;; environment.
;;; 


;;;; Miscellaneous Environment Things

;;; The uses of this macro are retained in the CL version of loop, in
;;; case they are needed in a particular implementation.  Originally
;;; dating from the use of the Zetalisp COPYLIST* function, this is used
;;; in situations where, were cdr-coding in use, having cdr-NIL at the
;;; end of the list might be suboptimal because the end of the list will
;;; probably be RPLACDed and so cdr-normal should be used instead.
(defmacro loop-copylist* (l)
  `(copy-list ,l))

(defvar *loop-gentemp*
	nil)

(defun loop-gentemp (&optional (pref 'loopvar-))
  (if *loop-gentemp*
      (gentemp (string pref))
      (gensym (string pref))))

(defvar *loop-real-data-type* 'real)

(defun loop-optimization-quantities (env)
  ;;@@@@ The ANSI conditionalization here is for those lisps that implement
  ;; DECLARATION-INFORMATION (from cleanup SYNTACTIC-ENVIRONMENT-ACCESS).
  ;; It is really commentary on how this code could be written.  I don't
  ;; actually expect there to be an ANSI #+-conditional -- it should be
  ;; replaced with the appropriate conditional name for your
  ;; implementation/dialect.
  ;; Uhh, DECLARATION-INFORMATION isn't ANSI-CL anymore
  (let ((stuff (ccl::declaration-information 'optimize env)))
    (values (or (cadr (assoc 'speed stuff)) 1)
            (or (cadr (assoc 'space stuff)) 1)
            (or (cadr (assoc 'safety stuff)) 1)
            (or (cadr (assoc 'compilation-speed stuff)) 1)
            (or (cadr (assoc 'debug stuff)) 1))))


;;;@@@@ The following form takes a list of variables and a form which presumably
;;; references those variables, and wraps it somehow so that the compiler does not
;;; consider those variables have been referenced.  The intent of this is that
;;; iteration variables can be flagged as unused by the compiler, e.g. I in
;;; (loop for i from 1 to 10 do (print t)), since we will tell it when a usage
;;; of it is "invisible" or "not to be considered".
;;;We implicitly assume that a setq does not count as a reference.  That is, the
;;; kind of form generated for the above loop construct to step I, simplified, is
;;; `(SETQ I ,(HIDE-VARIABLE-REFERENCES '(I) '(1+ I))).
(defun hide-variable-references (variable-list form)
  (declare (ignore variable-list))
  form)

;;;@@@@ The following function takes a flag, a variable, and a form which presumably
;;; references that variable, and wraps it somehow so that the compiler does not
;;; consider that variable to have been referenced.  The intent of this is that
;;; iteration variables can be flagged as unused by the compiler, e.g. I in
;;; (loop for i from 1 to 10 do (print t)), since we will tell it when a usage
;;; of it is "invisible" or "not to be considered".
;;;We implicitly assume that a setq does not count as a reference.  That is, the
;;; kind of form generated for the above loop construct to step I, simplified, is
;;; `(SETQ I ,(HIDE-VARIABLE-REFERENCES T 'I '(1+ I))).
;;;Certain cases require that the "invisibility" of the reference be conditional upon
;;; something.  This occurs in cases of "named" variables (the USING clause).  For instance,
;;; we want IDX in (LOOP FOR E BEING THE VECTOR-ELEMENTS OF V USING (INDEX IDX) ...)
;;; to be "invisible" when it is stepped, so that the user gets informed if IDX is
;;; not referenced.  However, if no USING clause is present, we definitely do not
;;; want to be informed that some random gensym is not used.
;;;It is easier for the caller to do this conditionally by passing a flag (which
;;; happens to be the second value of NAMED-VARIABLE, q.v.) to this function than
;;; for all callers to contain the conditional invisibility construction.
(defun hide-variable-reference (really-hide variable form)
  (declare (ignore really-hide variable))
  form)


;;;; List Collection Macrology


(defmacro with-loop-list-collection-head ((head-var tail-var &optional user-head-var)
					  &body body)
  (let ((l (and user-head-var (list (list user-head-var nil)))))
    `(let* ((,head-var (list nil)) (,tail-var ,head-var) ,@l)
       ,@body)))


(defmacro loop-collect-rplacd (&environment env
			       (head-var tail-var &optional user-head-var) form)
  (setq form (macroexpand form env))
  (flet ((cdr-wrap (form n)
	   (declare (fixnum n))
	   (do () ((<= n 4) (setq form `(,(case n
					    (1 'cdr)
					    (2 'cddr)
					    (3 'cdddr)
					    (4 'cddddr))
					 ,form)))
	     (setq form `(cddddr ,form) n (- n 4)))))
    (let ((tail-form form) (ncdrs nil))
      ;;Determine if the form being constructed is a list of known length.
      (when (consp form)
	(cond ((eq (car form) 'list)
	       (setq ncdrs (1- (length (cdr form))))
	       ;;@@@@ Because the last element is going to be RPLACDed,
	       ;; we don't want the cdr-coded implementations to use
	       ;; cdr-nil at the end (which would just force copying
	       ;; the whole list again).
	       )
	      ((member (car form) '(list* cons))
	       (when (and (cddr form) (member (car (last form)) '(nil 'nil)))
		 (setq ncdrs (- (length (cdr form)) 2))))))
      (let ((answer
	      (cond ((null ncdrs)
		     `(when (setf (cdr ,tail-var) ,tail-form)
			(setq ,tail-var (last (cdr ,tail-var)))))
		    ((< ncdrs 0) (return-from loop-collect-rplacd nil))
		    ((= ncdrs 0)
		     ;;@@@@ Here we have a choice of two idioms:
		     ;; (rplacd tail (setq tail tail-form))
		     ;; (setq tail (setf (cdr tail) tail-form)).
		     ;;Genera and most others I have seen do better with the former.
		     `(rplacd ,tail-var (setq ,tail-var ,tail-form)))
		    (t `(setq ,tail-var ,(cdr-wrap `(setf (cdr ,tail-var) ,tail-form)
						   ncdrs))))))
	;;If not using locatives or something similar to update the user's
	;; head variable, we've got to set it...  It's harmless to repeatedly set it
	;; unconditionally, and probably faster than checking.
	(when user-head-var
          (setq answer `(progn ,answer (setq ,user-head-var (cdr ,head-var)))))
	answer))))


(defmacro loop-collect-answer (head-var &optional user-head-var)
  (or user-head-var
      (progn
	;;If we use locatives to get tail-updating to update the head var,
	;; then the head var itself contains the answer.  Otherwise we
	;; have to cdr it.
        `(cdr ,head-var))))


;;;; Maximization Technology


#|
The basic idea of all this minimax randomness here is that we have to
have constructed all uses of maximize and minimize to a particular
"destination" before we can decide how to code them.  The goal is to not
have to have any kinds of flags, by knowing both that (1) the type is
something which we can provide an initial minimum or maximum value for
and (2) know that a MAXIMIZE and MINIMIZE are not being combined.

SO, we have a datastructure which we annotate with all sorts of things,
incrementally updating it as we generate loop body code, and then use
a wrapper and internal macros to do the coding when the loop has been
constructed.
|#


(defstruct (loop-minimax
	     (:constructor make-loop-minimax-internal)
	     (:copier nil)
	     (:predicate nil))
  answer-variable
  type
  temp-variable
  flag-variable
  operations
  infinity-data)


(defvar *loop-minimax-type-infinities-alist*
  '((fixnum   		most-positive-fixnum		most-negative-fixnum))
  )


(defun make-loop-minimax (answer-variable type)
  (let ((infinity-data (cdr (assoc type *loop-minimax-type-infinities-alist* :test #'subtypep))))
    (make-loop-minimax-internal
      :answer-variable answer-variable
      :type type
      :temp-variable (loop-gentemp 'loop-maxmin-temp-)
      :flag-variable (and (not infinity-data) (loop-gentemp 'loop-maxmin-flag-))
      :operations nil
      :infinity-data infinity-data)))


(defun loop-note-minimax-operation (operation minimax)
  (pushnew (the symbol operation) (loop-minimax-operations minimax))
  (when (and (cdr (loop-minimax-operations minimax))
	     (not (loop-minimax-flag-variable minimax)))
    (setf (loop-minimax-flag-variable minimax) (loop-gentemp 'loop-maxmin-flag-)))
  operation)


(defmacro with-minimax-value (lm &body body)
  (let ((init (loop-typed-init (loop-minimax-type lm)))
	(which (car (loop-minimax-operations lm)))
	(infinity-data (loop-minimax-infinity-data lm))
	(answer-var (loop-minimax-answer-variable lm))
	(temp-var (loop-minimax-temp-variable lm))
	(flag-var (loop-minimax-flag-variable lm))
	(type (loop-minimax-type lm)))
    (if flag-var
	`(let ((,answer-var ,init) (,temp-var ,init) (,flag-var nil))
	   (declare (type ,type ,answer-var ,temp-var))
	   ,@body)
	`(let ((,answer-var ,(if (eq which 'min) (first infinity-data) (second infinity-data)))
	       (,temp-var ,init))
	   (declare (type ,type ,answer-var ,temp-var))
	   ,@body))))


(defmacro loop-accumulate-minimax-value (lm operation form)
  (let* ((answer-var (loop-minimax-answer-variable lm))
	 (temp-var (loop-minimax-temp-variable lm))
	 (flag-var (loop-minimax-flag-variable lm))
	 (test
	   (hide-variable-reference
	     t (loop-minimax-answer-variable lm)
	     `(,(ecase operation
		  (min '<)
		  (max '>))
	       ,temp-var ,answer-var))))
    `(progn
       (setq ,temp-var ,form)
       (when ,(if flag-var `(or (not ,flag-var) ,test) test)
	 (setq ,@(and flag-var `(,flag-var t))
	       ,answer-var ,temp-var)))))



;;;; Loop Keyword Tables


#|
LOOP keyword tables are hash tables string keys and a test of EQUAL.

The actual descriptive/dispatch structure used by LOOP is called a "loop
universe" contains a few tables and parameterizations.  The basic idea is
that we can provide a non-extensible ANSI-compatible loop environment,
an extensible ANSI-superset loop environment, and (for such environments
as CLOE) one which is "sufficiently close" to the old Genera-vintage
LOOP for use by old user programs without requiring all of the old LOOP
code to be loaded.
|#


;;;; Token Hackery


;;;Compare two "tokens".  The first is the frob out of *LOOP-SOURCE-CODE*,
;;; the second a symbol to check against.
(defun loop-tequal (x1 x2)
  (and (symbolp x1) (string= x1 x2)))


(defun loop-tassoc (kwd alist)
  (and (symbolp kwd) (assoc kwd alist :test #'string=)))


(defun loop-tmember (kwd list)
  (and (symbolp kwd) (member kwd list :test #'string=)))


(defun loop-lookup-keyword (loop-token table)
  (and (symbolp loop-token)
       (values (gethash (symbol-name loop-token) table))))


(defmacro loop-store-table-data (symbol table datum)
  `(setf (gethash (symbol-name ,symbol) ,table) ,datum))


(defstruct (loop-universe
	     (:print-function print-loop-universe)
	     (:copier nil)
	     (:predicate nil))
  keywords					;hash table, value = (fn-name . extra-data).
  iteration-keywords				;hash table, value = (fn-name . extra-data).
  for-keywords					;hash table, value = (fn-name . extra-data).
  path-keywords					;hash table, value = (fn-name . extra-data).
  type-symbols					;hash table of type SYMBOLS, test EQ, value = CL type specifier.
  type-keywords					;hash table of type STRINGS, test EQUAL, value = CL type spec.
  ansi						;NIL, T, or :EXTENDED.
  implicit-for-required				;see loop-hack-iteration
  )


(defun print-loop-universe (u stream level)
  (declare (ignore level))
  (let ((str (case (loop-universe-ansi u)
	       ((nil) "Non-ANSI")
	       ((t) "ANSI")
	       (:extended "Extended-ANSI")
	       (t (loop-universe-ansi u)))))
    (print-unreadable-object (u stream :type t :identity t)
      (princ str stream))))


;;;This is the "current" loop context in use when we are expanding a
;;;loop.  It gets bound on each invocation of LOOP.
(defvar *loop-universe*)


(defun make-standard-loop-universe (&key keywords for-keywords iteration-keywords path-keywords
				    type-keywords type-symbols ansi)
  (check-type ansi (member nil t :extended))
  (flet ((maketable (entries)
	   (let* ((size (length entries))
		  (ht (make-hash-table :size (if (< size 10) 10 size) :test #'equal)))
	     (dolist (x entries) (setf (gethash (symbol-name (car x)) ht) (cadr x)))
	     ht)))
    (make-loop-universe
      :keywords (maketable keywords)
      :for-keywords (maketable for-keywords)
      :iteration-keywords (maketable iteration-keywords)
      :path-keywords (maketable path-keywords)
      :ansi ansi
      :implicit-for-required (not (null ansi))
      :type-keywords (maketable type-keywords)
      :type-symbols (let* ((size (length type-symbols))
			   (ht (make-hash-table :size (if (< size 10) 10 size) :test #'eq)))
		      (dolist (x type-symbols)
			(if (atom x) (setf (gethash x ht) x) (setf (gethash (car x) ht) (cadr x))))
		      ht)))) 


;;;; Setq Hackery


(defvar *loop-destructuring-hooks*
	nil
  "If not NIL, this must be a list of two things:
a LET-like macro, and a SETQ-like macro, which perform LOOP-style destructuring.")


(defun loop-make-psetq (frobs)
  (and frobs
       (loop-make-desetq
	 (list (car frobs)
	       (if (null (cddr frobs)) (cadr frobs)
		   `(prog1 ,(cadr frobs)
			   ,(loop-make-psetq (cddr frobs))))))))


(defun loop-make-desetq (var-val-pairs)
  (if (null var-val-pairs)
      nil
      (cons (if *loop-destructuring-hooks*
		(cadr *loop-destructuring-hooks*)
		'loop-really-desetq)
	    var-val-pairs)))


(defvar *loop-desetq-temporary*
	(make-symbol "LOOP-DESETQ-TEMP"))


(defmacro loop-really-desetq (&environment env &rest var-val-pairs)
  (labels ((find-non-null (var)
	     ;; see if there's any non-null thing here
	     ;; recurse if the list element is itself a list
	     (do ((tail var)) ((not (consp tail)) tail)
	       (when (find-non-null (pop tail)) (return t))))
	   (loop-desetq-internal (var val &optional temp)
	     ;; returns a list of actions to be performed
	     (typecase var
	       (null
		 (when (consp val)
		   ;; don't lose possible side-effects
		   (if (eq (car val) 'prog1)
		       ;; these can come from psetq or desetq below.
		       ;; throw away the value, keep the side-effects.
		       ;;Special case is for handling an expanded POP.
		       (mapcan #'(lambda (x)
				   (and (consp x)
					(or (not (eq (car x) 'car))
					    (not (symbolp (cadr x)))
					    (not (symbolp (setq x (macroexpand x env)))))
					(cons x nil)))
			       (cdr val))
		       `(,val))))
	       (cons
		 (let* ((car (car var))
			(cdr (cdr var))
			(car-non-null (find-non-null car))
			(cdr-non-null (find-non-null cdr)))
		   (when (or car-non-null cdr-non-null)
		     (if cdr-non-null
			 (let* ((temp-p temp)
				(temp (or temp *loop-desetq-temporary*))
				(body  `(,@(loop-desetq-internal car `(car ,temp))
                                           (setq ,temp (cdr ,temp))
                                           ,@(loop-desetq-internal cdr temp temp))))
			   (if temp-p
			       `(,@(unless (eq temp val)
				     `((setq ,temp ,val)))
				 ,@body)
			       `((let ((,temp ,val))
				   ,@body))))
			 ;; no cdring to do
			 (loop-desetq-internal car `(car ,val) temp)))))
	       (otherwise
		 (unless (eq var val)
		   `((setq ,var ,val)))))))
    (do ((actions))
	((null var-val-pairs)
	 (if (null (cdr actions)) (car actions) `(progn ,@(nreverse actions))))
      (setq actions (revappend
		      (loop-desetq-internal (pop var-val-pairs) (pop var-val-pairs))
		      actions)))))


;;;; LOOP-local variables

;;;This is the "current" pointer into the LOOP source code.
(defvar *loop-source-code*)


;;;This is the pointer to the original, for things like NAMED that
;;;insist on being in a particular position
(defvar *loop-original-source-code*)


;;;This is *loop-source-code* as of the "last" clause.  It is used
;;;primarily for generating error messages (see loop-error, loop-warn).
(defvar *loop-source-context*)


;;;List of names for the LOOP, supplied by the NAMED clause.
(defvar *loop-names*)

;;;The macroexpansion environment given to the macro.
(defvar *loop-macro-environment*)

;;;This holds variable names specified with the USING clause.
;;; See LOOP-NAMED-VARIABLE.
(defvar *loop-named-variables*)

;;; LETlist-like list being accumulated for one group of parallel bindings.
(defvar *loop-variables*)

;;;List of declarations being accumulated in parallel with
;;;*loop-variables*.
(defvar *loop-declarations*)

;;;Used by LOOP for destructuring binding, if it is doing that itself.
;;; See loop-make-variable.
(defvar *loop-desetq-crocks*)

;;; List of wrapping forms, innermost first, which go immediately inside
;;; the current set of parallel bindings being accumulated in
;;; *loop-variables*.  The wrappers are appended onto a body.  E.g.,
;;; this list could conceivably has as its value ((with-open-file (g0001
;;; g0002 ...))), with g0002 being one of the bindings in
;;; *loop-variables* (this is why the wrappers go inside of the variable
;;; bindings).
(defvar *loop-wrappers*)

;;;This accumulates lists of previous values of *loop-variables* and the
;;;other lists  above, for each new nesting of bindings.  See
;;;loop-bind-block.
(defvar *loop-bind-stack*)

;;;This is a LOOP-global variable for the (obsolete) NODECLARE clause
;;;which inhibits  LOOP from actually outputting a type declaration for
;;;an iteration (or any) variable.
(defvar *loop-nodeclare*)

;;;This is simply a list of LOOP iteration variables, used for checking
;;;for duplications.
(defvar *loop-iteration-variables*)


;;;List of prologue forms of the loop, accumulated in reverse order.
(defvar *loop-prologue*)

(defvar *loop-before-loop*)
(defvar *loop-body*)
(defvar *loop-after-body*)

;;;This is T if we have emitted any body code, so that iteration driving
;;;clauses can be disallowed.   This is not strictly the same as
;;;checking *loop-body*, because we permit some clauses  such as RETURN
;;;to not be considered "real" body (so as to permit the user to "code"
;;;an  abnormal return value "in loop").
(defvar *loop-emitted-body*)


;;;List of epilogue forms (supplied by FINALLY generally), accumulated
;;; in reverse order.
(defvar *loop-epilogue*)

;;;List of epilogue forms which are supplied after the above "user"
;;;epilogue.  "normal" termination return values are provide by putting
;;;the return form in here.  Normally this is done using
;;;loop-emit-final-value, q.v.
(defvar *loop-after-epilogue*)

;;;The "culprit" responsible for supplying a final value from the loop.
;;;This  is so loop-emit-final-value can moan about multiple return
;;;values being supplied.
(defvar *loop-final-value-culprit*)

;;;If not NIL, we are in some branch of a conditional.  Some clauses may
;;;be disallowed.
(defvar *loop-inside-conditional*)

;;;If not NIL, this is a temporary bound around the loop for holding the
;;;temporary  value for "it" in things like "when (f) collect it".  It
;;;may be used as a supertemporary by some other things.
(defvar *loop-when-it-variable*)

;;;Sometimes we decide we need to fold together parts of the loop, but
;;;some part of the generated iteration  code is different for the first
;;;and remaining iterations.  This variable will be the temporary which 
;;;is the flag used in the loop to tell whether we are in the first or
;;;remaining iterations.
(defvar *loop-never-stepped-variable*)

;;;List of all the value-accumulation descriptor structures in the loop.
;;; See loop-get-collection-info.
(defvar *loop-collection-cruft*)		; for multiple COLLECTs (etc)


;;;; Code Analysis Stuff


(defun loop-constant-fold-if-possible (form &optional expected-type)
  (let ((new-form form) (constantp nil) (constant-value nil))
    (when (setq constantp (constantp new-form))
      (setq constant-value (eval new-form)))
    (when (and constantp expected-type)
      (unless (typep constant-value expected-type)
	(loop-warn "The form ~S evaluated to ~S, which was not of the anticipated type ~S."
          form constant-value expected-type)
	(setq constantp nil constant-value nil)))
    (values new-form constantp constant-value)))


(defun loop-constantp (form)
  (constantp form))


;;;; LOOP Iteration Optimization

(defvar *loop-duplicate-code*
	nil)


(defvar *loop-iteration-flag-variable*
	(make-symbol "LOOP-NOT-FIRST-TIME"))


(defun loop-code-duplication-threshold (env)
  (multiple-value-bind (speed space) (loop-optimization-quantities env)
    (+ 40 (* (- speed space) 10))))


(defmacro loop-body (&environment env
		     prologue
		     before-loop
		     main-body
		     after-loop
		     epilogue
		     &aux rbefore rafter flagvar)
  (unless (= (length before-loop) (length after-loop))
    (loop-error "LOOP-BODY called with non-synched before- and after-loop lists."))
  ;;All our work is done from these copies, working backwards from the end:
  (setq rbefore (reverse before-loop) rafter (reverse after-loop))
  (labels ((psimp (l)
	     (let ((ans nil))
	       (dolist (x l)
		 (when x
		   (push x ans)
		   (when (and (consp x) (member (car x) '(go return return-from)))
		     (return nil))))
	       (nreverse ans)))
	   (pify (l) (if (null (cdr l)) (car l) `(progn ,@l)))
	   (makebody ()
	     (let ((form `(tagbody
			    ,@(psimp (append prologue (nreverse rbefore)))
			 next-loop
			    ,@(psimp (append main-body (nreconc rafter `((go next-loop)))))
			 end-loop
			    ,@(psimp epilogue))))
	       (if flagvar `(let ((,flagvar nil)) ,form) form))))
    (when (or *loop-duplicate-code* (not rbefore))
      (return-from loop-body (makebody)))
    ;; This outer loop iterates once for each not-first-time flag test generated
    ;; plus once more for the forms that don't need a flag test
    (do ((threshold (loop-code-duplication-threshold env))) (nil)
      (declare (fixnum threshold))
      ;; Go backwards from the ends of before-loop and after-loop merging all the equivalent
      ;; forms into the body.
      (do () ((or (null rbefore) (not (equal (car rbefore) (car rafter)))))
	(push (pop rbefore) main-body)
	(pop rafter))
      (unless rbefore (return (makebody)))
      ;; The first forms in rbefore & rafter (which are the chronologically
      ;; last forms in the list) differ, therefore they cannot be moved
      ;; into the main body.  If everything that chronologically precedes
      ;; them either differs or is equal but is okay to duplicate, we can
      ;; just put all of rbefore in the prologue and all of rafter after
      ;; the body.  Otherwise, there is something that is not okay to
      ;; duplicate, so it and everything chronologically after it in
      ;; rbefore and rafter must go into the body, with a flag test to
      ;; distinguish the first time around the loop from later times.
      ;; What chronologically precedes the non-duplicatable form will
      ;; be handled the next time around the outer loop.
      (do ((bb rbefore (cdr bb)) (aa rafter (cdr aa)) (lastdiff nil) (count 0) (inc nil))
	  ((null bb) (return-from loop-body (makebody)))	;Did it.
	(cond ((not (equal (car bb) (car aa))) (setq lastdiff bb count 0))
	      ((or (not (setq inc (estimate-code-size (car bb) env)))
		   (> (incf count inc) threshold))
	       ;; Ok, we have found a non-duplicatable piece of code.  Everything
	       ;; chronologically after it must be in the central body.
	       ;; Everything chronologically at and after lastdiff goes into the
	       ;; central body under a flag test.
	       (let ((then nil) (else nil))
		 (do () (nil)
		   (push (pop rbefore) else)
		   (push (pop rafter) then)
		   (when (eq rbefore (cdr lastdiff)) (return)))
		 (unless flagvar
		   (push `(setq ,(setq flagvar *loop-iteration-flag-variable*) t) else))
		 (push `(if ,flagvar ,(pify (psimp then)) ,(pify (psimp else)))
		       main-body))
	       ;; Everything chronologically before lastdiff until the non-duplicatable form (car bb) 
	       ;; is the same in rbefore and rafter so just copy it into the body
	       (do () (nil)
		 (pop rafter)
		 (push (pop rbefore) main-body)
		 (when (eq rbefore (cdr bb)) (return)))
	       (return)))))))



(defun duplicatable-code-p (expr env)
  (if (null expr) 0
      (let ((ans (estimate-code-size expr env)))
	(declare (fixnum ans))
	;;@@@@ Use (DECLARATION-INFORMATION 'OPTIMIZE ENV) here to get an alist of
	;; optimize quantities back to help quantify how much code we are willing to
	;; duplicate.
	ans)))


(defvar *special-code-sizes*
	'((return 0) (progn 0)
	  (null 1) (not 1) (eq 1) (car 1) (cdr 1)
	  (when 1) (unless 1) (if 1)
	  (caar 2) (cadr 2) (cdar 2) (cddr 2)
	  (caaar 3) (caadr 3) (cadar 3) (caddr 3) (cdaar 3) (cdadr 3) (cddar 3) (cdddr 3)
	  (caaaar 4) (caaadr 4) (caadar 4) (caaddr 4)
	  (cadaar 4) (cadadr 4) (caddar 4) (cadddr 4)
	  (cdaaar 4) (cdaadr 4) (cdadar 4) (cdaddr 4)
	  (cddaar 4) (cddadr 4) (cdddar 4) (cddddr 4)))


(defvar *estimate-code-size-punt*
	'(block
	   do do* dolist
	   flet
	   labels lambda let let* locally
	   macrolet multiple-value-bind
	   prog prog*
	   symbol-macrolet
	   tagbody
	   unwind-protect
	   with-open-file))


(defun destructuring-size (x)
  (do ((x x (cdr x)) (n 0 (+ (destructuring-size (car x)) n)))
      ((atom x) (+ n (if (null x) 0 1)))))


(defun estimate-code-size (x env)
  (catch 'estimate-code-size
    (estimate-code-size-1 x env)))


(defun estimate-code-size-1 (x env)
  (flet ((list-size (l)
	   (let ((n 0))
	     (declare (fixnum n))
	     (dolist (x l n) (incf n (estimate-code-size-1 x env))))))
    ;;@@@@ ???? (declare (function list-size (list) fixnum))
    (cond ((constantp x) 1)
	  ((symbolp x) (multiple-value-bind (new-form expanded-p) (macroexpand-1 x env)
			 (if expanded-p (estimate-code-size-1 new-form env) 1)))
	  ((atom x) 1)				;??? self-evaluating???
	  ((symbolp (car x))
	   (let ((fn (car x)) (tem nil) (n 0))
	     (declare (symbol fn) (fixnum n))
	     (macrolet ((f (overhead &optional (args nil args-p))
			  `(the fixnum (+ (the fixnum ,overhead)
					  (the fixnum (list-size ,(if args-p args '(cdr x))))))))
	       (cond ((setq tem (get fn 'estimate-code-size))
		      (typecase tem
			(fixnum (f tem))
			(t (funcall tem x env))))
		     ((setq tem (assoc fn *special-code-sizes*)) (f (second tem)))
                     ((eq fn 'cond)
		      (dolist (clause (cdr x) n) (incf n (list-size clause)) (incf n)))
		     ((eq fn 'desetq)
		      (do ((l (cdr x) (cdr l))) ((null l) n)
			(setq n (+ n (destructuring-size (car l)) (estimate-code-size-1 (cadr l) env)))))
		     ((member fn '(setq psetq))
		      (do ((l (cdr x) (cdr l))) ((null l) n)
			(setq n (+ n (estimate-code-size-1 (cadr l) env) 1))))
		     ((eq fn 'go) 1)
		     ((eq fn 'function)
		      ;;This skirts the issue of implementationally-defined lambda macros
		      ;; by recognizing CL function names and nothing else.
		      (if (or (symbolp (cadr x))
                              (ccl::setf-function-name-p  (cadr x)))
			  1
			  (throw 'duplicatable-code-p nil)))
		     ((eq fn 'multiple-value-setq) (f (length (second x)) (cddr x)))
		     ((eq fn 'return-from) (1+ (estimate-code-size-1 (third x) env)))
		     ((or (special-operator-p fn) (member fn *estimate-code-size-punt*))
		      (throw 'estimate-code-size nil))
		     (t (multiple-value-bind (new-form expanded-p) (macroexpand-1 x env)
			  (if expanded-p
			      (estimate-code-size-1 new-form env)
			      (f 3))))))))
	  (t (throw 'estimate-code-size nil)))))


;;;; Loop Errors


(defun loop-context ()
  (do ((l *loop-source-context* (cdr l)) (new nil (cons (car l) new)))
      ((eq l (cdr *loop-source-code*)) (nreverse new))))


(defun loop-error (format-string &rest format-args)
  (ccl::signal-program-error "~?~%Current LOOP context:~{ ~S~}."
                             format-string format-args (loop-context)))


(defun loop-warn (format-string &rest format-args)
  (warn "~?~%Current LOOP context:~{ ~S~}." format-string format-args (loop-context)))

(pushnew '(loop-error . 0) ccl::*format-arg-functions* :test #'equal)
(pushnew '(loop-warn . 0) ccl::*format-arg-functions* :test #'equal)


(defun loop-check-data-type (specified-type required-type
			     &optional (default-type required-type))
  (if (null specified-type)
      default-type
      (multiple-value-bind (a b) (subtypep specified-type required-type)
	(cond ((not b)
	       (loop-warn "LOOP couldn't verify that ~S is a subtype of the required type ~S."
			  specified-type required-type))
	      ((not a)
	       (loop-error "Specified data type ~S is not a subtype of ~S."
			   specified-type required-type)))
	specified-type)))


;;;INTERFACE: Traditional, ANSI, Lucid.
(defmacro loop-finish ()
  "Cause the iteration to terminate \"normally\", the same as implicit
termination by an iteration driving clause, or by use of WHILE or
UNTIL -- the epilogue code (if any) will be run, and any implicitly
collected result will be returned as the value of the LOOP."
  '(go end-loop))



(defun subst-gensyms-for-nil (tree)
  (declare (special *ignores*))
  (cond
    ((null tree) (car (push (loop-gentemp) *ignores*)))
    ((atom tree) tree)
    (t (cons (subst-gensyms-for-nil (car tree))
	     (subst-gensyms-for-nil (cdr tree))))))

(defmacro loop-destructuring-bind (lambda-list args-list &body body)
  (let ((*ignores* ()))
    (declare (special *ignores*))
    (let ((dl (subst-gensyms-for-nil lambda-list)))
      `(destructuring-bind (&optional ,@dl) ,args-list
	 (declare (ignore ,@*ignores*))
	 ,@body))))

(defun loop-build-destructuring-bindings (crocks forms)
  (if crocks
      `((loop-destructuring-bind ,(car crocks) ,(cadr crocks)
	,@(loop-build-destructuring-bindings (cddr crocks) forms)))
      forms))

(defun loop-translate (*loop-source-code* *loop-macro-environment* *loop-universe*)
  (let ((*loop-original-source-code* *loop-source-code*)
	(*loop-source-context* nil)
	(*loop-iteration-variables* nil)
	(*loop-variables* nil)
	(*loop-nodeclare* nil)
	(*loop-named-variables* nil)
	(*loop-declarations* nil)
	(*loop-desetq-crocks* nil)
	(*loop-bind-stack* nil)
	(*loop-prologue* nil)
	(*loop-wrappers* nil)
	(*loop-before-loop* nil)
	(*loop-body* nil)
	(*loop-emitted-body* nil)
	(*loop-after-body* nil)
	(*loop-epilogue* nil)
	(*loop-after-epilogue* nil)
	(*loop-final-value-culprit* nil)
	(*loop-inside-conditional* nil)
	(*loop-when-it-variable* nil)
	(*loop-never-stepped-variable* nil)
	(*loop-names* nil)
	(*loop-collection-cruft* nil))
    (loop-iteration-driver)
    (loop-bind-block)
    (let ((answer `(loop-body
		     ,(nreverse *loop-prologue*)
		     ,(nreverse *loop-before-loop*)
		     ,(nreverse *loop-body*)
		     ,(nreverse *loop-after-body*)
		     ,(nreconc *loop-epilogue* (nreverse *loop-after-epilogue*)))))
      (dolist (entry *loop-bind-stack*)
	(let ((vars (first entry))
	      (dcls (second entry))
	      (crocks (third entry))
	      (wrappers (fourth entry)))
	  (dolist (w wrappers)
	    (setq answer (append w (list answer))))
	  (when (or vars dcls crocks)
	    (let ((forms (list answer)))
	      ;;(when crocks (push crocks forms))
	      (when dcls (push `(declare ,@dcls) forms))
	      (setq answer `(,(cond ((not vars) 'locally)
				    (*loop-destructuring-hooks* (first *loop-destructuring-hooks*))
				    (t 'let))
			     ,vars
			     ,@(loop-build-destructuring-bindings crocks forms)))))))
      `(block ,(car *loop-names*) ,answer))))

(defun loop-iteration-driver ()
  (do () ((null *loop-source-code*))
    (let ((keyword (car *loop-source-code*)) (tem nil))
      (cond ((not (symbolp keyword))
	     (loop-error "~S found where LOOP keyword expected." keyword))
	    (t (setq *loop-source-context* *loop-source-code*)
	       (loop-pop-source)
	       (cond ((setq tem (loop-lookup-keyword keyword (loop-universe-keywords *loop-universe*)))
		      ;;It's a "miscellaneous" toplevel LOOP keyword (do, collect, named, etc.)
		      (apply (symbol-function (first tem)) (rest tem)))
		     ((setq tem (loop-lookup-keyword keyword (loop-universe-iteration-keywords *loop-universe*)))
		      (loop-hack-iteration tem))
		     ((loop-tmember keyword '(and else))
		      ;; Alternative is to ignore it, ie let it go around to the next keyword...
		      (loop-error "Secondary clause misplaced at top level in LOOP macro: ~S ~S ~S ..."
				  keyword (car *loop-source-code*) (cadr *loop-source-code*)))
		     (t (loop-error "~S is an unknown keyword in LOOP macro." keyword))))))))



(defun loop-pop-source ()
  (if *loop-source-code*
      (pop *loop-source-code*)
      (loop-error "LOOP source code ran out when another token was expected.")))


(defun loop-get-compound-form ()
  (let ((form (loop-get-form)))
    (unless (consp form)
      (loop-error "Compound form expected, but found ~A." form))
    form))

(defun loop-get-progn ()
  (do ((forms (list (loop-get-compound-form))
              (cons (loop-get-compound-form) forms))
       (nextform (car *loop-source-code*)
                 (car *loop-source-code*)))
      ((atom nextform)
       (if (null (cdr forms)) (car forms) (cons 'progn (nreverse forms))))))


(defun loop-get-form ()
  (if *loop-source-code*
      (loop-pop-source)
      (loop-error "LOOP code ran out where a form was expected.")))


(defun loop-construct-return (form)
  `(return-from ,(car *loop-names*) ,form))


(defun loop-pseudo-body (form)
  (cond ((or *loop-emitted-body* *loop-inside-conditional*) (push form *loop-body*))
	(t (push form *loop-before-loop*) (push form *loop-after-body*))))

(defun loop-emit-body (form)
  (setq *loop-emitted-body* t)
  (loop-pseudo-body form))

(defun loop-emit-final-value (&optional (form nil form-supplied-p))
  (when form-supplied-p
    (push (loop-construct-return form) *loop-after-epilogue*))
  (when *loop-final-value-culprit*
    (loop-warn "LOOP clause is providing a value for the iteration,~@
	        however one was already established by a ~S clause."
	       *loop-final-value-culprit*))
  (setq *loop-final-value-culprit* (car *loop-source-context*)))


(defun loop-disallow-conditional (&optional kwd)
  (when *loop-inside-conditional*
    (loop-error "~:[This LOOP~;The LOOP ~:*~S~] clause is not permitted inside a conditional." kwd)))

(defun loop-disallow-anonymous-collectors ()
  (when (find-if-not 'loop-collector-name *loop-collection-cruft*)
    (loop-error "This LOOP clause is not permitted with anonymous collectors.")))

(defun loop-disallow-aggregate-booleans ()
  (when (loop-tmember *loop-final-value-culprit* '(always never thereis))
    (loop-error "This anonymous collection LOOP clause is not permitted with aggregate booleans.")))



;;;; Loop Types


(defun loop-typed-init (data-type)
  (when data-type
    (let ((val (if (subtypep data-type 'number)
                 (if (or (subtypep data-type 'float) (subtypep data-type '(complex float)))
                   (coerce 0 data-type)
                   0)
                 (if (subtypep data-type 'character)
                   #\Null
                   nil))))
      (and val (typep val data-type) val))))


(defun loop-optional-type (&optional variable)
  ;;No variable specified implies that no destructuring is permissible.
  (and *loop-source-code*			;Don't get confused by NILs...
       (let ((z (car *loop-source-code*)))
	 (cond ((loop-tequal z 'of-type)
		;;This is the syntactically unambigous form in that the form of the
		;; type specifier does not matter.  Also, it is assumed that the
		;; type specifier is unambiguously, and without need of translation,
		;; a common lisp type specifier or pattern (matching the variable) thereof.
		(loop-pop-source)
		(loop-pop-source))
		      
	       ((symbolp z)
		;;This is the (sort of) "old" syntax, even though we didn't used to support all of
		;; these type symbols.
		(let ((type-spec (or (gethash z (loop-universe-type-symbols *loop-universe*))
				     (gethash (symbol-name z) (loop-universe-type-keywords *loop-universe*)))))
		  (when type-spec
		    (loop-pop-source)
		    type-spec)))
	       (t 
		;;This is our sort-of old syntax.  But this is only valid for when we are destructuring,
		;; so we will be compulsive (should we really be?) and require that we in fact be
		;; doing variable destructuring here.  We must translate the old keyword pattern typespec
		;; into a fully-specified pattern of real type specifiers here.
		(if (consp variable)
		    (unless (consp z)
		     (loop-error
			"~S found where a LOOP keyword, LOOP type keyword, or LOOP type pattern expected."
			z))
		    (loop-error "~S found where a LOOP keyword or LOOP type keyword expected." z))
		(loop-pop-source)
		(labels ((translate (k v)
			   (cond ((null k) nil)
				 ((atom k)
				  (replicate
				    (or (gethash k (loop-universe-type-symbols *loop-universe*))
					(gethash (symbol-name k) (loop-universe-type-keywords *loop-universe*))
					(loop-error
					  "Destructuring type pattern ~S contains unrecognized type keyword ~S."
					  z k))
				    v))
				 ((atom v)
				  (loop-error
				    "Destructuring type pattern ~S doesn't match variable pattern ~S."
				    z variable))
				 (t (cons (translate (car k) (car v)) (translate (cdr k) (cdr v))))))
			 (replicate (typ v)
			   (if (atom v) typ (cons (replicate typ (car v)) (replicate typ (cdr v))))))
		  (translate z variable)))))))



;;;; Loop Variables


(defun loop-bind-block ()
  (when (or *loop-variables* *loop-declarations* *loop-wrappers*)
    (push (list (nreverse *loop-variables*) *loop-declarations* *loop-desetq-crocks* *loop-wrappers*)
	  *loop-bind-stack*)
    (setq *loop-variables* nil
	  *loop-declarations* nil
	  *loop-desetq-crocks* nil
	  *loop-wrappers* nil)))

(defun loop-variable-p (name)
  (do ((entry *loop-bind-stack* (cdr entry))) (nil)
    (cond ((null entry)
	   (return nil))
	  ((assoc name (caar entry) :test #'eq)
	   (return t)))))

(defun loop-make-variable (name initialization dtype &optional iteration-variable-p)
  (cond ((null name)
	 (cond ((not (null initialization))
		(push (list (setq name (loop-gentemp 'loop-ignore-))
			    initialization)
		      *loop-variables*)
		(push `(ignore ,name) *loop-declarations*))))
	((atom name)
	 (cond (iteration-variable-p
		(if (member name *loop-iteration-variables*)
		    (loop-error "Duplicated LOOP iteration variable ~S." name)
		    (push name *loop-iteration-variables*)))
	       ((assoc name *loop-variables*)
		(loop-error "Duplicated variable ~S in LOOP parallel binding." name)))
	 (unless (symbolp name)
	   (loop-error "Bad variable ~S somewhere in LOOP." name))
         (unless initialization (setq initialization (loop-typed-init dtype)))
         (when (and dtype
                    (null initialization)
                    (not (typep nil dtype)))
           (if (eq dtype 'complex)
             (setq initialization 0 dtype 'number)
             (when iteration-variable-p
               (setq dtype `(or null ,dtype)))))
	 (loop-declare-variable name dtype)
	 ;; We use ASSOC on this list to check for duplications (above),
	 ;; so don't optimize out this list:
	 (push (list name initialization) *loop-variables*))
	(initialization
	 (cond (*loop-destructuring-hooks*
		(loop-declare-variable name dtype)
		(push (list name initialization) *loop-variables*))
	       (t (let ((newvar (loop-gentemp 'loop-destructure-)))
		    (loop-declare-variable name dtype)
		    (push (list newvar initialization) *loop-variables*)
		    ;; *LOOP-DESETQ-CROCKS* gathered in reverse order.
		    (setq *loop-desetq-crocks*
		      (list* name newvar *loop-desetq-crocks*))))))
	(t (let ((tcar nil) (tcdr nil))
	     (if (atom dtype) (setq tcar (setq tcdr dtype))
		 (setq tcar (car dtype) tcdr (cdr dtype)))
	     (loop-make-variable (car name) nil tcar iteration-variable-p)
	     (loop-make-variable (cdr name) nil tcdr iteration-variable-p))))
  name)


(defun loop-make-iteration-variable (name initialization dtype)
  (loop-make-variable name initialization dtype t))


(defun loop-declare-variable (name dtype)
  (cond ((or (null name) (null dtype) (eq dtype t)) nil)
	((symbolp name)
	 (unless (or (eq dtype t) (member (the symbol name) *loop-nodeclare*))
	   (push `(type ,dtype ,name) *loop-declarations*)))
	((consp name)
	 (cond ((consp dtype)
		(loop-declare-variable (car name) (car dtype))
		(loop-declare-variable (cdr name) (cdr dtype)))
	       (t (loop-declare-variable (car name) dtype)
		  (loop-declare-variable (cdr name) dtype))))
	(t (loop-error "Invalid LOOP variable passed in: ~S." name))))


(defun loop-maybe-bind-form (form data-type)
  (if (loop-constantp form)
      form
      (loop-make-variable (loop-gentemp 'loop-bind-) form data-type)))



(defun loop-do-if (for negatep)
  (let ((form (loop-get-form))
	(*loop-inside-conditional* t)
	(it-p nil)
	(first-clause-p t))
    (flet ((get-clause (for)
	     (do ((body nil)) (nil)
	       (let ((key (car *loop-source-code*)) (*loop-body* nil) data)
		 (cond ((not (symbolp key))
			(loop-error
			  "~S found where keyword expected getting LOOP clause after ~S."
			  key for))
		       (t (setq *loop-source-context* *loop-source-code*)
			  (loop-pop-source)
			  (when (and (loop-tequal (car *loop-source-code*) 'it)
				     first-clause-p)
			    (setq *loop-source-code*
				  (cons (or it-p (setq it-p (loop-when-it-variable)))
					(cdr *loop-source-code*))))
			  (cond ((or (not (setq data (loop-lookup-keyword
						       key (loop-universe-keywords *loop-universe*))))
				     (progn (apply (symbol-function (car data)) (cdr data))
					    (null *loop-body*)))
				 (loop-error
				   "~S does not introduce a LOOP clause that can follow ~S."
				   key for))
				(t (setq body (nreconc *loop-body* body)))))))
	       (setq first-clause-p nil)
	       (if (loop-tequal (car *loop-source-code*) :and)
		   (loop-pop-source)
		   (return (if (cdr body) `(progn ,@(nreverse body)) (car body)))))))
      (let ((then (get-clause for))
	    (else (when (loop-tequal (car *loop-source-code*) :else)
		    (loop-pop-source)
		    (list (get-clause :else)))))
	(when (loop-tequal (car *loop-source-code*) :end)
	  (loop-pop-source))
	(when it-p (setq form `(setq ,it-p ,form)))
	(loop-pseudo-body
	  `(if ,(if negatep `(not ,form) form)
	       ,then
	       ,@else))))))


(defun loop-do-initially ()
  (loop-disallow-conditional :initially)
  (push (loop-get-progn) *loop-prologue*))

(defun loop-do-finally ()
  (loop-disallow-conditional :finally)
  (push (loop-get-progn) *loop-epilogue*))

(defun loop-do-do ()
  (loop-emit-body (loop-get-progn)))

(defun loop-do-named ()
  (let ((name (loop-pop-source)))
    (unless (symbolp name)
      (loop-error "~S is an invalid name for your LOOP." name))
    (when (or *loop-before-loop* *loop-body* *loop-after-epilogue* *loop-inside-conditional*)
      (loop-error "The NAMED ~S clause occurs too late." name))
    (when *loop-names*
      (loop-error "You may only use one NAMED clause in your loop: NAMED ~S ... NAMED ~S."
		  (car *loop-names*) name))
    (setq *loop-names* (list name))))

(defun loop-do-return ()
  (loop-emit-body (loop-construct-return (loop-get-form))))


;;;; Value Accumulation: List


(defstruct (loop-collector
	     (:copier nil)
	     (:predicate nil))
  name
  class
  (history nil)
  (tempvars nil)
  dtype
  (data nil))						;collector-specific data


(defun loop-get-collection-info (collector class default-type)
  (let ((form (loop-get-form))
	(dtype (and (not (loop-universe-ansi *loop-universe*)) (loop-optional-type)))
	(name (when (loop-tequal (car *loop-source-code*) 'into)
		(loop-pop-source)
		(loop-pop-source))))
    (when (not (symbolp name))
      (loop-error "Value accumulation recipient name, ~S, is not a symbol." name))
    (unless name
      (loop-disallow-aggregate-booleans))
    (unless dtype
      (setq dtype (or (loop-optional-type) default-type)))
    (let ((cruft (find (the symbol name) *loop-collection-cruft*
		       :key #'loop-collector-name)))
      (cond ((not cruft)
	     (when (and name (loop-variable-p name))
	       (loop-error "Variable ~S cannot be used in INTO clause" name))
	     (push (setq cruft (make-loop-collector
				 :name name :class class
				 :history (list collector) :dtype dtype))
		   *loop-collection-cruft*))
	    (t (unless (eq (loop-collector-class cruft) class)
		 (loop-error
		   "Incompatible kinds of LOOP value accumulation specified for collecting~@
		    ~:[as the value of the LOOP~;~:*INTO ~S~]: ~S and ~S."
		   name (car (loop-collector-history cruft)) collector))
	       (unless (equal dtype (loop-collector-dtype cruft))
		 (loop-warn
		   "Unequal datatypes specified in different LOOP value accumulations~@
		   into ~S: ~S and ~S."
		   name dtype (loop-collector-dtype cruft))
		 (when (eq (loop-collector-dtype cruft) t)
		   (setf (loop-collector-dtype cruft) dtype)))
	       (push collector (loop-collector-history cruft))))
      (values cruft form))))


(defun loop-list-collection (specifically)	;NCONC, LIST, or APPEND
  (multiple-value-bind (lc form) (loop-get-collection-info specifically 'list 'list)
    (let ((tempvars (loop-collector-tempvars lc)))
      (unless tempvars
	(setf (loop-collector-tempvars lc)
	      (setq tempvars (list* (loop-gentemp 'loop-list-head-)
				    (loop-gentemp 'loop-list-tail-)
				    (and (loop-collector-name lc)
					 (list (loop-collector-name lc))))))
	(push `(with-loop-list-collection-head ,tempvars) *loop-wrappers*)
	(unless (loop-collector-name lc)
	  (loop-emit-final-value `(loop-collect-answer ,(car tempvars) ,@(cddr tempvars)))))
      (ecase specifically
	(list (setq form `(list ,form)))
	(nconc nil)
	(append (unless (and (consp form) (eq (car form) 'list))
		  (setq form `(loop-copylist* ,form)))))
      (loop-emit-body `(loop-collect-rplacd ,tempvars ,form)))))


;;;; Value Accumulation: max, min, sum, count.



(defun loop-sum-collection (specifically required-type default-type)	;SUM, COUNT
  (multiple-value-bind (lc form)
      (loop-get-collection-info specifically 'sum default-type)
    (loop-check-data-type (loop-collector-dtype lc) required-type)
    (let ((tempvars (loop-collector-tempvars lc)))
      (unless tempvars
	(setf (loop-collector-tempvars lc)
	      (setq tempvars (list (loop-make-variable
				     (or (loop-collector-name lc)
					 (loop-gentemp 'loop-sum-))
				     nil (loop-collector-dtype lc)))))
	(unless (loop-collector-name lc)
	  (loop-emit-final-value (car (loop-collector-tempvars lc)))))
      (loop-emit-body
	(if (eq specifically 'count)
	    `(when ,form
	       (setq ,(car tempvars)
		     ,(hide-variable-reference t (car tempvars) `(1+ ,(car tempvars)))))
	    `(setq ,(car tempvars)
		   (+ ,(hide-variable-reference t (car tempvars) (car tempvars))
		      ,form)))))))



(defun loop-maxmin-collection (specifically)
  (multiple-value-bind (lc form)
      (loop-get-collection-info specifically 'maxmin *loop-real-data-type*)
    (loop-check-data-type (loop-collector-dtype lc) *loop-real-data-type*)
    (let ((data (loop-collector-data lc)))
      (unless data
	(setf (loop-collector-data lc)
	      (setq data (make-loop-minimax
			   (or (loop-collector-name lc) (loop-gentemp 'loop-maxmin-))
			   (loop-collector-dtype lc))))
	(unless (loop-collector-name lc)
	  (loop-emit-final-value (loop-minimax-answer-variable data))))
      (loop-note-minimax-operation specifically data)
      (push `(with-minimax-value ,data) *loop-wrappers*)
      (loop-emit-body `(loop-accumulate-minimax-value ,data ,specifically ,form))
      )))


;;;; Value Accumulation:  Aggregate Booleans

;;;ALWAYS and NEVER.
;;; Under ANSI these are not permitted to appear under conditionalization.
(defun loop-do-always (restrictive negate)
  (let ((form (loop-get-form)))
    (when restrictive (loop-disallow-conditional))
    (loop-disallow-anonymous-collectors)
    (loop-emit-body `(,(if negate 'when 'unless) ,form
		      ,(loop-construct-return nil)))
    (loop-emit-final-value t)))



;;;THERIS.
;;; Under ANSI this is not permitted to appear under conditionalization.
(defun loop-do-thereis (restrictive)
  (when restrictive (loop-disallow-conditional))
  (loop-disallow-anonymous-collectors)
  (loop-emit-final-value)
  (loop-emit-body `(when (setq ,(loop-when-it-variable) ,(loop-get-form))
		     ,(loop-construct-return *loop-when-it-variable*))))


(defun loop-do-while (negate kwd &aux (form (loop-get-form)))
  (loop-disallow-conditional kwd)
  (loop-pseudo-body `(,(if negate 'when 'unless) ,form (go end-loop))))


(defun loop-do-with ()
  (loop-disallow-conditional :with)
  (do ((var) (val) (dtype)) (nil)
    (setq var (loop-pop-source)
	  dtype (loop-optional-type var)
	  val (cond ((loop-tequal (car *loop-source-code*) :=)
		     (loop-pop-source)
		     (loop-get-form))
		    (t nil)))
    (when (and var (loop-variable-p var))
      (loop-error "Variable ~S has already been used" var))
    (loop-make-variable var val dtype)
    (if (loop-tequal (car *loop-source-code*) :and)
	(loop-pop-source)
	(return (loop-bind-block)))))


;;;; The iteration driver

(defun loop-hack-iteration (entry)
  (flet ((make-endtest (list-of-forms)
	   (cond ((null list-of-forms) nil)
		 ((member t list-of-forms) '(go end-loop))
		 (t `(when ,(if (null (cdr (setq list-of-forms (nreverse list-of-forms))))
				(car list-of-forms)
				(cons 'or list-of-forms))
		       (go end-loop))))))
    (do ((pre-step-tests nil)
	 (steps nil)
	 (post-step-tests nil)
	 (pseudo-steps nil)
	 (pre-loop-pre-step-tests nil)
	 (pre-loop-steps nil)
	 (pre-loop-post-step-tests nil)
	 (pre-loop-pseudo-steps nil)
	 (tem) (data))
	(nil)
      ;; Note we collect endtests in reverse order, but steps in correct
      ;; order.  MAKE-ENDTEST does the nreverse for us.
      (setq tem (setq data (apply (symbol-function (first entry)) (rest entry))))
      (and (car tem) (push (car tem) pre-step-tests))
      (setq steps (nconc steps (loop-copylist* (car (setq tem (cdr tem))))))
      (and (car (setq tem (cdr tem))) (push (car tem) post-step-tests))
      (setq pseudo-steps (nconc pseudo-steps (loop-copylist* (car (setq tem (cdr tem))))))
      (setq tem (cdr tem))
      (when *loop-emitted-body*
	(loop-error "Iteration in LOOP follows body code."))
      (unless tem (setq tem data))
      (when (car tem) (push (car tem) pre-loop-pre-step-tests))
      (setq pre-loop-steps (nconc pre-loop-steps (loop-copylist* (car (setq tem (cdr tem))))))
      (when (car (setq tem (cdr tem))) (push (car tem) pre-loop-post-step-tests))
      (setq pre-loop-pseudo-steps (nconc pre-loop-pseudo-steps (loop-copylist* (cadr tem))))
      (unless (loop-tequal (car *loop-source-code*) :and)
	(setq *loop-before-loop* (list* (loop-make-desetq pre-loop-pseudo-steps)
					(make-endtest pre-loop-post-step-tests)
					(loop-make-psetq pre-loop-steps)
					(make-endtest pre-loop-pre-step-tests)
					*loop-before-loop*)
	      *loop-after-body* (list* (loop-make-desetq pseudo-steps)
				       (make-endtest post-step-tests)
				       (loop-make-psetq steps)
				       (make-endtest pre-step-tests)
				       *loop-after-body*))
	(loop-bind-block)
	(return nil))
      (loop-pop-source)				; flush the "AND"
      (when (and (not (loop-universe-implicit-for-required *loop-universe*))
		 (setq tem (loop-lookup-keyword
			     (car *loop-source-code*)
			     (loop-universe-iteration-keywords *loop-universe*))))
	;;Latest ANSI clarification is that the FOR/AS after the AND must NOT be supplied.
	(loop-pop-source)
	(setq entry tem)))))


;;;; Main Iteration Drivers


;FOR variable keyword ..args..
(defun loop-do-for ()
  (let* ((var (loop-pop-source))
	 (data-type (loop-optional-type var))
	 (keyword (loop-pop-source))
	 (first-arg nil)
	 (tem nil))
    (setq first-arg (loop-get-form))
    (unless (and (symbolp keyword)
		 (setq tem (loop-lookup-keyword
			     keyword
			     (loop-universe-for-keywords *loop-universe*))))
      (loop-error "~S is an unknown keyword in FOR or AS clause in LOOP." keyword))
    (apply (car tem) var first-arg data-type (cdr tem))))

(defun loop-do-repeat ()
  (loop-disallow-conditional :repeat)
  (let ((form (loop-get-form))
	(type 'real))
    (let ((var (loop-make-variable (loop-gentemp) form type)))
      (push `(when (minusp (decf ,var)) (go end-loop)) *loop-before-loop*)
      (push `(when (minusp (decf ,var)) (go end-loop)) *loop-after-body*)
      ;; FIXME: What should
      ;;   (loop count t into a
      ;;         repeat 3
      ;;         count t into b
      ;;         finally (return (list a b)))
      ;; return: (3 3) or (4 3)? PUSHes above are for the former
      ;; variant, L-P-B below for the latter.
      )))

(defun loop-when-it-variable ()
  (or *loop-when-it-variable*
      (setq *loop-when-it-variable*
	    (loop-make-variable (loop-gentemp 'loop-it-) nil nil))))


;;;; Various FOR/AS Subdispatches


;;;ANSI "FOR x = y [THEN z]" is sort of like the old Genera one when the THEN
;;; is omitted (other than being more stringent in its placement), and like
;;; the old "FOR x FIRST y THEN z" when the THEN is present.  I.e., the first
;;; initialization occurs in the loop body (first-step), not in the variable binding
;;; phase.
(defun loop-ansi-for-equals (var val data-type)
  (loop-make-iteration-variable var nil data-type)
  (cond ((loop-tequal (car *loop-source-code*) :then)
	 ;;Then we are the same as "FOR x FIRST y THEN z".
	 (loop-pop-source)
	 `(() (,var ,(loop-get-form)) () ()
	   () (,var ,val) () ()))
	(t ;;We are the same as "FOR x = y".
	 `(() (,var ,val) () ()))))


(defun loop-for-across (var val data-type)
  (loop-make-iteration-variable var nil data-type)
  (let ((vector-var (loop-gentemp 'loop-across-vector-))
	(index-var (loop-gentemp 'loop-across-index-)))
    (multiple-value-bind (vector-form constantp vector-value)
	(loop-constant-fold-if-possible val 'vector)
      (loop-make-variable
	vector-var vector-form
	(if (and (consp vector-form) (eq (car vector-form) 'the))
	    (cadr vector-form)
	    'vector))
      (loop-make-variable index-var 0 'fixnum)
      (let* ((length 0)
	     (length-form (cond ((not constantp)
				 (let ((v (loop-gentemp 'loop-across-limit-)))
				   (push `(setq ,v (length ,vector-var)) *loop-prologue*)
				   (loop-make-variable v 0 'fixnum)))
				(t (setq length (length vector-value)))))
	     (first-test `(>= ,index-var ,length-form))
	     (other-test first-test)
	     (step `(,var (aref ,vector-var ,index-var)))
	     (pstep `(,index-var (1+ ,index-var))))
	(declare (fixnum length))
	(when constantp
	  (setq first-test (= length 0))
	  (when (<= length 1)
	    (setq other-test t)))
	`(,other-test ,step () ,pstep
	  ,@(and (not (eq first-test other-test)) `(,first-test ,step () ,pstep)))))))



;;;; List Iteration


(defun loop-list-step (listvar)
  ;;We are not equipped to analyze whether 'FOO is the same as #'FOO here in any
  ;; sensible fashion, so let's give an obnoxious warning whenever 'FOO is used
  ;; as the stepping function.
  ;;While a Discerning Compiler may deal intelligently with (funcall 'foo ...), not
  ;; recognizing FOO may defeat some LOOP optimizations.
  (let ((stepper (cond ((loop-tequal (car *loop-source-code*) :by)
			(loop-pop-source)
			(loop-get-form))
		       (t '(function cdr)))))
    (cond ((and (consp stepper) (eq (car stepper) 'quote))
	   (loop-warn "Use of QUOTE around stepping function in LOOP will be left verbatim.")
	   (values `(funcall ,stepper ,listvar) nil))
	  ((and (consp stepper) (eq (car stepper) 'function))
	   (values (list (cadr stepper) listvar) (cadr stepper)))
	  (t (values `(funcall ,(loop-make-variable (loop-gentemp 'loop-fn-) stepper 'function)
			       ,listvar)
		     nil)))))


(defun loop-for-on (var val data-type)
  (multiple-value-bind (list constantp list-value) (loop-constant-fold-if-possible val)
    (let ((listvar var))
      (cond ((and var (symbolp var)) (loop-make-iteration-variable var list data-type))
	    (t (loop-make-variable (setq listvar (loop-gentemp)) list nil)
	       (loop-make-iteration-variable var nil data-type)))
      (multiple-value-bind (list-step step-function) (loop-list-step `(the cons ,listvar))
	(declare (ignore step-function))
	;;@@@@ The CLOE problem above has to do with bug in macroexpansion of multiple-value-bind.
	(let* ((first-endtest
		(hide-variable-reference
		 (eq var listvar)
		 listvar
		 ;; the following should use `atom' instead of `endp', per
		 ;; [bug2428]
		 `(atom ,listvar)))
	       (other-endtest first-endtest))
	  (when (and constantp (listp list-value))
	    (setq first-endtest (null list-value)))
	  (cond ((eq var listvar)
		 ;;Contour of the loop is different because we use the user's variable...
		 `(() (,listvar ,(hide-variable-reference t listvar list-step)) ,other-endtest
		   () () () ,first-endtest ()))
		(t (let ((step `(,var (the cons ,listvar))) (pseudo `(,listvar ,list-step)))
		     `(,other-endtest ,step () ,pseudo
		       ,@(and (not (eq first-endtest other-endtest))
			      `(,first-endtest ,step () ,pseudo)))))))))))


(defun loop-for-in (var val data-type)
  (multiple-value-bind (list constantp list-value) (loop-constant-fold-if-possible val)
    (let ((listvar (loop-gentemp 'loop-list-)))
      (loop-make-iteration-variable var nil data-type)
      (loop-make-variable listvar list 'list)
      (multiple-value-bind (list-step step-function) (loop-list-step listvar)
        (declare (ignore step-function))
	(let* ((first-endtest `(endp ,listvar))
	       (other-endtest first-endtest)
	       (step `(,var (car ,listvar)))
	       (pseudo-step `(,listvar ,list-step)))
	  (when (and constantp (listp list-value))
	    (setq first-endtest (null list-value)))
	  `(,other-endtest ,step () ,pseudo-step
	    ,@(and (not (eq first-endtest other-endtest))
		   `(,first-endtest ,step () ,pseudo-step))))))))


;;;; Iteration Paths


(defstruct (loop-path
	     (:copier nil)
	     (:predicate nil))
  names
  preposition-groups
  inclusive-permitted
  function
  user-data)


(defun add-loop-path (names function universe &key preposition-groups inclusive-permitted user-data)
  (unless (listp names) (setq names (list names)))
  ;; Can't do this due to CLOS bootstrapping problems.
  (check-type universe loop-universe)
  (let ((ht (loop-universe-path-keywords universe))
	(lp (make-loop-path
	      :names (mapcar #'symbol-name names)
	      :function function
	      :user-data user-data
	      :preposition-groups (mapcar #'(lambda (x) (if (listp x) x (list x))) preposition-groups)
	      :inclusive-permitted inclusive-permitted)))
    (dolist (name names) (setf (gethash (symbol-name name) ht) lp))
    lp))


;;; Note:  path functions are allowed to use loop-make-variable, hack
;;; the prologue, etc.
(defun loop-for-being (var val data-type)
  ;; FOR var BEING each/the pathname prep-phrases using-stuff...
  ;; each/the = EACH or THE.  Not clear if it is optional, so I guess we'll warn.
  (let ((path nil)
	(data nil)
	(inclusive nil)
	(stuff nil)
	(initial-prepositions nil))
    (cond ((loop-tmember val '(:each :the)) (setq path (loop-pop-source)))
	  ((loop-tequal (car *loop-source-code*) :and)
	   (loop-pop-source)
	   (setq inclusive t)
	   (unless (loop-tmember (car *loop-source-code*) '(:its :each :his :her))
	     (loop-error "~S found where ITS or EACH expected in LOOP iteration path syntax."
			 (car *loop-source-code*)))
	   (loop-pop-source)
	   (setq path (loop-pop-source))
	   (setq initial-prepositions `((:in ,val))))
	  (t (loop-error "Unrecognizable LOOP iteration path syntax.  Missing EACH or THE?")))
    (cond ((not (symbolp path))
	   (loop-error "~S found where a LOOP iteration path name was expected." path))
	  ((not (setq data (loop-lookup-keyword path (loop-universe-path-keywords *loop-universe*))))
	   (loop-error "~S is not the name of a LOOP iteration path." path))
	  ((and inclusive (not (loop-path-inclusive-permitted data)))
	   (loop-error "\"Inclusive\" iteration is not possible with the ~S LOOP iteration path." path)))
    (let ((fun (loop-path-function data))
	  (preps (nconc initial-prepositions
			(loop-collect-prepositional-phrases (loop-path-preposition-groups data) t)))
	  (user-data (loop-path-user-data data)))
      (when (symbolp fun) (setq fun (symbol-function fun)))
      (setq stuff (if inclusive
		      (apply fun var data-type preps :inclusive t user-data)
		      (apply fun var data-type preps user-data))))
    (when *loop-named-variables*
      (loop-error "Unused USING variables: ~S." *loop-named-variables*))
    ;; STUFF is now (bindings prologue-forms . stuff-to-pass-back).  Protect the system from the user
    ;; and the user from himself.
    (unless (member (length stuff) '(6 10))
      (loop-error "Value passed back by LOOP iteration path function for path ~S has invalid length."
		  path))
    (do ((l (car stuff) (cdr l)) (x)) ((null l))
      (if (atom (setq x (car l)))
	  (loop-make-iteration-variable x nil nil)
	  (loop-make-iteration-variable (car x) (cadr x) (caddr x))))
    (setq *loop-prologue* (nconc (reverse (cadr stuff)) *loop-prologue*))
    (cddr stuff)))



;;;INTERFACE:  Lucid, exported.
;;; i.e., this is part of our extended ansi-loop interface.
(defun named-variable (name)
  (let ((tem (loop-tassoc name *loop-named-variables*)))
    (declare (list tem))
    (cond ((null tem) (values (loop-gentemp) nil))
	  (t (setq *loop-named-variables* (delete tem *loop-named-variables*))
	     (values (cdr tem) t)))))


(defun loop-collect-prepositional-phrases (preposition-groups &optional USING-allowed initial-phrases)
  (flet ((in-group-p (x group) (car (loop-tmember x group))))
    (do ((token nil)
	 (prepositional-phrases initial-phrases)
	 (this-group nil nil)
	 (this-prep nil nil)
	 (disallowed-prepositions
	   (mapcan #'(lambda (x)
		       (loop-copylist*
			 (find (car x) preposition-groups :test #'in-group-p)))
		   initial-phrases))
	 (used-prepositions (mapcar #'car initial-phrases)))
	((null *loop-source-code*) (nreverse prepositional-phrases))
      (declare (symbol this-prep))
      (setq token (car *loop-source-code*))
      (dolist (group preposition-groups)
	(when (setq this-prep (in-group-p token group))
	  (return (setq this-group group))))
      (cond (this-group
	     (when (member this-prep disallowed-prepositions)
	       (loop-error
		 (if (member this-prep used-prepositions)
		     "A ~S prepositional phrase occurs multiply for some LOOP clause."
		     "Preposition ~S used when some other preposition has subsumed it.")
		 token))
	     (setq used-prepositions (if (listp this-group)
					 (append this-group used-prepositions)
					 (cons this-group used-prepositions)))
	     (loop-pop-source)
	     (push (list this-prep (loop-get-form)) prepositional-phrases))
	    ((and USING-allowed (loop-tequal token 'using))
	     (loop-pop-source)
	     (do ((z (loop-pop-source) (loop-pop-source)) (tem)) (nil)
	       (when (cadr z)
		 (if (setq tem (loop-tassoc (car z) *loop-named-variables*))
		     (loop-error
		       "The variable substitution for ~S occurs twice in a USING phrase,~@
		        with ~S and ~S."
		       (car z) (cadr z) (cadr tem))
		     (push (cons (car z) (cadr z)) *loop-named-variables*)))
	       (when (or (null *loop-source-code*) (symbolp (car *loop-source-code*)))
		 (return nil))))
	    (t (return (nreverse prepositional-phrases)))))))


;;;; Master Sequencer Function


(defun loop-sequencer (indexv indexv-type indexv-user-specified-p
			  variable variable-type
			  sequence-variable sequence-type
			  step-hack default-top
			  prep-phrases)
   (let ((endform nil)				;Form (constant or variable) with limit value.
	 (sequencep nil)			;T if sequence arg has been provided.
	 (testfn nil)				;endtest function
	 (test nil)				;endtest form.
	 (stepby (1+ (or (loop-typed-init indexv-type) 0)))	;Our increment.
	 (stepby-constantp t)
	 (step nil)				;step form.
	 (dir nil)				;Direction of stepping: NIL, :UP, :DOWN.
	 (inclusive-iteration nil)		;T if include last index.
	 (start-given nil)			;T when prep phrase has specified start
	 (start-value nil)
	 (start-constantp nil)
	 (limit-given nil)			;T when prep phrase has specified end
	 (limit-constantp nil)
	 (limit-value nil)
	 )
     (when variable (loop-make-iteration-variable variable nil variable-type))
     (do ((l prep-phrases (cdr l)) (prep) (form) (odir)) ((null l))
       (setq prep (caar l) form (cadar l))
       (case prep
	 ((:of :in)
	  (setq sequencep t)
	  (loop-make-variable sequence-variable form sequence-type))
	 ((:from :downfrom :upfrom)
	  (setq start-given t)
	  (cond ((eq prep :downfrom) (setq dir ':down))
		((eq prep :upfrom) (setq dir ':up)))
	  (multiple-value-setq (form start-constantp start-value)
	    (loop-constant-fold-if-possible form indexv-type))
	  (setq indexv (loop-make-iteration-variable indexv form indexv-type)))
	 ((:upto :to :downto :above :below)
	  (cond ((loop-tequal prep :upto) (setq inclusive-iteration (setq dir ':up)))
		((loop-tequal prep :to) (setq inclusive-iteration t))
		((loop-tequal prep :downto) (setq inclusive-iteration (setq dir ':down)))
		((loop-tequal prep :above) (setq dir ':down))
		((loop-tequal prep :below) (setq dir ':up)))
	  (setq limit-given t)
	  (multiple-value-setq (form limit-constantp limit-value)
	    (loop-constant-fold-if-possible form indexv-type))
	  (setq endform (if limit-constantp
			    `',limit-value
			    (loop-make-variable
			      (loop-gentemp 'loop-limit-) form indexv-type))))
	 (:by
	   (multiple-value-setq (form stepby-constantp stepby)
	     (loop-constant-fold-if-possible form indexv-type))
	   (unless stepby-constantp
	     (loop-make-variable (setq stepby (loop-gentemp 'loop-step-by-)) form indexv-type)))
	 (t (loop-error
	      "~S invalid preposition in sequencing or sequence path.~@
	       Invalid prepositions specified in iteration path descriptor or something?"
	      prep)))
       (when (and odir dir (not (eq dir odir)))
	 (loop-error "Conflicting stepping directions in LOOP sequencing path"))
       (setq odir dir))
     (when (and sequence-variable (not sequencep))
       (loop-error "Missing OF or IN phrase in sequence path"))
     ;; Now fill in the defaults.
     (unless start-given
       (loop-make-iteration-variable
	 indexv
	 (setq start-constantp t start-value (or (loop-typed-init indexv-type) 0))
	 indexv-type))
     (cond ((member dir '(nil :up))
	    (when (or limit-given default-top)
	      (unless limit-given
		(loop-make-variable (setq endform (loop-gentemp 'loop-seq-limit-))
				    nil indexv-type)
		(push `(setq ,endform ,default-top) *loop-prologue*))
	      (setq testfn (if inclusive-iteration '> '>=)))
	    (setq step (if (eql stepby 1) `(1+ ,indexv) `(+ ,indexv ,stepby))))
	   (t (unless start-given
		(unless default-top
		  (loop-error "Don't know where to start stepping."))
		(push `(setq ,indexv (1- ,default-top)) *loop-prologue*))
	      (when (and default-top (not endform))
		(setq endform (loop-typed-init indexv-type) inclusive-iteration t))
	      (when endform (setq testfn (if inclusive-iteration  '< '<=)))
	      (setq step (if (eql stepby 1) `(1- ,indexv) `(- ,indexv ,stepby)))))
     (when testfn (setq test (hide-variable-reference t indexv `(,testfn ,indexv ,endform))))
     (when step-hack
       (setq step-hack `(,variable ,(hide-variable-reference indexv-user-specified-p indexv step-hack))))
     (let ((first-test test) (remaining-tests test))
       (when (and stepby-constantp start-constantp limit-constantp)
	 (when (setq first-test (funcall (symbol-function testfn) start-value limit-value))
	   (setq remaining-tests t)))
       `(() (,indexv ,(hide-variable-reference t indexv step)) ,remaining-tests ,step-hack
	 () () ,first-test ,step-hack))))


;;;; Interfaces to the Master Sequencer



(defun loop-for-arithmetic (var val data-type kwd)
  (loop-sequencer
    var (loop-check-data-type data-type 'number) t
    nil nil nil nil nil nil
    (loop-collect-prepositional-phrases
      '((:from :upfrom :downfrom) (:to :upto :downto :above :below) (:by))
      nil (list (list kwd val)))))


(defun loop-sequence-elements-path (variable data-type prep-phrases
				    &key fetch-function size-function sequence-type element-type)
  (multiple-value-bind (indexv indexv-user-specified-p) (named-variable 'index)
    (let ((sequencev (named-variable 'sequence)))
      (list* nil nil				; dummy bindings and prologue
	     (loop-sequencer
	       indexv 'fixnum indexv-user-specified-p
	       variable (or data-type element-type)
	       sequencev sequence-type
	       `(,fetch-function ,sequencev ,indexv) `(,size-function ,sequencev)
	       prep-phrases)))))


;;;; Builtin LOOP Iteration Paths


#||
(loop for v being the hash-values of ht do (print v))
(loop for k being the hash-keys of ht do (print k))
(loop for v being the hash-values of ht using (hash-key k) do (print (list k v)))
(loop for k being the hash-keys of ht using (hash-value v) do (print (list k v)))
||#

(defun loop-hash-table-iteration-path (variable data-type prep-phrases &key which)
  (check-type which (member hash-key hash-value))
  (cond ((or (cdr prep-phrases) (not (member (caar prep-phrases) '(:in :of))))
	 (loop-error "Too many prepositions!"))
	((null prep-phrases) (loop-error "Missing OF or IN in iteration path." )))
  (let ((ht-var (loop-gentemp 'loop-hashtab-))
	(next-fn (loop-gentemp 'loop-hashtab-next-))
	(dummy-predicate-var nil)
	(post-steps nil))
    (multiple-value-bind (other-var other-p)
	(named-variable (if (eq which 'hash-key) 'hash-value 'hash-key))
      ;;@@@@ named-variable returns a second value of T if the name was actually
      ;; specified, so clever code can throw away the gensym'ed up variable if
      ;; it isn't really needed.
      (unless other-p (push `(ignorable ,other-var) *loop-declarations*))
      ;;The following is for those implementations in which we cannot put dummy NILs
      ;; into multiple-value-setq variable lists.
      (setq other-p t
            dummy-predicate-var (loop-when-it-variable))
      (setq variable (or variable (loop-gentemp 'ignore-)))
      (let ((key-var nil)
	    (val-var nil)
	    (bindings `((,variable nil ,data-type)
			(,ht-var ,(cadar prep-phrases))
			,@(and other-p other-var `((,other-var nil))))))
	(if (eq which 'hash-key)
	    (setq key-var variable val-var (and other-p other-var))
	    (setq key-var (and other-p other-var) val-var variable))
	(push `(with-hash-table-iterator (,next-fn ,ht-var)) *loop-wrappers*)
	(when (or (consp key-var) data-type)
	  (setq post-steps `(,key-var ,(setq key-var (loop-gentemp 'loop-hash-key-temp-))
			     ,@post-steps))
	  (push `(,key-var nil) bindings))
	(when (or (consp val-var) data-type)
	  (setq post-steps `(,val-var ,(setq val-var (loop-gentemp 'loop-hash-val-temp-))
			     ,@post-steps))
	  (push `(,val-var nil) bindings))
        (push `(ignorable ,dummy-predicate-var) *loop-declarations*)
	`(,bindings				;bindings
	  ()					;prologue
	  ()					;pre-test
	  ()					;parallel steps
	  (not (multiple-value-setq (,dummy-predicate-var ,key-var ,val-var) (,next-fn)))	;post-test
	  ,post-steps)))))


(defun loop-package-symbols-iteration-path (variable data-type prep-phrases &key symbol-types)
  (cond ((and prep-phrases (cdr prep-phrases))
	 (loop-error "Too many prepositions!"))
	((and prep-phrases (not (member (caar prep-phrases) '(:in :of))))
	 (loop-error "Unknown preposition ~S" (caar prep-phrases))))
  (unless (symbolp variable)
    (loop-error "Destructuring is not valid for package symbol iteration."))
  (let ((pkg-var (loop-gentemp 'loop-pkgsym-))
	(next-fn (loop-gentemp 'loop-pkgsym-next-))
	(variable (or variable (loop-gentemp 'ignore-)))
	(pkg (or (cadar prep-phrases) '*package*)))
    (push `(with-package-iterator (,next-fn ,pkg-var ,@symbol-types)) *loop-wrappers*)
    (push `(ignorable ,(loop-when-it-variable)) *loop-declarations*)
    
    `(((,variable nil ,data-type) (,pkg-var ,pkg))
      ()
      ()
      ()
      (not (multiple-value-setq (,(progn
				    ;;@@@@ If an implementation can get away without actually
				    ;; using a variable here, so much the better.
                                    (loop-when-it-variable))
				 ,variable)
	     (,next-fn)))
      ())))

;;;; ANSI Loop

(defun make-ansi-loop-universe (extended-p)
  (let ((w (make-standard-loop-universe
	     :keywords `((named (loop-do-named))
			 (initially (loop-do-initially))
			 (finally (loop-do-finally))
			 (do (loop-do-do))
			 (doing (loop-do-do))
			 (return (loop-do-return))
			 (collect (loop-list-collection list))
			 (collecting (loop-list-collection list))
			 (append (loop-list-collection append))
			 (appending (loop-list-collection append))
			 (nconc (loop-list-collection nconc))
			 (nconcing (loop-list-collection nconc))
			 (count (loop-sum-collection count ,*loop-real-data-type* fixnum))
			 (counting (loop-sum-collection count ,*loop-real-data-type* fixnum))
			 (sum (loop-sum-collection sum number number))
			 (summing (loop-sum-collection sum number number))
			 (maximize (loop-maxmin-collection max))
			 (minimize (loop-maxmin-collection min))
			 (maximizing (loop-maxmin-collection max))
			 (minimizing (loop-maxmin-collection min))
			 (always (loop-do-always t nil))	; Normal, do always
			 (never (loop-do-always t t))	; Negate the test on always.
			 (thereis (loop-do-thereis t))
			 (while (loop-do-while nil :while))	; Normal, do while
			 (until (loop-do-while t :until))	; Negate the test on while
			 (when (loop-do-if when nil))	; Normal, do when
			 (if (loop-do-if if nil))	; synonymous
			 (unless (loop-do-if unless t))	; Negate the test on when
			 (with (loop-do-with))
			 (repeat (loop-do-repeat)))
	     :for-keywords '((= (loop-ansi-for-equals))
			     (across (loop-for-across))
			     (in (loop-for-in))
			     (on (loop-for-on))
			     (from (loop-for-arithmetic :from))
			     (downfrom (loop-for-arithmetic :downfrom))
			     (upfrom (loop-for-arithmetic :upfrom))
			     (below (loop-for-arithmetic :below))
			     (above (loop-for-arithmetic :above))
			     (by (loop-for-arithmetic :by))
			     (to (loop-for-arithmetic :to))
			     (upto (loop-for-arithmetic :upto))
                             (downto (loop-for-arithmetic :downto))
			     (being (loop-for-being)))
	     :iteration-keywords '((for (loop-do-for))
				   (as (loop-do-for)))
	     :type-symbols '(array atom bignum bit bit-vector character compiled-function
				   complex cons double-float fixnum float
				   function hash-table integer keyword list long-float
				   nil null number package pathname random-state
				   ratio rational readtable sequence short-float
				   simple-array simple-bit-vector simple-string
				   simple-vector single-float standard-char
				   stream string base-char
				   symbol t vector)
	     :type-keywords nil
	     :ansi (if extended-p :extended t))))
    (add-loop-path '(hash-key hash-keys) 'loop-hash-table-iteration-path w
		   :preposition-groups '((:of :in))
		   :inclusive-permitted nil
		   :user-data '(:which hash-key))
    (add-loop-path '(hash-value hash-values) 'loop-hash-table-iteration-path w
		   :preposition-groups '((:of :in))
		   :inclusive-permitted nil
		   :user-data '(:which hash-value))
    (add-loop-path '(symbol symbols) 'loop-package-symbols-iteration-path w
		   :preposition-groups '((:of :in))
		   :inclusive-permitted nil
		   :user-data '(:symbol-types (:internal :external :inherited)))
    (add-loop-path '(external-symbol external-symbols) 'loop-package-symbols-iteration-path w
		   :preposition-groups '((:of :in))
		   :inclusive-permitted nil
		   :user-data '(:symbol-types (:external)))
    (add-loop-path '(present-symbol present-symbols) 'loop-package-symbols-iteration-path w
		   :preposition-groups '((:of :in))
		   :inclusive-permitted nil
		   :user-data '(:symbol-types (:internal :external)))
    w))


(defparameter *loop-ansi-universe*
	      (make-ansi-loop-universe nil))


(defun loop-standard-expansion (keywords-and-forms environment universe)
  (if (and keywords-and-forms (symbolp (car keywords-and-forms)))
      (loop-translate keywords-and-forms environment universe)
      (let ((tag (gensym)))
	`(block nil (tagbody ,tag (progn ,@keywords-and-forms) (go ,tag))))))


(fmakunbound 'loop)                     ; Avoid redefinition warning

;;;INTERFACE: ANSI
(defmacro loop (&environment env &rest keywords-and-forms)
  (loop-standard-expansion keywords-and-forms env *loop-ansi-universe*))

(cl:provide "LOOP")
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3
;;;; END FILE ./reference/ccl/library/loop.lisp
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4n









;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4n









;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4n









;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4n











\;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1
;;;; BEGIN FILE ./reference/ccl/library/sharp-comma.lisp
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2
;;;-*- Mode: Lisp; Package: CCL -*-
;;;
;;; Copyright 1994-2001 Clozure Associates
;;;
;;; Licensed under the Apache License, Version 2.0 (the "License");
;;; you may not use this file except in compliance with the License.
;;; You may obtain a copy of the License at
;;;
;;;     http://www.apache.org/licenses/LICENSE-2.0
;;;
;;; Unless required by applicable law or agreed to in writing, software
;;; distributed under the License is distributed on an "AS IS" BASIS,
;;; WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
;;; See the License for the specific language governing permissions and
;;; limitations under the License.


(in-package "CCL")

;;; #, was removed from CL in 1998 or so, but there may be some legacy
;;; code that still uses it.

(set-dispatch-macro-character
 #\#
 #\,
 #'(lambda (stream subchar numarg)
     (let* ((sharp-comma-token *reading-for-cfasl*))
       (if (or *read-suppress* (not *compiling-file*) (not sharp-comma-token))
         (read-eval stream subchar numarg)
         (progn
           (require-no-numarg subchar numarg)
           (list sharp-comma-token (read stream t nil t)))))))
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3
;;;; END FILE ./reference/ccl/library/sharp-comma.lisp
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4n









;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4n









;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4n









;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4n











\;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1
;;;; BEGIN FILE ./reference/ccl/library/cn-encode.lisp
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2
;;;-*- Mode: Lisp; Package: CCL -*-
;;;
;;; Copyright 2007-2009 Clozure Associates
;;;
;;; Licensed under the Apache License, Version 2.0 (the "License");
;;; you may not use this file except in compliance with the License.
;;; You may obtain a copy of the License at
;;;
;;;     http://www.apache.org/licenses/LICENSE-2.0
;;;
;;; Unless required by applicable law or agreed to in writing, software
;;; distributed under the License is distributed on an "AS IS" BASIS,
;;; WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
;;; See the License for the specific language governing permissions and
;;; limitations under the License.

(in-package "CCL")

;;; converting tables
(defstatic *gb2312-to-unicode-map* nil)
(defstatic *unicode-to-gb2312-map* nil)
(defstatic *cp936-to-unicode-map* nil)
(defstatic *unicode-to-cp936-map* nil)   

;;; setup the hash tables
(let ((gb2312-to-unicode-table
       (mapcar (lambda (pair)
                 (cons (+ (car pair) #x8080) (cdr pair)))
               '(
                 ;; gb2312-to-unicode-table
                 (#x80   . #x20AC)      ; EURO SIGN

                 (#x2121 . #x3000)      ; IDEOGRAPHIC SPACE
                 (#x2122 . #x3001)      ; IDEOGRAPHIC COMMA
                 (#x2123 . #x3002)      ; IDEOGRAPHIC FULL STOP
                 (#x2124 . #x30FB)      ; KATAKANA MIDDLE DOT
                 (#x2125 . #x02C9)      ; MODIFIER LETTER MACRON (Mandarin Chinese first tone)
                 (#x2126 . #x02C7)      ; CARON (Mandarin Chinese third tone)
                 (#x2127 . #x00A8)      ; DIAERESIS
                 (#x2128 . #x3003)      ; DITTO MARK
                 (#x2129 . #x3005)      ; IDEOGRAPHIC ITERATION MARK
                 (#x212A . #x2015)      ; HORIZONTAL BAR
                 (#x212B . #xFF5E)      ; FULLWIDTH TILDE
                 (#x212C . #x2016)      ; DOUBLE VERTICAL LINE
                 (#x212D . #x2026)      ; HORIZONTAL ELLIPSIS
                 (#x212E . #x2018)      ; LEFT SINGLE QUOTATION MARK
                 (#x212F . #x2019)      ; RIGHT SINGLE QUOTATION MARK
                 (#x2130 . #x201C)      ; LEFT DOUBLE QUOTATION MARK
                 (#x2131 . #x201D)      ; RIGHT DOUBLE QUOTATION MARK
                 (#x2132 . #x3014)      ; LEFT TORTOISE SHELL BRACKET
                 (#x2133 . #x3015)      ; RIGHT TORTOISE SHELL BRACKET
                 (#x2134 . #x3008)      ; LEFT ANGLE BRACKET
                 (#x2135 . #x3009)      ; RIGHT ANGLE BRACKET
                 (#x2136 . #x300A)      ; LEFT DOUBLE ANGLE BRACKET
                 (#x2137 . #x300B)      ; RIGHT DOUBLE ANGLE BRACKET
                 (#x2138 . #x300C)      ; LEFT CORNER BRACKET
                 (#x2139 . #x300D)      ; RIGHT CORNER BRACKET
                 (#x213A . #x300E)      ; LEFT WHITE CORNER BRACKET
                 (#x213B . #x300F)      ; RIGHT WHITE CORNER BRACKET
                 (#x213C . #x3016)      ; LEFT WHITE LENTICULAR BRACKET
                 (#x213D . #x3017)      ; RIGHT WHITE LENTICULAR BRACKET
                 (#x213E . #x3010)      ; LEFT BLACK LENTICULAR BRACKET
                 (#x213F . #x3011)      ; RIGHT BLACK LENTICULAR BRACKET
                 (#x2140 . #x00B1)      ; PLUS-MINUS SIGN
                 (#x2141 . #x00D7)      ; MULTIPLICATION SIGN
                 (#x2142 . #x00F7)      ; DIVISION SIGN
                 (#x2143 . #x2236)      ; RATIO
                 (#x2144 . #x2227)      ; LOGICAL AND
                 (#x2145 . #x2228)      ; LOGICAL OR
                 (#x2146 . #x2211)      ; N-ARY SUMMATION
                 (#x2147 . #x220F)      ; N-ARY PRODUCT
                 (#x2148 . #x222A)      ; UNION
                 (#x2149 . #x2229)      ; INTERSECTION
                 (#x214A . #x2208)      ; ELEMENT OF
                 (#x214B . #x2237)      ; PROPORTION
                 (#x214C . #x221A)      ; SQUARE ROOT
                 (#x214D . #x22A5)      ; UP TACK
                 (#x214E . #x2225)      ; PARALLEL TO
                 (#x214F . #x2220)      ; ANGLE
                 (#x2150 . #x2312)      ; ARC
                 (#x2151 . #x2299)      ; CIRCLED DOT OPERATOR
                 (#x2152 . #x222B)      ; INTEGRAL
                 (#x2153 . #x222E)      ; CONTOUR INTEGRAL
                 (#x2154 . #x2261)      ; IDENTICAL TO
                 (#x2155 . #x224C)      ; ALL EQUAL TO
                 (#x2156 . #x2248)      ; ALMOST EQUAL TO
                 (#x2157 . #x223D)      ; REVERSED TILDE
                 (#x2158 . #x221D)      ; PROPORTIONAL TO
                 (#x2159 . #x2260)      ; NOT EQUAL TO
                 (#x215A . #x226E)      ; NOT LESS-THAN
                 (#x215B . #x226F)      ; NOT GREATER-THAN
                 (#x215C . #x2264)      ; LESS-THAN OR EQUAL TO
                 (#x215D . #x2265)      ; GREATER-THAN OR EQUAL TO
                 (#x215E . #x221E)      ; INFINITY
                 (#x215F . #x2235)      ; BECAUSE
                 (#x2160 . #x2234)      ; THEREFORE
                 (#x2161 . #x2642)      ; MALE SIGN
                 (#x2162 . #x2640)      ; FEMALE SIGN
                 (#x2163 . #x00B0)      ; DEGREE SIGN
                 (#x2164 . #x2032)      ; PRIME
                 (#x2165 . #x2033)      ; DOUBLE PRIME
                 (#x2166 . #x2103)      ; DEGREE CELSIUS
                 (#x2167 . #xFF04)      ; FULLWIDTH DOLLAR SIGN
                 (#x2168 . #x00A4)      ; CURRENCY SIGN
                 (#x2169 . #xFFE0)      ; FULLWIDTH CENT SIGN
                 (#x216A . #xFFE1)      ; FULLWIDTH POUND SIGN
                 (#x216B . #x2030)      ; PER MILLE SIGN
                 (#x216C . #x00A7)      ; SECTION SIGN
                 (#x216D . #x2116)      ; NUMERO SIGN
                 (#x216E . #x2606)      ; WHITE STAR
                 (#x216F . #x2605)      ; BLACK STAR
                 (#x2170 . #x25CB)      ; WHITE CIRCLE
                 (#x2171 . #x25CF)      ; BLACK CIRCLE
                 (#x2172 . #x25CE)      ; BULLSEYE
                 (#x2173 . #x25C7)      ; WHITE DIAMOND
                 (#x2174 . #x25C6)      ; BLACK DIAMOND
                 (#x2175 . #x25A1)      ; WHITE SQUARE
                 (#x2176 . #x25A0)      ; BLACK SQUARE
                 (#x2177 . #x25B3)      ; WHITE UP-POINTING TRIANGLE
                 (#x2178 . #x25B2)      ; BLACK UP-POINTING TRIANGLE
                 (#x2179 . #x203B)      ; REFERENCE MARK
                 (#x217A . #x2192)      ; RIGHTWARDS ARROW
                 (#x217B . #x2190)      ; LEFTWARDS ARROW
                 (#x217C . #x2191)      ; UPWARDS ARROW
                 (#x217D . #x2193)      ; DOWNWARDS ARROW
                 (#x217E . #x3013)      ; GETA MARK
                 (#x2231 . #x2488)      ; DIGIT ONE FULL STOP
                 (#x2232 . #x2489)      ; DIGIT TWO FULL STOP
                 (#x2233 . #x248A)      ; DIGIT THREE FULL STOP
                 (#x2234 . #x248B)      ; DIGIT FOUR FULL STOP
                 (#x2235 . #x248C)      ; DIGIT FIVE FULL STOP
                 (#x2236 . #x248D)      ; DIGIT SIX FULL STOP
                 (#x2237 . #x248E)      ; DIGIT SEVEN FULL STOP
                 (#x2238 . #x248F)      ; DIGIT EIGHT FULL STOP
                 (#x2239 . #x2490)      ; DIGIT NINE FULL STOP
                 (#x223A . #x2491)      ; NUMBER TEN FULL STOP
                 (#x223B . #x2492)      ; NUMBER ELEVEN FULL STOP
                 (#x223C . #x2493)      ; NUMBER TWELVE FULL STOP
                 (#x223D . #x2494)      ; NUMBER THIRTEEN FULL STOP
                 (#x223E . #x2495)      ; NUMBER FOURTEEN FULL STOP
                 (#x223F . #x2496)      ; NUMBER FIFTEEN FULL STOP
                 (#x2240 . #x2497)      ; NUMBER SIXTEEN FULL STOP
                 (#x2241 . #x2498)      ; NUMBER SEVENTEEN FULL STOP
                 (#x2242 . #x2499)      ; NUMBER EIGHTEEN FULL STOP
                 (#x2243 . #x249A)      ; NUMBER NINETEEN FULL STOP
                 (#x2244 . #x249B)      ; NUMBER TWENTY FULL STOP
                 (#x2245 . #x2474)      ; PARENTHESIZED DIGIT ONE
                 (#x2246 . #x2475)      ; PARENTHESIZED DIGIT TWO
                 (#x2247 . #x2476)      ; PARENTHESIZED DIGIT THREE
                 (#x2248 . #x2477)      ; PARENTHESIZED DIGIT FOUR
                 (#x2249 . #x2478)      ; PARENTHESIZED DIGIT FIVE
                 (#x224A . #x2479)      ; PARENTHESIZED DIGIT SIX
                 (#x224B . #x247A)      ; PARENTHESIZED DIGIT SEVEN
                 (#x224C . #x247B)      ; PARENTHESIZED DIGIT EIGHT
                 (#x224D . #x247C)      ; PARENTHESIZED DIGIT NINE
                 (#x224E . #x247D)      ; PARENTHESIZED NUMBER TEN
                 (#x224F . #x247E)      ; PARENTHESIZED NUMBER ELEVEN
                 (#x2250 . #x247F)      ; PARENTHESIZED NUMBER TWELVE
                 (#x2251 . #x2480)      ; PARENTHESIZED NUMBER THIRTEEN
                 (#x2252 . #x2481)      ; PARENTHESIZED NUMBER FOURTEEN
                 (#x2253 . #x2482)      ; PARENTHESIZED NUMBER FIFTEEN
                 (#x2254 . #x2483)      ; PARENTHESIZED NUMBER SIXTEEN
                 (#x2255 . #x2484)      ; PARENTHESIZED NUMBER SEVENTEEN
                 (#x2256 . #x2485)      ; PARENTHESIZED NUMBER EIGHTEEN
                 (#x2257 . #x2486)      ; PARENTHESIZED NUMBER NINETEEN
                 (#x2258 . #x2487)      ; PARENTHESIZED NUMBER TWENTY
                 (#x2259 . #x2460)      ; CIRCLED DIGIT ONE
                 (#x225A . #x2461)      ; CIRCLED DIGIT TWO
                 (#x225B . #x2462)      ; CIRCLED DIGIT THREE
                 (#x225C . #x2463)      ; CIRCLED DIGIT FOUR
                 (#x225D . #x2464)      ; CIRCLED DIGIT FIVE
                 (#x225E . #x2465)      ; CIRCLED DIGIT SIX
                 (#x225F . #x2466)      ; CIRCLED DIGIT SEVEN
                 (#x2260 . #x2467)      ; CIRCLED DIGIT EIGHT
                 (#x2261 . #x2468)      ; CIRCLED DIGIT NINE
                 (#x2262 . #x2469)      ; CIRCLED NUMBER TEN
                 (#x2265 . #x3220)      ; PARENTHESIZED IDEOGRAPH ONE
                 (#x2266 . #x3221)      ; PARENTHESIZED IDEOGRAPH TWO
                 (#x2267 . #x3222)      ; PARENTHESIZED IDEOGRAPH THREE
                 (#x2268 . #x3223)      ; PARENTHESIZED IDEOGRAPH FOUR
                 (#x2269 . #x3224)      ; PARENTHESIZED IDEOGRAPH FIVE
                 (#x226A . #x3225)      ; PARENTHESIZED IDEOGRAPH SIX
                 (#x226B . #x3226)      ; PARENTHESIZED IDEOGRAPH SEVEN
                 (#x226C . #x3227)      ; PARENTHESIZED IDEOGRAPH EIGHT
                 (#x226D . #x3228)      ; PARENTHESIZED IDEOGRAPH NINE
                 (#x226E . #x3229)      ; PARENTHESIZED IDEOGRAPH TEN
                 (#x2271 . #x2160)      ; ROMAN NUMERAL ONE
                 (#x2272 . #x2161)      ; ROMAN NUMERAL TWO
                 (#x2273 . #x2162)      ; ROMAN NUMERAL THREE
                 (#x2274 . #x2163)      ; ROMAN NUMERAL FOUR
                 (#x2275 . #x2164)      ; ROMAN NUMERAL FIVE
                 (#x2276 . #x2165)      ; ROMAN NUMERAL SIX
                 (#x2277 . #x2166)      ; ROMAN NUMERAL SEVEN
                 (#x2278 . #x2167)      ; ROMAN NUMERAL EIGHT
                 (#x2279 . #x2168)      ; ROMAN NUMERAL NINE
                 (#x227A . #x2169)      ; ROMAN NUMERAL TEN
                 (#x227B . #x216A)      ; ROMAN NUMERAL ELEVEN
                 (#x227C . #x216B)      ; ROMAN NUMERAL TWELVE
                 (#x2321 . #xFF01)      ; FULLWIDTH EXCLAMATION MARK
                 (#x2322 . #xFF02)      ; FULLWIDTH QUOTATION MARK
                 (#x2323 . #xFF03)      ; FULLWIDTH NUMBER SIGN
                 (#x2324 . #xFFE5)      ; FULLWIDTH YEN SIGN
                 (#x2325 . #xFF05)      ; FULLWIDTH PERCENT SIGN
                 (#x2326 . #xFF06)      ; FULLWIDTH AMPERSAND
                 (#x2327 . #xFF07)      ; FULLWIDTH APOSTROPHE
                 (#x2328 . #xFF08)      ; FULLWIDTH LEFT PARENTHESIS
                 (#x2329 . #xFF09)      ; FULLWIDTH RIGHT PARENTHESIS
                 (#x232A . #xFF0A)      ; FULLWIDTH ASTERISK
                 (#x232B . #xFF0B)      ; FULLWIDTH PLUS SIGN
                 (#x232C . #xFF0C)      ; FULLWIDTH COMMA
                 (#x232D . #xFF0D)      ; FULLWIDTH HYPHEN-MINUS
                 (#x232E . #xFF0E)      ; FULLWIDTH FULL STOP
                 (#x232F . #xFF0F)      ; FULLWIDTH SOLIDUS
                 (#x2330 . #xFF10)      ; FULLWIDTH DIGIT ZERO
                 (#x2331 . #xFF11)      ; FULLWIDTH DIGIT ONE
                 (#x2332 . #xFF12)      ; FULLWIDTH DIGIT TWO
                 (#x2333 . #xFF13)      ; FULLWIDTH DIGIT THREE
                 (#x2334 . #xFF14)      ; FULLWIDTH DIGIT FOUR
                 (#x2335 . #xFF15)      ; FULLWIDTH DIGIT FIVE
                 (#x2336 . #xFF16)      ; FULLWIDTH DIGIT SIX
                 (#x2337 . #xFF17)      ; FULLWIDTH DIGIT SEVEN
                 (#x2338 . #xFF18)      ; FULLWIDTH DIGIT EIGHT
                 (#x2339 . #xFF19)      ; FULLWIDTH DIGIT NINE
                 (#x233A . #xFF1A)      ; FULLWIDTH COLON
                 (#x233B . #xFF1B)      ; FULLWIDTH SEMICOLON
                 (#x233C . #xFF1C)      ; FULLWIDTH LESS-THAN SIGN
                 (#x233D . #xFF1D)      ; FULLWIDTH EQUALS SIGN
                 (#x233E . #xFF1E)      ; FULLWIDTH GREATER-THAN SIGN
                 (#x233F . #xFF1F)      ; FULLWIDTH QUESTION MARK
                 (#x2340 . #xFF20)      ; FULLWIDTH COMMERCIAL AT
                 (#x2341 . #xFF21)      ; FULLWIDTH LATIN CAPITAL LETTER A
                 (#x2342 . #xFF22)      ; FULLWIDTH LATIN CAPITAL LETTER B
                 (#x2343 . #xFF23)      ; FULLWIDTH LATIN CAPITAL LETTER C
                 (#x2344 . #xFF24)      ; FULLWIDTH LATIN CAPITAL LETTER D
                 (#x2345 . #xFF25)      ; FULLWIDTH LATIN CAPITAL LETTER E
                 (#x2346 . #xFF26)      ; FULLWIDTH LATIN CAPITAL LETTER F
                 (#x2347 . #xFF27)      ; FULLWIDTH LATIN CAPITAL LETTER G
                 (#x2348 . #xFF28)      ; FULLWIDTH LATIN CAPITAL LETTER H
                 (#x2349 . #xFF29)      ; FULLWIDTH LATIN CAPITAL LETTER I
                 (#x234A . #xFF2A)      ; FULLWIDTH LATIN CAPITAL LETTER J
                 (#x234B . #xFF2B)      ; FULLWIDTH LATIN CAPITAL LETTER K
                 (#x234C . #xFF2C)      ; FULLWIDTH LATIN CAPITAL LETTER L
                 (#x234D . #xFF2D)      ; FULLWIDTH LATIN CAPITAL LETTER M
                 (#x234E . #xFF2E)      ; FULLWIDTH LATIN CAPITAL LETTER N
                 (#x234F . #xFF2F)      ; FULLWIDTH LATIN CAPITAL LETTER O
                 (#x2350 . #xFF30)      ; FULLWIDTH LATIN CAPITAL LETTER P
                 (#x2351 . #xFF31)      ; FULLWIDTH LATIN CAPITAL LETTER Q
                 (#x2352 . #xFF32)      ; FULLWIDTH LATIN CAPITAL LETTER R
                 (#x2353 . #xFF33)      ; FULLWIDTH LATIN CAPITAL LETTER S
                 (#x2354 . #xFF34)      ; FULLWIDTH LATIN CAPITAL LETTER T
                 (#x2355 . #xFF35)      ; FULLWIDTH LATIN CAPITAL LETTER U
                 (#x2356 . #xFF36)      ; FULLWIDTH LATIN CAPITAL LETTER V
                 (#x2357 . #xFF37)      ; FULLWIDTH LATIN CAPITAL LETTER W
                 (#x2358 . #xFF38)      ; FULLWIDTH LATIN CAPITAL LETTER X
                 (#x2359 . #xFF39)      ; FULLWIDTH LATIN CAPITAL LETTER Y
                 (#x235A . #xFF3A)      ; FULLWIDTH LATIN CAPITAL LETTER Z
                 (#x235B . #xFF3B)      ; FULLWIDTH LEFT SQUARE BRACKET
                 (#x235C . #xFF3C)      ; FULLWIDTH REVERSE SOLIDUS
                 (#x235D . #xFF3D)      ; FULLWIDTH RIGHT SQUARE BRACKET
                 (#x235E . #xFF3E)      ; FULLWIDTH CIRCUMFLEX ACCENT
                 (#x235F . #xFF3F)      ; FULLWIDTH LOW LINE
                 (#x2360 . #xFF40)      ; FULLWIDTH GRAVE ACCENT
                 (#x2361 . #xFF41)      ; FULLWIDTH LATIN SMALL LETTER A
                 (#x2362 . #xFF42)      ; FULLWIDTH LATIN SMALL LETTER B
                 (#x2363 . #xFF43)      ; FULLWIDTH LATIN SMALL LETTER C
                 (#x2364 . #xFF44)      ; FULLWIDTH LATIN SMALL LETTER D
                 (#x2365 . #xFF45)      ; FULLWIDTH LATIN SMALL LETTER E
                 (#x2366 . #xFF46)      ; FULLWIDTH LATIN SMALL LETTER F
                 (#x2367 . #xFF47)      ; FULLWIDTH LATIN SMALL LETTER G
                 (#x2368 . #xFF48)      ; FULLWIDTH LATIN SMALL LETTER H
                 (#x2369 . #xFF49)      ; FULLWIDTH LATIN SMALL LETTER I
                 (#x236A . #xFF4A)      ; FULLWIDTH LATIN SMALL LETTER J
                 (#x236B . #xFF4B)      ; FULLWIDTH LATIN SMALL LETTER K
                 (#x236C . #xFF4C)      ; FULLWIDTH LATIN SMALL LETTER L
                 (#x236D . #xFF4D)      ; FULLWIDTH LATIN SMALL LETTER M
                 (#x236E . #xFF4E)      ; FULLWIDTH LATIN SMALL LETTER N
                 (#x236F . #xFF4F)      ; FULLWIDTH LATIN SMALL LETTER O
                 (#x2370 . #xFF50)      ; FULLWIDTH LATIN SMALL LETTER P
                 (#x2371 . #xFF51)      ; FULLWIDTH LATIN SMALL LETTER Q
                 (#x2372 . #xFF52)      ; FULLWIDTH LATIN SMALL LETTER R
                 (#x2373 . #xFF53)      ; FULLWIDTH LATIN SMALL LETTER S
                 (#x2374 . #xFF54)      ; FULLWIDTH LATIN SMALL LETTER T
                 (#x2375 . #xFF55)      ; FULLWIDTH LATIN SMALL LETTER U
                 (#x2376 . #xFF56)      ; FULLWIDTH LATIN SMALL LETTER V
                 (#x2377 . #xFF57)      ; FULLWIDTH LATIN SMALL LETTER W
                 (#x2378 . #xFF58)      ; FULLWIDTH LATIN SMALL LETTER X
                 (#x2379 . #xFF59)      ; FULLWIDTH LATIN SMALL LETTER Y
                 (#x237A . #xFF5A)      ; FULLWIDTH LATIN SMALL LETTER Z
                 (#x237B . #xFF5B)      ; FULLWIDTH LEFT CURLY BRACKET
                 (#x237C . #xFF5C)      ; FULLWIDTH VERTICAL LINE
                 (#x237D . #xFF5D)      ; FULLWIDTH RIGHT CURLY BRACKET
                 (#x237E . #xFFE3)      ; FULLWIDTH MACRON
                 (#x2421 . #x3041)      ; HIRAGANA LETTER SMALL A
                 (#x2422 . #x3042)      ; HIRAGANA LETTER A
                 (#x2423 . #x3043)      ; HIRAGANA LETTER SMALL I
                 (#x2424 . #x3044)      ; HIRAGANA LETTER I
                 (#x2425 . #x3045)      ; HIRAGANA LETTER SMALL U
                 (#x2426 . #x3046)      ; HIRAGANA LETTER U
                 (#x2427 . #x3047)      ; HIRAGANA LETTER SMALL E
                 (#x2428 . #x3048)      ; HIRAGANA LETTER E
                 (#x2429 . #x3049)      ; HIRAGANA LETTER SMALL O
                 (#x242A . #x304A)      ; HIRAGANA LETTER O
                 (#x242B . #x304B)      ; HIRAGANA LETTER KA
                 (#x242C . #x304C)      ; HIRAGANA LETTER GA
                 (#x242D . #x304D)      ; HIRAGANA LETTER KI
                 (#x242E . #x304E)      ; HIRAGANA LETTER GI
                 (#x242F . #x304F)      ; HIRAGANA LETTER KU
                 (#x2430 . #x3050)      ; HIRAGANA LETTER GU
                 (#x2431 . #x3051)      ; HIRAGANA LETTER KE
                 (#x2432 . #x3052)      ; HIRAGANA LETTER GE
                 (#x2433 . #x3053)      ; HIRAGANA LETTER KO
                 (#x2434 . #x3054)      ; HIRAGANA LETTER GO
                 (#x2435 . #x3055)      ; HIRAGANA LETTER SA
                 (#x2436 . #x3056)      ; HIRAGANA LETTER ZA
                 (#x2437 . #x3057)      ; HIRAGANA LETTER SI
                 (#x2438 . #x3058)      ; HIRAGANA LETTER ZI
                 (#x2439 . #x3059)      ; HIRAGANA LETTER SU
                 (#x243A . #x305A)      ; HIRAGANA LETTER ZU
                 (#x243B . #x305B)      ; HIRAGANA LETTER SE
                 (#x243C . #x305C)      ; HIRAGANA LETTER ZE
                 (#x243D . #x305D)      ; HIRAGANA LETTER SO
                 (#x243E . #x305E)      ; HIRAGANA LETTER ZO
                 (#x243F . #x305F)      ; HIRAGANA LETTER TA
                 (#x2440 . #x3060)      ; HIRAGANA LETTER DA
                 (#x2441 . #x3061)      ; HIRAGANA LETTER TI
                 (#x2442 . #x3062)      ; HIRAGANA LETTER DI
                 (#x2443 . #x3063)      ; HIRAGANA LETTER SMALL TU
                 (#x2444 . #x3064)      ; HIRAGANA LETTER TU
                 (#x2445 . #x3065)      ; HIRAGANA LETTER DU
                 (#x2446 . #x3066)      ; HIRAGANA LETTER TE
                 (#x2447 . #x3067)      ; HIRAGANA LETTER DE
                 (#x2448 . #x3068)      ; HIRAGANA LETTER TO
                 (#x2449 . #x3069)      ; HIRAGANA LETTER DO
                 (#x244A . #x306A)      ; HIRAGANA LETTER NA
                 (#x244B . #x306B)      ; HIRAGANA LETTER NI
                 (#x244C . #x306C)      ; HIRAGANA LETTER NU
                 (#x244D . #x306D)      ; HIRAGANA LETTER NE
                 (#x244E . #x306E)      ; HIRAGANA LETTER NO
                 (#x244F . #x306F)      ; HIRAGANA LETTER HA
                 (#x2450 . #x3070)      ; HIRAGANA LETTER BA
                 (#x2451 . #x3071)      ; HIRAGANA LETTER PA
                 (#x2452 . #x3072)      ; HIRAGANA LETTER HI
                 (#x2453 . #x3073)      ; HIRAGANA LETTER BI
                 (#x2454 . #x3074)      ; HIRAGANA LETTER PI
                 (#x2455 . #x3075)      ; HIRAGANA LETTER HU
                 (#x2456 . #x3076)      ; HIRAGANA LETTER BU
                 (#x2457 . #x3077)      ; HIRAGANA LETTER PU
                 (#x2458 . #x3078)      ; HIRAGANA LETTER HE
                 (#x2459 . #x3079)      ; HIRAGANA LETTER BE
                 (#x245A . #x307A)      ; HIRAGANA LETTER PE
                 (#x245B . #x307B)      ; HIRAGANA LETTER HO
                 (#x245C . #x307C)      ; HIRAGANA LETTER BO
                 (#x245D . #x307D)      ; HIRAGANA LETTER PO
                 (#x245E . #x307E)      ; HIRAGANA LETTER MA
                 (#x245F . #x307F)      ; HIRAGANA LETTER MI
                 (#x2460 . #x3080)      ; HIRAGANA LETTER MU
                 (#x2461 . #x3081)      ; HIRAGANA LETTER ME
                 (#x2462 . #x3082)      ; HIRAGANA LETTER MO
                 (#x2463 . #x3083)      ; HIRAGANA LETTER SMALL YA
                 (#x2464 . #x3084)      ; HIRAGANA LETTER YA
                 (#x2465 . #x3085)      ; HIRAGANA LETTER SMALL YU
                 (#x2466 . #x3086)      ; HIRAGANA LETTER YU
                 (#x2467 . #x3087)      ; HIRAGANA LETTER SMALL YO
                 (#x2468 . #x3088)      ; HIRAGANA LETTER YO
                 (#x2469 . #x3089)      ; HIRAGANA LETTER RA
                 (#x246A . #x308A)      ; HIRAGANA LETTER RI
                 (#x246B . #x308B)      ; HIRAGANA LETTER RU
                 (#x246C . #x308C)      ; HIRAGANA LETTER RE
                 (#x246D . #x308D)      ; HIRAGANA LETTER RO
                 (#x246E . #x308E)      ; HIRAGANA LETTER SMALL WA
                 (#x246F . #x308F)      ; HIRAGANA LETTER WA
                 (#x2470 . #x3090)      ; HIRAGANA LETTER WI
                 (#x2471 . #x3091)      ; HIRAGANA LETTER WE
                 (#x2472 . #x3092)      ; HIRAGANA LETTER WO
                 (#x2473 . #x3093)      ; HIRAGANA LETTER N
                 (#x2521 . #x30A1)      ; KATAKANA LETTER SMALL A
                 (#x2522 . #x30A2)      ; KATAKANA LETTER A
                 (#x2523 . #x30A3)      ; KATAKANA LETTER SMALL I
                 (#x2524 . #x30A4)      ; KATAKANA LETTER I
                 (#x2525 . #x30A5)      ; KATAKANA LETTER SMALL U
                 (#x2526 . #x30A6)      ; KATAKANA LETTER U
                 (#x2527 . #x30A7)      ; KATAKANA LETTER SMALL E
                 (#x2528 . #x30A8)      ; KATAKANA LETTER E
                 (#x2529 . #x30A9)      ; KATAKANA LETTER SMALL O
                 (#x252A . #x30AA)      ; KATAKANA LETTER O
                 (#x252B . #x30AB)      ; KATAKANA LETTER KA
                 (#x252C . #x30AC)      ; KATAKANA LETTER GA
                 (#x252D . #x30AD)      ; KATAKANA LETTER KI
                 (#x252E . #x30AE)      ; KATAKANA LETTER GI
                 (#x252F . #x30AF)      ; KATAKANA LETTER KU
                 (#x2530 . #x30B0)      ; KATAKANA LETTER GU
                 (#x2531 . #x30B1)      ; KATAKANA LETTER KE
                 (#x2532 . #x30B2)      ; KATAKANA LETTER GE
                 (#x2533 . #x30B3)      ; KATAKANA LETTER KO
                 (#x2534 . #x30B4)      ; KATAKANA LETTER GO
                 (#x2535 . #x30B5)      ; KATAKANA LETTER SA
                 (#x2536 . #x30B6)      ; KATAKANA LETTER ZA
                 (#x2537 . #x30B7)      ; KATAKANA LETTER SI
                 (#x2538 . #x30B8)      ; KATAKANA LETTER ZI
                 (#x2539 . #x30B9)      ; KATAKANA LETTER SU
                 (#x253A . #x30BA)      ; KATAKANA LETTER ZU
                 (#x253B . #x30BB)      ; KATAKANA LETTER SE
                 (#x253C . #x30BC)      ; KATAKANA LETTER ZE
                 (#x253D . #x30BD)      ; KATAKANA LETTER SO
                 (#x253E . #x30BE)      ; KATAKANA LETTER ZO
                 (#x253F . #x30BF)      ; KATAKANA LETTER TA
                 (#x2540 . #x30C0)      ; KATAKANA LETTER DA
                 (#x2541 . #x30C1)      ; KATAKANA LETTER TI
                 (#x2542 . #x30C2)      ; KATAKANA LETTER DI
                 (#x2543 . #x30C3)      ; KATAKANA LETTER SMALL TU
                 (#x2544 . #x30C4)      ; KATAKANA LETTER TU
                 (#x2545 . #x30C5)      ; KATAKANA LETTER DU
                 (#x2546 . #x30C6)      ; KATAKANA LETTER TE
                 (#x2547 . #x30C7)      ; KATAKANA LETTER DE
                 (#x2548 . #x30C8)      ; KATAKANA LETTER TO
                 (#x2549 . #x30C9)      ; KATAKANA LETTER DO
                 (#x254A . #x30CA)      ; KATAKANA LETTER NA
                 (#x254B . #x30CB)      ; KATAKANA LETTER NI
                 (#x254C . #x30CC)      ; KATAKANA LETTER NU
                 (#x254D . #x30CD)      ; KATAKANA LETTER NE
                 (#x254E . #x30CE)      ; KATAKANA LETTER NO
                 (#x254F . #x30CF)      ; KATAKANA LETTER HA
                 (#x2550 . #x30D0)      ; KATAKANA LETTER BA
                 (#x2551 . #x30D1)      ; KATAKANA LETTER PA
                 (#x2552 . #x30D2)      ; KATAKANA LETTER HI
                 (#x2553 . #x30D3)      ; KATAKANA LETTER BI
                 (#x2554 . #x30D4)      ; KATAKANA LETTER PI
                 (#x2555 . #x30D5)      ; KATAKANA LETTER HU
                 (#x2556 . #x30D6)      ; KATAKANA LETTER BU
                 (#x2557 . #x30D7)      ; KATAKANA LETTER PU
                 (#x2558 . #x30D8)      ; KATAKANA LETTER HE
                 (#x2559 . #x30D9)      ; KATAKANA LETTER BE
                 (#x255A . #x30DA)      ; KATAKANA LETTER PE
                 (#x255B . #x30DB)      ; KATAKANA LETTER HO
                 (#x255C . #x30DC)      ; KATAKANA LETTER BO
                 (#x255D . #x30DD)      ; KATAKANA LETTER PO
                 (#x255E . #x30DE)      ; KATAKANA LETTER MA
                 (#x255F . #x30DF)      ; KATAKANA LETTER MI
                 (#x2560 . #x30E0)      ; KATAKANA LETTER MU
                 (#x2561 . #x30E1)      ; KATAKANA LETTER ME
                 (#x2562 . #x30E2)      ; KATAKANA LETTER MO
                 (#x2563 . #x30E3)      ; KATAKANA LETTER SMALL YA
                 (#x2564 . #x30E4)      ; KATAKANA LETTER YA
                 (#x2565 . #x30E5)      ; KATAKANA LETTER SMALL YU
                 (#x2566 . #x30E6)      ; KATAKANA LETTER YU
                 (#x2567 . #x30E7)      ; KATAKANA LETTER SMALL YO
                 (#x2568 . #x30E8)      ; KATAKANA LETTER YO
                 (#x2569 . #x30E9)      ; KATAKANA LETTER RA
                 (#x256A . #x30EA)      ; KATAKANA LETTER RI
                 (#x256B . #x30EB)      ; KATAKANA LETTER RU
                 (#x256C . #x30EC)      ; KATAKANA LETTER RE
                 (#x256D . #x30ED)      ; KATAKANA LETTER RO
                 (#x256E . #x30EE)      ; KATAKANA LETTER SMALL WA
                 (#x256F . #x30EF)      ; KATAKANA LETTER WA
                 (#x2570 . #x30F0)      ; KATAKANA LETTER WI
                 (#x2571 . #x30F1)      ; KATAKANA LETTER WE
                 (#x2572 . #x30F2)      ; KATAKANA LETTER WO
                 (#x2573 . #x30F3)      ; KATAKANA LETTER N
                 (#x2574 . #x30F4)      ; KATAKANA LETTER VU
                 (#x2575 . #x30F5)      ; KATAKANA LETTER SMALL KA
                 (#x2576 . #x30F6)      ; KATAKANA LETTER SMALL KE
                 (#x2621 . #x0391)      ; GREEK CAPITAL LETTER ALPHA
                 (#x2622 . #x0392)      ; GREEK CAPITAL LETTER BETA
                 (#x2623 . #x0393)      ; GREEK CAPITAL LETTER GAMMA
                 (#x2624 . #x0394)      ; GREEK CAPITAL LETTER DELTA
                 (#x2625 . #x0395)      ; GREEK CAPITAL LETTER EPSILON
                 (#x2626 . #x0396)      ; GREEK CAPITAL LETTER ZETA
                 (#x2627 . #x0397)      ; GREEK CAPITAL LETTER ETA
                 (#x2628 . #x0398)      ; GREEK CAPITAL LETTER THETA
                 (#x2629 . #x0399)      ; GREEK CAPITAL LETTER IOTA
                 (#x262A . #x039A)      ; GREEK CAPITAL LETTER KAPPA
                 (#x262B . #x039B)      ; GREEK CAPITAL LETTER LAMDA
                 (#x262C . #x039C)      ; GREEK CAPITAL LETTER MU
                 (#x262D . #x039D)      ; GREEK CAPITAL LETTER NU
                 (#x262E . #x039E)      ; GREEK CAPITAL LETTER XI
                 (#x262F . #x039F)      ; GREEK CAPITAL LETTER OMICRON
                 (#x2630 . #x03A0)      ; GREEK CAPITAL LETTER PI
                 (#x2631 . #x03A1)      ; GREEK CAPITAL LETTER RHO
                 (#x2632 . #x03A3)      ; GREEK CAPITAL LETTER SIGMA
                 (#x2633 . #x03A4)      ; GREEK CAPITAL LETTER TAU
                 (#x2634 . #x03A5)      ; GREEK CAPITAL LETTER UPSILON
                 (#x2635 . #x03A6)      ; GREEK CAPITAL LETTER PHI
                 (#x2636 . #x03A7)      ; GREEK CAPITAL LETTER CHI
                 (#x2637 . #x03A8)      ; GREEK CAPITAL LETTER PSI
                 (#x2638 . #x03A9)      ; GREEK CAPITAL LETTER OMEGA
                 (#x2641 . #x03B1)      ; GREEK SMALL LETTER ALPHA
                 (#x2642 . #x03B2)      ; GREEK SMALL LETTER BETA
                 (#x2643 . #x03B3)      ; GREEK SMALL LETTER GAMMA
                 (#x2644 . #x03B4)      ; GREEK SMALL LETTER DELTA
                 (#x2645 . #x03B5)      ; GREEK SMALL LETTER EPSILON
                 (#x2646 . #x03B6)      ; GREEK SMALL LETTER ZETA
                 (#x2647 . #x03B7)      ; GREEK SMALL LETTER ETA
                 (#x2648 . #x03B8)      ; GREEK SMALL LETTER THETA
                 (#x2649 . #x03B9)      ; GREEK SMALL LETTER IOTA
                 (#x264A . #x03BA)      ; GREEK SMALL LETTER KAPPA
                 (#x264B . #x03BB)      ; GREEK SMALL LETTER LAMDA
                 (#x264C . #x03BC)      ; GREEK SMALL LETTER MU
                 (#x264D . #x03BD)      ; GREEK SMALL LETTER NU
                 (#x264E . #x03BE)      ; GREEK SMALL LETTER XI
                 (#x264F . #x03BF)      ; GREEK SMALL LETTER OMICRON
                 (#x2650 . #x03C0)      ; GREEK SMALL LETTER PI
                 (#x2651 . #x03C1)      ; GREEK SMALL LETTER RHO
                 (#x2652 . #x03C3)      ; GREEK SMALL LETTER SIGMA
                 (#x2653 . #x03C4)      ; GREEK SMALL LETTER TAU
                 (#x2654 . #x03C5)      ; GREEK SMALL LETTER UPSILON
                 (#x2655 . #x03C6)      ; GREEK SMALL LETTER PHI
                 (#x2656 . #x03C7)      ; GREEK SMALL LETTER CHI
                 (#x2657 . #x03C8)      ; GREEK SMALL LETTER PSI
                 (#x2658 . #x03C9)      ; GREEK SMALL LETTER OMEGA
                 (#x2721 . #x0410)      ; CYRILLIC CAPITAL LETTER A
                 (#x2722 . #x0411)      ; CYRILLIC CAPITAL LETTER BE
                 (#x2723 . #x0412)      ; CYRILLIC CAPITAL LETTER VE
                 (#x2724 . #x0413)      ; CYRILLIC CAPITAL LETTER GHE
                 (#x2725 . #x0414)      ; CYRILLIC CAPITAL LETTER DE
                 (#x2726 . #x0415)      ; CYRILLIC CAPITAL LETTER IE
                 (#x2727 . #x0401)      ; CYRILLIC CAPITAL LETTER IO
                 (#x2728 . #x0416)      ; CYRILLIC CAPITAL LETTER ZHE
                 (#x2729 . #x0417)      ; CYRILLIC CAPITAL LETTER ZE
                 (#x272A . #x0418)      ; CYRILLIC CAPITAL LETTER I
                 (#x272B . #x0419)      ; CYRILLIC CAPITAL LETTER SHORT I
                 (#x272C . #x041A)      ; CYRILLIC CAPITAL LETTER KA
                 (#x272D . #x041B)      ; CYRILLIC CAPITAL LETTER EL
                 (#x272E . #x041C)      ; CYRILLIC CAPITAL LETTER EM
                 (#x272F . #x041D)      ; CYRILLIC CAPITAL LETTER EN
                 (#x2730 . #x041E)      ; CYRILLIC CAPITAL LETTER O
                 (#x2731 . #x041F)      ; CYRILLIC CAPITAL LETTER PE
                 (#x2732 . #x0420)      ; CYRILLIC CAPITAL LETTER ER
                 (#x2733 . #x0421)      ; CYRILLIC CAPITAL LETTER ES
                 (#x2734 . #x0422)      ; CYRILLIC CAPITAL LETTER TE
                 (#x2735 . #x0423)      ; CYRILLIC CAPITAL LETTER U
                 (#x2736 . #x0424)      ; CYRILLIC CAPITAL LETTER EF
                 (#x2737 . #x0425)      ; CYRILLIC CAPITAL LETTER HA
                 (#x2738 . #x0426)      ; CYRILLIC CAPITAL LETTER TSE
                 (#x2739 . #x0427)      ; CYRILLIC CAPITAL LETTER CHE
                 (#x273A . #x0428)      ; CYRILLIC CAPITAL LETTER SHA
                 (#x273B . #x0429)      ; CYRILLIC CAPITAL LETTER SHCHA
                 (#x273C . #x042A)      ; CYRILLIC CAPITAL LETTER HARD SIGN
                 (#x273D . #x042B)      ; CYRILLIC CAPITAL LETTER YERU
                 (#x273E . #x042C)      ; CYRILLIC CAPITAL LETTER SOFT SIGN
                 (#x273F . #x042D)      ; CYRILLIC CAPITAL LETTER E
                 (#x2740 . #x042E)      ; CYRILLIC CAPITAL LETTER YU
                 (#x2741 . #x042F)      ; CYRILLIC CAPITAL LETTER YA
                 (#x2751 . #x0430)      ; CYRILLIC SMALL LETTER A
                 (#x2752 . #x0431)      ; CYRILLIC SMALL LETTER BE
                 (#x2753 . #x0432)      ; CYRILLIC SMALL LETTER VE
                 (#x2754 . #x0433)      ; CYRILLIC SMALL LETTER GHE
                 (#x2755 . #x0434)      ; CYRILLIC SMALL LETTER DE
                 (#x2756 . #x0435)      ; CYRILLIC SMALL LETTER IE
                 (#x2757 . #x0451)      ; CYRILLIC SMALL LETTER IO
                 (#x2758 . #x0436)      ; CYRILLIC SMALL LETTER ZHE
                 (#x2759 . #x0437)      ; CYRILLIC SMALL LETTER ZE
                 (#x275A . #x0438)      ; CYRILLIC SMALL LETTER I
                 (#x275B . #x0439)      ; CYRILLIC SMALL LETTER SHORT I
                 (#x275C . #x043A)      ; CYRILLIC SMALL LETTER KA
                 (#x275D . #x043B)      ; CYRILLIC SMALL LETTER EL
                 (#x275E . #x043C)      ; CYRILLIC SMALL LETTER EM
                 (#x275F . #x043D)      ; CYRILLIC SMALL LETTER EN
                 (#x2760 . #x043E)      ; CYRILLIC SMALL LETTER O
                 (#x2761 . #x043F)      ; CYRILLIC SMALL LETTER PE
                 (#x2762 . #x0440)      ; CYRILLIC SMALL LETTER ER
                 (#x2763 . #x0441)      ; CYRILLIC SMALL LETTER ES
                 (#x2764 . #x0442)      ; CYRILLIC SMALL LETTER TE
                 (#x2765 . #x0443)      ; CYRILLIC SMALL LETTER U
                 (#x2766 . #x0444)      ; CYRILLIC SMALL LETTER EF
                 (#x2767 . #x0445)      ; CYRILLIC SMALL LETTER HA
                 (#x2768 . #x0446)      ; CYRILLIC SMALL LETTER TSE
                 (#x2769 . #x0447)      ; CYRILLIC SMALL LETTER CHE
                 (#x276A . #x0448)      ; CYRILLIC SMALL LETTER SHA
                 (#x276B . #x0449)      ; CYRILLIC SMALL LETTER SHCHA
                 (#x276C . #x044A)      ; CYRILLIC SMALL LETTER HARD SIGN
                 (#x276D . #x044B)      ; CYRILLIC SMALL LETTER YERU
                 (#x276E . #x044C)      ; CYRILLIC SMALL LETTER SOFT SIGN
                 (#x276F . #x044D)      ; CYRILLIC SMALL LETTER E
                 (#x2770 . #x044E)      ; CYRILLIC SMALL LETTER YU
                 (#x2771 . #x044F)      ; CYRILLIC SMALL LETTER YA
                 (#x2821 . #x0101)      ; LATIN SMALL LETTER A WITH MACRON
                 (#x2822 . #x00E1)      ; LATIN SMALL LETTER A WITH ACUTE
                 (#x2823 . #x01CE)      ; LATIN SMALL LETTER A WITH CARON
                 (#x2824 . #x00E0)      ; LATIN SMALL LETTER A WITH GRAVE
                 (#x2825 . #x0113)      ; LATIN SMALL LETTER E WITH MACRON
                 (#x2826 . #x00E9)      ; LATIN SMALL LETTER E WITH ACUTE
                 (#x2827 . #x011B)      ; LATIN SMALL LETTER E WITH CARON
                 (#x2828 . #x00E8)      ; LATIN SMALL LETTER E WITH GRAVE
                 (#x2829 . #x012B)      ; LATIN SMALL LETTER I WITH MACRON
                 (#x282A . #x00ED)      ; LATIN SMALL LETTER I WITH ACUTE
                 (#x282B . #x01D0)      ; LATIN SMALL LETTER I WITH CARON
                 (#x282C . #x00EC)      ; LATIN SMALL LETTER I WITH GRAVE
                 (#x282D . #x014D)      ; LATIN SMALL LETTER O WITH MACRON
                 (#x282E . #x00F3)      ; LATIN SMALL LETTER O WITH ACUTE
                 (#x282F . #x01D2)      ; LATIN SMALL LETTER O WITH CARON
                 (#x2830 . #x00F2)      ; LATIN SMALL LETTER O WITH GRAVE
                 (#x2831 . #x016B)      ; LATIN SMALL LETTER U WITH MACRON
                 (#x2832 . #x00FA)      ; LATIN SMALL LETTER U WITH ACUTE
                 (#x2833 . #x01D4)      ; LATIN SMALL LETTER U WITH CARON
                 (#x2834 . #x00F9)      ; LATIN SMALL LETTER U WITH GRAVE
                 (#x2835 . #x01D6)      ; LATIN SMALL LETTER U WITH DIAERESIS AND MACRON
                 (#x2836 . #x01D8)      ; LATIN SMALL LETTER U WITH DIAERESIS AND ACUTE
                 (#x2837 . #x01DA)      ; LATIN SMALL LETTER U WITH DIAERESIS AND CARON
                 (#x2838 . #x01DC)      ; LATIN SMALL LETTER U WITH DIAERESIS AND GRAVE
                 (#x2839 . #x00FC)      ; LATIN SMALL LETTER U WITH DIAERESIS
                 (#x283A . #x00EA)      ; LATIN SMALL LETTER E WITH CIRCUMFLEX
                 (#x2845 . #x3105)      ; BOPOMOFO LETTER B
                 (#x2846 . #x3106)      ; BOPOMOFO LETTER P
                 (#x2847 . #x3107)      ; BOPOMOFO LETTER M
                 (#x2848 . #x3108)      ; BOPOMOFO LETTER F
                 (#x2849 . #x3109)      ; BOPOMOFO LETTER D
                 (#x284A . #x310A)      ; BOPOMOFO LETTER T
                 (#x284B . #x310B)      ; BOPOMOFO LETTER N
                 (#x284C . #x310C)      ; BOPOMOFO LETTER L
                 (#x284D . #x310D)      ; BOPOMOFO LETTER G
                 (#x284E . #x310E)      ; BOPOMOFO LETTER K
                 (#x284F . #x310F)      ; BOPOMOFO LETTER H
                 (#x2850 . #x3110)      ; BOPOMOFO LETTER J
                 (#x2851 . #x3111)      ; BOPOMOFO LETTER Q
                 (#x2852 . #x3112)      ; BOPOMOFO LETTER X
                 (#x2853 . #x3113)      ; BOPOMOFO LETTER ZH
                 (#x2854 . #x3114)      ; BOPOMOFO LETTER CH
                 (#x2855 . #x3115)      ; BOPOMOFO LETTER SH
                 (#x2856 . #x3116)      ; BOPOMOFO LETTER R
                 (#x2857 . #x3117)      ; BOPOMOFO LETTER Z
                 (#x2858 . #x3118)      ; BOPOMOFO LETTER C
                 (#x2859 . #x3119)      ; BOPOMOFO LETTER S
                 (#x285A . #x311A)      ; BOPOMOFO LETTER A
                 (#x285B . #x311B)      ; BOPOMOFO LETTER O
                 (#x285C . #x311C)      ; BOPOMOFO LETTER E
                 (#x285D . #x311D)      ; BOPOMOFO LETTER EH
                 (#x285E . #x311E)      ; BOPOMOFO LETTER AI
                 (#x285F . #x311F)      ; BOPOMOFO LETTER EI
                 (#x2860 . #x3120)      ; BOPOMOFO LETTER AU
                 (#x2861 . #x3121)      ; BOPOMOFO LETTER OU
                 (#x2862 . #x3122)      ; BOPOMOFO LETTER AN
                 (#x2863 . #x3123)      ; BOPOMOFO LETTER EN
                 (#x2864 . #x3124)      ; BOPOMOFO LETTER ANG
                 (#x2865 . #x3125)      ; BOPOMOFO LETTER ENG
                 (#x2866 . #x3126)      ; BOPOMOFO LETTER ER
                 (#x2867 . #x3127)      ; BOPOMOFO LETTER I
                 (#x2868 . #x3128)      ; BOPOMOFO LETTER U
                 (#x2869 . #x3129)      ; BOPOMOFO LETTER IU
                 (#x2924 . #x2500)      ; BOX DRAWINGS LIGHT HORIZONTAL
                 (#x2925 . #x2501)      ; BOX DRAWINGS HEAVY HORIZONTAL
                 (#x2926 . #x2502)      ; BOX DRAWINGS LIGHT VERTICAL
                 (#x2927 . #x2503)      ; BOX DRAWINGS HEAVY VERTICAL
                 (#x2928 . #x2504)      ; BOX DRAWINGS LIGHT TRIPLE DASH HORIZONTAL
                 (#x2929 . #x2505)      ; BOX DRAWINGS HEAVY TRIPLE DASH HORIZONTAL
                 (#x292A . #x2506)      ; BOX DRAWINGS LIGHT TRIPLE DASH VERTICAL
                 (#x292B . #x2507)      ; BOX DRAWINGS HEAVY TRIPLE DASH VERTICAL
                 (#x292C . #x2508)      ; BOX DRAWINGS LIGHT QUADRUPLE DASH HORIZONTAL
                 (#x292D . #x2509)      ; BOX DRAWINGS HEAVY QUADRUPLE DASH HORIZONTAL
                 (#x292E . #x250A)      ; BOX DRAWINGS LIGHT QUADRUPLE DASH VERTICAL
                 (#x292F . #x250B)      ; BOX DRAWINGS HEAVY QUADRUPLE DASH VERTICAL
                 (#x2930 . #x250C)      ; BOX DRAWINGS LIGHT DOWN AND RIGHT
                 (#x2931 . #x250D)      ; BOX DRAWINGS DOWN LIGHT AND RIGHT HEAVY
                 (#x2932 . #x250E)      ; BOX DRAWINGS DOWN HEAVY AND RIGHT LIGHT
                 (#x2933 . #x250F)      ; BOX DRAWINGS HEAVY DOWN AND RIGHT
                 (#x2934 . #x2510)      ; BOX DRAWINGS LIGHT DOWN AND LEFT
                 (#x2935 . #x2511)      ; BOX DRAWINGS DOWN LIGHT AND LEFT HEAVY
                 (#x2936 . #x2512)      ; BOX DRAWINGS DOWN HEAVY AND LEFT LIGHT
                 (#x2937 . #x2513)      ; BOX DRAWINGS HEAVY DOWN AND LEFT
                 (#x2938 . #x2514)      ; BOX DRAWINGS LIGHT UP AND RIGHT
                 (#x2939 . #x2515)      ; BOX DRAWINGS UP LIGHT AND RIGHT HEAVY
                 (#x293A . #x2516)      ; BOX DRAWINGS UP HEAVY AND RIGHT LIGHT
                 (#x293B . #x2517)      ; BOX DRAWINGS HEAVY UP AND RIGHT
                 (#x293C . #x2518)      ; BOX DRAWINGS LIGHT UP AND LEFT
                 (#x293D . #x2519)      ; BOX DRAWINGS UP LIGHT AND LEFT HEAVY
                 (#x293E . #x251A)      ; BOX DRAWINGS UP HEAVY AND LEFT LIGHT
                 (#x293F . #x251B)      ; BOX DRAWINGS HEAVY UP AND LEFT
                 (#x2940 . #x251C)      ; BOX DRAWINGS LIGHT VERTICAL AND RIGHT
                 (#x2941 . #x251D)      ; BOX DRAWINGS VERTICAL LIGHT AND RIGHT HEAVY
                 (#x2942 . #x251E)      ; BOX DRAWINGS UP HEAVY AND RIGHT DOWN LIGHT
                 (#x2943 . #x251F)      ; BOX DRAWINGS DOWN HEAVY AND RIGHT UP LIGHT
                 (#x2944 . #x2520)      ; BOX DRAWINGS VERTICAL HEAVY AND RIGHT LIGHT
                 (#x2945 . #x2521)      ; BOX DRAWINGS DOWN LIGHT AND RIGHT UP HEAVY
                 (#x2946 . #x2522)      ; BOX DRAWINGS UP LIGHT AND RIGHT DOWN HEAVY
                 (#x2947 . #x2523)      ; BOX DRAWINGS HEAVY VERTICAL AND RIGHT
                 (#x2948 . #x2524)      ; BOX DRAWINGS LIGHT VERTICAL AND LEFT
                 (#x2949 . #x2525)      ; BOX DRAWINGS VERTICAL LIGHT AND LEFT HEAVY
                 (#x294A . #x2526)      ; BOX DRAWINGS UP HEAVY AND LEFT DOWN LIGHT
                 (#x294B . #x2527)      ; BOX DRAWINGS DOWN HEAVY AND LEFT UP LIGHT
                 (#x294C . #x2528)      ; BOX DRAWINGS VERTICAL HEAVY AND LEFT LIGHT
                 (#x294D . #x2529)      ; BOX DRAWINGS DOWN LIGHT AND LEFT UP HEAVY
                 (#x294E . #x252A)      ; BOX DRAWINGS UP LIGHT AND LEFT DOWN HEAVY
                 (#x294F . #x252B)      ; BOX DRAWINGS HEAVY VERTICAL AND LEFT
                 (#x2950 . #x252C)      ; BOX DRAWINGS LIGHT DOWN AND HORIZONTAL
                 (#x2951 . #x252D)      ; BOX DRAWINGS LEFT HEAVY AND RIGHT DOWN LIGHT
                 (#x2952 . #x252E)      ; BOX DRAWINGS RIGHT HEAVY AND LEFT DOWN LIGHT
                 (#x2953 . #x252F)      ; BOX DRAWINGS DOWN LIGHT AND HORIZONTAL HEAVY
                 (#x2954 . #x2530)      ; BOX DRAWINGS DOWN HEAVY AND HORIZONTAL LIGHT
                 (#x2955 . #x2531)      ; BOX DRAWINGS RIGHT LIGHT AND LEFT DOWN HEAVY
                 (#x2956 . #x2532)      ; BOX DRAWINGS LEFT LIGHT AND RIGHT DOWN HEAVY
                 (#x2957 . #x2533)      ; BOX DRAWINGS HEAVY DOWN AND HORIZONTAL
                 (#x2958 . #x2534)      ; BOX DRAWINGS LIGHT UP AND HORIZONTAL
                 (#x2959 . #x2535)      ; BOX DRAWINGS LEFT HEAVY AND RIGHT UP LIGHT
                 (#x295A . #x2536)      ; BOX DRAWINGS RIGHT HEAVY AND LEFT UP LIGHT
                 (#x295B . #x2537)      ; BOX DRAWINGS UP LIGHT AND HORIZONTAL HEAVY
                 (#x295C . #x2538)      ; BOX DRAWINGS UP HEAVY AND HORIZONTAL LIGHT
                 (#x295D . #x2539)      ; BOX DRAWINGS RIGHT LIGHT AND LEFT UP HEAVY
                 (#x295E . #x253A)      ; BOX DRAWINGS LEFT LIGHT AND RIGHT UP HEAVY
                 (#x295F . #x253B)      ; BOX DRAWINGS HEAVY UP AND HORIZONTAL
                 (#x2960 . #x253C)      ; BOX DRAWINGS LIGHT VERTICAL AND HORIZONTAL
                 (#x2961 . #x253D)      ; BOX DRAWINGS LEFT HEAVY AND RIGHT VERTICAL LIGHT
                 (#x2962 . #x253E)      ; BOX DRAWINGS RIGHT HEAVY AND LEFT VERTICAL LIGHT
                 (#x2963 . #x253F)      ; BOX DRAWINGS VERTICAL LIGHT AND HORIZONTAL HEAVY
                 (#x2964 . #x2540)      ; BOX DRAWINGS UP HEAVY AND DOWN HORIZONTAL LIGHT
                 (#x2965 . #x2541)      ; BOX DRAWINGS DOWN HEAVY AND UP HORIZONTAL LIGHT
                 (#x2966 . #x2542)      ; BOX DRAWINGS VERTICAL HEAVY AND HORIZONTAL LIGHT
                 (#x2967 . #x2543)      ; BOX DRAWINGS LEFT UP HEAVY AND RIGHT DOWN LIGHT
                 (#x2968 . #x2544)      ; BOX DRAWINGS RIGHT UP HEAVY AND LEFT DOWN LIGHT
                 (#x2969 . #x2545)      ; BOX DRAWINGS LEFT DOWN HEAVY AND RIGHT UP LIGHT
                 (#x296A . #x2546)      ; BOX DRAWINGS RIGHT DOWN HEAVY AND LEFT UP LIGHT
                 (#x296B . #x2547)      ; BOX DRAWINGS DOWN LIGHT AND UP HORIZONTAL HEAVY
                 (#x296C . #x2548)      ; BOX DRAWINGS UP LIGHT AND DOWN HORIZONTAL HEAVY
                 (#x296D . #x2549)      ; BOX DRAWINGS RIGHT LIGHT AND LEFT VERTICAL HEAVY
                 (#x296E . #x254A)      ; BOX DRAWINGS LEFT LIGHT AND RIGHT VERTICAL HEAVY
                 (#x296F . #x254B)      ; BOX DRAWINGS HEAVY VERTICAL AND HORIZONTAL
                 (#x3021 . #x554A)      ; <CJK>
                 (#x3022 . #x963F)      ; <CJK>
                 (#x3023 . #x57C3)      ; <CJK>
                 (#x3024 . #x6328)      ; <CJK>
                 (#x3025 . #x54CE)      ; <CJK>
                 (#x3026 . #x5509)      ; <CJK>
                 (#x3027 . #x54C0)      ; <CJK>
                 (#x3028 . #x7691)      ; <CJK>
                 (#x3029 . #x764C)      ; <CJK>
                 (#x302A . #x853C)      ; <CJK>
                 (#x302B . #x77EE)      ; <CJK>
                 (#x302C . #x827E)      ; <CJK>
                 (#x302D . #x788D)      ; <CJK>
                 (#x302E . #x7231)      ; <CJK>
                 (#x302F . #x9698)      ; <CJK>
                 (#x3030 . #x978D)      ; <CJK>
                 (#x3031 . #x6C28)      ; <CJK>
                 (#x3032 . #x5B89)      ; <CJK>
                 (#x3033 . #x4FFA)      ; <CJK>
                 (#x3034 . #x6309)      ; <CJK>
                 (#x3035 . #x6697)      ; <CJK>
                 (#x3036 . #x5CB8)      ; <CJK>
                 (#x3037 . #x80FA)      ; <CJK>
                 (#x3038 . #x6848)      ; <CJK>
                 (#x3039 . #x80AE)      ; <CJK>
                 (#x303A . #x6602)      ; <CJK>
                 (#x303B . #x76CE)      ; <CJK>
                 (#x303C . #x51F9)      ; <CJK>
                 (#x303D . #x6556)      ; <CJK>
                 (#x303E . #x71AC)      ; <CJK>
                 (#x303F . #x7FF1)      ; <CJK>
                 (#x3040 . #x8884)      ; <CJK>
                 (#x3041 . #x50B2)      ; <CJK>
                 (#x3042 . #x5965)      ; <CJK>
                 (#x3043 . #x61CA)      ; <CJK>
                 (#x3044 . #x6FB3)      ; <CJK>
                 (#x3045 . #x82AD)      ; <CJK>
                 (#x3046 . #x634C)      ; <CJK>
                 (#x3047 . #x6252)      ; <CJK>
                 (#x3048 . #x53ED)      ; <CJK>
                 (#x3049 . #x5427)      ; <CJK>
                 (#x304A . #x7B06)      ; <CJK>
                 (#x304B . #x516B)      ; <CJK>
                 (#x304C . #x75A4)      ; <CJK>
                 (#x304D . #x5DF4)      ; <CJK>
                 (#x304E . #x62D4)      ; <CJK>
                 (#x304F . #x8DCB)      ; <CJK>
                 (#x3050 . #x9776)      ; <CJK>
                 (#x3051 . #x628A)      ; <CJK>
                 (#x3052 . #x8019)      ; <CJK>
                 (#x3053 . #x575D)      ; <CJK>
                 (#x3054 . #x9738)      ; <CJK>
                 (#x3055 . #x7F62)      ; <CJK>
                 (#x3056 . #x7238)      ; <CJK>
                 (#x3057 . #x767D)      ; <CJK>
                 (#x3058 . #x67CF)      ; <CJK>
                 (#x3059 . #x767E)      ; <CJK>
                 (#x305A . #x6446)      ; <CJK>
                 (#x305B . #x4F70)      ; <CJK>
                 (#x305C . #x8D25)      ; <CJK>
                 (#x305D . #x62DC)      ; <CJK>
                 (#x305E . #x7A17)      ; <CJK>
                 (#x305F . #x6591)      ; <CJK>
                 (#x3060 . #x73ED)      ; <CJK>
                 (#x3061 . #x642C)      ; <CJK>
                 (#x3062 . #x6273)      ; <CJK>
                 (#x3063 . #x822C)      ; <CJK>
                 (#x3064 . #x9881)      ; <CJK>
                 (#x3065 . #x677F)      ; <CJK>
                 (#x3066 . #x7248)      ; <CJK>
                 (#x3067 . #x626E)      ; <CJK>
                 (#x3068 . #x62CC)      ; <CJK>
                 (#x3069 . #x4F34)      ; <CJK>
                 (#x306A . #x74E3)      ; <CJK>
                 (#x306B . #x534A)      ; <CJK>
                 (#x306C . #x529E)      ; <CJK>
                 (#x306D . #x7ECA)      ; <CJK>
                 (#x306E . #x90A6)      ; <CJK>
                 (#x306F . #x5E2E)      ; <CJK>
                 (#x3070 . #x6886)      ; <CJK>
                 (#x3071 . #x699C)      ; <CJK>
                 (#x3072 . #x8180)      ; <CJK>
                 (#x3073 . #x7ED1)      ; <CJK>
                 (#x3074 . #x68D2)      ; <CJK>
                 (#x3075 . #x78C5)      ; <CJK>
                 (#x3076 . #x868C)      ; <CJK>
                 (#x3077 . #x9551)      ; <CJK>
                 (#x3078 . #x508D)      ; <CJK>
                 (#x3079 . #x8C24)      ; <CJK>
                 (#x307A . #x82DE)      ; <CJK>
                 (#x307B . #x80DE)      ; <CJK>
                 (#x307C . #x5305)      ; <CJK>
                 (#x307D . #x8912)      ; <CJK>
                 (#x307E . #x5265)      ; <CJK>
                 (#x3121 . #x8584)      ; <CJK>
                 (#x3122 . #x96F9)      ; <CJK>
                 (#x3123 . #x4FDD)      ; <CJK>
                 (#x3124 . #x5821)      ; <CJK>
                 (#x3125 . #x9971)      ; <CJK>
                 (#x3126 . #x5B9D)      ; <CJK>
                 (#x3127 . #x62B1)      ; <CJK>
                 (#x3128 . #x62A5)      ; <CJK>
                 (#x3129 . #x66B4)      ; <CJK>
                 (#x312A . #x8C79)      ; <CJK>
                 (#x312B . #x9C8D)      ; <CJK>
                 (#x312C . #x7206)      ; <CJK>
                 (#x312D . #x676F)      ; <CJK>
                 (#x312E . #x7891)      ; <CJK>
                 (#x312F . #x60B2)      ; <CJK>
                 (#x3130 . #x5351)      ; <CJK>
                 (#x3131 . #x5317)      ; <CJK>
                 (#x3132 . #x8F88)      ; <CJK>
                 (#x3133 . #x80CC)      ; <CJK>
                 (#x3134 . #x8D1D)      ; <CJK>
                 (#x3135 . #x94A1)      ; <CJK>
                 (#x3136 . #x500D)      ; <CJK>
                 (#x3137 . #x72C8)      ; <CJK>
                 (#x3138 . #x5907)      ; <CJK>
                 (#x3139 . #x60EB)      ; <CJK>
                 (#x313A . #x7119)      ; <CJK>
                 (#x313B . #x88AB)      ; <CJK>
                 (#x313C . #x5954)      ; <CJK>
                 (#x313D . #x82EF)      ; <CJK>
                 (#x313E . #x672C)      ; <CJK>
                 (#x313F . #x7B28)      ; <CJK>
                 (#x3140 . #x5D29)      ; <CJK>
                 (#x3141 . #x7EF7)      ; <CJK>
                 (#x3142 . #x752D)      ; <CJK>
                 (#x3143 . #x6CF5)      ; <CJK>
                 (#x3144 . #x8E66)      ; <CJK>
                 (#x3145 . #x8FF8)      ; <CJK>
                 (#x3146 . #x903C)      ; <CJK>
                 (#x3147 . #x9F3B)      ; <CJK>
                 (#x3148 . #x6BD4)      ; <CJK>
                 (#x3149 . #x9119)      ; <CJK>
                 (#x314A . #x7B14)      ; <CJK>
                 (#x314B . #x5F7C)      ; <CJK>
                 (#x314C . #x78A7)      ; <CJK>
                 (#x314D . #x84D6)      ; <CJK>
                 (#x314E . #x853D)      ; <CJK>
                 (#x314F . #x6BD5)      ; <CJK>
                 (#x3150 . #x6BD9)      ; <CJK>
                 (#x3151 . #x6BD6)      ; <CJK>
                 (#x3152 . #x5E01)      ; <CJK>
                 (#x3153 . #x5E87)      ; <CJK>
                 (#x3154 . #x75F9)      ; <CJK>
                 (#x3155 . #x95ED)      ; <CJK>
                 (#x3156 . #x655D)      ; <CJK>
                 (#x3157 . #x5F0A)      ; <CJK>
                 (#x3158 . #x5FC5)      ; <CJK>
                 (#x3159 . #x8F9F)      ; <CJK>
                 (#x315A . #x58C1)      ; <CJK>
                 (#x315B . #x81C2)      ; <CJK>
                 (#x315C . #x907F)      ; <CJK>
                 (#x315D . #x965B)      ; <CJK>
                 (#x315E . #x97AD)      ; <CJK>
                 (#x315F . #x8FB9)      ; <CJK>
                 (#x3160 . #x7F16)      ; <CJK>
                 (#x3161 . #x8D2C)      ; <CJK>
                 (#x3162 . #x6241)      ; <CJK>
                 (#x3163 . #x4FBF)      ; <CJK>
                 (#x3164 . #x53D8)      ; <CJK>
                 (#x3165 . #x535E)      ; <CJK>
                 (#x3166 . #x8FA8)      ; <CJK>
                 (#x3167 . #x8FA9)      ; <CJK>
                 (#x3168 . #x8FAB)      ; <CJK>
                 (#x3169 . #x904D)      ; <CJK>
                 (#x316A . #x6807)      ; <CJK>
                 (#x316B . #x5F6A)      ; <CJK>
                 (#x316C . #x8198)      ; <CJK>
                 (#x316D . #x8868)      ; <CJK>
                 (#x316E . #x9CD6)      ; <CJK>
                 (#x316F . #x618B)      ; <CJK>
                 (#x3170 . #x522B)      ; <CJK>
                 (#x3171 . #x762A)      ; <CJK>
                 (#x3172 . #x5F6C)      ; <CJK>
                 (#x3173 . #x658C)      ; <CJK>
                 (#x3174 . #x6FD2)      ; <CJK>
                 (#x3175 . #x6EE8)      ; <CJK>
                 (#x3176 . #x5BBE)      ; <CJK>
                 (#x3177 . #x6448)      ; <CJK>
                 (#x3178 . #x5175)      ; <CJK>
                 (#x3179 . #x51B0)      ; <CJK>
                 (#x317A . #x67C4)      ; <CJK>
                 (#x317B . #x4E19)      ; <CJK>
                 (#x317C . #x79C9)      ; <CJK>
                 (#x317D . #x997C)      ; <CJK>
                 (#x317E . #x70B3)      ; <CJK>
                 (#x3221 . #x75C5)      ; <CJK>
                 (#x3222 . #x5E76)      ; <CJK>
                 (#x3223 . #x73BB)      ; <CJK>
                 (#x3224 . #x83E0)      ; <CJK>
                 (#x3225 . #x64AD)      ; <CJK>
                 (#x3226 . #x62E8)      ; <CJK>
                 (#x3227 . #x94B5)      ; <CJK>
                 (#x3228 . #x6CE2)      ; <CJK>
                 (#x3229 . #x535A)      ; <CJK>
                 (#x322A . #x52C3)      ; <CJK>
                 (#x322B . #x640F)      ; <CJK>
                 (#x322C . #x94C2)      ; <CJK>
                 (#x322D . #x7B94)      ; <CJK>
                 (#x322E . #x4F2F)      ; <CJK>
                 (#x322F . #x5E1B)      ; <CJK>
                 (#x3230 . #x8236)      ; <CJK>
                 (#x3231 . #x8116)      ; <CJK>
                 (#x3232 . #x818A)      ; <CJK>
                 (#x3233 . #x6E24)      ; <CJK>
                 (#x3234 . #x6CCA)      ; <CJK>
                 (#x3235 . #x9A73)      ; <CJK>
                 (#x3236 . #x6355)      ; <CJK>
                 (#x3237 . #x535C)      ; <CJK>
                 (#x3238 . #x54FA)      ; <CJK>
                 (#x3239 . #x8865)      ; <CJK>
                 (#x323A . #x57E0)      ; <CJK>
                 (#x323B . #x4E0D)      ; <CJK>
                 (#x323C . #x5E03)      ; <CJK>
                 (#x323D . #x6B65)      ; <CJK>
                 (#x323E . #x7C3F)      ; <CJK>
                 (#x323F . #x90E8)      ; <CJK>
                 (#x3240 . #x6016)      ; <CJK>
                 (#x3241 . #x64E6)      ; <CJK>
                 (#x3242 . #x731C)      ; <CJK>
                 (#x3243 . #x88C1)      ; <CJK>
                 (#x3244 . #x6750)      ; <CJK>
                 (#x3245 . #x624D)      ; <CJK>
                 (#x3246 . #x8D22)      ; <CJK>
                 (#x3247 . #x776C)      ; <CJK>
                 (#x3248 . #x8E29)      ; <CJK>
                 (#x3249 . #x91C7)      ; <CJK>
                 (#x324A . #x5F69)      ; <CJK>
                 (#x324B . #x83DC)      ; <CJK>
                 (#x324C . #x8521)      ; <CJK>
                 (#x324D . #x9910)      ; <CJK>
                 (#x324E . #x53C2)      ; <CJK>
                 (#x324F . #x8695)      ; <CJK>
                 (#x3250 . #x6B8B)      ; <CJK>
                 (#x3251 . #x60ED)      ; <CJK>
                 (#x3252 . #x60E8)      ; <CJK>
                 (#x3253 . #x707F)      ; <CJK>
                 (#x3254 . #x82CD)      ; <CJK>
                 (#x3255 . #x8231)      ; <CJK>
                 (#x3256 . #x4ED3)      ; <CJK>
                 (#x3257 . #x6CA7)      ; <CJK>
                 (#x3258 . #x85CF)      ; <CJK>
                 (#x3259 . #x64CD)      ; <CJK>
                 (#x325A . #x7CD9)      ; <CJK>
                 (#x325B . #x69FD)      ; <CJK>
                 (#x325C . #x66F9)      ; <CJK>
                 (#x325D . #x8349)      ; <CJK>
                 (#x325E . #x5395)      ; <CJK>
                 (#x325F . #x7B56)      ; <CJK>
                 (#x3260 . #x4FA7)      ; <CJK>
                 (#x3261 . #x518C)      ; <CJK>
                 (#x3262 . #x6D4B)      ; <CJK>
                 (#x3263 . #x5C42)      ; <CJK>
                 (#x3264 . #x8E6D)      ; <CJK>
                 (#x3265 . #x63D2)      ; <CJK>
                 (#x3266 . #x53C9)      ; <CJK>
                 (#x3267 . #x832C)      ; <CJK>
                 (#x3268 . #x8336)      ; <CJK>
                 (#x3269 . #x67E5)      ; <CJK>
                 (#x326A . #x78B4)      ; <CJK>
                 (#x326B . #x643D)      ; <CJK>
                 (#x326C . #x5BDF)      ; <CJK>
                 (#x326D . #x5C94)      ; <CJK>
                 (#x326E . #x5DEE)      ; <CJK>
                 (#x326F . #x8BE7)      ; <CJK>
                 (#x3270 . #x62C6)      ; <CJK>
                 (#x3271 . #x67F4)      ; <CJK>
                 (#x3272 . #x8C7A)      ; <CJK>
                 (#x3273 . #x6400)      ; <CJK>
                 (#x3274 . #x63BA)      ; <CJK>
                 (#x3275 . #x8749)      ; <CJK>
                 (#x3276 . #x998B)      ; <CJK>
                 (#x3277 . #x8C17)      ; <CJK>
                 (#x3278 . #x7F20)      ; <CJK>
                 (#x3279 . #x94F2)      ; <CJK>
                 (#x327A . #x4EA7)      ; <CJK>
                 (#x327B . #x9610)      ; <CJK>
                 (#x327C . #x98A4)      ; <CJK>
                 (#x327D . #x660C)      ; <CJK>
                 (#x327E . #x7316)      ; <CJK>
                 (#x3321 . #x573A)      ; <CJK>
                 (#x3322 . #x5C1D)      ; <CJK>
                 (#x3323 . #x5E38)      ; <CJK>
                 (#x3324 . #x957F)      ; <CJK>
                 (#x3325 . #x507F)      ; <CJK>
                 (#x3326 . #x80A0)      ; <CJK>
                 (#x3327 . #x5382)      ; <CJK>
                 (#x3328 . #x655E)      ; <CJK>
                 (#x3329 . #x7545)      ; <CJK>
                 (#x332A . #x5531)      ; <CJK>
                 (#x332B . #x5021)      ; <CJK>
                 (#x332C . #x8D85)      ; <CJK>
                 (#x332D . #x6284)      ; <CJK>
                 (#x332E . #x949E)      ; <CJK>
                 (#x332F . #x671D)      ; <CJK>
                 (#x3330 . #x5632)      ; <CJK>
                 (#x3331 . #x6F6E)      ; <CJK>
                 (#x3332 . #x5DE2)      ; <CJK>
                 (#x3333 . #x5435)      ; <CJK>
                 (#x3334 . #x7092)      ; <CJK>
                 (#x3335 . #x8F66)      ; <CJK>
                 (#x3336 . #x626F)      ; <CJK>
                 (#x3337 . #x64A4)      ; <CJK>
                 (#x3338 . #x63A3)      ; <CJK>
                 (#x3339 . #x5F7B)      ; <CJK>
                 (#x333A . #x6F88)      ; <CJK>
                 (#x333B . #x90F4)      ; <CJK>
                 (#x333C . #x81E3)      ; <CJK>
                 (#x333D . #x8FB0)      ; <CJK>
                 (#x333E . #x5C18)      ; <CJK>
                 (#x333F . #x6668)      ; <CJK>
                 (#x3340 . #x5FF1)      ; <CJK>
                 (#x3341 . #x6C89)      ; <CJK>
                 (#x3342 . #x9648)      ; <CJK>
                 (#x3343 . #x8D81)      ; <CJK>
                 (#x3344 . #x886C)      ; <CJK>
                 (#x3345 . #x6491)      ; <CJK>
                 (#x3346 . #x79F0)      ; <CJK>
                 (#x3347 . #x57CE)      ; <CJK>
                 (#x3348 . #x6A59)      ; <CJK>
                 (#x3349 . #x6210)      ; <CJK>
                 (#x334A . #x5448)      ; <CJK>
                 (#x334B . #x4E58)      ; <CJK>
                 (#x334C . #x7A0B)      ; <CJK>
                 (#x334D . #x60E9)      ; <CJK>
                 (#x334E . #x6F84)      ; <CJK>
                 (#x334F . #x8BDA)      ; <CJK>
                 (#x3350 . #x627F)      ; <CJK>
                 (#x3351 . #x901E)      ; <CJK>
                 (#x3352 . #x9A8B)      ; <CJK>
                 (#x3353 . #x79E4)      ; <CJK>
                 (#x3354 . #x5403)      ; <CJK>
                 (#x3355 . #x75F4)      ; <CJK>
                 (#x3356 . #x6301)      ; <CJK>
                 (#x3357 . #x5319)      ; <CJK>
                 (#x3358 . #x6C60)      ; <CJK>
                 (#x3359 . #x8FDF)      ; <CJK>
                 (#x335A . #x5F1B)      ; <CJK>
                 (#x335B . #x9A70)      ; <CJK>
                 (#x335C . #x803B)      ; <CJK>
                 (#x335D . #x9F7F)      ; <CJK>
                 (#x335E . #x4F88)      ; <CJK>
                 (#x335F . #x5C3A)      ; <CJK>
                 (#x3360 . #x8D64)      ; <CJK>
                 (#x3361 . #x7FC5)      ; <CJK>
                 (#x3362 . #x65A5)      ; <CJK>
                 (#x3363 . #x70BD)      ; <CJK>
                 (#x3364 . #x5145)      ; <CJK>
                 (#x3365 . #x51B2)      ; <CJK>
                 (#x3366 . #x866B)      ; <CJK>
                 (#x3367 . #x5D07)      ; <CJK>
                 (#x3368 . #x5BA0)      ; <CJK>
                 (#x3369 . #x62BD)      ; <CJK>
                 (#x336A . #x916C)      ; <CJK>
                 (#x336B . #x7574)      ; <CJK>
                 (#x336C . #x8E0C)      ; <CJK>
                 (#x336D . #x7A20)      ; <CJK>
                 (#x336E . #x6101)      ; <CJK>
                 (#x336F . #x7B79)      ; <CJK>
                 (#x3370 . #x4EC7)      ; <CJK>
                 (#x3371 . #x7EF8)      ; <CJK>
                 (#x3372 . #x7785)      ; <CJK>
                 (#x3373 . #x4E11)      ; <CJK>
                 (#x3374 . #x81ED)      ; <CJK>
                 (#x3375 . #x521D)      ; <CJK>
                 (#x3376 . #x51FA)      ; <CJK>
                 (#x3377 . #x6A71)      ; <CJK>
                 (#x3378 . #x53A8)      ; <CJK>
                 (#x3379 . #x8E87)      ; <CJK>
                 (#x337A . #x9504)      ; <CJK>
                 (#x337B . #x96CF)      ; <CJK>
                 (#x337C . #x6EC1)      ; <CJK>
                 (#x337D . #x9664)      ; <CJK>
                 (#x337E . #x695A)      ; <CJK>
                 (#x3421 . #x7840)      ; <CJK>
                 (#x3422 . #x50A8)      ; <CJK>
                 (#x3423 . #x77D7)      ; <CJK>
                 (#x3424 . #x6410)      ; <CJK>
                 (#x3425 . #x89E6)      ; <CJK>
                 (#x3426 . #x5904)      ; <CJK>
                 (#x3427 . #x63E3)      ; <CJK>
                 (#x3428 . #x5DDD)      ; <CJK>
                 (#x3429 . #x7A7F)      ; <CJK>
                 (#x342A . #x693D)      ; <CJK>
                 (#x342B . #x4F20)      ; <CJK>
                 (#x342C . #x8239)      ; <CJK>
                 (#x342D . #x5598)      ; <CJK>
                 (#x342E . #x4E32)      ; <CJK>
                 (#x342F . #x75AE)      ; <CJK>
                 (#x3430 . #x7A97)      ; <CJK>
                 (#x3431 . #x5E62)      ; <CJK>
                 (#x3432 . #x5E8A)      ; <CJK>
                 (#x3433 . #x95EF)      ; <CJK>
                 (#x3434 . #x521B)      ; <CJK>
                 (#x3435 . #x5439)      ; <CJK>
                 (#x3436 . #x708A)      ; <CJK>
                 (#x3437 . #x6376)      ; <CJK>
                 (#x3438 . #x9524)      ; <CJK>
                 (#x3439 . #x5782)      ; <CJK>
                 (#x343A . #x6625)      ; <CJK>
                 (#x343B . #x693F)      ; <CJK>
                 (#x343C . #x9187)      ; <CJK>
                 (#x343D . #x5507)      ; <CJK>
                 (#x343E . #x6DF3)      ; <CJK>
                 (#x343F . #x7EAF)      ; <CJK>
                 (#x3440 . #x8822)      ; <CJK>
                 (#x3441 . #x6233)      ; <CJK>
                 (#x3442 . #x7EF0)      ; <CJK>
                 (#x3443 . #x75B5)      ; <CJK>
                 (#x3444 . #x8328)      ; <CJK>
                 (#x3445 . #x78C1)      ; <CJK>
                 (#x3446 . #x96CC)      ; <CJK>
                 (#x3447 . #x8F9E)      ; <CJK>
                 (#x3448 . #x6148)      ; <CJK>
                 (#x3449 . #x74F7)      ; <CJK>
                 (#x344A . #x8BCD)      ; <CJK>
                 (#x344B . #x6B64)      ; <CJK>
                 (#x344C . #x523A)      ; <CJK>
                 (#x344D . #x8D50)      ; <CJK>
                 (#x344E . #x6B21)      ; <CJK>
                 (#x344F . #x806A)      ; <CJK>
                 (#x3450 . #x8471)      ; <CJK>
                 (#x3451 . #x56F1)      ; <CJK>
                 (#x3452 . #x5306)      ; <CJK>
                 (#x3453 . #x4ECE)      ; <CJK>
                 (#x3454 . #x4E1B)      ; <CJK>
                 (#x3455 . #x51D1)      ; <CJK>
                 (#x3456 . #x7C97)      ; <CJK>
                 (#x3457 . #x918B)      ; <CJK>
                 (#x3458 . #x7C07)      ; <CJK>
                 (#x3459 . #x4FC3)      ; <CJK>
                 (#x345A . #x8E7F)      ; <CJK>
                 (#x345B . #x7BE1)      ; <CJK>
                 (#x345C . #x7A9C)      ; <CJK>
                 (#x345D . #x6467)      ; <CJK>
                 (#x345E . #x5D14)      ; <CJK>
                 (#x345F . #x50AC)      ; <CJK>
                 (#x3460 . #x8106)      ; <CJK>
                 (#x3461 . #x7601)      ; <CJK>
                 (#x3462 . #x7CB9)      ; <CJK>
                 (#x3463 . #x6DEC)      ; <CJK>
                 (#x3464 . #x7FE0)      ; <CJK>
                 (#x3465 . #x6751)      ; <CJK>
                 (#x3466 . #x5B58)      ; <CJK>
                 (#x3467 . #x5BF8)      ; <CJK>
                 (#x3468 . #x78CB)      ; <CJK>
                 (#x3469 . #x64AE)      ; <CJK>
                 (#x346A . #x6413)      ; <CJK>
                 (#x346B . #x63AA)      ; <CJK>
                 (#x346C . #x632B)      ; <CJK>
                 (#x346D . #x9519)      ; <CJK>
                 (#x346E . #x642D)      ; <CJK>
                 (#x346F . #x8FBE)      ; <CJK>
                 (#x3470 . #x7B54)      ; <CJK>
                 (#x3471 . #x7629)      ; <CJK>
                 (#x3472 . #x6253)      ; <CJK>
                 (#x3473 . #x5927)      ; <CJK>
                 (#x3474 . #x5446)      ; <CJK>
                 (#x3475 . #x6B79)      ; <CJK>
                 (#x3476 . #x50A3)      ; <CJK>
                 (#x3477 . #x6234)      ; <CJK>
                 (#x3478 . #x5E26)      ; <CJK>
                 (#x3479 . #x6B86)      ; <CJK>
                 (#x347A . #x4EE3)      ; <CJK>
                 (#x347B . #x8D37)      ; <CJK>
                 (#x347C . #x888B)      ; <CJK>
                 (#x347D . #x5F85)      ; <CJK>
                 (#x347E . #x902E)      ; <CJK>
                 (#x3521 . #x6020)      ; <CJK>
                 (#x3522 . #x803D)      ; <CJK>
                 (#x3523 . #x62C5)      ; <CJK>
                 (#x3524 . #x4E39)      ; <CJK>
                 (#x3525 . #x5355)      ; <CJK>
                 (#x3526 . #x90F8)      ; <CJK>
                 (#x3527 . #x63B8)      ; <CJK>
                 (#x3528 . #x80C6)      ; <CJK>
                 (#x3529 . #x65E6)      ; <CJK>
                 (#x352A . #x6C2E)      ; <CJK>
                 (#x352B . #x4F46)      ; <CJK>
                 (#x352C . #x60EE)      ; <CJK>
                 (#x352D . #x6DE1)      ; <CJK>
                 (#x352E . #x8BDE)      ; <CJK>
                 (#x352F . #x5F39)      ; <CJK>
                 (#x3530 . #x86CB)      ; <CJK>
                 (#x3531 . #x5F53)      ; <CJK>
                 (#x3532 . #x6321)      ; <CJK>
                 (#x3533 . #x515A)      ; <CJK>
                 (#x3534 . #x8361)      ; <CJK>
                 (#x3535 . #x6863)      ; <CJK>
                 (#x3536 . #x5200)      ; <CJK>
                 (#x3537 . #x6363)      ; <CJK>
                 (#x3538 . #x8E48)      ; <CJK>
                 (#x3539 . #x5012)      ; <CJK>
                 (#x353A . #x5C9B)      ; <CJK>
                 (#x353B . #x7977)      ; <CJK>
                 (#x353C . #x5BFC)      ; <CJK>
                 (#x353D . #x5230)      ; <CJK>
                 (#x353E . #x7A3B)      ; <CJK>
                 (#x353F . #x60BC)      ; <CJK>
                 (#x3540 . #x9053)      ; <CJK>
                 (#x3541 . #x76D7)      ; <CJK>
                 (#x3542 . #x5FB7)      ; <CJK>
                 (#x3543 . #x5F97)      ; <CJK>
                 (#x3544 . #x7684)      ; <CJK>
                 (#x3545 . #x8E6C)      ; <CJK>
                 (#x3546 . #x706F)      ; <CJK>
                 (#x3547 . #x767B)      ; <CJK>
                 (#x3548 . #x7B49)      ; <CJK>
                 (#x3549 . #x77AA)      ; <CJK>
                 (#x354A . #x51F3)      ; <CJK>
                 (#x354B . #x9093)      ; <CJK>
                 (#x354C . #x5824)      ; <CJK>
                 (#x354D . #x4F4E)      ; <CJK>
                 (#x354E . #x6EF4)      ; <CJK>
                 (#x354F . #x8FEA)      ; <CJK>
                 (#x3550 . #x654C)      ; <CJK>
                 (#x3551 . #x7B1B)      ; <CJK>
                 (#x3552 . #x72C4)      ; <CJK>
                 (#x3553 . #x6DA4)      ; <CJK>
                 (#x3554 . #x7FDF)      ; <CJK>
                 (#x3555 . #x5AE1)      ; <CJK>
                 (#x3556 . #x62B5)      ; <CJK>
                 (#x3557 . #x5E95)      ; <CJK>
                 (#x3558 . #x5730)      ; <CJK>
                 (#x3559 . #x8482)      ; <CJK>
                 (#x355A . #x7B2C)      ; <CJK>
                 (#x355B . #x5E1D)      ; <CJK>
                 (#x355C . #x5F1F)      ; <CJK>
                 (#x355D . #x9012)      ; <CJK>
                 (#x355E . #x7F14)      ; <CJK>
                 (#x355F . #x98A0)      ; <CJK>
                 (#x3560 . #x6382)      ; <CJK>
                 (#x3561 . #x6EC7)      ; <CJK>
                 (#x3562 . #x7898)      ; <CJK>
                 (#x3563 . #x70B9)      ; <CJK>
                 (#x3564 . #x5178)      ; <CJK>
                 (#x3565 . #x975B)      ; <CJK>
                 (#x3566 . #x57AB)      ; <CJK>
                 (#x3567 . #x7535)      ; <CJK>
                 (#x3568 . #x4F43)      ; <CJK>
                 (#x3569 . #x7538)      ; <CJK>
                 (#x356A . #x5E97)      ; <CJK>
                 (#x356B . #x60E6)      ; <CJK>
                 (#x356C . #x5960)      ; <CJK>
                 (#x356D . #x6DC0)      ; <CJK>
                 (#x356E . #x6BBF)      ; <CJK>
                 (#x356F . #x7889)      ; <CJK>
                 (#x3570 . #x53FC)      ; <CJK>
                 (#x3571 . #x96D5)      ; <CJK>
                 (#x3572 . #x51CB)      ; <CJK>
                 (#x3573 . #x5201)      ; <CJK>
                 (#x3574 . #x6389)      ; <CJK>
                 (#x3575 . #x540A)      ; <CJK>
                 (#x3576 . #x9493)      ; <CJK>
                 (#x3577 . #x8C03)      ; <CJK>
                 (#x3578 . #x8DCC)      ; <CJK>
                 (#x3579 . #x7239)      ; <CJK>
                 (#x357A . #x789F)      ; <CJK>
                 (#x357B . #x8776)      ; <CJK>
                 (#x357C . #x8FED)      ; <CJK>
                 (#x357D . #x8C0D)      ; <CJK>
                 (#x357E . #x53E0)      ; <CJK>
                 (#x3621 . #x4E01)      ; <CJK>
                 (#x3622 . #x76EF)      ; <CJK>
                 (#x3623 . #x53EE)      ; <CJK>
                 (#x3624 . #x9489)      ; <CJK>
                 (#x3625 . #x9876)      ; <CJK>
                 (#x3626 . #x9F0E)      ; <CJK>
                 (#x3627 . #x952D)      ; <CJK>
                 (#x3628 . #x5B9A)      ; <CJK>
                 (#x3629 . #x8BA2)      ; <CJK>
                 (#x362A . #x4E22)      ; <CJK>
                 (#x362B . #x4E1C)      ; <CJK>
                 (#x362C . #x51AC)      ; <CJK>
                 (#x362D . #x8463)      ; <CJK>
                 (#x362E . #x61C2)      ; <CJK>
                 (#x362F . #x52A8)      ; <CJK>
                 (#x3630 . #x680B)      ; <CJK>
                 (#x3631 . #x4F97)      ; <CJK>
                 (#x3632 . #x606B)      ; <CJK>
                 (#x3633 . #x51BB)      ; <CJK>
                 (#x3634 . #x6D1E)      ; <CJK>
                 (#x3635 . #x515C)      ; <CJK>
                 (#x3636 . #x6296)      ; <CJK>
                 (#x3637 . #x6597)      ; <CJK>
                 (#x3638 . #x9661)      ; <CJK>
                 (#x3639 . #x8C46)      ; <CJK>
                 (#x363A . #x9017)      ; <CJK>
                 (#x363B . #x75D8)      ; <CJK>
                 (#x363C . #x90FD)      ; <CJK>
                 (#x363D . #x7763)      ; <CJK>
                 (#x363E . #x6BD2)      ; <CJK>
                 (#x363F . #x728A)      ; <CJK>
                 (#x3640 . #x72EC)      ; <CJK>
                 (#x3641 . #x8BFB)      ; <CJK>
                 (#x3642 . #x5835)      ; <CJK>
                 (#x3643 . #x7779)      ; <CJK>
                 (#x3644 . #x8D4C)      ; <CJK>
                 (#x3645 . #x675C)      ; <CJK>
                 (#x3646 . #x9540)      ; <CJK>
                 (#x3647 . #x809A)      ; <CJK>
                 (#x3648 . #x5EA6)      ; <CJK>
                 (#x3649 . #x6E21)      ; <CJK>
                 (#x364A . #x5992)      ; <CJK>
                 (#x364B . #x7AEF)      ; <CJK>
                 (#x364C . #x77ED)      ; <CJK>
                 (#x364D . #x953B)      ; <CJK>
                 (#x364E . #x6BB5)      ; <CJK>
                 (#x364F . #x65AD)      ; <CJK>
                 (#x3650 . #x7F0E)      ; <CJK>
                 (#x3651 . #x5806)      ; <CJK>
                 (#x3652 . #x5151)      ; <CJK>
                 (#x3653 . #x961F)      ; <CJK>
                 (#x3654 . #x5BF9)      ; <CJK>
                 (#x3655 . #x58A9)      ; <CJK>
                 (#x3656 . #x5428)      ; <CJK>
                 (#x3657 . #x8E72)      ; <CJK>
                 (#x3658 . #x6566)      ; <CJK>
                 (#x3659 . #x987F)      ; <CJK>
                 (#x365A . #x56E4)      ; <CJK>
                 (#x365B . #x949D)      ; <CJK>
                 (#x365C . #x76FE)      ; <CJK>
                 (#x365D . #x9041)      ; <CJK>
                 (#x365E . #x6387)      ; <CJK>
                 (#x365F . #x54C6)      ; <CJK>
                 (#x3660 . #x591A)      ; <CJK>
                 (#x3661 . #x593A)      ; <CJK>
                 (#x3662 . #x579B)      ; <CJK>
                 (#x3663 . #x8EB2)      ; <CJK>
                 (#x3664 . #x6735)      ; <CJK>
                 (#x3665 . #x8DFA)      ; <CJK>
                 (#x3666 . #x8235)      ; <CJK>
                 (#x3667 . #x5241)      ; <CJK>
                 (#x3668 . #x60F0)      ; <CJK>
                 (#x3669 . #x5815)      ; <CJK>
                 (#x366A . #x86FE)      ; <CJK>
                 (#x366B . #x5CE8)      ; <CJK>
                 (#x366C . #x9E45)      ; <CJK>
                 (#x366D . #x4FC4)      ; <CJK>
                 (#x366E . #x989D)      ; <CJK>
                 (#x366F . #x8BB9)      ; <CJK>
                 (#x3670 . #x5A25)      ; <CJK>
                 (#x3671 . #x6076)      ; <CJK>
                 (#x3672 . #x5384)      ; <CJK>
                 (#x3673 . #x627C)      ; <CJK>
                 (#x3674 . #x904F)      ; <CJK>
                 (#x3675 . #x9102)      ; <CJK>
                 (#x3676 . #x997F)      ; <CJK>
                 (#x3677 . #x6069)      ; <CJK>
                 (#x3678 . #x800C)      ; <CJK>
                 (#x3679 . #x513F)      ; <CJK>
                 (#x367A . #x8033)      ; <CJK>
                 (#x367B . #x5C14)      ; <CJK>
                 (#x367C . #x9975)      ; <CJK>
                 (#x367D . #x6D31)      ; <CJK>
                 (#x367E . #x4E8C)      ; <CJK>
                 (#x3721 . #x8D30)      ; <CJK>
                 (#x3722 . #x53D1)      ; <CJK>
                 (#x3723 . #x7F5A)      ; <CJK>
                 (#x3724 . #x7B4F)      ; <CJK>
                 (#x3725 . #x4F10)      ; <CJK>
                 (#x3726 . #x4E4F)      ; <CJK>
                 (#x3727 . #x9600)      ; <CJK>
                 (#x3728 . #x6CD5)      ; <CJK>
                 (#x3729 . #x73D0)      ; <CJK>
                 (#x372A . #x85E9)      ; <CJK>
                 (#x372B . #x5E06)      ; <CJK>
                 (#x372C . #x756A)      ; <CJK>
                 (#x372D . #x7FFB)      ; <CJK>
                 (#x372E . #x6A0A)      ; <CJK>
                 (#x372F . #x77FE)      ; <CJK>
                 (#x3730 . #x9492)      ; <CJK>
                 (#x3731 . #x7E41)      ; <CJK>
                 (#x3732 . #x51E1)      ; <CJK>
                 (#x3733 . #x70E6)      ; <CJK>
                 (#x3734 . #x53CD)      ; <CJK>
                 (#x3735 . #x8FD4)      ; <CJK>
                 (#x3736 . #x8303)      ; <CJK>
                 (#x3737 . #x8D29)      ; <CJK>
                 (#x3738 . #x72AF)      ; <CJK>
                 (#x3739 . #x996D)      ; <CJK>
                 (#x373A . #x6CDB)      ; <CJK>
                 (#x373B . #x574A)      ; <CJK>
                 (#x373C . #x82B3)      ; <CJK>
                 (#x373D . #x65B9)      ; <CJK>
                 (#x373E . #x80AA)      ; <CJK>
                 (#x373F . #x623F)      ; <CJK>
                 (#x3740 . #x9632)      ; <CJK>
                 (#x3741 . #x59A8)      ; <CJK>
                 (#x3742 . #x4EFF)      ; <CJK>
                 (#x3743 . #x8BBF)      ; <CJK>
                 (#x3744 . #x7EBA)      ; <CJK>
                 (#x3745 . #x653E)      ; <CJK>
                 (#x3746 . #x83F2)      ; <CJK>
                 (#x3747 . #x975E)      ; <CJK>
                 (#x3748 . #x5561)      ; <CJK>
                 (#x3749 . #x98DE)      ; <CJK>
                 (#x374A . #x80A5)      ; <CJK>
                 (#x374B . #x532A)      ; <CJK>
                 (#x374C . #x8BFD)      ; <CJK>
                 (#x374D . #x5420)      ; <CJK>
                 (#x374E . #x80BA)      ; <CJK>
                 (#x374F . #x5E9F)      ; <CJK>
                 (#x3750 . #x6CB8)      ; <CJK>
                 (#x3751 . #x8D39)      ; <CJK>
                 (#x3752 . #x82AC)      ; <CJK>
                 (#x3753 . #x915A)      ; <CJK>
                 (#x3754 . #x5429)      ; <CJK>
                 (#x3755 . #x6C1B)      ; <CJK>
                 (#x3756 . #x5206)      ; <CJK>
                 (#x3757 . #x7EB7)      ; <CJK>
                 (#x3758 . #x575F)      ; <CJK>
                 (#x3759 . #x711A)      ; <CJK>
                 (#x375A . #x6C7E)      ; <CJK>
                 (#x375B . #x7C89)      ; <CJK>
                 (#x375C . #x594B)      ; <CJK>
                 (#x375D . #x4EFD)      ; <CJK>
                 (#x375E . #x5FFF)      ; <CJK>
                 (#x375F . #x6124)      ; <CJK>
                 (#x3760 . #x7CAA)      ; <CJK>
                 (#x3761 . #x4E30)      ; <CJK>
                 (#x3762 . #x5C01)      ; <CJK>
                 (#x3763 . #x67AB)      ; <CJK>
                 (#x3764 . #x8702)      ; <CJK>
                 (#x3765 . #x5CF0)      ; <CJK>
                 (#x3766 . #x950B)      ; <CJK>
                 (#x3767 . #x98CE)      ; <CJK>
                 (#x3768 . #x75AF)      ; <CJK>
                 (#x3769 . #x70FD)      ; <CJK>
                 (#x376A . #x9022)      ; <CJK>
                 (#x376B . #x51AF)      ; <CJK>
                 (#x376C . #x7F1D)      ; <CJK>
                 (#x376D . #x8BBD)      ; <CJK>
                 (#x376E . #x5949)      ; <CJK>
                 (#x376F . #x51E4)      ; <CJK>
                 (#x3770 . #x4F5B)      ; <CJK>
                 (#x3771 . #x5426)      ; <CJK>
                 (#x3772 . #x592B)      ; <CJK>
                 (#x3773 . #x6577)      ; <CJK>
                 (#x3774 . #x80A4)      ; <CJK>
                 (#x3775 . #x5B75)      ; <CJK>
                 (#x3776 . #x6276)      ; <CJK>
                 (#x3777 . #x62C2)      ; <CJK>
                 (#x3778 . #x8F90)      ; <CJK>
                 (#x3779 . #x5E45)      ; <CJK>
                 (#x377A . #x6C1F)      ; <CJK>
                 (#x377B . #x7B26)      ; <CJK>
                 (#x377C . #x4F0F)      ; <CJK>
                 (#x377D . #x4FD8)      ; <CJK>
                 (#x377E . #x670D)      ; <CJK>
                 (#x3821 . #x6D6E)      ; <CJK>
                 (#x3822 . #x6DAA)      ; <CJK>
                 (#x3823 . #x798F)      ; <CJK>
                 (#x3824 . #x88B1)      ; <CJK>
                 (#x3825 . #x5F17)      ; <CJK>
                 (#x3826 . #x752B)      ; <CJK>
                 (#x3827 . #x629A)      ; <CJK>
                 (#x3828 . #x8F85)      ; <CJK>
                 (#x3829 . #x4FEF)      ; <CJK>
                 (#x382A . #x91DC)      ; <CJK>
                 (#x382B . #x65A7)      ; <CJK>
                 (#x382C . #x812F)      ; <CJK>
                 (#x382D . #x8151)      ; <CJK>
                 (#x382E . #x5E9C)      ; <CJK>
                 (#x382F . #x8150)      ; <CJK>
                 (#x3830 . #x8D74)      ; <CJK>
                 (#x3831 . #x526F)      ; <CJK>
                 (#x3832 . #x8986)      ; <CJK>
                 (#x3833 . #x8D4B)      ; <CJK>
                 (#x3834 . #x590D)      ; <CJK>
                 (#x3835 . #x5085)      ; <CJK>
                 (#x3836 . #x4ED8)      ; <CJK>
                 (#x3837 . #x961C)      ; <CJK>
                 (#x3838 . #x7236)      ; <CJK>
                 (#x3839 . #x8179)      ; <CJK>
                 (#x383A . #x8D1F)      ; <CJK>
                 (#x383B . #x5BCC)      ; <CJK>
                 (#x383C . #x8BA3)      ; <CJK>
                 (#x383D . #x9644)      ; <CJK>
                 (#x383E . #x5987)      ; <CJK>
                 (#x383F . #x7F1A)      ; <CJK>
                 (#x3840 . #x5490)      ; <CJK>
                 (#x3841 . #x5676)      ; <CJK>
                 (#x3842 . #x560E)      ; <CJK>
                 (#x3843 . #x8BE5)      ; <CJK>
                 (#x3844 . #x6539)      ; <CJK>
                 (#x3845 . #x6982)      ; <CJK>
                 (#x3846 . #x9499)      ; <CJK>
                 (#x3847 . #x76D6)      ; <CJK>
                 (#x3848 . #x6E89)      ; <CJK>
                 (#x3849 . #x5E72)      ; <CJK>
                 (#x384A . #x7518)      ; <CJK>
                 (#x384B . #x6746)      ; <CJK>
                 (#x384C . #x67D1)      ; <CJK>
                 (#x384D . #x7AFF)      ; <CJK>
                 (#x384E . #x809D)      ; <CJK>
                 (#x384F . #x8D76)      ; <CJK>
                 (#x3850 . #x611F)      ; <CJK>
                 (#x3851 . #x79C6)      ; <CJK>
                 (#x3852 . #x6562)      ; <CJK>
                 (#x3853 . #x8D63)      ; <CJK>
                 (#x3854 . #x5188)      ; <CJK>
                 (#x3855 . #x521A)      ; <CJK>
                 (#x3856 . #x94A2)      ; <CJK>
                 (#x3857 . #x7F38)      ; <CJK>
                 (#x3858 . #x809B)      ; <CJK>
                 (#x3859 . #x7EB2)      ; <CJK>
                 (#x385A . #x5C97)      ; <CJK>
                 (#x385B . #x6E2F)      ; <CJK>
                 (#x385C . #x6760)      ; <CJK>
                 (#x385D . #x7BD9)      ; <CJK>
                 (#x385E . #x768B)      ; <CJK>
                 (#x385F . #x9AD8)      ; <CJK>
                 (#x3860 . #x818F)      ; <CJK>
                 (#x3861 . #x7F94)      ; <CJK>
                 (#x3862 . #x7CD5)      ; <CJK>
                 (#x3863 . #x641E)      ; <CJK>
                 (#x3864 . #x9550)      ; <CJK>
                 (#x3865 . #x7A3F)      ; <CJK>
                 (#x3866 . #x544A)      ; <CJK>
                 (#x3867 . #x54E5)      ; <CJK>
                 (#x3868 . #x6B4C)      ; <CJK>
                 (#x3869 . #x6401)      ; <CJK>
                 (#x386A . #x6208)      ; <CJK>
                 (#x386B . #x9E3D)      ; <CJK>
                 (#x386C . #x80F3)      ; <CJK>
                 (#x386D . #x7599)      ; <CJK>
                 (#x386E . #x5272)      ; <CJK>
                 (#x386F . #x9769)      ; <CJK>
                 (#x3870 . #x845B)      ; <CJK>
                 (#x3871 . #x683C)      ; <CJK>
                 (#x3872 . #x86E4)      ; <CJK>
                 (#x3873 . #x9601)      ; <CJK>
                 (#x3874 . #x9694)      ; <CJK>
                 (#x3875 . #x94EC)      ; <CJK>
                 (#x3876 . #x4E2A)      ; <CJK>
                 (#x3877 . #x5404)      ; <CJK>
                 (#x3878 . #x7ED9)      ; <CJK>
                 (#x3879 . #x6839)      ; <CJK>
                 (#x387A . #x8DDF)      ; <CJK>
                 (#x387B . #x8015)      ; <CJK>
                 (#x387C . #x66F4)      ; <CJK>
                 (#x387D . #x5E9A)      ; <CJK>
                 (#x387E . #x7FB9)      ; <CJK>
                 (#x3921 . #x57C2)      ; <CJK>
                 (#x3922 . #x803F)      ; <CJK>
                 (#x3923 . #x6897)      ; <CJK>
                 (#x3924 . #x5DE5)      ; <CJK>
                 (#x3925 . #x653B)      ; <CJK>
                 (#x3926 . #x529F)      ; <CJK>
                 (#x3927 . #x606D)      ; <CJK>
                 (#x3928 . #x9F9A)      ; <CJK>
                 (#x3929 . #x4F9B)      ; <CJK>
                 (#x392A . #x8EAC)      ; <CJK>
                 (#x392B . #x516C)      ; <CJK>
                 (#x392C . #x5BAB)      ; <CJK>
                 (#x392D . #x5F13)      ; <CJK>
                 (#x392E . #x5DE9)      ; <CJK>
                 (#x392F . #x6C5E)      ; <CJK>
                 (#x3930 . #x62F1)      ; <CJK>
                 (#x3931 . #x8D21)      ; <CJK>
                 (#x3932 . #x5171)      ; <CJK>
                 (#x3933 . #x94A9)      ; <CJK>
                 (#x3934 . #x52FE)      ; <CJK>
                 (#x3935 . #x6C9F)      ; <CJK>
                 (#x3936 . #x82DF)      ; <CJK>
                 (#x3937 . #x72D7)      ; <CJK>
                 (#x3938 . #x57A2)      ; <CJK>
                 (#x3939 . #x6784)      ; <CJK>
                 (#x393A . #x8D2D)      ; <CJK>
                 (#x393B . #x591F)      ; <CJK>
                 (#x393C . #x8F9C)      ; <CJK>
                 (#x393D . #x83C7)      ; <CJK>
                 (#x393E . #x5495)      ; <CJK>
                 (#x393F . #x7B8D)      ; <CJK>
                 (#x3940 . #x4F30)      ; <CJK>
                 (#x3941 . #x6CBD)      ; <CJK>
                 (#x3942 . #x5B64)      ; <CJK>
                 (#x3943 . #x59D1)      ; <CJK>
                 (#x3944 . #x9F13)      ; <CJK>
                 (#x3945 . #x53E4)      ; <CJK>
                 (#x3946 . #x86CA)      ; <CJK>
                 (#x3947 . #x9AA8)      ; <CJK>
                 (#x3948 . #x8C37)      ; <CJK>
                 (#x3949 . #x80A1)      ; <CJK>
                 (#x394A . #x6545)      ; <CJK>
                 (#x394B . #x987E)      ; <CJK>
                 (#x394C . #x56FA)      ; <CJK>
                 (#x394D . #x96C7)      ; <CJK>
                 (#x394E . #x522E)      ; <CJK>
                 (#x394F . #x74DC)      ; <CJK>
                 (#x3950 . #x5250)      ; <CJK>
                 (#x3951 . #x5BE1)      ; <CJK>
                 (#x3952 . #x6302)      ; <CJK>
                 (#x3953 . #x8902)      ; <CJK>
                 (#x3954 . #x4E56)      ; <CJK>
                 (#x3955 . #x62D0)      ; <CJK>
                 (#x3956 . #x602A)      ; <CJK>
                 (#x3957 . #x68FA)      ; <CJK>
                 (#x3958 . #x5173)      ; <CJK>
                 (#x3959 . #x5B98)      ; <CJK>
                 (#x395A . #x51A0)      ; <CJK>
                 (#x395B . #x89C2)      ; <CJK>
                 (#x395C . #x7BA1)      ; <CJK>
                 (#x395D . #x9986)      ; <CJK>
                 (#x395E . #x7F50)      ; <CJK>
                 (#x395F . #x60EF)      ; <CJK>
                 (#x3960 . #x704C)      ; <CJK>
                 (#x3961 . #x8D2F)      ; <CJK>
                 (#x3962 . #x5149)      ; <CJK>
                 (#x3963 . #x5E7F)      ; <CJK>
                 (#x3964 . #x901B)      ; <CJK>
                 (#x3965 . #x7470)      ; <CJK>
                 (#x3966 . #x89C4)      ; <CJK>
                 (#x3967 . #x572D)      ; <CJK>
                 (#x3968 . #x7845)      ; <CJK>
                 (#x3969 . #x5F52)      ; <CJK>
                 (#x396A . #x9F9F)      ; <CJK>
                 (#x396B . #x95FA)      ; <CJK>
                 (#x396C . #x8F68)      ; <CJK>
                 (#x396D . #x9B3C)      ; <CJK>
                 (#x396E . #x8BE1)      ; <CJK>
                 (#x396F . #x7678)      ; <CJK>
                 (#x3970 . #x6842)      ; <CJK>
                 (#x3971 . #x67DC)      ; <CJK>
                 (#x3972 . #x8DEA)      ; <CJK>
                 (#x3973 . #x8D35)      ; <CJK>
                 (#x3974 . #x523D)      ; <CJK>
                 (#x3975 . #x8F8A)      ; <CJK>
                 (#x3976 . #x6EDA)      ; <CJK>
                 (#x3977 . #x68CD)      ; <CJK>
                 (#x3978 . #x9505)      ; <CJK>
                 (#x3979 . #x90ED)      ; <CJK>
                 (#x397A . #x56FD)      ; <CJK>
                 (#x397B . #x679C)      ; <CJK>
                 (#x397C . #x88F9)      ; <CJK>
                 (#x397D . #x8FC7)      ; <CJK>
                 (#x397E . #x54C8)      ; <CJK>
                 (#x3A21 . #x9AB8)      ; <CJK>
                 (#x3A22 . #x5B69)      ; <CJK>
                 (#x3A23 . #x6D77)      ; <CJK>
                 (#x3A24 . #x6C26)      ; <CJK>
                 (#x3A25 . #x4EA5)      ; <CJK>
                 (#x3A26 . #x5BB3)      ; <CJK>
                 (#x3A27 . #x9A87)      ; <CJK>
                 (#x3A28 . #x9163)      ; <CJK>
                 (#x3A29 . #x61A8)      ; <CJK>
                 (#x3A2A . #x90AF)      ; <CJK>
                 (#x3A2B . #x97E9)      ; <CJK>
                 (#x3A2C . #x542B)      ; <CJK>
                 (#x3A2D . #x6DB5)      ; <CJK>
                 (#x3A2E . #x5BD2)      ; <CJK>
                 (#x3A2F . #x51FD)      ; <CJK>
                 (#x3A30 . #x558A)      ; <CJK>
                 (#x3A31 . #x7F55)      ; <CJK>
                 (#x3A32 . #x7FF0)      ; <CJK>
                 (#x3A33 . #x64BC)      ; <CJK>
                 (#x3A34 . #x634D)      ; <CJK>
                 (#x3A35 . #x65F1)      ; <CJK>
                 (#x3A36 . #x61BE)      ; <CJK>
                 (#x3A37 . #x608D)      ; <CJK>
                 (#x3A38 . #x710A)      ; <CJK>
                 (#x3A39 . #x6C57)      ; <CJK>
                 (#x3A3A . #x6C49)      ; <CJK>
                 (#x3A3B . #x592F)      ; <CJK>
                 (#x3A3C . #x676D)      ; <CJK>
                 (#x3A3D . #x822A)      ; <CJK>
                 (#x3A3E . #x58D5)      ; <CJK>
                 (#x3A3F . #x568E)      ; <CJK>
                 (#x3A40 . #x8C6A)      ; <CJK>
                 (#x3A41 . #x6BEB)      ; <CJK>
                 (#x3A42 . #x90DD)      ; <CJK>
                 (#x3A43 . #x597D)      ; <CJK>
                 (#x3A44 . #x8017)      ; <CJK>
                 (#x3A45 . #x53F7)      ; <CJK>
                 (#x3A46 . #x6D69)      ; <CJK>
                 (#x3A47 . #x5475)      ; <CJK>
                 (#x3A48 . #x559D)      ; <CJK>
                 (#x3A49 . #x8377)      ; <CJK>
                 (#x3A4A . #x83CF)      ; <CJK>
                 (#x3A4B . #x6838)      ; <CJK>
                 (#x3A4C . #x79BE)      ; <CJK>
                 (#x3A4D . #x548C)      ; <CJK>
                 (#x3A4E . #x4F55)      ; <CJK>
                 (#x3A4F . #x5408)      ; <CJK>
                 (#x3A50 . #x76D2)      ; <CJK>
                 (#x3A51 . #x8C89)      ; <CJK>
                 (#x3A52 . #x9602)      ; <CJK>
                 (#x3A53 . #x6CB3)      ; <CJK>
                 (#x3A54 . #x6DB8)      ; <CJK>
                 (#x3A55 . #x8D6B)      ; <CJK>
                 (#x3A56 . #x8910)      ; <CJK>
                 (#x3A57 . #x9E64)      ; <CJK>
                 (#x3A58 . #x8D3A)      ; <CJK>
                 (#x3A59 . #x563F)      ; <CJK>
                 (#x3A5A . #x9ED1)      ; <CJK>
                 (#x3A5B . #x75D5)      ; <CJK>
                 (#x3A5C . #x5F88)      ; <CJK>
                 (#x3A5D . #x72E0)      ; <CJK>
                 (#x3A5E . #x6068)      ; <CJK>
                 (#x3A5F . #x54FC)      ; <CJK>
                 (#x3A60 . #x4EA8)      ; <CJK>
                 (#x3A61 . #x6A2A)      ; <CJK>
                 (#x3A62 . #x8861)      ; <CJK>
                 (#x3A63 . #x6052)      ; <CJK>
                 (#x3A64 . #x8F70)      ; <CJK>
                 (#x3A65 . #x54C4)      ; <CJK>
                 (#x3A66 . #x70D8)      ; <CJK>
                 (#x3A67 . #x8679)      ; <CJK>
                 (#x3A68 . #x9E3F)      ; <CJK>
                 (#x3A69 . #x6D2A)      ; <CJK>
                 (#x3A6A . #x5B8F)      ; <CJK>
                 (#x3A6B . #x5F18)      ; <CJK>
                 (#x3A6C . #x7EA2)      ; <CJK>
                 (#x3A6D . #x5589)      ; <CJK>
                 (#x3A6E . #x4FAF)      ; <CJK>
                 (#x3A6F . #x7334)      ; <CJK>
                 (#x3A70 . #x543C)      ; <CJK>
                 (#x3A71 . #x539A)      ; <CJK>
                 (#x3A72 . #x5019)      ; <CJK>
                 (#x3A73 . #x540E)      ; <CJK>
                 (#x3A74 . #x547C)      ; <CJK>
                 (#x3A75 . #x4E4E)      ; <CJK>
                 (#x3A76 . #x5FFD)      ; <CJK>
                 (#x3A77 . #x745A)      ; <CJK>
                 (#x3A78 . #x58F6)      ; <CJK>
                 (#x3A79 . #x846B)      ; <CJK>
                 (#x3A7A . #x80E1)      ; <CJK>
                 (#x3A7B . #x8774)      ; <CJK>
                 (#x3A7C . #x72D0)      ; <CJK>
                 (#x3A7D . #x7CCA)      ; <CJK>
                 (#x3A7E . #x6E56)      ; <CJK>
                 (#x3B21 . #x5F27)      ; <CJK>
                 (#x3B22 . #x864E)      ; <CJK>
                 (#x3B23 . #x552C)      ; <CJK>
                 (#x3B24 . #x62A4)      ; <CJK>
                 (#x3B25 . #x4E92)      ; <CJK>
                 (#x3B26 . #x6CAA)      ; <CJK>
                 (#x3B27 . #x6237)      ; <CJK>
                 (#x3B28 . #x82B1)      ; <CJK>
                 (#x3B29 . #x54D7)      ; <CJK>
                 (#x3B2A . #x534E)      ; <CJK>
                 (#x3B2B . #x733E)      ; <CJK>
                 (#x3B2C . #x6ED1)      ; <CJK>
                 (#x3B2D . #x753B)      ; <CJK>
                 (#x3B2E . #x5212)      ; <CJK>
                 (#x3B2F . #x5316)      ; <CJK>
                 (#x3B30 . #x8BDD)      ; <CJK>
                 (#x3B31 . #x69D0)      ; <CJK>
                 (#x3B32 . #x5F8A)      ; <CJK>
                 (#x3B33 . #x6000)      ; <CJK>
                 (#x3B34 . #x6DEE)      ; <CJK>
                 (#x3B35 . #x574F)      ; <CJK>
                 (#x3B36 . #x6B22)      ; <CJK>
                 (#x3B37 . #x73AF)      ; <CJK>
                 (#x3B38 . #x6853)      ; <CJK>
                 (#x3B39 . #x8FD8)      ; <CJK>
                 (#x3B3A . #x7F13)      ; <CJK>
                 (#x3B3B . #x6362)      ; <CJK>
                 (#x3B3C . #x60A3)      ; <CJK>
                 (#x3B3D . #x5524)      ; <CJK>
                 (#x3B3E . #x75EA)      ; <CJK>
                 (#x3B3F . #x8C62)      ; <CJK>
                 (#x3B40 . #x7115)      ; <CJK>
                 (#x3B41 . #x6DA3)      ; <CJK>
                 (#x3B42 . #x5BA6)      ; <CJK>
                 (#x3B43 . #x5E7B)      ; <CJK>
                 (#x3B44 . #x8352)      ; <CJK>
                 (#x3B45 . #x614C)      ; <CJK>
                 (#x3B46 . #x9EC4)      ; <CJK>
                 (#x3B47 . #x78FA)      ; <CJK>
                 (#x3B48 . #x8757)      ; <CJK>
                 (#x3B49 . #x7C27)      ; <CJK>
                 (#x3B4A . #x7687)      ; <CJK>
                 (#x3B4B . #x51F0)      ; <CJK>
                 (#x3B4C . #x60F6)      ; <CJK>
                 (#x3B4D . #x714C)      ; <CJK>
                 (#x3B4E . #x6643)      ; <CJK>
                 (#x3B4F . #x5E4C)      ; <CJK>
                 (#x3B50 . #x604D)      ; <CJK>
                 (#x3B51 . #x8C0E)      ; <CJK>
                 (#x3B52 . #x7070)      ; <CJK>
                 (#x3B53 . #x6325)      ; <CJK>
                 (#x3B54 . #x8F89)      ; <CJK>
                 (#x3B55 . #x5FBD)      ; <CJK>
                 (#x3B56 . #x6062)      ; <CJK>
                 (#x3B57 . #x86D4)      ; <CJK>
                 (#x3B58 . #x56DE)      ; <CJK>
                 (#x3B59 . #x6BC1)      ; <CJK>
                 (#x3B5A . #x6094)      ; <CJK>
                 (#x3B5B . #x6167)      ; <CJK>
                 (#x3B5C . #x5349)      ; <CJK>
                 (#x3B5D . #x60E0)      ; <CJK>
                 (#x3B5E . #x6666)      ; <CJK>
                 (#x3B5F . #x8D3F)      ; <CJK>
                 (#x3B60 . #x79FD)      ; <CJK>
                 (#x3B61 . #x4F1A)      ; <CJK>
                 (#x3B62 . #x70E9)      ; <CJK>
                 (#x3B63 . #x6C47)      ; <CJK>
                 (#x3B64 . #x8BB3)      ; <CJK>
                 (#x3B65 . #x8BF2)      ; <CJK>
                 (#x3B66 . #x7ED8)      ; <CJK>
                 (#x3B67 . #x8364)      ; <CJK>
                 (#x3B68 . #x660F)      ; <CJK>
                 (#x3B69 . #x5A5A)      ; <CJK>
                 (#x3B6A . #x9B42)      ; <CJK>
                 (#x3B6B . #x6D51)      ; <CJK>
                 (#x3B6C . #x6DF7)      ; <CJK>
                 (#x3B6D . #x8C41)      ; <CJK>
                 (#x3B6E . #x6D3B)      ; <CJK>
                 (#x3B6F . #x4F19)      ; <CJK>
                 (#x3B70 . #x706B)      ; <CJK>
                 (#x3B71 . #x83B7)      ; <CJK>
                 (#x3B72 . #x6216)      ; <CJK>
                 (#x3B73 . #x60D1)      ; <CJK>
                 (#x3B74 . #x970D)      ; <CJK>
                 (#x3B75 . #x8D27)      ; <CJK>
                 (#x3B76 . #x7978)      ; <CJK>
                 (#x3B77 . #x51FB)      ; <CJK>
                 (#x3B78 . #x573E)      ; <CJK>
                 (#x3B79 . #x57FA)      ; <CJK>
                 (#x3B7A . #x673A)      ; <CJK>
                 (#x3B7B . #x7578)      ; <CJK>
                 (#x3B7C . #x7A3D)      ; <CJK>
                 (#x3B7D . #x79EF)      ; <CJK>
                 (#x3B7E . #x7B95)      ; <CJK>
                 (#x3C21 . #x808C)      ; <CJK>
                 (#x3C22 . #x9965)      ; <CJK>
                 (#x3C23 . #x8FF9)      ; <CJK>
                 (#x3C24 . #x6FC0)      ; <CJK>
                 (#x3C25 . #x8BA5)      ; <CJK>
                 (#x3C26 . #x9E21)      ; <CJK>
                 (#x3C27 . #x59EC)      ; <CJK>
                 (#x3C28 . #x7EE9)      ; <CJK>
                 (#x3C29 . #x7F09)      ; <CJK>
                 (#x3C2A . #x5409)      ; <CJK>
                 (#x3C2B . #x6781)      ; <CJK>
                 (#x3C2C . #x68D8)      ; <CJK>
                 (#x3C2D . #x8F91)      ; <CJK>
                 (#x3C2E . #x7C4D)      ; <CJK>
                 (#x3C2F . #x96C6)      ; <CJK>
                 (#x3C30 . #x53CA)      ; <CJK>
                 (#x3C31 . #x6025)      ; <CJK>
                 (#x3C32 . #x75BE)      ; <CJK>
                 (#x3C33 . #x6C72)      ; <CJK>
                 (#x3C34 . #x5373)      ; <CJK>
                 (#x3C35 . #x5AC9)      ; <CJK>
                 (#x3C36 . #x7EA7)      ; <CJK>
                 (#x3C37 . #x6324)      ; <CJK>
                 (#x3C38 . #x51E0)      ; <CJK>
                 (#x3C39 . #x810A)      ; <CJK>
                 (#x3C3A . #x5DF1)      ; <CJK>
                 (#x3C3B . #x84DF)      ; <CJK>
                 (#x3C3C . #x6280)      ; <CJK>
                 (#x3C3D . #x5180)      ; <CJK>
                 (#x3C3E . #x5B63)      ; <CJK>
                 (#x3C3F . #x4F0E)      ; <CJK>
                 (#x3C40 . #x796D)      ; <CJK>
                 (#x3C41 . #x5242)      ; <CJK>
                 (#x3C42 . #x60B8)      ; <CJK>
                 (#x3C43 . #x6D4E)      ; <CJK>
                 (#x3C44 . #x5BC4)      ; <CJK>
                 (#x3C45 . #x5BC2)      ; <CJK>
                 (#x3C46 . #x8BA1)      ; <CJK>
                 (#x3C47 . #x8BB0)      ; <CJK>
                 (#x3C48 . #x65E2)      ; <CJK>
                 (#x3C49 . #x5FCC)      ; <CJK>
                 (#x3C4A . #x9645)      ; <CJK>
                 (#x3C4B . #x5993)      ; <CJK>
                 (#x3C4C . #x7EE7)      ; <CJK>
                 (#x3C4D . #x7EAA)      ; <CJK>
                 (#x3C4E . #x5609)      ; <CJK>
                 (#x3C4F . #x67B7)      ; <CJK>
                 (#x3C50 . #x5939)      ; <CJK>
                 (#x3C51 . #x4F73)      ; <CJK>
                 (#x3C52 . #x5BB6)      ; <CJK>
                 (#x3C53 . #x52A0)      ; <CJK>
                 (#x3C54 . #x835A)      ; <CJK>
                 (#x3C55 . #x988A)      ; <CJK>
                 (#x3C56 . #x8D3E)      ; <CJK>
                 (#x3C57 . #x7532)      ; <CJK>
                 (#x3C58 . #x94BE)      ; <CJK>
                 (#x3C59 . #x5047)      ; <CJK>
                 (#x3C5A . #x7A3C)      ; <CJK>
                 (#x3C5B . #x4EF7)      ; <CJK>
                 (#x3C5C . #x67B6)      ; <CJK>
                 (#x3C5D . #x9A7E)      ; <CJK>
                 (#x3C5E . #x5AC1)      ; <CJK>
                 (#x3C5F . #x6B7C)      ; <CJK>
                 (#x3C60 . #x76D1)      ; <CJK>
                 (#x3C61 . #x575A)      ; <CJK>
                 (#x3C62 . #x5C16)      ; <CJK>
                 (#x3C63 . #x7B3A)      ; <CJK>
                 (#x3C64 . #x95F4)      ; <CJK>
                 (#x3C65 . #x714E)      ; <CJK>
                 (#x3C66 . #x517C)      ; <CJK>
                 (#x3C67 . #x80A9)      ; <CJK>
                 (#x3C68 . #x8270)      ; <CJK>
                 (#x3C69 . #x5978)      ; <CJK>
                 (#x3C6A . #x7F04)      ; <CJK>
                 (#x3C6B . #x8327)      ; <CJK>
                 (#x3C6C . #x68C0)      ; <CJK>
                 (#x3C6D . #x67EC)      ; <CJK>
                 (#x3C6E . #x78B1)      ; <CJK>
                 (#x3C6F . #x7877)      ; <CJK>
                 (#x3C70 . #x62E3)      ; <CJK>
                 (#x3C71 . #x6361)      ; <CJK>
                 (#x3C72 . #x7B80)      ; <CJK>
                 (#x3C73 . #x4FED)      ; <CJK>
                 (#x3C74 . #x526A)      ; <CJK>
                 (#x3C75 . #x51CF)      ; <CJK>
                 (#x3C76 . #x8350)      ; <CJK>
                 (#x3C77 . #x69DB)      ; <CJK>
                 (#x3C78 . #x9274)      ; <CJK>
                 (#x3C79 . #x8DF5)      ; <CJK>
                 (#x3C7A . #x8D31)      ; <CJK>
                 (#x3C7B . #x89C1)      ; <CJK>
                 (#x3C7C . #x952E)      ; <CJK>
                 (#x3C7D . #x7BAD)      ; <CJK>
                 (#x3C7E . #x4EF6)      ; <CJK>
                 (#x3D21 . #x5065)      ; <CJK>
                 (#x3D22 . #x8230)      ; <CJK>
                 (#x3D23 . #x5251)      ; <CJK>
                 (#x3D24 . #x996F)      ; <CJK>
                 (#x3D25 . #x6E10)      ; <CJK>
                 (#x3D26 . #x6E85)      ; <CJK>
                 (#x3D27 . #x6DA7)      ; <CJK>
                 (#x3D28 . #x5EFA)      ; <CJK>
                 (#x3D29 . #x50F5)      ; <CJK>
                 (#x3D2A . #x59DC)      ; <CJK>
                 (#x3D2B . #x5C06)      ; <CJK>
                 (#x3D2C . #x6D46)      ; <CJK>
                 (#x3D2D . #x6C5F)      ; <CJK>
                 (#x3D2E . #x7586)      ; <CJK>
                 (#x3D2F . #x848B)      ; <CJK>
                 (#x3D30 . #x6868)      ; <CJK>
                 (#x3D31 . #x5956)      ; <CJK>
                 (#x3D32 . #x8BB2)      ; <CJK>
                 (#x3D33 . #x5320)      ; <CJK>
                 (#x3D34 . #x9171)      ; <CJK>
                 (#x3D35 . #x964D)      ; <CJK>
                 (#x3D36 . #x8549)      ; <CJK>
                 (#x3D37 . #x6912)      ; <CJK>
                 (#x3D38 . #x7901)      ; <CJK>
                 (#x3D39 . #x7126)      ; <CJK>
                 (#x3D3A . #x80F6)      ; <CJK>
                 (#x3D3B . #x4EA4)      ; <CJK>
                 (#x3D3C . #x90CA)      ; <CJK>
                 (#x3D3D . #x6D47)      ; <CJK>
                 (#x3D3E . #x9A84)      ; <CJK>
                 (#x3D3F . #x5A07)      ; <CJK>
                 (#x3D40 . #x56BC)      ; <CJK>
                 (#x3D41 . #x6405)      ; <CJK>
                 (#x3D42 . #x94F0)      ; <CJK>
                 (#x3D43 . #x77EB)      ; <CJK>
                 (#x3D44 . #x4FA5)      ; <CJK>
                 (#x3D45 . #x811A)      ; <CJK>
                 (#x3D46 . #x72E1)      ; <CJK>
                 (#x3D47 . #x89D2)      ; <CJK>
                 (#x3D48 . #x997A)      ; <CJK>
                 (#x3D49 . #x7F34)      ; <CJK>
                 (#x3D4A . #x7EDE)      ; <CJK>
                 (#x3D4B . #x527F)      ; <CJK>
                 (#x3D4C . #x6559)      ; <CJK>
                 (#x3D4D . #x9175)      ; <CJK>
                 (#x3D4E . #x8F7F)      ; <CJK>
                 (#x3D4F . #x8F83)      ; <CJK>
                 (#x3D50 . #x53EB)      ; <CJK>
                 (#x3D51 . #x7A96)      ; <CJK>
                 (#x3D52 . #x63ED)      ; <CJK>
                 (#x3D53 . #x63A5)      ; <CJK>
                 (#x3D54 . #x7686)      ; <CJK>
                 (#x3D55 . #x79F8)      ; <CJK>
                 (#x3D56 . #x8857)      ; <CJK>
                 (#x3D57 . #x9636)      ; <CJK>
                 (#x3D58 . #x622A)      ; <CJK>
                 (#x3D59 . #x52AB)      ; <CJK>
                 (#x3D5A . #x8282)      ; <CJK>
                 (#x3D5B . #x6854)      ; <CJK>
                 (#x3D5C . #x6770)      ; <CJK>
                 (#x3D5D . #x6377)      ; <CJK>
                 (#x3D5E . #x776B)      ; <CJK>
                 (#x3D5F . #x7AED)      ; <CJK>
                 (#x3D60 . #x6D01)      ; <CJK>
                 (#x3D61 . #x7ED3)      ; <CJK>
                 (#x3D62 . #x89E3)      ; <CJK>
                 (#x3D63 . #x59D0)      ; <CJK>
                 (#x3D64 . #x6212)      ; <CJK>
                 (#x3D65 . #x85C9)      ; <CJK>
                 (#x3D66 . #x82A5)      ; <CJK>
                 (#x3D67 . #x754C)      ; <CJK>
                 (#x3D68 . #x501F)      ; <CJK>
                 (#x3D69 . #x4ECB)      ; <CJK>
                 (#x3D6A . #x75A5)      ; <CJK>
                 (#x3D6B . #x8BEB)      ; <CJK>
                 (#x3D6C . #x5C4A)      ; <CJK>
                 (#x3D6D . #x5DFE)      ; <CJK>
                 (#x3D6E . #x7B4B)      ; <CJK>
                 (#x3D6F . #x65A4)      ; <CJK>
                 (#x3D70 . #x91D1)      ; <CJK>
                 (#x3D71 . #x4ECA)      ; <CJK>
                 (#x3D72 . #x6D25)      ; <CJK>
                 (#x3D73 . #x895F)      ; <CJK>
                 (#x3D74 . #x7D27)      ; <CJK>
                 (#x3D75 . #x9526)      ; <CJK>
                 (#x3D76 . #x4EC5)      ; <CJK>
                 (#x3D77 . #x8C28)      ; <CJK>
                 (#x3D78 . #x8FDB)      ; <CJK>
                 (#x3D79 . #x9773)      ; <CJK>
                 (#x3D7A . #x664B)      ; <CJK>
                 (#x3D7B . #x7981)      ; <CJK>
                 (#x3D7C . #x8FD1)      ; <CJK>
                 (#x3D7D . #x70EC)      ; <CJK>
                 (#x3D7E . #x6D78)      ; <CJK>
                 (#x3E21 . #x5C3D)      ; <CJK>
                 (#x3E22 . #x52B2)      ; <CJK>
                 (#x3E23 . #x8346)      ; <CJK>
                 (#x3E24 . #x5162)      ; <CJK>
                 (#x3E25 . #x830E)      ; <CJK>
                 (#x3E26 . #x775B)      ; <CJK>
                 (#x3E27 . #x6676)      ; <CJK>
                 (#x3E28 . #x9CB8)      ; <CJK>
                 (#x3E29 . #x4EAC)      ; <CJK>
                 (#x3E2A . #x60CA)      ; <CJK>
                 (#x3E2B . #x7CBE)      ; <CJK>
                 (#x3E2C . #x7CB3)      ; <CJK>
                 (#x3E2D . #x7ECF)      ; <CJK>
                 (#x3E2E . #x4E95)      ; <CJK>
                 (#x3E2F . #x8B66)      ; <CJK>
                 (#x3E30 . #x666F)      ; <CJK>
                 (#x3E31 . #x9888)      ; <CJK>
                 (#x3E32 . #x9759)      ; <CJK>
                 (#x3E33 . #x5883)      ; <CJK>
                 (#x3E34 . #x656C)      ; <CJK>
                 (#x3E35 . #x955C)      ; <CJK>
                 (#x3E36 . #x5F84)      ; <CJK>
                 (#x3E37 . #x75C9)      ; <CJK>
                 (#x3E38 . #x9756)      ; <CJK>
                 (#x3E39 . #x7ADF)      ; <CJK>
                 (#x3E3A . #x7ADE)      ; <CJK>
                 (#x3E3B . #x51C0)      ; <CJK>
                 (#x3E3C . #x70AF)      ; <CJK>
                 (#x3E3D . #x7A98)      ; <CJK>
                 (#x3E3E . #x63EA)      ; <CJK>
                 (#x3E3F . #x7A76)      ; <CJK>
                 (#x3E40 . #x7EA0)      ; <CJK>
                 (#x3E41 . #x7396)      ; <CJK>
                 (#x3E42 . #x97ED)      ; <CJK>
                 (#x3E43 . #x4E45)      ; <CJK>
                 (#x3E44 . #x7078)      ; <CJK>
                 (#x3E45 . #x4E5D)      ; <CJK>
                 (#x3E46 . #x9152)      ; <CJK>
                 (#x3E47 . #x53A9)      ; <CJK>
                 (#x3E48 . #x6551)      ; <CJK>
                 (#x3E49 . #x65E7)      ; <CJK>
                 (#x3E4A . #x81FC)      ; <CJK>
                 (#x3E4B . #x8205)      ; <CJK>
                 (#x3E4C . #x548E)      ; <CJK>
                 (#x3E4D . #x5C31)      ; <CJK>
                 (#x3E4E . #x759A)      ; <CJK>
                 (#x3E4F . #x97A0)      ; <CJK>
                 (#x3E50 . #x62D8)      ; <CJK>
                 (#x3E51 . #x72D9)      ; <CJK>
                 (#x3E52 . #x75BD)      ; <CJK>
                 (#x3E53 . #x5C45)      ; <CJK>
                 (#x3E54 . #x9A79)      ; <CJK>
                 (#x3E55 . #x83CA)      ; <CJK>
                 (#x3E56 . #x5C40)      ; <CJK>
                 (#x3E57 . #x5480)      ; <CJK>
                 (#x3E58 . #x77E9)      ; <CJK>
                 (#x3E59 . #x4E3E)      ; <CJK>
                 (#x3E5A . #x6CAE)      ; <CJK>
                 (#x3E5B . #x805A)      ; <CJK>
                 (#x3E5C . #x62D2)      ; <CJK>
                 (#x3E5D . #x636E)      ; <CJK>
                 (#x3E5E . #x5DE8)      ; <CJK>
                 (#x3E5F . #x5177)      ; <CJK>
                 (#x3E60 . #x8DDD)      ; <CJK>
                 (#x3E61 . #x8E1E)      ; <CJK>
                 (#x3E62 . #x952F)      ; <CJK>
                 (#x3E63 . #x4FF1)      ; <CJK>
                 (#x3E64 . #x53E5)      ; <CJK>
                 (#x3E65 . #x60E7)      ; <CJK>
                 (#x3E66 . #x70AC)      ; <CJK>
                 (#x3E67 . #x5267)      ; <CJK>
                 (#x3E68 . #x6350)      ; <CJK>
                 (#x3E69 . #x9E43)      ; <CJK>
                 (#x3E6A . #x5A1F)      ; <CJK>
                 (#x3E6B . #x5026)      ; <CJK>
                 (#x3E6C . #x7737)      ; <CJK>
                 (#x3E6D . #x5377)      ; <CJK>
                 (#x3E6E . #x7EE2)      ; <CJK>
                 (#x3E6F . #x6485)      ; <CJK>
                 (#x3E70 . #x652B)      ; <CJK>
                 (#x3E71 . #x6289)      ; <CJK>
                 (#x3E72 . #x6398)      ; <CJK>
                 (#x3E73 . #x5014)      ; <CJK>
                 (#x3E74 . #x7235)      ; <CJK>
                 (#x3E75 . #x89C9)      ; <CJK>
                 (#x3E76 . #x51B3)      ; <CJK>
                 (#x3E77 . #x8BC0)      ; <CJK>
                 (#x3E78 . #x7EDD)      ; <CJK>
                 (#x3E79 . #x5747)      ; <CJK>
                 (#x3E7A . #x83CC)      ; <CJK>
                 (#x3E7B . #x94A7)      ; <CJK>
                 (#x3E7C . #x519B)      ; <CJK>
                 (#x3E7D . #x541B)      ; <CJK>
                 (#x3E7E . #x5CFB)      ; <CJK>
                 (#x3F21 . #x4FCA)      ; <CJK>
                 (#x3F22 . #x7AE3)      ; <CJK>
                 (#x3F23 . #x6D5A)      ; <CJK>
                 (#x3F24 . #x90E1)      ; <CJK>
                 (#x3F25 . #x9A8F)      ; <CJK>
                 (#x3F26 . #x5580)      ; <CJK>
                 (#x3F27 . #x5496)      ; <CJK>
                 (#x3F28 . #x5361)      ; <CJK>
                 (#x3F29 . #x54AF)      ; <CJK>
                 (#x3F2A . #x5F00)      ; <CJK>
                 (#x3F2B . #x63E9)      ; <CJK>
                 (#x3F2C . #x6977)      ; <CJK>
                 (#x3F2D . #x51EF)      ; <CJK>
                 (#x3F2E . #x6168)      ; <CJK>
                 (#x3F2F . #x520A)      ; <CJK>
                 (#x3F30 . #x582A)      ; <CJK>
                 (#x3F31 . #x52D8)      ; <CJK>
                 (#x3F32 . #x574E)      ; <CJK>
                 (#x3F33 . #x780D)      ; <CJK>
                 (#x3F34 . #x770B)      ; <CJK>
                 (#x3F35 . #x5EB7)      ; <CJK>
                 (#x3F36 . #x6177)      ; <CJK>
                 (#x3F37 . #x7CE0)      ; <CJK>
                 (#x3F38 . #x625B)      ; <CJK>
                 (#x3F39 . #x6297)      ; <CJK>
                 (#x3F3A . #x4EA2)      ; <CJK>
                 (#x3F3B . #x7095)      ; <CJK>
                 (#x3F3C . #x8003)      ; <CJK>
                 (#x3F3D . #x62F7)      ; <CJK>
                 (#x3F3E . #x70E4)      ; <CJK>
                 (#x3F3F . #x9760)      ; <CJK>
                 (#x3F40 . #x5777)      ; <CJK>
                 (#x3F41 . #x82DB)      ; <CJK>
                 (#x3F42 . #x67EF)      ; <CJK>
                 (#x3F43 . #x68F5)      ; <CJK>
                 (#x3F44 . #x78D5)      ; <CJK>
                 (#x3F45 . #x9897)      ; <CJK>
                 (#x3F46 . #x79D1)      ; <CJK>
                 (#x3F47 . #x58F3)      ; <CJK>
                 (#x3F48 . #x54B3)      ; <CJK>
                 (#x3F49 . #x53EF)      ; <CJK>
                 (#x3F4A . #x6E34)      ; <CJK>
                 (#x3F4B . #x514B)      ; <CJK>
                 (#x3F4C . #x523B)      ; <CJK>
                 (#x3F4D . #x5BA2)      ; <CJK>
                 (#x3F4E . #x8BFE)      ; <CJK>
                 (#x3F4F . #x80AF)      ; <CJK>
                 (#x3F50 . #x5543)      ; <CJK>
                 (#x3F51 . #x57A6)      ; <CJK>
                 (#x3F52 . #x6073)      ; <CJK>
                 (#x3F53 . #x5751)      ; <CJK>
                 (#x3F54 . #x542D)      ; <CJK>
                 (#x3F55 . #x7A7A)      ; <CJK>
                 (#x3F56 . #x6050)      ; <CJK>
                 (#x3F57 . #x5B54)      ; <CJK>
                 (#x3F58 . #x63A7)      ; <CJK>
                 (#x3F59 . #x62A0)      ; <CJK>
                 (#x3F5A . #x53E3)      ; <CJK>
                 (#x3F5B . #x6263)      ; <CJK>
                 (#x3F5C . #x5BC7)      ; <CJK>
                 (#x3F5D . #x67AF)      ; <CJK>
                 (#x3F5E . #x54ED)      ; <CJK>
                 (#x3F5F . #x7A9F)      ; <CJK>
                 (#x3F60 . #x82E6)      ; <CJK>
                 (#x3F61 . #x9177)      ; <CJK>
                 (#x3F62 . #x5E93)      ; <CJK>
                 (#x3F63 . #x88E4)      ; <CJK>
                 (#x3F64 . #x5938)      ; <CJK>
                 (#x3F65 . #x57AE)      ; <CJK>
                 (#x3F66 . #x630E)      ; <CJK>
                 (#x3F67 . #x8DE8)      ; <CJK>
                 (#x3F68 . #x80EF)      ; <CJK>
                 (#x3F69 . #x5757)      ; <CJK>
                 (#x3F6A . #x7B77)      ; <CJK>
                 (#x3F6B . #x4FA9)      ; <CJK>
                 (#x3F6C . #x5FEB)      ; <CJK>
                 (#x3F6D . #x5BBD)      ; <CJK>
                 (#x3F6E . #x6B3E)      ; <CJK>
                 (#x3F6F . #x5321)      ; <CJK>
                 (#x3F70 . #x7B50)      ; <CJK>
                 (#x3F71 . #x72C2)      ; <CJK>
                 (#x3F72 . #x6846)      ; <CJK>
                 (#x3F73 . #x77FF)      ; <CJK>
                 (#x3F74 . #x7736)      ; <CJK>
                 (#x3F75 . #x65F7)      ; <CJK>
                 (#x3F76 . #x51B5)      ; <CJK>
                 (#x3F77 . #x4E8F)      ; <CJK>
                 (#x3F78 . #x76D4)      ; <CJK>
                 (#x3F79 . #x5CBF)      ; <CJK>
                 (#x3F7A . #x7AA5)      ; <CJK>
                 (#x3F7B . #x8475)      ; <CJK>
                 (#x3F7C . #x594E)      ; <CJK>
                 (#x3F7D . #x9B41)      ; <CJK>
                 (#x3F7E . #x5080)      ; <CJK>
                 (#x4021 . #x9988)      ; <CJK>
                 (#x4022 . #x6127)      ; <CJK>
                 (#x4023 . #x6E83)      ; <CJK>
                 (#x4024 . #x5764)      ; <CJK>
                 (#x4025 . #x6606)      ; <CJK>
                 (#x4026 . #x6346)      ; <CJK>
                 (#x4027 . #x56F0)      ; <CJK>
                 (#x4028 . #x62EC)      ; <CJK>
                 (#x4029 . #x6269)      ; <CJK>
                 (#x402A . #x5ED3)      ; <CJK>
                 (#x402B . #x9614)      ; <CJK>
                 (#x402C . #x5783)      ; <CJK>
                 (#x402D . #x62C9)      ; <CJK>
                 (#x402E . #x5587)      ; <CJK>
                 (#x402F . #x8721)      ; <CJK>
                 (#x4030 . #x814A)      ; <CJK>
                 (#x4031 . #x8FA3)      ; <CJK>
                 (#x4032 . #x5566)      ; <CJK>
                 (#x4033 . #x83B1)      ; <CJK>
                 (#x4034 . #x6765)      ; <CJK>
                 (#x4035 . #x8D56)      ; <CJK>
                 (#x4036 . #x84DD)      ; <CJK>
                 (#x4037 . #x5A6A)      ; <CJK>
                 (#x4038 . #x680F)      ; <CJK>
                 (#x4039 . #x62E6)      ; <CJK>
                 (#x403A . #x7BEE)      ; <CJK>
                 (#x403B . #x9611)      ; <CJK>
                 (#x403C . #x5170)      ; <CJK>
                 (#x403D . #x6F9C)      ; <CJK>
                 (#x403E . #x8C30)      ; <CJK>
                 (#x403F . #x63FD)      ; <CJK>
                 (#x4040 . #x89C8)      ; <CJK>
                 (#x4041 . #x61D2)      ; <CJK>
                 (#x4042 . #x7F06)      ; <CJK>
                 (#x4043 . #x70C2)      ; <CJK>
                 (#x4044 . #x6EE5)      ; <CJK>
                 (#x4045 . #x7405)      ; <CJK>
                 (#x4046 . #x6994)      ; <CJK>
                 (#x4047 . #x72FC)      ; <CJK>
                 (#x4048 . #x5ECA)      ; <CJK>
                 (#x4049 . #x90CE)      ; <CJK>
                 (#x404A . #x6717)      ; <CJK>
                 (#x404B . #x6D6A)      ; <CJK>
                 (#x404C . #x635E)      ; <CJK>
                 (#x404D . #x52B3)      ; <CJK>
                 (#x404E . #x7262)      ; <CJK>
                 (#x404F . #x8001)      ; <CJK>
                 (#x4050 . #x4F6C)      ; <CJK>
                 (#x4051 . #x59E5)      ; <CJK>
                 (#x4052 . #x916A)      ; <CJK>
                 (#x4053 . #x70D9)      ; <CJK>
                 (#x4054 . #x6D9D)      ; <CJK>
                 (#x4055 . #x52D2)      ; <CJK>
                 (#x4056 . #x4E50)      ; <CJK>
                 (#x4057 . #x96F7)      ; <CJK>
                 (#x4058 . #x956D)      ; <CJK>
                 (#x4059 . #x857E)      ; <CJK>
                 (#x405A . #x78CA)      ; <CJK>
                 (#x405B . #x7D2F)      ; <CJK>
                 (#x405C . #x5121)      ; <CJK>
                 (#x405D . #x5792)      ; <CJK>
                 (#x405E . #x64C2)      ; <CJK>
                 (#x405F . #x808B)      ; <CJK>
                 (#x4060 . #x7C7B)      ; <CJK>
                 (#x4061 . #x6CEA)      ; <CJK>
                 (#x4062 . #x68F1)      ; <CJK>
                 (#x4063 . #x695E)      ; <CJK>
                 (#x4064 . #x51B7)      ; <CJK>
                 (#x4065 . #x5398)      ; <CJK>
                 (#x4066 . #x68A8)      ; <CJK>
                 (#x4067 . #x7281)      ; <CJK>
                 (#x4068 . #x9ECE)      ; <CJK>
                 (#x4069 . #x7BF1)      ; <CJK>
                 (#x406A . #x72F8)      ; <CJK>
                 (#x406B . #x79BB)      ; <CJK>
                 (#x406C . #x6F13)      ; <CJK>
                 (#x406D . #x7406)      ; <CJK>
                 (#x406E . #x674E)      ; <CJK>
                 (#x406F . #x91CC)      ; <CJK>
                 (#x4070 . #x9CA4)      ; <CJK>
                 (#x4071 . #x793C)      ; <CJK>
                 (#x4072 . #x8389)      ; <CJK>
                 (#x4073 . #x8354)      ; <CJK>
                 (#x4074 . #x540F)      ; <CJK>
                 (#x4075 . #x6817)      ; <CJK>
                 (#x4076 . #x4E3D)      ; <CJK>
                 (#x4077 . #x5389)      ; <CJK>
                 (#x4078 . #x52B1)      ; <CJK>
                 (#x4079 . #x783E)      ; <CJK>
                 (#x407A . #x5386)      ; <CJK>
                 (#x407B . #x5229)      ; <CJK>
                 (#x407C . #x5088)      ; <CJK>
                 (#x407D . #x4F8B)      ; <CJK>
                 (#x407E . #x4FD0)      ; <CJK>
                 (#x4121 . #x75E2)      ; <CJK>
                 (#x4122 . #x7ACB)      ; <CJK>
                 (#x4123 . #x7C92)      ; <CJK>
                 (#x4124 . #x6CA5)      ; <CJK>
                 (#x4125 . #x96B6)      ; <CJK>
                 (#x4126 . #x529B)      ; <CJK>
                 (#x4127 . #x7483)      ; <CJK>
                 (#x4128 . #x54E9)      ; <CJK>
                 (#x4129 . #x4FE9)      ; <CJK>
                 (#x412A . #x8054)      ; <CJK>
                 (#x412B . #x83B2)      ; <CJK>
                 (#x412C . #x8FDE)      ; <CJK>
                 (#x412D . #x9570)      ; <CJK>
                 (#x412E . #x5EC9)      ; <CJK>
                 (#x412F . #x601C)      ; <CJK>
                 (#x4130 . #x6D9F)      ; <CJK>
                 (#x4131 . #x5E18)      ; <CJK>
                 (#x4132 . #x655B)      ; <CJK>
                 (#x4133 . #x8138)      ; <CJK>
                 (#x4134 . #x94FE)      ; <CJK>
                 (#x4135 . #x604B)      ; <CJK>
                 (#x4136 . #x70BC)      ; <CJK>
                 (#x4137 . #x7EC3)      ; <CJK>
                 (#x4138 . #x7CAE)      ; <CJK>
                 (#x4139 . #x51C9)      ; <CJK>
                 (#x413A . #x6881)      ; <CJK>
                 (#x413B . #x7CB1)      ; <CJK>
                 (#x413C . #x826F)      ; <CJK>
                 (#x413D . #x4E24)      ; <CJK>
                 (#x413E . #x8F86)      ; <CJK>
                 (#x413F . #x91CF)      ; <CJK>
                 (#x4140 . #x667E)      ; <CJK>
                 (#x4141 . #x4EAE)      ; <CJK>
                 (#x4142 . #x8C05)      ; <CJK>
                 (#x4143 . #x64A9)      ; <CJK>
                 (#x4144 . #x804A)      ; <CJK>
                 (#x4145 . #x50DA)      ; <CJK>
                 (#x4146 . #x7597)      ; <CJK>
                 (#x4147 . #x71CE)      ; <CJK>
                 (#x4148 . #x5BE5)      ; <CJK>
                 (#x4149 . #x8FBD)      ; <CJK>
                 (#x414A . #x6F66)      ; <CJK>
                 (#x414B . #x4E86)      ; <CJK>
                 (#x414C . #x6482)      ; <CJK>
                 (#x414D . #x9563)      ; <CJK>
                 (#x414E . #x5ED6)      ; <CJK>
                 (#x414F . #x6599)      ; <CJK>
                 (#x4150 . #x5217)      ; <CJK>
                 (#x4151 . #x88C2)      ; <CJK>
                 (#x4152 . #x70C8)      ; <CJK>
                 (#x4153 . #x52A3)      ; <CJK>
                 (#x4154 . #x730E)      ; <CJK>
                 (#x4155 . #x7433)      ; <CJK>
                 (#x4156 . #x6797)      ; <CJK>
                 (#x4157 . #x78F7)      ; <CJK>
                 (#x4158 . #x9716)      ; <CJK>
                 (#x4159 . #x4E34)      ; <CJK>
                 (#x415A . #x90BB)      ; <CJK>
                 (#x415B . #x9CDE)      ; <CJK>
                 (#x415C . #x6DCB)      ; <CJK>
                 (#x415D . #x51DB)      ; <CJK>
                 (#x415E . #x8D41)      ; <CJK>
                 (#x415F . #x541D)      ; <CJK>
                 (#x4160 . #x62CE)      ; <CJK>
                 (#x4161 . #x73B2)      ; <CJK>
                 (#x4162 . #x83F1)      ; <CJK>
                 (#x4163 . #x96F6)      ; <CJK>
                 (#x4164 . #x9F84)      ; <CJK>
                 (#x4165 . #x94C3)      ; <CJK>
                 (#x4166 . #x4F36)      ; <CJK>
                 (#x4167 . #x7F9A)      ; <CJK>
                 (#x4168 . #x51CC)      ; <CJK>
                 (#x4169 . #x7075)      ; <CJK>
                 (#x416A . #x9675)      ; <CJK>
                 (#x416B . #x5CAD)      ; <CJK>
                 (#x416C . #x9886)      ; <CJK>
                 (#x416D . #x53E6)      ; <CJK>
                 (#x416E . #x4EE4)      ; <CJK>
                 (#x416F . #x6E9C)      ; <CJK>
                 (#x4170 . #x7409)      ; <CJK>
                 (#x4171 . #x69B4)      ; <CJK>
                 (#x4172 . #x786B)      ; <CJK>
                 (#x4173 . #x998F)      ; <CJK>
                 (#x4174 . #x7559)      ; <CJK>
                 (#x4175 . #x5218)      ; <CJK>
                 (#x4176 . #x7624)      ; <CJK>
                 (#x4177 . #x6D41)      ; <CJK>
                 (#x4178 . #x67F3)      ; <CJK>
                 (#x4179 . #x516D)      ; <CJK>
                 (#x417A . #x9F99)      ; <CJK>
                 (#x417B . #x804B)      ; <CJK>
                 (#x417C . #x5499)      ; <CJK>
                 (#x417D . #x7B3C)      ; <CJK>
                 (#x417E . #x7ABF)      ; <CJK>
                 (#x4221 . #x9686)      ; <CJK>
                 (#x4222 . #x5784)      ; <CJK>
                 (#x4223 . #x62E2)      ; <CJK>
                 (#x4224 . #x9647)      ; <CJK>
                 (#x4225 . #x697C)      ; <CJK>
                 (#x4226 . #x5A04)      ; <CJK>
                 (#x4227 . #x6402)      ; <CJK>
                 (#x4228 . #x7BD3)      ; <CJK>
                 (#x4229 . #x6F0F)      ; <CJK>
                 (#x422A . #x964B)      ; <CJK>
                 (#x422B . #x82A6)      ; <CJK>
                 (#x422C . #x5362)      ; <CJK>
                 (#x422D . #x9885)      ; <CJK>
                 (#x422E . #x5E90)      ; <CJK>
                 (#x422F . #x7089)      ; <CJK>
                 (#x4230 . #x63B3)      ; <CJK>
                 (#x4231 . #x5364)      ; <CJK>
                 (#x4232 . #x864F)      ; <CJK>
                 (#x4233 . #x9C81)      ; <CJK>
                 (#x4234 . #x9E93)      ; <CJK>
                 (#x4235 . #x788C)      ; <CJK>
                 (#x4236 . #x9732)      ; <CJK>
                 (#x4237 . #x8DEF)      ; <CJK>
                 (#x4238 . #x8D42)      ; <CJK>
                 (#x4239 . #x9E7F)      ; <CJK>
                 (#x423A . #x6F5E)      ; <CJK>
                 (#x423B . #x7984)      ; <CJK>
                 (#x423C . #x5F55)      ; <CJK>
                 (#x423D . #x9646)      ; <CJK>
                 (#x423E . #x622E)      ; <CJK>
                 (#x423F . #x9A74)      ; <CJK>
                 (#x4240 . #x5415)      ; <CJK>
                 (#x4241 . #x94DD)      ; <CJK>
                 (#x4242 . #x4FA3)      ; <CJK>
                 (#x4243 . #x65C5)      ; <CJK>
                 (#x4244 . #x5C65)      ; <CJK>
                 (#x4245 . #x5C61)      ; <CJK>
                 (#x4246 . #x7F15)      ; <CJK>
                 (#x4247 . #x8651)      ; <CJK>
                 (#x4248 . #x6C2F)      ; <CJK>
                 (#x4249 . #x5F8B)      ; <CJK>
                 (#x424A . #x7387)      ; <CJK>
                 (#x424B . #x6EE4)      ; <CJK>
                 (#x424C . #x7EFF)      ; <CJK>
                 (#x424D . #x5CE6)      ; <CJK>
                 (#x424E . #x631B)      ; <CJK>
                 (#x424F . #x5B6A)      ; <CJK>
                 (#x4250 . #x6EE6)      ; <CJK>
                 (#x4251 . #x5375)      ; <CJK>
                 (#x4252 . #x4E71)      ; <CJK>
                 (#x4253 . #x63A0)      ; <CJK>
                 (#x4254 . #x7565)      ; <CJK>
                 (#x4255 . #x62A1)      ; <CJK>
                 (#x4256 . #x8F6E)      ; <CJK>
                 (#x4257 . #x4F26)      ; <CJK>
                 (#x4258 . #x4ED1)      ; <CJK>
                 (#x4259 . #x6CA6)      ; <CJK>
                 (#x425A . #x7EB6)      ; <CJK>
                 (#x425B . #x8BBA)      ; <CJK>
                 (#x425C . #x841D)      ; <CJK>
                 (#x425D . #x87BA)      ; <CJK>
                 (#x425E . #x7F57)      ; <CJK>
                 (#x425F . #x903B)      ; <CJK>
                 (#x4260 . #x9523)      ; <CJK>
                 (#x4261 . #x7BA9)      ; <CJK>
                 (#x4262 . #x9AA1)      ; <CJK>
                 (#x4263 . #x88F8)      ; <CJK>
                 (#x4264 . #x843D)      ; <CJK>
                 (#x4265 . #x6D1B)      ; <CJK>
                 (#x4266 . #x9A86)      ; <CJK>
                 (#x4267 . #x7EDC)      ; <CJK>
                 (#x4268 . #x5988)      ; <CJK>
                 (#x4269 . #x9EBB)      ; <CJK>
                 (#x426A . #x739B)      ; <CJK>
                 (#x426B . #x7801)      ; <CJK>
                 (#x426C . #x8682)      ; <CJK>
                 (#x426D . #x9A6C)      ; <CJK>
                 (#x426E . #x9A82)      ; <CJK>
                 (#x426F . #x561B)      ; <CJK>
                 (#x4270 . #x5417)      ; <CJK>
                 (#x4271 . #x57CB)      ; <CJK>
                 (#x4272 . #x4E70)      ; <CJK>
                 (#x4273 . #x9EA6)      ; <CJK>
                 (#x4274 . #x5356)      ; <CJK>
                 (#x4275 . #x8FC8)      ; <CJK>
                 (#x4276 . #x8109)      ; <CJK>
                 (#x4277 . #x7792)      ; <CJK>
                 (#x4278 . #x9992)      ; <CJK>
                 (#x4279 . #x86EE)      ; <CJK>
                 (#x427A . #x6EE1)      ; <CJK>
                 (#x427B . #x8513)      ; <CJK>
                 (#x427C . #x66FC)      ; <CJK>
                 (#x427D . #x6162)      ; <CJK>
                 (#x427E . #x6F2B)      ; <CJK>
                 (#x4321 . #x8C29)      ; <CJK>
                 (#x4322 . #x8292)      ; <CJK>
                 (#x4323 . #x832B)      ; <CJK>
                 (#x4324 . #x76F2)      ; <CJK>
                 (#x4325 . #x6C13)      ; <CJK>
                 (#x4326 . #x5FD9)      ; <CJK>
                 (#x4327 . #x83BD)      ; <CJK>
                 (#x4328 . #x732B)      ; <CJK>
                 (#x4329 . #x8305)      ; <CJK>
                 (#x432A . #x951A)      ; <CJK>
                 (#x432B . #x6BDB)      ; <CJK>
                 (#x432C . #x77DB)      ; <CJK>
                 (#x432D . #x94C6)      ; <CJK>
                 (#x432E . #x536F)      ; <CJK>
                 (#x432F . #x8302)      ; <CJK>
                 (#x4330 . #x5192)      ; <CJK>
                 (#x4331 . #x5E3D)      ; <CJK>
                 (#x4332 . #x8C8C)      ; <CJK>
                 (#x4333 . #x8D38)      ; <CJK>
                 (#x4334 . #x4E48)      ; <CJK>
                 (#x4335 . #x73AB)      ; <CJK>
                 (#x4336 . #x679A)      ; <CJK>
                 (#x4337 . #x6885)      ; <CJK>
                 (#x4338 . #x9176)      ; <CJK>
                 (#x4339 . #x9709)      ; <CJK>
                 (#x433A . #x7164)      ; <CJK>
                 (#x433B . #x6CA1)      ; <CJK>
                 (#x433C . #x7709)      ; <CJK>
                 (#x433D . #x5A92)      ; <CJK>
                 (#x433E . #x9541)      ; <CJK>
                 (#x433F . #x6BCF)      ; <CJK>
                 (#x4340 . #x7F8E)      ; <CJK>
                 (#x4341 . #x6627)      ; <CJK>
                 (#x4342 . #x5BD0)      ; <CJK>
                 (#x4343 . #x59B9)      ; <CJK>
                 (#x4344 . #x5A9A)      ; <CJK>
                 (#x4345 . #x95E8)      ; <CJK>
                 (#x4346 . #x95F7)      ; <CJK>
                 (#x4347 . #x4EEC)      ; <CJK>
                 (#x4348 . #x840C)      ; <CJK>
                 (#x4349 . #x8499)      ; <CJK>
                 (#x434A . #x6AAC)      ; <CJK>
                 (#x434B . #x76DF)      ; <CJK>
                 (#x434C . #x9530)      ; <CJK>
                 (#x434D . #x731B)      ; <CJK>
                 (#x434E . #x68A6)      ; <CJK>
                 (#x434F . #x5B5F)      ; <CJK>
                 (#x4350 . #x772F)      ; <CJK>
                 (#x4351 . #x919A)      ; <CJK>
                 (#x4352 . #x9761)      ; <CJK>
                 (#x4353 . #x7CDC)      ; <CJK>
                 (#x4354 . #x8FF7)      ; <CJK>
                 (#x4355 . #x8C1C)      ; <CJK>
                 (#x4356 . #x5F25)      ; <CJK>
                 (#x4357 . #x7C73)      ; <CJK>
                 (#x4358 . #x79D8)      ; <CJK>
                 (#x4359 . #x89C5)      ; <CJK>
                 (#x435A . #x6CCC)      ; <CJK>
                 (#x435B . #x871C)      ; <CJK>
                 (#x435C . #x5BC6)      ; <CJK>
                 (#x435D . #x5E42)      ; <CJK>
                 (#x435E . #x68C9)      ; <CJK>
                 (#x435F . #x7720)      ; <CJK>
                 (#x4360 . #x7EF5)      ; <CJK>
                 (#x4361 . #x5195)      ; <CJK>
                 (#x4362 . #x514D)      ; <CJK>
                 (#x4363 . #x52C9)      ; <CJK>
                 (#x4364 . #x5A29)      ; <CJK>
                 (#x4365 . #x7F05)      ; <CJK>
                 (#x4366 . #x9762)      ; <CJK>
                 (#x4367 . #x82D7)      ; <CJK>
                 (#x4368 . #x63CF)      ; <CJK>
                 (#x4369 . #x7784)      ; <CJK>
                 (#x436A . #x85D0)      ; <CJK>
                 (#x436B . #x79D2)      ; <CJK>
                 (#x436C . #x6E3A)      ; <CJK>
                 (#x436D . #x5E99)      ; <CJK>
                 (#x436E . #x5999)      ; <CJK>
                 (#x436F . #x8511)      ; <CJK>
                 (#x4370 . #x706D)      ; <CJK>
                 (#x4371 . #x6C11)      ; <CJK>
                 (#x4372 . #x62BF)      ; <CJK>
                 (#x4373 . #x76BF)      ; <CJK>
                 (#x4374 . #x654F)      ; <CJK>
                 (#x4375 . #x60AF)      ; <CJK>
                 (#x4376 . #x95FD)      ; <CJK>
                 (#x4377 . #x660E)      ; <CJK>
                 (#x4378 . #x879F)      ; <CJK>
                 (#x4379 . #x9E23)      ; <CJK>
                 (#x437A . #x94ED)      ; <CJK>
                 (#x437B . #x540D)      ; <CJK>
                 (#x437C . #x547D)      ; <CJK>
                 (#x437D . #x8C2C)      ; <CJK>
                 (#x437E . #x6478)      ; <CJK>
                 (#x4421 . #x6479)      ; <CJK>
                 (#x4422 . #x8611)      ; <CJK>
                 (#x4423 . #x6A21)      ; <CJK>
                 (#x4424 . #x819C)      ; <CJK>
                 (#x4425 . #x78E8)      ; <CJK>
                 (#x4426 . #x6469)      ; <CJK>
                 (#x4427 . #x9B54)      ; <CJK>
                 (#x4428 . #x62B9)      ; <CJK>
                 (#x4429 . #x672B)      ; <CJK>
                 (#x442A . #x83AB)      ; <CJK>
                 (#x442B . #x58A8)      ; <CJK>
                 (#x442C . #x9ED8)      ; <CJK>
                 (#x442D . #x6CAB)      ; <CJK>
                 (#x442E . #x6F20)      ; <CJK>
                 (#x442F . #x5BDE)      ; <CJK>
                 (#x4430 . #x964C)      ; <CJK>
                 (#x4431 . #x8C0B)      ; <CJK>
                 (#x4432 . #x725F)      ; <CJK>
                 (#x4433 . #x67D0)      ; <CJK>
                 (#x4434 . #x62C7)      ; <CJK>
                 (#x4435 . #x7261)      ; <CJK>
                 (#x4436 . #x4EA9)      ; <CJK>
                 (#x4437 . #x59C6)      ; <CJK>
                 (#x4438 . #x6BCD)      ; <CJK>
                 (#x4439 . #x5893)      ; <CJK>
                 (#x443A . #x66AE)      ; <CJK>
                 (#x443B . #x5E55)      ; <CJK>
                 (#x443C . #x52DF)      ; <CJK>
                 (#x443D . #x6155)      ; <CJK>
                 (#x443E . #x6728)      ; <CJK>
                 (#x443F . #x76EE)      ; <CJK>
                 (#x4440 . #x7766)      ; <CJK>
                 (#x4441 . #x7267)      ; <CJK>
                 (#x4442 . #x7A46)      ; <CJK>
                 (#x4443 . #x62FF)      ; <CJK>
                 (#x4444 . #x54EA)      ; <CJK>
                 (#x4445 . #x5450)      ; <CJK>
                 (#x4446 . #x94A0)      ; <CJK>
                 (#x4447 . #x90A3)      ; <CJK>
                 (#x4448 . #x5A1C)      ; <CJK>
                 (#x4449 . #x7EB3)      ; <CJK>
                 (#x444A . #x6C16)      ; <CJK>
                 (#x444B . #x4E43)      ; <CJK>
                 (#x444C . #x5976)      ; <CJK>
                 (#x444D . #x8010)      ; <CJK>
                 (#x444E . #x5948)      ; <CJK>
                 (#x444F . #x5357)      ; <CJK>
                 (#x4450 . #x7537)      ; <CJK>
                 (#x4451 . #x96BE)      ; <CJK>
                 (#x4452 . #x56CA)      ; <CJK>
                 (#x4453 . #x6320)      ; <CJK>
                 (#x4454 . #x8111)      ; <CJK>
                 (#x4455 . #x607C)      ; <CJK>
                 (#x4456 . #x95F9)      ; <CJK>
                 (#x4457 . #x6DD6)      ; <CJK>
                 (#x4458 . #x5462)      ; <CJK>
                 (#x4459 . #x9981)      ; <CJK>
                 (#x445A . #x5185)      ; <CJK>
                 (#x445B . #x5AE9)      ; <CJK>
                 (#x445C . #x80FD)      ; <CJK>
                 (#x445D . #x59AE)      ; <CJK>
                 (#x445E . #x9713)      ; <CJK>
                 (#x445F . #x502A)      ; <CJK>
                 (#x4460 . #x6CE5)      ; <CJK>
                 (#x4461 . #x5C3C)      ; <CJK>
                 (#x4462 . #x62DF)      ; <CJK>
                 (#x4463 . #x4F60)      ; <CJK>
                 (#x4464 . #x533F)      ; <CJK>
                 (#x4465 . #x817B)      ; <CJK>
                 (#x4466 . #x9006)      ; <CJK>
                 (#x4467 . #x6EBA)      ; <CJK>
                 (#x4468 . #x852B)      ; <CJK>
                 (#x4469 . #x62C8)      ; <CJK>
                 (#x446A . #x5E74)      ; <CJK>
                 (#x446B . #x78BE)      ; <CJK>
                 (#x446C . #x64B5)      ; <CJK>
                 (#x446D . #x637B)      ; <CJK>
                 (#x446E . #x5FF5)      ; <CJK>
                 (#x446F . #x5A18)      ; <CJK>
                 (#x4470 . #x917F)      ; <CJK>
                 (#x4471 . #x9E1F)      ; <CJK>
                 (#x4472 . #x5C3F)      ; <CJK>
                 (#x4473 . #x634F)      ; <CJK>
                 (#x4474 . #x8042)      ; <CJK>
                 (#x4475 . #x5B7D)      ; <CJK>
                 (#x4476 . #x556E)      ; <CJK>
                 (#x4477 . #x954A)      ; <CJK>
                 (#x4478 . #x954D)      ; <CJK>
                 (#x4479 . #x6D85)      ; <CJK>
                 (#x447A . #x60A8)      ; <CJK>
                 (#x447B . #x67E0)      ; <CJK>
                 (#x447C . #x72DE)      ; <CJK>
                 (#x447D . #x51DD)      ; <CJK>
                 (#x447E . #x5B81)      ; <CJK>
                 (#x4521 . #x62E7)      ; <CJK>
                 (#x4522 . #x6CDE)      ; <CJK>
                 (#x4523 . #x725B)      ; <CJK>
                 (#x4524 . #x626D)      ; <CJK>
                 (#x4525 . #x94AE)      ; <CJK>
                 (#x4526 . #x7EBD)      ; <CJK>
                 (#x4527 . #x8113)      ; <CJK>
                 (#x4528 . #x6D53)      ; <CJK>
                 (#x4529 . #x519C)      ; <CJK>
                 (#x452A . #x5F04)      ; <CJK>
                 (#x452B . #x5974)      ; <CJK>
                 (#x452C . #x52AA)      ; <CJK>
                 (#x452D . #x6012)      ; <CJK>
                 (#x452E . #x5973)      ; <CJK>
                 (#x452F . #x6696)      ; <CJK>
                 (#x4530 . #x8650)      ; <CJK>
                 (#x4531 . #x759F)      ; <CJK>
                 (#x4532 . #x632A)      ; <CJK>
                 (#x4533 . #x61E6)      ; <CJK>
                 (#x4534 . #x7CEF)      ; <CJK>
                 (#x4535 . #x8BFA)      ; <CJK>
                 (#x4536 . #x54E6)      ; <CJK>
                 (#x4537 . #x6B27)      ; <CJK>
                 (#x4538 . #x9E25)      ; <CJK>
                 (#x4539 . #x6BB4)      ; <CJK>
                 (#x453A . #x85D5)      ; <CJK>
                 (#x453B . #x5455)      ; <CJK>
                 (#x453C . #x5076)      ; <CJK>
                 (#x453D . #x6CA4)      ; <CJK>
                 (#x453E . #x556A)      ; <CJK>
                 (#x453F . #x8DB4)      ; <CJK>
                 (#x4540 . #x722C)      ; <CJK>
                 (#x4541 . #x5E15)      ; <CJK>
                 (#x4542 . #x6015)      ; <CJK>
                 (#x4543 . #x7436)      ; <CJK>
                 (#x4544 . #x62CD)      ; <CJK>
                 (#x4545 . #x6392)      ; <CJK>
                 (#x4546 . #x724C)      ; <CJK>
                 (#x4547 . #x5F98)      ; <CJK>
                 (#x4548 . #x6E43)      ; <CJK>
                 (#x4549 . #x6D3E)      ; <CJK>
                 (#x454A . #x6500)      ; <CJK>
                 (#x454B . #x6F58)      ; <CJK>
                 (#x454C . #x76D8)      ; <CJK>
                 (#x454D . #x78D0)      ; <CJK>
                 (#x454E . #x76FC)      ; <CJK>
                 (#x454F . #x7554)      ; <CJK>
                 (#x4550 . #x5224)      ; <CJK>
                 (#x4551 . #x53DB)      ; <CJK>
                 (#x4552 . #x4E53)      ; <CJK>
                 (#x4553 . #x5E9E)      ; <CJK>
                 (#x4554 . #x65C1)      ; <CJK>
                 (#x4555 . #x802A)      ; <CJK>
                 (#x4556 . #x80D6)      ; <CJK>
                 (#x4557 . #x629B)      ; <CJK>
                 (#x4558 . #x5486)      ; <CJK>
                 (#x4559 . #x5228)      ; <CJK>
                 (#x455A . #x70AE)      ; <CJK>
                 (#x455B . #x888D)      ; <CJK>
                 (#x455C . #x8DD1)      ; <CJK>
                 (#x455D . #x6CE1)      ; <CJK>
                 (#x455E . #x5478)      ; <CJK>
                 (#x455F . #x80DA)      ; <CJK>
                 (#x4560 . #x57F9)      ; <CJK>
                 (#x4561 . #x88F4)      ; <CJK>
                 (#x4562 . #x8D54)      ; <CJK>
                 (#x4563 . #x966A)      ; <CJK>
                 (#x4564 . #x914D)      ; <CJK>
                 (#x4565 . #x4F69)      ; <CJK>
                 (#x4566 . #x6C9B)      ; <CJK>
                 (#x4567 . #x55B7)      ; <CJK>
                 (#x4568 . #x76C6)      ; <CJK>
                 (#x4569 . #x7830)      ; <CJK>
                 (#x456A . #x62A8)      ; <CJK>
                 (#x456B . #x70F9)      ; <CJK>
                 (#x456C . #x6F8E)      ; <CJK>
                 (#x456D . #x5F6D)      ; <CJK>
                 (#x456E . #x84EC)      ; <CJK>
                 (#x456F . #x68DA)      ; <CJK>
                 (#x4570 . #x787C)      ; <CJK>
                 (#x4571 . #x7BF7)      ; <CJK>
                 (#x4572 . #x81A8)      ; <CJK>
                 (#x4573 . #x670B)      ; <CJK>
                 (#x4574 . #x9E4F)      ; <CJK>
                 (#x4575 . #x6367)      ; <CJK>
                 (#x4576 . #x78B0)      ; <CJK>
                 (#x4577 . #x576F)      ; <CJK>
                 (#x4578 . #x7812)      ; <CJK>
                 (#x4579 . #x9739)      ; <CJK>
                 (#x457A . #x6279)      ; <CJK>
                 (#x457B . #x62AB)      ; <CJK>
                 (#x457C . #x5288)      ; <CJK>
                 (#x457D . #x7435)      ; <CJK>
                 (#x457E . #x6BD7)      ; <CJK>
                 (#x4621 . #x5564)      ; <CJK>
                 (#x4622 . #x813E)      ; <CJK>
                 (#x4623 . #x75B2)      ; <CJK>
                 (#x4624 . #x76AE)      ; <CJK>
                 (#x4625 . #x5339)      ; <CJK>
                 (#x4626 . #x75DE)      ; <CJK>
                 (#x4627 . #x50FB)      ; <CJK>
                 (#x4628 . #x5C41)      ; <CJK>
                 (#x4629 . #x8B6C)      ; <CJK>
                 (#x462A . #x7BC7)      ; <CJK>
                 (#x462B . #x504F)      ; <CJK>
                 (#x462C . #x7247)      ; <CJK>
                 (#x462D . #x9A97)      ; <CJK>
                 (#x462E . #x98D8)      ; <CJK>
                 (#x462F . #x6F02)      ; <CJK>
                 (#x4630 . #x74E2)      ; <CJK>
                 (#x4631 . #x7968)      ; <CJK>
                 (#x4632 . #x6487)      ; <CJK>
                 (#x4633 . #x77A5)      ; <CJK>
                 (#x4634 . #x62FC)      ; <CJK>
                 (#x4635 . #x9891)      ; <CJK>
                 (#x4636 . #x8D2B)      ; <CJK>
                 (#x4637 . #x54C1)      ; <CJK>
                 (#x4638 . #x8058)      ; <CJK>
                 (#x4639 . #x4E52)      ; <CJK>
                 (#x463A . #x576A)      ; <CJK>
                 (#x463B . #x82F9)      ; <CJK>
                 (#x463C . #x840D)      ; <CJK>
                 (#x463D . #x5E73)      ; <CJK>
                 (#x463E . #x51ED)      ; <CJK>
                 (#x463F . #x74F6)      ; <CJK>
                 (#x4640 . #x8BC4)      ; <CJK>
                 (#x4641 . #x5C4F)      ; <CJK>
                 (#x4642 . #x5761)      ; <CJK>
                 (#x4643 . #x6CFC)      ; <CJK>
                 (#x4644 . #x9887)      ; <CJK>
                 (#x4645 . #x5A46)      ; <CJK>
                 (#x4646 . #x7834)      ; <CJK>
                 (#x4647 . #x9B44)      ; <CJK>
                 (#x4648 . #x8FEB)      ; <CJK>
                 (#x4649 . #x7C95)      ; <CJK>
                 (#x464A . #x5256)      ; <CJK>
                 (#x464B . #x6251)      ; <CJK>
                 (#x464C . #x94FA)      ; <CJK>
                 (#x464D . #x4EC6)      ; <CJK>
                 (#x464E . #x8386)      ; <CJK>
                 (#x464F . #x8461)      ; <CJK>
                 (#x4650 . #x83E9)      ; <CJK>
                 (#x4651 . #x84B2)      ; <CJK>
                 (#x4652 . #x57D4)      ; <CJK>
                 (#x4653 . #x6734)      ; <CJK>
                 (#x4654 . #x5703)      ; <CJK>
                 (#x4655 . #x666E)      ; <CJK>
                 (#x4656 . #x6D66)      ; <CJK>
                 (#x4657 . #x8C31)      ; <CJK>
                 (#x4658 . #x66DD)      ; <CJK>
                 (#x4659 . #x7011)      ; <CJK>
                 (#x465A . #x671F)      ; <CJK>
                 (#x465B . #x6B3A)      ; <CJK>
                 (#x465C . #x6816)      ; <CJK>
                 (#x465D . #x621A)      ; <CJK>
                 (#x465E . #x59BB)      ; <CJK>
                 (#x465F . #x4E03)      ; <CJK>
                 (#x4660 . #x51C4)      ; <CJK>
                 (#x4661 . #x6F06)      ; <CJK>
                 (#x4662 . #x67D2)      ; <CJK>
                 (#x4663 . #x6C8F)      ; <CJK>
                 (#x4664 . #x5176)      ; <CJK>
                 (#x4665 . #x68CB)      ; <CJK>
                 (#x4666 . #x5947)      ; <CJK>
                 (#x4667 . #x6B67)      ; <CJK>
                 (#x4668 . #x7566)      ; <CJK>
                 (#x4669 . #x5D0E)      ; <CJK>
                 (#x466A . #x8110)      ; <CJK>
                 (#x466B . #x9F50)      ; <CJK>
                 (#x466C . #x65D7)      ; <CJK>
                 (#x466D . #x7948)      ; <CJK>
                 (#x466E . #x7941)      ; <CJK>
                 (#x466F . #x9A91)      ; <CJK>
                 (#x4670 . #x8D77)      ; <CJK>
                 (#x4671 . #x5C82)      ; <CJK>
                 (#x4672 . #x4E5E)      ; <CJK>
                 (#x4673 . #x4F01)      ; <CJK>
                 (#x4674 . #x542F)      ; <CJK>
                 (#x4675 . #x5951)      ; <CJK>
                 (#x4676 . #x780C)      ; <CJK>
                 (#x4677 . #x5668)      ; <CJK>
                 (#x4678 . #x6C14)      ; <CJK>
                 (#x4679 . #x8FC4)      ; <CJK>
                 (#x467A . #x5F03)      ; <CJK>
                 (#x467B . #x6C7D)      ; <CJK>
                 (#x467C . #x6CE3)      ; <CJK>
                 (#x467D . #x8BAB)      ; <CJK>
                 (#x467E . #x6390)      ; <CJK>
                 (#x4721 . #x6070)      ; <CJK>
                 (#x4722 . #x6D3D)      ; <CJK>
                 (#x4723 . #x7275)      ; <CJK>
                 (#x4724 . #x6266)      ; <CJK>
                 (#x4725 . #x948E)      ; <CJK>
                 (#x4726 . #x94C5)      ; <CJK>
                 (#x4727 . #x5343)      ; <CJK>
                 (#x4728 . #x8FC1)      ; <CJK>
                 (#x4729 . #x7B7E)      ; <CJK>
                 (#x472A . #x4EDF)      ; <CJK>
                 (#x472B . #x8C26)      ; <CJK>
                 (#x472C . #x4E7E)      ; <CJK>
                 (#x472D . #x9ED4)      ; <CJK>
                 (#x472E . #x94B1)      ; <CJK>
                 (#x472F . #x94B3)      ; <CJK>
                 (#x4730 . #x524D)      ; <CJK>
                 (#x4731 . #x6F5C)      ; <CJK>
                 (#x4732 . #x9063)      ; <CJK>
                 (#x4733 . #x6D45)      ; <CJK>
                 (#x4734 . #x8C34)      ; <CJK>
                 (#x4735 . #x5811)      ; <CJK>
                 (#x4736 . #x5D4C)      ; <CJK>
                 (#x4737 . #x6B20)      ; <CJK>
                 (#x4738 . #x6B49)      ; <CJK>
                 (#x4739 . #x67AA)      ; <CJK>
                 (#x473A . #x545B)      ; <CJK>
                 (#x473B . #x8154)      ; <CJK>
                 (#x473C . #x7F8C)      ; <CJK>
                 (#x473D . #x5899)      ; <CJK>
                 (#x473E . #x8537)      ; <CJK>
                 (#x473F . #x5F3A)      ; <CJK>
                 (#x4740 . #x62A2)      ; <CJK>
                 (#x4741 . #x6A47)      ; <CJK>
                 (#x4742 . #x9539)      ; <CJK>
                 (#x4743 . #x6572)      ; <CJK>
                 (#x4744 . #x6084)      ; <CJK>
                 (#x4745 . #x6865)      ; <CJK>
                 (#x4746 . #x77A7)      ; <CJK>
                 (#x4747 . #x4E54)      ; <CJK>
                 (#x4748 . #x4FA8)      ; <CJK>
                 (#x4749 . #x5DE7)      ; <CJK>
                 (#x474A . #x9798)      ; <CJK>
                 (#x474B . #x64AC)      ; <CJK>
                 (#x474C . #x7FD8)      ; <CJK>
                 (#x474D . #x5CED)      ; <CJK>
                 (#x474E . #x4FCF)      ; <CJK>
                 (#x474F . #x7A8D)      ; <CJK>
                 (#x4750 . #x5207)      ; <CJK>
                 (#x4751 . #x8304)      ; <CJK>
                 (#x4752 . #x4E14)      ; <CJK>
                 (#x4753 . #x602F)      ; <CJK>
                 (#x4754 . #x7A83)      ; <CJK>
                 (#x4755 . #x94A6)      ; <CJK>
                 (#x4756 . #x4FB5)      ; <CJK>
                 (#x4757 . #x4EB2)      ; <CJK>
                 (#x4758 . #x79E6)      ; <CJK>
                 (#x4759 . #x7434)      ; <CJK>
                 (#x475A . #x52E4)      ; <CJK>
                 (#x475B . #x82B9)      ; <CJK>
                 (#x475C . #x64D2)      ; <CJK>
                 (#x475D . #x79BD)      ; <CJK>
                 (#x475E . #x5BDD)      ; <CJK>
                 (#x475F . #x6C81)      ; <CJK>
                 (#x4760 . #x9752)      ; <CJK>
                 (#x4761 . #x8F7B)      ; <CJK>
                 (#x4762 . #x6C22)      ; <CJK>
                 (#x4763 . #x503E)      ; <CJK>
                 (#x4764 . #x537F)      ; <CJK>
                 (#x4765 . #x6E05)      ; <CJK>
                 (#x4766 . #x64CE)      ; <CJK>
                 (#x4767 . #x6674)      ; <CJK>
                 (#x4768 . #x6C30)      ; <CJK>
                 (#x4769 . #x60C5)      ; <CJK>
                 (#x476A . #x9877)      ; <CJK>
                 (#x476B . #x8BF7)      ; <CJK>
                 (#x476C . #x5E86)      ; <CJK>
                 (#x476D . #x743C)      ; <CJK>
                 (#x476E . #x7A77)      ; <CJK>
                 (#x476F . #x79CB)      ; <CJK>
                 (#x4770 . #x4E18)      ; <CJK>
                 (#x4771 . #x90B1)      ; <CJK>
                 (#x4772 . #x7403)      ; <CJK>
                 (#x4773 . #x6C42)      ; <CJK>
                 (#x4774 . #x56DA)      ; <CJK>
                 (#x4775 . #x914B)      ; <CJK>
                 (#x4776 . #x6CC5)      ; <CJK>
                 (#x4777 . #x8D8B)      ; <CJK>
                 (#x4778 . #x533A)      ; <CJK>
                 (#x4779 . #x86C6)      ; <CJK>
                 (#x477A . #x66F2)      ; <CJK>
                 (#x477B . #x8EAF)      ; <CJK>
                 (#x477C . #x5C48)      ; <CJK>
                 (#x477D . #x9A71)      ; <CJK>
                 (#x477E . #x6E20)      ; <CJK>
                 (#x4821 . #x53D6)      ; <CJK>
                 (#x4822 . #x5A36)      ; <CJK>
                 (#x4823 . #x9F8B)      ; <CJK>
                 (#x4824 . #x8DA3)      ; <CJK>
                 (#x4825 . #x53BB)      ; <CJK>
                 (#x4826 . #x5708)      ; <CJK>
                 (#x4827 . #x98A7)      ; <CJK>
                 (#x4828 . #x6743)      ; <CJK>
                 (#x4829 . #x919B)      ; <CJK>
                 (#x482A . #x6CC9)      ; <CJK>
                 (#x482B . #x5168)      ; <CJK>
                 (#x482C . #x75CA)      ; <CJK>
                 (#x482D . #x62F3)      ; <CJK>
                 (#x482E . #x72AC)      ; <CJK>
                 (#x482F . #x5238)      ; <CJK>
                 (#x4830 . #x529D)      ; <CJK>
                 (#x4831 . #x7F3A)      ; <CJK>
                 (#x4832 . #x7094)      ; <CJK>
                 (#x4833 . #x7638)      ; <CJK>
                 (#x4834 . #x5374)      ; <CJK>
                 (#x4835 . #x9E4A)      ; <CJK>
                 (#x4836 . #x69B7)      ; <CJK>
                 (#x4837 . #x786E)      ; <CJK>
                 (#x4838 . #x96C0)      ; <CJK>
                 (#x4839 . #x88D9)      ; <CJK>
                 (#x483A . #x7FA4)      ; <CJK>
                 (#x483B . #x7136)      ; <CJK>
                 (#x483C . #x71C3)      ; <CJK>
                 (#x483D . #x5189)      ; <CJK>
                 (#x483E . #x67D3)      ; <CJK>
                 (#x483F . #x74E4)      ; <CJK>
                 (#x4840 . #x58E4)      ; <CJK>
                 (#x4841 . #x6518)      ; <CJK>
                 (#x4842 . #x56B7)      ; <CJK>
                 (#x4843 . #x8BA9)      ; <CJK>
                 (#x4844 . #x9976)      ; <CJK>
                 (#x4845 . #x6270)      ; <CJK>
                 (#x4846 . #x7ED5)      ; <CJK>
                 (#x4847 . #x60F9)      ; <CJK>
                 (#x4848 . #x70ED)      ; <CJK>
                 (#x4849 . #x58EC)      ; <CJK>
                 (#x484A . #x4EC1)      ; <CJK>
                 (#x484B . #x4EBA)      ; <CJK>
                 (#x484C . #x5FCD)      ; <CJK>
                 (#x484D . #x97E7)      ; <CJK>
                 (#x484E . #x4EFB)      ; <CJK>
                 (#x484F . #x8BA4)      ; <CJK>
                 (#x4850 . #x5203)      ; <CJK>
                 (#x4851 . #x598A)      ; <CJK>
                 (#x4852 . #x7EAB)      ; <CJK>
                 (#x4853 . #x6254)      ; <CJK>
                 (#x4854 . #x4ECD)      ; <CJK>
                 (#x4855 . #x65E5)      ; <CJK>
                 (#x4856 . #x620E)      ; <CJK>
                 (#x4857 . #x8338)      ; <CJK>
                 (#x4858 . #x84C9)      ; <CJK>
                 (#x4859 . #x8363)      ; <CJK>
                 (#x485A . #x878D)      ; <CJK>
                 (#x485B . #x7194)      ; <CJK>
                 (#x485C . #x6EB6)      ; <CJK>
                 (#x485D . #x5BB9)      ; <CJK>
                 (#x485E . #x7ED2)      ; <CJK>
                 (#x485F . #x5197)      ; <CJK>
                 (#x4860 . #x63C9)      ; <CJK>
                 (#x4861 . #x67D4)      ; <CJK>
                 (#x4862 . #x8089)      ; <CJK>
                 (#x4863 . #x8339)      ; <CJK>
                 (#x4864 . #x8815)      ; <CJK>
                 (#x4865 . #x5112)      ; <CJK>
                 (#x4866 . #x5B7A)      ; <CJK>
                 (#x4867 . #x5982)      ; <CJK>
                 (#x4868 . #x8FB1)      ; <CJK>
                 (#x4869 . #x4E73)      ; <CJK>
                 (#x486A . #x6C5D)      ; <CJK>
                 (#x486B . #x5165)      ; <CJK>
                 (#x486C . #x8925)      ; <CJK>
                 (#x486D . #x8F6F)      ; <CJK>
                 (#x486E . #x962E)      ; <CJK>
                 (#x486F . #x854A)      ; <CJK>
                 (#x4870 . #x745E)      ; <CJK>
                 (#x4871 . #x9510)      ; <CJK>
                 (#x4872 . #x95F0)      ; <CJK>
                 (#x4873 . #x6DA6)      ; <CJK>
                 (#x4874 . #x82E5)      ; <CJK>
                 (#x4875 . #x5F31)      ; <CJK>
                 (#x4876 . #x6492)      ; <CJK>
                 (#x4877 . #x6D12)      ; <CJK>
                 (#x4878 . #x8428)      ; <CJK>
                 (#x4879 . #x816E)      ; <CJK>
                 (#x487A . #x9CC3)      ; <CJK>
                 (#x487B . #x585E)      ; <CJK>
                 (#x487C . #x8D5B)      ; <CJK>
                 (#x487D . #x4E09)      ; <CJK>
                 (#x487E . #x53C1)      ; <CJK>
                 (#x4921 . #x4F1E)      ; <CJK>
                 (#x4922 . #x6563)      ; <CJK>
                 (#x4923 . #x6851)      ; <CJK>
                 (#x4924 . #x55D3)      ; <CJK>
                 (#x4925 . #x4E27)      ; <CJK>
                 (#x4926 . #x6414)      ; <CJK>
                 (#x4927 . #x9A9A)      ; <CJK>
                 (#x4928 . #x626B)      ; <CJK>
                 (#x4929 . #x5AC2)      ; <CJK>
                 (#x492A . #x745F)      ; <CJK>
                 (#x492B . #x8272)      ; <CJK>
                 (#x492C . #x6DA9)      ; <CJK>
                 (#x492D . #x68EE)      ; <CJK>
                 (#x492E . #x50E7)      ; <CJK>
                 (#x492F . #x838E)      ; <CJK>
                 (#x4930 . #x7802)      ; <CJK>
                 (#x4931 . #x6740)      ; <CJK>
                 (#x4932 . #x5239)      ; <CJK>
                 (#x4933 . #x6C99)      ; <CJK>
                 (#x4934 . #x7EB1)      ; <CJK>
                 (#x4935 . #x50BB)      ; <CJK>
                 (#x4936 . #x5565)      ; <CJK>
                 (#x4937 . #x715E)      ; <CJK>
                 (#x4938 . #x7B5B)      ; <CJK>
                 (#x4939 . #x6652)      ; <CJK>
                 (#x493A . #x73CA)      ; <CJK>
                 (#x493B . #x82EB)      ; <CJK>
                 (#x493C . #x6749)      ; <CJK>
                 (#x493D . #x5C71)      ; <CJK>
                 (#x493E . #x5220)      ; <CJK>
                 (#x493F . #x717D)      ; <CJK>
                 (#x4940 . #x886B)      ; <CJK>
                 (#x4941 . #x95EA)      ; <CJK>
                 (#x4942 . #x9655)      ; <CJK>
                 (#x4943 . #x64C5)      ; <CJK>
                 (#x4944 . #x8D61)      ; <CJK>
                 (#x4945 . #x81B3)      ; <CJK>
                 (#x4946 . #x5584)      ; <CJK>
                 (#x4947 . #x6C55)      ; <CJK>
                 (#x4948 . #x6247)      ; <CJK>
                 (#x4949 . #x7F2E)      ; <CJK>
                 (#x494A . #x5892)      ; <CJK>
                 (#x494B . #x4F24)      ; <CJK>
                 (#x494C . #x5546)      ; <CJK>
                 (#x494D . #x8D4F)      ; <CJK>
                 (#x494E . #x664C)      ; <CJK>
                 (#x494F . #x4E0A)      ; <CJK>
                 (#x4950 . #x5C1A)      ; <CJK>
                 (#x4951 . #x88F3)      ; <CJK>
                 (#x4952 . #x68A2)      ; <CJK>
                 (#x4953 . #x634E)      ; <CJK>
                 (#x4954 . #x7A0D)      ; <CJK>
                 (#x4955 . #x70E7)      ; <CJK>
                 (#x4956 . #x828D)      ; <CJK>
                 (#x4957 . #x52FA)      ; <CJK>
                 (#x4958 . #x97F6)      ; <CJK>
                 (#x4959 . #x5C11)      ; <CJK>
                 (#x495A . #x54E8)      ; <CJK>
                 (#x495B . #x90B5)      ; <CJK>
                 (#x495C . #x7ECD)      ; <CJK>
                 (#x495D . #x5962)      ; <CJK>
                 (#x495E . #x8D4A)      ; <CJK>
                 (#x495F . #x86C7)      ; <CJK>
                 (#x4960 . #x820C)      ; <CJK>
                 (#x4961 . #x820D)      ; <CJK>
                 (#x4962 . #x8D66)      ; <CJK>
                 (#x4963 . #x6444)      ; <CJK>
                 (#x4964 . #x5C04)      ; <CJK>
                 (#x4965 . #x6151)      ; <CJK>
                 (#x4966 . #x6D89)      ; <CJK>
                 (#x4967 . #x793E)      ; <CJK>
                 (#x4968 . #x8BBE)      ; <CJK>
                 (#x4969 . #x7837)      ; <CJK>
                 (#x496A . #x7533)      ; <CJK>
                 (#x496B . #x547B)      ; <CJK>
                 (#x496C . #x4F38)      ; <CJK>
                 (#x496D . #x8EAB)      ; <CJK>
                 (#x496E . #x6DF1)      ; <CJK>
                 (#x496F . #x5A20)      ; <CJK>
                 (#x4970 . #x7EC5)      ; <CJK>
                 (#x4971 . #x795E)      ; <CJK>
                 (#x4972 . #x6C88)      ; <CJK>
                 (#x4973 . #x5BA1)      ; <CJK>
                 (#x4974 . #x5A76)      ; <CJK>
                 (#x4975 . #x751A)      ; <CJK>
                 (#x4976 . #x80BE)      ; <CJK>
                 (#x4977 . #x614E)      ; <CJK>
                 (#x4978 . #x6E17)      ; <CJK>
                 (#x4979 . #x58F0)      ; <CJK>
                 (#x497A . #x751F)      ; <CJK>
                 (#x497B . #x7525)      ; <CJK>
                 (#x497C . #x7272)      ; <CJK>
                 (#x497D . #x5347)      ; <CJK>
                 (#x497E . #x7EF3)      ; <CJK>
                 (#x4A21 . #x7701)      ; <CJK>
                 (#x4A22 . #x76DB)      ; <CJK>
                 (#x4A23 . #x5269)      ; <CJK>
                 (#x4A24 . #x80DC)      ; <CJK>
                 (#x4A25 . #x5723)      ; <CJK>
                 (#x4A26 . #x5E08)      ; <CJK>
                 (#x4A27 . #x5931)      ; <CJK>
                 (#x4A28 . #x72EE)      ; <CJK>
                 (#x4A29 . #x65BD)      ; <CJK>
                 (#x4A2A . #x6E7F)      ; <CJK>
                 (#x4A2B . #x8BD7)      ; <CJK>
                 (#x4A2C . #x5C38)      ; <CJK>
                 (#x4A2D . #x8671)      ; <CJK>
                 (#x4A2E . #x5341)      ; <CJK>
                 (#x4A2F . #x77F3)      ; <CJK>
                 (#x4A30 . #x62FE)      ; <CJK>
                 (#x4A31 . #x65F6)      ; <CJK>
                 (#x4A32 . #x4EC0)      ; <CJK>
                 (#x4A33 . #x98DF)      ; <CJK>
                 (#x4A34 . #x8680)      ; <CJK>
                 (#x4A35 . #x5B9E)      ; <CJK>
                 (#x4A36 . #x8BC6)      ; <CJK>
                 (#x4A37 . #x53F2)      ; <CJK>
                 (#x4A38 . #x77E2)      ; <CJK>
                 (#x4A39 . #x4F7F)      ; <CJK>
                 (#x4A3A . #x5C4E)      ; <CJK>
                 (#x4A3B . #x9A76)      ; <CJK>
                 (#x4A3C . #x59CB)      ; <CJK>
                 (#x4A3D . #x5F0F)      ; <CJK>
                 (#x4A3E . #x793A)      ; <CJK>
                 (#x4A3F . #x58EB)      ; <CJK>
                 (#x4A40 . #x4E16)      ; <CJK>
                 (#x4A41 . #x67FF)      ; <CJK>
                 (#x4A42 . #x4E8B)      ; <CJK>
                 (#x4A43 . #x62ED)      ; <CJK>
                 (#x4A44 . #x8A93)      ; <CJK>
                 (#x4A45 . #x901D)      ; <CJK>
                 (#x4A46 . #x52BF)      ; <CJK>
                 (#x4A47 . #x662F)      ; <CJK>
                 (#x4A48 . #x55DC)      ; <CJK>
                 (#x4A49 . #x566C)      ; <CJK>
                 (#x4A4A . #x9002)      ; <CJK>
                 (#x4A4B . #x4ED5)      ; <CJK>
                 (#x4A4C . #x4F8D)      ; <CJK>
                 (#x4A4D . #x91CA)      ; <CJK>
                 (#x4A4E . #x9970)      ; <CJK>
                 (#x4A4F . #x6C0F)      ; <CJK>
                 (#x4A50 . #x5E02)      ; <CJK>
                 (#x4A51 . #x6043)      ; <CJK>
                 (#x4A52 . #x5BA4)      ; <CJK>
                 (#x4A53 . #x89C6)      ; <CJK>
                 (#x4A54 . #x8BD5)      ; <CJK>
                 (#x4A55 . #x6536)      ; <CJK>
                 (#x4A56 . #x624B)      ; <CJK>
                 (#x4A57 . #x9996)      ; <CJK>
                 (#x4A58 . #x5B88)      ; <CJK>
                 (#x4A59 . #x5BFF)      ; <CJK>
                 (#x4A5A . #x6388)      ; <CJK>
                 (#x4A5B . #x552E)      ; <CJK>
                 (#x4A5C . #x53D7)      ; <CJK>
                 (#x4A5D . #x7626)      ; <CJK>
                 (#x4A5E . #x517D)      ; <CJK>
                 (#x4A5F . #x852C)      ; <CJK>
                 (#x4A60 . #x67A2)      ; <CJK>
                 (#x4A61 . #x68B3)      ; <CJK>
                 (#x4A62 . #x6B8A)      ; <CJK>
                 (#x4A63 . #x6292)      ; <CJK>
                 (#x4A64 . #x8F93)      ; <CJK>
                 (#x4A65 . #x53D4)      ; <CJK>
                 (#x4A66 . #x8212)      ; <CJK>
                 (#x4A67 . #x6DD1)      ; <CJK>
                 (#x4A68 . #x758F)      ; <CJK>
                 (#x4A69 . #x4E66)      ; <CJK>
                 (#x4A6A . #x8D4E)      ; <CJK>
                 (#x4A6B . #x5B70)      ; <CJK>
                 (#x4A6C . #x719F)      ; <CJK>
                 (#x4A6D . #x85AF)      ; <CJK>
                 (#x4A6E . #x6691)      ; <CJK>
                 (#x4A6F . #x66D9)      ; <CJK>
                 (#x4A70 . #x7F72)      ; <CJK>
                 (#x4A71 . #x8700)      ; <CJK>
                 (#x4A72 . #x9ECD)      ; <CJK>
                 (#x4A73 . #x9F20)      ; <CJK>
                 (#x4A74 . #x5C5E)      ; <CJK>
                 (#x4A75 . #x672F)      ; <CJK>
                 (#x4A76 . #x8FF0)      ; <CJK>
                 (#x4A77 . #x6811)      ; <CJK>
                 (#x4A78 . #x675F)      ; <CJK>
                 (#x4A79 . #x620D)      ; <CJK>
                 (#x4A7A . #x7AD6)      ; <CJK>
                 (#x4A7B . #x5885)      ; <CJK>
                 (#x4A7C . #x5EB6)      ; <CJK>
                 (#x4A7D . #x6570)      ; <CJK>
                 (#x4A7E . #x6F31)      ; <CJK>
                 (#x4B21 . #x6055)      ; <CJK>
                 (#x4B22 . #x5237)      ; <CJK>
                 (#x4B23 . #x800D)      ; <CJK>
                 (#x4B24 . #x6454)      ; <CJK>
                 (#x4B25 . #x8870)      ; <CJK>
                 (#x4B26 . #x7529)      ; <CJK>
                 (#x4B27 . #x5E05)      ; <CJK>
                 (#x4B28 . #x6813)      ; <CJK>
                 (#x4B29 . #x62F4)      ; <CJK>
                 (#x4B2A . #x971C)      ; <CJK>
                 (#x4B2B . #x53CC)      ; <CJK>
                 (#x4B2C . #x723D)      ; <CJK>
                 (#x4B2D . #x8C01)      ; <CJK>
                 (#x4B2E . #x6C34)      ; <CJK>
                 (#x4B2F . #x7761)      ; <CJK>
                 (#x4B30 . #x7A0E)      ; <CJK>
                 (#x4B31 . #x542E)      ; <CJK>
                 (#x4B32 . #x77AC)      ; <CJK>
                 (#x4B33 . #x987A)      ; <CJK>
                 (#x4B34 . #x821C)      ; <CJK>
                 (#x4B35 . #x8BF4)      ; <CJK>
                 (#x4B36 . #x7855)      ; <CJK>
                 (#x4B37 . #x6714)      ; <CJK>
                 (#x4B38 . #x70C1)      ; <CJK>
                 (#x4B39 . #x65AF)      ; <CJK>
                 (#x4B3A . #x6495)      ; <CJK>
                 (#x4B3B . #x5636)      ; <CJK>
                 (#x4B3C . #x601D)      ; <CJK>
                 (#x4B3D . #x79C1)      ; <CJK>
                 (#x4B3E . #x53F8)      ; <CJK>
                 (#x4B3F . #x4E1D)      ; <CJK>
                 (#x4B40 . #x6B7B)      ; <CJK>
                 (#x4B41 . #x8086)      ; <CJK>
                 (#x4B42 . #x5BFA)      ; <CJK>
                 (#x4B43 . #x55E3)      ; <CJK>
                 (#x4B44 . #x56DB)      ; <CJK>
                 (#x4B45 . #x4F3A)      ; <CJK>
                 (#x4B46 . #x4F3C)      ; <CJK>
                 (#x4B47 . #x9972)      ; <CJK>
                 (#x4B48 . #x5DF3)      ; <CJK>
                 (#x4B49 . #x677E)      ; <CJK>
                 (#x4B4A . #x8038)      ; <CJK>
                 (#x4B4B . #x6002)      ; <CJK>
                 (#x4B4C . #x9882)      ; <CJK>
                 (#x4B4D . #x9001)      ; <CJK>
                 (#x4B4E . #x5B8B)      ; <CJK>
                 (#x4B4F . #x8BBC)      ; <CJK>
                 (#x4B50 . #x8BF5)      ; <CJK>
                 (#x4B51 . #x641C)      ; <CJK>
                 (#x4B52 . #x8258)      ; <CJK>
                 (#x4B53 . #x64DE)      ; <CJK>
                 (#x4B54 . #x55FD)      ; <CJK>
                 (#x4B55 . #x82CF)      ; <CJK>
                 (#x4B56 . #x9165)      ; <CJK>
                 (#x4B57 . #x4FD7)      ; <CJK>
                 (#x4B58 . #x7D20)      ; <CJK>
                 (#x4B59 . #x901F)      ; <CJK>
                 (#x4B5A . #x7C9F)      ; <CJK>
                 (#x4B5B . #x50F3)      ; <CJK>
                 (#x4B5C . #x5851)      ; <CJK>
                 (#x4B5D . #x6EAF)      ; <CJK>
                 (#x4B5E . #x5BBF)      ; <CJK>
                 (#x4B5F . #x8BC9)      ; <CJK>
                 (#x4B60 . #x8083)      ; <CJK>
                 (#x4B61 . #x9178)      ; <CJK>
                 (#x4B62 . #x849C)      ; <CJK>
                 (#x4B63 . #x7B97)      ; <CJK>
                 (#x4B64 . #x867D)      ; <CJK>
                 (#x4B65 . #x968B)      ; <CJK>
                 (#x4B66 . #x968F)      ; <CJK>
                 (#x4B67 . #x7EE5)      ; <CJK>
                 (#x4B68 . #x9AD3)      ; <CJK>
                 (#x4B69 . #x788E)      ; <CJK>
                 (#x4B6A . #x5C81)      ; <CJK>
                 (#x4B6B . #x7A57)      ; <CJK>
                 (#x4B6C . #x9042)      ; <CJK>
                 (#x4B6D . #x96A7)      ; <CJK>
                 (#x4B6E . #x795F)      ; <CJK>
                 (#x4B6F . #x5B59)      ; <CJK>
                 (#x4B70 . #x635F)      ; <CJK>
                 (#x4B71 . #x7B0B)      ; <CJK>
                 (#x4B72 . #x84D1)      ; <CJK>
                 (#x4B73 . #x68AD)      ; <CJK>
                 (#x4B74 . #x5506)      ; <CJK>
                 (#x4B75 . #x7F29)      ; <CJK>
                 (#x4B76 . #x7410)      ; <CJK>
                 (#x4B77 . #x7D22)      ; <CJK>
                 (#x4B78 . #x9501)      ; <CJK>
                 (#x4B79 . #x6240)      ; <CJK>
                 (#x4B7A . #x584C)      ; <CJK>
                 (#x4B7B . #x4ED6)      ; <CJK>
                 (#x4B7C . #x5B83)      ; <CJK>
                 (#x4B7D . #x5979)      ; <CJK>
                 (#x4B7E . #x5854)      ; <CJK>
                 (#x4C21 . #x736D)      ; <CJK>
                 (#x4C22 . #x631E)      ; <CJK>
                 (#x4C23 . #x8E4B)      ; <CJK>
                 (#x4C24 . #x8E0F)      ; <CJK>
                 (#x4C25 . #x80CE)      ; <CJK>
                 (#x4C26 . #x82D4)      ; <CJK>
                 (#x4C27 . #x62AC)      ; <CJK>
                 (#x4C28 . #x53F0)      ; <CJK>
                 (#x4C29 . #x6CF0)      ; <CJK>
                 (#x4C2A . #x915E)      ; <CJK>
                 (#x4C2B . #x592A)      ; <CJK>
                 (#x4C2C . #x6001)      ; <CJK>
                 (#x4C2D . #x6C70)      ; <CJK>
                 (#x4C2E . #x574D)      ; <CJK>
                 (#x4C2F . #x644A)      ; <CJK>
                 (#x4C30 . #x8D2A)      ; <CJK>
                 (#x4C31 . #x762B)      ; <CJK>
                 (#x4C32 . #x6EE9)      ; <CJK>
                 (#x4C33 . #x575B)      ; <CJK>
                 (#x4C34 . #x6A80)      ; <CJK>
                 (#x4C35 . #x75F0)      ; <CJK>
                 (#x4C36 . #x6F6D)      ; <CJK>
                 (#x4C37 . #x8C2D)      ; <CJK>
                 (#x4C38 . #x8C08)      ; <CJK>
                 (#x4C39 . #x5766)      ; <CJK>
                 (#x4C3A . #x6BEF)      ; <CJK>
                 (#x4C3B . #x8892)      ; <CJK>
                 (#x4C3C . #x78B3)      ; <CJK>
                 (#x4C3D . #x63A2)      ; <CJK>
                 (#x4C3E . #x53F9)      ; <CJK>
                 (#x4C3F . #x70AD)      ; <CJK>
                 (#x4C40 . #x6C64)      ; <CJK>
                 (#x4C41 . #x5858)      ; <CJK>
                 (#x4C42 . #x642A)      ; <CJK>
                 (#x4C43 . #x5802)      ; <CJK>
                 (#x4C44 . #x68E0)      ; <CJK>
                 (#x4C45 . #x819B)      ; <CJK>
                 (#x4C46 . #x5510)      ; <CJK>
                 (#x4C47 . #x7CD6)      ; <CJK>
                 (#x4C48 . #x5018)      ; <CJK>
                 (#x4C49 . #x8EBA)      ; <CJK>
                 (#x4C4A . #x6DCC)      ; <CJK>
                 (#x4C4B . #x8D9F)      ; <CJK>
                 (#x4C4C . #x70EB)      ; <CJK>
                 (#x4C4D . #x638F)      ; <CJK>
                 (#x4C4E . #x6D9B)      ; <CJK>
                 (#x4C4F . #x6ED4)      ; <CJK>
                 (#x4C50 . #x7EE6)      ; <CJK>
                 (#x4C51 . #x8404)      ; <CJK>
                 (#x4C52 . #x6843)      ; <CJK>
                 (#x4C53 . #x9003)      ; <CJK>
                 (#x4C54 . #x6DD8)      ; <CJK>
                 (#x4C55 . #x9676)      ; <CJK>
                 (#x4C56 . #x8BA8)      ; <CJK>
                 (#x4C57 . #x5957)      ; <CJK>
                 (#x4C58 . #x7279)      ; <CJK>
                 (#x4C59 . #x85E4)      ; <CJK>
                 (#x4C5A . #x817E)      ; <CJK>
                 (#x4C5B . #x75BC)      ; <CJK>
                 (#x4C5C . #x8A8A)      ; <CJK>
                 (#x4C5D . #x68AF)      ; <CJK>
                 (#x4C5E . #x5254)      ; <CJK>
                 (#x4C5F . #x8E22)      ; <CJK>
                 (#x4C60 . #x9511)      ; <CJK>
                 (#x4C61 . #x63D0)      ; <CJK>
                 (#x4C62 . #x9898)      ; <CJK>
                 (#x4C63 . #x8E44)      ; <CJK>
                 (#x4C64 . #x557C)      ; <CJK>
                 (#x4C65 . #x4F53)      ; <CJK>
                 (#x4C66 . #x66FF)      ; <CJK>
                 (#x4C67 . #x568F)      ; <CJK>
                 (#x4C68 . #x60D5)      ; <CJK>
                 (#x4C69 . #x6D95)      ; <CJK>
                 (#x4C6A . #x5243)      ; <CJK>
                 (#x4C6B . #x5C49)      ; <CJK>
                 (#x4C6C . #x5929)      ; <CJK>
                 (#x4C6D . #x6DFB)      ; <CJK>
                 (#x4C6E . #x586B)      ; <CJK>
                 (#x4C6F . #x7530)      ; <CJK>
                 (#x4C70 . #x751C)      ; <CJK>
                 (#x4C71 . #x606C)      ; <CJK>
                 (#x4C72 . #x8214)      ; <CJK>
                 (#x4C73 . #x8146)      ; <CJK>
                 (#x4C74 . #x6311)      ; <CJK>
                 (#x4C75 . #x6761)      ; <CJK>
                 (#x4C76 . #x8FE2)      ; <CJK>
                 (#x4C77 . #x773A)      ; <CJK>
                 (#x4C78 . #x8DF3)      ; <CJK>
                 (#x4C79 . #x8D34)      ; <CJK>
                 (#x4C7A . #x94C1)      ; <CJK>
                 (#x4C7B . #x5E16)      ; <CJK>
                 (#x4C7C . #x5385)      ; <CJK>
                 (#x4C7D . #x542C)      ; <CJK>
                 (#x4C7E . #x70C3)      ; <CJK>
                 (#x4D21 . #x6C40)      ; <CJK>
                 (#x4D22 . #x5EF7)      ; <CJK>
                 (#x4D23 . #x505C)      ; <CJK>
                 (#x4D24 . #x4EAD)      ; <CJK>
                 (#x4D25 . #x5EAD)      ; <CJK>
                 (#x4D26 . #x633A)      ; <CJK>
                 (#x4D27 . #x8247)      ; <CJK>
                 (#x4D28 . #x901A)      ; <CJK>
                 (#x4D29 . #x6850)      ; <CJK>
                 (#x4D2A . #x916E)      ; <CJK>
                 (#x4D2B . #x77B3)      ; <CJK>
                 (#x4D2C . #x540C)      ; <CJK>
                 (#x4D2D . #x94DC)      ; <CJK>
                 (#x4D2E . #x5F64)      ; <CJK>
                 (#x4D2F . #x7AE5)      ; <CJK>
                 (#x4D30 . #x6876)      ; <CJK>
                 (#x4D31 . #x6345)      ; <CJK>
                 (#x4D32 . #x7B52)      ; <CJK>
                 (#x4D33 . #x7EDF)      ; <CJK>
                 (#x4D34 . #x75DB)      ; <CJK>
                 (#x4D35 . #x5077)      ; <CJK>
                 (#x4D36 . #x6295)      ; <CJK>
                 (#x4D37 . #x5934)      ; <CJK>
                 (#x4D38 . #x900F)      ; <CJK>
                 (#x4D39 . #x51F8)      ; <CJK>
                 (#x4D3A . #x79C3)      ; <CJK>
                 (#x4D3B . #x7A81)      ; <CJK>
                 (#x4D3C . #x56FE)      ; <CJK>
                 (#x4D3D . #x5F92)      ; <CJK>
                 (#x4D3E . #x9014)      ; <CJK>
                 (#x4D3F . #x6D82)      ; <CJK>
                 (#x4D40 . #x5C60)      ; <CJK>
                 (#x4D41 . #x571F)      ; <CJK>
                 (#x4D42 . #x5410)      ; <CJK>
                 (#x4D43 . #x5154)      ; <CJK>
                 (#x4D44 . #x6E4D)      ; <CJK>
                 (#x4D45 . #x56E2)      ; <CJK>
                 (#x4D46 . #x63A8)      ; <CJK>
                 (#x4D47 . #x9893)      ; <CJK>
                 (#x4D48 . #x817F)      ; <CJK>
                 (#x4D49 . #x8715)      ; <CJK>
                 (#x4D4A . #x892A)      ; <CJK>
                 (#x4D4B . #x9000)      ; <CJK>
                 (#x4D4C . #x541E)      ; <CJK>
                 (#x4D4D . #x5C6F)      ; <CJK>
                 (#x4D4E . #x81C0)      ; <CJK>
                 (#x4D4F . #x62D6)      ; <CJK>
                 (#x4D50 . #x6258)      ; <CJK>
                 (#x4D51 . #x8131)      ; <CJK>
                 (#x4D52 . #x9E35)      ; <CJK>
                 (#x4D53 . #x9640)      ; <CJK>
                 (#x4D54 . #x9A6E)      ; <CJK>
                 (#x4D55 . #x9A7C)      ; <CJK>
                 (#x4D56 . #x692D)      ; <CJK>
                 (#x4D57 . #x59A5)      ; <CJK>
                 (#x4D58 . #x62D3)      ; <CJK>
                 (#x4D59 . #x553E)      ; <CJK>
                 (#x4D5A . #x6316)      ; <CJK>
                 (#x4D5B . #x54C7)      ; <CJK>
                 (#x4D5C . #x86D9)      ; <CJK>
                 (#x4D5D . #x6D3C)      ; <CJK>
                 (#x4D5E . #x5A03)      ; <CJK>
                 (#x4D5F . #x74E6)      ; <CJK>
                 (#x4D60 . #x889C)      ; <CJK>
                 (#x4D61 . #x6B6A)      ; <CJK>
                 (#x4D62 . #x5916)      ; <CJK>
                 (#x4D63 . #x8C4C)      ; <CJK>
                 (#x4D64 . #x5F2F)      ; <CJK>
                 (#x4D65 . #x6E7E)      ; <CJK>
                 (#x4D66 . #x73A9)      ; <CJK>
                 (#x4D67 . #x987D)      ; <CJK>
                 (#x4D68 . #x4E38)      ; <CJK>
                 (#x4D69 . #x70F7)      ; <CJK>
                 (#x4D6A . #x5B8C)      ; <CJK>
                 (#x4D6B . #x7897)      ; <CJK>
                 (#x4D6C . #x633D)      ; <CJK>
                 (#x4D6D . #x665A)      ; <CJK>
                 (#x4D6E . #x7696)      ; <CJK>
                 (#x4D6F . #x60CB)      ; <CJK>
                 (#x4D70 . #x5B9B)      ; <CJK>
                 (#x4D71 . #x5A49)      ; <CJK>
                 (#x4D72 . #x4E07)      ; <CJK>
                 (#x4D73 . #x8155)      ; <CJK>
                 (#x4D74 . #x6C6A)      ; <CJK>
                 (#x4D75 . #x738B)      ; <CJK>
                 (#x4D76 . #x4EA1)      ; <CJK>
                 (#x4D77 . #x6789)      ; <CJK>
                 (#x4D78 . #x7F51)      ; <CJK>
                 (#x4D79 . #x5F80)      ; <CJK>
                 (#x4D7A . #x65FA)      ; <CJK>
                 (#x4D7B . #x671B)      ; <CJK>
                 (#x4D7C . #x5FD8)      ; <CJK>
                 (#x4D7D . #x5984)      ; <CJK>
                 (#x4D7E . #x5A01)      ; <CJK>
                 (#x4E21 . #x5DCD)      ; <CJK>
                 (#x4E22 . #x5FAE)      ; <CJK>
                 (#x4E23 . #x5371)      ; <CJK>
                 (#x4E24 . #x97E6)      ; <CJK>
                 (#x4E25 . #x8FDD)      ; <CJK>
                 (#x4E26 . #x6845)      ; <CJK>
                 (#x4E27 . #x56F4)      ; <CJK>
                 (#x4E28 . #x552F)      ; <CJK>
                 (#x4E29 . #x60DF)      ; <CJK>
                 (#x4E2A . #x4E3A)      ; <CJK>
                 (#x4E2B . #x6F4D)      ; <CJK>
                 (#x4E2C . #x7EF4)      ; <CJK>
                 (#x4E2D . #x82C7)      ; <CJK>
                 (#x4E2E . #x840E)      ; <CJK>
                 (#x4E2F . #x59D4)      ; <CJK>
                 (#x4E30 . #x4F1F)      ; <CJK>
                 (#x4E31 . #x4F2A)      ; <CJK>
                 (#x4E32 . #x5C3E)      ; <CJK>
                 (#x4E33 . #x7EAC)      ; <CJK>
                 (#x4E34 . #x672A)      ; <CJK>
                 (#x4E35 . #x851A)      ; <CJK>
                 (#x4E36 . #x5473)      ; <CJK>
                 (#x4E37 . #x754F)      ; <CJK>
                 (#x4E38 . #x80C3)      ; <CJK>
                 (#x4E39 . #x5582)      ; <CJK>
                 (#x4E3A . #x9B4F)      ; <CJK>
                 (#x4E3B . #x4F4D)      ; <CJK>
                 (#x4E3C . #x6E2D)      ; <CJK>
                 (#x4E3D . #x8C13)      ; <CJK>
                 (#x4E3E . #x5C09)      ; <CJK>
                 (#x4E3F . #x6170)      ; <CJK>
                 (#x4E40 . #x536B)      ; <CJK>
                 (#x4E41 . #x761F)      ; <CJK>
                 (#x4E42 . #x6E29)      ; <CJK>
                 (#x4E43 . #x868A)      ; <CJK>
                 (#x4E44 . #x6587)      ; <CJK>
                 (#x4E45 . #x95FB)      ; <CJK>
                 (#x4E46 . #x7EB9)      ; <CJK>
                 (#x4E47 . #x543B)      ; <CJK>
                 (#x4E48 . #x7A33)      ; <CJK>
                 (#x4E49 . #x7D0A)      ; <CJK>
                 (#x4E4A . #x95EE)      ; <CJK>
                 (#x4E4B . #x55E1)      ; <CJK>
                 (#x4E4C . #x7FC1)      ; <CJK>
                 (#x4E4D . #x74EE)      ; <CJK>
                 (#x4E4E . #x631D)      ; <CJK>
                 (#x4E4F . #x8717)      ; <CJK>
                 (#x4E50 . #x6DA1)      ; <CJK>
                 (#x4E51 . #x7A9D)      ; <CJK>
                 (#x4E52 . #x6211)      ; <CJK>
                 (#x4E53 . #x65A1)      ; <CJK>
                 (#x4E54 . #x5367)      ; <CJK>
                 (#x4E55 . #x63E1)      ; <CJK>
                 (#x4E56 . #x6C83)      ; <CJK>
                 (#x4E57 . #x5DEB)      ; <CJK>
                 (#x4E58 . #x545C)      ; <CJK>
                 (#x4E59 . #x94A8)      ; <CJK>
                 (#x4E5A . #x4E4C)      ; <CJK>
                 (#x4E5B . #x6C61)      ; <CJK>
                 (#x4E5C . #x8BEC)      ; <CJK>
                 (#x4E5D . #x5C4B)      ; <CJK>
                 (#x4E5E . #x65E0)      ; <CJK>
                 (#x4E5F . #x829C)      ; <CJK>
                 (#x4E60 . #x68A7)      ; <CJK>
                 (#x4E61 . #x543E)      ; <CJK>
                 (#x4E62 . #x5434)      ; <CJK>
                 (#x4E63 . #x6BCB)      ; <CJK>
                 (#x4E64 . #x6B66)      ; <CJK>
                 (#x4E65 . #x4E94)      ; <CJK>
                 (#x4E66 . #x6342)      ; <CJK>
                 (#x4E67 . #x5348)      ; <CJK>
                 (#x4E68 . #x821E)      ; <CJK>
                 (#x4E69 . #x4F0D)      ; <CJK>
                 (#x4E6A . #x4FAE)      ; <CJK>
                 (#x4E6B . #x575E)      ; <CJK>
                 (#x4E6C . #x620A)      ; <CJK>
                 (#x4E6D . #x96FE)      ; <CJK>
                 (#x4E6E . #x6664)      ; <CJK>
                 (#x4E6F . #x7269)      ; <CJK>
                 (#x4E70 . #x52FF)      ; <CJK>
                 (#x4E71 . #x52A1)      ; <CJK>
                 (#x4E72 . #x609F)      ; <CJK>
                 (#x4E73 . #x8BEF)      ; <CJK>
                 (#x4E74 . #x6614)      ; <CJK>
                 (#x4E75 . #x7199)      ; <CJK>
                 (#x4E76 . #x6790)      ; <CJK>
                 (#x4E77 . #x897F)      ; <CJK>
                 (#x4E78 . #x7852)      ; <CJK>
                 (#x4E79 . #x77FD)      ; <CJK>
                 (#x4E7A . #x6670)      ; <CJK>
                 (#x4E7B . #x563B)      ; <CJK>
                 (#x4E7C . #x5438)      ; <CJK>
                 (#x4E7D . #x9521)      ; <CJK>
                 (#x4E7E . #x727A)      ; <CJK>
                 (#x4F21 . #x7A00)      ; <CJK>
                 (#x4F22 . #x606F)      ; <CJK>
                 (#x4F23 . #x5E0C)      ; <CJK>
                 (#x4F24 . #x6089)      ; <CJK>
                 (#x4F25 . #x819D)      ; <CJK>
                 (#x4F26 . #x5915)      ; <CJK>
                 (#x4F27 . #x60DC)      ; <CJK>
                 (#x4F28 . #x7184)      ; <CJK>
                 (#x4F29 . #x70EF)      ; <CJK>
                 (#x4F2A . #x6EAA)      ; <CJK>
                 (#x4F2B . #x6C50)      ; <CJK>
                 (#x4F2C . #x7280)      ; <CJK>
                 (#x4F2D . #x6A84)      ; <CJK>
                 (#x4F2E . #x88AD)      ; <CJK>
                 (#x4F2F . #x5E2D)      ; <CJK>
                 (#x4F30 . #x4E60)      ; <CJK>
                 (#x4F31 . #x5AB3)      ; <CJK>
                 (#x4F32 . #x559C)      ; <CJK>
                 (#x4F33 . #x94E3)      ; <CJK>
                 (#x4F34 . #x6D17)      ; <CJK>
                 (#x4F35 . #x7CFB)      ; <CJK>
                 (#x4F36 . #x9699)      ; <CJK>
                 (#x4F37 . #x620F)      ; <CJK>
                 (#x4F38 . #x7EC6)      ; <CJK>
                 (#x4F39 . #x778E)      ; <CJK>
                 (#x4F3A . #x867E)      ; <CJK>
                 (#x4F3B . #x5323)      ; <CJK>
                 (#x4F3C . #x971E)      ; <CJK>
                 (#x4F3D . #x8F96)      ; <CJK>
                 (#x4F3E . #x6687)      ; <CJK>
                 (#x4F3F . #x5CE1)      ; <CJK>
                 (#x4F40 . #x4FA0)      ; <CJK>
                 (#x4F41 . #x72ED)      ; <CJK>
                 (#x4F42 . #x4E0B)      ; <CJK>
                 (#x4F43 . #x53A6)      ; <CJK>
                 (#x4F44 . #x590F)      ; <CJK>
                 (#x4F45 . #x5413)      ; <CJK>
                 (#x4F46 . #x6380)      ; <CJK>
                 (#x4F47 . #x9528)      ; <CJK>
                 (#x4F48 . #x5148)      ; <CJK>
                 (#x4F49 . #x4ED9)      ; <CJK>
                 (#x4F4A . #x9C9C)      ; <CJK>
                 (#x4F4B . #x7EA4)      ; <CJK>
                 (#x4F4C . #x54B8)      ; <CJK>
                 (#x4F4D . #x8D24)      ; <CJK>
                 (#x4F4E . #x8854)      ; <CJK>
                 (#x4F4F . #x8237)      ; <CJK>
                 (#x4F50 . #x95F2)      ; <CJK>
                 (#x4F51 . #x6D8E)      ; <CJK>
                 (#x4F52 . #x5F26)      ; <CJK>
                 (#x4F53 . #x5ACC)      ; <CJK>
                 (#x4F54 . #x663E)      ; <CJK>
                 (#x4F55 . #x9669)      ; <CJK>
                 (#x4F56 . #x73B0)      ; <CJK>
                 (#x4F57 . #x732E)      ; <CJK>
                 (#x4F58 . #x53BF)      ; <CJK>
                 (#x4F59 . #x817A)      ; <CJK>
                 (#x4F5A . #x9985)      ; <CJK>
                 (#x4F5B . #x7FA1)      ; <CJK>
                 (#x4F5C . #x5BAA)      ; <CJK>
                 (#x4F5D . #x9677)      ; <CJK>
                 (#x4F5E . #x9650)      ; <CJK>
                 (#x4F5F . #x7EBF)      ; <CJK>
                 (#x4F60 . #x76F8)      ; <CJK>
                 (#x4F61 . #x53A2)      ; <CJK>
                 (#x4F62 . #x9576)      ; <CJK>
                 (#x4F63 . #x9999)      ; <CJK>
                 (#x4F64 . #x7BB1)      ; <CJK>
                 (#x4F65 . #x8944)      ; <CJK>
                 (#x4F66 . #x6E58)      ; <CJK>
                 (#x4F67 . #x4E61)      ; <CJK>
                 (#x4F68 . #x7FD4)      ; <CJK>
                 (#x4F69 . #x7965)      ; <CJK>
                 (#x4F6A . #x8BE6)      ; <CJK>
                 (#x4F6B . #x60F3)      ; <CJK>
                 (#x4F6C . #x54CD)      ; <CJK>
                 (#x4F6D . #x4EAB)      ; <CJK>
                 (#x4F6E . #x9879)      ; <CJK>
                 (#x4F6F . #x5DF7)      ; <CJK>
                 (#x4F70 . #x6A61)      ; <CJK>
                 (#x4F71 . #x50CF)      ; <CJK>
                 (#x4F72 . #x5411)      ; <CJK>
                 (#x4F73 . #x8C61)      ; <CJK>
                 (#x4F74 . #x8427)      ; <CJK>
                 (#x4F75 . #x785D)      ; <CJK>
                 (#x4F76 . #x9704)      ; <CJK>
                 (#x4F77 . #x524A)      ; <CJK>
                 (#x4F78 . #x54EE)      ; <CJK>
                 (#x4F79 . #x56A3)      ; <CJK>
                 (#x4F7A . #x9500)      ; <CJK>
                 (#x4F7B . #x6D88)      ; <CJK>
                 (#x4F7C . #x5BB5)      ; <CJK>
                 (#x4F7D . #x6DC6)      ; <CJK>
                 (#x4F7E . #x6653)      ; <CJK>
                 (#x5021 . #x5C0F)      ; <CJK>
                 (#x5022 . #x5B5D)      ; <CJK>
                 (#x5023 . #x6821)      ; <CJK>
                 (#x5024 . #x8096)      ; <CJK>
                 (#x5025 . #x5578)      ; <CJK>
                 (#x5026 . #x7B11)      ; <CJK>
                 (#x5027 . #x6548)      ; <CJK>
                 (#x5028 . #x6954)      ; <CJK>
                 (#x5029 . #x4E9B)      ; <CJK>
                 (#x502A . #x6B47)      ; <CJK>
                 (#x502B . #x874E)      ; <CJK>
                 (#x502C . #x978B)      ; <CJK>
                 (#x502D . #x534F)      ; <CJK>
                 (#x502E . #x631F)      ; <CJK>
                 (#x502F . #x643A)      ; <CJK>
                 (#x5030 . #x90AA)      ; <CJK>
                 (#x5031 . #x659C)      ; <CJK>
                 (#x5032 . #x80C1)      ; <CJK>
                 (#x5033 . #x8C10)      ; <CJK>
                 (#x5034 . #x5199)      ; <CJK>
                 (#x5035 . #x68B0)      ; <CJK>
                 (#x5036 . #x5378)      ; <CJK>
                 (#x5037 . #x87F9)      ; <CJK>
                 (#x5038 . #x61C8)      ; <CJK>
                 (#x5039 . #x6CC4)      ; <CJK>
                 (#x503A . #x6CFB)      ; <CJK>
                 (#x503B . #x8C22)      ; <CJK>
                 (#x503C . #x5C51)      ; <CJK>
                 (#x503D . #x85AA)      ; <CJK>
                 (#x503E . #x82AF)      ; <CJK>
                 (#x503F . #x950C)      ; <CJK>
                 (#x5040 . #x6B23)      ; <CJK>
                 (#x5041 . #x8F9B)      ; <CJK>
                 (#x5042 . #x65B0)      ; <CJK>
                 (#x5043 . #x5FFB)      ; <CJK>
                 (#x5044 . #x5FC3)      ; <CJK>
                 (#x5045 . #x4FE1)      ; <CJK>
                 (#x5046 . #x8845)      ; <CJK>
                 (#x5047 . #x661F)      ; <CJK>
                 (#x5048 . #x8165)      ; <CJK>
                 (#x5049 . #x7329)      ; <CJK>
                 (#x504A . #x60FA)      ; <CJK>
                 (#x504B . #x5174)      ; <CJK>
                 (#x504C . #x5211)      ; <CJK>
                 (#x504D . #x578B)      ; <CJK>
                 (#x504E . #x5F62)      ; <CJK>
                 (#x504F . #x90A2)      ; <CJK>
                 (#x5050 . #x884C)      ; <CJK>
                 (#x5051 . #x9192)      ; <CJK>
                 (#x5052 . #x5E78)      ; <CJK>
                 (#x5053 . #x674F)      ; <CJK>
                 (#x5054 . #x6027)      ; <CJK>
                 (#x5055 . #x59D3)      ; <CJK>
                 (#x5056 . #x5144)      ; <CJK>
                 (#x5057 . #x51F6)      ; <CJK>
                 (#x5058 . #x80F8)      ; <CJK>
                 (#x5059 . #x5308)      ; <CJK>
                 (#x505A . #x6C79)      ; <CJK>
                 (#x505B . #x96C4)      ; <CJK>
                 (#x505C . #x718A)      ; <CJK>
                 (#x505D . #x4F11)      ; <CJK>
                 (#x505E . #x4FEE)      ; <CJK>
                 (#x505F . #x7F9E)      ; <CJK>
                 (#x5060 . #x673D)      ; <CJK>
                 (#x5061 . #x55C5)      ; <CJK>
                 (#x5062 . #x9508)      ; <CJK>
                 (#x5063 . #x79C0)      ; <CJK>
                 (#x5064 . #x8896)      ; <CJK>
                 (#x5065 . #x7EE3)      ; <CJK>
                 (#x5066 . #x589F)      ; <CJK>
                 (#x5067 . #x620C)      ; <CJK>
                 (#x5068 . #x9700)      ; <CJK>
                 (#x5069 . #x865A)      ; <CJK>
                 (#x506A . #x5618)      ; <CJK>
                 (#x506B . #x987B)      ; <CJK>
                 (#x506C . #x5F90)      ; <CJK>
                 (#x506D . #x8BB8)      ; <CJK>
                 (#x506E . #x84C4)      ; <CJK>
                 (#x506F . #x9157)      ; <CJK>
                 (#x5070 . #x53D9)      ; <CJK>
                 (#x5071 . #x65ED)      ; <CJK>
                 (#x5072 . #x5E8F)      ; <CJK>
                 (#x5073 . #x755C)      ; <CJK>
                 (#x5074 . #x6064)      ; <CJK>
                 (#x5075 . #x7D6E)      ; <CJK>
                 (#x5076 . #x5A7F)      ; <CJK>
                 (#x5077 . #x7EEA)      ; <CJK>
                 (#x5078 . #x7EED)      ; <CJK>
                 (#x5079 . #x8F69)      ; <CJK>
                 (#x507A . #x55A7)      ; <CJK>
                 (#x507B . #x5BA3)      ; <CJK>
                 (#x507C . #x60AC)      ; <CJK>
                 (#x507D . #x65CB)      ; <CJK>
                 (#x507E . #x7384)      ; <CJK>
                 (#x5121 . #x9009)      ; <CJK>
                 (#x5122 . #x7663)      ; <CJK>
                 (#x5123 . #x7729)      ; <CJK>
                 (#x5124 . #x7EDA)      ; <CJK>
                 (#x5125 . #x9774)      ; <CJK>
                 (#x5126 . #x859B)      ; <CJK>
                 (#x5127 . #x5B66)      ; <CJK>
                 (#x5128 . #x7A74)      ; <CJK>
                 (#x5129 . #x96EA)      ; <CJK>
                 (#x512A . #x8840)      ; <CJK>
                 (#x512B . #x52CB)      ; <CJK>
                 (#x512C . #x718F)      ; <CJK>
                 (#x512D . #x5FAA)      ; <CJK>
                 (#x512E . #x65EC)      ; <CJK>
                 (#x512F . #x8BE2)      ; <CJK>
                 (#x5130 . #x5BFB)      ; <CJK>
                 (#x5131 . #x9A6F)      ; <CJK>
                 (#x5132 . #x5DE1)      ; <CJK>
                 (#x5133 . #x6B89)      ; <CJK>
                 (#x5134 . #x6C5B)      ; <CJK>
                 (#x5135 . #x8BAD)      ; <CJK>
                 (#x5136 . #x8BAF)      ; <CJK>
                 (#x5137 . #x900A)      ; <CJK>
                 (#x5138 . #x8FC5)      ; <CJK>
                 (#x5139 . #x538B)      ; <CJK>
                 (#x513A . #x62BC)      ; <CJK>
                 (#x513B . #x9E26)      ; <CJK>
                 (#x513C . #x9E2D)      ; <CJK>
                 (#x513D . #x5440)      ; <CJK>
                 (#x513E . #x4E2B)      ; <CJK>
                 (#x513F . #x82BD)      ; <CJK>
                 (#x5140 . #x7259)      ; <CJK>
                 (#x5141 . #x869C)      ; <CJK>
                 (#x5142 . #x5D16)      ; <CJK>
                 (#x5143 . #x8859)      ; <CJK>
                 (#x5144 . #x6DAF)      ; <CJK>
                 (#x5145 . #x96C5)      ; <CJK>
                 (#x5146 . #x54D1)      ; <CJK>
                 (#x5147 . #x4E9A)      ; <CJK>
                 (#x5148 . #x8BB6)      ; <CJK>
                 (#x5149 . #x7109)      ; <CJK>
                 (#x514A . #x54BD)      ; <CJK>
                 (#x514B . #x9609)      ; <CJK>
                 (#x514C . #x70DF)      ; <CJK>
                 (#x514D . #x6DF9)      ; <CJK>
                 (#x514E . #x76D0)      ; <CJK>
                 (#x514F . #x4E25)      ; <CJK>
                 (#x5150 . #x7814)      ; <CJK>
                 (#x5151 . #x8712)      ; <CJK>
                 (#x5152 . #x5CA9)      ; <CJK>
                 (#x5153 . #x5EF6)      ; <CJK>
                 (#x5154 . #x8A00)      ; <CJK>
                 (#x5155 . #x989C)      ; <CJK>
                 (#x5156 . #x960E)      ; <CJK>
                 (#x5157 . #x708E)      ; <CJK>
                 (#x5158 . #x6CBF)      ; <CJK>
                 (#x5159 . #x5944)      ; <CJK>
                 (#x515A . #x63A9)      ; <CJK>
                 (#x515B . #x773C)      ; <CJK>
                 (#x515C . #x884D)      ; <CJK>
                 (#x515D . #x6F14)      ; <CJK>
                 (#x515E . #x8273)      ; <CJK>
                 (#x515F . #x5830)      ; <CJK>
                 (#x5160 . #x71D5)      ; <CJK>
                 (#x5161 . #x538C)      ; <CJK>
                 (#x5162 . #x781A)      ; <CJK>
                 (#x5163 . #x96C1)      ; <CJK>
                 (#x5164 . #x5501)      ; <CJK>
                 (#x5165 . #x5F66)      ; <CJK>
                 (#x5166 . #x7130)      ; <CJK>
                 (#x5167 . #x5BB4)      ; <CJK>
                 (#x5168 . #x8C1A)      ; <CJK>
                 (#x5169 . #x9A8C)      ; <CJK>
                 (#x516A . #x6B83)      ; <CJK>
                 (#x516B . #x592E)      ; <CJK>
                 (#x516C . #x9E2F)      ; <CJK>
                 (#x516D . #x79E7)      ; <CJK>
                 (#x516E . #x6768)      ; <CJK>
                 (#x516F . #x626C)      ; <CJK>
                 (#x5170 . #x4F6F)      ; <CJK>
                 (#x5171 . #x75A1)      ; <CJK>
                 (#x5172 . #x7F8A)      ; <CJK>
                 (#x5173 . #x6D0B)      ; <CJK>
                 (#x5174 . #x9633)      ; <CJK>
                 (#x5175 . #x6C27)      ; <CJK>
                 (#x5176 . #x4EF0)      ; <CJK>
                 (#x5177 . #x75D2)      ; <CJK>
                 (#x5178 . #x517B)      ; <CJK>
                 (#x5179 . #x6837)      ; <CJK>
                 (#x517A . #x6F3E)      ; <CJK>
                 (#x517B . #x9080)      ; <CJK>
                 (#x517C . #x8170)      ; <CJK>
                 (#x517D . #x5996)      ; <CJK>
                 (#x517E . #x7476)      ; <CJK>
                 (#x5221 . #x6447)      ; <CJK>
                 (#x5222 . #x5C27)      ; <CJK>
                 (#x5223 . #x9065)      ; <CJK>
                 (#x5224 . #x7A91)      ; <CJK>
                 (#x5225 . #x8C23)      ; <CJK>
                 (#x5226 . #x59DA)      ; <CJK>
                 (#x5227 . #x54AC)      ; <CJK>
                 (#x5228 . #x8200)      ; <CJK>
                 (#x5229 . #x836F)      ; <CJK>
                 (#x522A . #x8981)      ; <CJK>
                 (#x522B . #x8000)      ; <CJK>
                 (#x522C . #x6930)      ; <CJK>
                 (#x522D . #x564E)      ; <CJK>
                 (#x522E . #x8036)      ; <CJK>
                 (#x522F . #x7237)      ; <CJK>
                 (#x5230 . #x91CE)      ; <CJK>
                 (#x5231 . #x51B6)      ; <CJK>
                 (#x5232 . #x4E5F)      ; <CJK>
                 (#x5233 . #x9875)      ; <CJK>
                 (#x5234 . #x6396)      ; <CJK>
                 (#x5235 . #x4E1A)      ; <CJK>
                 (#x5236 . #x53F6)      ; <CJK>
                 (#x5237 . #x66F3)      ; <CJK>
                 (#x5238 . #x814B)      ; <CJK>
                 (#x5239 . #x591C)      ; <CJK>
                 (#x523A . #x6DB2)      ; <CJK>
                 (#x523B . #x4E00)      ; <CJK>
                 (#x523C . #x58F9)      ; <CJK>
                 (#x523D . #x533B)      ; <CJK>
                 (#x523E . #x63D6)      ; <CJK>
                 (#x523F . #x94F1)      ; <CJK>
                 (#x5240 . #x4F9D)      ; <CJK>
                 (#x5241 . #x4F0A)      ; <CJK>
                 (#x5242 . #x8863)      ; <CJK>
                 (#x5243 . #x9890)      ; <CJK>
                 (#x5244 . #x5937)      ; <CJK>
                 (#x5245 . #x9057)      ; <CJK>
                 (#x5246 . #x79FB)      ; <CJK>
                 (#x5247 . #x4EEA)      ; <CJK>
                 (#x5248 . #x80F0)      ; <CJK>
                 (#x5249 . #x7591)      ; <CJK>
                 (#x524A . #x6C82)      ; <CJK>
                 (#x524B . #x5B9C)      ; <CJK>
                 (#x524C . #x59E8)      ; <CJK>
                 (#x524D . #x5F5D)      ; <CJK>
                 (#x524E . #x6905)      ; <CJK>
                 (#x524F . #x8681)      ; <CJK>
                 (#x5250 . #x501A)      ; <CJK>
                 (#x5251 . #x5DF2)      ; <CJK>
                 (#x5252 . #x4E59)      ; <CJK>
                 (#x5253 . #x77E3)      ; <CJK>
                 (#x5254 . #x4EE5)      ; <CJK>
                 (#x5255 . #x827A)      ; <CJK>
                 (#x5256 . #x6291)      ; <CJK>
                 (#x5257 . #x6613)      ; <CJK>
                 (#x5258 . #x9091)      ; <CJK>
                 (#x5259 . #x5C79)      ; <CJK>
                 (#x525A . #x4EBF)      ; <CJK>
                 (#x525B . #x5F79)      ; <CJK>
                 (#x525C . #x81C6)      ; <CJK>
                 (#x525D . #x9038)      ; <CJK>
                 (#x525E . #x8084)      ; <CJK>
                 (#x525F . #x75AB)      ; <CJK>
                 (#x5260 . #x4EA6)      ; <CJK>
                 (#x5261 . #x88D4)      ; <CJK>
                 (#x5262 . #x610F)      ; <CJK>
                 (#x5263 . #x6BC5)      ; <CJK>
                 (#x5264 . #x5FC6)      ; <CJK>
                 (#x5265 . #x4E49)      ; <CJK>
                 (#x5266 . #x76CA)      ; <CJK>
                 (#x5267 . #x6EA2)      ; <CJK>
                 (#x5268 . #x8BE3)      ; <CJK>
                 (#x5269 . #x8BAE)      ; <CJK>
                 (#x526A . #x8C0A)      ; <CJK>
                 (#x526B . #x8BD1)      ; <CJK>
                 (#x526C . #x5F02)      ; <CJK>
                 (#x526D . #x7FFC)      ; <CJK>
                 (#x526E . #x7FCC)      ; <CJK>
                 (#x526F . #x7ECE)      ; <CJK>
                 (#x5270 . #x8335)      ; <CJK>
                 (#x5271 . #x836B)      ; <CJK>
                 (#x5272 . #x56E0)      ; <CJK>
                 (#x5273 . #x6BB7)      ; <CJK>
                 (#x5274 . #x97F3)      ; <CJK>
                 (#x5275 . #x9634)      ; <CJK>
                 (#x5276 . #x59FB)      ; <CJK>
                 (#x5277 . #x541F)      ; <CJK>
                 (#x5278 . #x94F6)      ; <CJK>
                 (#x5279 . #x6DEB)      ; <CJK>
                 (#x527A . #x5BC5)      ; <CJK>
                 (#x527B . #x996E)      ; <CJK>
                 (#x527C . #x5C39)      ; <CJK>
                 (#x527D . #x5F15)      ; <CJK>
                 (#x527E . #x9690)      ; <CJK>
                 (#x5321 . #x5370)      ; <CJK>
                 (#x5322 . #x82F1)      ; <CJK>
                 (#x5323 . #x6A31)      ; <CJK>
                 (#x5324 . #x5A74)      ; <CJK>
                 (#x5325 . #x9E70)      ; <CJK>
                 (#x5326 . #x5E94)      ; <CJK>
                 (#x5327 . #x7F28)      ; <CJK>
                 (#x5328 . #x83B9)      ; <CJK>
                 (#x5329 . #x8424)      ; <CJK>
                 (#x532A . #x8425)      ; <CJK>
                 (#x532B . #x8367)      ; <CJK>
                 (#x532C . #x8747)      ; <CJK>
                 (#x532D . #x8FCE)      ; <CJK>
                 (#x532E . #x8D62)      ; <CJK>
                 (#x532F . #x76C8)      ; <CJK>
                 (#x5330 . #x5F71)      ; <CJK>
                 (#x5331 . #x9896)      ; <CJK>
                 (#x5332 . #x786C)      ; <CJK>
                 (#x5333 . #x6620)      ; <CJK>
                 (#x5334 . #x54DF)      ; <CJK>
                 (#x5335 . #x62E5)      ; <CJK>
                 (#x5336 . #x4F63)      ; <CJK>
                 (#x5337 . #x81C3)      ; <CJK>
                 (#x5338 . #x75C8)      ; <CJK>
                 (#x5339 . #x5EB8)      ; <CJK>
                 (#x533A . #x96CD)      ; <CJK>
                 (#x533B . #x8E0A)      ; <CJK>
                 (#x533C . #x86F9)      ; <CJK>
                 (#x533D . #x548F)      ; <CJK>
                 (#x533E . #x6CF3)      ; <CJK>
                 (#x533F . #x6D8C)      ; <CJK>
                 (#x5340 . #x6C38)      ; <CJK>
                 (#x5341 . #x607F)      ; <CJK>
                 (#x5342 . #x52C7)      ; <CJK>
                 (#x5343 . #x7528)      ; <CJK>
                 (#x5344 . #x5E7D)      ; <CJK>
                 (#x5345 . #x4F18)      ; <CJK>
                 (#x5346 . #x60A0)      ; <CJK>
                 (#x5347 . #x5FE7)      ; <CJK>
                 (#x5348 . #x5C24)      ; <CJK>
                 (#x5349 . #x7531)      ; <CJK>
                 (#x534A . #x90AE)      ; <CJK>
                 (#x534B . #x94C0)      ; <CJK>
                 (#x534C . #x72B9)      ; <CJK>
                 (#x534D . #x6CB9)      ; <CJK>
                 (#x534E . #x6E38)      ; <CJK>
                 (#x534F . #x9149)      ; <CJK>
                 (#x5350 . #x6709)      ; <CJK>
                 (#x5351 . #x53CB)      ; <CJK>
                 (#x5352 . #x53F3)      ; <CJK>
                 (#x5353 . #x4F51)      ; <CJK>
                 (#x5354 . #x91C9)      ; <CJK>
                 (#x5355 . #x8BF1)      ; <CJK>
                 (#x5356 . #x53C8)      ; <CJK>
                 (#x5357 . #x5E7C)      ; <CJK>
                 (#x5358 . #x8FC2)      ; <CJK>
                 (#x5359 . #x6DE4)      ; <CJK>
                 (#x535A . #x4E8E)      ; <CJK>
                 (#x535B . #x76C2)      ; <CJK>
                 (#x535C . #x6986)      ; <CJK>
                 (#x535D . #x865E)      ; <CJK>
                 (#x535E . #x611A)      ; <CJK>
                 (#x535F . #x8206)      ; <CJK>
                 (#x5360 . #x4F59)      ; <CJK>
                 (#x5361 . #x4FDE)      ; <CJK>
                 (#x5362 . #x903E)      ; <CJK>
                 (#x5363 . #x9C7C)      ; <CJK>
                 (#x5364 . #x6109)      ; <CJK>
                 (#x5365 . #x6E1D)      ; <CJK>
                 (#x5366 . #x6E14)      ; <CJK>
                 (#x5367 . #x9685)      ; <CJK>
                 (#x5368 . #x4E88)      ; <CJK>
                 (#x5369 . #x5A31)      ; <CJK>
                 (#x536A . #x96E8)      ; <CJK>
                 (#x536B . #x4E0E)      ; <CJK>
                 (#x536C . #x5C7F)      ; <CJK>
                 (#x536D . #x79B9)      ; <CJK>
                 (#x536E . #x5B87)      ; <CJK>
                 (#x536F . #x8BED)      ; <CJK>
                 (#x5370 . #x7FBD)      ; <CJK>
                 (#x5371 . #x7389)      ; <CJK>
                 (#x5372 . #x57DF)      ; <CJK>
                 (#x5373 . #x828B)      ; <CJK>
                 (#x5374 . #x90C1)      ; <CJK>
                 (#x5375 . #x5401)      ; <CJK>
                 (#x5376 . #x9047)      ; <CJK>
                 (#x5377 . #x55BB)      ; <CJK>
                 (#x5378 . #x5CEA)      ; <CJK>
                 (#x5379 . #x5FA1)      ; <CJK>
                 (#x537A . #x6108)      ; <CJK>
                 (#x537B . #x6B32)      ; <CJK>
                 (#x537C . #x72F1)      ; <CJK>
                 (#x537D . #x80B2)      ; <CJK>
                 (#x537E . #x8A89)      ; <CJK>
                 (#x5421 . #x6D74)      ; <CJK>
                 (#x5422 . #x5BD3)      ; <CJK>
                 (#x5423 . #x88D5)      ; <CJK>
                 (#x5424 . #x9884)      ; <CJK>
                 (#x5425 . #x8C6B)      ; <CJK>
                 (#x5426 . #x9A6D)      ; <CJK>
                 (#x5427 . #x9E33)      ; <CJK>
                 (#x5428 . #x6E0A)      ; <CJK>
                 (#x5429 . #x51A4)      ; <CJK>
                 (#x542A . #x5143)      ; <CJK>
                 (#x542B . #x57A3)      ; <CJK>
                 (#x542C . #x8881)      ; <CJK>
                 (#x542D . #x539F)      ; <CJK>
                 (#x542E . #x63F4)      ; <CJK>
                 (#x542F . #x8F95)      ; <CJK>
                 (#x5430 . #x56ED)      ; <CJK>
                 (#x5431 . #x5458)      ; <CJK>
                 (#x5432 . #x5706)      ; <CJK>
                 (#x5433 . #x733F)      ; <CJK>
                 (#x5434 . #x6E90)      ; <CJK>
                 (#x5435 . #x7F18)      ; <CJK>
                 (#x5436 . #x8FDC)      ; <CJK>
                 (#x5437 . #x82D1)      ; <CJK>
                 (#x5438 . #x613F)      ; <CJK>
                 (#x5439 . #x6028)      ; <CJK>
                 (#x543A . #x9662)      ; <CJK>
                 (#x543B . #x66F0)      ; <CJK>
                 (#x543C . #x7EA6)      ; <CJK>
                 (#x543D . #x8D8A)      ; <CJK>
                 (#x543E . #x8DC3)      ; <CJK>
                 (#x543F . #x94A5)      ; <CJK>
                 (#x5440 . #x5CB3)      ; <CJK>
                 (#x5441 . #x7CA4)      ; <CJK>
                 (#x5442 . #x6708)      ; <CJK>
                 (#x5443 . #x60A6)      ; <CJK>
                 (#x5444 . #x9605)      ; <CJK>
                 (#x5445 . #x8018)      ; <CJK>
                 (#x5446 . #x4E91)      ; <CJK>
                 (#x5447 . #x90E7)      ; <CJK>
                 (#x5448 . #x5300)      ; <CJK>
                 (#x5449 . #x9668)      ; <CJK>
                 (#x544A . #x5141)      ; <CJK>
                 (#x544B . #x8FD0)      ; <CJK>
                 (#x544C . #x8574)      ; <CJK>
                 (#x544D . #x915D)      ; <CJK>
                 (#x544E . #x6655)      ; <CJK>
                 (#x544F . #x97F5)      ; <CJK>
                 (#x5450 . #x5B55)      ; <CJK>
                 (#x5451 . #x531D)      ; <CJK>
                 (#x5452 . #x7838)      ; <CJK>
                 (#x5453 . #x6742)      ; <CJK>
                 (#x5454 . #x683D)      ; <CJK>
                 (#x5455 . #x54C9)      ; <CJK>
                 (#x5456 . #x707E)      ; <CJK>
                 (#x5457 . #x5BB0)      ; <CJK>
                 (#x5458 . #x8F7D)      ; <CJK>
                 (#x5459 . #x518D)      ; <CJK>
                 (#x545A . #x5728)      ; <CJK>
                 (#x545B . #x54B1)      ; <CJK>
                 (#x545C . #x6512)      ; <CJK>
                 (#x545D . #x6682)      ; <CJK>
                 (#x545E . #x8D5E)      ; <CJK>
                 (#x545F . #x8D43)      ; <CJK>
                 (#x5460 . #x810F)      ; <CJK>
                 (#x5461 . #x846C)      ; <CJK>
                 (#x5462 . #x906D)      ; <CJK>
                 (#x5463 . #x7CDF)      ; <CJK>
                 (#x5464 . #x51FF)      ; <CJK>
                 (#x5465 . #x85FB)      ; <CJK>
                 (#x5466 . #x67A3)      ; <CJK>
                 (#x5467 . #x65E9)      ; <CJK>
                 (#x5468 . #x6FA1)      ; <CJK>
                 (#x5469 . #x86A4)      ; <CJK>
                 (#x546A . #x8E81)      ; <CJK>
                 (#x546B . #x566A)      ; <CJK>
                 (#x546C . #x9020)      ; <CJK>
                 (#x546D . #x7682)      ; <CJK>
                 (#x546E . #x7076)      ; <CJK>
                 (#x546F . #x71E5)      ; <CJK>
                 (#x5470 . #x8D23)      ; <CJK>
                 (#x5471 . #x62E9)      ; <CJK>
                 (#x5472 . #x5219)      ; <CJK>
                 (#x5473 . #x6CFD)      ; <CJK>
                 (#x5474 . #x8D3C)      ; <CJK>
                 (#x5475 . #x600E)      ; <CJK>
                 (#x5476 . #x589E)      ; <CJK>
                 (#x5477 . #x618E)      ; <CJK>
                 (#x5478 . #x66FE)      ; <CJK>
                 (#x5479 . #x8D60)      ; <CJK>
                 (#x547A . #x624E)      ; <CJK>
                 (#x547B . #x55B3)      ; <CJK>
                 (#x547C . #x6E23)      ; <CJK>
                 (#x547D . #x672D)      ; <CJK>
                 (#x547E . #x8F67)      ; <CJK>
                 (#x5521 . #x94E1)      ; <CJK>
                 (#x5522 . #x95F8)      ; <CJK>
                 (#x5523 . #x7728)      ; <CJK>
                 (#x5524 . #x6805)      ; <CJK>
                 (#x5525 . #x69A8)      ; <CJK>
                 (#x5526 . #x548B)      ; <CJK>
                 (#x5527 . #x4E4D)      ; <CJK>
                 (#x5528 . #x70B8)      ; <CJK>
                 (#x5529 . #x8BC8)      ; <CJK>
                 (#x552A . #x6458)      ; <CJK>
                 (#x552B . #x658B)      ; <CJK>
                 (#x552C . #x5B85)      ; <CJK>
                 (#x552D . #x7A84)      ; <CJK>
                 (#x552E . #x503A)      ; <CJK>
                 (#x552F . #x5BE8)      ; <CJK>
                 (#x5530 . #x77BB)      ; <CJK>
                 (#x5531 . #x6BE1)      ; <CJK>
                 (#x5532 . #x8A79)      ; <CJK>
                 (#x5533 . #x7C98)      ; <CJK>
                 (#x5534 . #x6CBE)      ; <CJK>
                 (#x5535 . #x76CF)      ; <CJK>
                 (#x5536 . #x65A9)      ; <CJK>
                 (#x5537 . #x8F97)      ; <CJK>
                 (#x5538 . #x5D2D)      ; <CJK>
                 (#x5539 . #x5C55)      ; <CJK>
                 (#x553A . #x8638)      ; <CJK>
                 (#x553B . #x6808)      ; <CJK>
                 (#x553C . #x5360)      ; <CJK>
                 (#x553D . #x6218)      ; <CJK>
                 (#x553E . #x7AD9)      ; <CJK>
                 (#x553F . #x6E5B)      ; <CJK>
                 (#x5540 . #x7EFD)      ; <CJK>
                 (#x5541 . #x6A1F)      ; <CJK>
                 (#x5542 . #x7AE0)      ; <CJK>
                 (#x5543 . #x5F70)      ; <CJK>
                 (#x5544 . #x6F33)      ; <CJK>
                 (#x5545 . #x5F20)      ; <CJK>
                 (#x5546 . #x638C)      ; <CJK>
                 (#x5547 . #x6DA8)      ; <CJK>
                 (#x5548 . #x6756)      ; <CJK>
                 (#x5549 . #x4E08)      ; <CJK>
                 (#x554A . #x5E10)      ; <CJK>
                 (#x554B . #x8D26)      ; <CJK>
                 (#x554C . #x4ED7)      ; <CJK>
                 (#x554D . #x80C0)      ; <CJK>
                 (#x554E . #x7634)      ; <CJK>
                 (#x554F . #x969C)      ; <CJK>
                 (#x5550 . #x62DB)      ; <CJK>
                 (#x5551 . #x662D)      ; <CJK>
                 (#x5552 . #x627E)      ; <CJK>
                 (#x5553 . #x6CBC)      ; <CJK>
                 (#x5554 . #x8D75)      ; <CJK>
                 (#x5555 . #x7167)      ; <CJK>
                 (#x5556 . #x7F69)      ; <CJK>
                 (#x5557 . #x5146)      ; <CJK>
                 (#x5558 . #x8087)      ; <CJK>
                 (#x5559 . #x53EC)      ; <CJK>
                 (#x555A . #x906E)      ; <CJK>
                 (#x555B . #x6298)      ; <CJK>
                 (#x555C . #x54F2)      ; <CJK>
                 (#x555D . #x86F0)      ; <CJK>
                 (#x555E . #x8F99)      ; <CJK>
                 (#x555F . #x8005)      ; <CJK>
                 (#x5560 . #x9517)      ; <CJK>
                 (#x5561 . #x8517)      ; <CJK>
                 (#x5562 . #x8FD9)      ; <CJK>
                 (#x5563 . #x6D59)      ; <CJK>
                 (#x5564 . #x73CD)      ; <CJK>
                 (#x5565 . #x659F)      ; <CJK>
                 (#x5566 . #x771F)      ; <CJK>
                 (#x5567 . #x7504)      ; <CJK>
                 (#x5568 . #x7827)      ; <CJK>
                 (#x5569 . #x81FB)      ; <CJK>
                 (#x556A . #x8D1E)      ; <CJK>
                 (#x556B . #x9488)      ; <CJK>
                 (#x556C . #x4FA6)      ; <CJK>
                 (#x556D . #x6795)      ; <CJK>
                 (#x556E . #x75B9)      ; <CJK>
                 (#x556F . #x8BCA)      ; <CJK>
                 (#x5570 . #x9707)      ; <CJK>
                 (#x5571 . #x632F)      ; <CJK>
                 (#x5572 . #x9547)      ; <CJK>
                 (#x5573 . #x9635)      ; <CJK>
                 (#x5574 . #x84B8)      ; <CJK>
                 (#x5575 . #x6323)      ; <CJK>
                 (#x5576 . #x7741)      ; <CJK>
                 (#x5577 . #x5F81)      ; <CJK>
                 (#x5578 . #x72F0)      ; <CJK>
                 (#x5579 . #x4E89)      ; <CJK>
                 (#x557A . #x6014)      ; <CJK>
                 (#x557B . #x6574)      ; <CJK>
                 (#x557C . #x62EF)      ; <CJK>
                 (#x557D . #x6B63)      ; <CJK>
                 (#x557E . #x653F)      ; <CJK>
                 (#x5621 . #x5E27)      ; <CJK>
                 (#x5622 . #x75C7)      ; <CJK>
                 (#x5623 . #x90D1)      ; <CJK>
                 (#x5624 . #x8BC1)      ; <CJK>
                 (#x5625 . #x829D)      ; <CJK>
                 (#x5626 . #x679D)      ; <CJK>
                 (#x5627 . #x652F)      ; <CJK>
                 (#x5628 . #x5431)      ; <CJK>
                 (#x5629 . #x8718)      ; <CJK>
                 (#x562A . #x77E5)      ; <CJK>
                 (#x562B . #x80A2)      ; <CJK>
                 (#x562C . #x8102)      ; <CJK>
                 (#x562D . #x6C41)      ; <CJK>
                 (#x562E . #x4E4B)      ; <CJK>
                 (#x562F . #x7EC7)      ; <CJK>
                 (#x5630 . #x804C)      ; <CJK>
                 (#x5631 . #x76F4)      ; <CJK>
                 (#x5632 . #x690D)      ; <CJK>
                 (#x5633 . #x6B96)      ; <CJK>
                 (#x5634 . #x6267)      ; <CJK>
                 (#x5635 . #x503C)      ; <CJK>
                 (#x5636 . #x4F84)      ; <CJK>
                 (#x5637 . #x5740)      ; <CJK>
                 (#x5638 . #x6307)      ; <CJK>
                 (#x5639 . #x6B62)      ; <CJK>
                 (#x563A . #x8DBE)      ; <CJK>
                 (#x563B . #x53EA)      ; <CJK>
                 (#x563C . #x65E8)      ; <CJK>
                 (#x563D . #x7EB8)      ; <CJK>
                 (#x563E . #x5FD7)      ; <CJK>
                 (#x563F . #x631A)      ; <CJK>
                 (#x5640 . #x63B7)      ; <CJK>
                 (#x5641 . #x81F3)      ; <CJK>
                 (#x5642 . #x81F4)      ; <CJK>
                 (#x5643 . #x7F6E)      ; <CJK>
                 (#x5644 . #x5E1C)      ; <CJK>
                 (#x5645 . #x5CD9)      ; <CJK>
                 (#x5646 . #x5236)      ; <CJK>
                 (#x5647 . #x667A)      ; <CJK>
                 (#x5648 . #x79E9)      ; <CJK>
                 (#x5649 . #x7A1A)      ; <CJK>
                 (#x564A . #x8D28)      ; <CJK>
                 (#x564B . #x7099)      ; <CJK>
                 (#x564C . #x75D4)      ; <CJK>
                 (#x564D . #x6EDE)      ; <CJK>
                 (#x564E . #x6CBB)      ; <CJK>
                 (#x564F . #x7A92)      ; <CJK>
                 (#x5650 . #x4E2D)      ; <CJK>
                 (#x5651 . #x76C5)      ; <CJK>
                 (#x5652 . #x5FE0)      ; <CJK>
                 (#x5653 . #x949F)      ; <CJK>
                 (#x5654 . #x8877)      ; <CJK>
                 (#x5655 . #x7EC8)      ; <CJK>
                 (#x5656 . #x79CD)      ; <CJK>
                 (#x5657 . #x80BF)      ; <CJK>
                 (#x5658 . #x91CD)      ; <CJK>
                 (#x5659 . #x4EF2)      ; <CJK>
                 (#x565A . #x4F17)      ; <CJK>
                 (#x565B . #x821F)      ; <CJK>
                 (#x565C . #x5468)      ; <CJK>
                 (#x565D . #x5DDE)      ; <CJK>
                 (#x565E . #x6D32)      ; <CJK>
                 (#x565F . #x8BCC)      ; <CJK>
                 (#x5660 . #x7CA5)      ; <CJK>
                 (#x5661 . #x8F74)      ; <CJK>
                 (#x5662 . #x8098)      ; <CJK>
                 (#x5663 . #x5E1A)      ; <CJK>
                 (#x5664 . #x5492)      ; <CJK>
                 (#x5665 . #x76B1)      ; <CJK>
                 (#x5666 . #x5B99)      ; <CJK>
                 (#x5667 . #x663C)      ; <CJK>
                 (#x5668 . #x9AA4)      ; <CJK>
                 (#x5669 . #x73E0)      ; <CJK>
                 (#x566A . #x682A)      ; <CJK>
                 (#x566B . #x86DB)      ; <CJK>
                 (#x566C . #x6731)      ; <CJK>
                 (#x566D . #x732A)      ; <CJK>
                 (#x566E . #x8BF8)      ; <CJK>
                 (#x566F . #x8BDB)      ; <CJK>
                 (#x5670 . #x9010)      ; <CJK>
                 (#x5671 . #x7AF9)      ; <CJK>
                 (#x5672 . #x70DB)      ; <CJK>
                 (#x5673 . #x716E)      ; <CJK>
                 (#x5674 . #x62C4)      ; <CJK>
                 (#x5675 . #x77A9)      ; <CJK>
                 (#x5676 . #x5631)      ; <CJK>
                 (#x5677 . #x4E3B)      ; <CJK>
                 (#x5678 . #x8457)      ; <CJK>
                 (#x5679 . #x67F1)      ; <CJK>
                 (#x567A . #x52A9)      ; <CJK>
                 (#x567B . #x86C0)      ; <CJK>
                 (#x567C . #x8D2E)      ; <CJK>
                 (#x567D . #x94F8)      ; <CJK>
                 (#x567E . #x7B51)      ; <CJK>
                 (#x5721 . #x4F4F)      ; <CJK>
                 (#x5722 . #x6CE8)      ; <CJK>
                 (#x5723 . #x795D)      ; <CJK>
                 (#x5724 . #x9A7B)      ; <CJK>
                 (#x5725 . #x6293)      ; <CJK>
                 (#x5726 . #x722A)      ; <CJK>
                 (#x5727 . #x62FD)      ; <CJK>
                 (#x5728 . #x4E13)      ; <CJK>
                 (#x5729 . #x7816)      ; <CJK>
                 (#x572A . #x8F6C)      ; <CJK>
                 (#x572B . #x64B0)      ; <CJK>
                 (#x572C . #x8D5A)      ; <CJK>
                 (#x572D . #x7BC6)      ; <CJK>
                 (#x572E . #x6869)      ; <CJK>
                 (#x572F . #x5E84)      ; <CJK>
                 (#x5730 . #x88C5)      ; <CJK>
                 (#x5731 . #x5986)      ; <CJK>
                 (#x5732 . #x649E)      ; <CJK>
                 (#x5733 . #x58EE)      ; <CJK>
                 (#x5734 . #x72B6)      ; <CJK>
                 (#x5735 . #x690E)      ; <CJK>
                 (#x5736 . #x9525)      ; <CJK>
                 (#x5737 . #x8FFD)      ; <CJK>
                 (#x5738 . #x8D58)      ; <CJK>
                 (#x5739 . #x5760)      ; <CJK>
                 (#x573A . #x7F00)      ; <CJK>
                 (#x573B . #x8C06)      ; <CJK>
                 (#x573C . #x51C6)      ; <CJK>
                 (#x573D . #x6349)      ; <CJK>
                 (#x573E . #x62D9)      ; <CJK>
                 (#x573F . #x5353)      ; <CJK>
                 (#x5740 . #x684C)      ; <CJK>
                 (#x5741 . #x7422)      ; <CJK>
                 (#x5742 . #x8301)      ; <CJK>
                 (#x5743 . #x914C)      ; <CJK>
                 (#x5744 . #x5544)      ; <CJK>
                 (#x5745 . #x7740)      ; <CJK>
                 (#x5746 . #x707C)      ; <CJK>
                 (#x5747 . #x6D4A)      ; <CJK>
                 (#x5748 . #x5179)      ; <CJK>
                 (#x5749 . #x54A8)      ; <CJK>
                 (#x574A . #x8D44)      ; <CJK>
                 (#x574B . #x59FF)      ; <CJK>
                 (#x574C . #x6ECB)      ; <CJK>
                 (#x574D . #x6DC4)      ; <CJK>
                 (#x574E . #x5B5C)      ; <CJK>
                 (#x574F . #x7D2B)      ; <CJK>
                 (#x5750 . #x4ED4)      ; <CJK>
                 (#x5751 . #x7C7D)      ; <CJK>
                 (#x5752 . #x6ED3)      ; <CJK>
                 (#x5753 . #x5B50)      ; <CJK>
                 (#x5754 . #x81EA)      ; <CJK>
                 (#x5755 . #x6E0D)      ; <CJK>
                 (#x5756 . #x5B57)      ; <CJK>
                 (#x5757 . #x9B03)      ; <CJK>
                 (#x5758 . #x68D5)      ; <CJK>
                 (#x5759 . #x8E2A)      ; <CJK>
                 (#x575A . #x5B97)      ; <CJK>
                 (#x575B . #x7EFC)      ; <CJK>
                 (#x575C . #x603B)      ; <CJK>
                 (#x575D . #x7EB5)      ; <CJK>
                 (#x575E . #x90B9)      ; <CJK>
                 (#x575F . #x8D70)      ; <CJK>
                 (#x5760 . #x594F)      ; <CJK>
                 (#x5761 . #x63CD)      ; <CJK>
                 (#x5762 . #x79DF)      ; <CJK>
                 (#x5763 . #x8DB3)      ; <CJK>
                 (#x5764 . #x5352)      ; <CJK>
                 (#x5765 . #x65CF)      ; <CJK>
                 (#x5766 . #x7956)      ; <CJK>
                 (#x5767 . #x8BC5)      ; <CJK>
                 (#x5768 . #x963B)      ; <CJK>
                 (#x5769 . #x7EC4)      ; <CJK>
                 (#x576A . #x94BB)      ; <CJK>
                 (#x576B . #x7E82)      ; <CJK>
                 (#x576C . #x5634)      ; <CJK>
                 (#x576D . #x9189)      ; <CJK>
                 (#x576E . #x6700)      ; <CJK>
                 (#x576F . #x7F6A)      ; <CJK>
                 (#x5770 . #x5C0A)      ; <CJK>
                 (#x5771 . #x9075)      ; <CJK>
                 (#x5772 . #x6628)      ; <CJK>
                 (#x5773 . #x5DE6)      ; <CJK>
                 (#x5774 . #x4F50)      ; <CJK>
                 (#x5775 . #x67DE)      ; <CJK>
                 (#x5776 . #x505A)      ; <CJK>
                 (#x5777 . #x4F5C)      ; <CJK>
                 (#x5778 . #x5750)      ; <CJK>
                 (#x5779 . #x5EA7)      ; <CJK>
                 (#x5821 . #x4E8D)      ; <CJK>
                 (#x5822 . #x4E0C)      ; <CJK>
                 (#x5823 . #x5140)      ; <CJK>
                 (#x5824 . #x4E10)      ; <CJK>
                 (#x5825 . #x5EFF)      ; <CJK>
                 (#x5826 . #x5345)      ; <CJK>
                 (#x5827 . #x4E15)      ; <CJK>
                 (#x5828 . #x4E98)      ; <CJK>
                 (#x5829 . #x4E1E)      ; <CJK>
                 (#x582A . #x9B32)      ; <CJK>
                 (#x582B . #x5B6C)      ; <CJK>
                 (#x582C . #x5669)      ; <CJK>
                 (#x582D . #x4E28)      ; <CJK>
                 (#x582E . #x79BA)      ; <CJK>
                 (#x582F . #x4E3F)      ; <CJK>
                 (#x5830 . #x5315)      ; <CJK>
                 (#x5831 . #x4E47)      ; <CJK>
                 (#x5832 . #x592D)      ; <CJK>
                 (#x5833 . #x723B)      ; <CJK>
                 (#x5834 . #x536E)      ; <CJK>
                 (#x5835 . #x6C10)      ; <CJK>
                 (#x5836 . #x56DF)      ; <CJK>
                 (#x5837 . #x80E4)      ; <CJK>
                 (#x5838 . #x9997)      ; <CJK>
                 (#x5839 . #x6BD3)      ; <CJK>
                 (#x583A . #x777E)      ; <CJK>
                 (#x583B . #x9F17)      ; <CJK>
                 (#x583C . #x4E36)      ; <CJK>
                 (#x583D . #x4E9F)      ; <CJK>
                 (#x583E . #x9F10)      ; <CJK>
                 (#x583F . #x4E5C)      ; <CJK>
                 (#x5840 . #x4E69)      ; <CJK>
                 (#x5841 . #x4E93)      ; <CJK>
                 (#x5842 . #x8288)      ; <CJK>
                 (#x5843 . #x5B5B)      ; <CJK>
                 (#x5844 . #x556C)      ; <CJK>
                 (#x5845 . #x560F)      ; <CJK>
                 (#x5846 . #x4EC4)      ; <CJK>
                 (#x5847 . #x538D)      ; <CJK>
                 (#x5848 . #x539D)      ; <CJK>
                 (#x5849 . #x53A3)      ; <CJK>
                 (#x584A . #x53A5)      ; <CJK>
                 (#x584B . #x53AE)      ; <CJK>
                 (#x584C . #x9765)      ; <CJK>
                 (#x584D . #x8D5D)      ; <CJK>
                 (#x584E . #x531A)      ; <CJK>
                 (#x584F . #x53F5)      ; <CJK>
                 (#x5850 . #x5326)      ; <CJK>
                 (#x5851 . #x532E)      ; <CJK>
                 (#x5852 . #x533E)      ; <CJK>
                 (#x5853 . #x8D5C)      ; <CJK>
                 (#x5854 . #x5366)      ; <CJK>
                 (#x5855 . #x5363)      ; <CJK>
                 (#x5856 . #x5202)      ; <CJK>
                 (#x5857 . #x5208)      ; <CJK>
                 (#x5858 . #x520E)      ; <CJK>
                 (#x5859 . #x522D)      ; <CJK>
                 (#x585A . #x5233)      ; <CJK>
                 (#x585B . #x523F)      ; <CJK>
                 (#x585C . #x5240)      ; <CJK>
                 (#x585D . #x524C)      ; <CJK>
                 (#x585E . #x525E)      ; <CJK>
                 (#x585F . #x5261)      ; <CJK>
                 (#x5860 . #x525C)      ; <CJK>
                 (#x5861 . #x84AF)      ; <CJK>
                 (#x5862 . #x527D)      ; <CJK>
                 (#x5863 . #x5282)      ; <CJK>
                 (#x5864 . #x5281)      ; <CJK>
                 (#x5865 . #x5290)      ; <CJK>
                 (#x5866 . #x5293)      ; <CJK>
                 (#x5867 . #x5182)      ; <CJK>
                 (#x5868 . #x7F54)      ; <CJK>
                 (#x5869 . #x4EBB)      ; <CJK>
                 (#x586A . #x4EC3)      ; <CJK>
                 (#x586B . #x4EC9)      ; <CJK>
                 (#x586C . #x4EC2)      ; <CJK>
                 (#x586D . #x4EE8)      ; <CJK>
                 (#x586E . #x4EE1)      ; <CJK>
                 (#x586F . #x4EEB)      ; <CJK>
                 (#x5870 . #x4EDE)      ; <CJK>
                 (#x5871 . #x4F1B)      ; <CJK>
                 (#x5872 . #x4EF3)      ; <CJK>
                 (#x5873 . #x4F22)      ; <CJK>
                 (#x5874 . #x4F64)      ; <CJK>
                 (#x5875 . #x4EF5)      ; <CJK>
                 (#x5876 . #x4F25)      ; <CJK>
                 (#x5877 . #x4F27)      ; <CJK>
                 (#x5878 . #x4F09)      ; <CJK>
                 (#x5879 . #x4F2B)      ; <CJK>
                 (#x587A . #x4F5E)      ; <CJK>
                 (#x587B . #x4F67)      ; <CJK>
                 (#x587C . #x6538)      ; <CJK>
                 (#x587D . #x4F5A)      ; <CJK>
                 (#x587E . #x4F5D)      ; <CJK>
                 (#x5921 . #x4F5F)      ; <CJK>
                 (#x5922 . #x4F57)      ; <CJK>
                 (#x5923 . #x4F32)      ; <CJK>
                 (#x5924 . #x4F3D)      ; <CJK>
                 (#x5925 . #x4F76)      ; <CJK>
                 (#x5926 . #x4F74)      ; <CJK>
                 (#x5927 . #x4F91)      ; <CJK>
                 (#x5928 . #x4F89)      ; <CJK>
                 (#x5929 . #x4F83)      ; <CJK>
                 (#x592A . #x4F8F)      ; <CJK>
                 (#x592B . #x4F7E)      ; <CJK>
                 (#x592C . #x4F7B)      ; <CJK>
                 (#x592D . #x4FAA)      ; <CJK>
                 (#x592E . #x4F7C)      ; <CJK>
                 (#x592F . #x4FAC)      ; <CJK>
                 (#x5930 . #x4F94)      ; <CJK>
                 (#x5931 . #x4FE6)      ; <CJK>
                 (#x5932 . #x4FE8)      ; <CJK>
                 (#x5933 . #x4FEA)      ; <CJK>
                 (#x5934 . #x4FC5)      ; <CJK>
                 (#x5935 . #x4FDA)      ; <CJK>
                 (#x5936 . #x4FE3)      ; <CJK>
                 (#x5937 . #x4FDC)      ; <CJK>
                 (#x5938 . #x4FD1)      ; <CJK>
                 (#x5939 . #x4FDF)      ; <CJK>
                 (#x593A . #x4FF8)      ; <CJK>
                 (#x593B . #x5029)      ; <CJK>
                 (#x593C . #x504C)      ; <CJK>
                 (#x593D . #x4FF3)      ; <CJK>
                 (#x593E . #x502C)      ; <CJK>
                 (#x593F . #x500F)      ; <CJK>
                 (#x5940 . #x502E)      ; <CJK>
                 (#x5941 . #x502D)      ; <CJK>
                 (#x5942 . #x4FFE)      ; <CJK>
                 (#x5943 . #x501C)      ; <CJK>
                 (#x5944 . #x500C)      ; <CJK>
                 (#x5945 . #x5025)      ; <CJK>
                 (#x5946 . #x5028)      ; <CJK>
                 (#x5947 . #x507E)      ; <CJK>
                 (#x5948 . #x5043)      ; <CJK>
                 (#x5949 . #x5055)      ; <CJK>
                 (#x594A . #x5048)      ; <CJK>
                 (#x594B . #x504E)      ; <CJK>
                 (#x594C . #x506C)      ; <CJK>
                 (#x594D . #x507B)      ; <CJK>
                 (#x594E . #x50A5)      ; <CJK>
                 (#x594F . #x50A7)      ; <CJK>
                 (#x5950 . #x50A9)      ; <CJK>
                 (#x5951 . #x50BA)      ; <CJK>
                 (#x5952 . #x50D6)      ; <CJK>
                 (#x5953 . #x5106)      ; <CJK>
                 (#x5954 . #x50ED)      ; <CJK>
                 (#x5955 . #x50EC)      ; <CJK>
                 (#x5956 . #x50E6)      ; <CJK>
                 (#x5957 . #x50EE)      ; <CJK>
                 (#x5958 . #x5107)      ; <CJK>
                 (#x5959 . #x510B)      ; <CJK>
                 (#x595A . #x4EDD)      ; <CJK>
                 (#x595B . #x6C3D)      ; <CJK>
                 (#x595C . #x4F58)      ; <CJK>
                 (#x595D . #x4F65)      ; <CJK>
                 (#x595E . #x4FCE)      ; <CJK>
                 (#x595F . #x9FA0)      ; <CJK>
                 (#x5960 . #x6C46)      ; <CJK>
                 (#x5961 . #x7C74)      ; <CJK>
                 (#x5962 . #x516E)      ; <CJK>
                 (#x5963 . #x5DFD)      ; <CJK>
                 (#x5964 . #x9EC9)      ; <CJK>
                 (#x5965 . #x9998)      ; <CJK>
                 (#x5966 . #x5181)      ; <CJK>
                 (#x5967 . #x5914)      ; <CJK>
                 (#x5968 . #x52F9)      ; <CJK>
                 (#x5969 . #x530D)      ; <CJK>
                 (#x596A . #x8A07)      ; <CJK>
                 (#x596B . #x5310)      ; <CJK>
                 (#x596C . #x51EB)      ; <CJK>
                 (#x596D . #x5919)      ; <CJK>
                 (#x596E . #x5155)      ; <CJK>
                 (#x596F . #x4EA0)      ; <CJK>
                 (#x5970 . #x5156)      ; <CJK>
                 (#x5971 . #x4EB3)      ; <CJK>
                 (#x5972 . #x886E)      ; <CJK>
                 (#x5973 . #x88A4)      ; <CJK>
                 (#x5974 . #x4EB5)      ; <CJK>
                 (#x5975 . #x8114)      ; <CJK>
                 (#x5976 . #x88D2)      ; <CJK>
                 (#x5977 . #x7980)      ; <CJK>
                 (#x5978 . #x5B34)      ; <CJK>
                 (#x5979 . #x8803)      ; <CJK>
                 (#x597A . #x7FB8)      ; <CJK>
                 (#x597B . #x51AB)      ; <CJK>
                 (#x597C . #x51B1)      ; <CJK>
                 (#x597D . #x51BD)      ; <CJK>
                 (#x597E . #x51BC)      ; <CJK>
                 (#x5A21 . #x51C7)      ; <CJK>
                 (#x5A22 . #x5196)      ; <CJK>
                 (#x5A23 . #x51A2)      ; <CJK>
                 (#x5A24 . #x51A5)      ; <CJK>
                 (#x5A25 . #x8BA0)      ; <CJK>
                 (#x5A26 . #x8BA6)      ; <CJK>
                 (#x5A27 . #x8BA7)      ; <CJK>
                 (#x5A28 . #x8BAA)      ; <CJK>
                 (#x5A29 . #x8BB4)      ; <CJK>
                 (#x5A2A . #x8BB5)      ; <CJK>
                 (#x5A2B . #x8BB7)      ; <CJK>
                 (#x5A2C . #x8BC2)      ; <CJK>
                 (#x5A2D . #x8BC3)      ; <CJK>
                 (#x5A2E . #x8BCB)      ; <CJK>
                 (#x5A2F . #x8BCF)      ; <CJK>
                 (#x5A30 . #x8BCE)      ; <CJK>
                 (#x5A31 . #x8BD2)      ; <CJK>
                 (#x5A32 . #x8BD3)      ; <CJK>
                 (#x5A33 . #x8BD4)      ; <CJK>
                 (#x5A34 . #x8BD6)      ; <CJK>
                 (#x5A35 . #x8BD8)      ; <CJK>
                 (#x5A36 . #x8BD9)      ; <CJK>
                 (#x5A37 . #x8BDC)      ; <CJK>
                 (#x5A38 . #x8BDF)      ; <CJK>
                 (#x5A39 . #x8BE0)      ; <CJK>
                 (#x5A3A . #x8BE4)      ; <CJK>
                 (#x5A3B . #x8BE8)      ; <CJK>
                 (#x5A3C . #x8BE9)      ; <CJK>
                 (#x5A3D . #x8BEE)      ; <CJK>
                 (#x5A3E . #x8BF0)      ; <CJK>
                 (#x5A3F . #x8BF3)      ; <CJK>
                 (#x5A40 . #x8BF6)      ; <CJK>
                 (#x5A41 . #x8BF9)      ; <CJK>
                 (#x5A42 . #x8BFC)      ; <CJK>
                 (#x5A43 . #x8BFF)      ; <CJK>
                 (#x5A44 . #x8C00)      ; <CJK>
                 (#x5A45 . #x8C02)      ; <CJK>
                 (#x5A46 . #x8C04)      ; <CJK>
                 (#x5A47 . #x8C07)      ; <CJK>
                 (#x5A48 . #x8C0C)      ; <CJK>
                 (#x5A49 . #x8C0F)      ; <CJK>
                 (#x5A4A . #x8C11)      ; <CJK>
                 (#x5A4B . #x8C12)      ; <CJK>
                 (#x5A4C . #x8C14)      ; <CJK>
                 (#x5A4D . #x8C15)      ; <CJK>
                 (#x5A4E . #x8C16)      ; <CJK>
                 (#x5A4F . #x8C19)      ; <CJK>
                 (#x5A50 . #x8C1B)      ; <CJK>
                 (#x5A51 . #x8C18)      ; <CJK>
                 (#x5A52 . #x8C1D)      ; <CJK>
                 (#x5A53 . #x8C1F)      ; <CJK>
                 (#x5A54 . #x8C20)      ; <CJK>
                 (#x5A55 . #x8C21)      ; <CJK>
                 (#x5A56 . #x8C25)      ; <CJK>
                 (#x5A57 . #x8C27)      ; <CJK>
                 (#x5A58 . #x8C2A)      ; <CJK>
                 (#x5A59 . #x8C2B)      ; <CJK>
                 (#x5A5A . #x8C2E)      ; <CJK>
                 (#x5A5B . #x8C2F)      ; <CJK>
                 (#x5A5C . #x8C32)      ; <CJK>
                 (#x5A5D . #x8C33)      ; <CJK>
                 (#x5A5E . #x8C35)      ; <CJK>
                 (#x5A5F . #x8C36)      ; <CJK>
                 (#x5A60 . #x5369)      ; <CJK>
                 (#x5A61 . #x537A)      ; <CJK>
                 (#x5A62 . #x961D)      ; <CJK>
                 (#x5A63 . #x9622)      ; <CJK>
                 (#x5A64 . #x9621)      ; <CJK>
                 (#x5A65 . #x9631)      ; <CJK>
                 (#x5A66 . #x962A)      ; <CJK>
                 (#x5A67 . #x963D)      ; <CJK>
                 (#x5A68 . #x963C)      ; <CJK>
                 (#x5A69 . #x9642)      ; <CJK>
                 (#x5A6A . #x9649)      ; <CJK>
                 (#x5A6B . #x9654)      ; <CJK>
                 (#x5A6C . #x965F)      ; <CJK>
                 (#x5A6D . #x9667)      ; <CJK>
                 (#x5A6E . #x966C)      ; <CJK>
                 (#x5A6F . #x9672)      ; <CJK>
                 (#x5A70 . #x9674)      ; <CJK>
                 (#x5A71 . #x9688)      ; <CJK>
                 (#x5A72 . #x968D)      ; <CJK>
                 (#x5A73 . #x9697)      ; <CJK>
                 (#x5A74 . #x96B0)      ; <CJK>
                 (#x5A75 . #x9097)      ; <CJK>
                 (#x5A76 . #x909B)      ; <CJK>
                 (#x5A77 . #x909D)      ; <CJK>
                 (#x5A78 . #x9099)      ; <CJK>
                 (#x5A79 . #x90AC)      ; <CJK>
                 (#x5A7A . #x90A1)      ; <CJK>
                 (#x5A7B . #x90B4)      ; <CJK>
                 (#x5A7C . #x90B3)      ; <CJK>
                 (#x5A7D . #x90B6)      ; <CJK>
                 (#x5A7E . #x90BA)      ; <CJK>
                 (#x5B21 . #x90B8)      ; <CJK>
                 (#x5B22 . #x90B0)      ; <CJK>
                 (#x5B23 . #x90CF)      ; <CJK>
                 (#x5B24 . #x90C5)      ; <CJK>
                 (#x5B25 . #x90BE)      ; <CJK>
                 (#x5B26 . #x90D0)      ; <CJK>
                 (#x5B27 . #x90C4)      ; <CJK>
                 (#x5B28 . #x90C7)      ; <CJK>
                 (#x5B29 . #x90D3)      ; <CJK>
                 (#x5B2A . #x90E6)      ; <CJK>
                 (#x5B2B . #x90E2)      ; <CJK>
                 (#x5B2C . #x90DC)      ; <CJK>
                 (#x5B2D . #x90D7)      ; <CJK>
                 (#x5B2E . #x90DB)      ; <CJK>
                 (#x5B2F . #x90EB)      ; <CJK>
                 (#x5B30 . #x90EF)      ; <CJK>
                 (#x5B31 . #x90FE)      ; <CJK>
                 (#x5B32 . #x9104)      ; <CJK>
                 (#x5B33 . #x9122)      ; <CJK>
                 (#x5B34 . #x911E)      ; <CJK>
                 (#x5B35 . #x9123)      ; <CJK>
                 (#x5B36 . #x9131)      ; <CJK>
                 (#x5B37 . #x912F)      ; <CJK>
                 (#x5B38 . #x9139)      ; <CJK>
                 (#x5B39 . #x9143)      ; <CJK>
                 (#x5B3A . #x9146)      ; <CJK>
                 (#x5B3B . #x520D)      ; <CJK>
                 (#x5B3C . #x5942)      ; <CJK>
                 (#x5B3D . #x52A2)      ; <CJK>
                 (#x5B3E . #x52AC)      ; <CJK>
                 (#x5B3F . #x52AD)      ; <CJK>
                 (#x5B40 . #x52BE)      ; <CJK>
                 (#x5B41 . #x54FF)      ; <CJK>
                 (#x5B42 . #x52D0)      ; <CJK>
                 (#x5B43 . #x52D6)      ; <CJK>
                 (#x5B44 . #x52F0)      ; <CJK>
                 (#x5B45 . #x53DF)      ; <CJK>
                 (#x5B46 . #x71EE)      ; <CJK>
                 (#x5B47 . #x77CD)      ; <CJK>
                 (#x5B48 . #x5EF4)      ; <CJK>
                 (#x5B49 . #x51F5)      ; <CJK>
                 (#x5B4A . #x51FC)      ; <CJK>
                 (#x5B4B . #x9B2F)      ; <CJK>
                 (#x5B4C . #x53B6)      ; <CJK>
                 (#x5B4D . #x5F01)      ; <CJK>
                 (#x5B4E . #x755A)      ; <CJK>
                 (#x5B4F . #x5DEF)      ; <CJK>
                 (#x5B50 . #x574C)      ; <CJK>
                 (#x5B51 . #x57A9)      ; <CJK>
                 (#x5B52 . #x57A1)      ; <CJK>
                 (#x5B53 . #x587E)      ; <CJK>
                 (#x5B54 . #x58BC)      ; <CJK>
                 (#x5B55 . #x58C5)      ; <CJK>
                 (#x5B56 . #x58D1)      ; <CJK>
                 (#x5B57 . #x5729)      ; <CJK>
                 (#x5B58 . #x572C)      ; <CJK>
                 (#x5B59 . #x572A)      ; <CJK>
                 (#x5B5A . #x5733)      ; <CJK>
                 (#x5B5B . #x5739)      ; <CJK>
                 (#x5B5C . #x572E)      ; <CJK>
                 (#x5B5D . #x572F)      ; <CJK>
                 (#x5B5E . #x575C)      ; <CJK>
                 (#x5B5F . #x573B)      ; <CJK>
                 (#x5B60 . #x5742)      ; <CJK>
                 (#x5B61 . #x5769)      ; <CJK>
                 (#x5B62 . #x5785)      ; <CJK>
                 (#x5B63 . #x576B)      ; <CJK>
                 (#x5B64 . #x5786)      ; <CJK>
                 (#x5B65 . #x577C)      ; <CJK>
                 (#x5B66 . #x577B)      ; <CJK>
                 (#x5B67 . #x5768)      ; <CJK>
                 (#x5B68 . #x576D)      ; <CJK>
                 (#x5B69 . #x5776)      ; <CJK>
                 (#x5B6A . #x5773)      ; <CJK>
                 (#x5B6B . #x57AD)      ; <CJK>
                 (#x5B6C . #x57A4)      ; <CJK>
                 (#x5B6D . #x578C)      ; <CJK>
                 (#x5B6E . #x57B2)      ; <CJK>
                 (#x5B6F . #x57CF)      ; <CJK>
                 (#x5B70 . #x57A7)      ; <CJK>
                 (#x5B71 . #x57B4)      ; <CJK>
                 (#x5B72 . #x5793)      ; <CJK>
                 (#x5B73 . #x57A0)      ; <CJK>
                 (#x5B74 . #x57D5)      ; <CJK>
                 (#x5B75 . #x57D8)      ; <CJK>
                 (#x5B76 . #x57DA)      ; <CJK>
                 (#x5B77 . #x57D9)      ; <CJK>
                 (#x5B78 . #x57D2)      ; <CJK>
                 (#x5B79 . #x57B8)      ; <CJK>
                 (#x5B7A . #x57F4)      ; <CJK>
                 (#x5B7B . #x57EF)      ; <CJK>
                 (#x5B7C . #x57F8)      ; <CJK>
                 (#x5B7D . #x57E4)      ; <CJK>
                 (#x5B7E . #x57DD)      ; <CJK>
                 (#x5C21 . #x580B)      ; <CJK>
                 (#x5C22 . #x580D)      ; <CJK>
                 (#x5C23 . #x57FD)      ; <CJK>
                 (#x5C24 . #x57ED)      ; <CJK>
                 (#x5C25 . #x5800)      ; <CJK>
                 (#x5C26 . #x581E)      ; <CJK>
                 (#x5C27 . #x5819)      ; <CJK>
                 (#x5C28 . #x5844)      ; <CJK>
                 (#x5C29 . #x5820)      ; <CJK>
                 (#x5C2A . #x5865)      ; <CJK>
                 (#x5C2B . #x586C)      ; <CJK>
                 (#x5C2C . #x5881)      ; <CJK>
                 (#x5C2D . #x5889)      ; <CJK>
                 (#x5C2E . #x589A)      ; <CJK>
                 (#x5C2F . #x5880)      ; <CJK>
                 (#x5C30 . #x99A8)      ; <CJK>
                 (#x5C31 . #x9F19)      ; <CJK>
                 (#x5C32 . #x61FF)      ; <CJK>
                 (#x5C33 . #x8279)      ; <CJK>
                 (#x5C34 . #x827D)      ; <CJK>
                 (#x5C35 . #x827F)      ; <CJK>
                 (#x5C36 . #x828F)      ; <CJK>
                 (#x5C37 . #x828A)      ; <CJK>
                 (#x5C38 . #x82A8)      ; <CJK>
                 (#x5C39 . #x8284)      ; <CJK>
                 (#x5C3A . #x828E)      ; <CJK>
                 (#x5C3B . #x8291)      ; <CJK>
                 (#x5C3C . #x8297)      ; <CJK>
                 (#x5C3D . #x8299)      ; <CJK>
                 (#x5C3E . #x82AB)      ; <CJK>
                 (#x5C3F . #x82B8)      ; <CJK>
                 (#x5C40 . #x82BE)      ; <CJK>
                 (#x5C41 . #x82B0)      ; <CJK>
                 (#x5C42 . #x82C8)      ; <CJK>
                 (#x5C43 . #x82CA)      ; <CJK>
                 (#x5C44 . #x82E3)      ; <CJK>
                 (#x5C45 . #x8298)      ; <CJK>
                 (#x5C46 . #x82B7)      ; <CJK>
                 (#x5C47 . #x82AE)      ; <CJK>
                 (#x5C48 . #x82CB)      ; <CJK>
                 (#x5C49 . #x82CC)      ; <CJK>
                 (#x5C4A . #x82C1)      ; <CJK>
                 (#x5C4B . #x82A9)      ; <CJK>
                 (#x5C4C . #x82B4)      ; <CJK>
                 (#x5C4D . #x82A1)      ; <CJK>
                 (#x5C4E . #x82AA)      ; <CJK>
                 (#x5C4F . #x829F)      ; <CJK>
                 (#x5C50 . #x82C4)      ; <CJK>
                 (#x5C51 . #x82CE)      ; <CJK>
                 (#x5C52 . #x82A4)      ; <CJK>
                 (#x5C53 . #x82E1)      ; <CJK>
                 (#x5C54 . #x8309)      ; <CJK>
                 (#x5C55 . #x82F7)      ; <CJK>
                 (#x5C56 . #x82E4)      ; <CJK>
                 (#x5C57 . #x830F)      ; <CJK>
                 (#x5C58 . #x8307)      ; <CJK>
                 (#x5C59 . #x82DC)      ; <CJK>
                 (#x5C5A . #x82F4)      ; <CJK>
                 (#x5C5B . #x82D2)      ; <CJK>
                 (#x5C5C . #x82D8)      ; <CJK>
                 (#x5C5D . #x830C)      ; <CJK>
                 (#x5C5E . #x82FB)      ; <CJK>
                 (#x5C5F . #x82D3)      ; <CJK>
                 (#x5C60 . #x8311)      ; <CJK>
                 (#x5C61 . #x831A)      ; <CJK>
                 (#x5C62 . #x8306)      ; <CJK>
                 (#x5C63 . #x8314)      ; <CJK>
                 (#x5C64 . #x8315)      ; <CJK>
                 (#x5C65 . #x82E0)      ; <CJK>
                 (#x5C66 . #x82D5)      ; <CJK>
                 (#x5C67 . #x831C)      ; <CJK>
                 (#x5C68 . #x8351)      ; <CJK>
                 (#x5C69 . #x835B)      ; <CJK>
                 (#x5C6A . #x835C)      ; <CJK>
                 (#x5C6B . #x8308)      ; <CJK>
                 (#x5C6C . #x8392)      ; <CJK>
                 (#x5C6D . #x833C)      ; <CJK>
                 (#x5C6E . #x8334)      ; <CJK>
                 (#x5C6F . #x8331)      ; <CJK>
                 (#x5C70 . #x839B)      ; <CJK>
                 (#x5C71 . #x835E)      ; <CJK>
                 (#x5C72 . #x832F)      ; <CJK>
                 (#x5C73 . #x834F)      ; <CJK>
                 (#x5C74 . #x8347)      ; <CJK>
                 (#x5C75 . #x8343)      ; <CJK>
                 (#x5C76 . #x835F)      ; <CJK>
                 (#x5C77 . #x8340)      ; <CJK>
                 (#x5C78 . #x8317)      ; <CJK>
                 (#x5C79 . #x8360)      ; <CJK>
                 (#x5C7A . #x832D)      ; <CJK>
                 (#x5C7B . #x833A)      ; <CJK>
                 (#x5C7C . #x8333)      ; <CJK>
                 (#x5C7D . #x8366)      ; <CJK>
                 (#x5C7E . #x8365)      ; <CJK>
                 (#x5D21 . #x8368)      ; <CJK>
                 (#x5D22 . #x831B)      ; <CJK>
                 (#x5D23 . #x8369)      ; <CJK>
                 (#x5D24 . #x836C)      ; <CJK>
                 (#x5D25 . #x836A)      ; <CJK>
                 (#x5D26 . #x836D)      ; <CJK>
                 (#x5D27 . #x836E)      ; <CJK>
                 (#x5D28 . #x83B0)      ; <CJK>
                 (#x5D29 . #x8378)      ; <CJK>
                 (#x5D2A . #x83B3)      ; <CJK>
                 (#x5D2B . #x83B4)      ; <CJK>
                 (#x5D2C . #x83A0)      ; <CJK>
                 (#x5D2D . #x83AA)      ; <CJK>
                 (#x5D2E . #x8393)      ; <CJK>
                 (#x5D2F . #x839C)      ; <CJK>
                 (#x5D30 . #x8385)      ; <CJK>
                 (#x5D31 . #x837C)      ; <CJK>
                 (#x5D32 . #x83B6)      ; <CJK>
                 (#x5D33 . #x83A9)      ; <CJK>
                 (#x5D34 . #x837D)      ; <CJK>
                 (#x5D35 . #x83B8)      ; <CJK>
                 (#x5D36 . #x837B)      ; <CJK>
                 (#x5D37 . #x8398)      ; <CJK>
                 (#x5D38 . #x839E)      ; <CJK>
                 (#x5D39 . #x83A8)      ; <CJK>
                 (#x5D3A . #x83BA)      ; <CJK>
                 (#x5D3B . #x83BC)      ; <CJK>
                 (#x5D3C . #x83C1)      ; <CJK>
                 (#x5D3D . #x8401)      ; <CJK>
                 (#x5D3E . #x83E5)      ; <CJK>
                 (#x5D3F . #x83D8)      ; <CJK>
                 (#x5D40 . #x5807)      ; <CJK>
                 (#x5D41 . #x8418)      ; <CJK>
                 (#x5D42 . #x840B)      ; <CJK>
                 (#x5D43 . #x83DD)      ; <CJK>
                 (#x5D44 . #x83FD)      ; <CJK>
                 (#x5D45 . #x83D6)      ; <CJK>
                 (#x5D46 . #x841C)      ; <CJK>
                 (#x5D47 . #x8438)      ; <CJK>
                 (#x5D48 . #x8411)      ; <CJK>
                 (#x5D49 . #x8406)      ; <CJK>
                 (#x5D4A . #x83D4)      ; <CJK>
                 (#x5D4B . #x83DF)      ; <CJK>
                 (#x5D4C . #x840F)      ; <CJK>
                 (#x5D4D . #x8403)      ; <CJK>
                 (#x5D4E . #x83F8)      ; <CJK>
                 (#x5D4F . #x83F9)      ; <CJK>
                 (#x5D50 . #x83EA)      ; <CJK>
                 (#x5D51 . #x83C5)      ; <CJK>
                 (#x5D52 . #x83C0)      ; <CJK>
                 (#x5D53 . #x8426)      ; <CJK>
                 (#x5D54 . #x83F0)      ; <CJK>
                 (#x5D55 . #x83E1)      ; <CJK>
                 (#x5D56 . #x845C)      ; <CJK>
                 (#x5D57 . #x8451)      ; <CJK>
                 (#x5D58 . #x845A)      ; <CJK>
                 (#x5D59 . #x8459)      ; <CJK>
                 (#x5D5A . #x8473)      ; <CJK>
                 (#x5D5B . #x8487)      ; <CJK>
                 (#x5D5C . #x8488)      ; <CJK>
                 (#x5D5D . #x847A)      ; <CJK>
                 (#x5D5E . #x8489)      ; <CJK>
                 (#x5D5F . #x8478)      ; <CJK>
                 (#x5D60 . #x843C)      ; <CJK>
                 (#x5D61 . #x8446)      ; <CJK>
                 (#x5D62 . #x8469)      ; <CJK>
                 (#x5D63 . #x8476)      ; <CJK>
                 (#x5D64 . #x848C)      ; <CJK>
                 (#x5D65 . #x848E)      ; <CJK>
                 (#x5D66 . #x8431)      ; <CJK>
                 (#x5D67 . #x846D)      ; <CJK>
                 (#x5D68 . #x84C1)      ; <CJK>
                 (#x5D69 . #x84CD)      ; <CJK>
                 (#x5D6A . #x84D0)      ; <CJK>
                 (#x5D6B . #x84E6)      ; <CJK>
                 (#x5D6C . #x84BD)      ; <CJK>
                 (#x5D6D . #x84D3)      ; <CJK>
                 (#x5D6E . #x84CA)      ; <CJK>
                 (#x5D6F . #x84BF)      ; <CJK>
                 (#x5D70 . #x84BA)      ; <CJK>
                 (#x5D71 . #x84E0)      ; <CJK>
                 (#x5D72 . #x84A1)      ; <CJK>
                 (#x5D73 . #x84B9)      ; <CJK>
                 (#x5D74 . #x84B4)      ; <CJK>
                 (#x5D75 . #x8497)      ; <CJK>
                 (#x5D76 . #x84E5)      ; <CJK>
                 (#x5D77 . #x84E3)      ; <CJK>
                 (#x5D78 . #x850C)      ; <CJK>
                 (#x5D79 . #x750D)      ; <CJK>
                 (#x5D7A . #x8538)      ; <CJK>
                 (#x5D7B . #x84F0)      ; <CJK>
                 (#x5D7C . #x8539)      ; <CJK>
                 (#x5D7D . #x851F)      ; <CJK>
                 (#x5D7E . #x853A)      ; <CJK>
                 (#x5E21 . #x8556)      ; <CJK>
                 (#x5E22 . #x853B)      ; <CJK>
                 (#x5E23 . #x84FF)      ; <CJK>
                 (#x5E24 . #x84FC)      ; <CJK>
                 (#x5E25 . #x8559)      ; <CJK>
                 (#x5E26 . #x8548)      ; <CJK>
                 (#x5E27 . #x8568)      ; <CJK>
                 (#x5E28 . #x8564)      ; <CJK>
                 (#x5E29 . #x855E)      ; <CJK>
                 (#x5E2A . #x857A)      ; <CJK>
                 (#x5E2B . #x77A2)      ; <CJK>
                 (#x5E2C . #x8543)      ; <CJK>
                 (#x5E2D . #x8572)      ; <CJK>
                 (#x5E2E . #x857B)      ; <CJK>
                 (#x5E2F . #x85A4)      ; <CJK>
                 (#x5E30 . #x85A8)      ; <CJK>
                 (#x5E31 . #x8587)      ; <CJK>
                 (#x5E32 . #x858F)      ; <CJK>
                 (#x5E33 . #x8579)      ; <CJK>
                 (#x5E34 . #x85AE)      ; <CJK>
                 (#x5E35 . #x859C)      ; <CJK>
                 (#x5E36 . #x8585)      ; <CJK>
                 (#x5E37 . #x85B9)      ; <CJK>
                 (#x5E38 . #x85B7)      ; <CJK>
                 (#x5E39 . #x85B0)      ; <CJK>
                 (#x5E3A . #x85D3)      ; <CJK>
                 (#x5E3B . #x85C1)      ; <CJK>
                 (#x5E3C . #x85DC)      ; <CJK>
                 (#x5E3D . #x85FF)      ; <CJK>
                 (#x5E3E . #x8627)      ; <CJK>
                 (#x5E3F . #x8605)      ; <CJK>
                 (#x5E40 . #x8629)      ; <CJK>
                 (#x5E41 . #x8616)      ; <CJK>
                 (#x5E42 . #x863C)      ; <CJK>
                 (#x5E43 . #x5EFE)      ; <CJK>
                 (#x5E44 . #x5F08)      ; <CJK>
                 (#x5E45 . #x593C)      ; <CJK>
                 (#x5E46 . #x5941)      ; <CJK>
                 (#x5E47 . #x8037)      ; <CJK>
                 (#x5E48 . #x5955)      ; <CJK>
                 (#x5E49 . #x595A)      ; <CJK>
                 (#x5E4A . #x5958)      ; <CJK>
                 (#x5E4B . #x530F)      ; <CJK>
                 (#x5E4C . #x5C22)      ; <CJK>
                 (#x5E4D . #x5C25)      ; <CJK>
                 (#x5E4E . #x5C2C)      ; <CJK>
                 (#x5E4F . #x5C34)      ; <CJK>
                 (#x5E50 . #x624C)      ; <CJK>
                 (#x5E51 . #x626A)      ; <CJK>
                 (#x5E52 . #x629F)      ; <CJK>
                 (#x5E53 . #x62BB)      ; <CJK>
                 (#x5E54 . #x62CA)      ; <CJK>
                 (#x5E55 . #x62DA)      ; <CJK>
                 (#x5E56 . #x62D7)      ; <CJK>
                 (#x5E57 . #x62EE)      ; <CJK>
                 (#x5E58 . #x6322)      ; <CJK>
                 (#x5E59 . #x62F6)      ; <CJK>
                 (#x5E5A . #x6339)      ; <CJK>
                 (#x5E5B . #x634B)      ; <CJK>
                 (#x5E5C . #x6343)      ; <CJK>
                 (#x5E5D . #x63AD)      ; <CJK>
                 (#x5E5E . #x63F6)      ; <CJK>
                 (#x5E5F . #x6371)      ; <CJK>
                 (#x5E60 . #x637A)      ; <CJK>
                 (#x5E61 . #x638E)      ; <CJK>
                 (#x5E62 . #x63B4)      ; <CJK>
                 (#x5E63 . #x636D)      ; <CJK>
                 (#x5E64 . #x63AC)      ; <CJK>
                 (#x5E65 . #x638A)      ; <CJK>
                 (#x5E66 . #x6369)      ; <CJK>
                 (#x5E67 . #x63AE)      ; <CJK>
                 (#x5E68 . #x63BC)      ; <CJK>
                 (#x5E69 . #x63F2)      ; <CJK>
                 (#x5E6A . #x63F8)      ; <CJK>
                 (#x5E6B . #x63E0)      ; <CJK>
                 (#x5E6C . #x63FF)      ; <CJK>
                 (#x5E6D . #x63C4)      ; <CJK>
                 (#x5E6E . #x63DE)      ; <CJK>
                 (#x5E6F . #x63CE)      ; <CJK>
                 (#x5E70 . #x6452)      ; <CJK>
                 (#x5E71 . #x63C6)      ; <CJK>
                 (#x5E72 . #x63BE)      ; <CJK>
                 (#x5E73 . #x6445)      ; <CJK>
                 (#x5E74 . #x6441)      ; <CJK>
                 (#x5E75 . #x640B)      ; <CJK>
                 (#x5E76 . #x641B)      ; <CJK>
                 (#x5E77 . #x6420)      ; <CJK>
                 (#x5E78 . #x640C)      ; <CJK>
                 (#x5E79 . #x6426)      ; <CJK>
                 (#x5E7A . #x6421)      ; <CJK>
                 (#x5E7B . #x645E)      ; <CJK>
                 (#x5E7C . #x6484)      ; <CJK>
                 (#x5E7D . #x646D)      ; <CJK>
                 (#x5E7E . #x6496)      ; <CJK>
                 (#x5F21 . #x647A)      ; <CJK>
                 (#x5F22 . #x64B7)      ; <CJK>
                 (#x5F23 . #x64B8)      ; <CJK>
                 (#x5F24 . #x6499)      ; <CJK>
                 (#x5F25 . #x64BA)      ; <CJK>
                 (#x5F26 . #x64C0)      ; <CJK>
                 (#x5F27 . #x64D0)      ; <CJK>
                 (#x5F28 . #x64D7)      ; <CJK>
                 (#x5F29 . #x64E4)      ; <CJK>
                 (#x5F2A . #x64E2)      ; <CJK>
                 (#x5F2B . #x6509)      ; <CJK>
                 (#x5F2C . #x6525)      ; <CJK>
                 (#x5F2D . #x652E)      ; <CJK>
                 (#x5F2E . #x5F0B)      ; <CJK>
                 (#x5F2F . #x5FD2)      ; <CJK>
                 (#x5F30 . #x7519)      ; <CJK>
                 (#x5F31 . #x5F11)      ; <CJK>
                 (#x5F32 . #x535F)      ; <CJK>
                 (#x5F33 . #x53F1)      ; <CJK>
                 (#x5F34 . #x53FD)      ; <CJK>
                 (#x5F35 . #x53E9)      ; <CJK>
                 (#x5F36 . #x53E8)      ; <CJK>
                 (#x5F37 . #x53FB)      ; <CJK>
                 (#x5F38 . #x5412)      ; <CJK>
                 (#x5F39 . #x5416)      ; <CJK>
                 (#x5F3A . #x5406)      ; <CJK>
                 (#x5F3B . #x544B)      ; <CJK>
                 (#x5F3C . #x5452)      ; <CJK>
                 (#x5F3D . #x5453)      ; <CJK>
                 (#x5F3E . #x5454)      ; <CJK>
                 (#x5F3F . #x5456)      ; <CJK>
                 (#x5F40 . #x5443)      ; <CJK>
                 (#x5F41 . #x5421)      ; <CJK>
                 (#x5F42 . #x5457)      ; <CJK>
                 (#x5F43 . #x5459)      ; <CJK>
                 (#x5F44 . #x5423)      ; <CJK>
                 (#x5F45 . #x5432)      ; <CJK>
                 (#x5F46 . #x5482)      ; <CJK>
                 (#x5F47 . #x5494)      ; <CJK>
                 (#x5F48 . #x5477)      ; <CJK>
                 (#x5F49 . #x5471)      ; <CJK>
                 (#x5F4A . #x5464)      ; <CJK>
                 (#x5F4B . #x549A)      ; <CJK>
                 (#x5F4C . #x549B)      ; <CJK>
                 (#x5F4D . #x5484)      ; <CJK>
                 (#x5F4E . #x5476)      ; <CJK>
                 (#x5F4F . #x5466)      ; <CJK>
                 (#x5F50 . #x549D)      ; <CJK>
                 (#x5F51 . #x54D0)      ; <CJK>
                 (#x5F52 . #x54AD)      ; <CJK>
                 (#x5F53 . #x54C2)      ; <CJK>
                 (#x5F54 . #x54B4)      ; <CJK>
                 (#x5F55 . #x54D2)      ; <CJK>
                 (#x5F56 . #x54A7)      ; <CJK>
                 (#x5F57 . #x54A6)      ; <CJK>
                 (#x5F58 . #x54D3)      ; <CJK>
                 (#x5F59 . #x54D4)      ; <CJK>
                 (#x5F5A . #x5472)      ; <CJK>
                 (#x5F5B . #x54A3)      ; <CJK>
                 (#x5F5C . #x54D5)      ; <CJK>
                 (#x5F5D . #x54BB)      ; <CJK>
                 (#x5F5E . #x54BF)      ; <CJK>
                 (#x5F5F . #x54CC)      ; <CJK>
                 (#x5F60 . #x54D9)      ; <CJK>
                 (#x5F61 . #x54DA)      ; <CJK>
                 (#x5F62 . #x54DC)      ; <CJK>
                 (#x5F63 . #x54A9)      ; <CJK>
                 (#x5F64 . #x54AA)      ; <CJK>
                 (#x5F65 . #x54A4)      ; <CJK>
                 (#x5F66 . #x54DD)      ; <CJK>
                 (#x5F67 . #x54CF)      ; <CJK>
                 (#x5F68 . #x54DE)      ; <CJK>
                 (#x5F69 . #x551B)      ; <CJK>
                 (#x5F6A . #x54E7)      ; <CJK>
                 (#x5F6B . #x5520)      ; <CJK>
                 (#x5F6C . #x54FD)      ; <CJK>
                 (#x5F6D . #x5514)      ; <CJK>
                 (#x5F6E . #x54F3)      ; <CJK>
                 (#x5F6F . #x5522)      ; <CJK>
                 (#x5F70 . #x5523)      ; <CJK>
                 (#x5F71 . #x550F)      ; <CJK>
                 (#x5F72 . #x5511)      ; <CJK>
                 (#x5F73 . #x5527)      ; <CJK>
                 (#x5F74 . #x552A)      ; <CJK>
                 (#x5F75 . #x5567)      ; <CJK>
                 (#x5F76 . #x558F)      ; <CJK>
                 (#x5F77 . #x55B5)      ; <CJK>
                 (#x5F78 . #x5549)      ; <CJK>
                 (#x5F79 . #x556D)      ; <CJK>
                 (#x5F7A . #x5541)      ; <CJK>
                 (#x5F7B . #x5555)      ; <CJK>
                 (#x5F7C . #x553F)      ; <CJK>
                 (#x5F7D . #x5550)      ; <CJK>
                 (#x5F7E . #x553C)      ; <CJK>
                 (#x6021 . #x5537)      ; <CJK>
                 (#x6022 . #x5556)      ; <CJK>
                 (#x6023 . #x5575)      ; <CJK>
                 (#x6024 . #x5576)      ; <CJK>
                 (#x6025 . #x5577)      ; <CJK>
                 (#x6026 . #x5533)      ; <CJK>
                 (#x6027 . #x5530)      ; <CJK>
                 (#x6028 . #x555C)      ; <CJK>
                 (#x6029 . #x558B)      ; <CJK>
                 (#x602A . #x55D2)      ; <CJK>
                 (#x602B . #x5583)      ; <CJK>
                 (#x602C . #x55B1)      ; <CJK>
                 (#x602D . #x55B9)      ; <CJK>
                 (#x602E . #x5588)      ; <CJK>
                 (#x602F . #x5581)      ; <CJK>
                 (#x6030 . #x559F)      ; <CJK>
                 (#x6031 . #x557E)      ; <CJK>
                 (#x6032 . #x55D6)      ; <CJK>
                 (#x6033 . #x5591)      ; <CJK>
                 (#x6034 . #x557B)      ; <CJK>
                 (#x6035 . #x55DF)      ; <CJK>
                 (#x6036 . #x55BD)      ; <CJK>
                 (#x6037 . #x55BE)      ; <CJK>
                 (#x6038 . #x5594)      ; <CJK>
                 (#x6039 . #x5599)      ; <CJK>
                 (#x603A . #x55EA)      ; <CJK>
                 (#x603B . #x55F7)      ; <CJK>
                 (#x603C . #x55C9)      ; <CJK>
                 (#x603D . #x561F)      ; <CJK>
                 (#x603E . #x55D1)      ; <CJK>
                 (#x603F . #x55EB)      ; <CJK>
                 (#x6040 . #x55EC)      ; <CJK>
                 (#x6041 . #x55D4)      ; <CJK>
                 (#x6042 . #x55E6)      ; <CJK>
                 (#x6043 . #x55DD)      ; <CJK>
                 (#x6044 . #x55C4)      ; <CJK>
                 (#x6045 . #x55EF)      ; <CJK>
                 (#x6046 . #x55E5)      ; <CJK>
                 (#x6047 . #x55F2)      ; <CJK>
                 (#x6048 . #x55F3)      ; <CJK>
                 (#x6049 . #x55CC)      ; <CJK>
                 (#x604A . #x55CD)      ; <CJK>
                 (#x604B . #x55E8)      ; <CJK>
                 (#x604C . #x55F5)      ; <CJK>
                 (#x604D . #x55E4)      ; <CJK>
                 (#x604E . #x8F94)      ; <CJK>
                 (#x604F . #x561E)      ; <CJK>
                 (#x6050 . #x5608)      ; <CJK>
                 (#x6051 . #x560C)      ; <CJK>
                 (#x6052 . #x5601)      ; <CJK>
                 (#x6053 . #x5624)      ; <CJK>
                 (#x6054 . #x5623)      ; <CJK>
                 (#x6055 . #x55FE)      ; <CJK>
                 (#x6056 . #x5600)      ; <CJK>
                 (#x6057 . #x5627)      ; <CJK>
                 (#x6058 . #x562D)      ; <CJK>
                 (#x6059 . #x5658)      ; <CJK>
                 (#x605A . #x5639)      ; <CJK>
                 (#x605B . #x5657)      ; <CJK>
                 (#x605C . #x562C)      ; <CJK>
                 (#x605D . #x564D)      ; <CJK>
                 (#x605E . #x5662)      ; <CJK>
                 (#x605F . #x5659)      ; <CJK>
                 (#x6060 . #x565C)      ; <CJK>
                 (#x6061 . #x564C)      ; <CJK>
                 (#x6062 . #x5654)      ; <CJK>
                 (#x6063 . #x5686)      ; <CJK>
                 (#x6064 . #x5664)      ; <CJK>
                 (#x6065 . #x5671)      ; <CJK>
                 (#x6066 . #x566B)      ; <CJK>
                 (#x6067 . #x567B)      ; <CJK>
                 (#x6068 . #x567C)      ; <CJK>
                 (#x6069 . #x5685)      ; <CJK>
                 (#x606A . #x5693)      ; <CJK>
                 (#x606B . #x56AF)      ; <CJK>
                 (#x606C . #x56D4)      ; <CJK>
                 (#x606D . #x56D7)      ; <CJK>
                 (#x606E . #x56DD)      ; <CJK>
                 (#x606F . #x56E1)      ; <CJK>
                 (#x6070 . #x56F5)      ; <CJK>
                 (#x6071 . #x56EB)      ; <CJK>
                 (#x6072 . #x56F9)      ; <CJK>
                 (#x6073 . #x56FF)      ; <CJK>
                 (#x6074 . #x5704)      ; <CJK>
                 (#x6075 . #x570A)      ; <CJK>
                 (#x6076 . #x5709)      ; <CJK>
                 (#x6077 . #x571C)      ; <CJK>
                 (#x6078 . #x5E0F)      ; <CJK>
                 (#x6079 . #x5E19)      ; <CJK>
                 (#x607A . #x5E14)      ; <CJK>
                 (#x607B . #x5E11)      ; <CJK>
                 (#x607C . #x5E31)      ; <CJK>
                 (#x607D . #x5E3B)      ; <CJK>
                 (#x607E . #x5E3C)      ; <CJK>
                 (#x6121 . #x5E37)      ; <CJK>
                 (#x6122 . #x5E44)      ; <CJK>
                 (#x6123 . #x5E54)      ; <CJK>
                 (#x6124 . #x5E5B)      ; <CJK>
                 (#x6125 . #x5E5E)      ; <CJK>
                 (#x6126 . #x5E61)      ; <CJK>
                 (#x6127 . #x5C8C)      ; <CJK>
                 (#x6128 . #x5C7A)      ; <CJK>
                 (#x6129 . #x5C8D)      ; <CJK>
                 (#x612A . #x5C90)      ; <CJK>
                 (#x612B . #x5C96)      ; <CJK>
                 (#x612C . #x5C88)      ; <CJK>
                 (#x612D . #x5C98)      ; <CJK>
                 (#x612E . #x5C99)      ; <CJK>
                 (#x612F . #x5C91)      ; <CJK>
                 (#x6130 . #x5C9A)      ; <CJK>
                 (#x6131 . #x5C9C)      ; <CJK>
                 (#x6132 . #x5CB5)      ; <CJK>
                 (#x6133 . #x5CA2)      ; <CJK>
                 (#x6134 . #x5CBD)      ; <CJK>
                 (#x6135 . #x5CAC)      ; <CJK>
                 (#x6136 . #x5CAB)      ; <CJK>
                 (#x6137 . #x5CB1)      ; <CJK>
                 (#x6138 . #x5CA3)      ; <CJK>
                 (#x6139 . #x5CC1)      ; <CJK>
                 (#x613A . #x5CB7)      ; <CJK>
                 (#x613B . #x5CC4)      ; <CJK>
                 (#x613C . #x5CD2)      ; <CJK>
                 (#x613D . #x5CE4)      ; <CJK>
                 (#x613E . #x5CCB)      ; <CJK>
                 (#x613F . #x5CE5)      ; <CJK>
                 (#x6140 . #x5D02)      ; <CJK>
                 (#x6141 . #x5D03)      ; <CJK>
                 (#x6142 . #x5D27)      ; <CJK>
                 (#x6143 . #x5D26)      ; <CJK>
                 (#x6144 . #x5D2E)      ; <CJK>
                 (#x6145 . #x5D24)      ; <CJK>
                 (#x6146 . #x5D1E)      ; <CJK>
                 (#x6147 . #x5D06)      ; <CJK>
                 (#x6148 . #x5D1B)      ; <CJK>
                 (#x6149 . #x5D58)      ; <CJK>
                 (#x614A . #x5D3E)      ; <CJK>
                 (#x614B . #x5D34)      ; <CJK>
                 (#x614C . #x5D3D)      ; <CJK>
                 (#x614D . #x5D6C)      ; <CJK>
                 (#x614E . #x5D5B)      ; <CJK>
                 (#x614F . #x5D6F)      ; <CJK>
                 (#x6150 . #x5D5D)      ; <CJK>
                 (#x6151 . #x5D6B)      ; <CJK>
                 (#x6152 . #x5D4B)      ; <CJK>
                 (#x6153 . #x5D4A)      ; <CJK>
                 (#x6154 . #x5D69)      ; <CJK>
                 (#x6155 . #x5D74)      ; <CJK>
                 (#x6156 . #x5D82)      ; <CJK>
                 (#x6157 . #x5D99)      ; <CJK>
                 (#x6158 . #x5D9D)      ; <CJK>
                 (#x6159 . #x8C73)      ; <CJK>
                 (#x615A . #x5DB7)      ; <CJK>
                 (#x615B . #x5DC5)      ; <CJK>
                 (#x615C . #x5F73)      ; <CJK>
                 (#x615D . #x5F77)      ; <CJK>
                 (#x615E . #x5F82)      ; <CJK>
                 (#x615F . #x5F87)      ; <CJK>
                 (#x6160 . #x5F89)      ; <CJK>
                 (#x6161 . #x5F8C)      ; <CJK>
                 (#x6162 . #x5F95)      ; <CJK>
                 (#x6163 . #x5F99)      ; <CJK>
                 (#x6164 . #x5F9C)      ; <CJK>
                 (#x6165 . #x5FA8)      ; <CJK>
                 (#x6166 . #x5FAD)      ; <CJK>
                 (#x6167 . #x5FB5)      ; <CJK>
                 (#x6168 . #x5FBC)      ; <CJK>
                 (#x6169 . #x8862)      ; <CJK>
                 (#x616A . #x5F61)      ; <CJK>
                 (#x616B . #x72AD)      ; <CJK>
                 (#x616C . #x72B0)      ; <CJK>
                 (#x616D . #x72B4)      ; <CJK>
                 (#x616E . #x72B7)      ; <CJK>
                 (#x616F . #x72B8)      ; <CJK>
                 (#x6170 . #x72C3)      ; <CJK>
                 (#x6171 . #x72C1)      ; <CJK>
                 (#x6172 . #x72CE)      ; <CJK>
                 (#x6173 . #x72CD)      ; <CJK>
                 (#x6174 . #x72D2)      ; <CJK>
                 (#x6175 . #x72E8)      ; <CJK>
                 (#x6176 . #x72EF)      ; <CJK>
                 (#x6177 . #x72E9)      ; <CJK>
                 (#x6178 . #x72F2)      ; <CJK>
                 (#x6179 . #x72F4)      ; <CJK>
                 (#x617A . #x72F7)      ; <CJK>
                 (#x617B . #x7301)      ; <CJK>
                 (#x617C . #x72F3)      ; <CJK>
                 (#x617D . #x7303)      ; <CJK>
                 (#x617E . #x72FA)      ; <CJK>
                 (#x6221 . #x72FB)      ; <CJK>
                 (#x6222 . #x7317)      ; <CJK>
                 (#x6223 . #x7313)      ; <CJK>
                 (#x6224 . #x7321)      ; <CJK>
                 (#x6225 . #x730A)      ; <CJK>
                 (#x6226 . #x731E)      ; <CJK>
                 (#x6227 . #x731D)      ; <CJK>
                 (#x6228 . #x7315)      ; <CJK>
                 (#x6229 . #x7322)      ; <CJK>
                 (#x622A . #x7339)      ; <CJK>
                 (#x622B . #x7325)      ; <CJK>
                 (#x622C . #x732C)      ; <CJK>
                 (#x622D . #x7338)      ; <CJK>
                 (#x622E . #x7331)      ; <CJK>
                 (#x622F . #x7350)      ; <CJK>
                 (#x6230 . #x734D)      ; <CJK>
                 (#x6231 . #x7357)      ; <CJK>
                 (#x6232 . #x7360)      ; <CJK>
                 (#x6233 . #x736C)      ; <CJK>
                 (#x6234 . #x736F)      ; <CJK>
                 (#x6235 . #x737E)      ; <CJK>
                 (#x6236 . #x821B)      ; <CJK>
                 (#x6237 . #x5925)      ; <CJK>
                 (#x6238 . #x98E7)      ; <CJK>
                 (#x6239 . #x5924)      ; <CJK>
                 (#x623A . #x5902)      ; <CJK>
                 (#x623B . #x9963)      ; <CJK>
                 (#x623C . #x9967)      ; <CJK>
                 (#x623D . #x9968)      ; <CJK>
                 (#x623E . #x9969)      ; <CJK>
                 (#x623F . #x996A)      ; <CJK>
                 (#x6240 . #x996B)      ; <CJK>
                 (#x6241 . #x996C)      ; <CJK>
                 (#x6242 . #x9974)      ; <CJK>
                 (#x6243 . #x9977)      ; <CJK>
                 (#x6244 . #x997D)      ; <CJK>
                 (#x6245 . #x9980)      ; <CJK>
                 (#x6246 . #x9984)      ; <CJK>
                 (#x6247 . #x9987)      ; <CJK>
                 (#x6248 . #x998A)      ; <CJK>
                 (#x6249 . #x998D)      ; <CJK>
                 (#x624A . #x9990)      ; <CJK>
                 (#x624B . #x9991)      ; <CJK>
                 (#x624C . #x9993)      ; <CJK>
                 (#x624D . #x9994)      ; <CJK>
                 (#x624E . #x9995)      ; <CJK>
                 (#x624F . #x5E80)      ; <CJK>
                 (#x6250 . #x5E91)      ; <CJK>
                 (#x6251 . #x5E8B)      ; <CJK>
                 (#x6252 . #x5E96)      ; <CJK>
                 (#x6253 . #x5EA5)      ; <CJK>
                 (#x6254 . #x5EA0)      ; <CJK>
                 (#x6255 . #x5EB9)      ; <CJK>
                 (#x6256 . #x5EB5)      ; <CJK>
                 (#x6257 . #x5EBE)      ; <CJK>
                 (#x6258 . #x5EB3)      ; <CJK>
                 (#x6259 . #x8D53)      ; <CJK>
                 (#x625A . #x5ED2)      ; <CJK>
                 (#x625B . #x5ED1)      ; <CJK>
                 (#x625C . #x5EDB)      ; <CJK>
                 (#x625D . #x5EE8)      ; <CJK>
                 (#x625E . #x5EEA)      ; <CJK>
                 (#x625F . #x81BA)      ; <CJK>
                 (#x6260 . #x5FC4)      ; <CJK>
                 (#x6261 . #x5FC9)      ; <CJK>
                 (#x6262 . #x5FD6)      ; <CJK>
                 (#x6263 . #x5FCF)      ; <CJK>
                 (#x6264 . #x6003)      ; <CJK>
                 (#x6265 . #x5FEE)      ; <CJK>
                 (#x6266 . #x6004)      ; <CJK>
                 (#x6267 . #x5FE1)      ; <CJK>
                 (#x6268 . #x5FE4)      ; <CJK>
                 (#x6269 . #x5FFE)      ; <CJK>
                 (#x626A . #x6005)      ; <CJK>
                 (#x626B . #x6006)      ; <CJK>
                 (#x626C . #x5FEA)      ; <CJK>
                 (#x626D . #x5FED)      ; <CJK>
                 (#x626E . #x5FF8)      ; <CJK>
                 (#x626F . #x6019)      ; <CJK>
                 (#x6270 . #x6035)      ; <CJK>
                 (#x6271 . #x6026)      ; <CJK>
                 (#x6272 . #x601B)      ; <CJK>
                 (#x6273 . #x600F)      ; <CJK>
                 (#x6274 . #x600D)      ; <CJK>
                 (#x6275 . #x6029)      ; <CJK>
                 (#x6276 . #x602B)      ; <CJK>
                 (#x6277 . #x600A)      ; <CJK>
                 (#x6278 . #x603F)      ; <CJK>
                 (#x6279 . #x6021)      ; <CJK>
                 (#x627A . #x6078)      ; <CJK>
                 (#x627B . #x6079)      ; <CJK>
                 (#x627C . #x607B)      ; <CJK>
                 (#x627D . #x607A)      ; <CJK>
                 (#x627E . #x6042)      ; <CJK>
                 (#x6321 . #x606A)      ; <CJK>
                 (#x6322 . #x607D)      ; <CJK>
                 (#x6323 . #x6096)      ; <CJK>
                 (#x6324 . #x609A)      ; <CJK>
                 (#x6325 . #x60AD)      ; <CJK>
                 (#x6326 . #x609D)      ; <CJK>
                 (#x6327 . #x6083)      ; <CJK>
                 (#x6328 . #x6092)      ; <CJK>
                 (#x6329 . #x608C)      ; <CJK>
                 (#x632A . #x609B)      ; <CJK>
                 (#x632B . #x60EC)      ; <CJK>
                 (#x632C . #x60BB)      ; <CJK>
                 (#x632D . #x60B1)      ; <CJK>
                 (#x632E . #x60DD)      ; <CJK>
                 (#x632F . #x60D8)      ; <CJK>
                 (#x6330 . #x60C6)      ; <CJK>
                 (#x6331 . #x60DA)      ; <CJK>
                 (#x6332 . #x60B4)      ; <CJK>
                 (#x6333 . #x6120)      ; <CJK>
                 (#x6334 . #x6126)      ; <CJK>
                 (#x6335 . #x6115)      ; <CJK>
                 (#x6336 . #x6123)      ; <CJK>
                 (#x6337 . #x60F4)      ; <CJK>
                 (#x6338 . #x6100)      ; <CJK>
                 (#x6339 . #x610E)      ; <CJK>
                 (#x633A . #x612B)      ; <CJK>
                 (#x633B . #x614A)      ; <CJK>
                 (#x633C . #x6175)      ; <CJK>
                 (#x633D . #x61AC)      ; <CJK>
                 (#x633E . #x6194)      ; <CJK>
                 (#x633F . #x61A7)      ; <CJK>
                 (#x6340 . #x61B7)      ; <CJK>
                 (#x6341 . #x61D4)      ; <CJK>
                 (#x6342 . #x61F5)      ; <CJK>
                 (#x6343 . #x5FDD)      ; <CJK>
                 (#x6344 . #x96B3)      ; <CJK>
                 (#x6345 . #x95E9)      ; <CJK>
                 (#x6346 . #x95EB)      ; <CJK>
                 (#x6347 . #x95F1)      ; <CJK>
                 (#x6348 . #x95F3)      ; <CJK>
                 (#x6349 . #x95F5)      ; <CJK>
                 (#x634A . #x95F6)      ; <CJK>
                 (#x634B . #x95FC)      ; <CJK>
                 (#x634C . #x95FE)      ; <CJK>
                 (#x634D . #x9603)      ; <CJK>
                 (#x634E . #x9604)      ; <CJK>
                 (#x634F . #x9606)      ; <CJK>
                 (#x6350 . #x9608)      ; <CJK>
                 (#x6351 . #x960A)      ; <CJK>
                 (#x6352 . #x960B)      ; <CJK>
                 (#x6353 . #x960C)      ; <CJK>
                 (#x6354 . #x960D)      ; <CJK>
                 (#x6355 . #x960F)      ; <CJK>
                 (#x6356 . #x9612)      ; <CJK>
                 (#x6357 . #x9615)      ; <CJK>
                 (#x6358 . #x9616)      ; <CJK>
                 (#x6359 . #x9617)      ; <CJK>
                 (#x635A . #x9619)      ; <CJK>
                 (#x635B . #x961A)      ; <CJK>
                 (#x635C . #x4E2C)      ; <CJK>
                 (#x635D . #x723F)      ; <CJK>
                 (#x635E . #x6215)      ; <CJK>
                 (#x635F . #x6C35)      ; <CJK>
                 (#x6360 . #x6C54)      ; <CJK>
                 (#x6361 . #x6C5C)      ; <CJK>
                 (#x6362 . #x6C4A)      ; <CJK>
                 (#x6363 . #x6CA3)      ; <CJK>
                 (#x6364 . #x6C85)      ; <CJK>
                 (#x6365 . #x6C90)      ; <CJK>
                 (#x6366 . #x6C94)      ; <CJK>
                 (#x6367 . #x6C8C)      ; <CJK>
                 (#x6368 . #x6C68)      ; <CJK>
                 (#x6369 . #x6C69)      ; <CJK>
                 (#x636A . #x6C74)      ; <CJK>
                 (#x636B . #x6C76)      ; <CJK>
                 (#x636C . #x6C86)      ; <CJK>
                 (#x636D . #x6CA9)      ; <CJK>
                 (#x636E . #x6CD0)      ; <CJK>
                 (#x636F . #x6CD4)      ; <CJK>
                 (#x6370 . #x6CAD)      ; <CJK>
                 (#x6371 . #x6CF7)      ; <CJK>
                 (#x6372 . #x6CF8)      ; <CJK>
                 (#x6373 . #x6CF1)      ; <CJK>
                 (#x6374 . #x6CD7)      ; <CJK>
                 (#x6375 . #x6CB2)      ; <CJK>
                 (#x6376 . #x6CE0)      ; <CJK>
                 (#x6377 . #x6CD6)      ; <CJK>
                 (#x6378 . #x6CFA)      ; <CJK>
                 (#x6379 . #x6CEB)      ; <CJK>
                 (#x637A . #x6CEE)      ; <CJK>
                 (#x637B . #x6CB1)      ; <CJK>
                 (#x637C . #x6CD3)      ; <CJK>
                 (#x637D . #x6CEF)      ; <CJK>
                 (#x637E . #x6CFE)      ; <CJK>
                 (#x6421 . #x6D39)      ; <CJK>
                 (#x6422 . #x6D27)      ; <CJK>
                 (#x6423 . #x6D0C)      ; <CJK>
                 (#x6424 . #x6D43)      ; <CJK>
                 (#x6425 . #x6D48)      ; <CJK>
                 (#x6426 . #x6D07)      ; <CJK>
                 (#x6427 . #x6D04)      ; <CJK>
                 (#x6428 . #x6D19)      ; <CJK>
                 (#x6429 . #x6D0E)      ; <CJK>
                 (#x642A . #x6D2B)      ; <CJK>
                 (#x642B . #x6D4D)      ; <CJK>
                 (#x642C . #x6D2E)      ; <CJK>
                 (#x642D . #x6D35)      ; <CJK>
                 (#x642E . #x6D1A)      ; <CJK>
                 (#x642F . #x6D4F)      ; <CJK>
                 (#x6430 . #x6D52)      ; <CJK>
                 (#x6431 . #x6D54)      ; <CJK>
                 (#x6432 . #x6D33)      ; <CJK>
                 (#x6433 . #x6D91)      ; <CJK>
                 (#x6434 . #x6D6F)      ; <CJK>
                 (#x6435 . #x6D9E)      ; <CJK>
                 (#x6436 . #x6DA0)      ; <CJK>
                 (#x6437 . #x6D5E)      ; <CJK>
                 (#x6438 . #x6D93)      ; <CJK>
                 (#x6439 . #x6D94)      ; <CJK>
                 (#x643A . #x6D5C)      ; <CJK>
                 (#x643B . #x6D60)      ; <CJK>
                 (#x643C . #x6D7C)      ; <CJK>
                 (#x643D . #x6D63)      ; <CJK>
                 (#x643E . #x6E1A)      ; <CJK>
                 (#x643F . #x6DC7)      ; <CJK>
                 (#x6440 . #x6DC5)      ; <CJK>
                 (#x6441 . #x6DDE)      ; <CJK>
                 (#x6442 . #x6E0E)      ; <CJK>
                 (#x6443 . #x6DBF)      ; <CJK>
                 (#x6444 . #x6DE0)      ; <CJK>
                 (#x6445 . #x6E11)      ; <CJK>
                 (#x6446 . #x6DE6)      ; <CJK>
                 (#x6447 . #x6DDD)      ; <CJK>
                 (#x6448 . #x6DD9)      ; <CJK>
                 (#x6449 . #x6E16)      ; <CJK>
                 (#x644A . #x6DAB)      ; <CJK>
                 (#x644B . #x6E0C)      ; <CJK>
                 (#x644C . #x6DAE)      ; <CJK>
                 (#x644D . #x6E2B)      ; <CJK>
                 (#x644E . #x6E6E)      ; <CJK>
                 (#x644F . #x6E4E)      ; <CJK>
                 (#x6450 . #x6E6B)      ; <CJK>
                 (#x6451 . #x6EB2)      ; <CJK>
                 (#x6452 . #x6E5F)      ; <CJK>
                 (#x6453 . #x6E86)      ; <CJK>
                 (#x6454 . #x6E53)      ; <CJK>
                 (#x6455 . #x6E54)      ; <CJK>
                 (#x6456 . #x6E32)      ; <CJK>
                 (#x6457 . #x6E25)      ; <CJK>
                 (#x6458 . #x6E44)      ; <CJK>
                 (#x6459 . #x6EDF)      ; <CJK>
                 (#x645A . #x6EB1)      ; <CJK>
                 (#x645B . #x6E98)      ; <CJK>
                 (#x645C . #x6EE0)      ; <CJK>
                 (#x645D . #x6F2D)      ; <CJK>
                 (#x645E . #x6EE2)      ; <CJK>
                 (#x645F . #x6EA5)      ; <CJK>
                 (#x6460 . #x6EA7)      ; <CJK>
                 (#x6461 . #x6EBD)      ; <CJK>
                 (#x6462 . #x6EBB)      ; <CJK>
                 (#x6463 . #x6EB7)      ; <CJK>
                 (#x6464 . #x6ED7)      ; <CJK>
                 (#x6465 . #x6EB4)      ; <CJK>
                 (#x6466 . #x6ECF)      ; <CJK>
                 (#x6467 . #x6E8F)      ; <CJK>
                 (#x6468 . #x6EC2)      ; <CJK>
                 (#x6469 . #x6E9F)      ; <CJK>
                 (#x646A . #x6F62)      ; <CJK>
                 (#x646B . #x6F46)      ; <CJK>
                 (#x646C . #x6F47)      ; <CJK>
                 (#x646D . #x6F24)      ; <CJK>
                 (#x646E . #x6F15)      ; <CJK>
                 (#x646F . #x6EF9)      ; <CJK>
                 (#x6470 . #x6F2F)      ; <CJK>
                 (#x6471 . #x6F36)      ; <CJK>
                 (#x6472 . #x6F4B)      ; <CJK>
                 (#x6473 . #x6F74)      ; <CJK>
                 (#x6474 . #x6F2A)      ; <CJK>
                 (#x6475 . #x6F09)      ; <CJK>
                 (#x6476 . #x6F29)      ; <CJK>
                 (#x6477 . #x6F89)      ; <CJK>
                 (#x6478 . #x6F8D)      ; <CJK>
                 (#x6479 . #x6F8C)      ; <CJK>
                 (#x647A . #x6F78)      ; <CJK>
                 (#x647B . #x6F72)      ; <CJK>
                 (#x647C . #x6F7C)      ; <CJK>
                 (#x647D . #x6F7A)      ; <CJK>
                 (#x647E . #x6FD1)      ; <CJK>
                 (#x6521 . #x6FC9)      ; <CJK>
                 (#x6522 . #x6FA7)      ; <CJK>
                 (#x6523 . #x6FB9)      ; <CJK>
                 (#x6524 . #x6FB6)      ; <CJK>
                 (#x6525 . #x6FC2)      ; <CJK>
                 (#x6526 . #x6FE1)      ; <CJK>
                 (#x6527 . #x6FEE)      ; <CJK>
                 (#x6528 . #x6FDE)      ; <CJK>
                 (#x6529 . #x6FE0)      ; <CJK>
                 (#x652A . #x6FEF)      ; <CJK>
                 (#x652B . #x701A)      ; <CJK>
                 (#x652C . #x7023)      ; <CJK>
                 (#x652D . #x701B)      ; <CJK>
                 (#x652E . #x7039)      ; <CJK>
                 (#x652F . #x7035)      ; <CJK>
                 (#x6530 . #x704F)      ; <CJK>
                 (#x6531 . #x705E)      ; <CJK>
                 (#x6532 . #x5B80)      ; <CJK>
                 (#x6533 . #x5B84)      ; <CJK>
                 (#x6534 . #x5B95)      ; <CJK>
                 (#x6535 . #x5B93)      ; <CJK>
                 (#x6536 . #x5BA5)      ; <CJK>
                 (#x6537 . #x5BB8)      ; <CJK>
                 (#x6538 . #x752F)      ; <CJK>
                 (#x6539 . #x9A9E)      ; <CJK>
                 (#x653A . #x6434)      ; <CJK>
                 (#x653B . #x5BE4)      ; <CJK>
                 (#x653C . #x5BEE)      ; <CJK>
                 (#x653D . #x8930)      ; <CJK>
                 (#x653E . #x5BF0)      ; <CJK>
                 (#x653F . #x8E47)      ; <CJK>
                 (#x6540 . #x8B07)      ; <CJK>
                 (#x6541 . #x8FB6)      ; <CJK>
                 (#x6542 . #x8FD3)      ; <CJK>
                 (#x6543 . #x8FD5)      ; <CJK>
                 (#x6544 . #x8FE5)      ; <CJK>
                 (#x6545 . #x8FEE)      ; <CJK>
                 (#x6546 . #x8FE4)      ; <CJK>
                 (#x6547 . #x8FE9)      ; <CJK>
                 (#x6548 . #x8FE6)      ; <CJK>
                 (#x6549 . #x8FF3)      ; <CJK>
                 (#x654A . #x8FE8)      ; <CJK>
                 (#x654B . #x9005)      ; <CJK>
                 (#x654C . #x9004)      ; <CJK>
                 (#x654D . #x900B)      ; <CJK>
                 (#x654E . #x9026)      ; <CJK>
                 (#x654F . #x9011)      ; <CJK>
                 (#x6550 . #x900D)      ; <CJK>
                 (#x6551 . #x9016)      ; <CJK>
                 (#x6552 . #x9021)      ; <CJK>
                 (#x6553 . #x9035)      ; <CJK>
                 (#x6554 . #x9036)      ; <CJK>
                 (#x6555 . #x902D)      ; <CJK>
                 (#x6556 . #x902F)      ; <CJK>
                 (#x6557 . #x9044)      ; <CJK>
                 (#x6558 . #x9051)      ; <CJK>
                 (#x6559 . #x9052)      ; <CJK>
                 (#x655A . #x9050)      ; <CJK>
                 (#x655B . #x9068)      ; <CJK>
                 (#x655C . #x9058)      ; <CJK>
                 (#x655D . #x9062)      ; <CJK>
                 (#x655E . #x905B)      ; <CJK>
                 (#x655F . #x66B9)      ; <CJK>
                 (#x6560 . #x9074)      ; <CJK>
                 (#x6561 . #x907D)      ; <CJK>
                 (#x6562 . #x9082)      ; <CJK>
                 (#x6563 . #x9088)      ; <CJK>
                 (#x6564 . #x9083)      ; <CJK>
                 (#x6565 . #x908B)      ; <CJK>
                 (#x6566 . #x5F50)      ; <CJK>
                 (#x6567 . #x5F57)      ; <CJK>
                 (#x6568 . #x5F56)      ; <CJK>
                 (#x6569 . #x5F58)      ; <CJK>
                 (#x656A . #x5C3B)      ; <CJK>
                 (#x656B . #x54AB)      ; <CJK>
                 (#x656C . #x5C50)      ; <CJK>
                 (#x656D . #x5C59)      ; <CJK>
                 (#x656E . #x5B71)      ; <CJK>
                 (#x656F . #x5C63)      ; <CJK>
                 (#x6570 . #x5C66)      ; <CJK>
                 (#x6571 . #x7FBC)      ; <CJK>
                 (#x6572 . #x5F2A)      ; <CJK>
                 (#x6573 . #x5F29)      ; <CJK>
                 (#x6574 . #x5F2D)      ; <CJK>
                 (#x6575 . #x8274)      ; <CJK>
                 (#x6576 . #x5F3C)      ; <CJK>
                 (#x6577 . #x9B3B)      ; <CJK>
                 (#x6578 . #x5C6E)      ; <CJK>
                 (#x6579 . #x5981)      ; <CJK>
                 (#x657A . #x5983)      ; <CJK>
                 (#x657B . #x598D)      ; <CJK>
                 (#x657C . #x59A9)      ; <CJK>
                 (#x657D . #x59AA)      ; <CJK>
                 (#x657E . #x59A3)      ; <CJK>
                 (#x6621 . #x5997)      ; <CJK>
                 (#x6622 . #x59CA)      ; <CJK>
                 (#x6623 . #x59AB)      ; <CJK>
                 (#x6624 . #x599E)      ; <CJK>
                 (#x6625 . #x59A4)      ; <CJK>
                 (#x6626 . #x59D2)      ; <CJK>
                 (#x6627 . #x59B2)      ; <CJK>
                 (#x6628 . #x59AF)      ; <CJK>
                 (#x6629 . #x59D7)      ; <CJK>
                 (#x662A . #x59BE)      ; <CJK>
                 (#x662B . #x5A05)      ; <CJK>
                 (#x662C . #x5A06)      ; <CJK>
                 (#x662D . #x59DD)      ; <CJK>
                 (#x662E . #x5A08)      ; <CJK>
                 (#x662F . #x59E3)      ; <CJK>
                 (#x6630 . #x59D8)      ; <CJK>
                 (#x6631 . #x59F9)      ; <CJK>
                 (#x6632 . #x5A0C)      ; <CJK>
                 (#x6633 . #x5A09)      ; <CJK>
                 (#x6634 . #x5A32)      ; <CJK>
                 (#x6635 . #x5A34)      ; <CJK>
                 (#x6636 . #x5A11)      ; <CJK>
                 (#x6637 . #x5A23)      ; <CJK>
                 (#x6638 . #x5A13)      ; <CJK>
                 (#x6639 . #x5A40)      ; <CJK>
                 (#x663A . #x5A67)      ; <CJK>
                 (#x663B . #x5A4A)      ; <CJK>
                 (#x663C . #x5A55)      ; <CJK>
                 (#x663D . #x5A3C)      ; <CJK>
                 (#x663E . #x5A62)      ; <CJK>
                 (#x663F . #x5A75)      ; <CJK>
                 (#x6640 . #x80EC)      ; <CJK>
                 (#x6641 . #x5AAA)      ; <CJK>
                 (#x6642 . #x5A9B)      ; <CJK>
                 (#x6643 . #x5A77)      ; <CJK>
                 (#x6644 . #x5A7A)      ; <CJK>
                 (#x6645 . #x5ABE)      ; <CJK>
                 (#x6646 . #x5AEB)      ; <CJK>
                 (#x6647 . #x5AB2)      ; <CJK>
                 (#x6648 . #x5AD2)      ; <CJK>
                 (#x6649 . #x5AD4)      ; <CJK>
                 (#x664A . #x5AB8)      ; <CJK>
                 (#x664B . #x5AE0)      ; <CJK>
                 (#x664C . #x5AE3)      ; <CJK>
                 (#x664D . #x5AF1)      ; <CJK>
                 (#x664E . #x5AD6)      ; <CJK>
                 (#x664F . #x5AE6)      ; <CJK>
                 (#x6650 . #x5AD8)      ; <CJK>
                 (#x6651 . #x5ADC)      ; <CJK>
                 (#x6652 . #x5B09)      ; <CJK>
                 (#x6653 . #x5B17)      ; <CJK>
                 (#x6654 . #x5B16)      ; <CJK>
                 (#x6655 . #x5B32)      ; <CJK>
                 (#x6656 . #x5B37)      ; <CJK>
                 (#x6657 . #x5B40)      ; <CJK>
                 (#x6658 . #x5C15)      ; <CJK>
                 (#x6659 . #x5C1C)      ; <CJK>
                 (#x665A . #x5B5A)      ; <CJK>
                 (#x665B . #x5B65)      ; <CJK>
                 (#x665C . #x5B73)      ; <CJK>
                 (#x665D . #x5B51)      ; <CJK>
                 (#x665E . #x5B53)      ; <CJK>
                 (#x665F . #x5B62)      ; <CJK>
                 (#x6660 . #x9A75)      ; <CJK>
                 (#x6661 . #x9A77)      ; <CJK>
                 (#x6662 . #x9A78)      ; <CJK>
                 (#x6663 . #x9A7A)      ; <CJK>
                 (#x6664 . #x9A7F)      ; <CJK>
                 (#x6665 . #x9A7D)      ; <CJK>
                 (#x6666 . #x9A80)      ; <CJK>
                 (#x6667 . #x9A81)      ; <CJK>
                 (#x6668 . #x9A85)      ; <CJK>
                 (#x6669 . #x9A88)      ; <CJK>
                 (#x666A . #x9A8A)      ; <CJK>
                 (#x666B . #x9A90)      ; <CJK>
                 (#x666C . #x9A92)      ; <CJK>
                 (#x666D . #x9A93)      ; <CJK>
                 (#x666E . #x9A96)      ; <CJK>
                 (#x666F . #x9A98)      ; <CJK>
                 (#x6670 . #x9A9B)      ; <CJK>
                 (#x6671 . #x9A9C)      ; <CJK>
                 (#x6672 . #x9A9D)      ; <CJK>
                 (#x6673 . #x9A9F)      ; <CJK>
                 (#x6674 . #x9AA0)      ; <CJK>
                 (#x6675 . #x9AA2)      ; <CJK>
                 (#x6676 . #x9AA3)      ; <CJK>
                 (#x6677 . #x9AA5)      ; <CJK>
                 (#x6678 . #x9AA7)      ; <CJK>
                 (#x6679 . #x7E9F)      ; <CJK>
                 (#x667A . #x7EA1)      ; <CJK>
                 (#x667B . #x7EA3)      ; <CJK>
                 (#x667C . #x7EA5)      ; <CJK>
                 (#x667D . #x7EA8)      ; <CJK>
                 (#x667E . #x7EA9)      ; <CJK>
                 (#x6721 . #x7EAD)      ; <CJK>
                 (#x6722 . #x7EB0)      ; <CJK>
                 (#x6723 . #x7EBE)      ; <CJK>
                 (#x6724 . #x7EC0)      ; <CJK>
                 (#x6725 . #x7EC1)      ; <CJK>
                 (#x6726 . #x7EC2)      ; <CJK>
                 (#x6727 . #x7EC9)      ; <CJK>
                 (#x6728 . #x7ECB)      ; <CJK>
                 (#x6729 . #x7ECC)      ; <CJK>
                 (#x672A . #x7ED0)      ; <CJK>
                 (#x672B . #x7ED4)      ; <CJK>
                 (#x672C . #x7ED7)      ; <CJK>
                 (#x672D . #x7EDB)      ; <CJK>
                 (#x672E . #x7EE0)      ; <CJK>
                 (#x672F . #x7EE1)      ; <CJK>
                 (#x6730 . #x7EE8)      ; <CJK>
                 (#x6731 . #x7EEB)      ; <CJK>
                 (#x6732 . #x7EEE)      ; <CJK>
                 (#x6733 . #x7EEF)      ; <CJK>
                 (#x6734 . #x7EF1)      ; <CJK>
                 (#x6735 . #x7EF2)      ; <CJK>
                 (#x6736 . #x7F0D)      ; <CJK>
                 (#x6737 . #x7EF6)      ; <CJK>
                 (#x6738 . #x7EFA)      ; <CJK>
                 (#x6739 . #x7EFB)      ; <CJK>
                 (#x673A . #x7EFE)      ; <CJK>
                 (#x673B . #x7F01)      ; <CJK>
                 (#x673C . #x7F02)      ; <CJK>
                 (#x673D . #x7F03)      ; <CJK>
                 (#x673E . #x7F07)      ; <CJK>
                 (#x673F . #x7F08)      ; <CJK>
                 (#x6740 . #x7F0B)      ; <CJK>
                 (#x6741 . #x7F0C)      ; <CJK>
                 (#x6742 . #x7F0F)      ; <CJK>
                 (#x6743 . #x7F11)      ; <CJK>
                 (#x6744 . #x7F12)      ; <CJK>
                 (#x6745 . #x7F17)      ; <CJK>
                 (#x6746 . #x7F19)      ; <CJK>
                 (#x6747 . #x7F1C)      ; <CJK>
                 (#x6748 . #x7F1B)      ; <CJK>
                 (#x6749 . #x7F1F)      ; <CJK>
                 (#x674A . #x7F21)      ; <CJK>
                 (#x674B . #x7F22)      ; <CJK>
                 (#x674C . #x7F23)      ; <CJK>
                 (#x674D . #x7F24)      ; <CJK>
                 (#x674E . #x7F25)      ; <CJK>
                 (#x674F . #x7F26)      ; <CJK>
                 (#x6750 . #x7F27)      ; <CJK>
                 (#x6751 . #x7F2A)      ; <CJK>
                 (#x6752 . #x7F2B)      ; <CJK>
                 (#x6753 . #x7F2C)      ; <CJK>
                 (#x6754 . #x7F2D)      ; <CJK>
                 (#x6755 . #x7F2F)      ; <CJK>
                 (#x6756 . #x7F30)      ; <CJK>
                 (#x6757 . #x7F31)      ; <CJK>
                 (#x6758 . #x7F32)      ; <CJK>
                 (#x6759 . #x7F33)      ; <CJK>
                 (#x675A . #x7F35)      ; <CJK>
                 (#x675B . #x5E7A)      ; <CJK>
                 (#x675C . #x757F)      ; <CJK>
                 (#x675D . #x5DDB)      ; <CJK>
                 (#x675E . #x753E)      ; <CJK>
                 (#x675F . #x9095)      ; <CJK>
                 (#x6760 . #x738E)      ; <CJK>
                 (#x6761 . #x7391)      ; <CJK>
                 (#x6762 . #x73AE)      ; <CJK>
                 (#x6763 . #x73A2)      ; <CJK>
                 (#x6764 . #x739F)      ; <CJK>
                 (#x6765 . #x73CF)      ; <CJK>
                 (#x6766 . #x73C2)      ; <CJK>
                 (#x6767 . #x73D1)      ; <CJK>
                 (#x6768 . #x73B7)      ; <CJK>
                 (#x6769 . #x73B3)      ; <CJK>
                 (#x676A . #x73C0)      ; <CJK>
                 (#x676B . #x73C9)      ; <CJK>
                 (#x676C . #x73C8)      ; <CJK>
                 (#x676D . #x73E5)      ; <CJK>
                 (#x676E . #x73D9)      ; <CJK>
                 (#x676F . #x987C)      ; <CJK>
                 (#x6770 . #x740A)      ; <CJK>
                 (#x6771 . #x73E9)      ; <CJK>
                 (#x6772 . #x73E7)      ; <CJK>
                 (#x6773 . #x73DE)      ; <CJK>
                 (#x6774 . #x73BA)      ; <CJK>
                 (#x6775 . #x73F2)      ; <CJK>
                 (#x6776 . #x740F)      ; <CJK>
                 (#x6777 . #x742A)      ; <CJK>
                 (#x6778 . #x745B)      ; <CJK>
                 (#x6779 . #x7426)      ; <CJK>
                 (#x677A . #x7425)      ; <CJK>
                 (#x677B . #x7428)      ; <CJK>
                 (#x677C . #x7430)      ; <CJK>
                 (#x677D . #x742E)      ; <CJK>
                 (#x677E . #x742C)      ; <CJK>
                 (#x6821 . #x741B)      ; <CJK>
                 (#x6822 . #x741A)      ; <CJK>
                 (#x6823 . #x7441)      ; <CJK>
                 (#x6824 . #x745C)      ; <CJK>
                 (#x6825 . #x7457)      ; <CJK>
                 (#x6826 . #x7455)      ; <CJK>
                 (#x6827 . #x7459)      ; <CJK>
                 (#x6828 . #x7477)      ; <CJK>
                 (#x6829 . #x746D)      ; <CJK>
                 (#x682A . #x747E)      ; <CJK>
                 (#x682B . #x749C)      ; <CJK>
                 (#x682C . #x748E)      ; <CJK>
                 (#x682D . #x7480)      ; <CJK>
                 (#x682E . #x7481)      ; <CJK>
                 (#x682F . #x7487)      ; <CJK>
                 (#x6830 . #x748B)      ; <CJK>
                 (#x6831 . #x749E)      ; <CJK>
                 (#x6832 . #x74A8)      ; <CJK>
                 (#x6833 . #x74A9)      ; <CJK>
                 (#x6834 . #x7490)      ; <CJK>
                 (#x6835 . #x74A7)      ; <CJK>
                 (#x6836 . #x74D2)      ; <CJK>
                 (#x6837 . #x74BA)      ; <CJK>
                 (#x6838 . #x97EA)      ; <CJK>
                 (#x6839 . #x97EB)      ; <CJK>
                 (#x683A . #x97EC)      ; <CJK>
                 (#x683B . #x674C)      ; <CJK>
                 (#x683C . #x6753)      ; <CJK>
                 (#x683D . #x675E)      ; <CJK>
                 (#x683E . #x6748)      ; <CJK>
                 (#x683F . #x6769)      ; <CJK>
                 (#x6840 . #x67A5)      ; <CJK>
                 (#x6841 . #x6787)      ; <CJK>
                 (#x6842 . #x676A)      ; <CJK>
                 (#x6843 . #x6773)      ; <CJK>
                 (#x6844 . #x6798)      ; <CJK>
                 (#x6845 . #x67A7)      ; <CJK>
                 (#x6846 . #x6775)      ; <CJK>
                 (#x6847 . #x67A8)      ; <CJK>
                 (#x6848 . #x679E)      ; <CJK>
                 (#x6849 . #x67AD)      ; <CJK>
                 (#x684A . #x678B)      ; <CJK>
                 (#x684B . #x6777)      ; <CJK>
                 (#x684C . #x677C)      ; <CJK>
                 (#x684D . #x67F0)      ; <CJK>
                 (#x684E . #x6809)      ; <CJK>
                 (#x684F . #x67D8)      ; <CJK>
                 (#x6850 . #x680A)      ; <CJK>
                 (#x6851 . #x67E9)      ; <CJK>
                 (#x6852 . #x67B0)      ; <CJK>
                 (#x6853 . #x680C)      ; <CJK>
                 (#x6854 . #x67D9)      ; <CJK>
                 (#x6855 . #x67B5)      ; <CJK>
                 (#x6856 . #x67DA)      ; <CJK>
                 (#x6857 . #x67B3)      ; <CJK>
                 (#x6858 . #x67DD)      ; <CJK>
                 (#x6859 . #x6800)      ; <CJK>
                 (#x685A . #x67C3)      ; <CJK>
                 (#x685B . #x67B8)      ; <CJK>
                 (#x685C . #x67E2)      ; <CJK>
                 (#x685D . #x680E)      ; <CJK>
                 (#x685E . #x67C1)      ; <CJK>
                 (#x685F . #x67FD)      ; <CJK>
                 (#x6860 . #x6832)      ; <CJK>
                 (#x6861 . #x6833)      ; <CJK>
                 (#x6862 . #x6860)      ; <CJK>
                 (#x6863 . #x6861)      ; <CJK>
                 (#x6864 . #x684E)      ; <CJK>
                 (#x6865 . #x6862)      ; <CJK>
                 (#x6866 . #x6844)      ; <CJK>
                 (#x6867 . #x6864)      ; <CJK>
                 (#x6868 . #x6883)      ; <CJK>
                 (#x6869 . #x681D)      ; <CJK>
                 (#x686A . #x6855)      ; <CJK>
                 (#x686B . #x6866)      ; <CJK>
                 (#x686C . #x6841)      ; <CJK>
                 (#x686D . #x6867)      ; <CJK>
                 (#x686E . #x6840)      ; <CJK>
                 (#x686F . #x683E)      ; <CJK>
                 (#x6870 . #x684A)      ; <CJK>
                 (#x6871 . #x6849)      ; <CJK>
                 (#x6872 . #x6829)      ; <CJK>
                 (#x6873 . #x68B5)      ; <CJK>
                 (#x6874 . #x688F)      ; <CJK>
                 (#x6875 . #x6874)      ; <CJK>
                 (#x6876 . #x6877)      ; <CJK>
                 (#x6877 . #x6893)      ; <CJK>
                 (#x6878 . #x686B)      ; <CJK>
                 (#x6879 . #x68C2)      ; <CJK>
                 (#x687A . #x696E)      ; <CJK>
                 (#x687B . #x68FC)      ; <CJK>
                 (#x687C . #x691F)      ; <CJK>
                 (#x687D . #x6920)      ; <CJK>
                 (#x687E . #x68F9)      ; <CJK>
                 (#x6921 . #x6924)      ; <CJK>
                 (#x6922 . #x68F0)      ; <CJK>
                 (#x6923 . #x690B)      ; <CJK>
                 (#x6924 . #x6901)      ; <CJK>
                 (#x6925 . #x6957)      ; <CJK>
                 (#x6926 . #x68E3)      ; <CJK>
                 (#x6927 . #x6910)      ; <CJK>
                 (#x6928 . #x6971)      ; <CJK>
                 (#x6929 . #x6939)      ; <CJK>
                 (#x692A . #x6960)      ; <CJK>
                 (#x692B . #x6942)      ; <CJK>
                 (#x692C . #x695D)      ; <CJK>
                 (#x692D . #x6984)      ; <CJK>
                 (#x692E . #x696B)      ; <CJK>
                 (#x692F . #x6980)      ; <CJK>
                 (#x6930 . #x6998)      ; <CJK>
                 (#x6931 . #x6978)      ; <CJK>
                 (#x6932 . #x6934)      ; <CJK>
                 (#x6933 . #x69CC)      ; <CJK>
                 (#x6934 . #x6987)      ; <CJK>
                 (#x6935 . #x6988)      ; <CJK>
                 (#x6936 . #x69CE)      ; <CJK>
                 (#x6937 . #x6989)      ; <CJK>
                 (#x6938 . #x6966)      ; <CJK>
                 (#x6939 . #x6963)      ; <CJK>
                 (#x693A . #x6979)      ; <CJK>
                 (#x693B . #x699B)      ; <CJK>
                 (#x693C . #x69A7)      ; <CJK>
                 (#x693D . #x69BB)      ; <CJK>
                 (#x693E . #x69AB)      ; <CJK>
                 (#x693F . #x69AD)      ; <CJK>
                 (#x6940 . #x69D4)      ; <CJK>
                 (#x6941 . #x69B1)      ; <CJK>
                 (#x6942 . #x69C1)      ; <CJK>
                 (#x6943 . #x69CA)      ; <CJK>
                 (#x6944 . #x69DF)      ; <CJK>
                 (#x6945 . #x6995)      ; <CJK>
                 (#x6946 . #x69E0)      ; <CJK>
                 (#x6947 . #x698D)      ; <CJK>
                 (#x6948 . #x69FF)      ; <CJK>
                 (#x6949 . #x6A2F)      ; <CJK>
                 (#x694A . #x69ED)      ; <CJK>
                 (#x694B . #x6A17)      ; <CJK>
                 (#x694C . #x6A18)      ; <CJK>
                 (#x694D . #x6A65)      ; <CJK>
                 (#x694E . #x69F2)      ; <CJK>
                 (#x694F . #x6A44)      ; <CJK>
                 (#x6950 . #x6A3E)      ; <CJK>
                 (#x6951 . #x6AA0)      ; <CJK>
                 (#x6952 . #x6A50)      ; <CJK>
                 (#x6953 . #x6A5B)      ; <CJK>
                 (#x6954 . #x6A35)      ; <CJK>
                 (#x6955 . #x6A8E)      ; <CJK>
                 (#x6956 . #x6A79)      ; <CJK>
                 (#x6957 . #x6A3D)      ; <CJK>
                 (#x6958 . #x6A28)      ; <CJK>
                 (#x6959 . #x6A58)      ; <CJK>
                 (#x695A . #x6A7C)      ; <CJK>
                 (#x695B . #x6A91)      ; <CJK>
                 (#x695C . #x6A90)      ; <CJK>
                 (#x695D . #x6AA9)      ; <CJK>
                 (#x695E . #x6A97)      ; <CJK>
                 (#x695F . #x6AAB)      ; <CJK>
                 (#x6960 . #x7337)      ; <CJK>
                 (#x6961 . #x7352)      ; <CJK>
                 (#x6962 . #x6B81)      ; <CJK>
                 (#x6963 . #x6B82)      ; <CJK>
                 (#x6964 . #x6B87)      ; <CJK>
                 (#x6965 . #x6B84)      ; <CJK>
                 (#x6966 . #x6B92)      ; <CJK>
                 (#x6967 . #x6B93)      ; <CJK>
                 (#x6968 . #x6B8D)      ; <CJK>
                 (#x6969 . #x6B9A)      ; <CJK>
                 (#x696A . #x6B9B)      ; <CJK>
                 (#x696B . #x6BA1)      ; <CJK>
                 (#x696C . #x6BAA)      ; <CJK>
                 (#x696D . #x8F6B)      ; <CJK>
                 (#x696E . #x8F6D)      ; <CJK>
                 (#x696F . #x8F71)      ; <CJK>
                 (#x6970 . #x8F72)      ; <CJK>
                 (#x6971 . #x8F73)      ; <CJK>
                 (#x6972 . #x8F75)      ; <CJK>
                 (#x6973 . #x8F76)      ; <CJK>
                 (#x6974 . #x8F78)      ; <CJK>
                 (#x6975 . #x8F77)      ; <CJK>
                 (#x6976 . #x8F79)      ; <CJK>
                 (#x6977 . #x8F7A)      ; <CJK>
                 (#x6978 . #x8F7C)      ; <CJK>
                 (#x6979 . #x8F7E)      ; <CJK>
                 (#x697A . #x8F81)      ; <CJK>
                 (#x697B . #x8F82)      ; <CJK>
                 (#x697C . #x8F84)      ; <CJK>
                 (#x697D . #x8F87)      ; <CJK>
                 (#x697E . #x8F8B)      ; <CJK>
                 (#x6A21 . #x8F8D)      ; <CJK>
                 (#x6A22 . #x8F8E)      ; <CJK>
                 (#x6A23 . #x8F8F)      ; <CJK>
                 (#x6A24 . #x8F98)      ; <CJK>
                 (#x6A25 . #x8F9A)      ; <CJK>
                 (#x6A26 . #x8ECE)      ; <CJK>
                 (#x6A27 . #x620B)      ; <CJK>
                 (#x6A28 . #x6217)      ; <CJK>
                 (#x6A29 . #x621B)      ; <CJK>
                 (#x6A2A . #x621F)      ; <CJK>
                 (#x6A2B . #x6222)      ; <CJK>
                 (#x6A2C . #x6221)      ; <CJK>
                 (#x6A2D . #x6225)      ; <CJK>
                 (#x6A2E . #x6224)      ; <CJK>
                 (#x6A2F . #x622C)      ; <CJK>
                 (#x6A30 . #x81E7)      ; <CJK>
                 (#x6A31 . #x74EF)      ; <CJK>
                 (#x6A32 . #x74F4)      ; <CJK>
                 (#x6A33 . #x74FF)      ; <CJK>
                 (#x6A34 . #x750F)      ; <CJK>
                 (#x6A35 . #x7511)      ; <CJK>
                 (#x6A36 . #x7513)      ; <CJK>
                 (#x6A37 . #x6534)      ; <CJK>
                 (#x6A38 . #x65EE)      ; <CJK>
                 (#x6A39 . #x65EF)      ; <CJK>
                 (#x6A3A . #x65F0)      ; <CJK>
                 (#x6A3B . #x660A)      ; <CJK>
                 (#x6A3C . #x6619)      ; <CJK>
                 (#x6A3D . #x6772)      ; <CJK>
                 (#x6A3E . #x6603)      ; <CJK>
                 (#x6A3F . #x6615)      ; <CJK>
                 (#x6A40 . #x6600)      ; <CJK>
                 (#x6A41 . #x7085)      ; <CJK>
                 (#x6A42 . #x66F7)      ; <CJK>
                 (#x6A43 . #x661D)      ; <CJK>
                 (#x6A44 . #x6634)      ; <CJK>
                 (#x6A45 . #x6631)      ; <CJK>
                 (#x6A46 . #x6636)      ; <CJK>
                 (#x6A47 . #x6635)      ; <CJK>
                 (#x6A48 . #x8006)      ; <CJK>
                 (#x6A49 . #x665F)      ; <CJK>
                 (#x6A4A . #x6654)      ; <CJK>
                 (#x6A4B . #x6641)      ; <CJK>
                 (#x6A4C . #x664F)      ; <CJK>
                 (#x6A4D . #x6656)      ; <CJK>
                 (#x6A4E . #x6661)      ; <CJK>
                 (#x6A4F . #x6657)      ; <CJK>
                 (#x6A50 . #x6677)      ; <CJK>
                 (#x6A51 . #x6684)      ; <CJK>
                 (#x6A52 . #x668C)      ; <CJK>
                 (#x6A53 . #x66A7)      ; <CJK>
                 (#x6A54 . #x669D)      ; <CJK>
                 (#x6A55 . #x66BE)      ; <CJK>
                 (#x6A56 . #x66DB)      ; <CJK>
                 (#x6A57 . #x66DC)      ; <CJK>
                 (#x6A58 . #x66E6)      ; <CJK>
                 (#x6A59 . #x66E9)      ; <CJK>
                 (#x6A5A . #x8D32)      ; <CJK>
                 (#x6A5B . #x8D33)      ; <CJK>
                 (#x6A5C . #x8D36)      ; <CJK>
                 (#x6A5D . #x8D3B)      ; <CJK>
                 (#x6A5E . #x8D3D)      ; <CJK>
                 (#x6A5F . #x8D40)      ; <CJK>
                 (#x6A60 . #x8D45)      ; <CJK>
                 (#x6A61 . #x8D46)      ; <CJK>
                 (#x6A62 . #x8D48)      ; <CJK>
                 (#x6A63 . #x8D49)      ; <CJK>
                 (#x6A64 . #x8D47)      ; <CJK>
                 (#x6A65 . #x8D4D)      ; <CJK>
                 (#x6A66 . #x8D55)      ; <CJK>
                 (#x6A67 . #x8D59)      ; <CJK>
                 (#x6A68 . #x89C7)      ; <CJK>
                 (#x6A69 . #x89CA)      ; <CJK>
                 (#x6A6A . #x89CB)      ; <CJK>
                 (#x6A6B . #x89CC)      ; <CJK>
                 (#x6A6C . #x89CE)      ; <CJK>
                 (#x6A6D . #x89CF)      ; <CJK>
                 (#x6A6E . #x89D0)      ; <CJK>
                 (#x6A6F . #x89D1)      ; <CJK>
                 (#x6A70 . #x726E)      ; <CJK>
                 (#x6A71 . #x729F)      ; <CJK>
                 (#x6A72 . #x725D)      ; <CJK>
                 (#x6A73 . #x7266)      ; <CJK>
                 (#x6A74 . #x726F)      ; <CJK>
                 (#x6A75 . #x727E)      ; <CJK>
                 (#x6A76 . #x727F)      ; <CJK>
                 (#x6A77 . #x7284)      ; <CJK>
                 (#x6A78 . #x728B)      ; <CJK>
                 (#x6A79 . #x728D)      ; <CJK>
                 (#x6A7A . #x728F)      ; <CJK>
                 (#x6A7B . #x7292)      ; <CJK>
                 (#x6A7C . #x6308)      ; <CJK>
                 (#x6A7D . #x6332)      ; <CJK>
                 (#x6A7E . #x63B0)      ; <CJK>
                 (#x6B21 . #x643F)      ; <CJK>
                 (#x6B22 . #x64D8)      ; <CJK>
                 (#x6B23 . #x8004)      ; <CJK>
                 (#x6B24 . #x6BEA)      ; <CJK>
                 (#x6B25 . #x6BF3)      ; <CJK>
                 (#x6B26 . #x6BFD)      ; <CJK>
                 (#x6B27 . #x6BF5)      ; <CJK>
                 (#x6B28 . #x6BF9)      ; <CJK>
                 (#x6B29 . #x6C05)      ; <CJK>
                 (#x6B2A . #x6C07)      ; <CJK>
                 (#x6B2B . #x6C06)      ; <CJK>
                 (#x6B2C . #x6C0D)      ; <CJK>
                 (#x6B2D . #x6C15)      ; <CJK>
                 (#x6B2E . #x6C18)      ; <CJK>
                 (#x6B2F . #x6C19)      ; <CJK>
                 (#x6B30 . #x6C1A)      ; <CJK>
                 (#x6B31 . #x6C21)      ; <CJK>
                 (#x6B32 . #x6C29)      ; <CJK>
                 (#x6B33 . #x6C24)      ; <CJK>
                 (#x6B34 . #x6C2A)      ; <CJK>
                 (#x6B35 . #x6C32)      ; <CJK>
                 (#x6B36 . #x6535)      ; <CJK>
                 (#x6B37 . #x6555)      ; <CJK>
                 (#x6B38 . #x656B)      ; <CJK>
                 (#x6B39 . #x724D)      ; <CJK>
                 (#x6B3A . #x7252)      ; <CJK>
                 (#x6B3B . #x7256)      ; <CJK>
                 (#x6B3C . #x7230)      ; <CJK>
                 (#x6B3D . #x8662)      ; <CJK>
                 (#x6B3E . #x5216)      ; <CJK>
                 (#x6B3F . #x809F)      ; <CJK>
                 (#x6B40 . #x809C)      ; <CJK>
                 (#x6B41 . #x8093)      ; <CJK>
                 (#x6B42 . #x80BC)      ; <CJK>
                 (#x6B43 . #x670A)      ; <CJK>
                 (#x6B44 . #x80BD)      ; <CJK>
                 (#x6B45 . #x80B1)      ; <CJK>
                 (#x6B46 . #x80AB)      ; <CJK>
                 (#x6B47 . #x80AD)      ; <CJK>
                 (#x6B48 . #x80B4)      ; <CJK>
                 (#x6B49 . #x80B7)      ; <CJK>
                 (#x6B4A . #x80E7)      ; <CJK>
                 (#x6B4B . #x80E8)      ; <CJK>
                 (#x6B4C . #x80E9)      ; <CJK>
                 (#x6B4D . #x80EA)      ; <CJK>
                 (#x6B4E . #x80DB)      ; <CJK>
                 (#x6B4F . #x80C2)      ; <CJK>
                 (#x6B50 . #x80C4)      ; <CJK>
                 (#x6B51 . #x80D9)      ; <CJK>
                 (#x6B52 . #x80CD)      ; <CJK>
                 (#x6B53 . #x80D7)      ; <CJK>
                 (#x6B54 . #x6710)      ; <CJK>
                 (#x6B55 . #x80DD)      ; <CJK>
                 (#x6B56 . #x80EB)      ; <CJK>
                 (#x6B57 . #x80F1)      ; <CJK>
                 (#x6B58 . #x80F4)      ; <CJK>
                 (#x6B59 . #x80ED)      ; <CJK>
                 (#x6B5A . #x810D)      ; <CJK>
                 (#x6B5B . #x810E)      ; <CJK>
                 (#x6B5C . #x80F2)      ; <CJK>
                 (#x6B5D . #x80FC)      ; <CJK>
                 (#x6B5E . #x6715)      ; <CJK>
                 (#x6B5F . #x8112)      ; <CJK>
                 (#x6B60 . #x8C5A)      ; <CJK>
                 (#x6B61 . #x8136)      ; <CJK>
                 (#x6B62 . #x811E)      ; <CJK>
                 (#x6B63 . #x812C)      ; <CJK>
                 (#x6B64 . #x8118)      ; <CJK>
                 (#x6B65 . #x8132)      ; <CJK>
                 (#x6B66 . #x8148)      ; <CJK>
                 (#x6B67 . #x814C)      ; <CJK>
                 (#x6B68 . #x8153)      ; <CJK>
                 (#x6B69 . #x8174)      ; <CJK>
                 (#x6B6A . #x8159)      ; <CJK>
                 (#x6B6B . #x815A)      ; <CJK>
                 (#x6B6C . #x8171)      ; <CJK>
                 (#x6B6D . #x8160)      ; <CJK>
                 (#x6B6E . #x8169)      ; <CJK>
                 (#x6B6F . #x817C)      ; <CJK>
                 (#x6B70 . #x817D)      ; <CJK>
                 (#x6B71 . #x816D)      ; <CJK>
                 (#x6B72 . #x8167)      ; <CJK>
                 (#x6B73 . #x584D)      ; <CJK>
                 (#x6B74 . #x5AB5)      ; <CJK>
                 (#x6B75 . #x8188)      ; <CJK>
                 (#x6B76 . #x8182)      ; <CJK>
                 (#x6B77 . #x8191)      ; <CJK>
                 (#x6B78 . #x6ED5)      ; <CJK>
                 (#x6B79 . #x81A3)      ; <CJK>
                 (#x6B7A . #x81AA)      ; <CJK>
                 (#x6B7B . #x81CC)      ; <CJK>
                 (#x6B7C . #x6726)      ; <CJK>
                 (#x6B7D . #x81CA)      ; <CJK>
                 (#x6B7E . #x81BB)      ; <CJK>
                 (#x6C21 . #x81C1)      ; <CJK>
                 (#x6C22 . #x81A6)      ; <CJK>
                 (#x6C23 . #x6B24)      ; <CJK>
                 (#x6C24 . #x6B37)      ; <CJK>
                 (#x6C25 . #x6B39)      ; <CJK>
                 (#x6C26 . #x6B43)      ; <CJK>
                 (#x6C27 . #x6B46)      ; <CJK>
                 (#x6C28 . #x6B59)      ; <CJK>
                 (#x6C29 . #x98D1)      ; <CJK>
                 (#x6C2A . #x98D2)      ; <CJK>
                 (#x6C2B . #x98D3)      ; <CJK>
                 (#x6C2C . #x98D5)      ; <CJK>
                 (#x6C2D . #x98D9)      ; <CJK>
                 (#x6C2E . #x98DA)      ; <CJK>
                 (#x6C2F . #x6BB3)      ; <CJK>
                 (#x6C30 . #x5F40)      ; <CJK>
                 (#x6C31 . #x6BC2)      ; <CJK>
                 (#x6C32 . #x89F3)      ; <CJK>
                 (#x6C33 . #x6590)      ; <CJK>
                 (#x6C34 . #x9F51)      ; <CJK>
                 (#x6C35 . #x6593)      ; <CJK>
                 (#x6C36 . #x65BC)      ; <CJK>
                 (#x6C37 . #x65C6)      ; <CJK>
                 (#x6C38 . #x65C4)      ; <CJK>
                 (#x6C39 . #x65C3)      ; <CJK>
                 (#x6C3A . #x65CC)      ; <CJK>
                 (#x6C3B . #x65CE)      ; <CJK>
                 (#x6C3C . #x65D2)      ; <CJK>
                 (#x6C3D . #x65D6)      ; <CJK>
                 (#x6C3E . #x7080)      ; <CJK>
                 (#x6C3F . #x709C)      ; <CJK>
                 (#x6C40 . #x7096)      ; <CJK>
                 (#x6C41 . #x709D)      ; <CJK>
                 (#x6C42 . #x70BB)      ; <CJK>
                 (#x6C43 . #x70C0)      ; <CJK>
                 (#x6C44 . #x70B7)      ; <CJK>
                 (#x6C45 . #x70AB)      ; <CJK>
                 (#x6C46 . #x70B1)      ; <CJK>
                 (#x6C47 . #x70E8)      ; <CJK>
                 (#x6C48 . #x70CA)      ; <CJK>
                 (#x6C49 . #x7110)      ; <CJK>
                 (#x6C4A . #x7113)      ; <CJK>
                 (#x6C4B . #x7116)      ; <CJK>
                 (#x6C4C . #x712F)      ; <CJK>
                 (#x6C4D . #x7131)      ; <CJK>
                 (#x6C4E . #x7173)      ; <CJK>
                 (#x6C4F . #x715C)      ; <CJK>
                 (#x6C50 . #x7168)      ; <CJK>
                 (#x6C51 . #x7145)      ; <CJK>
                 (#x6C52 . #x7172)      ; <CJK>
                 (#x6C53 . #x714A)      ; <CJK>
                 (#x6C54 . #x7178)      ; <CJK>
                 (#x6C55 . #x717A)      ; <CJK>
                 (#x6C56 . #x7198)      ; <CJK>
                 (#x6C57 . #x71B3)      ; <CJK>
                 (#x6C58 . #x71B5)      ; <CJK>
                 (#x6C59 . #x71A8)      ; <CJK>
                 (#x6C5A . #x71A0)      ; <CJK>
                 (#x6C5B . #x71E0)      ; <CJK>
                 (#x6C5C . #x71D4)      ; <CJK>
                 (#x6C5D . #x71E7)      ; <CJK>
                 (#x6C5E . #x71F9)      ; <CJK>
                 (#x6C5F . #x721D)      ; <CJK>
                 (#x6C60 . #x7228)      ; <CJK>
                 (#x6C61 . #x706C)      ; <CJK>
                 (#x6C62 . #x7118)      ; <CJK>
                 (#x6C63 . #x7166)      ; <CJK>
                 (#x6C64 . #x71B9)      ; <CJK>
                 (#x6C65 . #x623E)      ; <CJK>
                 (#x6C66 . #x623D)      ; <CJK>
                 (#x6C67 . #x6243)      ; <CJK>
                 (#x6C68 . #x6248)      ; <CJK>
                 (#x6C69 . #x6249)      ; <CJK>
                 (#x6C6A . #x793B)      ; <CJK>
                 (#x6C6B . #x7940)      ; <CJK>
                 (#x6C6C . #x7946)      ; <CJK>
                 (#x6C6D . #x7949)      ; <CJK>
                 (#x6C6E . #x795B)      ; <CJK>
                 (#x6C6F . #x795C)      ; <CJK>
                 (#x6C70 . #x7953)      ; <CJK>
                 (#x6C71 . #x795A)      ; <CJK>
                 (#x6C72 . #x7962)      ; <CJK>
                 (#x6C73 . #x7957)      ; <CJK>
                 (#x6C74 . #x7960)      ; <CJK>
                 (#x6C75 . #x796F)      ; <CJK>
                 (#x6C76 . #x7967)      ; <CJK>
                 (#x6C77 . #x797A)      ; <CJK>
                 (#x6C78 . #x7985)      ; <CJK>
                 (#x6C79 . #x798A)      ; <CJK>
                 (#x6C7A . #x799A)      ; <CJK>
                 (#x6C7B . #x79A7)      ; <CJK>
                 (#x6C7C . #x79B3)      ; <CJK>
                 (#x6C7D . #x5FD1)      ; <CJK>
                 (#x6C7E . #x5FD0)      ; <CJK>
                 (#x6D21 . #x603C)      ; <CJK>
                 (#x6D22 . #x605D)      ; <CJK>
                 (#x6D23 . #x605A)      ; <CJK>
                 (#x6D24 . #x6067)      ; <CJK>
                 (#x6D25 . #x6041)      ; <CJK>
                 (#x6D26 . #x6059)      ; <CJK>
                 (#x6D27 . #x6063)      ; <CJK>
                 (#x6D28 . #x60AB)      ; <CJK>
                 (#x6D29 . #x6106)      ; <CJK>
                 (#x6D2A . #x610D)      ; <CJK>
                 (#x6D2B . #x615D)      ; <CJK>
                 (#x6D2C . #x61A9)      ; <CJK>
                 (#x6D2D . #x619D)      ; <CJK>
                 (#x6D2E . #x61CB)      ; <CJK>
                 (#x6D2F . #x61D1)      ; <CJK>
                 (#x6D30 . #x6206)      ; <CJK>
                 (#x6D31 . #x8080)      ; <CJK>
                 (#x6D32 . #x807F)      ; <CJK>
                 (#x6D33 . #x6C93)      ; <CJK>
                 (#x6D34 . #x6CF6)      ; <CJK>
                 (#x6D35 . #x6DFC)      ; <CJK>
                 (#x6D36 . #x77F6)      ; <CJK>
                 (#x6D37 . #x77F8)      ; <CJK>
                 (#x6D38 . #x7800)      ; <CJK>
                 (#x6D39 . #x7809)      ; <CJK>
                 (#x6D3A . #x7817)      ; <CJK>
                 (#x6D3B . #x7818)      ; <CJK>
                 (#x6D3C . #x7811)      ; <CJK>
                 (#x6D3D . #x65AB)      ; <CJK>
                 (#x6D3E . #x782D)      ; <CJK>
                 (#x6D3F . #x781C)      ; <CJK>
                 (#x6D40 . #x781D)      ; <CJK>
                 (#x6D41 . #x7839)      ; <CJK>
                 (#x6D42 . #x783A)      ; <CJK>
                 (#x6D43 . #x783B)      ; <CJK>
                 (#x6D44 . #x781F)      ; <CJK>
                 (#x6D45 . #x783C)      ; <CJK>
                 (#x6D46 . #x7825)      ; <CJK>
                 (#x6D47 . #x782C)      ; <CJK>
                 (#x6D48 . #x7823)      ; <CJK>
                 (#x6D49 . #x7829)      ; <CJK>
                 (#x6D4A . #x784E)      ; <CJK>
                 (#x6D4B . #x786D)      ; <CJK>
                 (#x6D4C . #x7856)      ; <CJK>
                 (#x6D4D . #x7857)      ; <CJK>
                 (#x6D4E . #x7826)      ; <CJK>
                 (#x6D4F . #x7850)      ; <CJK>
                 (#x6D50 . #x7847)      ; <CJK>
                 (#x6D51 . #x784C)      ; <CJK>
                 (#x6D52 . #x786A)      ; <CJK>
                 (#x6D53 . #x789B)      ; <CJK>
                 (#x6D54 . #x7893)      ; <CJK>
                 (#x6D55 . #x789A)      ; <CJK>
                 (#x6D56 . #x7887)      ; <CJK>
                 (#x6D57 . #x789C)      ; <CJK>
                 (#x6D58 . #x78A1)      ; <CJK>
                 (#x6D59 . #x78A3)      ; <CJK>
                 (#x6D5A . #x78B2)      ; <CJK>
                 (#x6D5B . #x78B9)      ; <CJK>
                 (#x6D5C . #x78A5)      ; <CJK>
                 (#x6D5D . #x78D4)      ; <CJK>
                 (#x6D5E . #x78D9)      ; <CJK>
                 (#x6D5F . #x78C9)      ; <CJK>
                 (#x6D60 . #x78EC)      ; <CJK>
                 (#x6D61 . #x78F2)      ; <CJK>
                 (#x6D62 . #x7905)      ; <CJK>
                 (#x6D63 . #x78F4)      ; <CJK>
                 (#x6D64 . #x7913)      ; <CJK>
                 (#x6D65 . #x7924)      ; <CJK>
                 (#x6D66 . #x791E)      ; <CJK>
                 (#x6D67 . #x7934)      ; <CJK>
                 (#x6D68 . #x9F9B)      ; <CJK>
                 (#x6D69 . #x9EF9)      ; <CJK>
                 (#x6D6A . #x9EFB)      ; <CJK>
                 (#x6D6B . #x9EFC)      ; <CJK>
                 (#x6D6C . #x76F1)      ; <CJK>
                 (#x6D6D . #x7704)      ; <CJK>
                 (#x6D6E . #x770D)      ; <CJK>
                 (#x6D6F . #x76F9)      ; <CJK>
                 (#x6D70 . #x7707)      ; <CJK>
                 (#x6D71 . #x7708)      ; <CJK>
                 (#x6D72 . #x771A)      ; <CJK>
                 (#x6D73 . #x7722)      ; <CJK>
                 (#x6D74 . #x7719)      ; <CJK>
                 (#x6D75 . #x772D)      ; <CJK>
                 (#x6D76 . #x7726)      ; <CJK>
                 (#x6D77 . #x7735)      ; <CJK>
                 (#x6D78 . #x7738)      ; <CJK>
                 (#x6D79 . #x7750)      ; <CJK>
                 (#x6D7A . #x7751)      ; <CJK>
                 (#x6D7B . #x7747)      ; <CJK>
                 (#x6D7C . #x7743)      ; <CJK>
                 (#x6D7D . #x775A)      ; <CJK>
                 (#x6D7E . #x7768)      ; <CJK>
                 (#x6E21 . #x7762)      ; <CJK>
                 (#x6E22 . #x7765)      ; <CJK>
                 (#x6E23 . #x777F)      ; <CJK>
                 (#x6E24 . #x778D)      ; <CJK>
                 (#x6E25 . #x777D)      ; <CJK>
                 (#x6E26 . #x7780)      ; <CJK>
                 (#x6E27 . #x778C)      ; <CJK>
                 (#x6E28 . #x7791)      ; <CJK>
                 (#x6E29 . #x779F)      ; <CJK>
                 (#x6E2A . #x77A0)      ; <CJK>
                 (#x6E2B . #x77B0)      ; <CJK>
                 (#x6E2C . #x77B5)      ; <CJK>
                 (#x6E2D . #x77BD)      ; <CJK>
                 (#x6E2E . #x753A)      ; <CJK>
                 (#x6E2F . #x7540)      ; <CJK>
                 (#x6E30 . #x754E)      ; <CJK>
                 (#x6E31 . #x754B)      ; <CJK>
                 (#x6E32 . #x7548)      ; <CJK>
                 (#x6E33 . #x755B)      ; <CJK>
                 (#x6E34 . #x7572)      ; <CJK>
                 (#x6E35 . #x7579)      ; <CJK>
                 (#x6E36 . #x7583)      ; <CJK>
                 (#x6E37 . #x7F58)      ; <CJK>
                 (#x6E38 . #x7F61)      ; <CJK>
                 (#x6E39 . #x7F5F)      ; <CJK>
                 (#x6E3A . #x8A48)      ; <CJK>
                 (#x6E3B . #x7F68)      ; <CJK>
                 (#x6E3C . #x7F74)      ; <CJK>
                 (#x6E3D . #x7F71)      ; <CJK>
                 (#x6E3E . #x7F79)      ; <CJK>
                 (#x6E3F . #x7F81)      ; <CJK>
                 (#x6E40 . #x7F7E)      ; <CJK>
                 (#x6E41 . #x76CD)      ; <CJK>
                 (#x6E42 . #x76E5)      ; <CJK>
                 (#x6E43 . #x8832)      ; <CJK>
                 (#x6E44 . #x9485)      ; <CJK>
                 (#x6E45 . #x9486)      ; <CJK>
                 (#x6E46 . #x9487)      ; <CJK>
                 (#x6E47 . #x948B)      ; <CJK>
                 (#x6E48 . #x948A)      ; <CJK>
                 (#x6E49 . #x948C)      ; <CJK>
                 (#x6E4A . #x948D)      ; <CJK>
                 (#x6E4B . #x948F)      ; <CJK>
                 (#x6E4C . #x9490)      ; <CJK>
                 (#x6E4D . #x9494)      ; <CJK>
                 (#x6E4E . #x9497)      ; <CJK>
                 (#x6E4F . #x9495)      ; <CJK>
                 (#x6E50 . #x949A)      ; <CJK>
                 (#x6E51 . #x949B)      ; <CJK>
                 (#x6E52 . #x949C)      ; <CJK>
                 (#x6E53 . #x94A3)      ; <CJK>
                 (#x6E54 . #x94A4)      ; <CJK>
                 (#x6E55 . #x94AB)      ; <CJK>
                 (#x6E56 . #x94AA)      ; <CJK>
                 (#x6E57 . #x94AD)      ; <CJK>
                 (#x6E58 . #x94AC)      ; <CJK>
                 (#x6E59 . #x94AF)      ; <CJK>
                 (#x6E5A . #x94B0)      ; <CJK>
                 (#x6E5B . #x94B2)      ; <CJK>
                 (#x6E5C . #x94B4)      ; <CJK>
                 (#x6E5D . #x94B6)      ; <CJK>
                 (#x6E5E . #x94B7)      ; <CJK>
                 (#x6E5F . #x94B8)      ; <CJK>
                 (#x6E60 . #x94B9)      ; <CJK>
                 (#x6E61 . #x94BA)      ; <CJK>
                 (#x6E62 . #x94BC)      ; <CJK>
                 (#x6E63 . #x94BD)      ; <CJK>
                 (#x6E64 . #x94BF)      ; <CJK>
                 (#x6E65 . #x94C4)      ; <CJK>
                 (#x6E66 . #x94C8)      ; <CJK>
                 (#x6E67 . #x94C9)      ; <CJK>
                 (#x6E68 . #x94CA)      ; <CJK>
                 (#x6E69 . #x94CB)      ; <CJK>
                 (#x6E6A . #x94CC)      ; <CJK>
                 (#x6E6B . #x94CD)      ; <CJK>
                 (#x6E6C . #x94CE)      ; <CJK>
                 (#x6E6D . #x94D0)      ; <CJK>
                 (#x6E6E . #x94D1)      ; <CJK>
                 (#x6E6F . #x94D2)      ; <CJK>
                 (#x6E70 . #x94D5)      ; <CJK>
                 (#x6E71 . #x94D6)      ; <CJK>
                 (#x6E72 . #x94D7)      ; <CJK>
                 (#x6E73 . #x94D9)      ; <CJK>
                 (#x6E74 . #x94D8)      ; <CJK>
                 (#x6E75 . #x94DB)      ; <CJK>
                 (#x6E76 . #x94DE)      ; <CJK>
                 (#x6E77 . #x94DF)      ; <CJK>
                 (#x6E78 . #x94E0)      ; <CJK>
                 (#x6E79 . #x94E2)      ; <CJK>
                 (#x6E7A . #x94E4)      ; <CJK>
                 (#x6E7B . #x94E5)      ; <CJK>
                 (#x6E7C . #x94E7)      ; <CJK>
                 (#x6E7D . #x94E8)      ; <CJK>
                 (#x6E7E . #x94EA)      ; <CJK>
                 (#x6F21 . #x94E9)      ; <CJK>
                 (#x6F22 . #x94EB)      ; <CJK>
                 (#x6F23 . #x94EE)      ; <CJK>
                 (#x6F24 . #x94EF)      ; <CJK>
                 (#x6F25 . #x94F3)      ; <CJK>
                 (#x6F26 . #x94F4)      ; <CJK>
                 (#x6F27 . #x94F5)      ; <CJK>
                 (#x6F28 . #x94F7)      ; <CJK>
                 (#x6F29 . #x94F9)      ; <CJK>
                 (#x6F2A . #x94FC)      ; <CJK>
                 (#x6F2B . #x94FD)      ; <CJK>
                 (#x6F2C . #x94FF)      ; <CJK>
                 (#x6F2D . #x9503)      ; <CJK>
                 (#x6F2E . #x9502)      ; <CJK>
                 (#x6F2F . #x9506)      ; <CJK>
                 (#x6F30 . #x9507)      ; <CJK>
                 (#x6F31 . #x9509)      ; <CJK>
                 (#x6F32 . #x950A)      ; <CJK>
                 (#x6F33 . #x950D)      ; <CJK>
                 (#x6F34 . #x950E)      ; <CJK>
                 (#x6F35 . #x950F)      ; <CJK>
                 (#x6F36 . #x9512)      ; <CJK>
                 (#x6F37 . #x9513)      ; <CJK>
                 (#x6F38 . #x9514)      ; <CJK>
                 (#x6F39 . #x9515)      ; <CJK>
                 (#x6F3A . #x9516)      ; <CJK>
                 (#x6F3B . #x9518)      ; <CJK>
                 (#x6F3C . #x951B)      ; <CJK>
                 (#x6F3D . #x951D)      ; <CJK>
                 (#x6F3E . #x951E)      ; <CJK>
                 (#x6F3F . #x951F)      ; <CJK>
                 (#x6F40 . #x9522)      ; <CJK>
                 (#x6F41 . #x952A)      ; <CJK>
                 (#x6F42 . #x952B)      ; <CJK>
                 (#x6F43 . #x9529)      ; <CJK>
                 (#x6F44 . #x952C)      ; <CJK>
                 (#x6F45 . #x9531)      ; <CJK>
                 (#x6F46 . #x9532)      ; <CJK>
                 (#x6F47 . #x9534)      ; <CJK>
                 (#x6F48 . #x9536)      ; <CJK>
                 (#x6F49 . #x9537)      ; <CJK>
                 (#x6F4A . #x9538)      ; <CJK>
                 (#x6F4B . #x953C)      ; <CJK>
                 (#x6F4C . #x953E)      ; <CJK>
                 (#x6F4D . #x953F)      ; <CJK>
                 (#x6F4E . #x9542)      ; <CJK>
                 (#x6F4F . #x9535)      ; <CJK>
                 (#x6F50 . #x9544)      ; <CJK>
                 (#x6F51 . #x9545)      ; <CJK>
                 (#x6F52 . #x9546)      ; <CJK>
                 (#x6F53 . #x9549)      ; <CJK>
                 (#x6F54 . #x954C)      ; <CJK>
                 (#x6F55 . #x954E)      ; <CJK>
                 (#x6F56 . #x954F)      ; <CJK>
                 (#x6F57 . #x9552)      ; <CJK>
                 (#x6F58 . #x9553)      ; <CJK>
                 (#x6F59 . #x9554)      ; <CJK>
                 (#x6F5A . #x9556)      ; <CJK>
                 (#x6F5B . #x9557)      ; <CJK>
                 (#x6F5C . #x9558)      ; <CJK>
                 (#x6F5D . #x9559)      ; <CJK>
                 (#x6F5E . #x955B)      ; <CJK>
                 (#x6F5F . #x955E)      ; <CJK>
                 (#x6F60 . #x955F)      ; <CJK>
                 (#x6F61 . #x955D)      ; <CJK>
                 (#x6F62 . #x9561)      ; <CJK>
                 (#x6F63 . #x9562)      ; <CJK>
                 (#x6F64 . #x9564)      ; <CJK>
                 (#x6F65 . #x9565)      ; <CJK>
                 (#x6F66 . #x9566)      ; <CJK>
                 (#x6F67 . #x9567)      ; <CJK>
                 (#x6F68 . #x9568)      ; <CJK>
                 (#x6F69 . #x9569)      ; <CJK>
                 (#x6F6A . #x956A)      ; <CJK>
                 (#x6F6B . #x956B)      ; <CJK>
                 (#x6F6C . #x956C)      ; <CJK>
                 (#x6F6D . #x956F)      ; <CJK>
                 (#x6F6E . #x9571)      ; <CJK>
                 (#x6F6F . #x9572)      ; <CJK>
                 (#x6F70 . #x9573)      ; <CJK>
                 (#x6F71 . #x953A)      ; <CJK>
                 (#x6F72 . #x77E7)      ; <CJK>
                 (#x6F73 . #x77EC)      ; <CJK>
                 (#x6F74 . #x96C9)      ; <CJK>
                 (#x6F75 . #x79D5)      ; <CJK>
                 (#x6F76 . #x79ED)      ; <CJK>
                 (#x6F77 . #x79E3)      ; <CJK>
                 (#x6F78 . #x79EB)      ; <CJK>
                 (#x6F79 . #x7A06)      ; <CJK>
                 (#x6F7A . #x5D47)      ; <CJK>
                 (#x6F7B . #x7A03)      ; <CJK>
                 (#x6F7C . #x7A02)      ; <CJK>
                 (#x6F7D . #x7A1E)      ; <CJK>
                 (#x6F7E . #x7A14)      ; <CJK>
                 (#x7021 . #x7A39)      ; <CJK>
                 (#x7022 . #x7A37)      ; <CJK>
                 (#x7023 . #x7A51)      ; <CJK>
                 (#x7024 . #x9ECF)      ; <CJK>
                 (#x7025 . #x99A5)      ; <CJK>
                 (#x7026 . #x7A70)      ; <CJK>
                 (#x7027 . #x7688)      ; <CJK>
                 (#x7028 . #x768E)      ; <CJK>
                 (#x7029 . #x7693)      ; <CJK>
                 (#x702A . #x7699)      ; <CJK>
                 (#x702B . #x76A4)      ; <CJK>
                 (#x702C . #x74DE)      ; <CJK>
                 (#x702D . #x74E0)      ; <CJK>
                 (#x702E . #x752C)      ; <CJK>
                 (#x702F . #x9E20)      ; <CJK>
                 (#x7030 . #x9E22)      ; <CJK>
                 (#x7031 . #x9E28)      ; <CJK>
                 (#x7032 . #x9E29)      ; <CJK>
                 (#x7033 . #x9E2A)      ; <CJK>
                 (#x7034 . #x9E2B)      ; <CJK>
                 (#x7035 . #x9E2C)      ; <CJK>
                 (#x7036 . #x9E32)      ; <CJK>
                 (#x7037 . #x9E31)      ; <CJK>
                 (#x7038 . #x9E36)      ; <CJK>
                 (#x7039 . #x9E38)      ; <CJK>
                 (#x703A . #x9E37)      ; <CJK>
                 (#x703B . #x9E39)      ; <CJK>
                 (#x703C . #x9E3A)      ; <CJK>
                 (#x703D . #x9E3E)      ; <CJK>
                 (#x703E . #x9E41)      ; <CJK>
                 (#x703F . #x9E42)      ; <CJK>
                 (#x7040 . #x9E44)      ; <CJK>
                 (#x7041 . #x9E46)      ; <CJK>
                 (#x7042 . #x9E47)      ; <CJK>
                 (#x7043 . #x9E48)      ; <CJK>
                 (#x7044 . #x9E49)      ; <CJK>
                 (#x7045 . #x9E4B)      ; <CJK>
                 (#x7046 . #x9E4C)      ; <CJK>
                 (#x7047 . #x9E4E)      ; <CJK>
                 (#x7048 . #x9E51)      ; <CJK>
                 (#x7049 . #x9E55)      ; <CJK>
                 (#x704A . #x9E57)      ; <CJK>
                 (#x704B . #x9E5A)      ; <CJK>
                 (#x704C . #x9E5B)      ; <CJK>
                 (#x704D . #x9E5C)      ; <CJK>
                 (#x704E . #x9E5E)      ; <CJK>
                 (#x704F . #x9E63)      ; <CJK>
                 (#x7050 . #x9E66)      ; <CJK>
                 (#x7051 . #x9E67)      ; <CJK>
                 (#x7052 . #x9E68)      ; <CJK>
                 (#x7053 . #x9E69)      ; <CJK>
                 (#x7054 . #x9E6A)      ; <CJK>
                 (#x7055 . #x9E6B)      ; <CJK>
                 (#x7056 . #x9E6C)      ; <CJK>
                 (#x7057 . #x9E71)      ; <CJK>
                 (#x7058 . #x9E6D)      ; <CJK>
                 (#x7059 . #x9E73)      ; <CJK>
                 (#x705A . #x7592)      ; <CJK>
                 (#x705B . #x7594)      ; <CJK>
                 (#x705C . #x7596)      ; <CJK>
                 (#x705D . #x75A0)      ; <CJK>
                 (#x705E . #x759D)      ; <CJK>
                 (#x705F . #x75AC)      ; <CJK>
                 (#x7060 . #x75A3)      ; <CJK>
                 (#x7061 . #x75B3)      ; <CJK>
                 (#x7062 . #x75B4)      ; <CJK>
                 (#x7063 . #x75B8)      ; <CJK>
                 (#x7064 . #x75C4)      ; <CJK>
                 (#x7065 . #x75B1)      ; <CJK>
                 (#x7066 . #x75B0)      ; <CJK>
                 (#x7067 . #x75C3)      ; <CJK>
                 (#x7068 . #x75C2)      ; <CJK>
                 (#x7069 . #x75D6)      ; <CJK>
                 (#x706A . #x75CD)      ; <CJK>
                 (#x706B . #x75E3)      ; <CJK>
                 (#x706C . #x75E8)      ; <CJK>
                 (#x706D . #x75E6)      ; <CJK>
                 (#x706E . #x75E4)      ; <CJK>
                 (#x706F . #x75EB)      ; <CJK>
                 (#x7070 . #x75E7)      ; <CJK>
                 (#x7071 . #x7603)      ; <CJK>
                 (#x7072 . #x75F1)      ; <CJK>
                 (#x7073 . #x75FC)      ; <CJK>
                 (#x7074 . #x75FF)      ; <CJK>
                 (#x7075 . #x7610)      ; <CJK>
                 (#x7076 . #x7600)      ; <CJK>
                 (#x7077 . #x7605)      ; <CJK>
                 (#x7078 . #x760C)      ; <CJK>
                 (#x7079 . #x7617)      ; <CJK>
                 (#x707A . #x760A)      ; <CJK>
                 (#x707B . #x7625)      ; <CJK>
                 (#x707C . #x7618)      ; <CJK>
                 (#x707D . #x7615)      ; <CJK>
                 (#x707E . #x7619)      ; <CJK>
                 (#x7121 . #x761B)      ; <CJK>
                 (#x7122 . #x763C)      ; <CJK>
                 (#x7123 . #x7622)      ; <CJK>
                 (#x7124 . #x7620)      ; <CJK>
                 (#x7125 . #x7640)      ; <CJK>
                 (#x7126 . #x762D)      ; <CJK>
                 (#x7127 . #x7630)      ; <CJK>
                 (#x7128 . #x763F)      ; <CJK>
                 (#x7129 . #x7635)      ; <CJK>
                 (#x712A . #x7643)      ; <CJK>
                 (#x712B . #x763E)      ; <CJK>
                 (#x712C . #x7633)      ; <CJK>
                 (#x712D . #x764D)      ; <CJK>
                 (#x712E . #x765E)      ; <CJK>
                 (#x712F . #x7654)      ; <CJK>
                 (#x7130 . #x765C)      ; <CJK>
                 (#x7131 . #x7656)      ; <CJK>
                 (#x7132 . #x766B)      ; <CJK>
                 (#x7133 . #x766F)      ; <CJK>
                 (#x7134 . #x7FCA)      ; <CJK>
                 (#x7135 . #x7AE6)      ; <CJK>
                 (#x7136 . #x7A78)      ; <CJK>
                 (#x7137 . #x7A79)      ; <CJK>
                 (#x7138 . #x7A80)      ; <CJK>
                 (#x7139 . #x7A86)      ; <CJK>
                 (#x713A . #x7A88)      ; <CJK>
                 (#x713B . #x7A95)      ; <CJK>
                 (#x713C . #x7AA6)      ; <CJK>
                 (#x713D . #x7AA0)      ; <CJK>
                 (#x713E . #x7AAC)      ; <CJK>
                 (#x713F . #x7AA8)      ; <CJK>
                 (#x7140 . #x7AAD)      ; <CJK>
                 (#x7141 . #x7AB3)      ; <CJK>
                 (#x7142 . #x8864)      ; <CJK>
                 (#x7143 . #x8869)      ; <CJK>
                 (#x7144 . #x8872)      ; <CJK>
                 (#x7145 . #x887D)      ; <CJK>
                 (#x7146 . #x887F)      ; <CJK>
                 (#x7147 . #x8882)      ; <CJK>
                 (#x7148 . #x88A2)      ; <CJK>
                 (#x7149 . #x88C6)      ; <CJK>
                 (#x714A . #x88B7)      ; <CJK>
                 (#x714B . #x88BC)      ; <CJK>
                 (#x714C . #x88C9)      ; <CJK>
                 (#x714D . #x88E2)      ; <CJK>
                 (#x714E . #x88CE)      ; <CJK>
                 (#x714F . #x88E3)      ; <CJK>
                 (#x7150 . #x88E5)      ; <CJK>
                 (#x7151 . #x88F1)      ; <CJK>
                 (#x7152 . #x891A)      ; <CJK>
                 (#x7153 . #x88FC)      ; <CJK>
                 (#x7154 . #x88E8)      ; <CJK>
                 (#x7155 . #x88FE)      ; <CJK>
                 (#x7156 . #x88F0)      ; <CJK>
                 (#x7157 . #x8921)      ; <CJK>
                 (#x7158 . #x8919)      ; <CJK>
                 (#x7159 . #x8913)      ; <CJK>
                 (#x715A . #x891B)      ; <CJK>
                 (#x715B . #x890A)      ; <CJK>
                 (#x715C . #x8934)      ; <CJK>
                 (#x715D . #x892B)      ; <CJK>
                 (#x715E . #x8936)      ; <CJK>
                 (#x715F . #x8941)      ; <CJK>
                 (#x7160 . #x8966)      ; <CJK>
                 (#x7161 . #x897B)      ; <CJK>
                 (#x7162 . #x758B)      ; <CJK>
                 (#x7163 . #x80E5)      ; <CJK>
                 (#x7164 . #x76B2)      ; <CJK>
                 (#x7165 . #x76B4)      ; <CJK>
                 (#x7166 . #x77DC)      ; <CJK>
                 (#x7167 . #x8012)      ; <CJK>
                 (#x7168 . #x8014)      ; <CJK>
                 (#x7169 . #x8016)      ; <CJK>
                 (#x716A . #x801C)      ; <CJK>
                 (#x716B . #x8020)      ; <CJK>
                 (#x716C . #x8022)      ; <CJK>
                 (#x716D . #x8025)      ; <CJK>
                 (#x716E . #x8026)      ; <CJK>
                 (#x716F . #x8027)      ; <CJK>
                 (#x7170 . #x8029)      ; <CJK>
                 (#x7171 . #x8028)      ; <CJK>
                 (#x7172 . #x8031)      ; <CJK>
                 (#x7173 . #x800B)      ; <CJK>
                 (#x7174 . #x8035)      ; <CJK>
                 (#x7175 . #x8043)      ; <CJK>
                 (#x7176 . #x8046)      ; <CJK>
                 (#x7177 . #x804D)      ; <CJK>
                 (#x7178 . #x8052)      ; <CJK>
                 (#x7179 . #x8069)      ; <CJK>
                 (#x717A . #x8071)      ; <CJK>
                 (#x717B . #x8983)      ; <CJK>
                 (#x717C . #x9878)      ; <CJK>
                 (#x717D . #x9880)      ; <CJK>
                 (#x717E . #x9883)      ; <CJK>
                 (#x7221 . #x9889)      ; <CJK>
                 (#x7222 . #x988C)      ; <CJK>
                 (#x7223 . #x988D)      ; <CJK>
                 (#x7224 . #x988F)      ; <CJK>
                 (#x7225 . #x9894)      ; <CJK>
                 (#x7226 . #x989A)      ; <CJK>
                 (#x7227 . #x989B)      ; <CJK>
                 (#x7228 . #x989E)      ; <CJK>
                 (#x7229 . #x989F)      ; <CJK>
                 (#x722A . #x98A1)      ; <CJK>
                 (#x722B . #x98A2)      ; <CJK>
                 (#x722C . #x98A5)      ; <CJK>
                 (#x722D . #x98A6)      ; <CJK>
                 (#x722E . #x864D)      ; <CJK>
                 (#x722F . #x8654)      ; <CJK>
                 (#x7230 . #x866C)      ; <CJK>
                 (#x7231 . #x866E)      ; <CJK>
                 (#x7232 . #x867F)      ; <CJK>
                 (#x7233 . #x867A)      ; <CJK>
                 (#x7234 . #x867C)      ; <CJK>
                 (#x7235 . #x867B)      ; <CJK>
                 (#x7236 . #x86A8)      ; <CJK>
                 (#x7237 . #x868D)      ; <CJK>
                 (#x7238 . #x868B)      ; <CJK>
                 (#x7239 . #x86AC)      ; <CJK>
                 (#x723A . #x869D)      ; <CJK>
                 (#x723B . #x86A7)      ; <CJK>
                 (#x723C . #x86A3)      ; <CJK>
                 (#x723D . #x86AA)      ; <CJK>
                 (#x723E . #x8693)      ; <CJK>
                 (#x723F . #x86A9)      ; <CJK>
                 (#x7240 . #x86B6)      ; <CJK>
                 (#x7241 . #x86C4)      ; <CJK>
                 (#x7242 . #x86B5)      ; <CJK>
                 (#x7243 . #x86CE)      ; <CJK>
                 (#x7244 . #x86B0)      ; <CJK>
                 (#x7245 . #x86BA)      ; <CJK>
                 (#x7246 . #x86B1)      ; <CJK>
                 (#x7247 . #x86AF)      ; <CJK>
                 (#x7248 . #x86C9)      ; <CJK>
                 (#x7249 . #x86CF)      ; <CJK>
                 (#x724A . #x86B4)      ; <CJK>
                 (#x724B . #x86E9)      ; <CJK>
                 (#x724C . #x86F1)      ; <CJK>
                 (#x724D . #x86F2)      ; <CJK>
                 (#x724E . #x86ED)      ; <CJK>
                 (#x724F . #x86F3)      ; <CJK>
                 (#x7250 . #x86D0)      ; <CJK>
                 (#x7251 . #x8713)      ; <CJK>
                 (#x7252 . #x86DE)      ; <CJK>
                 (#x7253 . #x86F4)      ; <CJK>
                 (#x7254 . #x86DF)      ; <CJK>
                 (#x7255 . #x86D8)      ; <CJK>
                 (#x7256 . #x86D1)      ; <CJK>
                 (#x7257 . #x8703)      ; <CJK>
                 (#x7258 . #x8707)      ; <CJK>
                 (#x7259 . #x86F8)      ; <CJK>
                 (#x725A . #x8708)      ; <CJK>
                 (#x725B . #x870A)      ; <CJK>
                 (#x725C . #x870D)      ; <CJK>
                 (#x725D . #x8709)      ; <CJK>
                 (#x725E . #x8723)      ; <CJK>
                 (#x725F . #x873B)      ; <CJK>
                 (#x7260 . #x871E)      ; <CJK>
                 (#x7261 . #x8725)      ; <CJK>
                 (#x7262 . #x872E)      ; <CJK>
                 (#x7263 . #x871A)      ; <CJK>
                 (#x7264 . #x873E)      ; <CJK>
                 (#x7265 . #x8748)      ; <CJK>
                 (#x7266 . #x8734)      ; <CJK>
                 (#x7267 . #x8731)      ; <CJK>
                 (#x7268 . #x8729)      ; <CJK>
                 (#x7269 . #x8737)      ; <CJK>
                 (#x726A . #x873F)      ; <CJK>
                 (#x726B . #x8782)      ; <CJK>
                 (#x726C . #x8722)      ; <CJK>
                 (#x726D . #x877D)      ; <CJK>
                 (#x726E . #x877E)      ; <CJK>
                 (#x726F . #x877B)      ; <CJK>
                 (#x7270 . #x8760)      ; <CJK>
                 (#x7271 . #x8770)      ; <CJK>
                 (#x7272 . #x874C)      ; <CJK>
                 (#x7273 . #x876E)      ; <CJK>
                 (#x7274 . #x878B)      ; <CJK>
                 (#x7275 . #x8753)      ; <CJK>
                 (#x7276 . #x8763)      ; <CJK>
                 (#x7277 . #x877C)      ; <CJK>
                 (#x7278 . #x8764)      ; <CJK>
                 (#x7279 . #x8759)      ; <CJK>
                 (#x727A . #x8765)      ; <CJK>
                 (#x727B . #x8793)      ; <CJK>
                 (#x727C . #x87AF)      ; <CJK>
                 (#x727D . #x87A8)      ; <CJK>
                 (#x727E . #x87D2)      ; <CJK>
                 (#x7321 . #x87C6)      ; <CJK>
                 (#x7322 . #x8788)      ; <CJK>
                 (#x7323 . #x8785)      ; <CJK>
                 (#x7324 . #x87AD)      ; <CJK>
                 (#x7325 . #x8797)      ; <CJK>
                 (#x7326 . #x8783)      ; <CJK>
                 (#x7327 . #x87AB)      ; <CJK>
                 (#x7328 . #x87E5)      ; <CJK>
                 (#x7329 . #x87AC)      ; <CJK>
                 (#x732A . #x87B5)      ; <CJK>
                 (#x732B . #x87B3)      ; <CJK>
                 (#x732C . #x87CB)      ; <CJK>
                 (#x732D . #x87D3)      ; <CJK>
                 (#x732E . #x87BD)      ; <CJK>
                 (#x732F . #x87D1)      ; <CJK>
                 (#x7330 . #x87C0)      ; <CJK>
                 (#x7331 . #x87CA)      ; <CJK>
                 (#x7332 . #x87DB)      ; <CJK>
                 (#x7333 . #x87EA)      ; <CJK>
                 (#x7334 . #x87E0)      ; <CJK>
                 (#x7335 . #x87EE)      ; <CJK>
                 (#x7336 . #x8816)      ; <CJK>
                 (#x7337 . #x8813)      ; <CJK>
                 (#x7338 . #x87FE)      ; <CJK>
                 (#x7339 . #x880A)      ; <CJK>
                 (#x733A . #x881B)      ; <CJK>
                 (#x733B . #x8821)      ; <CJK>
                 (#x733C . #x8839)      ; <CJK>
                 (#x733D . #x883C)      ; <CJK>
                 (#x733E . #x7F36)      ; <CJK>
                 (#x733F . #x7F42)      ; <CJK>
                 (#x7340 . #x7F44)      ; <CJK>
                 (#x7341 . #x7F45)      ; <CJK>
                 (#x7342 . #x8210)      ; <CJK>
                 (#x7343 . #x7AFA)      ; <CJK>
                 (#x7344 . #x7AFD)      ; <CJK>
                 (#x7345 . #x7B08)      ; <CJK>
                 (#x7346 . #x7B03)      ; <CJK>
                 (#x7347 . #x7B04)      ; <CJK>
                 (#x7348 . #x7B15)      ; <CJK>
                 (#x7349 . #x7B0A)      ; <CJK>
                 (#x734A . #x7B2B)      ; <CJK>
                 (#x734B . #x7B0F)      ; <CJK>
                 (#x734C . #x7B47)      ; <CJK>
                 (#x734D . #x7B38)      ; <CJK>
                 (#x734E . #x7B2A)      ; <CJK>
                 (#x734F . #x7B19)      ; <CJK>
                 (#x7350 . #x7B2E)      ; <CJK>
                 (#x7351 . #x7B31)      ; <CJK>
                 (#x7352 . #x7B20)      ; <CJK>
                 (#x7353 . #x7B25)      ; <CJK>
                 (#x7354 . #x7B24)      ; <CJK>
                 (#x7355 . #x7B33)      ; <CJK>
                 (#x7356 . #x7B3E)      ; <CJK>
                 (#x7357 . #x7B1E)      ; <CJK>
                 (#x7358 . #x7B58)      ; <CJK>
                 (#x7359 . #x7B5A)      ; <CJK>
                 (#x735A . #x7B45)      ; <CJK>
                 (#x735B . #x7B75)      ; <CJK>
                 (#x735C . #x7B4C)      ; <CJK>
                 (#x735D . #x7B5D)      ; <CJK>
                 (#x735E . #x7B60)      ; <CJK>
                 (#x735F . #x7B6E)      ; <CJK>
                 (#x7360 . #x7B7B)      ; <CJK>
                 (#x7361 . #x7B62)      ; <CJK>
                 (#x7362 . #x7B72)      ; <CJK>
                 (#x7363 . #x7B71)      ; <CJK>
                 (#x7364 . #x7B90)      ; <CJK>
                 (#x7365 . #x7BA6)      ; <CJK>
                 (#x7366 . #x7BA7)      ; <CJK>
                 (#x7367 . #x7BB8)      ; <CJK>
                 (#x7368 . #x7BAC)      ; <CJK>
                 (#x7369 . #x7B9D)      ; <CJK>
                 (#x736A . #x7BA8)      ; <CJK>
                 (#x736B . #x7B85)      ; <CJK>
                 (#x736C . #x7BAA)      ; <CJK>
                 (#x736D . #x7B9C)      ; <CJK>
                 (#x736E . #x7BA2)      ; <CJK>
                 (#x736F . #x7BAB)      ; <CJK>
                 (#x7370 . #x7BB4)      ; <CJK>
                 (#x7371 . #x7BD1)      ; <CJK>
                 (#x7372 . #x7BC1)      ; <CJK>
                 (#x7373 . #x7BCC)      ; <CJK>
                 (#x7374 . #x7BDD)      ; <CJK>
                 (#x7375 . #x7BDA)      ; <CJK>
                 (#x7376 . #x7BE5)      ; <CJK>
                 (#x7377 . #x7BE6)      ; <CJK>
                 (#x7378 . #x7BEA)      ; <CJK>
                 (#x7379 . #x7C0C)      ; <CJK>
                 (#x737A . #x7BFE)      ; <CJK>
                 (#x737B . #x7BFC)      ; <CJK>
                 (#x737C . #x7C0F)      ; <CJK>
                 (#x737D . #x7C16)      ; <CJK>
                 (#x737E . #x7C0B)      ; <CJK>
                 (#x7421 . #x7C1F)      ; <CJK>
                 (#x7422 . #x7C2A)      ; <CJK>
                 (#x7423 . #x7C26)      ; <CJK>
                 (#x7424 . #x7C38)      ; <CJK>
                 (#x7425 . #x7C41)      ; <CJK>
                 (#x7426 . #x7C40)      ; <CJK>
                 (#x7427 . #x81FE)      ; <CJK>
                 (#x7428 . #x8201)      ; <CJK>
                 (#x7429 . #x8202)      ; <CJK>
                 (#x742A . #x8204)      ; <CJK>
                 (#x742B . #x81EC)      ; <CJK>
                 (#x742C . #x8844)      ; <CJK>
                 (#x742D . #x8221)      ; <CJK>
                 (#x742E . #x8222)      ; <CJK>
                 (#x742F . #x8223)      ; <CJK>
                 (#x7430 . #x822D)      ; <CJK>
                 (#x7431 . #x822F)      ; <CJK>
                 (#x7432 . #x8228)      ; <CJK>
                 (#x7433 . #x822B)      ; <CJK>
                 (#x7434 . #x8238)      ; <CJK>
                 (#x7435 . #x823B)      ; <CJK>
                 (#x7436 . #x8233)      ; <CJK>
                 (#x7437 . #x8234)      ; <CJK>
                 (#x7438 . #x823E)      ; <CJK>
                 (#x7439 . #x8244)      ; <CJK>
                 (#x743A . #x8249)      ; <CJK>
                 (#x743B . #x824B)      ; <CJK>
                 (#x743C . #x824F)      ; <CJK>
                 (#x743D . #x825A)      ; <CJK>
                 (#x743E . #x825F)      ; <CJK>
                 (#x743F . #x8268)      ; <CJK>
                 (#x7440 . #x887E)      ; <CJK>
                 (#x7441 . #x8885)      ; <CJK>
                 (#x7442 . #x8888)      ; <CJK>
                 (#x7443 . #x88D8)      ; <CJK>
                 (#x7444 . #x88DF)      ; <CJK>
                 (#x7445 . #x895E)      ; <CJK>
                 (#x7446 . #x7F9D)      ; <CJK>
                 (#x7447 . #x7F9F)      ; <CJK>
                 (#x7448 . #x7FA7)      ; <CJK>
                 (#x7449 . #x7FAF)      ; <CJK>
                 (#x744A . #x7FB0)      ; <CJK>
                 (#x744B . #x7FB2)      ; <CJK>
                 (#x744C . #x7C7C)      ; <CJK>
                 (#x744D . #x6549)      ; <CJK>
                 (#x744E . #x7C91)      ; <CJK>
                 (#x744F . #x7C9D)      ; <CJK>
                 (#x7450 . #x7C9C)      ; <CJK>
                 (#x7451 . #x7C9E)      ; <CJK>
                 (#x7452 . #x7CA2)      ; <CJK>
                 (#x7453 . #x7CB2)      ; <CJK>
                 (#x7454 . #x7CBC)      ; <CJK>
                 (#x7455 . #x7CBD)      ; <CJK>
                 (#x7456 . #x7CC1)      ; <CJK>
                 (#x7457 . #x7CC7)      ; <CJK>
                 (#x7458 . #x7CCC)      ; <CJK>
                 (#x7459 . #x7CCD)      ; <CJK>
                 (#x745A . #x7CC8)      ; <CJK>
                 (#x745B . #x7CC5)      ; <CJK>
                 (#x745C . #x7CD7)      ; <CJK>
                 (#x745D . #x7CE8)      ; <CJK>
                 (#x745E . #x826E)      ; <CJK>
                 (#x745F . #x66A8)      ; <CJK>
                 (#x7460 . #x7FBF)      ; <CJK>
                 (#x7461 . #x7FCE)      ; <CJK>
                 (#x7462 . #x7FD5)      ; <CJK>
                 (#x7463 . #x7FE5)      ; <CJK>
                 (#x7464 . #x7FE1)      ; <CJK>
                 (#x7465 . #x7FE6)      ; <CJK>
                 (#x7466 . #x7FE9)      ; <CJK>
                 (#x7467 . #x7FEE)      ; <CJK>
                 (#x7468 . #x7FF3)      ; <CJK>
                 (#x7469 . #x7CF8)      ; <CJK>
                 (#x746A . #x7D77)      ; <CJK>
                 (#x746B . #x7DA6)      ; <CJK>
                 (#x746C . #x7DAE)      ; <CJK>
                 (#x746D . #x7E47)      ; <CJK>
                 (#x746E . #x7E9B)      ; <CJK>
                 (#x746F . #x9EB8)      ; <CJK>
                 (#x7470 . #x9EB4)      ; <CJK>
                 (#x7471 . #x8D73)      ; <CJK>
                 (#x7472 . #x8D84)      ; <CJK>
                 (#x7473 . #x8D94)      ; <CJK>
                 (#x7474 . #x8D91)      ; <CJK>
                 (#x7475 . #x8DB1)      ; <CJK>
                 (#x7476 . #x8D67)      ; <CJK>
                 (#x7477 . #x8D6D)      ; <CJK>
                 (#x7478 . #x8C47)      ; <CJK>
                 (#x7479 . #x8C49)      ; <CJK>
                 (#x747A . #x914A)      ; <CJK>
                 (#x747B . #x9150)      ; <CJK>
                 (#x747C . #x914E)      ; <CJK>
                 (#x747D . #x914F)      ; <CJK>
                 (#x747E . #x9164)      ; <CJK>
                 (#x7521 . #x9162)      ; <CJK>
                 (#x7522 . #x9161)      ; <CJK>
                 (#x7523 . #x9170)      ; <CJK>
                 (#x7524 . #x9169)      ; <CJK>
                 (#x7525 . #x916F)      ; <CJK>
                 (#x7526 . #x917D)      ; <CJK>
                 (#x7527 . #x917E)      ; <CJK>
                 (#x7528 . #x9172)      ; <CJK>
                 (#x7529 . #x9174)      ; <CJK>
                 (#x752A . #x9179)      ; <CJK>
                 (#x752B . #x918C)      ; <CJK>
                 (#x752C . #x9185)      ; <CJK>
                 (#x752D . #x9190)      ; <CJK>
                 (#x752E . #x918D)      ; <CJK>
                 (#x752F . #x9191)      ; <CJK>
                 (#x7530 . #x91A2)      ; <CJK>
                 (#x7531 . #x91A3)      ; <CJK>
                 (#x7532 . #x91AA)      ; <CJK>
                 (#x7533 . #x91AD)      ; <CJK>
                 (#x7534 . #x91AE)      ; <CJK>
                 (#x7535 . #x91AF)      ; <CJK>
                 (#x7536 . #x91B5)      ; <CJK>
                 (#x7537 . #x91B4)      ; <CJK>
                 (#x7538 . #x91BA)      ; <CJK>
                 (#x7539 . #x8C55)      ; <CJK>
                 (#x753A . #x9E7E)      ; <CJK>
                 (#x753B . #x8DB8)      ; <CJK>
                 (#x753C . #x8DEB)      ; <CJK>
                 (#x753D . #x8E05)      ; <CJK>
                 (#x753E . #x8E59)      ; <CJK>
                 (#x753F . #x8E69)      ; <CJK>
                 (#x7540 . #x8DB5)      ; <CJK>
                 (#x7541 . #x8DBF)      ; <CJK>
                 (#x7542 . #x8DBC)      ; <CJK>
                 (#x7543 . #x8DBA)      ; <CJK>
                 (#x7544 . #x8DC4)      ; <CJK>
                 (#x7545 . #x8DD6)      ; <CJK>
                 (#x7546 . #x8DD7)      ; <CJK>
                 (#x7547 . #x8DDA)      ; <CJK>
                 (#x7548 . #x8DDE)      ; <CJK>
                 (#x7549 . #x8DCE)      ; <CJK>
                 (#x754A . #x8DCF)      ; <CJK>
                 (#x754B . #x8DDB)      ; <CJK>
                 (#x754C . #x8DC6)      ; <CJK>
                 (#x754D . #x8DEC)      ; <CJK>
                 (#x754E . #x8DF7)      ; <CJK>
                 (#x754F . #x8DF8)      ; <CJK>
                 (#x7550 . #x8DE3)      ; <CJK>
                 (#x7551 . #x8DF9)      ; <CJK>
                 (#x7552 . #x8DFB)      ; <CJK>
                 (#x7553 . #x8DE4)      ; <CJK>
                 (#x7554 . #x8E09)      ; <CJK>
                 (#x7555 . #x8DFD)      ; <CJK>
                 (#x7556 . #x8E14)      ; <CJK>
                 (#x7557 . #x8E1D)      ; <CJK>
                 (#x7558 . #x8E1F)      ; <CJK>
                 (#x7559 . #x8E2C)      ; <CJK>
                 (#x755A . #x8E2E)      ; <CJK>
                 (#x755B . #x8E23)      ; <CJK>
                 (#x755C . #x8E2F)      ; <CJK>
                 (#x755D . #x8E3A)      ; <CJK>
                 (#x755E . #x8E40)      ; <CJK>
                 (#x755F . #x8E39)      ; <CJK>
                 (#x7560 . #x8E35)      ; <CJK>
                 (#x7561 . #x8E3D)      ; <CJK>
                 (#x7562 . #x8E31)      ; <CJK>
                 (#x7563 . #x8E49)      ; <CJK>
                 (#x7564 . #x8E41)      ; <CJK>
                 (#x7565 . #x8E42)      ; <CJK>
                 (#x7566 . #x8E51)      ; <CJK>
                 (#x7567 . #x8E52)      ; <CJK>
                 (#x7568 . #x8E4A)      ; <CJK>
                 (#x7569 . #x8E70)      ; <CJK>
                 (#x756A . #x8E76)      ; <CJK>
                 (#x756B . #x8E7C)      ; <CJK>
                 (#x756C . #x8E6F)      ; <CJK>
                 (#x756D . #x8E74)      ; <CJK>
                 (#x756E . #x8E85)      ; <CJK>
                 (#x756F . #x8E8F)      ; <CJK>
                 (#x7570 . #x8E94)      ; <CJK>
                 (#x7571 . #x8E90)      ; <CJK>
                 (#x7572 . #x8E9C)      ; <CJK>
                 (#x7573 . #x8E9E)      ; <CJK>
                 (#x7574 . #x8C78)      ; <CJK>
                 (#x7575 . #x8C82)      ; <CJK>
                 (#x7576 . #x8C8A)      ; <CJK>
                 (#x7577 . #x8C85)      ; <CJK>
                 (#x7578 . #x8C98)      ; <CJK>
                 (#x7579 . #x8C94)      ; <CJK>
                 (#x757A . #x659B)      ; <CJK>
                 (#x757B . #x89D6)      ; <CJK>
                 (#x757C . #x89DE)      ; <CJK>
                 (#x757D . #x89DA)      ; <CJK>
                 (#x757E . #x89DC)      ; <CJK>
                 (#x7621 . #x89E5)      ; <CJK>
                 (#x7622 . #x89EB)      ; <CJK>
                 (#x7623 . #x89EF)      ; <CJK>
                 (#x7624 . #x8A3E)      ; <CJK>
                 (#x7625 . #x8B26)      ; <CJK>
                 (#x7626 . #x9753)      ; <CJK>
                 (#x7627 . #x96E9)      ; <CJK>
                 (#x7628 . #x96F3)      ; <CJK>
                 (#x7629 . #x96EF)      ; <CJK>
                 (#x762A . #x9706)      ; <CJK>
                 (#x762B . #x9701)      ; <CJK>
                 (#x762C . #x9708)      ; <CJK>
                 (#x762D . #x970F)      ; <CJK>
                 (#x762E . #x970E)      ; <CJK>
                 (#x762F . #x972A)      ; <CJK>
                 (#x7630 . #x972D)      ; <CJK>
                 (#x7631 . #x9730)      ; <CJK>
                 (#x7632 . #x973E)      ; <CJK>
                 (#x7633 . #x9F80)      ; <CJK>
                 (#x7634 . #x9F83)      ; <CJK>
                 (#x7635 . #x9F85)      ; <CJK>
                 (#x7636 . #x9F86)      ; <CJK>
                 (#x7637 . #x9F87)      ; <CJK>
                 (#x7638 . #x9F88)      ; <CJK>
                 (#x7639 . #x9F89)      ; <CJK>
                 (#x763A . #x9F8A)      ; <CJK>
                 (#x763B . #x9F8C)      ; <CJK>
                 (#x763C . #x9EFE)      ; <CJK>
                 (#x763D . #x9F0B)      ; <CJK>
                 (#x763E . #x9F0D)      ; <CJK>
                 (#x763F . #x96B9)      ; <CJK>
                 (#x7640 . #x96BC)      ; <CJK>
                 (#x7641 . #x96BD)      ; <CJK>
                 (#x7642 . #x96CE)      ; <CJK>
                 (#x7643 . #x96D2)      ; <CJK>
                 (#x7644 . #x77BF)      ; <CJK>
                 (#x7645 . #x96E0)      ; <CJK>
                 (#x7646 . #x928E)      ; <CJK>
                 (#x7647 . #x92AE)      ; <CJK>
                 (#x7648 . #x92C8)      ; <CJK>
                 (#x7649 . #x933E)      ; <CJK>
                 (#x764A . #x936A)      ; <CJK>
                 (#x764B . #x93CA)      ; <CJK>
                 (#x764C . #x938F)      ; <CJK>
                 (#x764D . #x943E)      ; <CJK>
                 (#x764E . #x946B)      ; <CJK>
                 (#x764F . #x9C7F)      ; <CJK>
                 (#x7650 . #x9C82)      ; <CJK>
                 (#x7651 . #x9C85)      ; <CJK>
                 (#x7652 . #x9C86)      ; <CJK>
                 (#x7653 . #x9C87)      ; <CJK>
                 (#x7654 . #x9C88)      ; <CJK>
                 (#x7655 . #x7A23)      ; <CJK>
                 (#x7656 . #x9C8B)      ; <CJK>
                 (#x7657 . #x9C8E)      ; <CJK>
                 (#x7658 . #x9C90)      ; <CJK>
                 (#x7659 . #x9C91)      ; <CJK>
                 (#x765A . #x9C92)      ; <CJK>
                 (#x765B . #x9C94)      ; <CJK>
                 (#x765C . #x9C95)      ; <CJK>
                 (#x765D . #x9C9A)      ; <CJK>
                 (#x765E . #x9C9B)      ; <CJK>
                 (#x765F . #x9C9E)      ; <CJK>
                 (#x7660 . #x9C9F)      ; <CJK>
                 (#x7661 . #x9CA0)      ; <CJK>
                 (#x7662 . #x9CA1)      ; <CJK>
                 (#x7663 . #x9CA2)      ; <CJK>
                 (#x7664 . #x9CA3)      ; <CJK>
                 (#x7665 . #x9CA5)      ; <CJK>
                 (#x7666 . #x9CA6)      ; <CJK>
                 (#x7667 . #x9CA7)      ; <CJK>
                 (#x7668 . #x9CA8)      ; <CJK>
                 (#x7669 . #x9CA9)      ; <CJK>
                 (#x766A . #x9CAB)      ; <CJK>
                 (#x766B . #x9CAD)      ; <CJK>
                 (#x766C . #x9CAE)      ; <CJK>
                 (#x766D . #x9CB0)      ; <CJK>
                 (#x766E . #x9CB1)      ; <CJK>
                 (#x766F . #x9CB2)      ; <CJK>
                 (#x7670 . #x9CB3)      ; <CJK>
                 (#x7671 . #x9CB4)      ; <CJK>
                 (#x7672 . #x9CB5)      ; <CJK>
                 (#x7673 . #x9CB6)      ; <CJK>
                 (#x7674 . #x9CB7)      ; <CJK>
                 (#x7675 . #x9CBA)      ; <CJK>
                 (#x7676 . #x9CBB)      ; <CJK>
                 (#x7677 . #x9CBC)      ; <CJK>
                 (#x7678 . #x9CBD)      ; <CJK>
                 (#x7679 . #x9CC4)      ; <CJK>
                 (#x767A . #x9CC5)      ; <CJK>
                 (#x767B . #x9CC6)      ; <CJK>
                 (#x767C . #x9CC7)      ; <CJK>
                 (#x767D . #x9CCA)      ; <CJK>
                 (#x767E . #x9CCB)      ; <CJK>
                 (#x7721 . #x9CCC)      ; <CJK>
                 (#x7722 . #x9CCD)      ; <CJK>
                 (#x7723 . #x9CCE)      ; <CJK>
                 (#x7724 . #x9CCF)      ; <CJK>
                 (#x7725 . #x9CD0)      ; <CJK>
                 (#x7726 . #x9CD3)      ; <CJK>
                 (#x7727 . #x9CD4)      ; <CJK>
                 (#x7728 . #x9CD5)      ; <CJK>
                 (#x7729 . #x9CD7)      ; <CJK>
                 (#x772A . #x9CD8)      ; <CJK>
                 (#x772B . #x9CD9)      ; <CJK>
                 (#x772C . #x9CDC)      ; <CJK>
                 (#x772D . #x9CDD)      ; <CJK>
                 (#x772E . #x9CDF)      ; <CJK>
                 (#x772F . #x9CE2)      ; <CJK>
                 (#x7730 . #x977C)      ; <CJK>
                 (#x7731 . #x9785)      ; <CJK>
                 (#x7732 . #x9791)      ; <CJK>
                 (#x7733 . #x9792)      ; <CJK>
                 (#x7734 . #x9794)      ; <CJK>
                 (#x7735 . #x97AF)      ; <CJK>
                 (#x7736 . #x97AB)      ; <CJK>
                 (#x7737 . #x97A3)      ; <CJK>
                 (#x7738 . #x97B2)      ; <CJK>
                 (#x7739 . #x97B4)      ; <CJK>
                 (#x773A . #x9AB1)      ; <CJK>
                 (#x773B . #x9AB0)      ; <CJK>
                 (#x773C . #x9AB7)      ; <CJK>
                 (#x773D . #x9E58)      ; <CJK>
                 (#x773E . #x9AB6)      ; <CJK>
                 (#x773F . #x9ABA)      ; <CJK>
                 (#x7740 . #x9ABC)      ; <CJK>
                 (#x7741 . #x9AC1)      ; <CJK>
                 (#x7742 . #x9AC0)      ; <CJK>
                 (#x7743 . #x9AC5)      ; <CJK>
                 (#x7744 . #x9AC2)      ; <CJK>
                 (#x7745 . #x9ACB)      ; <CJK>
                 (#x7746 . #x9ACC)      ; <CJK>
                 (#x7747 . #x9AD1)      ; <CJK>
                 (#x7748 . #x9B45)      ; <CJK>
                 (#x7749 . #x9B43)      ; <CJK>
                 (#x774A . #x9B47)      ; <CJK>
                 (#x774B . #x9B49)      ; <CJK>
                 (#x774C . #x9B48)      ; <CJK>
                 (#x774D . #x9B4D)      ; <CJK>
                 (#x774E . #x9B51)      ; <CJK>
                 (#x774F . #x98E8)      ; <CJK>
                 (#x7750 . #x990D)      ; <CJK>
                 (#x7751 . #x992E)      ; <CJK>
                 (#x7752 . #x9955)      ; <CJK>
                 (#x7753 . #x9954)      ; <CJK>
                 (#x7754 . #x9ADF)      ; <CJK>
                 (#x7755 . #x9AE1)      ; <CJK>
                 (#x7756 . #x9AE6)      ; <CJK>
                 (#x7757 . #x9AEF)      ; <CJK>
                 (#x7758 . #x9AEB)      ; <CJK>
                 (#x7759 . #x9AFB)      ; <CJK>
                 (#x775A . #x9AED)      ; <CJK>
                 (#x775B . #x9AF9)      ; <CJK>
                 (#x775C . #x9B08)      ; <CJK>
                 (#x775D . #x9B0F)      ; <CJK>
                 (#x775E . #x9B13)      ; <CJK>
                 (#x775F . #x9B1F)      ; <CJK>
                 (#x7760 . #x9B23)      ; <CJK>
                 (#x7761 . #x9EBD)      ; <CJK>
                 (#x7762 . #x9EBE)      ; <CJK>
                 (#x7763 . #x7E3B)      ; <CJK>
                 (#x7764 . #x9E82)      ; <CJK>
                 (#x7765 . #x9E87)      ; <CJK>
                 (#x7766 . #x9E88)      ; <CJK>
                 (#x7767 . #x9E8B)      ; <CJK>
                 (#x7768 . #x9E92)      ; <CJK>
                 (#x7769 . #x93D6)      ; <CJK>
                 (#x776A . #x9E9D)      ; <CJK>
                 (#x776B . #x9E9F)      ; <CJK>xx
                 (#x776C . #x9EDB)      ; <CJK>
                 (#x776D . #x9EDC)      ; <CJK>
                 (#x776E . #x9EDD)      ; <CJK>
                 (#x776F . #x9EE0)      ; <CJK>
                 (#x7770 . #x9EDF)      ; <CJK>
                 (#x7771 . #x9EE2)      ; <CJK>
                 (#x7772 . #x9EE9)      ; <CJK>
                 (#x7773 . #x9EE7)      ; <CJK>
                 (#x7774 . #x9EE5)      ; <CJK>
                 (#x7775 . #x9EEA)      ; <CJK>
                 (#x7776 . #x9EEF)      ; <CJK>
                 (#x7777 . #x9F22)      ; <CJK>
                 (#x7778 . #x9F2C)      ; <CJK>
                 (#x7779 . #x9F2F)      ; <CJK>
                 (#x777A . #x9F39)      ; <CJK>
                 (#x777B . #x9F37)      ; <CJK>
                 (#x777C . #x9F3D)      ; <CJK>
                 (#x777D . #x9F3E)      ; <CJK>
                 (#x777E . #x9F44)      ; <CJK>
                 ;; end of gb2312-to-unicode-table
                 )))
      (cp936-to-unicode-table '(
                                ;; cp936-to-unicode-table
                                (#x80     . #x20AC) ;EURO SIGN
                                (#x8140 . #x4E02)	;CJK UNIFIED IDEOGRAPH
                                (#x8141 . #x4E04)	;CJK UNIFIED IDEOGRAPH
                                (#x8142 . #x4E05)	;CJK UNIFIED IDEOGRAPH
                                (#x8143 . #x4E06)	;CJK UNIFIED IDEOGRAPH
                                (#x8144 . #x4E0F)	;CJK UNIFIED IDEOGRAPH
                                (#x8145 . #x4E12)	;CJK UNIFIED IDEOGRAPH
                                (#x8146 . #x4E17)	;CJK UNIFIED IDEOGRAPH
                                (#x8147 . #x4E1F)	;CJK UNIFIED IDEOGRAPH
                                (#x8148 . #x4E20)	;CJK UNIFIED IDEOGRAPH
                                (#x8149 . #x4E21)	;CJK UNIFIED IDEOGRAPH
                                (#x814A . #x4E23)	;CJK UNIFIED IDEOGRAPH
                                (#x814B . #x4E26)	;CJK UNIFIED IDEOGRAPH
                                (#x814C . #x4E29)	;CJK UNIFIED IDEOGRAPH
                                (#x814D . #x4E2E)	;CJK UNIFIED IDEOGRAPH
                                (#x814E . #x4E2F)	;CJK UNIFIED IDEOGRAPH
                                (#x814F . #x4E31)	;CJK UNIFIED IDEOGRAPH
                                (#x8150 . #x4E33)	;CJK UNIFIED IDEOGRAPH
                                (#x8151 . #x4E35)	;CJK UNIFIED IDEOGRAPH
                                (#x8152 . #x4E37)	;CJK UNIFIED IDEOGRAPH
                                (#x8153 . #x4E3C)	;CJK UNIFIED IDEOGRAPH
                                (#x8154 . #x4E40)	;CJK UNIFIED IDEOGRAPH
                                (#x8155 . #x4E41)	;CJK UNIFIED IDEOGRAPH
                                (#x8156 . #x4E42)	;CJK UNIFIED IDEOGRAPH
                                (#x8157 . #x4E44)	;CJK UNIFIED IDEOGRAPH
                                (#x8158 . #x4E46)	;CJK UNIFIED IDEOGRAPH
                                (#x8159 . #x4E4A)	;CJK UNIFIED IDEOGRAPH
                                (#x815A . #x4E51)	;CJK UNIFIED IDEOGRAPH
                                (#x815B . #x4E55)	;CJK UNIFIED IDEOGRAPH
                                (#x815C . #x4E57)	;CJK UNIFIED IDEOGRAPH
                                (#x815D . #x4E5A)	;CJK UNIFIED IDEOGRAPH
                                (#x815E . #x4E5B)	;CJK UNIFIED IDEOGRAPH
                                (#x815F . #x4E62)	;CJK UNIFIED IDEOGRAPH
                                (#x8160 . #x4E63)	;CJK UNIFIED IDEOGRAPH
                                (#x8161 . #x4E64)	;CJK UNIFIED IDEOGRAPH
                                (#x8162 . #x4E65)	;CJK UNIFIED IDEOGRAPH
                                (#x8163 . #x4E67)	;CJK UNIFIED IDEOGRAPH
                                (#x8164 . #x4E68)	;CJK UNIFIED IDEOGRAPH
                                (#x8165 . #x4E6A)	;CJK UNIFIED IDEOGRAPH
                                (#x8166 . #x4E6B)	;CJK UNIFIED IDEOGRAPH
                                (#x8167 . #x4E6C)	;CJK UNIFIED IDEOGRAPH
                                (#x8168 . #x4E6D)	;CJK UNIFIED IDEOGRAPH
                                (#x8169 . #x4E6E)	;CJK UNIFIED IDEOGRAPH
                                (#x816A . #x4E6F)	;CJK UNIFIED IDEOGRAPH
                                (#x816B . #x4E72)	;CJK UNIFIED IDEOGRAPH
                                (#x816C . #x4E74)	;CJK UNIFIED IDEOGRAPH
                                (#x816D . #x4E75)	;CJK UNIFIED IDEOGRAPH
                                (#x816E . #x4E76)	;CJK UNIFIED IDEOGRAPH
                                (#x816F . #x4E77)	;CJK UNIFIED IDEOGRAPH
                                (#x8170 . #x4E78)	;CJK UNIFIED IDEOGRAPH
                                (#x8171 . #x4E79)	;CJK UNIFIED IDEOGRAPH
                                (#x8172 . #x4E7A)	;CJK UNIFIED IDEOGRAPH
                                (#x8173 . #x4E7B)	;CJK UNIFIED IDEOGRAPH
                                (#x8174 . #x4E7C)	;CJK UNIFIED IDEOGRAPH
                                (#x8175 . #x4E7D)	;CJK UNIFIED IDEOGRAPH
                                (#x8176 . #x4E7F)	;CJK UNIFIED IDEOGRAPH
                                (#x8177 . #x4E80)	;CJK UNIFIED IDEOGRAPH
                                (#x8178 . #x4E81)	;CJK UNIFIED IDEOGRAPH
                                (#x8179 . #x4E82)	;CJK UNIFIED IDEOGRAPH
                                (#x817A . #x4E83)	;CJK UNIFIED IDEOGRAPH
                                (#x817B . #x4E84)	;CJK UNIFIED IDEOGRAPH
                                (#x817C . #x4E85)	;CJK UNIFIED IDEOGRAPH
                                (#x817D . #x4E87)	;CJK UNIFIED IDEOGRAPH
                                (#x817E . #x4E8A)	;CJK UNIFIED IDEOGRAPH
                                (#x8180 . #x4E90)	;CJK UNIFIED IDEOGRAPH
                                (#x8181 . #x4E96)	;CJK UNIFIED IDEOGRAPH
                                (#x8182 . #x4E97)	;CJK UNIFIED IDEOGRAPH
                                (#x8183 . #x4E99)	;CJK UNIFIED IDEOGRAPH
                                (#x8184 . #x4E9C)	;CJK UNIFIED IDEOGRAPH
                                (#x8185 . #x4E9D)	;CJK UNIFIED IDEOGRAPH
                                (#x8186 . #x4E9E)	;CJK UNIFIED IDEOGRAPH
                                (#x8187 . #x4EA3)	;CJK UNIFIED IDEOGRAPH
                                (#x8188 . #x4EAA)	;CJK UNIFIED IDEOGRAPH
                                (#x8189 . #x4EAF)	;CJK UNIFIED IDEOGRAPH
                                (#x818A . #x4EB0)	;CJK UNIFIED IDEOGRAPH
                                (#x818B . #x4EB1)	;CJK UNIFIED IDEOGRAPH
                                (#x818C . #x4EB4)	;CJK UNIFIED IDEOGRAPH
                                (#x818D . #x4EB6)	;CJK UNIFIED IDEOGRAPH
                                (#x818E . #x4EB7)	;CJK UNIFIED IDEOGRAPH
                                (#x818F . #x4EB8)	;CJK UNIFIED IDEOGRAPH
                                (#x8190 . #x4EB9)	;CJK UNIFIED IDEOGRAPH
                                (#x8191 . #x4EBC)	;CJK UNIFIED IDEOGRAPH
                                (#x8192 . #x4EBD)	;CJK UNIFIED IDEOGRAPH
                                (#x8193 . #x4EBE)	;CJK UNIFIED IDEOGRAPH
                                (#x8194 . #x4EC8)	;CJK UNIFIED IDEOGRAPH
                                (#x8195 . #x4ECC)	;CJK UNIFIED IDEOGRAPH
                                (#x8196 . #x4ECF)	;CJK UNIFIED IDEOGRAPH
                                (#x8197 . #x4ED0)	;CJK UNIFIED IDEOGRAPH
                                (#x8198 . #x4ED2)	;CJK UNIFIED IDEOGRAPH
                                (#x8199 . #x4EDA)	;CJK UNIFIED IDEOGRAPH
                                (#x819A . #x4EDB)	;CJK UNIFIED IDEOGRAPH
                                (#x819B . #x4EDC)	;CJK UNIFIED IDEOGRAPH
                                (#x819C . #x4EE0)	;CJK UNIFIED IDEOGRAPH
                                (#x819D . #x4EE2)	;CJK UNIFIED IDEOGRAPH
                                (#x819E . #x4EE6)	;CJK UNIFIED IDEOGRAPH
                                (#x819F . #x4EE7)	;CJK UNIFIED IDEOGRAPH
                                (#x81A0 . #x4EE9)	;CJK UNIFIED IDEOGRAPH
                                (#x81A1 . #x4EED)	;CJK UNIFIED IDEOGRAPH
                                (#x81A2 . #x4EEE)	;CJK UNIFIED IDEOGRAPH
                                (#x81A3 . #x4EEF)	;CJK UNIFIED IDEOGRAPH
                                (#x81A4 . #x4EF1)	;CJK UNIFIED IDEOGRAPH
                                (#x81A5 . #x4EF4)	;CJK UNIFIED IDEOGRAPH
                                (#x81A6 . #x4EF8)	;CJK UNIFIED IDEOGRAPH
                                (#x81A7 . #x4EF9)	;CJK UNIFIED IDEOGRAPH
                                (#x81A8 . #x4EFA)	;CJK UNIFIED IDEOGRAPH
                                (#x81A9 . #x4EFC)	;CJK UNIFIED IDEOGRAPH
                                (#x81AA . #x4EFE)	;CJK UNIFIED IDEOGRAPH
                                (#x81AB . #x4F00)	;CJK UNIFIED IDEOGRAPH
                                (#x81AC . #x4F02)	;CJK UNIFIED IDEOGRAPH
                                (#x81AD . #x4F03)	;CJK UNIFIED IDEOGRAPH
                                (#x81AE . #x4F04)	;CJK UNIFIED IDEOGRAPH
                                (#x81AF . #x4F05)	;CJK UNIFIED IDEOGRAPH
                                (#x81B0 . #x4F06)	;CJK UNIFIED IDEOGRAPH
                                (#x81B1 . #x4F07)	;CJK UNIFIED IDEOGRAPH
                                (#x81B2 . #x4F08)	;CJK UNIFIED IDEOGRAPH
                                (#x81B3 . #x4F0B)	;CJK UNIFIED IDEOGRAPH
                                (#x81B4 . #x4F0C)	;CJK UNIFIED IDEOGRAPH
                                (#x81B5 . #x4F12)	;CJK UNIFIED IDEOGRAPH
                                (#x81B6 . #x4F13)	;CJK UNIFIED IDEOGRAPH
                                (#x81B7 . #x4F14)	;CJK UNIFIED IDEOGRAPH
                                (#x81B8 . #x4F15)	;CJK UNIFIED IDEOGRAPH
                                (#x81B9 . #x4F16)	;CJK UNIFIED IDEOGRAPH
                                (#x81BA . #x4F1C)	;CJK UNIFIED IDEOGRAPH
                                (#x81BB . #x4F1D)	;CJK UNIFIED IDEOGRAPH
                                (#x81BC . #x4F21)	;CJK UNIFIED IDEOGRAPH
                                (#x81BD . #x4F23)	;CJK UNIFIED IDEOGRAPH
                                (#x81BE . #x4F28)	;CJK UNIFIED IDEOGRAPH
                                (#x81BF . #x4F29)	;CJK UNIFIED IDEOGRAPH
                                (#x81C0 . #x4F2C)	;CJK UNIFIED IDEOGRAPH
                                (#x81C1 . #x4F2D)	;CJK UNIFIED IDEOGRAPH
                                (#x81C2 . #x4F2E)	;CJK UNIFIED IDEOGRAPH
                                (#x81C3 . #x4F31)	;CJK UNIFIED IDEOGRAPH
                                (#x81C4 . #x4F33)	;CJK UNIFIED IDEOGRAPH
                                (#x81C5 . #x4F35)	;CJK UNIFIED IDEOGRAPH
                                (#x81C6 . #x4F37)	;CJK UNIFIED IDEOGRAPH
                                (#x81C7 . #x4F39)	;CJK UNIFIED IDEOGRAPH
                                (#x81C8 . #x4F3B)	;CJK UNIFIED IDEOGRAPH
                                (#x81C9 . #x4F3E)	;CJK UNIFIED IDEOGRAPH
                                (#x81CA . #x4F3F)	;CJK UNIFIED IDEOGRAPH
                                (#x81CB . #x4F40)	;CJK UNIFIED IDEOGRAPH
                                (#x81CC . #x4F41)	;CJK UNIFIED IDEOGRAPH
                                (#x81CD . #x4F42)	;CJK UNIFIED IDEOGRAPH
                                (#x81CE . #x4F44)	;CJK UNIFIED IDEOGRAPH
                                (#x81CF . #x4F45)	;CJK UNIFIED IDEOGRAPH
                                (#x81D0 . #x4F47)	;CJK UNIFIED IDEOGRAPH
                                (#x81D1 . #x4F48)	;CJK UNIFIED IDEOGRAPH
                                (#x81D2 . #x4F49)	;CJK UNIFIED IDEOGRAPH
                                (#x81D3 . #x4F4A)	;CJK UNIFIED IDEOGRAPH
                                (#x81D4 . #x4F4B)	;CJK UNIFIED IDEOGRAPH
                                (#x81D5 . #x4F4C)	;CJK UNIFIED IDEOGRAPH
                                (#x81D6 . #x4F52)	;CJK UNIFIED IDEOGRAPH
                                (#x81D7 . #x4F54)	;CJK UNIFIED IDEOGRAPH
                                (#x81D8 . #x4F56)	;CJK UNIFIED IDEOGRAPH
                                (#x81D9 . #x4F61)	;CJK UNIFIED IDEOGRAPH
                                (#x81DA . #x4F62)	;CJK UNIFIED IDEOGRAPH
                                (#x81DB . #x4F66)	;CJK UNIFIED IDEOGRAPH
                                (#x81DC . #x4F68)	;CJK UNIFIED IDEOGRAPH
                                (#x81DD . #x4F6A)	;CJK UNIFIED IDEOGRAPH
                                (#x81DE . #x4F6B)	;CJK UNIFIED IDEOGRAPH
                                (#x81DF . #x4F6D)	;CJK UNIFIED IDEOGRAPH
                                (#x81E0 . #x4F6E)	;CJK UNIFIED IDEOGRAPH
                                (#x81E1 . #x4F71)	;CJK UNIFIED IDEOGRAPH
                                (#x81E2 . #x4F72)	;CJK UNIFIED IDEOGRAPH
                                (#x81E3 . #x4F75)	;CJK UNIFIED IDEOGRAPH
                                (#x81E4 . #x4F77)	;CJK UNIFIED IDEOGRAPH
                                (#x81E5 . #x4F78)	;CJK UNIFIED IDEOGRAPH
                                (#x81E6 . #x4F79)	;CJK UNIFIED IDEOGRAPH
                                (#x81E7 . #x4F7A)	;CJK UNIFIED IDEOGRAPH
                                (#x81E8 . #x4F7D)	;CJK UNIFIED IDEOGRAPH
                                (#x81E9 . #x4F80)	;CJK UNIFIED IDEOGRAPH
                                (#x81EA . #x4F81)	;CJK UNIFIED IDEOGRAPH
                                (#x81EB . #x4F82)	;CJK UNIFIED IDEOGRAPH
                                (#x81EC . #x4F85)	;CJK UNIFIED IDEOGRAPH
                                (#x81ED . #x4F86)	;CJK UNIFIED IDEOGRAPH
                                (#x81EE . #x4F87)	;CJK UNIFIED IDEOGRAPH
                                (#x81EF . #x4F8A)	;CJK UNIFIED IDEOGRAPH
                                (#x81F0 . #x4F8C)	;CJK UNIFIED IDEOGRAPH
                                (#x81F1 . #x4F8E)	;CJK UNIFIED IDEOGRAPH
                                (#x81F2 . #x4F90)	;CJK UNIFIED IDEOGRAPH
                                (#x81F3 . #x4F92)	;CJK UNIFIED IDEOGRAPH
                                (#x81F4 . #x4F93)	;CJK UNIFIED IDEOGRAPH
                                (#x81F5 . #x4F95)	;CJK UNIFIED IDEOGRAPH
                                (#x81F6 . #x4F96)	;CJK UNIFIED IDEOGRAPH
                                (#x81F7 . #x4F98)	;CJK UNIFIED IDEOGRAPH
                                (#x81F8 . #x4F99)	;CJK UNIFIED IDEOGRAPH
                                (#x81F9 . #x4F9A)	;CJK UNIFIED IDEOGRAPH
                                (#x81FA . #x4F9C)	;CJK UNIFIED IDEOGRAPH
                                (#x81FB . #x4F9E)	;CJK UNIFIED IDEOGRAPH
                                (#x81FC . #x4F9F)	;CJK UNIFIED IDEOGRAPH
                                (#x81FD . #x4FA1)	;CJK UNIFIED IDEOGRAPH
                                (#x81FE . #x4FA2)	;CJK UNIFIED IDEOGRAPH
                                (#x8240 . #x4FA4)	;CJK UNIFIED IDEOGRAPH
                                (#x8241 . #x4FAB)	;CJK UNIFIED IDEOGRAPH
                                (#x8242 . #x4FAD)	;CJK UNIFIED IDEOGRAPH
                                (#x8243 . #x4FB0)	;CJK UNIFIED IDEOGRAPH
                                (#x8244 . #x4FB1)	;CJK UNIFIED IDEOGRAPH
                                (#x8245 . #x4FB2)	;CJK UNIFIED IDEOGRAPH
                                (#x8246 . #x4FB3)	;CJK UNIFIED IDEOGRAPH
                                (#x8247 . #x4FB4)	;CJK UNIFIED IDEOGRAPH
                                (#x8248 . #x4FB6)	;CJK UNIFIED IDEOGRAPH
                                (#x8249 . #x4FB7)	;CJK UNIFIED IDEOGRAPH
                                (#x824A . #x4FB8)	;CJK UNIFIED IDEOGRAPH
                                (#x824B . #x4FB9)	;CJK UNIFIED IDEOGRAPH
                                (#x824C . #x4FBA)	;CJK UNIFIED IDEOGRAPH
                                (#x824D . #x4FBB)	;CJK UNIFIED IDEOGRAPH
                                (#x824E . #x4FBC)	;CJK UNIFIED IDEOGRAPH
                                (#x824F . #x4FBD)	;CJK UNIFIED IDEOGRAPH
                                (#x8250 . #x4FBE)	;CJK UNIFIED IDEOGRAPH
                                (#x8251 . #x4FC0)	;CJK UNIFIED IDEOGRAPH
                                (#x8252 . #x4FC1)	;CJK UNIFIED IDEOGRAPH
                                (#x8253 . #x4FC2)	;CJK UNIFIED IDEOGRAPH
                                (#x8254 . #x4FC6)	;CJK UNIFIED IDEOGRAPH
                                (#x8255 . #x4FC7)	;CJK UNIFIED IDEOGRAPH
                                (#x8256 . #x4FC8)	;CJK UNIFIED IDEOGRAPH
                                (#x8257 . #x4FC9)	;CJK UNIFIED IDEOGRAPH
                                (#x8258 . #x4FCB)	;CJK UNIFIED IDEOGRAPH
                                (#x8259 . #x4FCC)	;CJK UNIFIED IDEOGRAPH
                                (#x825A . #x4FCD)	;CJK UNIFIED IDEOGRAPH
                                (#x825B . #x4FD2)	;CJK UNIFIED IDEOGRAPH
                                (#x825C . #x4FD3)	;CJK UNIFIED IDEOGRAPH
                                (#x825D . #x4FD4)	;CJK UNIFIED IDEOGRAPH
                                (#x825E . #x4FD5)	;CJK UNIFIED IDEOGRAPH
                                (#x825F . #x4FD6)	;CJK UNIFIED IDEOGRAPH
                                (#x8260 . #x4FD9)	;CJK UNIFIED IDEOGRAPH
                                (#x8261 . #x4FDB)	;CJK UNIFIED IDEOGRAPH
                                (#x8262 . #x4FE0)	;CJK UNIFIED IDEOGRAPH
                                (#x8263 . #x4FE2)	;CJK UNIFIED IDEOGRAPH
                                (#x8264 . #x4FE4)	;CJK UNIFIED IDEOGRAPH
                                (#x8265 . #x4FE5)	;CJK UNIFIED IDEOGRAPH
                                (#x8266 . #x4FE7)	;CJK UNIFIED IDEOGRAPH
                                (#x8267 . #x4FEB)	;CJK UNIFIED IDEOGRAPH
                                (#x8268 . #x4FEC)	;CJK UNIFIED IDEOGRAPH
                                (#x8269 . #x4FF0)	;CJK UNIFIED IDEOGRAPH
                                (#x826A . #x4FF2)	;CJK UNIFIED IDEOGRAPH
                                (#x826B . #x4FF4)	;CJK UNIFIED IDEOGRAPH
                                (#x826C . #x4FF5)	;CJK UNIFIED IDEOGRAPH
                                (#x826D . #x4FF6)	;CJK UNIFIED IDEOGRAPH
                                (#x826E . #x4FF7)	;CJK UNIFIED IDEOGRAPH
                                (#x826F . #x4FF9)	;CJK UNIFIED IDEOGRAPH
                                (#x8270 . #x4FFB)	;CJK UNIFIED IDEOGRAPH
                                (#x8271 . #x4FFC)	;CJK UNIFIED IDEOGRAPH
                                (#x8272 . #x4FFD)	;CJK UNIFIED IDEOGRAPH
                                (#x8273 . #x4FFF)	;CJK UNIFIED IDEOGRAPH
                                (#x8274 . #x5000)	;CJK UNIFIED IDEOGRAPH
                                (#x8275 . #x5001)	;CJK UNIFIED IDEOGRAPH
                                (#x8276 . #x5002)	;CJK UNIFIED IDEOGRAPH
                                (#x8277 . #x5003)	;CJK UNIFIED IDEOGRAPH
                                (#x8278 . #x5004)	;CJK UNIFIED IDEOGRAPH
                                (#x8279 . #x5005)	;CJK UNIFIED IDEOGRAPH
                                (#x827A . #x5006)	;CJK UNIFIED IDEOGRAPH
                                (#x827B . #x5007)	;CJK UNIFIED IDEOGRAPH
                                (#x827C . #x5008)	;CJK UNIFIED IDEOGRAPH
                                (#x827D . #x5009)	;CJK UNIFIED IDEOGRAPH
                                (#x827E . #x500A)	;CJK UNIFIED IDEOGRAPH
                                (#x8280 . #x500B)	;CJK UNIFIED IDEOGRAPH
                                (#x8281 . #x500E)	;CJK UNIFIED IDEOGRAPH
                                (#x8282 . #x5010)	;CJK UNIFIED IDEOGRAPH
                                (#x8283 . #x5011)	;CJK UNIFIED IDEOGRAPH
                                (#x8284 . #x5013)	;CJK UNIFIED IDEOGRAPH
                                (#x8285 . #x5015)	;CJK UNIFIED IDEOGRAPH
                                (#x8286 . #x5016)	;CJK UNIFIED IDEOGRAPH
                                (#x8287 . #x5017)	;CJK UNIFIED IDEOGRAPH
                                (#x8288 . #x501B)	;CJK UNIFIED IDEOGRAPH
                                (#x8289 . #x501D)	;CJK UNIFIED IDEOGRAPH
                                (#x828A . #x501E)	;CJK UNIFIED IDEOGRAPH
                                (#x828B . #x5020)	;CJK UNIFIED IDEOGRAPH
                                (#x828C . #x5022)	;CJK UNIFIED IDEOGRAPH
                                (#x828D . #x5023)	;CJK UNIFIED IDEOGRAPH
                                (#x828E . #x5024)	;CJK UNIFIED IDEOGRAPH
                                (#x828F . #x5027)	;CJK UNIFIED IDEOGRAPH
                                (#x8290 . #x502B)	;CJK UNIFIED IDEOGRAPH
                                (#x8291 . #x502F)	;CJK UNIFIED IDEOGRAPH
                                (#x8292 . #x5030)	;CJK UNIFIED IDEOGRAPH
                                (#x8293 . #x5031)	;CJK UNIFIED IDEOGRAPH
                                (#x8294 . #x5032)	;CJK UNIFIED IDEOGRAPH
                                (#x8295 . #x5033)	;CJK UNIFIED IDEOGRAPH
                                (#x8296 . #x5034)	;CJK UNIFIED IDEOGRAPH
                                (#x8297 . #x5035)	;CJK UNIFIED IDEOGRAPH
                                (#x8298 . #x5036)	;CJK UNIFIED IDEOGRAPH
                                (#x8299 . #x5037)	;CJK UNIFIED IDEOGRAPH
                                (#x829A . #x5038)	;CJK UNIFIED IDEOGRAPH
                                (#x829B . #x5039)	;CJK UNIFIED IDEOGRAPH
                                (#x829C . #x503B)	;CJK UNIFIED IDEOGRAPH
                                (#x829D . #x503D)	;CJK UNIFIED IDEOGRAPH
                                (#x829E . #x503F)	;CJK UNIFIED IDEOGRAPH
                                (#x829F . #x5040)	;CJK UNIFIED IDEOGRAPH
                                (#x82A0 . #x5041)	;CJK UNIFIED IDEOGRAPH
                                (#x82A1 . #x5042)	;CJK UNIFIED IDEOGRAPH
                                (#x82A2 . #x5044)	;CJK UNIFIED IDEOGRAPH
                                (#x82A3 . #x5045)	;CJK UNIFIED IDEOGRAPH
                                (#x82A4 . #x5046)	;CJK UNIFIED IDEOGRAPH
                                (#x82A5 . #x5049)	;CJK UNIFIED IDEOGRAPH
                                (#x82A6 . #x504A)	;CJK UNIFIED IDEOGRAPH
                                (#x82A7 . #x504B)	;CJK UNIFIED IDEOGRAPH
                                (#x82A8 . #x504D)	;CJK UNIFIED IDEOGRAPH
                                (#x82A9 . #x5050)	;CJK UNIFIED IDEOGRAPH
                                (#x82AA . #x5051)	;CJK UNIFIED IDEOGRAPH
                                (#x82AB . #x5052)	;CJK UNIFIED IDEOGRAPH
                                (#x82AC . #x5053)	;CJK UNIFIED IDEOGRAPH
                                (#x82AD . #x5054)	;CJK UNIFIED IDEOGRAPH
                                (#x82AE . #x5056)	;CJK UNIFIED IDEOGRAPH
                                (#x82AF . #x5057)	;CJK UNIFIED IDEOGRAPH
                                (#x82B0 . #x5058)	;CJK UNIFIED IDEOGRAPH
                                (#x82B1 . #x5059)	;CJK UNIFIED IDEOGRAPH
                                (#x82B2 . #x505B)	;CJK UNIFIED IDEOGRAPH
                                (#x82B3 . #x505D)	;CJK UNIFIED IDEOGRAPH
                                (#x82B4 . #x505E)	;CJK UNIFIED IDEOGRAPH
                                (#x82B5 . #x505F)	;CJK UNIFIED IDEOGRAPH
                                (#x82B6 . #x5060)	;CJK UNIFIED IDEOGRAPH
                                (#x82B7 . #x5061)	;CJK UNIFIED IDEOGRAPH
                                (#x82B8 . #x5062)	;CJK UNIFIED IDEOGRAPH
                                (#x82B9 . #x5063)	;CJK UNIFIED IDEOGRAPH
                                (#x82BA . #x5064)	;CJK UNIFIED IDEOGRAPH
                                (#x82BB . #x5066)	;CJK UNIFIED IDEOGRAPH
                                (#x82BC . #x5067)	;CJK UNIFIED IDEOGRAPH
                                (#x82BD . #x5068)	;CJK UNIFIED IDEOGRAPH
                                (#x82BE . #x5069)	;CJK UNIFIED IDEOGRAPH
                                (#x82BF . #x506A)	;CJK UNIFIED IDEOGRAPH
                                (#x82C0 . #x506B)	;CJK UNIFIED IDEOGRAPH
                                (#x82C1 . #x506D)	;CJK UNIFIED IDEOGRAPH
                                (#x82C2 . #x506E)	;CJK UNIFIED IDEOGRAPH
                                (#x82C3 . #x506F)	;CJK UNIFIED IDEOGRAPH
                                (#x82C4 . #x5070)	;CJK UNIFIED IDEOGRAPH
                                (#x82C5 . #x5071)	;CJK UNIFIED IDEOGRAPH
                                (#x82C6 . #x5072)	;CJK UNIFIED IDEOGRAPH
                                (#x82C7 . #x5073)	;CJK UNIFIED IDEOGRAPH
                                (#x82C8 . #x5074)	;CJK UNIFIED IDEOGRAPH
                                (#x82C9 . #x5075)	;CJK UNIFIED IDEOGRAPH
                                (#x82CA . #x5078)	;CJK UNIFIED IDEOGRAPH
                                (#x82CB . #x5079)	;CJK UNIFIED IDEOGRAPH
                                (#x82CC . #x507A)	;CJK UNIFIED IDEOGRAPH
                                (#x82CD . #x507C)	;CJK UNIFIED IDEOGRAPH
                                (#x82CE . #x507D)	;CJK UNIFIED IDEOGRAPH
                                (#x82CF . #x5081)	;CJK UNIFIED IDEOGRAPH
                                (#x82D0 . #x5082)	;CJK UNIFIED IDEOGRAPH
                                (#x82D1 . #x5083)	;CJK UNIFIED IDEOGRAPH
                                (#x82D2 . #x5084)	;CJK UNIFIED IDEOGRAPH
                                (#x82D3 . #x5086)	;CJK UNIFIED IDEOGRAPH
                                (#x82D4 . #x5087)	;CJK UNIFIED IDEOGRAPH
                                (#x82D5 . #x5089)	;CJK UNIFIED IDEOGRAPH
                                (#x82D6 . #x508A)	;CJK UNIFIED IDEOGRAPH
                                (#x82D7 . #x508B)	;CJK UNIFIED IDEOGRAPH
                                (#x82D8 . #x508C)	;CJK UNIFIED IDEOGRAPH
                                (#x82D9 . #x508E)	;CJK UNIFIED IDEOGRAPH
                                (#x82DA . #x508F)	;CJK UNIFIED IDEOGRAPH
                                (#x82DB . #x5090)	;CJK UNIFIED IDEOGRAPH
                                (#x82DC . #x5091)	;CJK UNIFIED IDEOGRAPH
                                (#x82DD . #x5092)	;CJK UNIFIED IDEOGRAPH
                                (#x82DE . #x5093)	;CJK UNIFIED IDEOGRAPH
                                (#x82DF . #x5094)	;CJK UNIFIED IDEOGRAPH
                                (#x82E0 . #x5095)	;CJK UNIFIED IDEOGRAPH
                                (#x82E1 . #x5096)	;CJK UNIFIED IDEOGRAPH
                                (#x82E2 . #x5097)	;CJK UNIFIED IDEOGRAPH
                                (#x82E3 . #x5098)	;CJK UNIFIED IDEOGRAPH
                                (#x82E4 . #x5099)	;CJK UNIFIED IDEOGRAPH
                                (#x82E5 . #x509A)	;CJK UNIFIED IDEOGRAPH
                                (#x82E6 . #x509B)	;CJK UNIFIED IDEOGRAPH
                                (#x82E7 . #x509C)	;CJK UNIFIED IDEOGRAPH
                                (#x82E8 . #x509D)	;CJK UNIFIED IDEOGRAPH
                                (#x82E9 . #x509E)	;CJK UNIFIED IDEOGRAPH
                                (#x82EA . #x509F)	;CJK UNIFIED IDEOGRAPH
                                (#x82EB . #x50A0)	;CJK UNIFIED IDEOGRAPH
                                (#x82EC . #x50A1)	;CJK UNIFIED IDEOGRAPH
                                (#x82ED . #x50A2)	;CJK UNIFIED IDEOGRAPH
                                (#x82EE . #x50A4)	;CJK UNIFIED IDEOGRAPH
                                (#x82EF . #x50A6)	;CJK UNIFIED IDEOGRAPH
                                (#x82F0 . #x50AA)	;CJK UNIFIED IDEOGRAPH
                                (#x82F1 . #x50AB)	;CJK UNIFIED IDEOGRAPH
                                (#x82F2 . #x50AD)	;CJK UNIFIED IDEOGRAPH
                                (#x82F3 . #x50AE)	;CJK UNIFIED IDEOGRAPH
                                (#x82F4 . #x50AF)	;CJK UNIFIED IDEOGRAPH
                                (#x82F5 . #x50B0)	;CJK UNIFIED IDEOGRAPH
                                (#x82F6 . #x50B1)	;CJK UNIFIED IDEOGRAPH
                                (#x82F7 . #x50B3)	;CJK UNIFIED IDEOGRAPH
                                (#x82F8 . #x50B4)	;CJK UNIFIED IDEOGRAPH
                                (#x82F9 . #x50B5)	;CJK UNIFIED IDEOGRAPH
                                (#x82FA . #x50B6)	;CJK UNIFIED IDEOGRAPH
                                (#x82FB . #x50B7)	;CJK UNIFIED IDEOGRAPH
                                (#x82FC . #x50B8)	;CJK UNIFIED IDEOGRAPH
                                (#x82FD . #x50B9)	;CJK UNIFIED IDEOGRAPH
                                (#x82FE . #x50BC)	;CJK UNIFIED IDEOGRAPH
                                (#x8340 . #x50BD)	;CJK UNIFIED IDEOGRAPH
                                (#x8341 . #x50BE)	;CJK UNIFIED IDEOGRAPH
                                (#x8342 . #x50BF)	;CJK UNIFIED IDEOGRAPH
                                (#x8343 . #x50C0)	;CJK UNIFIED IDEOGRAPH
                                (#x8344 . #x50C1)	;CJK UNIFIED IDEOGRAPH
                                (#x8345 . #x50C2)	;CJK UNIFIED IDEOGRAPH
                                (#x8346 . #x50C3)	;CJK UNIFIED IDEOGRAPH
                                (#x8347 . #x50C4)	;CJK UNIFIED IDEOGRAPH
                                (#x8348 . #x50C5)	;CJK UNIFIED IDEOGRAPH
                                (#x8349 . #x50C6)	;CJK UNIFIED IDEOGRAPH
                                (#x834A . #x50C7)	;CJK UNIFIED IDEOGRAPH
                                (#x834B . #x50C8)	;CJK UNIFIED IDEOGRAPH
                                (#x834C . #x50C9)	;CJK UNIFIED IDEOGRAPH
                                (#x834D . #x50CA)	;CJK UNIFIED IDEOGRAPH
                                (#x834E . #x50CB)	;CJK UNIFIED IDEOGRAPH
                                (#x834F . #x50CC)	;CJK UNIFIED IDEOGRAPH
                                (#x8350 . #x50CD)	;CJK UNIFIED IDEOGRAPH
                                (#x8351 . #x50CE)	;CJK UNIFIED IDEOGRAPH
                                (#x8352 . #x50D0)	;CJK UNIFIED IDEOGRAPH
                                (#x8353 . #x50D1)	;CJK UNIFIED IDEOGRAPH
                                (#x8354 . #x50D2)	;CJK UNIFIED IDEOGRAPH
                                (#x8355 . #x50D3)	;CJK UNIFIED IDEOGRAPH
                                (#x8356 . #x50D4)	;CJK UNIFIED IDEOGRAPH
                                (#x8357 . #x50D5)	;CJK UNIFIED IDEOGRAPH
                                (#x8358 . #x50D7)	;CJK UNIFIED IDEOGRAPH
                                (#x8359 . #x50D8)	;CJK UNIFIED IDEOGRAPH
                                (#x835A . #x50D9)	;CJK UNIFIED IDEOGRAPH
                                (#x835B . #x50DB)	;CJK UNIFIED IDEOGRAPH
                                (#x835C . #x50DC)	;CJK UNIFIED IDEOGRAPH
                                (#x835D . #x50DD)	;CJK UNIFIED IDEOGRAPH
                                (#x835E . #x50DE)	;CJK UNIFIED IDEOGRAPH
                                (#x835F . #x50DF)	;CJK UNIFIED IDEOGRAPH
                                (#x8360 . #x50E0)	;CJK UNIFIED IDEOGRAPH
                                (#x8361 . #x50E1)	;CJK UNIFIED IDEOGRAPH
                                (#x8362 . #x50E2)	;CJK UNIFIED IDEOGRAPH
                                (#x8363 . #x50E3)	;CJK UNIFIED IDEOGRAPH
                                (#x8364 . #x50E4)	;CJK UNIFIED IDEOGRAPH
                                (#x8365 . #x50E5)	;CJK UNIFIED IDEOGRAPH
                                (#x8366 . #x50E8)	;CJK UNIFIED IDEOGRAPH
                                (#x8367 . #x50E9)	;CJK UNIFIED IDEOGRAPH
                                (#x8368 . #x50EA)	;CJK UNIFIED IDEOGRAPH
                                (#x8369 . #x50EB)	;CJK UNIFIED IDEOGRAPH
                                (#x836A . #x50EF)	;CJK UNIFIED IDEOGRAPH
                                (#x836B . #x50F0)	;CJK UNIFIED IDEOGRAPH
                                (#x836C . #x50F1)	;CJK UNIFIED IDEOGRAPH
                                (#x836D . #x50F2)	;CJK UNIFIED IDEOGRAPH
                                (#x836E . #x50F4)	;CJK UNIFIED IDEOGRAPH
                                (#x836F . #x50F6)	;CJK UNIFIED IDEOGRAPH
                                (#x8370 . #x50F7)	;CJK UNIFIED IDEOGRAPH
                                (#x8371 . #x50F8)	;CJK UNIFIED IDEOGRAPH
                                (#x8372 . #x50F9)	;CJK UNIFIED IDEOGRAPH
                                (#x8373 . #x50FA)	;CJK UNIFIED IDEOGRAPH
                                (#x8374 . #x50FC)	;CJK UNIFIED IDEOGRAPH
                                (#x8375 . #x50FD)	;CJK UNIFIED IDEOGRAPH
                                (#x8376 . #x50FE)	;CJK UNIFIED IDEOGRAPH
                                (#x8377 . #x50FF)	;CJK UNIFIED IDEOGRAPH
                                (#x8378 . #x5100)	;CJK UNIFIED IDEOGRAPH
                                (#x8379 . #x5101)	;CJK UNIFIED IDEOGRAPH
                                (#x837A . #x5102)	;CJK UNIFIED IDEOGRAPH
                                (#x837B . #x5103)	;CJK UNIFIED IDEOGRAPH
                                (#x837C . #x5104)	;CJK UNIFIED IDEOGRAPH
                                (#x837D . #x5105)	;CJK UNIFIED IDEOGRAPH
                                (#x837E . #x5108)	;CJK UNIFIED IDEOGRAPH
                                (#x8380 . #x5109)	;CJK UNIFIED IDEOGRAPH
                                (#x8381 . #x510A)	;CJK UNIFIED IDEOGRAPH
                                (#x8382 . #x510C)	;CJK UNIFIED IDEOGRAPH
                                (#x8383 . #x510D)	;CJK UNIFIED IDEOGRAPH
                                (#x8384 . #x510E)	;CJK UNIFIED IDEOGRAPH
                                (#x8385 . #x510F)	;CJK UNIFIED IDEOGRAPH
                                (#x8386 . #x5110)	;CJK UNIFIED IDEOGRAPH
                                (#x8387 . #x5111)	;CJK UNIFIED IDEOGRAPH
                                (#x8388 . #x5113)	;CJK UNIFIED IDEOGRAPH
                                (#x8389 . #x5114)	;CJK UNIFIED IDEOGRAPH
                                (#x838A . #x5115)	;CJK UNIFIED IDEOGRAPH
                                (#x838B . #x5116)	;CJK UNIFIED IDEOGRAPH
                                (#x838C . #x5117)	;CJK UNIFIED IDEOGRAPH
                                (#x838D . #x5118)	;CJK UNIFIED IDEOGRAPH
                                (#x838E . #x5119)	;CJK UNIFIED IDEOGRAPH
                                (#x838F . #x511A)	;CJK UNIFIED IDEOGRAPH
                                (#x8390 . #x511B)	;CJK UNIFIED IDEOGRAPH
                                (#x8391 . #x511C)	;CJK UNIFIED IDEOGRAPH
                                (#x8392 . #x511D)	;CJK UNIFIED IDEOGRAPH
                                (#x8393 . #x511E)	;CJK UNIFIED IDEOGRAPH
                                (#x8394 . #x511F)	;CJK UNIFIED IDEOGRAPH
                                (#x8395 . #x5120)	;CJK UNIFIED IDEOGRAPH
                                (#x8396 . #x5122)	;CJK UNIFIED IDEOGRAPH
                                (#x8397 . #x5123)	;CJK UNIFIED IDEOGRAPH
                                (#x8398 . #x5124)	;CJK UNIFIED IDEOGRAPH
                                (#x8399 . #x5125)	;CJK UNIFIED IDEOGRAPH
                                (#x839A . #x5126)	;CJK UNIFIED IDEOGRAPH
                                (#x839B . #x5127)	;CJK UNIFIED IDEOGRAPH
                                (#x839C . #x5128)	;CJK UNIFIED IDEOGRAPH
                                (#x839D . #x5129)	;CJK UNIFIED IDEOGRAPH
                                (#x839E . #x512A)	;CJK UNIFIED IDEOGRAPH
                                (#x839F . #x512B)	;CJK UNIFIED IDEOGRAPH
                                (#x83A0 . #x512C)	;CJK UNIFIED IDEOGRAPH
                                (#x83A1 . #x512D)	;CJK UNIFIED IDEOGRAPH
                                (#x83A2 . #x512E)	;CJK UNIFIED IDEOGRAPH
                                (#x83A3 . #x512F)	;CJK UNIFIED IDEOGRAPH
                                (#x83A4 . #x5130)	;CJK UNIFIED IDEOGRAPH
                                (#x83A5 . #x5131)	;CJK UNIFIED IDEOGRAPH
                                (#x83A6 . #x5132)	;CJK UNIFIED IDEOGRAPH
                                (#x83A7 . #x5133)	;CJK UNIFIED IDEOGRAPH
                                (#x83A8 . #x5134)	;CJK UNIFIED IDEOGRAPH
                                (#x83A9 . #x5135)	;CJK UNIFIED IDEOGRAPH
                                (#x83AA . #x5136)	;CJK UNIFIED IDEOGRAPH
                                (#x83AB . #x5137)	;CJK UNIFIED IDEOGRAPH
                                (#x83AC . #x5138)	;CJK UNIFIED IDEOGRAPH
                                (#x83AD . #x5139)	;CJK UNIFIED IDEOGRAPH
                                (#x83AE . #x513A)	;CJK UNIFIED IDEOGRAPH
                                (#x83AF . #x513B)	;CJK UNIFIED IDEOGRAPH
                                (#x83B0 . #x513C)	;CJK UNIFIED IDEOGRAPH
                                (#x83B1 . #x513D)	;CJK UNIFIED IDEOGRAPH
                                (#x83B2 . #x513E)	;CJK UNIFIED IDEOGRAPH
                                (#x83B3 . #x5142)	;CJK UNIFIED IDEOGRAPH
                                (#x83B4 . #x5147)	;CJK UNIFIED IDEOGRAPH
                                (#x83B5 . #x514A)	;CJK UNIFIED IDEOGRAPH
                                (#x83B6 . #x514C)	;CJK UNIFIED IDEOGRAPH
                                (#x83B7 . #x514E)	;CJK UNIFIED IDEOGRAPH
                                (#x83B8 . #x514F)	;CJK UNIFIED IDEOGRAPH
                                (#x83B9 . #x5150)	;CJK UNIFIED IDEOGRAPH
                                (#x83BA . #x5152)	;CJK UNIFIED IDEOGRAPH
                                (#x83BB . #x5153)	;CJK UNIFIED IDEOGRAPH
                                (#x83BC . #x5157)	;CJK UNIFIED IDEOGRAPH
                                (#x83BD . #x5158)	;CJK UNIFIED IDEOGRAPH
                                (#x83BE . #x5159)	;CJK UNIFIED IDEOGRAPH
                                (#x83BF . #x515B)	;CJK UNIFIED IDEOGRAPH
                                (#x83C0 . #x515D)	;CJK UNIFIED IDEOGRAPH
                                (#x83C1 . #x515E)	;CJK UNIFIED IDEOGRAPH
                                (#x83C2 . #x515F)	;CJK UNIFIED IDEOGRAPH
                                (#x83C3 . #x5160)	;CJK UNIFIED IDEOGRAPH
                                (#x83C4 . #x5161)	;CJK UNIFIED IDEOGRAPH
                                (#x83C5 . #x5163)	;CJK UNIFIED IDEOGRAPH
                                (#x83C6 . #x5164)	;CJK UNIFIED IDEOGRAPH
                                (#x83C7 . #x5166)	;CJK UNIFIED IDEOGRAPH
                                (#x83C8 . #x5167)	;CJK UNIFIED IDEOGRAPH
                                (#x83C9 . #x5169)	;CJK UNIFIED IDEOGRAPH
                                (#x83CA . #x516A)	;CJK UNIFIED IDEOGRAPH
                                (#x83CB . #x516F)	;CJK UNIFIED IDEOGRAPH
                                (#x83CC . #x5172)	;CJK UNIFIED IDEOGRAPH
                                (#x83CD . #x517A)	;CJK UNIFIED IDEOGRAPH
                                (#x83CE . #x517E)	;CJK UNIFIED IDEOGRAPH
                                (#x83CF . #x517F)	;CJK UNIFIED IDEOGRAPH
                                (#x83D0 . #x5183)	;CJK UNIFIED IDEOGRAPH
                                (#x83D1 . #x5184)	;CJK UNIFIED IDEOGRAPH
                                (#x83D2 . #x5186)	;CJK UNIFIED IDEOGRAPH
                                (#x83D3 . #x5187)	;CJK UNIFIED IDEOGRAPH
                                (#x83D4 . #x518A)	;CJK UNIFIED IDEOGRAPH
                                (#x83D5 . #x518B)	;CJK UNIFIED IDEOGRAPH
                                (#x83D6 . #x518E)	;CJK UNIFIED IDEOGRAPH
                                (#x83D7 . #x518F)	;CJK UNIFIED IDEOGRAPH
                                (#x83D8 . #x5190)	;CJK UNIFIED IDEOGRAPH
                                (#x83D9 . #x5191)	;CJK UNIFIED IDEOGRAPH
                                (#x83DA . #x5193)	;CJK UNIFIED IDEOGRAPH
                                (#x83DB . #x5194)	;CJK UNIFIED IDEOGRAPH
                                (#x83DC . #x5198)	;CJK UNIFIED IDEOGRAPH
                                (#x83DD . #x519A)	;CJK UNIFIED IDEOGRAPH
                                (#x83DE . #x519D)	;CJK UNIFIED IDEOGRAPH
                                (#x83DF . #x519E)	;CJK UNIFIED IDEOGRAPH
                                (#x83E0 . #x519F)	;CJK UNIFIED IDEOGRAPH
                                (#x83E1 . #x51A1)	;CJK UNIFIED IDEOGRAPH
                                (#x83E2 . #x51A3)	;CJK UNIFIED IDEOGRAPH
                                (#x83E3 . #x51A6)	;CJK UNIFIED IDEOGRAPH
                                (#x83E4 . #x51A7)	;CJK UNIFIED IDEOGRAPH
                                (#x83E5 . #x51A8)	;CJK UNIFIED IDEOGRAPH
                                (#x83E6 . #x51A9)	;CJK UNIFIED IDEOGRAPH
                                (#x83E7 . #x51AA)	;CJK UNIFIED IDEOGRAPH
                                (#x83E8 . #x51AD)	;CJK UNIFIED IDEOGRAPH
                                (#x83E9 . #x51AE)	;CJK UNIFIED IDEOGRAPH
                                (#x83EA . #x51B4)	;CJK UNIFIED IDEOGRAPH
                                (#x83EB . #x51B8)	;CJK UNIFIED IDEOGRAPH
                                (#x83EC . #x51B9)	;CJK UNIFIED IDEOGRAPH
                                (#x83ED . #x51BA)	;CJK UNIFIED IDEOGRAPH
                                (#x83EE . #x51BE)	;CJK UNIFIED IDEOGRAPH
                                (#x83EF . #x51BF)	;CJK UNIFIED IDEOGRAPH
                                (#x83F0 . #x51C1)	;CJK UNIFIED IDEOGRAPH
                                (#x83F1 . #x51C2)	;CJK UNIFIED IDEOGRAPH
                                (#x83F2 . #x51C3)	;CJK UNIFIED IDEOGRAPH
                                (#x83F3 . #x51C5)	;CJK UNIFIED IDEOGRAPH
                                (#x83F4 . #x51C8)	;CJK UNIFIED IDEOGRAPH
                                (#x83F5 . #x51CA)	;CJK UNIFIED IDEOGRAPH
                                (#x83F6 . #x51CD)	;CJK UNIFIED IDEOGRAPH
                                (#x83F7 . #x51CE)	;CJK UNIFIED IDEOGRAPH
                                (#x83F8 . #x51D0)	;CJK UNIFIED IDEOGRAPH
                                (#x83F9 . #x51D2)	;CJK UNIFIED IDEOGRAPH
                                (#x83FA . #x51D3)	;CJK UNIFIED IDEOGRAPH
                                (#x83FB . #x51D4)	;CJK UNIFIED IDEOGRAPH
                                (#x83FC . #x51D5)	;CJK UNIFIED IDEOGRAPH
                                (#x83FD . #x51D6)	;CJK UNIFIED IDEOGRAPH
                                (#x83FE . #x51D7)	;CJK UNIFIED IDEOGRAPH
                                (#x8440 . #x51D8)	;CJK UNIFIED IDEOGRAPH
                                (#x8441 . #x51D9)	;CJK UNIFIED IDEOGRAPH
                                (#x8442 . #x51DA)	;CJK UNIFIED IDEOGRAPH
                                (#x8443 . #x51DC)	;CJK UNIFIED IDEOGRAPH
                                (#x8444 . #x51DE)	;CJK UNIFIED IDEOGRAPH
                                (#x8445 . #x51DF)	;CJK UNIFIED IDEOGRAPH
                                (#x8446 . #x51E2)	;CJK UNIFIED IDEOGRAPH
                                (#x8447 . #x51E3)	;CJK UNIFIED IDEOGRAPH
                                (#x8448 . #x51E5)	;CJK UNIFIED IDEOGRAPH
                                (#x8449 . #x51E6)	;CJK UNIFIED IDEOGRAPH
                                (#x844A . #x51E7)	;CJK UNIFIED IDEOGRAPH
                                (#x844B . #x51E8)	;CJK UNIFIED IDEOGRAPH
                                (#x844C . #x51E9)	;CJK UNIFIED IDEOGRAPH
                                (#x844D . #x51EA)	;CJK UNIFIED IDEOGRAPH
                                (#x844E . #x51EC)	;CJK UNIFIED IDEOGRAPH
                                (#x844F . #x51EE)	;CJK UNIFIED IDEOGRAPH
                                (#x8450 . #x51F1)	;CJK UNIFIED IDEOGRAPH
                                (#x8451 . #x51F2)	;CJK UNIFIED IDEOGRAPH
                                (#x8452 . #x51F4)	;CJK UNIFIED IDEOGRAPH
                                (#x8453 . #x51F7)	;CJK UNIFIED IDEOGRAPH
                                (#x8454 . #x51FE)	;CJK UNIFIED IDEOGRAPH
                                (#x8455 . #x5204)	;CJK UNIFIED IDEOGRAPH
                                (#x8456 . #x5205)	;CJK UNIFIED IDEOGRAPH
                                (#x8457 . #x5209)	;CJK UNIFIED IDEOGRAPH
                                (#x8458 . #x520B)	;CJK UNIFIED IDEOGRAPH
                                (#x8459 . #x520C)	;CJK UNIFIED IDEOGRAPH
                                (#x845A . #x520F)	;CJK UNIFIED IDEOGRAPH
                                (#x845B . #x5210)	;CJK UNIFIED IDEOGRAPH
                                (#x845C . #x5213)	;CJK UNIFIED IDEOGRAPH
                                (#x845D . #x5214)	;CJK UNIFIED IDEOGRAPH
                                (#x845E . #x5215)	;CJK UNIFIED IDEOGRAPH
                                (#x845F . #x521C)	;CJK UNIFIED IDEOGRAPH
                                (#x8460 . #x521E)	;CJK UNIFIED IDEOGRAPH
                                (#x8461 . #x521F)	;CJK UNIFIED IDEOGRAPH
                                (#x8462 . #x5221)	;CJK UNIFIED IDEOGRAPH
                                (#x8463 . #x5222)	;CJK UNIFIED IDEOGRAPH
                                (#x8464 . #x5223)	;CJK UNIFIED IDEOGRAPH
                                (#x8465 . #x5225)	;CJK UNIFIED IDEOGRAPH
                                (#x8466 . #x5226)	;CJK UNIFIED IDEOGRAPH
                                (#x8467 . #x5227)	;CJK UNIFIED IDEOGRAPH
                                (#x8468 . #x522A)	;CJK UNIFIED IDEOGRAPH
                                (#x8469 . #x522C)	;CJK UNIFIED IDEOGRAPH
                                (#x846A . #x522F)	;CJK UNIFIED IDEOGRAPH
                                (#x846B . #x5231)	;CJK UNIFIED IDEOGRAPH
                                (#x846C . #x5232)	;CJK UNIFIED IDEOGRAPH
                                (#x846D . #x5234)	;CJK UNIFIED IDEOGRAPH
                                (#x846E . #x5235)	;CJK UNIFIED IDEOGRAPH
                                (#x846F . #x523C)	;CJK UNIFIED IDEOGRAPH
                                (#x8470 . #x523E)	;CJK UNIFIED IDEOGRAPH
                                (#x8471 . #x5244)	;CJK UNIFIED IDEOGRAPH
                                (#x8472 . #x5245)	;CJK UNIFIED IDEOGRAPH
                                (#x8473 . #x5246)	;CJK UNIFIED IDEOGRAPH
                                (#x8474 . #x5247)	;CJK UNIFIED IDEOGRAPH
                                (#x8475 . #x5248)	;CJK UNIFIED IDEOGRAPH
                                (#x8476 . #x5249)	;CJK UNIFIED IDEOGRAPH
                                (#x8477 . #x524B)	;CJK UNIFIED IDEOGRAPH
                                (#x8478 . #x524E)	;CJK UNIFIED IDEOGRAPH
                                (#x8479 . #x524F)	;CJK UNIFIED IDEOGRAPH
                                (#x847A . #x5252)	;CJK UNIFIED IDEOGRAPH
                                (#x847B . #x5253)	;CJK UNIFIED IDEOGRAPH
                                (#x847C . #x5255)	;CJK UNIFIED IDEOGRAPH
                                (#x847D . #x5257)	;CJK UNIFIED IDEOGRAPH
                                (#x847E . #x5258)	;CJK UNIFIED IDEOGRAPH
                                (#x8480 . #x5259)	;CJK UNIFIED IDEOGRAPH
                                (#x8481 . #x525A)	;CJK UNIFIED IDEOGRAPH
                                (#x8482 . #x525B)	;CJK UNIFIED IDEOGRAPH
                                (#x8483 . #x525D)	;CJK UNIFIED IDEOGRAPH
                                (#x8484 . #x525F)	;CJK UNIFIED IDEOGRAPH
                                (#x8485 . #x5260)	;CJK UNIFIED IDEOGRAPH
                                (#x8486 . #x5262)	;CJK UNIFIED IDEOGRAPH
                                (#x8487 . #x5263)	;CJK UNIFIED IDEOGRAPH
                                (#x8488 . #x5264)	;CJK UNIFIED IDEOGRAPH
                                (#x8489 . #x5266)	;CJK UNIFIED IDEOGRAPH
                                (#x848A . #x5268)	;CJK UNIFIED IDEOGRAPH
                                (#x848B . #x526B)	;CJK UNIFIED IDEOGRAPH
                                (#x848C . #x526C)	;CJK UNIFIED IDEOGRAPH
                                (#x848D . #x526D)	;CJK UNIFIED IDEOGRAPH
                                (#x848E . #x526E)	;CJK UNIFIED IDEOGRAPH
                                (#x848F . #x5270)	;CJK UNIFIED IDEOGRAPH
                                (#x8490 . #x5271)	;CJK UNIFIED IDEOGRAPH
                                (#x8491 . #x5273)	;CJK UNIFIED IDEOGRAPH
                                (#x8492 . #x5274)	;CJK UNIFIED IDEOGRAPH
                                (#x8493 . #x5275)	;CJK UNIFIED IDEOGRAPH
                                (#x8494 . #x5276)	;CJK UNIFIED IDEOGRAPH
                                (#x8495 . #x5277)	;CJK UNIFIED IDEOGRAPH
                                (#x8496 . #x5278)	;CJK UNIFIED IDEOGRAPH
                                (#x8497 . #x5279)	;CJK UNIFIED IDEOGRAPH
                                (#x8498 . #x527A)	;CJK UNIFIED IDEOGRAPH
                                (#x8499 . #x527B)	;CJK UNIFIED IDEOGRAPH
                                (#x849A . #x527C)	;CJK UNIFIED IDEOGRAPH
                                (#x849B . #x527E)	;CJK UNIFIED IDEOGRAPH
                                (#x849C . #x5280)	;CJK UNIFIED IDEOGRAPH
                                (#x849D . #x5283)	;CJK UNIFIED IDEOGRAPH
                                (#x849E . #x5284)	;CJK UNIFIED IDEOGRAPH
                                (#x849F . #x5285)	;CJK UNIFIED IDEOGRAPH
                                (#x84A0 . #x5286)	;CJK UNIFIED IDEOGRAPH
                                (#x84A1 . #x5287)	;CJK UNIFIED IDEOGRAPH
                                (#x84A2 . #x5289)	;CJK UNIFIED IDEOGRAPH
                                (#x84A3 . #x528A)	;CJK UNIFIED IDEOGRAPH
                                (#x84A4 . #x528B)	;CJK UNIFIED IDEOGRAPH
                                (#x84A5 . #x528C)	;CJK UNIFIED IDEOGRAPH
                                (#x84A6 . #x528D)	;CJK UNIFIED IDEOGRAPH
                                (#x84A7 . #x528E)	;CJK UNIFIED IDEOGRAPH
                                (#x84A8 . #x528F)	;CJK UNIFIED IDEOGRAPH
                                (#x84A9 . #x5291)	;CJK UNIFIED IDEOGRAPH
                                (#x84AA . #x5292)	;CJK UNIFIED IDEOGRAPH
                                (#x84AB . #x5294)	;CJK UNIFIED IDEOGRAPH
                                (#x84AC . #x5295)	;CJK UNIFIED IDEOGRAPH
                                (#x84AD . #x5296)	;CJK UNIFIED IDEOGRAPH
                                (#x84AE . #x5297)	;CJK UNIFIED IDEOGRAPH
                                (#x84AF . #x5298)	;CJK UNIFIED IDEOGRAPH
                                (#x84B0 . #x5299)	;CJK UNIFIED IDEOGRAPH
                                (#x84B1 . #x529A)	;CJK UNIFIED IDEOGRAPH
                                (#x84B2 . #x529C)	;CJK UNIFIED IDEOGRAPH
                                (#x84B3 . #x52A4)	;CJK UNIFIED IDEOGRAPH
                                (#x84B4 . #x52A5)	;CJK UNIFIED IDEOGRAPH
                                (#x84B5 . #x52A6)	;CJK UNIFIED IDEOGRAPH
                                (#x84B6 . #x52A7)	;CJK UNIFIED IDEOGRAPH
                                (#x84B7 . #x52AE)	;CJK UNIFIED IDEOGRAPH
                                (#x84B8 . #x52AF)	;CJK UNIFIED IDEOGRAPH
                                (#x84B9 . #x52B0)	;CJK UNIFIED IDEOGRAPH
                                (#x84BA . #x52B4)	;CJK UNIFIED IDEOGRAPH
                                (#x84BB . #x52B5)	;CJK UNIFIED IDEOGRAPH
                                (#x84BC . #x52B6)	;CJK UNIFIED IDEOGRAPH
                                (#x84BD . #x52B7)	;CJK UNIFIED IDEOGRAPH
                                (#x84BE . #x52B8)	;CJK UNIFIED IDEOGRAPH
                                (#x84BF . #x52B9)	;CJK UNIFIED IDEOGRAPH
                                (#x84C0 . #x52BA)	;CJK UNIFIED IDEOGRAPH
                                (#x84C1 . #x52BB)	;CJK UNIFIED IDEOGRAPH
                                (#x84C2 . #x52BC)	;CJK UNIFIED IDEOGRAPH
                                (#x84C3 . #x52BD)	;CJK UNIFIED IDEOGRAPH
                                (#x84C4 . #x52C0)	;CJK UNIFIED IDEOGRAPH
                                (#x84C5 . #x52C1)	;CJK UNIFIED IDEOGRAPH
                                (#x84C6 . #x52C2)	;CJK UNIFIED IDEOGRAPH
                                (#x84C7 . #x52C4)	;CJK UNIFIED IDEOGRAPH
                                (#x84C8 . #x52C5)	;CJK UNIFIED IDEOGRAPH
                                (#x84C9 . #x52C6)	;CJK UNIFIED IDEOGRAPH
                                (#x84CA . #x52C8)	;CJK UNIFIED IDEOGRAPH
                                (#x84CB . #x52CA)	;CJK UNIFIED IDEOGRAPH
                                (#x84CC . #x52CC)	;CJK UNIFIED IDEOGRAPH
                                (#x84CD . #x52CD)	;CJK UNIFIED IDEOGRAPH
                                (#x84CE . #x52CE)	;CJK UNIFIED IDEOGRAPH
                                (#x84CF . #x52CF)	;CJK UNIFIED IDEOGRAPH
                                (#x84D0 . #x52D1)	;CJK UNIFIED IDEOGRAPH
                                (#x84D1 . #x52D3)	;CJK UNIFIED IDEOGRAPH
                                (#x84D2 . #x52D4)	;CJK UNIFIED IDEOGRAPH
                                (#x84D3 . #x52D5)	;CJK UNIFIED IDEOGRAPH
                                (#x84D4 . #x52D7)	;CJK UNIFIED IDEOGRAPH
                                (#x84D5 . #x52D9)	;CJK UNIFIED IDEOGRAPH
                                (#x84D6 . #x52DA)	;CJK UNIFIED IDEOGRAPH
                                (#x84D7 . #x52DB)	;CJK UNIFIED IDEOGRAPH
                                (#x84D8 . #x52DC)	;CJK UNIFIED IDEOGRAPH
                                (#x84D9 . #x52DD)	;CJK UNIFIED IDEOGRAPH
                                (#x84DA . #x52DE)	;CJK UNIFIED IDEOGRAPH
                                (#x84DB . #x52E0)	;CJK UNIFIED IDEOGRAPH
                                (#x84DC . #x52E1)	;CJK UNIFIED IDEOGRAPH
                                (#x84DD . #x52E2)	;CJK UNIFIED IDEOGRAPH
                                (#x84DE . #x52E3)	;CJK UNIFIED IDEOGRAPH
                                (#x84DF . #x52E5)	;CJK UNIFIED IDEOGRAPH
                                (#x84E0 . #x52E6)	;CJK UNIFIED IDEOGRAPH
                                (#x84E1 . #x52E7)	;CJK UNIFIED IDEOGRAPH
                                (#x84E2 . #x52E8)	;CJK UNIFIED IDEOGRAPH
                                (#x84E3 . #x52E9)	;CJK UNIFIED IDEOGRAPH
                                (#x84E4 . #x52EA)	;CJK UNIFIED IDEOGRAPH
                                (#x84E5 . #x52EB)	;CJK UNIFIED IDEOGRAPH
                                (#x84E6 . #x52EC)	;CJK UNIFIED IDEOGRAPH
                                (#x84E7 . #x52ED)	;CJK UNIFIED IDEOGRAPH
                                (#x84E8 . #x52EE)	;CJK UNIFIED IDEOGRAPH
                                (#x84E9 . #x52EF)	;CJK UNIFIED IDEOGRAPH
                                (#x84EA . #x52F1)	;CJK UNIFIED IDEOGRAPH
                                (#x84EB . #x52F2)	;CJK UNIFIED IDEOGRAPH
                                (#x84EC . #x52F3)	;CJK UNIFIED IDEOGRAPH
                                (#x84ED . #x52F4)	;CJK UNIFIED IDEOGRAPH
                                (#x84EE . #x52F5)	;CJK UNIFIED IDEOGRAPH
                                (#x84EF . #x52F6)	;CJK UNIFIED IDEOGRAPH
                                (#x84F0 . #x52F7)	;CJK UNIFIED IDEOGRAPH
                                (#x84F1 . #x52F8)	;CJK UNIFIED IDEOGRAPH
                                (#x84F2 . #x52FB)	;CJK UNIFIED IDEOGRAPH
                                (#x84F3 . #x52FC)	;CJK UNIFIED IDEOGRAPH
                                (#x84F4 . #x52FD)	;CJK UNIFIED IDEOGRAPH
                                (#x84F5 . #x5301)	;CJK UNIFIED IDEOGRAPH
                                (#x84F6 . #x5302)	;CJK UNIFIED IDEOGRAPH
                                (#x84F7 . #x5303)	;CJK UNIFIED IDEOGRAPH
                                (#x84F8 . #x5304)	;CJK UNIFIED IDEOGRAPH
                                (#x84F9 . #x5307)	;CJK UNIFIED IDEOGRAPH
                                (#x84FA . #x5309)	;CJK UNIFIED IDEOGRAPH
                                (#x84FB . #x530A)	;CJK UNIFIED IDEOGRAPH
                                (#x84FC . #x530B)	;CJK UNIFIED IDEOGRAPH
                                (#x84FD . #x530C)	;CJK UNIFIED IDEOGRAPH
                                (#x84FE . #x530E)	;CJK UNIFIED IDEOGRAPH
                                (#x8540 . #x5311)	;CJK UNIFIED IDEOGRAPH
                                (#x8541 . #x5312)	;CJK UNIFIED IDEOGRAPH
                                (#x8542 . #x5313)	;CJK UNIFIED IDEOGRAPH
                                (#x8543 . #x5314)	;CJK UNIFIED IDEOGRAPH
                                (#x8544 . #x5318)	;CJK UNIFIED IDEOGRAPH
                                (#x8545 . #x531B)	;CJK UNIFIED IDEOGRAPH
                                (#x8546 . #x531C)	;CJK UNIFIED IDEOGRAPH
                                (#x8547 . #x531E)	;CJK UNIFIED IDEOGRAPH
                                (#x8548 . #x531F)	;CJK UNIFIED IDEOGRAPH
                                (#x8549 . #x5322)	;CJK UNIFIED IDEOGRAPH
                                (#x854A . #x5324)	;CJK UNIFIED IDEOGRAPH
                                (#x854B . #x5325)	;CJK UNIFIED IDEOGRAPH
                                (#x854C . #x5327)	;CJK UNIFIED IDEOGRAPH
                                (#x854D . #x5328)	;CJK UNIFIED IDEOGRAPH
                                (#x854E . #x5329)	;CJK UNIFIED IDEOGRAPH
                                (#x854F . #x532B)	;CJK UNIFIED IDEOGRAPH
                                (#x8550 . #x532C)	;CJK UNIFIED IDEOGRAPH
                                (#x8551 . #x532D)	;CJK UNIFIED IDEOGRAPH
                                (#x8552 . #x532F)	;CJK UNIFIED IDEOGRAPH
                                (#x8553 . #x5330)	;CJK UNIFIED IDEOGRAPH
                                (#x8554 . #x5331)	;CJK UNIFIED IDEOGRAPH
                                (#x8555 . #x5332)	;CJK UNIFIED IDEOGRAPH
                                (#x8556 . #x5333)	;CJK UNIFIED IDEOGRAPH
                                (#x8557 . #x5334)	;CJK UNIFIED IDEOGRAPH
                                (#x8558 . #x5335)	;CJK UNIFIED IDEOGRAPH
                                (#x8559 . #x5336)	;CJK UNIFIED IDEOGRAPH
                                (#x855A . #x5337)	;CJK UNIFIED IDEOGRAPH
                                (#x855B . #x5338)	;CJK UNIFIED IDEOGRAPH
                                (#x855C . #x533C)	;CJK UNIFIED IDEOGRAPH
                                (#x855D . #x533D)	;CJK UNIFIED IDEOGRAPH
                                (#x855E . #x5340)	;CJK UNIFIED IDEOGRAPH
                                (#x855F . #x5342)	;CJK UNIFIED IDEOGRAPH
                                (#x8560 . #x5344)	;CJK UNIFIED IDEOGRAPH
                                (#x8561 . #x5346)	;CJK UNIFIED IDEOGRAPH
                                (#x8562 . #x534B)	;CJK UNIFIED IDEOGRAPH
                                (#x8563 . #x534C)	;CJK UNIFIED IDEOGRAPH
                                (#x8564 . #x534D)	;CJK UNIFIED IDEOGRAPH
                                (#x8565 . #x5350)	;CJK UNIFIED IDEOGRAPH
                                (#x8566 . #x5354)	;CJK UNIFIED IDEOGRAPH
                                (#x8567 . #x5358)	;CJK UNIFIED IDEOGRAPH
                                (#x8568 . #x5359)	;CJK UNIFIED IDEOGRAPH
                                (#x8569 . #x535B)	;CJK UNIFIED IDEOGRAPH
                                (#x856A . #x535D)	;CJK UNIFIED IDEOGRAPH
                                (#x856B . #x5365)	;CJK UNIFIED IDEOGRAPH
                                (#x856C . #x5368)	;CJK UNIFIED IDEOGRAPH
                                (#x856D . #x536A)	;CJK UNIFIED IDEOGRAPH
                                (#x856E . #x536C)	;CJK UNIFIED IDEOGRAPH
                                (#x856F . #x536D)	;CJK UNIFIED IDEOGRAPH
                                (#x8570 . #x5372)	;CJK UNIFIED IDEOGRAPH
                                (#x8571 . #x5376)	;CJK UNIFIED IDEOGRAPH
                                (#x8572 . #x5379)	;CJK UNIFIED IDEOGRAPH
                                (#x8573 . #x537B)	;CJK UNIFIED IDEOGRAPH
                                (#x8574 . #x537C)	;CJK UNIFIED IDEOGRAPH
                                (#x8575 . #x537D)	;CJK UNIFIED IDEOGRAPH
                                (#x8576 . #x537E)	;CJK UNIFIED IDEOGRAPH
                                (#x8577 . #x5380)	;CJK UNIFIED IDEOGRAPH
                                (#x8578 . #x5381)	;CJK UNIFIED IDEOGRAPH
                                (#x8579 . #x5383)	;CJK UNIFIED IDEOGRAPH
                                (#x857A . #x5387)	;CJK UNIFIED IDEOGRAPH
                                (#x857B . #x5388)	;CJK UNIFIED IDEOGRAPH
                                (#x857C . #x538A)	;CJK UNIFIED IDEOGRAPH
                                (#x857D . #x538E)	;CJK UNIFIED IDEOGRAPH
                                (#x857E . #x538F)	;CJK UNIFIED IDEOGRAPH
                                (#x8580 . #x5390)	;CJK UNIFIED IDEOGRAPH
                                (#x8581 . #x5391)	;CJK UNIFIED IDEOGRAPH
                                (#x8582 . #x5392)	;CJK UNIFIED IDEOGRAPH
                                (#x8583 . #x5393)	;CJK UNIFIED IDEOGRAPH
                                (#x8584 . #x5394)	;CJK UNIFIED IDEOGRAPH
                                (#x8585 . #x5396)	;CJK UNIFIED IDEOGRAPH
                                (#x8586 . #x5397)	;CJK UNIFIED IDEOGRAPH
                                (#x8587 . #x5399)	;CJK UNIFIED IDEOGRAPH
                                (#x8588 . #x539B)	;CJK UNIFIED IDEOGRAPH
                                (#x8589 . #x539C)	;CJK UNIFIED IDEOGRAPH
                                (#x858A . #x539E)	;CJK UNIFIED IDEOGRAPH
                                (#x858B . #x53A0)	;CJK UNIFIED IDEOGRAPH
                                (#x858C . #x53A1)	;CJK UNIFIED IDEOGRAPH
                                (#x858D . #x53A4)	;CJK UNIFIED IDEOGRAPH
                                (#x858E . #x53A7)	;CJK UNIFIED IDEOGRAPH
                                (#x858F . #x53AA)	;CJK UNIFIED IDEOGRAPH
                                (#x8590 . #x53AB)	;CJK UNIFIED IDEOGRAPH
                                (#x8591 . #x53AC)	;CJK UNIFIED IDEOGRAPH
                                (#x8592 . #x53AD)	;CJK UNIFIED IDEOGRAPH
                                (#x8593 . #x53AF)	;CJK UNIFIED IDEOGRAPH
                                (#x8594 . #x53B0)	;CJK UNIFIED IDEOGRAPH
                                (#x8595 . #x53B1)	;CJK UNIFIED IDEOGRAPH
                                (#x8596 . #x53B2)	;CJK UNIFIED IDEOGRAPH
                                (#x8597 . #x53B3)	;CJK UNIFIED IDEOGRAPH
                                (#x8598 . #x53B4)	;CJK UNIFIED IDEOGRAPH
                                (#x8599 . #x53B5)	;CJK UNIFIED IDEOGRAPH
                                (#x859A . #x53B7)	;CJK UNIFIED IDEOGRAPH
                                (#x859B . #x53B8)	;CJK UNIFIED IDEOGRAPH
                                (#x859C . #x53B9)	;CJK UNIFIED IDEOGRAPH
                                (#x859D . #x53BA)	;CJK UNIFIED IDEOGRAPH
                                (#x859E . #x53BC)	;CJK UNIFIED IDEOGRAPH
                                (#x859F . #x53BD)	;CJK UNIFIED IDEOGRAPH
                                (#x85A0 . #x53BE)	;CJK UNIFIED IDEOGRAPH
                                (#x85A1 . #x53C0)	;CJK UNIFIED IDEOGRAPH
                                (#x85A2 . #x53C3)	;CJK UNIFIED IDEOGRAPH
                                (#x85A3 . #x53C4)	;CJK UNIFIED IDEOGRAPH
                                (#x85A4 . #x53C5)	;CJK UNIFIED IDEOGRAPH
                                (#x85A5 . #x53C6)	;CJK UNIFIED IDEOGRAPH
                                (#x85A6 . #x53C7)	;CJK UNIFIED IDEOGRAPH
                                (#x85A7 . #x53CE)	;CJK UNIFIED IDEOGRAPH
                                (#x85A8 . #x53CF)	;CJK UNIFIED IDEOGRAPH
                                (#x85A9 . #x53D0)	;CJK UNIFIED IDEOGRAPH
                                (#x85AA . #x53D2)	;CJK UNIFIED IDEOGRAPH
                                (#x85AB . #x53D3)	;CJK UNIFIED IDEOGRAPH
                                (#x85AC . #x53D5)	;CJK UNIFIED IDEOGRAPH
                                (#x85AD . #x53DA)	;CJK UNIFIED IDEOGRAPH
                                (#x85AE . #x53DC)	;CJK UNIFIED IDEOGRAPH
                                (#x85AF . #x53DD)	;CJK UNIFIED IDEOGRAPH
                                (#x85B0 . #x53DE)	;CJK UNIFIED IDEOGRAPH
                                (#x85B1 . #x53E1)	;CJK UNIFIED IDEOGRAPH
                                (#x85B2 . #x53E2)	;CJK UNIFIED IDEOGRAPH
                                (#x85B3 . #x53E7)	;CJK UNIFIED IDEOGRAPH
                                (#x85B4 . #x53F4)	;CJK UNIFIED IDEOGRAPH
                                (#x85B5 . #x53FA)	;CJK UNIFIED IDEOGRAPH
                                (#x85B6 . #x53FE)	;CJK UNIFIED IDEOGRAPH
                                (#x85B7 . #x53FF)	;CJK UNIFIED IDEOGRAPH
                                (#x85B8 . #x5400)	;CJK UNIFIED IDEOGRAPH
                                (#x85B9 . #x5402)	;CJK UNIFIED IDEOGRAPH
                                (#x85BA . #x5405)	;CJK UNIFIED IDEOGRAPH
                                (#x85BB . #x5407)	;CJK UNIFIED IDEOGRAPH
                                (#x85BC . #x540B)	;CJK UNIFIED IDEOGRAPH
                                (#x85BD . #x5414)	;CJK UNIFIED IDEOGRAPH
                                (#x85BE . #x5418)	;CJK UNIFIED IDEOGRAPH
                                (#x85BF . #x5419)	;CJK UNIFIED IDEOGRAPH
                                (#x85C0 . #x541A)	;CJK UNIFIED IDEOGRAPH
                                (#x85C1 . #x541C)	;CJK UNIFIED IDEOGRAPH
                                (#x85C2 . #x5422)	;CJK UNIFIED IDEOGRAPH
                                (#x85C3 . #x5424)	;CJK UNIFIED IDEOGRAPH
                                (#x85C4 . #x5425)	;CJK UNIFIED IDEOGRAPH
                                (#x85C5 . #x542A)	;CJK UNIFIED IDEOGRAPH
                                (#x85C6 . #x5430)	;CJK UNIFIED IDEOGRAPH
                                (#x85C7 . #x5433)	;CJK UNIFIED IDEOGRAPH
                                (#x85C8 . #x5436)	;CJK UNIFIED IDEOGRAPH
                                (#x85C9 . #x5437)	;CJK UNIFIED IDEOGRAPH
                                (#x85CA . #x543A)	;CJK UNIFIED IDEOGRAPH
                                (#x85CB . #x543D)	;CJK UNIFIED IDEOGRAPH
                                (#x85CC . #x543F)	;CJK UNIFIED IDEOGRAPH
                                (#x85CD . #x5441)	;CJK UNIFIED IDEOGRAPH
                                (#x85CE . #x5442)	;CJK UNIFIED IDEOGRAPH
                                (#x85CF . #x5444)	;CJK UNIFIED IDEOGRAPH
                                (#x85D0 . #x5445)	;CJK UNIFIED IDEOGRAPH
                                (#x85D1 . #x5447)	;CJK UNIFIED IDEOGRAPH
                                (#x85D2 . #x5449)	;CJK UNIFIED IDEOGRAPH
                                (#x85D3 . #x544C)	;CJK UNIFIED IDEOGRAPH
                                (#x85D4 . #x544D)	;CJK UNIFIED IDEOGRAPH
                                (#x85D5 . #x544E)	;CJK UNIFIED IDEOGRAPH
                                (#x85D6 . #x544F)	;CJK UNIFIED IDEOGRAPH
                                (#x85D7 . #x5451)	;CJK UNIFIED IDEOGRAPH
                                (#x85D8 . #x545A)	;CJK UNIFIED IDEOGRAPH
                                (#x85D9 . #x545D)	;CJK UNIFIED IDEOGRAPH
                                (#x85DA . #x545E)	;CJK UNIFIED IDEOGRAPH
                                (#x85DB . #x545F)	;CJK UNIFIED IDEOGRAPH
                                (#x85DC . #x5460)	;CJK UNIFIED IDEOGRAPH
                                (#x85DD . #x5461)	;CJK UNIFIED IDEOGRAPH
                                (#x85DE . #x5463)	;CJK UNIFIED IDEOGRAPH
                                (#x85DF . #x5465)	;CJK UNIFIED IDEOGRAPH
                                (#x85E0 . #x5467)	;CJK UNIFIED IDEOGRAPH
                                (#x85E1 . #x5469)	;CJK UNIFIED IDEOGRAPH
                                (#x85E2 . #x546A)	;CJK UNIFIED IDEOGRAPH
                                (#x85E3 . #x546B)	;CJK UNIFIED IDEOGRAPH
                                (#x85E4 . #x546C)	;CJK UNIFIED IDEOGRAPH
                                (#x85E5 . #x546D)	;CJK UNIFIED IDEOGRAPH
                                (#x85E6 . #x546E)	;CJK UNIFIED IDEOGRAPH
                                (#x85E7 . #x546F)	;CJK UNIFIED IDEOGRAPH
                                (#x85E8 . #x5470)	;CJK UNIFIED IDEOGRAPH
                                (#x85E9 . #x5474)	;CJK UNIFIED IDEOGRAPH
                                (#x85EA . #x5479)	;CJK UNIFIED IDEOGRAPH
                                (#x85EB . #x547A)	;CJK UNIFIED IDEOGRAPH
                                (#x85EC . #x547E)	;CJK UNIFIED IDEOGRAPH
                                (#x85ED . #x547F)	;CJK UNIFIED IDEOGRAPH
                                (#x85EE . #x5481)	;CJK UNIFIED IDEOGRAPH
                                (#x85EF . #x5483)	;CJK UNIFIED IDEOGRAPH
                                (#x85F0 . #x5485)	;CJK UNIFIED IDEOGRAPH
                                (#x85F1 . #x5487)	;CJK UNIFIED IDEOGRAPH
                                (#x85F2 . #x5488)	;CJK UNIFIED IDEOGRAPH
                                (#x85F3 . #x5489)	;CJK UNIFIED IDEOGRAPH
                                (#x85F4 . #x548A)	;CJK UNIFIED IDEOGRAPH
                                (#x85F5 . #x548D)	;CJK UNIFIED IDEOGRAPH
                                (#x85F6 . #x5491)	;CJK UNIFIED IDEOGRAPH
                                (#x85F7 . #x5493)	;CJK UNIFIED IDEOGRAPH
                                (#x85F8 . #x5497)	;CJK UNIFIED IDEOGRAPH
                                (#x85F9 . #x5498)	;CJK UNIFIED IDEOGRAPH
                                (#x85FA . #x549C)	;CJK UNIFIED IDEOGRAPH
                                (#x85FB . #x549E)	;CJK UNIFIED IDEOGRAPH
                                (#x85FC . #x549F)	;CJK UNIFIED IDEOGRAPH
                                (#x85FD . #x54A0)	;CJK UNIFIED IDEOGRAPH
                                (#x85FE . #x54A1)	;CJK UNIFIED IDEOGRAPH
                                (#x8640 . #x54A2)	;CJK UNIFIED IDEOGRAPH
                                (#x8641 . #x54A5)	;CJK UNIFIED IDEOGRAPH
                                (#x8642 . #x54AE)	;CJK UNIFIED IDEOGRAPH
                                (#x8643 . #x54B0)	;CJK UNIFIED IDEOGRAPH
                                (#x8644 . #x54B2)	;CJK UNIFIED IDEOGRAPH
                                (#x8645 . #x54B5)	;CJK UNIFIED IDEOGRAPH
                                (#x8646 . #x54B6)	;CJK UNIFIED IDEOGRAPH
                                (#x8647 . #x54B7)	;CJK UNIFIED IDEOGRAPH
                                (#x8648 . #x54B9)	;CJK UNIFIED IDEOGRAPH
                                (#x8649 . #x54BA)	;CJK UNIFIED IDEOGRAPH
                                (#x864A . #x54BC)	;CJK UNIFIED IDEOGRAPH
                                (#x864B . #x54BE)	;CJK UNIFIED IDEOGRAPH
                                (#x864C . #x54C3)	;CJK UNIFIED IDEOGRAPH
                                (#x864D . #x54C5)	;CJK UNIFIED IDEOGRAPH
                                (#x864E . #x54CA)	;CJK UNIFIED IDEOGRAPH
                                (#x864F . #x54CB)	;CJK UNIFIED IDEOGRAPH
                                (#x8650 . #x54D6)	;CJK UNIFIED IDEOGRAPH
                                (#x8651 . #x54D8)	;CJK UNIFIED IDEOGRAPH
                                (#x8652 . #x54DB)	;CJK UNIFIED IDEOGRAPH
                                (#x8653 . #x54E0)	;CJK UNIFIED IDEOGRAPH
                                (#x8654 . #x54E1)	;CJK UNIFIED IDEOGRAPH
                                (#x8655 . #x54E2)	;CJK UNIFIED IDEOGRAPH
                                (#x8656 . #x54E3)	;CJK UNIFIED IDEOGRAPH
                                (#x8657 . #x54E4)	;CJK UNIFIED IDEOGRAPH
                                (#x8658 . #x54EB)	;CJK UNIFIED IDEOGRAPH
                                (#x8659 . #x54EC)	;CJK UNIFIED IDEOGRAPH
                                (#x865A . #x54EF)	;CJK UNIFIED IDEOGRAPH
                                (#x865B . #x54F0)	;CJK UNIFIED IDEOGRAPH
                                (#x865C . #x54F1)	;CJK UNIFIED IDEOGRAPH
                                (#x865D . #x54F4)	;CJK UNIFIED IDEOGRAPH
                                (#x865E . #x54F5)	;CJK UNIFIED IDEOGRAPH
                                (#x865F . #x54F6)	;CJK UNIFIED IDEOGRAPH
                                (#x8660 . #x54F7)	;CJK UNIFIED IDEOGRAPH
                                (#x8661 . #x54F8)	;CJK UNIFIED IDEOGRAPH
                                (#x8662 . #x54F9)	;CJK UNIFIED IDEOGRAPH
                                (#x8663 . #x54FB)	;CJK UNIFIED IDEOGRAPH
                                (#x8664 . #x54FE)	;CJK UNIFIED IDEOGRAPH
                                (#x8665 . #x5500)	;CJK UNIFIED IDEOGRAPH
                                (#x8666 . #x5502)	;CJK UNIFIED IDEOGRAPH
                                (#x8667 . #x5503)	;CJK UNIFIED IDEOGRAPH
                                (#x8668 . #x5504)	;CJK UNIFIED IDEOGRAPH
                                (#x8669 . #x5505)	;CJK UNIFIED IDEOGRAPH
                                (#x866A . #x5508)	;CJK UNIFIED IDEOGRAPH
                                (#x866B . #x550A)	;CJK UNIFIED IDEOGRAPH
                                (#x866C . #x550B)	;CJK UNIFIED IDEOGRAPH
                                (#x866D . #x550C)	;CJK UNIFIED IDEOGRAPH
                                (#x866E . #x550D)	;CJK UNIFIED IDEOGRAPH
                                (#x866F . #x550E)	;CJK UNIFIED IDEOGRAPH
                                (#x8670 . #x5512)	;CJK UNIFIED IDEOGRAPH
                                (#x8671 . #x5513)	;CJK UNIFIED IDEOGRAPH
                                (#x8672 . #x5515)	;CJK UNIFIED IDEOGRAPH
                                (#x8673 . #x5516)	;CJK UNIFIED IDEOGRAPH
                                (#x8674 . #x5517)	;CJK UNIFIED IDEOGRAPH
                                (#x8675 . #x5518)	;CJK UNIFIED IDEOGRAPH
                                (#x8676 . #x5519)	;CJK UNIFIED IDEOGRAPH
                                (#x8677 . #x551A)	;CJK UNIFIED IDEOGRAPH
                                (#x8678 . #x551C)	;CJK UNIFIED IDEOGRAPH
                                (#x8679 . #x551D)	;CJK UNIFIED IDEOGRAPH
                                (#x867A . #x551E)	;CJK UNIFIED IDEOGRAPH
                                (#x867B . #x551F)	;CJK UNIFIED IDEOGRAPH
                                (#x867C . #x5521)	;CJK UNIFIED IDEOGRAPH
                                (#x867D . #x5525)	;CJK UNIFIED IDEOGRAPH
                                (#x867E . #x5526)	;CJK UNIFIED IDEOGRAPH
                                (#x8680 . #x5528)	;CJK UNIFIED IDEOGRAPH
                                (#x8681 . #x5529)	;CJK UNIFIED IDEOGRAPH
                                (#x8682 . #x552B)	;CJK UNIFIED IDEOGRAPH
                                (#x8683 . #x552D)	;CJK UNIFIED IDEOGRAPH
                                (#x8684 . #x5532)	;CJK UNIFIED IDEOGRAPH
                                (#x8685 . #x5534)	;CJK UNIFIED IDEOGRAPH
                                (#x8686 . #x5535)	;CJK UNIFIED IDEOGRAPH
                                (#x8687 . #x5536)	;CJK UNIFIED IDEOGRAPH
                                (#x8688 . #x5538)	;CJK UNIFIED IDEOGRAPH
                                (#x8689 . #x5539)	;CJK UNIFIED IDEOGRAPH
                                (#x868A . #x553A)	;CJK UNIFIED IDEOGRAPH
                                (#x868B . #x553B)	;CJK UNIFIED IDEOGRAPH
                                (#x868C . #x553D)	;CJK UNIFIED IDEOGRAPH
                                (#x868D . #x5540)	;CJK UNIFIED IDEOGRAPH
                                (#x868E . #x5542)	;CJK UNIFIED IDEOGRAPH
                                (#x868F . #x5545)	;CJK UNIFIED IDEOGRAPH
                                (#x8690 . #x5547)	;CJK UNIFIED IDEOGRAPH
                                (#x8691 . #x5548)	;CJK UNIFIED IDEOGRAPH
                                (#x8692 . #x554B)	;CJK UNIFIED IDEOGRAPH
                                (#x8693 . #x554C)	;CJK UNIFIED IDEOGRAPH
                                (#x8694 . #x554D)	;CJK UNIFIED IDEOGRAPH
                                (#x8695 . #x554E)	;CJK UNIFIED IDEOGRAPH
                                (#x8696 . #x554F)	;CJK UNIFIED IDEOGRAPH
                                (#x8697 . #x5551)	;CJK UNIFIED IDEOGRAPH
                                (#x8698 . #x5552)	;CJK UNIFIED IDEOGRAPH
                                (#x8699 . #x5553)	;CJK UNIFIED IDEOGRAPH
                                (#x869A . #x5554)	;CJK UNIFIED IDEOGRAPH
                                (#x869B . #x5557)	;CJK UNIFIED IDEOGRAPH
                                (#x869C . #x5558)	;CJK UNIFIED IDEOGRAPH
                                (#x869D . #x5559)	;CJK UNIFIED IDEOGRAPH
                                (#x869E . #x555A)	;CJK UNIFIED IDEOGRAPH
                                (#x869F . #x555B)	;CJK UNIFIED IDEOGRAPH
                                (#x86A0 . #x555D)	;CJK UNIFIED IDEOGRAPH
                                (#x86A1 . #x555E)	;CJK UNIFIED IDEOGRAPH
                                (#x86A2 . #x555F)	;CJK UNIFIED IDEOGRAPH
                                (#x86A3 . #x5560)	;CJK UNIFIED IDEOGRAPH
                                (#x86A4 . #x5562)	;CJK UNIFIED IDEOGRAPH
                                (#x86A5 . #x5563)	;CJK UNIFIED IDEOGRAPH
                                (#x86A6 . #x5568)	;CJK UNIFIED IDEOGRAPH
                                (#x86A7 . #x5569)	;CJK UNIFIED IDEOGRAPH
                                (#x86A8 . #x556B)	;CJK UNIFIED IDEOGRAPH
                                (#x86A9 . #x556F)	;CJK UNIFIED IDEOGRAPH
                                (#x86AA . #x5570)	;CJK UNIFIED IDEOGRAPH
                                (#x86AB . #x5571)	;CJK UNIFIED IDEOGRAPH
                                (#x86AC . #x5572)	;CJK UNIFIED IDEOGRAPH
                                (#x86AD . #x5573)	;CJK UNIFIED IDEOGRAPH
                                (#x86AE . #x5574)	;CJK UNIFIED IDEOGRAPH
                                (#x86AF . #x5579)	;CJK UNIFIED IDEOGRAPH
                                (#x86B0 . #x557A)	;CJK UNIFIED IDEOGRAPH
                                (#x86B1 . #x557D)	;CJK UNIFIED IDEOGRAPH
                                (#x86B2 . #x557F)	;CJK UNIFIED IDEOGRAPH
                                (#x86B3 . #x5585)	;CJK UNIFIED IDEOGRAPH
                                (#x86B4 . #x5586)	;CJK UNIFIED IDEOGRAPH
                                (#x86B5 . #x558C)	;CJK UNIFIED IDEOGRAPH
                                (#x86B6 . #x558D)	;CJK UNIFIED IDEOGRAPH
                                (#x86B7 . #x558E)	;CJK UNIFIED IDEOGRAPH
                                (#x86B8 . #x5590)	;CJK UNIFIED IDEOGRAPH
                                (#x86B9 . #x5592)	;CJK UNIFIED IDEOGRAPH
                                (#x86BA . #x5593)	;CJK UNIFIED IDEOGRAPH
                                (#x86BB . #x5595)	;CJK UNIFIED IDEOGRAPH
                                (#x86BC . #x5596)	;CJK UNIFIED IDEOGRAPH
                                (#x86BD . #x5597)	;CJK UNIFIED IDEOGRAPH
                                (#x86BE . #x559A)	;CJK UNIFIED IDEOGRAPH
                                (#x86BF . #x559B)	;CJK UNIFIED IDEOGRAPH
                                (#x86C0 . #x559E)	;CJK UNIFIED IDEOGRAPH
                                (#x86C1 . #x55A0)	;CJK UNIFIED IDEOGRAPH
                                (#x86C2 . #x55A1)	;CJK UNIFIED IDEOGRAPH
                                (#x86C3 . #x55A2)	;CJK UNIFIED IDEOGRAPH
                                (#x86C4 . #x55A3)	;CJK UNIFIED IDEOGRAPH
                                (#x86C5 . #x55A4)	;CJK UNIFIED IDEOGRAPH
                                (#x86C6 . #x55A5)	;CJK UNIFIED IDEOGRAPH
                                (#x86C7 . #x55A6)	;CJK UNIFIED IDEOGRAPH
                                (#x86C8 . #x55A8)	;CJK UNIFIED IDEOGRAPH
                                (#x86C9 . #x55A9)	;CJK UNIFIED IDEOGRAPH
                                (#x86CA . #x55AA)	;CJK UNIFIED IDEOGRAPH
                                (#x86CB . #x55AB)	;CJK UNIFIED IDEOGRAPH
                                (#x86CC . #x55AC)	;CJK UNIFIED IDEOGRAPH
                                (#x86CD . #x55AD)	;CJK UNIFIED IDEOGRAPH
                                (#x86CE . #x55AE)	;CJK UNIFIED IDEOGRAPH
                                (#x86CF . #x55AF)	;CJK UNIFIED IDEOGRAPH
                                (#x86D0 . #x55B0)	;CJK UNIFIED IDEOGRAPH
                                (#x86D1 . #x55B2)	;CJK UNIFIED IDEOGRAPH
                                (#x86D2 . #x55B4)	;CJK UNIFIED IDEOGRAPH
                                (#x86D3 . #x55B6)	;CJK UNIFIED IDEOGRAPH
                                (#x86D4 . #x55B8)	;CJK UNIFIED IDEOGRAPH
                                (#x86D5 . #x55BA)	;CJK UNIFIED IDEOGRAPH
                                (#x86D6 . #x55BC)	;CJK UNIFIED IDEOGRAPH
                                (#x86D7 . #x55BF)	;CJK UNIFIED IDEOGRAPH
                                (#x86D8 . #x55C0)	;CJK UNIFIED IDEOGRAPH
                                (#x86D9 . #x55C1)	;CJK UNIFIED IDEOGRAPH
                                (#x86DA . #x55C2)	;CJK UNIFIED IDEOGRAPH
                                (#x86DB . #x55C3)	;CJK UNIFIED IDEOGRAPH
                                (#x86DC . #x55C6)	;CJK UNIFIED IDEOGRAPH
                                (#x86DD . #x55C7)	;CJK UNIFIED IDEOGRAPH
                                (#x86DE . #x55C8)	;CJK UNIFIED IDEOGRAPH
                                (#x86DF . #x55CA)	;CJK UNIFIED IDEOGRAPH
                                (#x86E0 . #x55CB)	;CJK UNIFIED IDEOGRAPH
                                (#x86E1 . #x55CE)	;CJK UNIFIED IDEOGRAPH
                                (#x86E2 . #x55CF)	;CJK UNIFIED IDEOGRAPH
                                (#x86E3 . #x55D0)	;CJK UNIFIED IDEOGRAPH
                                (#x86E4 . #x55D5)	;CJK UNIFIED IDEOGRAPH
                                (#x86E5 . #x55D7)	;CJK UNIFIED IDEOGRAPH
                                (#x86E6 . #x55D8)	;CJK UNIFIED IDEOGRAPH
                                (#x86E7 . #x55D9)	;CJK UNIFIED IDEOGRAPH
                                (#x86E8 . #x55DA)	;CJK UNIFIED IDEOGRAPH
                                (#x86E9 . #x55DB)	;CJK UNIFIED IDEOGRAPH
                                (#x86EA . #x55DE)	;CJK UNIFIED IDEOGRAPH
                                (#x86EB . #x55E0)	;CJK UNIFIED IDEOGRAPH
                                (#x86EC . #x55E2)	;CJK UNIFIED IDEOGRAPH
                                (#x86ED . #x55E7)	;CJK UNIFIED IDEOGRAPH
                                (#x86EE . #x55E9)	;CJK UNIFIED IDEOGRAPH
                                (#x86EF . #x55ED)	;CJK UNIFIED IDEOGRAPH
                                (#x86F0 . #x55EE)	;CJK UNIFIED IDEOGRAPH
                                (#x86F1 . #x55F0)	;CJK UNIFIED IDEOGRAPH
                                (#x86F2 . #x55F1)	;CJK UNIFIED IDEOGRAPH
                                (#x86F3 . #x55F4)	;CJK UNIFIED IDEOGRAPH
                                (#x86F4 . #x55F6)	;CJK UNIFIED IDEOGRAPH
                                (#x86F5 . #x55F8)	;CJK UNIFIED IDEOGRAPH
                                (#x86F6 . #x55F9)	;CJK UNIFIED IDEOGRAPH
                                (#x86F7 . #x55FA)	;CJK UNIFIED IDEOGRAPH
                                (#x86F8 . #x55FB)	;CJK UNIFIED IDEOGRAPH
                                (#x86F9 . #x55FC)	;CJK UNIFIED IDEOGRAPH
                                (#x86FA . #x55FF)	;CJK UNIFIED IDEOGRAPH
                                (#x86FB . #x5602)	;CJK UNIFIED IDEOGRAPH
                                (#x86FC . #x5603)	;CJK UNIFIED IDEOGRAPH
                                (#x86FD . #x5604)	;CJK UNIFIED IDEOGRAPH
                                (#x86FE . #x5605)	;CJK UNIFIED IDEOGRAPH
                                (#x8740 . #x5606)	;CJK UNIFIED IDEOGRAPH
                                (#x8741 . #x5607)	;CJK UNIFIED IDEOGRAPH
                                (#x8742 . #x560A)	;CJK UNIFIED IDEOGRAPH
                                (#x8743 . #x560B)	;CJK UNIFIED IDEOGRAPH
                                (#x8744 . #x560D)	;CJK UNIFIED IDEOGRAPH
                                (#x8745 . #x5610)	;CJK UNIFIED IDEOGRAPH
                                (#x8746 . #x5611)	;CJK UNIFIED IDEOGRAPH
                                (#x8747 . #x5612)	;CJK UNIFIED IDEOGRAPH
                                (#x8748 . #x5613)	;CJK UNIFIED IDEOGRAPH
                                (#x8749 . #x5614)	;CJK UNIFIED IDEOGRAPH
                                (#x874A . #x5615)	;CJK UNIFIED IDEOGRAPH
                                (#x874B . #x5616)	;CJK UNIFIED IDEOGRAPH
                                (#x874C . #x5617)	;CJK UNIFIED IDEOGRAPH
                                (#x874D . #x5619)	;CJK UNIFIED IDEOGRAPH
                                (#x874E . #x561A)	;CJK UNIFIED IDEOGRAPH
                                (#x874F . #x561C)	;CJK UNIFIED IDEOGRAPH
                                (#x8750 . #x561D)	;CJK UNIFIED IDEOGRAPH
                                (#x8751 . #x5620)	;CJK UNIFIED IDEOGRAPH
                                (#x8752 . #x5621)	;CJK UNIFIED IDEOGRAPH
                                (#x8753 . #x5622)	;CJK UNIFIED IDEOGRAPH
                                (#x8754 . #x5625)	;CJK UNIFIED IDEOGRAPH
                                (#x8755 . #x5626)	;CJK UNIFIED IDEOGRAPH
                                (#x8756 . #x5628)	;CJK UNIFIED IDEOGRAPH
                                (#x8757 . #x5629)	;CJK UNIFIED IDEOGRAPH
                                (#x8758 . #x562A)	;CJK UNIFIED IDEOGRAPH
                                (#x8759 . #x562B)	;CJK UNIFIED IDEOGRAPH
                                (#x875A . #x562E)	;CJK UNIFIED IDEOGRAPH
                                (#x875B . #x562F)	;CJK UNIFIED IDEOGRAPH
                                (#x875C . #x5630)	;CJK UNIFIED IDEOGRAPH
                                (#x875D . #x5633)	;CJK UNIFIED IDEOGRAPH
                                (#x875E . #x5635)	;CJK UNIFIED IDEOGRAPH
                                (#x875F . #x5637)	;CJK UNIFIED IDEOGRAPH
                                (#x8760 . #x5638)	;CJK UNIFIED IDEOGRAPH
                                (#x8761 . #x563A)	;CJK UNIFIED IDEOGRAPH
                                (#x8762 . #x563C)	;CJK UNIFIED IDEOGRAPH
                                (#x8763 . #x563D)	;CJK UNIFIED IDEOGRAPH
                                (#x8764 . #x563E)	;CJK UNIFIED IDEOGRAPH
                                (#x8765 . #x5640)	;CJK UNIFIED IDEOGRAPH
                                (#x8766 . #x5641)	;CJK UNIFIED IDEOGRAPH
                                (#x8767 . #x5642)	;CJK UNIFIED IDEOGRAPH
                                (#x8768 . #x5643)	;CJK UNIFIED IDEOGRAPH
                                (#x8769 . #x5644)	;CJK UNIFIED IDEOGRAPH
                                (#x876A . #x5645)	;CJK UNIFIED IDEOGRAPH
                                (#x876B . #x5646)	;CJK UNIFIED IDEOGRAPH
                                (#x876C . #x5647)	;CJK UNIFIED IDEOGRAPH
                                (#x876D . #x5648)	;CJK UNIFIED IDEOGRAPH
                                (#x876E . #x5649)	;CJK UNIFIED IDEOGRAPH
                                (#x876F . #x564A)	;CJK UNIFIED IDEOGRAPH
                                (#x8770 . #x564B)	;CJK UNIFIED IDEOGRAPH
                                (#x8771 . #x564F)	;CJK UNIFIED IDEOGRAPH
                                (#x8772 . #x5650)	;CJK UNIFIED IDEOGRAPH
                                (#x8773 . #x5651)	;CJK UNIFIED IDEOGRAPH
                                (#x8774 . #x5652)	;CJK UNIFIED IDEOGRAPH
                                (#x8775 . #x5653)	;CJK UNIFIED IDEOGRAPH
                                (#x8776 . #x5655)	;CJK UNIFIED IDEOGRAPH
                                (#x8777 . #x5656)	;CJK UNIFIED IDEOGRAPH
                                (#x8778 . #x565A)	;CJK UNIFIED IDEOGRAPH
                                (#x8779 . #x565B)	;CJK UNIFIED IDEOGRAPH
                                (#x877A . #x565D)	;CJK UNIFIED IDEOGRAPH
                                (#x877B . #x565E)	;CJK UNIFIED IDEOGRAPH
                                (#x877C . #x565F)	;CJK UNIFIED IDEOGRAPH
                                (#x877D . #x5660)	;CJK UNIFIED IDEOGRAPH
                                (#x877E . #x5661)	;CJK UNIFIED IDEOGRAPH
                                (#x8780 . #x5663)	;CJK UNIFIED IDEOGRAPH
                                (#x8781 . #x5665)	;CJK UNIFIED IDEOGRAPH
                                (#x8782 . #x5666)	;CJK UNIFIED IDEOGRAPH
                                (#x8783 . #x5667)	;CJK UNIFIED IDEOGRAPH
                                (#x8784 . #x566D)	;CJK UNIFIED IDEOGRAPH
                                (#x8785 . #x566E)	;CJK UNIFIED IDEOGRAPH
                                (#x8786 . #x566F)	;CJK UNIFIED IDEOGRAPH
                                (#x8787 . #x5670)	;CJK UNIFIED IDEOGRAPH
                                (#x8788 . #x5672)	;CJK UNIFIED IDEOGRAPH
                                (#x8789 . #x5673)	;CJK UNIFIED IDEOGRAPH
                                (#x878A . #x5674)	;CJK UNIFIED IDEOGRAPH
                                (#x878B . #x5675)	;CJK UNIFIED IDEOGRAPH
                                (#x878C . #x5677)	;CJK UNIFIED IDEOGRAPH
                                (#x878D . #x5678)	;CJK UNIFIED IDEOGRAPH
                                (#x878E . #x5679)	;CJK UNIFIED IDEOGRAPH
                                (#x878F . #x567A)	;CJK UNIFIED IDEOGRAPH
                                (#x8790 . #x567D)	;CJK UNIFIED IDEOGRAPH
                                (#x8791 . #x567E)	;CJK UNIFIED IDEOGRAPH
                                (#x8792 . #x567F)	;CJK UNIFIED IDEOGRAPH
                                (#x8793 . #x5680)	;CJK UNIFIED IDEOGRAPH
                                (#x8794 . #x5681)	;CJK UNIFIED IDEOGRAPH
                                (#x8795 . #x5682)	;CJK UNIFIED IDEOGRAPH
                                (#x8796 . #x5683)	;CJK UNIFIED IDEOGRAPH
                                (#x8797 . #x5684)	;CJK UNIFIED IDEOGRAPH
                                (#x8798 . #x5687)	;CJK UNIFIED IDEOGRAPH
                                (#x8799 . #x5688)	;CJK UNIFIED IDEOGRAPH
                                (#x879A . #x5689)	;CJK UNIFIED IDEOGRAPH
                                (#x879B . #x568A)	;CJK UNIFIED IDEOGRAPH
                                (#x879C . #x568B)	;CJK UNIFIED IDEOGRAPH
                                (#x879D . #x568C)	;CJK UNIFIED IDEOGRAPH
                                (#x879E . #x568D)	;CJK UNIFIED IDEOGRAPH
                                (#x879F . #x5690)	;CJK UNIFIED IDEOGRAPH
                                (#x87A0 . #x5691)	;CJK UNIFIED IDEOGRAPH
                                (#x87A1 . #x5692)	;CJK UNIFIED IDEOGRAPH
                                (#x87A2 . #x5694)	;CJK UNIFIED IDEOGRAPH
                                (#x87A3 . #x5695)	;CJK UNIFIED IDEOGRAPH
                                (#x87A4 . #x5696)	;CJK UNIFIED IDEOGRAPH
                                (#x87A5 . #x5697)	;CJK UNIFIED IDEOGRAPH
                                (#x87A6 . #x5698)	;CJK UNIFIED IDEOGRAPH
                                (#x87A7 . #x5699)	;CJK UNIFIED IDEOGRAPH
                                (#x87A8 . #x569A)	;CJK UNIFIED IDEOGRAPH
                                (#x87A9 . #x569B)	;CJK UNIFIED IDEOGRAPH
                                (#x87AA . #x569C)	;CJK UNIFIED IDEOGRAPH
                                (#x87AB . #x569D)	;CJK UNIFIED IDEOGRAPH
                                (#x87AC . #x569E)	;CJK UNIFIED IDEOGRAPH
                                (#x87AD . #x569F)	;CJK UNIFIED IDEOGRAPH
                                (#x87AE . #x56A0)	;CJK UNIFIED IDEOGRAPH
                                (#x87AF . #x56A1)	;CJK UNIFIED IDEOGRAPH
                                (#x87B0 . #x56A2)	;CJK UNIFIED IDEOGRAPH
                                (#x87B1 . #x56A4)	;CJK UNIFIED IDEOGRAPH
                                (#x87B2 . #x56A5)	;CJK UNIFIED IDEOGRAPH
                                (#x87B3 . #x56A6)	;CJK UNIFIED IDEOGRAPH
                                (#x87B4 . #x56A7)	;CJK UNIFIED IDEOGRAPH
                                (#x87B5 . #x56A8)	;CJK UNIFIED IDEOGRAPH
                                (#x87B6 . #x56A9)	;CJK UNIFIED IDEOGRAPH
                                (#x87B7 . #x56AA)	;CJK UNIFIED IDEOGRAPH
                                (#x87B8 . #x56AB)	;CJK UNIFIED IDEOGRAPH
                                (#x87B9 . #x56AC)	;CJK UNIFIED IDEOGRAPH
                                (#x87BA . #x56AD)	;CJK UNIFIED IDEOGRAPH
                                (#x87BB . #x56AE)	;CJK UNIFIED IDEOGRAPH
                                (#x87BC . #x56B0)	;CJK UNIFIED IDEOGRAPH
                                (#x87BD . #x56B1)	;CJK UNIFIED IDEOGRAPH
                                (#x87BE . #x56B2)	;CJK UNIFIED IDEOGRAPH
                                (#x87BF . #x56B3)	;CJK UNIFIED IDEOGRAPH
                                (#x87C0 . #x56B4)	;CJK UNIFIED IDEOGRAPH
                                (#x87C1 . #x56B5)	;CJK UNIFIED IDEOGRAPH
                                (#x87C2 . #x56B6)	;CJK UNIFIED IDEOGRAPH
                                (#x87C3 . #x56B8)	;CJK UNIFIED IDEOGRAPH
                                (#x87C4 . #x56B9)	;CJK UNIFIED IDEOGRAPH
                                (#x87C5 . #x56BA)	;CJK UNIFIED IDEOGRAPH
                                (#x87C6 . #x56BB)	;CJK UNIFIED IDEOGRAPH
                                (#x87C7 . #x56BD)	;CJK UNIFIED IDEOGRAPH
                                (#x87C8 . #x56BE)	;CJK UNIFIED IDEOGRAPH
                                (#x87C9 . #x56BF)	;CJK UNIFIED IDEOGRAPH
                                (#x87CA . #x56C0)	;CJK UNIFIED IDEOGRAPH
                                (#x87CB . #x56C1)	;CJK UNIFIED IDEOGRAPH
                                (#x87CC . #x56C2)	;CJK UNIFIED IDEOGRAPH
                                (#x87CD . #x56C3)	;CJK UNIFIED IDEOGRAPH
                                (#x87CE . #x56C4)	;CJK UNIFIED IDEOGRAPH
                                (#x87CF . #x56C5)	;CJK UNIFIED IDEOGRAPH
                                (#x87D0 . #x56C6)	;CJK UNIFIED IDEOGRAPH
                                (#x87D1 . #x56C7)	;CJK UNIFIED IDEOGRAPH
                                (#x87D2 . #x56C8)	;CJK UNIFIED IDEOGRAPH
                                (#x87D3 . #x56C9)	;CJK UNIFIED IDEOGRAPH
                                (#x87D4 . #x56CB)	;CJK UNIFIED IDEOGRAPH
                                (#x87D5 . #x56CC)	;CJK UNIFIED IDEOGRAPH
                                (#x87D6 . #x56CD)	;CJK UNIFIED IDEOGRAPH
                                (#x87D7 . #x56CE)	;CJK UNIFIED IDEOGRAPH
                                (#x87D8 . #x56CF)	;CJK UNIFIED IDEOGRAPH
                                (#x87D9 . #x56D0)	;CJK UNIFIED IDEOGRAPH
                                (#x87DA . #x56D1)	;CJK UNIFIED IDEOGRAPH
                                (#x87DB . #x56D2)	;CJK UNIFIED IDEOGRAPH
                                (#x87DC . #x56D3)	;CJK UNIFIED IDEOGRAPH
                                (#x87DD . #x56D5)	;CJK UNIFIED IDEOGRAPH
                                (#x87DE . #x56D6)	;CJK UNIFIED IDEOGRAPH
                                (#x87DF . #x56D8)	;CJK UNIFIED IDEOGRAPH
                                (#x87E0 . #x56D9)	;CJK UNIFIED IDEOGRAPH
                                (#x87E1 . #x56DC)	;CJK UNIFIED IDEOGRAPH
                                (#x87E2 . #x56E3)	;CJK UNIFIED IDEOGRAPH
                                (#x87E3 . #x56E5)	;CJK UNIFIED IDEOGRAPH
                                (#x87E4 . #x56E6)	;CJK UNIFIED IDEOGRAPH
                                (#x87E5 . #x56E7)	;CJK UNIFIED IDEOGRAPH
                                (#x87E6 . #x56E8)	;CJK UNIFIED IDEOGRAPH
                                (#x87E7 . #x56E9)	;CJK UNIFIED IDEOGRAPH
                                (#x87E8 . #x56EA)	;CJK UNIFIED IDEOGRAPH
                                (#x87E9 . #x56EC)	;CJK UNIFIED IDEOGRAPH
                                (#x87EA . #x56EE)	;CJK UNIFIED IDEOGRAPH
                                (#x87EB . #x56EF)	;CJK UNIFIED IDEOGRAPH
                                (#x87EC . #x56F2)	;CJK UNIFIED IDEOGRAPH
                                (#x87ED . #x56F3)	;CJK UNIFIED IDEOGRAPH
                                (#x87EE . #x56F6)	;CJK UNIFIED IDEOGRAPH
                                (#x87EF . #x56F7)	;CJK UNIFIED IDEOGRAPH
                                (#x87F0 . #x56F8)	;CJK UNIFIED IDEOGRAPH
                                (#x87F1 . #x56FB)	;CJK UNIFIED IDEOGRAPH
                                (#x87F2 . #x56FC)	;CJK UNIFIED IDEOGRAPH
                                (#x87F3 . #x5700)	;CJK UNIFIED IDEOGRAPH
                                (#x87F4 . #x5701)	;CJK UNIFIED IDEOGRAPH
                                (#x87F5 . #x5702)	;CJK UNIFIED IDEOGRAPH
                                (#x87F6 . #x5705)	;CJK UNIFIED IDEOGRAPH
                                (#x87F7 . #x5707)	;CJK UNIFIED IDEOGRAPH
                                (#x87F8 . #x570B)	;CJK UNIFIED IDEOGRAPH
                                (#x87F9 . #x570C)	;CJK UNIFIED IDEOGRAPH
                                (#x87FA . #x570D)	;CJK UNIFIED IDEOGRAPH
                                (#x87FB . #x570E)	;CJK UNIFIED IDEOGRAPH
                                (#x87FC . #x570F)	;CJK UNIFIED IDEOGRAPH
                                (#x87FD . #x5710)	;CJK UNIFIED IDEOGRAPH
                                (#x87FE . #x5711)	;CJK UNIFIED IDEOGRAPH
                                (#x8840 . #x5712)	;CJK UNIFIED IDEOGRAPH
                                (#x8841 . #x5713)	;CJK UNIFIED IDEOGRAPH
                                (#x8842 . #x5714)	;CJK UNIFIED IDEOGRAPH
                                (#x8843 . #x5715)	;CJK UNIFIED IDEOGRAPH
                                (#x8844 . #x5716)	;CJK UNIFIED IDEOGRAPH
                                (#x8845 . #x5717)	;CJK UNIFIED IDEOGRAPH
                                (#x8846 . #x5718)	;CJK UNIFIED IDEOGRAPH
                                (#x8847 . #x5719)	;CJK UNIFIED IDEOGRAPH
                                (#x8848 . #x571A)	;CJK UNIFIED IDEOGRAPH
                                (#x8849 . #x571B)	;CJK UNIFIED IDEOGRAPH
                                (#x884A . #x571D)	;CJK UNIFIED IDEOGRAPH
                                (#x884B . #x571E)	;CJK UNIFIED IDEOGRAPH
                                (#x884C . #x5720)	;CJK UNIFIED IDEOGRAPH
                                (#x884D . #x5721)	;CJK UNIFIED IDEOGRAPH
                                (#x884E . #x5722)	;CJK UNIFIED IDEOGRAPH
                                (#x884F . #x5724)	;CJK UNIFIED IDEOGRAPH
                                (#x8850 . #x5725)	;CJK UNIFIED IDEOGRAPH
                                (#x8851 . #x5726)	;CJK UNIFIED IDEOGRAPH
                                (#x8852 . #x5727)	;CJK UNIFIED IDEOGRAPH
                                (#x8853 . #x572B)	;CJK UNIFIED IDEOGRAPH
                                (#x8854 . #x5731)	;CJK UNIFIED IDEOGRAPH
                                (#x8855 . #x5732)	;CJK UNIFIED IDEOGRAPH
                                (#x8856 . #x5734)	;CJK UNIFIED IDEOGRAPH
                                (#x8857 . #x5735)	;CJK UNIFIED IDEOGRAPH
                                (#x8858 . #x5736)	;CJK UNIFIED IDEOGRAPH
                                (#x8859 . #x5737)	;CJK UNIFIED IDEOGRAPH
                                (#x885A . #x5738)	;CJK UNIFIED IDEOGRAPH
                                (#x885B . #x573C)	;CJK UNIFIED IDEOGRAPH
                                (#x885C . #x573D)	;CJK UNIFIED IDEOGRAPH
                                (#x885D . #x573F)	;CJK UNIFIED IDEOGRAPH
                                (#x885E . #x5741)	;CJK UNIFIED IDEOGRAPH
                                (#x885F . #x5743)	;CJK UNIFIED IDEOGRAPH
                                (#x8860 . #x5744)	;CJK UNIFIED IDEOGRAPH
                                (#x8861 . #x5745)	;CJK UNIFIED IDEOGRAPH
                                (#x8862 . #x5746)	;CJK UNIFIED IDEOGRAPH
                                (#x8863 . #x5748)	;CJK UNIFIED IDEOGRAPH
                                (#x8864 . #x5749)	;CJK UNIFIED IDEOGRAPH
                                (#x8865 . #x574B)	;CJK UNIFIED IDEOGRAPH
                                (#x8866 . #x5752)	;CJK UNIFIED IDEOGRAPH
                                (#x8867 . #x5753)	;CJK UNIFIED IDEOGRAPH
                                (#x8868 . #x5754)	;CJK UNIFIED IDEOGRAPH
                                (#x8869 . #x5755)	;CJK UNIFIED IDEOGRAPH
                                (#x886A . #x5756)	;CJK UNIFIED IDEOGRAPH
                                (#x886B . #x5758)	;CJK UNIFIED IDEOGRAPH
                                (#x886C . #x5759)	;CJK UNIFIED IDEOGRAPH
                                (#x886D . #x5762)	;CJK UNIFIED IDEOGRAPH
                                (#x886E . #x5763)	;CJK UNIFIED IDEOGRAPH
                                (#x886F . #x5765)	;CJK UNIFIED IDEOGRAPH
                                (#x8870 . #x5767)	;CJK UNIFIED IDEOGRAPH
                                (#x8871 . #x576C)	;CJK UNIFIED IDEOGRAPH
                                (#x8872 . #x576E)	;CJK UNIFIED IDEOGRAPH
                                (#x8873 . #x5770)	;CJK UNIFIED IDEOGRAPH
                                (#x8874 . #x5771)	;CJK UNIFIED IDEOGRAPH
                                (#x8875 . #x5772)	;CJK UNIFIED IDEOGRAPH
                                (#x8876 . #x5774)	;CJK UNIFIED IDEOGRAPH
                                (#x8877 . #x5775)	;CJK UNIFIED IDEOGRAPH
                                (#x8878 . #x5778)	;CJK UNIFIED IDEOGRAPH
                                (#x8879 . #x5779)	;CJK UNIFIED IDEOGRAPH
                                (#x887A . #x577A)	;CJK UNIFIED IDEOGRAPH
                                (#x887B . #x577D)	;CJK UNIFIED IDEOGRAPH
                                (#x887C . #x577E)	;CJK UNIFIED IDEOGRAPH
                                (#x887D . #x577F)	;CJK UNIFIED IDEOGRAPH
                                (#x887E . #x5780)	;CJK UNIFIED IDEOGRAPH
                                (#x8880 . #x5781)	;CJK UNIFIED IDEOGRAPH
                                (#x8881 . #x5787)	;CJK UNIFIED IDEOGRAPH
                                (#x8882 . #x5788)	;CJK UNIFIED IDEOGRAPH
                                (#x8883 . #x5789)	;CJK UNIFIED IDEOGRAPH
                                (#x8884 . #x578A)	;CJK UNIFIED IDEOGRAPH
                                (#x8885 . #x578D)	;CJK UNIFIED IDEOGRAPH
                                (#x8886 . #x578E)	;CJK UNIFIED IDEOGRAPH
                                (#x8887 . #x578F)	;CJK UNIFIED IDEOGRAPH
                                (#x8888 . #x5790)	;CJK UNIFIED IDEOGRAPH
                                (#x8889 . #x5791)	;CJK UNIFIED IDEOGRAPH
                                (#x888A . #x5794)	;CJK UNIFIED IDEOGRAPH
                                (#x888B . #x5795)	;CJK UNIFIED IDEOGRAPH
                                (#x888C . #x5796)	;CJK UNIFIED IDEOGRAPH
                                (#x888D . #x5797)	;CJK UNIFIED IDEOGRAPH
                                (#x888E . #x5798)	;CJK UNIFIED IDEOGRAPH
                                (#x888F . #x5799)	;CJK UNIFIED IDEOGRAPH
                                (#x8890 . #x579A)	;CJK UNIFIED IDEOGRAPH
                                (#x8891 . #x579C)	;CJK UNIFIED IDEOGRAPH
                                (#x8892 . #x579D)	;CJK UNIFIED IDEOGRAPH
                                (#x8893 . #x579E)	;CJK UNIFIED IDEOGRAPH
                                (#x8894 . #x579F)	;CJK UNIFIED IDEOGRAPH
                                (#x8895 . #x57A5)	;CJK UNIFIED IDEOGRAPH
                                (#x8896 . #x57A8)	;CJK UNIFIED IDEOGRAPH
                                (#x8897 . #x57AA)	;CJK UNIFIED IDEOGRAPH
                                (#x8898 . #x57AC)	;CJK UNIFIED IDEOGRAPH
                                (#x8899 . #x57AF)	;CJK UNIFIED IDEOGRAPH
                                (#x889A . #x57B0)	;CJK UNIFIED IDEOGRAPH
                                (#x889B . #x57B1)	;CJK UNIFIED IDEOGRAPH
                                (#x889C . #x57B3)	;CJK UNIFIED IDEOGRAPH
                                (#x889D . #x57B5)	;CJK UNIFIED IDEOGRAPH
                                (#x889E . #x57B6)	;CJK UNIFIED IDEOGRAPH
                                (#x889F . #x57B7)	;CJK UNIFIED IDEOGRAPH
                                (#x88A0 . #x57B9)	;CJK UNIFIED IDEOGRAPH
                                (#x88A1 . #x57BA)	;CJK UNIFIED IDEOGRAPH
                                (#x88A2 . #x57BB)	;CJK UNIFIED IDEOGRAPH
                                (#x88A3 . #x57BC)	;CJK UNIFIED IDEOGRAPH
                                (#x88A4 . #x57BD)	;CJK UNIFIED IDEOGRAPH
                                (#x88A5 . #x57BE)	;CJK UNIFIED IDEOGRAPH
                                (#x88A6 . #x57BF)	;CJK UNIFIED IDEOGRAPH
                                (#x88A7 . #x57C0)	;CJK UNIFIED IDEOGRAPH
                                (#x88A8 . #x57C1)	;CJK UNIFIED IDEOGRAPH
                                (#x88A9 . #x57C4)	;CJK UNIFIED IDEOGRAPH
                                (#x88AA . #x57C5)	;CJK UNIFIED IDEOGRAPH
                                (#x88AB . #x57C6)	;CJK UNIFIED IDEOGRAPH
                                (#x88AC . #x57C7)	;CJK UNIFIED IDEOGRAPH
                                (#x88AD . #x57C8)	;CJK UNIFIED IDEOGRAPH
                                (#x88AE . #x57C9)	;CJK UNIFIED IDEOGRAPH
                                (#x88AF . #x57CA)	;CJK UNIFIED IDEOGRAPH
                                (#x88B0 . #x57CC)	;CJK UNIFIED IDEOGRAPH
                                (#x88B1 . #x57CD)	;CJK UNIFIED IDEOGRAPH
                                (#x88B2 . #x57D0)	;CJK UNIFIED IDEOGRAPH
                                (#x88B3 . #x57D1)	;CJK UNIFIED IDEOGRAPH
                                (#x88B4 . #x57D3)	;CJK UNIFIED IDEOGRAPH
                                (#x88B5 . #x57D6)	;CJK UNIFIED IDEOGRAPH
                                (#x88B6 . #x57D7)	;CJK UNIFIED IDEOGRAPH
                                (#x88B7 . #x57DB)	;CJK UNIFIED IDEOGRAPH
                                (#x88B8 . #x57DC)	;CJK UNIFIED IDEOGRAPH
                                (#x88B9 . #x57DE)	;CJK UNIFIED IDEOGRAPH
                                (#x88BA . #x57E1)	;CJK UNIFIED IDEOGRAPH
                                (#x88BB . #x57E2)	;CJK UNIFIED IDEOGRAPH
                                (#x88BC . #x57E3)	;CJK UNIFIED IDEOGRAPH
                                (#x88BD . #x57E5)	;CJK UNIFIED IDEOGRAPH
                                (#x88BE . #x57E6)	;CJK UNIFIED IDEOGRAPH
                                (#x88BF . #x57E7)	;CJK UNIFIED IDEOGRAPH
                                (#x88C0 . #x57E8)	;CJK UNIFIED IDEOGRAPH
                                (#x88C1 . #x57E9)	;CJK UNIFIED IDEOGRAPH
                                (#x88C2 . #x57EA)	;CJK UNIFIED IDEOGRAPH
                                (#x88C3 . #x57EB)	;CJK UNIFIED IDEOGRAPH
                                (#x88C4 . #x57EC)	;CJK UNIFIED IDEOGRAPH
                                (#x88C5 . #x57EE)	;CJK UNIFIED IDEOGRAPH
                                (#x88C6 . #x57F0)	;CJK UNIFIED IDEOGRAPH
                                (#x88C7 . #x57F1)	;CJK UNIFIED IDEOGRAPH
                                (#x88C8 . #x57F2)	;CJK UNIFIED IDEOGRAPH
                                (#x88C9 . #x57F3)	;CJK UNIFIED IDEOGRAPH
                                (#x88CA . #x57F5)	;CJK UNIFIED IDEOGRAPH
                                (#x88CB . #x57F6)	;CJK UNIFIED IDEOGRAPH
                                (#x88CC . #x57F7)	;CJK UNIFIED IDEOGRAPH
                                (#x88CD . #x57FB)	;CJK UNIFIED IDEOGRAPH
                                (#x88CE . #x57FC)	;CJK UNIFIED IDEOGRAPH
                                (#x88CF . #x57FE)	;CJK UNIFIED IDEOGRAPH
                                (#x88D0 . #x57FF)	;CJK UNIFIED IDEOGRAPH
                                (#x88D1 . #x5801)	;CJK UNIFIED IDEOGRAPH
                                (#x88D2 . #x5803)	;CJK UNIFIED IDEOGRAPH
                                (#x88D3 . #x5804)	;CJK UNIFIED IDEOGRAPH
                                (#x88D4 . #x5805)	;CJK UNIFIED IDEOGRAPH
                                (#x88D5 . #x5808)	;CJK UNIFIED IDEOGRAPH
                                (#x88D6 . #x5809)	;CJK UNIFIED IDEOGRAPH
                                (#x88D7 . #x580A)	;CJK UNIFIED IDEOGRAPH
                                (#x88D8 . #x580C)	;CJK UNIFIED IDEOGRAPH
                                (#x88D9 . #x580E)	;CJK UNIFIED IDEOGRAPH
                                (#x88DA . #x580F)	;CJK UNIFIED IDEOGRAPH
                                (#x88DB . #x5810)	;CJK UNIFIED IDEOGRAPH
                                (#x88DC . #x5812)	;CJK UNIFIED IDEOGRAPH
                                (#x88DD . #x5813)	;CJK UNIFIED IDEOGRAPH
                                (#x88DE . #x5814)	;CJK UNIFIED IDEOGRAPH
                                (#x88DF . #x5816)	;CJK UNIFIED IDEOGRAPH
                                (#x88E0 . #x5817)	;CJK UNIFIED IDEOGRAPH
                                (#x88E1 . #x5818)	;CJK UNIFIED IDEOGRAPH
                                (#x88E2 . #x581A)	;CJK UNIFIED IDEOGRAPH
                                (#x88E3 . #x581B)	;CJK UNIFIED IDEOGRAPH
                                (#x88E4 . #x581C)	;CJK UNIFIED IDEOGRAPH
                                (#x88E5 . #x581D)	;CJK UNIFIED IDEOGRAPH
                                (#x88E6 . #x581F)	;CJK UNIFIED IDEOGRAPH
                                (#x88E7 . #x5822)	;CJK UNIFIED IDEOGRAPH
                                (#x88E8 . #x5823)	;CJK UNIFIED IDEOGRAPH
                                (#x88E9 . #x5825)	;CJK UNIFIED IDEOGRAPH
                                (#x88EA . #x5826)	;CJK UNIFIED IDEOGRAPH
                                (#x88EB . #x5827)	;CJK UNIFIED IDEOGRAPH
                                (#x88EC . #x5828)	;CJK UNIFIED IDEOGRAPH
                                (#x88ED . #x5829)	;CJK UNIFIED IDEOGRAPH
                                (#x88EE . #x582B)	;CJK UNIFIED IDEOGRAPH
                                (#x88EF . #x582C)	;CJK UNIFIED IDEOGRAPH
                                (#x88F0 . #x582D)	;CJK UNIFIED IDEOGRAPH
                                (#x88F1 . #x582E)	;CJK UNIFIED IDEOGRAPH
                                (#x88F2 . #x582F)	;CJK UNIFIED IDEOGRAPH
                                (#x88F3 . #x5831)	;CJK UNIFIED IDEOGRAPH
                                (#x88F4 . #x5832)	;CJK UNIFIED IDEOGRAPH
                                (#x88F5 . #x5833)	;CJK UNIFIED IDEOGRAPH
                                (#x88F6 . #x5834)	;CJK UNIFIED IDEOGRAPH
                                (#x88F7 . #x5836)	;CJK UNIFIED IDEOGRAPH
                                (#x88F8 . #x5837)	;CJK UNIFIED IDEOGRAPH
                                (#x88F9 . #x5838)	;CJK UNIFIED IDEOGRAPH
                                (#x88FA . #x5839)	;CJK UNIFIED IDEOGRAPH
                                (#x88FB . #x583A)	;CJK UNIFIED IDEOGRAPH
                                (#x88FC . #x583B)	;CJK UNIFIED IDEOGRAPH
                                (#x88FD . #x583C)	;CJK UNIFIED IDEOGRAPH
                                (#x88FE . #x583D)	;CJK UNIFIED IDEOGRAPH
                                (#x8940 . #x583E)	;CJK UNIFIED IDEOGRAPH
                                (#x8941 . #x583F)	;CJK UNIFIED IDEOGRAPH
                                (#x8942 . #x5840)	;CJK UNIFIED IDEOGRAPH
                                (#x8943 . #x5841)	;CJK UNIFIED IDEOGRAPH
                                (#x8944 . #x5842)	;CJK UNIFIED IDEOGRAPH
                                (#x8945 . #x5843)	;CJK UNIFIED IDEOGRAPH
                                (#x8946 . #x5845)	;CJK UNIFIED IDEOGRAPH
                                (#x8947 . #x5846)	;CJK UNIFIED IDEOGRAPH
                                (#x8948 . #x5847)	;CJK UNIFIED IDEOGRAPH
                                (#x8949 . #x5848)	;CJK UNIFIED IDEOGRAPH
                                (#x894A . #x5849)	;CJK UNIFIED IDEOGRAPH
                                (#x894B . #x584A)	;CJK UNIFIED IDEOGRAPH
                                (#x894C . #x584B)	;CJK UNIFIED IDEOGRAPH
                                (#x894D . #x584E)	;CJK UNIFIED IDEOGRAPH
                                (#x894E . #x584F)	;CJK UNIFIED IDEOGRAPH
                                (#x894F . #x5850)	;CJK UNIFIED IDEOGRAPH
                                (#x8950 . #x5852)	;CJK UNIFIED IDEOGRAPH
                                (#x8951 . #x5853)	;CJK UNIFIED IDEOGRAPH
                                (#x8952 . #x5855)	;CJK UNIFIED IDEOGRAPH
                                (#x8953 . #x5856)	;CJK UNIFIED IDEOGRAPH
                                (#x8954 . #x5857)	;CJK UNIFIED IDEOGRAPH
                                (#x8955 . #x5859)	;CJK UNIFIED IDEOGRAPH
                                (#x8956 . #x585A)	;CJK UNIFIED IDEOGRAPH
                                (#x8957 . #x585B)	;CJK UNIFIED IDEOGRAPH
                                (#x8958 . #x585C)	;CJK UNIFIED IDEOGRAPH
                                (#x8959 . #x585D)	;CJK UNIFIED IDEOGRAPH
                                (#x895A . #x585F)	;CJK UNIFIED IDEOGRAPH
                                (#x895B . #x5860)	;CJK UNIFIED IDEOGRAPH
                                (#x895C . #x5861)	;CJK UNIFIED IDEOGRAPH
                                (#x895D . #x5862)	;CJK UNIFIED IDEOGRAPH
                                (#x895E . #x5863)	;CJK UNIFIED IDEOGRAPH
                                (#x895F . #x5864)	;CJK UNIFIED IDEOGRAPH
                                (#x8960 . #x5866)	;CJK UNIFIED IDEOGRAPH
                                (#x8961 . #x5867)	;CJK UNIFIED IDEOGRAPH
                                (#x8962 . #x5868)	;CJK UNIFIED IDEOGRAPH
                                (#x8963 . #x5869)	;CJK UNIFIED IDEOGRAPH
                                (#x8964 . #x586A)	;CJK UNIFIED IDEOGRAPH
                                (#x8965 . #x586D)	;CJK UNIFIED IDEOGRAPH
                                (#x8966 . #x586E)	;CJK UNIFIED IDEOGRAPH
                                (#x8967 . #x586F)	;CJK UNIFIED IDEOGRAPH
                                (#x8968 . #x5870)	;CJK UNIFIED IDEOGRAPH
                                (#x8969 . #x5871)	;CJK UNIFIED IDEOGRAPH
                                (#x896A . #x5872)	;CJK UNIFIED IDEOGRAPH
                                (#x896B . #x5873)	;CJK UNIFIED IDEOGRAPH
                                (#x896C . #x5874)	;CJK UNIFIED IDEOGRAPH
                                (#x896D . #x5875)	;CJK UNIFIED IDEOGRAPH
                                (#x896E . #x5876)	;CJK UNIFIED IDEOGRAPH
                                (#x896F . #x5877)	;CJK UNIFIED IDEOGRAPH
                                (#x8970 . #x5878)	;CJK UNIFIED IDEOGRAPH
                                (#x8971 . #x5879)	;CJK UNIFIED IDEOGRAPH
                                (#x8972 . #x587A)	;CJK UNIFIED IDEOGRAPH
                                (#x8973 . #x587B)	;CJK UNIFIED IDEOGRAPH
                                (#x8974 . #x587C)	;CJK UNIFIED IDEOGRAPH
                                (#x8975 . #x587D)	;CJK UNIFIED IDEOGRAPH
                                (#x8976 . #x587F)	;CJK UNIFIED IDEOGRAPH
                                (#x8977 . #x5882)	;CJK UNIFIED IDEOGRAPH
                                (#x8978 . #x5884)	;CJK UNIFIED IDEOGRAPH
                                (#x8979 . #x5886)	;CJK UNIFIED IDEOGRAPH
                                (#x897A . #x5887)	;CJK UNIFIED IDEOGRAPH
                                (#x897B . #x5888)	;CJK UNIFIED IDEOGRAPH
                                (#x897C . #x588A)	;CJK UNIFIED IDEOGRAPH
                                (#x897D . #x588B)	;CJK UNIFIED IDEOGRAPH
                                (#x897E . #x588C)	;CJK UNIFIED IDEOGRAPH
                                (#x8980 . #x588D)	;CJK UNIFIED IDEOGRAPH
                                (#x8981 . #x588E)	;CJK UNIFIED IDEOGRAPH
                                (#x8982 . #x588F)	;CJK UNIFIED IDEOGRAPH
                                (#x8983 . #x5890)	;CJK UNIFIED IDEOGRAPH
                                (#x8984 . #x5891)	;CJK UNIFIED IDEOGRAPH
                                (#x8985 . #x5894)	;CJK UNIFIED IDEOGRAPH
                                (#x8986 . #x5895)	;CJK UNIFIED IDEOGRAPH
                                (#x8987 . #x5896)	;CJK UNIFIED IDEOGRAPH
                                (#x8988 . #x5897)	;CJK UNIFIED IDEOGRAPH
                                (#x8989 . #x5898)	;CJK UNIFIED IDEOGRAPH
                                (#x898A . #x589B)	;CJK UNIFIED IDEOGRAPH
                                (#x898B . #x589C)	;CJK UNIFIED IDEOGRAPH
                                (#x898C . #x589D)	;CJK UNIFIED IDEOGRAPH
                                (#x898D . #x58A0)	;CJK UNIFIED IDEOGRAPH
                                (#x898E . #x58A1)	;CJK UNIFIED IDEOGRAPH
                                (#x898F . #x58A2)	;CJK UNIFIED IDEOGRAPH
                                (#x8990 . #x58A3)	;CJK UNIFIED IDEOGRAPH
                                (#x8991 . #x58A4)	;CJK UNIFIED IDEOGRAPH
                                (#x8992 . #x58A5)	;CJK UNIFIED IDEOGRAPH
                                (#x8993 . #x58A6)	;CJK UNIFIED IDEOGRAPH
                                (#x8994 . #x58A7)	;CJK UNIFIED IDEOGRAPH
                                (#x8995 . #x58AA)	;CJK UNIFIED IDEOGRAPH
                                (#x8996 . #x58AB)	;CJK UNIFIED IDEOGRAPH
                                (#x8997 . #x58AC)	;CJK UNIFIED IDEOGRAPH
                                (#x8998 . #x58AD)	;CJK UNIFIED IDEOGRAPH
                                (#x8999 . #x58AE)	;CJK UNIFIED IDEOGRAPH
                                (#x899A . #x58AF)	;CJK UNIFIED IDEOGRAPH
                                (#x899B . #x58B0)	;CJK UNIFIED IDEOGRAPH
                                (#x899C . #x58B1)	;CJK UNIFIED IDEOGRAPH
                                (#x899D . #x58B2)	;CJK UNIFIED IDEOGRAPH
                                (#x899E . #x58B3)	;CJK UNIFIED IDEOGRAPH
                                (#x899F . #x58B4)	;CJK UNIFIED IDEOGRAPH
                                (#x89A0 . #x58B5)	;CJK UNIFIED IDEOGRAPH
                                (#x89A1 . #x58B6)	;CJK UNIFIED IDEOGRAPH
                                (#x89A2 . #x58B7)	;CJK UNIFIED IDEOGRAPH
                                (#x89A3 . #x58B8)	;CJK UNIFIED IDEOGRAPH
                                (#x89A4 . #x58B9)	;CJK UNIFIED IDEOGRAPH
                                (#x89A5 . #x58BA)	;CJK UNIFIED IDEOGRAPH
                                (#x89A6 . #x58BB)	;CJK UNIFIED IDEOGRAPH
                                (#x89A7 . #x58BD)	;CJK UNIFIED IDEOGRAPH
                                (#x89A8 . #x58BE)	;CJK UNIFIED IDEOGRAPH
                                (#x89A9 . #x58BF)	;CJK UNIFIED IDEOGRAPH
                                (#x89AA . #x58C0)	;CJK UNIFIED IDEOGRAPH
                                (#x89AB . #x58C2)	;CJK UNIFIED IDEOGRAPH
                                (#x89AC . #x58C3)	;CJK UNIFIED IDEOGRAPH
                                (#x89AD . #x58C4)	;CJK UNIFIED IDEOGRAPH
                                (#x89AE . #x58C6)	;CJK UNIFIED IDEOGRAPH
                                (#x89AF . #x58C7)	;CJK UNIFIED IDEOGRAPH
                                (#x89B0 . #x58C8)	;CJK UNIFIED IDEOGRAPH
                                (#x89B1 . #x58C9)	;CJK UNIFIED IDEOGRAPH
                                (#x89B2 . #x58CA)	;CJK UNIFIED IDEOGRAPH
                                (#x89B3 . #x58CB)	;CJK UNIFIED IDEOGRAPH
                                (#x89B4 . #x58CC)	;CJK UNIFIED IDEOGRAPH
                                (#x89B5 . #x58CD)	;CJK UNIFIED IDEOGRAPH
                                (#x89B6 . #x58CE)	;CJK UNIFIED IDEOGRAPH
                                (#x89B7 . #x58CF)	;CJK UNIFIED IDEOGRAPH
                                (#x89B8 . #x58D0)	;CJK UNIFIED IDEOGRAPH
                                (#x89B9 . #x58D2)	;CJK UNIFIED IDEOGRAPH
                                (#x89BA . #x58D3)	;CJK UNIFIED IDEOGRAPH
                                (#x89BB . #x58D4)	;CJK UNIFIED IDEOGRAPH
                                (#x89BC . #x58D6)	;CJK UNIFIED IDEOGRAPH
                                (#x89BD . #x58D7)	;CJK UNIFIED IDEOGRAPH
                                (#x89BE . #x58D8)	;CJK UNIFIED IDEOGRAPH
                                (#x89BF . #x58D9)	;CJK UNIFIED IDEOGRAPH
                                (#x89C0 . #x58DA)	;CJK UNIFIED IDEOGRAPH
                                (#x89C1 . #x58DB)	;CJK UNIFIED IDEOGRAPH
                                (#x89C2 . #x58DC)	;CJK UNIFIED IDEOGRAPH
                                (#x89C3 . #x58DD)	;CJK UNIFIED IDEOGRAPH
                                (#x89C4 . #x58DE)	;CJK UNIFIED IDEOGRAPH
                                (#x89C5 . #x58DF)	;CJK UNIFIED IDEOGRAPH
                                (#x89C6 . #x58E0)	;CJK UNIFIED IDEOGRAPH
                                (#x89C7 . #x58E1)	;CJK UNIFIED IDEOGRAPH
                                (#x89C8 . #x58E2)	;CJK UNIFIED IDEOGRAPH
                                (#x89C9 . #x58E3)	;CJK UNIFIED IDEOGRAPH
                                (#x89CA . #x58E5)	;CJK UNIFIED IDEOGRAPH
                                (#x89CB . #x58E6)	;CJK UNIFIED IDEOGRAPH
                                (#x89CC . #x58E7)	;CJK UNIFIED IDEOGRAPH
                                (#x89CD . #x58E8)	;CJK UNIFIED IDEOGRAPH
                                (#x89CE . #x58E9)	;CJK UNIFIED IDEOGRAPH
                                (#x89CF . #x58EA)	;CJK UNIFIED IDEOGRAPH
                                (#x89D0 . #x58ED)	;CJK UNIFIED IDEOGRAPH
                                (#x89D1 . #x58EF)	;CJK UNIFIED IDEOGRAPH
                                (#x89D2 . #x58F1)	;CJK UNIFIED IDEOGRAPH
                                (#x89D3 . #x58F2)	;CJK UNIFIED IDEOGRAPH
                                (#x89D4 . #x58F4)	;CJK UNIFIED IDEOGRAPH
                                (#x89D5 . #x58F5)	;CJK UNIFIED IDEOGRAPH
                                (#x89D6 . #x58F7)	;CJK UNIFIED IDEOGRAPH
                                (#x89D7 . #x58F8)	;CJK UNIFIED IDEOGRAPH
                                (#x89D8 . #x58FA)	;CJK UNIFIED IDEOGRAPH
                                (#x89D9 . #x58FB)	;CJK UNIFIED IDEOGRAPH
                                (#x89DA . #x58FC)	;CJK UNIFIED IDEOGRAPH
                                (#x89DB . #x58FD)	;CJK UNIFIED IDEOGRAPH
                                (#x89DC . #x58FE)	;CJK UNIFIED IDEOGRAPH
                                (#x89DD . #x58FF)	;CJK UNIFIED IDEOGRAPH
                                (#x89DE . #x5900)	;CJK UNIFIED IDEOGRAPH
                                (#x89DF . #x5901)	;CJK UNIFIED IDEOGRAPH
                                (#x89E0 . #x5903)	;CJK UNIFIED IDEOGRAPH
                                (#x89E1 . #x5905)	;CJK UNIFIED IDEOGRAPH
                                (#x89E2 . #x5906)	;CJK UNIFIED IDEOGRAPH
                                (#x89E3 . #x5908)	;CJK UNIFIED IDEOGRAPH
                                (#x89E4 . #x5909)	;CJK UNIFIED IDEOGRAPH
                                (#x89E5 . #x590A)	;CJK UNIFIED IDEOGRAPH
                                (#x89E6 . #x590B)	;CJK UNIFIED IDEOGRAPH
                                (#x89E7 . #x590C)	;CJK UNIFIED IDEOGRAPH
                                (#x89E8 . #x590E)	;CJK UNIFIED IDEOGRAPH
                                (#x89E9 . #x5910)	;CJK UNIFIED IDEOGRAPH
                                (#x89EA . #x5911)	;CJK UNIFIED IDEOGRAPH
                                (#x89EB . #x5912)	;CJK UNIFIED IDEOGRAPH
                                (#x89EC . #x5913)	;CJK UNIFIED IDEOGRAPH
                                (#x89ED . #x5917)	;CJK UNIFIED IDEOGRAPH
                                (#x89EE . #x5918)	;CJK UNIFIED IDEOGRAPH
                                (#x89EF . #x591B)	;CJK UNIFIED IDEOGRAPH
                                (#x89F0 . #x591D)	;CJK UNIFIED IDEOGRAPH
                                (#x89F1 . #x591E)	;CJK UNIFIED IDEOGRAPH
                                (#x89F2 . #x5920)	;CJK UNIFIED IDEOGRAPH
                                (#x89F3 . #x5921)	;CJK UNIFIED IDEOGRAPH
                                (#x89F4 . #x5922)	;CJK UNIFIED IDEOGRAPH
                                (#x89F5 . #x5923)	;CJK UNIFIED IDEOGRAPH
                                (#x89F6 . #x5926)	;CJK UNIFIED IDEOGRAPH
                                (#x89F7 . #x5928)	;CJK UNIFIED IDEOGRAPH
                                (#x89F8 . #x592C)	;CJK UNIFIED IDEOGRAPH
                                (#x89F9 . #x5930)	;CJK UNIFIED IDEOGRAPH
                                (#x89FA . #x5932)	;CJK UNIFIED IDEOGRAPH
                                (#x89FB . #x5933)	;CJK UNIFIED IDEOGRAPH
                                (#x89FC . #x5935)	;CJK UNIFIED IDEOGRAPH
                                (#x89FD . #x5936)	;CJK UNIFIED IDEOGRAPH
                                (#x89FE . #x593B)	;CJK UNIFIED IDEOGRAPH
                                (#x8A40 . #x593D)	;CJK UNIFIED IDEOGRAPH
                                (#x8A41 . #x593E)	;CJK UNIFIED IDEOGRAPH
                                (#x8A42 . #x593F)	;CJK UNIFIED IDEOGRAPH
                                (#x8A43 . #x5940)	;CJK UNIFIED IDEOGRAPH
                                (#x8A44 . #x5943)	;CJK UNIFIED IDEOGRAPH
                                (#x8A45 . #x5945)	;CJK UNIFIED IDEOGRAPH
                                (#x8A46 . #x5946)	;CJK UNIFIED IDEOGRAPH
                                (#x8A47 . #x594A)	;CJK UNIFIED IDEOGRAPH
                                (#x8A48 . #x594C)	;CJK UNIFIED IDEOGRAPH
                                (#x8A49 . #x594D)	;CJK UNIFIED IDEOGRAPH
                                (#x8A4A . #x5950)	;CJK UNIFIED IDEOGRAPH
                                (#x8A4B . #x5952)	;CJK UNIFIED IDEOGRAPH
                                (#x8A4C . #x5953)	;CJK UNIFIED IDEOGRAPH
                                (#x8A4D . #x5959)	;CJK UNIFIED IDEOGRAPH
                                (#x8A4E . #x595B)	;CJK UNIFIED IDEOGRAPH
                                (#x8A4F . #x595C)	;CJK UNIFIED IDEOGRAPH
                                (#x8A50 . #x595D)	;CJK UNIFIED IDEOGRAPH
                                (#x8A51 . #x595E)	;CJK UNIFIED IDEOGRAPH
                                (#x8A52 . #x595F)	;CJK UNIFIED IDEOGRAPH
                                (#x8A53 . #x5961)	;CJK UNIFIED IDEOGRAPH
                                (#x8A54 . #x5963)	;CJK UNIFIED IDEOGRAPH
                                (#x8A55 . #x5964)	;CJK UNIFIED IDEOGRAPH
                                (#x8A56 . #x5966)	;CJK UNIFIED IDEOGRAPH
                                (#x8A57 . #x5967)	;CJK UNIFIED IDEOGRAPH
                                (#x8A58 . #x5968)	;CJK UNIFIED IDEOGRAPH
                                (#x8A59 . #x5969)	;CJK UNIFIED IDEOGRAPH
                                (#x8A5A . #x596A)	;CJK UNIFIED IDEOGRAPH
                                (#x8A5B . #x596B)	;CJK UNIFIED IDEOGRAPH
                                (#x8A5C . #x596C)	;CJK UNIFIED IDEOGRAPH
                                (#x8A5D . #x596D)	;CJK UNIFIED IDEOGRAPH
                                (#x8A5E . #x596E)	;CJK UNIFIED IDEOGRAPH
                                (#x8A5F . #x596F)	;CJK UNIFIED IDEOGRAPH
                                (#x8A60 . #x5970)	;CJK UNIFIED IDEOGRAPH
                                (#x8A61 . #x5971)	;CJK UNIFIED IDEOGRAPH
                                (#x8A62 . #x5972)	;CJK UNIFIED IDEOGRAPH
                                (#x8A63 . #x5975)	;CJK UNIFIED IDEOGRAPH
                                (#x8A64 . #x5977)	;CJK UNIFIED IDEOGRAPH
                                (#x8A65 . #x597A)	;CJK UNIFIED IDEOGRAPH
                                (#x8A66 . #x597B)	;CJK UNIFIED IDEOGRAPH
                                (#x8A67 . #x597C)	;CJK UNIFIED IDEOGRAPH
                                (#x8A68 . #x597E)	;CJK UNIFIED IDEOGRAPH
                                (#x8A69 . #x597F)	;CJK UNIFIED IDEOGRAPH
                                (#x8A6A . #x5980)	;CJK UNIFIED IDEOGRAPH
                                (#x8A6B . #x5985)	;CJK UNIFIED IDEOGRAPH
                                (#x8A6C . #x5989)	;CJK UNIFIED IDEOGRAPH
                                (#x8A6D . #x598B)	;CJK UNIFIED IDEOGRAPH
                                (#x8A6E . #x598C)	;CJK UNIFIED IDEOGRAPH
                                (#x8A6F . #x598E)	;CJK UNIFIED IDEOGRAPH
                                (#x8A70 . #x598F)	;CJK UNIFIED IDEOGRAPH
                                (#x8A71 . #x5990)	;CJK UNIFIED IDEOGRAPH
                                (#x8A72 . #x5991)	;CJK UNIFIED IDEOGRAPH
                                (#x8A73 . #x5994)	;CJK UNIFIED IDEOGRAPH
                                (#x8A74 . #x5995)	;CJK UNIFIED IDEOGRAPH
                                (#x8A75 . #x5998)	;CJK UNIFIED IDEOGRAPH
                                (#x8A76 . #x599A)	;CJK UNIFIED IDEOGRAPH
                                (#x8A77 . #x599B)	;CJK UNIFIED IDEOGRAPH
                                (#x8A78 . #x599C)	;CJK UNIFIED IDEOGRAPH
                                (#x8A79 . #x599D)	;CJK UNIFIED IDEOGRAPH
                                (#x8A7A . #x599F)	;CJK UNIFIED IDEOGRAPH
                                (#x8A7B . #x59A0)	;CJK UNIFIED IDEOGRAPH
                                (#x8A7C . #x59A1)	;CJK UNIFIED IDEOGRAPH
                                (#x8A7D . #x59A2)	;CJK UNIFIED IDEOGRAPH
                                (#x8A7E . #x59A6)	;CJK UNIFIED IDEOGRAPH
                                (#x8A80 . #x59A7)	;CJK UNIFIED IDEOGRAPH
                                (#x8A81 . #x59AC)	;CJK UNIFIED IDEOGRAPH
                                (#x8A82 . #x59AD)	;CJK UNIFIED IDEOGRAPH
                                (#x8A83 . #x59B0)	;CJK UNIFIED IDEOGRAPH
                                (#x8A84 . #x59B1)	;CJK UNIFIED IDEOGRAPH
                                (#x8A85 . #x59B3)	;CJK UNIFIED IDEOGRAPH
                                (#x8A86 . #x59B4)	;CJK UNIFIED IDEOGRAPH
                                (#x8A87 . #x59B5)	;CJK UNIFIED IDEOGRAPH
                                (#x8A88 . #x59B6)	;CJK UNIFIED IDEOGRAPH
                                (#x8A89 . #x59B7)	;CJK UNIFIED IDEOGRAPH
                                (#x8A8A . #x59B8)	;CJK UNIFIED IDEOGRAPH
                                (#x8A8B . #x59BA)	;CJK UNIFIED IDEOGRAPH
                                (#x8A8C . #x59BC)	;CJK UNIFIED IDEOGRAPH
                                (#x8A8D . #x59BD)	;CJK UNIFIED IDEOGRAPH
                                (#x8A8E . #x59BF)	;CJK UNIFIED IDEOGRAPH
                                (#x8A8F . #x59C0)	;CJK UNIFIED IDEOGRAPH
                                (#x8A90 . #x59C1)	;CJK UNIFIED IDEOGRAPH
                                (#x8A91 . #x59C2)	;CJK UNIFIED IDEOGRAPH
                                (#x8A92 . #x59C3)	;CJK UNIFIED IDEOGRAPH
                                (#x8A93 . #x59C4)	;CJK UNIFIED IDEOGRAPH
                                (#x8A94 . #x59C5)	;CJK UNIFIED IDEOGRAPH
                                (#x8A95 . #x59C7)	;CJK UNIFIED IDEOGRAPH
                                (#x8A96 . #x59C8)	;CJK UNIFIED IDEOGRAPH
                                (#x8A97 . #x59C9)	;CJK UNIFIED IDEOGRAPH
                                (#x8A98 . #x59CC)	;CJK UNIFIED IDEOGRAPH
                                (#x8A99 . #x59CD)	;CJK UNIFIED IDEOGRAPH
                                (#x8A9A . #x59CE)	;CJK UNIFIED IDEOGRAPH
                                (#x8A9B . #x59CF)	;CJK UNIFIED IDEOGRAPH
                                (#x8A9C . #x59D5)	;CJK UNIFIED IDEOGRAPH
                                (#x8A9D . #x59D6)	;CJK UNIFIED IDEOGRAPH
                                (#x8A9E . #x59D9)	;CJK UNIFIED IDEOGRAPH
                                (#x8A9F . #x59DB)	;CJK UNIFIED IDEOGRAPH
                                (#x8AA0 . #x59DE)	;CJK UNIFIED IDEOGRAPH
                                (#x8AA1 . #x59DF)	;CJK UNIFIED IDEOGRAPH
                                (#x8AA2 . #x59E0)	;CJK UNIFIED IDEOGRAPH
                                (#x8AA3 . #x59E1)	;CJK UNIFIED IDEOGRAPH
                                (#x8AA4 . #x59E2)	;CJK UNIFIED IDEOGRAPH
                                (#x8AA5 . #x59E4)	;CJK UNIFIED IDEOGRAPH
                                (#x8AA6 . #x59E6)	;CJK UNIFIED IDEOGRAPH
                                (#x8AA7 . #x59E7)	;CJK UNIFIED IDEOGRAPH
                                (#x8AA8 . #x59E9)	;CJK UNIFIED IDEOGRAPH
                                (#x8AA9 . #x59EA)	;CJK UNIFIED IDEOGRAPH
                                (#x8AAA . #x59EB)	;CJK UNIFIED IDEOGRAPH
                                (#x8AAB . #x59ED)	;CJK UNIFIED IDEOGRAPH
                                (#x8AAC . #x59EE)	;CJK UNIFIED IDEOGRAPH
                                (#x8AAD . #x59EF)	;CJK UNIFIED IDEOGRAPH
                                (#x8AAE . #x59F0)	;CJK UNIFIED IDEOGRAPH
                                (#x8AAF . #x59F1)	;CJK UNIFIED IDEOGRAPH
                                (#x8AB0 . #x59F2)	;CJK UNIFIED IDEOGRAPH
                                (#x8AB1 . #x59F3)	;CJK UNIFIED IDEOGRAPH
                                (#x8AB2 . #x59F4)	;CJK UNIFIED IDEOGRAPH
                                (#x8AB3 . #x59F5)	;CJK UNIFIED IDEOGRAPH
                                (#x8AB4 . #x59F6)	;CJK UNIFIED IDEOGRAPH
                                (#x8AB5 . #x59F7)	;CJK UNIFIED IDEOGRAPH
                                (#x8AB6 . #x59F8)	;CJK UNIFIED IDEOGRAPH
                                (#x8AB7 . #x59FA)	;CJK UNIFIED IDEOGRAPH
                                (#x8AB8 . #x59FC)	;CJK UNIFIED IDEOGRAPH
                                (#x8AB9 . #x59FD)	;CJK UNIFIED IDEOGRAPH
                                (#x8ABA . #x59FE)	;CJK UNIFIED IDEOGRAPH
                                (#x8ABB . #x5A00)	;CJK UNIFIED IDEOGRAPH
                                (#x8ABC . #x5A02)	;CJK UNIFIED IDEOGRAPH
                                (#x8ABD . #x5A0A)	;CJK UNIFIED IDEOGRAPH
                                (#x8ABE . #x5A0B)	;CJK UNIFIED IDEOGRAPH
                                (#x8ABF . #x5A0D)	;CJK UNIFIED IDEOGRAPH
                                (#x8AC0 . #x5A0E)	;CJK UNIFIED IDEOGRAPH
                                (#x8AC1 . #x5A0F)	;CJK UNIFIED IDEOGRAPH
                                (#x8AC2 . #x5A10)	;CJK UNIFIED IDEOGRAPH
                                (#x8AC3 . #x5A12)	;CJK UNIFIED IDEOGRAPH
                                (#x8AC4 . #x5A14)	;CJK UNIFIED IDEOGRAPH
                                (#x8AC5 . #x5A15)	;CJK UNIFIED IDEOGRAPH
                                (#x8AC6 . #x5A16)	;CJK UNIFIED IDEOGRAPH
                                (#x8AC7 . #x5A17)	;CJK UNIFIED IDEOGRAPH
                                (#x8AC8 . #x5A19)	;CJK UNIFIED IDEOGRAPH
                                (#x8AC9 . #x5A1A)	;CJK UNIFIED IDEOGRAPH
                                (#x8ACA . #x5A1B)	;CJK UNIFIED IDEOGRAPH
                                (#x8ACB . #x5A1D)	;CJK UNIFIED IDEOGRAPH
                                (#x8ACC . #x5A1E)	;CJK UNIFIED IDEOGRAPH
                                (#x8ACD . #x5A21)	;CJK UNIFIED IDEOGRAPH
                                (#x8ACE . #x5A22)	;CJK UNIFIED IDEOGRAPH
                                (#x8ACF . #x5A24)	;CJK UNIFIED IDEOGRAPH
                                (#x8AD0 . #x5A26)	;CJK UNIFIED IDEOGRAPH
                                (#x8AD1 . #x5A27)	;CJK UNIFIED IDEOGRAPH
                                (#x8AD2 . #x5A28)	;CJK UNIFIED IDEOGRAPH
                                (#x8AD3 . #x5A2A)	;CJK UNIFIED IDEOGRAPH
                                (#x8AD4 . #x5A2B)	;CJK UNIFIED IDEOGRAPH
                                (#x8AD5 . #x5A2C)	;CJK UNIFIED IDEOGRAPH
                                (#x8AD6 . #x5A2D)	;CJK UNIFIED IDEOGRAPH
                                (#x8AD7 . #x5A2E)	;CJK UNIFIED IDEOGRAPH
                                (#x8AD8 . #x5A2F)	;CJK UNIFIED IDEOGRAPH
                                (#x8AD9 . #x5A30)	;CJK UNIFIED IDEOGRAPH
                                (#x8ADA . #x5A33)	;CJK UNIFIED IDEOGRAPH
                                (#x8ADB . #x5A35)	;CJK UNIFIED IDEOGRAPH
                                (#x8ADC . #x5A37)	;CJK UNIFIED IDEOGRAPH
                                (#x8ADD . #x5A38)	;CJK UNIFIED IDEOGRAPH
                                (#x8ADE . #x5A39)	;CJK UNIFIED IDEOGRAPH
                                (#x8ADF . #x5A3A)	;CJK UNIFIED IDEOGRAPH
                                (#x8AE0 . #x5A3B)	;CJK UNIFIED IDEOGRAPH
                                (#x8AE1 . #x5A3D)	;CJK UNIFIED IDEOGRAPH
                                (#x8AE2 . #x5A3E)	;CJK UNIFIED IDEOGRAPH
                                (#x8AE3 . #x5A3F)	;CJK UNIFIED IDEOGRAPH
                                (#x8AE4 . #x5A41)	;CJK UNIFIED IDEOGRAPH
                                (#x8AE5 . #x5A42)	;CJK UNIFIED IDEOGRAPH
                                (#x8AE6 . #x5A43)	;CJK UNIFIED IDEOGRAPH
                                (#x8AE7 . #x5A44)	;CJK UNIFIED IDEOGRAPH
                                (#x8AE8 . #x5A45)	;CJK UNIFIED IDEOGRAPH
                                (#x8AE9 . #x5A47)	;CJK UNIFIED IDEOGRAPH
                                (#x8AEA . #x5A48)	;CJK UNIFIED IDEOGRAPH
                                (#x8AEB . #x5A4B)	;CJK UNIFIED IDEOGRAPH
                                (#x8AEC . #x5A4C)	;CJK UNIFIED IDEOGRAPH
                                (#x8AED . #x5A4D)	;CJK UNIFIED IDEOGRAPH
                                (#x8AEE . #x5A4E)	;CJK UNIFIED IDEOGRAPH
                                (#x8AEF . #x5A4F)	;CJK UNIFIED IDEOGRAPH
                                (#x8AF0 . #x5A50)	;CJK UNIFIED IDEOGRAPH
                                (#x8AF1 . #x5A51)	;CJK UNIFIED IDEOGRAPH
                                (#x8AF2 . #x5A52)	;CJK UNIFIED IDEOGRAPH
                                (#x8AF3 . #x5A53)	;CJK UNIFIED IDEOGRAPH
                                (#x8AF4 . #x5A54)	;CJK UNIFIED IDEOGRAPH
                                (#x8AF5 . #x5A56)	;CJK UNIFIED IDEOGRAPH
                                (#x8AF6 . #x5A57)	;CJK UNIFIED IDEOGRAPH
                                (#x8AF7 . #x5A58)	;CJK UNIFIED IDEOGRAPH
                                (#x8AF8 . #x5A59)	;CJK UNIFIED IDEOGRAPH
                                (#x8AF9 . #x5A5B)	;CJK UNIFIED IDEOGRAPH
                                (#x8AFA . #x5A5C)	;CJK UNIFIED IDEOGRAPH
                                (#x8AFB . #x5A5D)	;CJK UNIFIED IDEOGRAPH
                                (#x8AFC . #x5A5E)	;CJK UNIFIED IDEOGRAPH
                                (#x8AFD . #x5A5F)	;CJK UNIFIED IDEOGRAPH
                                (#x8AFE . #x5A60)	;CJK UNIFIED IDEOGRAPH
                                (#x8B40 . #x5A61)	;CJK UNIFIED IDEOGRAPH
                                (#x8B41 . #x5A63)	;CJK UNIFIED IDEOGRAPH
                                (#x8B42 . #x5A64)	;CJK UNIFIED IDEOGRAPH
                                (#x8B43 . #x5A65)	;CJK UNIFIED IDEOGRAPH
                                (#x8B44 . #x5A66)	;CJK UNIFIED IDEOGRAPH
                                (#x8B45 . #x5A68)	;CJK UNIFIED IDEOGRAPH
                                (#x8B46 . #x5A69)	;CJK UNIFIED IDEOGRAPH
                                (#x8B47 . #x5A6B)	;CJK UNIFIED IDEOGRAPH
                                (#x8B48 . #x5A6C)	;CJK UNIFIED IDEOGRAPH
                                (#x8B49 . #x5A6D)	;CJK UNIFIED IDEOGRAPH
                                (#x8B4A . #x5A6E)	;CJK UNIFIED IDEOGRAPH
                                (#x8B4B . #x5A6F)	;CJK UNIFIED IDEOGRAPH
                                (#x8B4C . #x5A70)	;CJK UNIFIED IDEOGRAPH
                                (#x8B4D . #x5A71)	;CJK UNIFIED IDEOGRAPH
                                (#x8B4E . #x5A72)	;CJK UNIFIED IDEOGRAPH
                                (#x8B4F . #x5A73)	;CJK UNIFIED IDEOGRAPH
                                (#x8B50 . #x5A78)	;CJK UNIFIED IDEOGRAPH
                                (#x8B51 . #x5A79)	;CJK UNIFIED IDEOGRAPH
                                (#x8B52 . #x5A7B)	;CJK UNIFIED IDEOGRAPH
                                (#x8B53 . #x5A7C)	;CJK UNIFIED IDEOGRAPH
                                (#x8B54 . #x5A7D)	;CJK UNIFIED IDEOGRAPH
                                (#x8B55 . #x5A7E)	;CJK UNIFIED IDEOGRAPH
                                (#x8B56 . #x5A80)	;CJK UNIFIED IDEOGRAPH
                                (#x8B57 . #x5A81)	;CJK UNIFIED IDEOGRAPH
                                (#x8B58 . #x5A82)	;CJK UNIFIED IDEOGRAPH
                                (#x8B59 . #x5A83)	;CJK UNIFIED IDEOGRAPH
                                (#x8B5A . #x5A84)	;CJK UNIFIED IDEOGRAPH
                                (#x8B5B . #x5A85)	;CJK UNIFIED IDEOGRAPH
                                (#x8B5C . #x5A86)	;CJK UNIFIED IDEOGRAPH
                                (#x8B5D . #x5A87)	;CJK UNIFIED IDEOGRAPH
                                (#x8B5E . #x5A88)	;CJK UNIFIED IDEOGRAPH
                                (#x8B5F . #x5A89)	;CJK UNIFIED IDEOGRAPH
                                (#x8B60 . #x5A8A)	;CJK UNIFIED IDEOGRAPH
                                (#x8B61 . #x5A8B)	;CJK UNIFIED IDEOGRAPH
                                (#x8B62 . #x5A8C)	;CJK UNIFIED IDEOGRAPH
                                (#x8B63 . #x5A8D)	;CJK UNIFIED IDEOGRAPH
                                (#x8B64 . #x5A8E)	;CJK UNIFIED IDEOGRAPH
                                (#x8B65 . #x5A8F)	;CJK UNIFIED IDEOGRAPH
                                (#x8B66 . #x5A90)	;CJK UNIFIED IDEOGRAPH
                                (#x8B67 . #x5A91)	;CJK UNIFIED IDEOGRAPH
                                (#x8B68 . #x5A93)	;CJK UNIFIED IDEOGRAPH
                                (#x8B69 . #x5A94)	;CJK UNIFIED IDEOGRAPH
                                (#x8B6A . #x5A95)	;CJK UNIFIED IDEOGRAPH
                                (#x8B6B . #x5A96)	;CJK UNIFIED IDEOGRAPH
                                (#x8B6C . #x5A97)	;CJK UNIFIED IDEOGRAPH
                                (#x8B6D . #x5A98)	;CJK UNIFIED IDEOGRAPH
                                (#x8B6E . #x5A99)	;CJK UNIFIED IDEOGRAPH
                                (#x8B6F . #x5A9C)	;CJK UNIFIED IDEOGRAPH
                                (#x8B70 . #x5A9D)	;CJK UNIFIED IDEOGRAPH
                                (#x8B71 . #x5A9E)	;CJK UNIFIED IDEOGRAPH
                                (#x8B72 . #x5A9F)	;CJK UNIFIED IDEOGRAPH
                                (#x8B73 . #x5AA0)	;CJK UNIFIED IDEOGRAPH
                                (#x8B74 . #x5AA1)	;CJK UNIFIED IDEOGRAPH
                                (#x8B75 . #x5AA2)	;CJK UNIFIED IDEOGRAPH
                                (#x8B76 . #x5AA3)	;CJK UNIFIED IDEOGRAPH
                                (#x8B77 . #x5AA4)	;CJK UNIFIED IDEOGRAPH
                                (#x8B78 . #x5AA5)	;CJK UNIFIED IDEOGRAPH
                                (#x8B79 . #x5AA6)	;CJK UNIFIED IDEOGRAPH
                                (#x8B7A . #x5AA7)	;CJK UNIFIED IDEOGRAPH
                                (#x8B7B . #x5AA8)	;CJK UNIFIED IDEOGRAPH
                                (#x8B7C . #x5AA9)	;CJK UNIFIED IDEOGRAPH
                                (#x8B7D . #x5AAB)	;CJK UNIFIED IDEOGRAPH
                                (#x8B7E . #x5AAC)	;CJK UNIFIED IDEOGRAPH
                                (#x8B80 . #x5AAD)	;CJK UNIFIED IDEOGRAPH
                                (#x8B81 . #x5AAE)	;CJK UNIFIED IDEOGRAPH
                                (#x8B82 . #x5AAF)	;CJK UNIFIED IDEOGRAPH
                                (#x8B83 . #x5AB0)	;CJK UNIFIED IDEOGRAPH
                                (#x8B84 . #x5AB1)	;CJK UNIFIED IDEOGRAPH
                                (#x8B85 . #x5AB4)	;CJK UNIFIED IDEOGRAPH
                                (#x8B86 . #x5AB6)	;CJK UNIFIED IDEOGRAPH
                                (#x8B87 . #x5AB7)	;CJK UNIFIED IDEOGRAPH
                                (#x8B88 . #x5AB9)	;CJK UNIFIED IDEOGRAPH
                                (#x8B89 . #x5ABA)	;CJK UNIFIED IDEOGRAPH
                                (#x8B8A . #x5ABB)	;CJK UNIFIED IDEOGRAPH
                                (#x8B8B . #x5ABC)	;CJK UNIFIED IDEOGRAPH
                                (#x8B8C . #x5ABD)	;CJK UNIFIED IDEOGRAPH
                                (#x8B8D . #x5ABF)	;CJK UNIFIED IDEOGRAPH
                                (#x8B8E . #x5AC0)	;CJK UNIFIED IDEOGRAPH
                                (#x8B8F . #x5AC3)	;CJK UNIFIED IDEOGRAPH
                                (#x8B90 . #x5AC4)	;CJK UNIFIED IDEOGRAPH
                                (#x8B91 . #x5AC5)	;CJK UNIFIED IDEOGRAPH
                                (#x8B92 . #x5AC6)	;CJK UNIFIED IDEOGRAPH
                                (#x8B93 . #x5AC7)	;CJK UNIFIED IDEOGRAPH
                                (#x8B94 . #x5AC8)	;CJK UNIFIED IDEOGRAPH
                                (#x8B95 . #x5ACA)	;CJK UNIFIED IDEOGRAPH
                                (#x8B96 . #x5ACB)	;CJK UNIFIED IDEOGRAPH
                                (#x8B97 . #x5ACD)	;CJK UNIFIED IDEOGRAPH
                                (#x8B98 . #x5ACE)	;CJK UNIFIED IDEOGRAPH
                                (#x8B99 . #x5ACF)	;CJK UNIFIED IDEOGRAPH
                                (#x8B9A . #x5AD0)	;CJK UNIFIED IDEOGRAPH
                                (#x8B9B . #x5AD1)	;CJK UNIFIED IDEOGRAPH
                                (#x8B9C . #x5AD3)	;CJK UNIFIED IDEOGRAPH
                                (#x8B9D . #x5AD5)	;CJK UNIFIED IDEOGRAPH
                                (#x8B9E . #x5AD7)	;CJK UNIFIED IDEOGRAPH
                                (#x8B9F . #x5AD9)	;CJK UNIFIED IDEOGRAPH
                                (#x8BA0 . #x5ADA)	;CJK UNIFIED IDEOGRAPH
                                (#x8BA1 . #x5ADB)	;CJK UNIFIED IDEOGRAPH
                                (#x8BA2 . #x5ADD)	;CJK UNIFIED IDEOGRAPH
                                (#x8BA3 . #x5ADE)	;CJK UNIFIED IDEOGRAPH
                                (#x8BA4 . #x5ADF)	;CJK UNIFIED IDEOGRAPH
                                (#x8BA5 . #x5AE2)	;CJK UNIFIED IDEOGRAPH
                                (#x8BA6 . #x5AE4)	;CJK UNIFIED IDEOGRAPH
                                (#x8BA7 . #x5AE5)	;CJK UNIFIED IDEOGRAPH
                                (#x8BA8 . #x5AE7)	;CJK UNIFIED IDEOGRAPH
                                (#x8BA9 . #x5AE8)	;CJK UNIFIED IDEOGRAPH
                                (#x8BAA . #x5AEA)	;CJK UNIFIED IDEOGRAPH
                                (#x8BAB . #x5AEC)	;CJK UNIFIED IDEOGRAPH
                                (#x8BAC . #x5AED)	;CJK UNIFIED IDEOGRAPH
                                (#x8BAD . #x5AEE)	;CJK UNIFIED IDEOGRAPH
                                (#x8BAE . #x5AEF)	;CJK UNIFIED IDEOGRAPH
                                (#x8BAF . #x5AF0)	;CJK UNIFIED IDEOGRAPH
                                (#x8BB0 . #x5AF2)	;CJK UNIFIED IDEOGRAPH
                                (#x8BB1 . #x5AF3)	;CJK UNIFIED IDEOGRAPH
                                (#x8BB2 . #x5AF4)	;CJK UNIFIED IDEOGRAPH
                                (#x8BB3 . #x5AF5)	;CJK UNIFIED IDEOGRAPH
                                (#x8BB4 . #x5AF6)	;CJK UNIFIED IDEOGRAPH
                                (#x8BB5 . #x5AF7)	;CJK UNIFIED IDEOGRAPH
                                (#x8BB6 . #x5AF8)	;CJK UNIFIED IDEOGRAPH
                                (#x8BB7 . #x5AF9)	;CJK UNIFIED IDEOGRAPH
                                (#x8BB8 . #x5AFA)	;CJK UNIFIED IDEOGRAPH
                                (#x8BB9 . #x5AFB)	;CJK UNIFIED IDEOGRAPH
                                (#x8BBA . #x5AFC)	;CJK UNIFIED IDEOGRAPH
                                (#x8BBB . #x5AFD)	;CJK UNIFIED IDEOGRAPH
                                (#x8BBC . #x5AFE)	;CJK UNIFIED IDEOGRAPH
                                (#x8BBD . #x5AFF)	;CJK UNIFIED IDEOGRAPH
                                (#x8BBE . #x5B00)	;CJK UNIFIED IDEOGRAPH
                                (#x8BBF . #x5B01)	;CJK UNIFIED IDEOGRAPH
                                (#x8BC0 . #x5B02)	;CJK UNIFIED IDEOGRAPH
                                (#x8BC1 . #x5B03)	;CJK UNIFIED IDEOGRAPH
                                (#x8BC2 . #x5B04)	;CJK UNIFIED IDEOGRAPH
                                (#x8BC3 . #x5B05)	;CJK UNIFIED IDEOGRAPH
                                (#x8BC4 . #x5B06)	;CJK UNIFIED IDEOGRAPH
                                (#x8BC5 . #x5B07)	;CJK UNIFIED IDEOGRAPH
                                (#x8BC6 . #x5B08)	;CJK UNIFIED IDEOGRAPH
                                (#x8BC7 . #x5B0A)	;CJK UNIFIED IDEOGRAPH
                                (#x8BC8 . #x5B0B)	;CJK UNIFIED IDEOGRAPH
                                (#x8BC9 . #x5B0C)	;CJK UNIFIED IDEOGRAPH
                                (#x8BCA . #x5B0D)	;CJK UNIFIED IDEOGRAPH
                                (#x8BCB . #x5B0E)	;CJK UNIFIED IDEOGRAPH
                                (#x8BCC . #x5B0F)	;CJK UNIFIED IDEOGRAPH
                                (#x8BCD . #x5B10)	;CJK UNIFIED IDEOGRAPH
                                (#x8BCE . #x5B11)	;CJK UNIFIED IDEOGRAPH
                                (#x8BCF . #x5B12)	;CJK UNIFIED IDEOGRAPH
                                (#x8BD0 . #x5B13)	;CJK UNIFIED IDEOGRAPH
                                (#x8BD1 . #x5B14)	;CJK UNIFIED IDEOGRAPH
                                (#x8BD2 . #x5B15)	;CJK UNIFIED IDEOGRAPH
                                (#x8BD3 . #x5B18)	;CJK UNIFIED IDEOGRAPH
                                (#x8BD4 . #x5B19)	;CJK UNIFIED IDEOGRAPH
                                (#x8BD5 . #x5B1A)	;CJK UNIFIED IDEOGRAPH
                                (#x8BD6 . #x5B1B)	;CJK UNIFIED IDEOGRAPH
                                (#x8BD7 . #x5B1C)	;CJK UNIFIED IDEOGRAPH
                                (#x8BD8 . #x5B1D)	;CJK UNIFIED IDEOGRAPH
                                (#x8BD9 . #x5B1E)	;CJK UNIFIED IDEOGRAPH
                                (#x8BDA . #x5B1F)	;CJK UNIFIED IDEOGRAPH
                                (#x8BDB . #x5B20)	;CJK UNIFIED IDEOGRAPH
                                (#x8BDC . #x5B21)	;CJK UNIFIED IDEOGRAPH
                                (#x8BDD . #x5B22)	;CJK UNIFIED IDEOGRAPH
                                (#x8BDE . #x5B23)	;CJK UNIFIED IDEOGRAPH
                                (#x8BDF . #x5B24)	;CJK UNIFIED IDEOGRAPH
                                (#x8BE0 . #x5B25)	;CJK UNIFIED IDEOGRAPH
                                (#x8BE1 . #x5B26)	;CJK UNIFIED IDEOGRAPH
                                (#x8BE2 . #x5B27)	;CJK UNIFIED IDEOGRAPH
                                (#x8BE3 . #x5B28)	;CJK UNIFIED IDEOGRAPH
                                (#x8BE4 . #x5B29)	;CJK UNIFIED IDEOGRAPH
                                (#x8BE5 . #x5B2A)	;CJK UNIFIED IDEOGRAPH
                                (#x8BE6 . #x5B2B)	;CJK UNIFIED IDEOGRAPH
                                (#x8BE7 . #x5B2C)	;CJK UNIFIED IDEOGRAPH
                                (#x8BE8 . #x5B2D)	;CJK UNIFIED IDEOGRAPH
                                (#x8BE9 . #x5B2E)	;CJK UNIFIED IDEOGRAPH
                                (#x8BEA . #x5B2F)	;CJK UNIFIED IDEOGRAPH
                                (#x8BEB . #x5B30)	;CJK UNIFIED IDEOGRAPH
                                (#x8BEC . #x5B31)	;CJK UNIFIED IDEOGRAPH
                                (#x8BED . #x5B33)	;CJK UNIFIED IDEOGRAPH
                                (#x8BEE . #x5B35)	;CJK UNIFIED IDEOGRAPH
                                (#x8BEF . #x5B36)	;CJK UNIFIED IDEOGRAPH
                                (#x8BF0 . #x5B38)	;CJK UNIFIED IDEOGRAPH
                                (#x8BF1 . #x5B39)	;CJK UNIFIED IDEOGRAPH
                                (#x8BF2 . #x5B3A)	;CJK UNIFIED IDEOGRAPH
                                (#x8BF3 . #x5B3B)	;CJK UNIFIED IDEOGRAPH
                                (#x8BF4 . #x5B3C)	;CJK UNIFIED IDEOGRAPH
                                (#x8BF5 . #x5B3D)	;CJK UNIFIED IDEOGRAPH
                                (#x8BF6 . #x5B3E)	;CJK UNIFIED IDEOGRAPH
                                (#x8BF7 . #x5B3F)	;CJK UNIFIED IDEOGRAPH
                                (#x8BF8 . #x5B41)	;CJK UNIFIED IDEOGRAPH
                                (#x8BF9 . #x5B42)	;CJK UNIFIED IDEOGRAPH
                                (#x8BFA . #x5B43)	;CJK UNIFIED IDEOGRAPH
                                (#x8BFB . #x5B44)	;CJK UNIFIED IDEOGRAPH
                                (#x8BFC . #x5B45)	;CJK UNIFIED IDEOGRAPH
                                (#x8BFD . #x5B46)	;CJK UNIFIED IDEOGRAPH
                                (#x8BFE . #x5B47)	;CJK UNIFIED IDEOGRAPH
                                (#x8C40 . #x5B48)	;CJK UNIFIED IDEOGRAPH
                                (#x8C41 . #x5B49)	;CJK UNIFIED IDEOGRAPH
                                (#x8C42 . #x5B4A)	;CJK UNIFIED IDEOGRAPH
                                (#x8C43 . #x5B4B)	;CJK UNIFIED IDEOGRAPH
                                (#x8C44 . #x5B4C)	;CJK UNIFIED IDEOGRAPH
                                (#x8C45 . #x5B4D)	;CJK UNIFIED IDEOGRAPH
                                (#x8C46 . #x5B4E)	;CJK UNIFIED IDEOGRAPH
                                (#x8C47 . #x5B4F)	;CJK UNIFIED IDEOGRAPH
                                (#x8C48 . #x5B52)	;CJK UNIFIED IDEOGRAPH
                                (#x8C49 . #x5B56)	;CJK UNIFIED IDEOGRAPH
                                (#x8C4A . #x5B5E)	;CJK UNIFIED IDEOGRAPH
                                (#x8C4B . #x5B60)	;CJK UNIFIED IDEOGRAPH
                                (#x8C4C . #x5B61)	;CJK UNIFIED IDEOGRAPH
                                (#x8C4D . #x5B67)	;CJK UNIFIED IDEOGRAPH
                                (#x8C4E . #x5B68)	;CJK UNIFIED IDEOGRAPH
                                (#x8C4F . #x5B6B)	;CJK UNIFIED IDEOGRAPH
                                (#x8C50 . #x5B6D)	;CJK UNIFIED IDEOGRAPH
                                (#x8C51 . #x5B6E)	;CJK UNIFIED IDEOGRAPH
                                (#x8C52 . #x5B6F)	;CJK UNIFIED IDEOGRAPH
                                (#x8C53 . #x5B72)	;CJK UNIFIED IDEOGRAPH
                                (#x8C54 . #x5B74)	;CJK UNIFIED IDEOGRAPH
                                (#x8C55 . #x5B76)	;CJK UNIFIED IDEOGRAPH
                                (#x8C56 . #x5B77)	;CJK UNIFIED IDEOGRAPH
                                (#x8C57 . #x5B78)	;CJK UNIFIED IDEOGRAPH
                                (#x8C58 . #x5B79)	;CJK UNIFIED IDEOGRAPH
                                (#x8C59 . #x5B7B)	;CJK UNIFIED IDEOGRAPH
                                (#x8C5A . #x5B7C)	;CJK UNIFIED IDEOGRAPH
                                (#x8C5B . #x5B7E)	;CJK UNIFIED IDEOGRAPH
                                (#x8C5C . #x5B7F)	;CJK UNIFIED IDEOGRAPH
                                (#x8C5D . #x5B82)	;CJK UNIFIED IDEOGRAPH
                                (#x8C5E . #x5B86)	;CJK UNIFIED IDEOGRAPH
                                (#x8C5F . #x5B8A)	;CJK UNIFIED IDEOGRAPH
                                (#x8C60 . #x5B8D)	;CJK UNIFIED IDEOGRAPH
                                (#x8C61 . #x5B8E)	;CJK UNIFIED IDEOGRAPH
                                (#x8C62 . #x5B90)	;CJK UNIFIED IDEOGRAPH
                                (#x8C63 . #x5B91)	;CJK UNIFIED IDEOGRAPH
                                (#x8C64 . #x5B92)	;CJK UNIFIED IDEOGRAPH
                                (#x8C65 . #x5B94)	;CJK UNIFIED IDEOGRAPH
                                (#x8C66 . #x5B96)	;CJK UNIFIED IDEOGRAPH
                                (#x8C67 . #x5B9F)	;CJK UNIFIED IDEOGRAPH
                                (#x8C68 . #x5BA7)	;CJK UNIFIED IDEOGRAPH
                                (#x8C69 . #x5BA8)	;CJK UNIFIED IDEOGRAPH
                                (#x8C6A . #x5BA9)	;CJK UNIFIED IDEOGRAPH
                                (#x8C6B . #x5BAC)	;CJK UNIFIED IDEOGRAPH
                                (#x8C6C . #x5BAD)	;CJK UNIFIED IDEOGRAPH
                                (#x8C6D . #x5BAE)	;CJK UNIFIED IDEOGRAPH
                                (#x8C6E . #x5BAF)	;CJK UNIFIED IDEOGRAPH
                                (#x8C6F . #x5BB1)	;CJK UNIFIED IDEOGRAPH
                                (#x8C70 . #x5BB2)	;CJK UNIFIED IDEOGRAPH
                                (#x8C71 . #x5BB7)	;CJK UNIFIED IDEOGRAPH
                                (#x8C72 . #x5BBA)	;CJK UNIFIED IDEOGRAPH
                                (#x8C73 . #x5BBB)	;CJK UNIFIED IDEOGRAPH
                                (#x8C74 . #x5BBC)	;CJK UNIFIED IDEOGRAPH
                                (#x8C75 . #x5BC0)	;CJK UNIFIED IDEOGRAPH
                                (#x8C76 . #x5BC1)	;CJK UNIFIED IDEOGRAPH
                                (#x8C77 . #x5BC3)	;CJK UNIFIED IDEOGRAPH
                                (#x8C78 . #x5BC8)	;CJK UNIFIED IDEOGRAPH
                                (#x8C79 . #x5BC9)	;CJK UNIFIED IDEOGRAPH
                                (#x8C7A . #x5BCA)	;CJK UNIFIED IDEOGRAPH
                                (#x8C7B . #x5BCB)	;CJK UNIFIED IDEOGRAPH
                                (#x8C7C . #x5BCD)	;CJK UNIFIED IDEOGRAPH
                                (#x8C7D . #x5BCE)	;CJK UNIFIED IDEOGRAPH
                                (#x8C7E . #x5BCF)	;CJK UNIFIED IDEOGRAPH
                                (#x8C80 . #x5BD1)	;CJK UNIFIED IDEOGRAPH
                                (#x8C81 . #x5BD4)	;CJK UNIFIED IDEOGRAPH
                                (#x8C82 . #x5BD5)	;CJK UNIFIED IDEOGRAPH
                                (#x8C83 . #x5BD6)	;CJK UNIFIED IDEOGRAPH
                                (#x8C84 . #x5BD7)	;CJK UNIFIED IDEOGRAPH
                                (#x8C85 . #x5BD8)	;CJK UNIFIED IDEOGRAPH
                                (#x8C86 . #x5BD9)	;CJK UNIFIED IDEOGRAPH
                                (#x8C87 . #x5BDA)	;CJK UNIFIED IDEOGRAPH
                                (#x8C88 . #x5BDB)	;CJK UNIFIED IDEOGRAPH
                                (#x8C89 . #x5BDC)	;CJK UNIFIED IDEOGRAPH
                                (#x8C8A . #x5BE0)	;CJK UNIFIED IDEOGRAPH
                                (#x8C8B . #x5BE2)	;CJK UNIFIED IDEOGRAPH
                                (#x8C8C . #x5BE3)	;CJK UNIFIED IDEOGRAPH
                                (#x8C8D . #x5BE6)	;CJK UNIFIED IDEOGRAPH
                                (#x8C8E . #x5BE7)	;CJK UNIFIED IDEOGRAPH
                                (#x8C8F . #x5BE9)	;CJK UNIFIED IDEOGRAPH
                                (#x8C90 . #x5BEA)	;CJK UNIFIED IDEOGRAPH
                                (#x8C91 . #x5BEB)	;CJK UNIFIED IDEOGRAPH
                                (#x8C92 . #x5BEC)	;CJK UNIFIED IDEOGRAPH
                                (#x8C93 . #x5BED)	;CJK UNIFIED IDEOGRAPH
                                (#x8C94 . #x5BEF)	;CJK UNIFIED IDEOGRAPH
                                (#x8C95 . #x5BF1)	;CJK UNIFIED IDEOGRAPH
                                (#x8C96 . #x5BF2)	;CJK UNIFIED IDEOGRAPH
                                (#x8C97 . #x5BF3)	;CJK UNIFIED IDEOGRAPH
                                (#x8C98 . #x5BF4)	;CJK UNIFIED IDEOGRAPH
                                (#x8C99 . #x5BF5)	;CJK UNIFIED IDEOGRAPH
                                (#x8C9A . #x5BF6)	;CJK UNIFIED IDEOGRAPH
                                (#x8C9B . #x5BF7)	;CJK UNIFIED IDEOGRAPH
                                (#x8C9C . #x5BFD)	;CJK UNIFIED IDEOGRAPH
                                (#x8C9D . #x5BFE)	;CJK UNIFIED IDEOGRAPH
                                (#x8C9E . #x5C00)	;CJK UNIFIED IDEOGRAPH
                                (#x8C9F . #x5C02)	;CJK UNIFIED IDEOGRAPH
                                (#x8CA0 . #x5C03)	;CJK UNIFIED IDEOGRAPH
                                (#x8CA1 . #x5C05)	;CJK UNIFIED IDEOGRAPH
                                (#x8CA2 . #x5C07)	;CJK UNIFIED IDEOGRAPH
                                (#x8CA3 . #x5C08)	;CJK UNIFIED IDEOGRAPH
                                (#x8CA4 . #x5C0B)	;CJK UNIFIED IDEOGRAPH
                                (#x8CA5 . #x5C0C)	;CJK UNIFIED IDEOGRAPH
                                (#x8CA6 . #x5C0D)	;CJK UNIFIED IDEOGRAPH
                                (#x8CA7 . #x5C0E)	;CJK UNIFIED IDEOGRAPH
                                (#x8CA8 . #x5C10)	;CJK UNIFIED IDEOGRAPH
                                (#x8CA9 . #x5C12)	;CJK UNIFIED IDEOGRAPH
                                (#x8CAA . #x5C13)	;CJK UNIFIED IDEOGRAPH
                                (#x8CAB . #x5C17)	;CJK UNIFIED IDEOGRAPH
                                (#x8CAC . #x5C19)	;CJK UNIFIED IDEOGRAPH
                                (#x8CAD . #x5C1B)	;CJK UNIFIED IDEOGRAPH
                                (#x8CAE . #x5C1E)	;CJK UNIFIED IDEOGRAPH
                                (#x8CAF . #x5C1F)	;CJK UNIFIED IDEOGRAPH
                                (#x8CB0 . #x5C20)	;CJK UNIFIED IDEOGRAPH
                                (#x8CB1 . #x5C21)	;CJK UNIFIED IDEOGRAPH
                                (#x8CB2 . #x5C23)	;CJK UNIFIED IDEOGRAPH
                                (#x8CB3 . #x5C26)	;CJK UNIFIED IDEOGRAPH
                                (#x8CB4 . #x5C28)	;CJK UNIFIED IDEOGRAPH
                                (#x8CB5 . #x5C29)	;CJK UNIFIED IDEOGRAPH
                                (#x8CB6 . #x5C2A)	;CJK UNIFIED IDEOGRAPH
                                (#x8CB7 . #x5C2B)	;CJK UNIFIED IDEOGRAPH
                                (#x8CB8 . #x5C2D)	;CJK UNIFIED IDEOGRAPH
                                (#x8CB9 . #x5C2E)	;CJK UNIFIED IDEOGRAPH
                                (#x8CBA . #x5C2F)	;CJK UNIFIED IDEOGRAPH
                                (#x8CBB . #x5C30)	;CJK UNIFIED IDEOGRAPH
                                (#x8CBC . #x5C32)	;CJK UNIFIED IDEOGRAPH
                                (#x8CBD . #x5C33)	;CJK UNIFIED IDEOGRAPH
                                (#x8CBE . #x5C35)	;CJK UNIFIED IDEOGRAPH
                                (#x8CBF . #x5C36)	;CJK UNIFIED IDEOGRAPH
                                (#x8CC0 . #x5C37)	;CJK UNIFIED IDEOGRAPH
                                (#x8CC1 . #x5C43)	;CJK UNIFIED IDEOGRAPH
                                (#x8CC2 . #x5C44)	;CJK UNIFIED IDEOGRAPH
                                (#x8CC3 . #x5C46)	;CJK UNIFIED IDEOGRAPH
                                (#x8CC4 . #x5C47)	;CJK UNIFIED IDEOGRAPH
                                (#x8CC5 . #x5C4C)	;CJK UNIFIED IDEOGRAPH
                                (#x8CC6 . #x5C4D)	;CJK UNIFIED IDEOGRAPH
                                (#x8CC7 . #x5C52)	;CJK UNIFIED IDEOGRAPH
                                (#x8CC8 . #x5C53)	;CJK UNIFIED IDEOGRAPH
                                (#x8CC9 . #x5C54)	;CJK UNIFIED IDEOGRAPH
                                (#x8CCA . #x5C56)	;CJK UNIFIED IDEOGRAPH
                                (#x8CCB . #x5C57)	;CJK UNIFIED IDEOGRAPH
                                (#x8CCC . #x5C58)	;CJK UNIFIED IDEOGRAPH
                                (#x8CCD . #x5C5A)	;CJK UNIFIED IDEOGRAPH
                                (#x8CCE . #x5C5B)	;CJK UNIFIED IDEOGRAPH
                                (#x8CCF . #x5C5C)	;CJK UNIFIED IDEOGRAPH
                                (#x8CD0 . #x5C5D)	;CJK UNIFIED IDEOGRAPH
                                (#x8CD1 . #x5C5F)	;CJK UNIFIED IDEOGRAPH
                                (#x8CD2 . #x5C62)	;CJK UNIFIED IDEOGRAPH
                                (#x8CD3 . #x5C64)	;CJK UNIFIED IDEOGRAPH
                                (#x8CD4 . #x5C67)	;CJK UNIFIED IDEOGRAPH
                                (#x8CD5 . #x5C68)	;CJK UNIFIED IDEOGRAPH
                                (#x8CD6 . #x5C69)	;CJK UNIFIED IDEOGRAPH
                                (#x8CD7 . #x5C6A)	;CJK UNIFIED IDEOGRAPH
                                (#x8CD8 . #x5C6B)	;CJK UNIFIED IDEOGRAPH
                                (#x8CD9 . #x5C6C)	;CJK UNIFIED IDEOGRAPH
                                (#x8CDA . #x5C6D)	;CJK UNIFIED IDEOGRAPH
                                (#x8CDB . #x5C70)	;CJK UNIFIED IDEOGRAPH
                                (#x8CDC . #x5C72)	;CJK UNIFIED IDEOGRAPH
                                (#x8CDD . #x5C73)	;CJK UNIFIED IDEOGRAPH
                                (#x8CDE . #x5C74)	;CJK UNIFIED IDEOGRAPH
                                (#x8CDF . #x5C75)	;CJK UNIFIED IDEOGRAPH
                                (#x8CE0 . #x5C76)	;CJK UNIFIED IDEOGRAPH
                                (#x8CE1 . #x5C77)	;CJK UNIFIED IDEOGRAPH
                                (#x8CE2 . #x5C78)	;CJK UNIFIED IDEOGRAPH
                                (#x8CE3 . #x5C7B)	;CJK UNIFIED IDEOGRAPH
                                (#x8CE4 . #x5C7C)	;CJK UNIFIED IDEOGRAPH
                                (#x8CE5 . #x5C7D)	;CJK UNIFIED IDEOGRAPH
                                (#x8CE6 . #x5C7E)	;CJK UNIFIED IDEOGRAPH
                                (#x8CE7 . #x5C80)	;CJK UNIFIED IDEOGRAPH
                                (#x8CE8 . #x5C83)	;CJK UNIFIED IDEOGRAPH
                                (#x8CE9 . #x5C84)	;CJK UNIFIED IDEOGRAPH
                                (#x8CEA . #x5C85)	;CJK UNIFIED IDEOGRAPH
                                (#x8CEB . #x5C86)	;CJK UNIFIED IDEOGRAPH
                                (#x8CEC . #x5C87)	;CJK UNIFIED IDEOGRAPH
                                (#x8CED . #x5C89)	;CJK UNIFIED IDEOGRAPH
                                (#x8CEE . #x5C8A)	;CJK UNIFIED IDEOGRAPH
                                (#x8CEF . #x5C8B)	;CJK UNIFIED IDEOGRAPH
                                (#x8CF0 . #x5C8E)	;CJK UNIFIED IDEOGRAPH
                                (#x8CF1 . #x5C8F)	;CJK UNIFIED IDEOGRAPH
                                (#x8CF2 . #x5C92)	;CJK UNIFIED IDEOGRAPH
                                (#x8CF3 . #x5C93)	;CJK UNIFIED IDEOGRAPH
                                (#x8CF4 . #x5C95)	;CJK UNIFIED IDEOGRAPH
                                (#x8CF5 . #x5C9D)	;CJK UNIFIED IDEOGRAPH
                                (#x8CF6 . #x5C9E)	;CJK UNIFIED IDEOGRAPH
                                (#x8CF7 . #x5C9F)	;CJK UNIFIED IDEOGRAPH
                                (#x8CF8 . #x5CA0)	;CJK UNIFIED IDEOGRAPH
                                (#x8CF9 . #x5CA1)	;CJK UNIFIED IDEOGRAPH
                                (#x8CFA . #x5CA4)	;CJK UNIFIED IDEOGRAPH
                                (#x8CFB . #x5CA5)	;CJK UNIFIED IDEOGRAPH
                                (#x8CFC . #x5CA6)	;CJK UNIFIED IDEOGRAPH
                                (#x8CFD . #x5CA7)	;CJK UNIFIED IDEOGRAPH
                                (#x8CFE . #x5CA8)	;CJK UNIFIED IDEOGRAPH
                                (#x8D40 . #x5CAA)	;CJK UNIFIED IDEOGRAPH
                                (#x8D41 . #x5CAE)	;CJK UNIFIED IDEOGRAPH
                                (#x8D42 . #x5CAF)	;CJK UNIFIED IDEOGRAPH
                                (#x8D43 . #x5CB0)	;CJK UNIFIED IDEOGRAPH
                                (#x8D44 . #x5CB2)	;CJK UNIFIED IDEOGRAPH
                                (#x8D45 . #x5CB4)	;CJK UNIFIED IDEOGRAPH
                                (#x8D46 . #x5CB6)	;CJK UNIFIED IDEOGRAPH
                                (#x8D47 . #x5CB9)	;CJK UNIFIED IDEOGRAPH
                                (#x8D48 . #x5CBA)	;CJK UNIFIED IDEOGRAPH
                                (#x8D49 . #x5CBB)	;CJK UNIFIED IDEOGRAPH
                                (#x8D4A . #x5CBC)	;CJK UNIFIED IDEOGRAPH
                                (#x8D4B . #x5CBE)	;CJK UNIFIED IDEOGRAPH
                                (#x8D4C . #x5CC0)	;CJK UNIFIED IDEOGRAPH
                                (#x8D4D . #x5CC2)	;CJK UNIFIED IDEOGRAPH
                                (#x8D4E . #x5CC3)	;CJK UNIFIED IDEOGRAPH
                                (#x8D4F . #x5CC5)	;CJK UNIFIED IDEOGRAPH
                                (#x8D50 . #x5CC6)	;CJK UNIFIED IDEOGRAPH
                                (#x8D51 . #x5CC7)	;CJK UNIFIED IDEOGRAPH
                                (#x8D52 . #x5CC8)	;CJK UNIFIED IDEOGRAPH
                                (#x8D53 . #x5CC9)	;CJK UNIFIED IDEOGRAPH
                                (#x8D54 . #x5CCA)	;CJK UNIFIED IDEOGRAPH
                                (#x8D55 . #x5CCC)	;CJK UNIFIED IDEOGRAPH
                                (#x8D56 . #x5CCD)	;CJK UNIFIED IDEOGRAPH
                                (#x8D57 . #x5CCE)	;CJK UNIFIED IDEOGRAPH
                                (#x8D58 . #x5CCF)	;CJK UNIFIED IDEOGRAPH
                                (#x8D59 . #x5CD0)	;CJK UNIFIED IDEOGRAPH
                                (#x8D5A . #x5CD1)	;CJK UNIFIED IDEOGRAPH
                                (#x8D5B . #x5CD3)	;CJK UNIFIED IDEOGRAPH
                                (#x8D5C . #x5CD4)	;CJK UNIFIED IDEOGRAPH
                                (#x8D5D . #x5CD5)	;CJK UNIFIED IDEOGRAPH
                                (#x8D5E . #x5CD6)	;CJK UNIFIED IDEOGRAPH
                                (#x8D5F . #x5CD7)	;CJK UNIFIED IDEOGRAPH
                                (#x8D60 . #x5CD8)	;CJK UNIFIED IDEOGRAPH
                                (#x8D61 . #x5CDA)	;CJK UNIFIED IDEOGRAPH
                                (#x8D62 . #x5CDB)	;CJK UNIFIED IDEOGRAPH
                                (#x8D63 . #x5CDC)	;CJK UNIFIED IDEOGRAPH
                                (#x8D64 . #x5CDD)	;CJK UNIFIED IDEOGRAPH
                                (#x8D65 . #x5CDE)	;CJK UNIFIED IDEOGRAPH
                                (#x8D66 . #x5CDF)	;CJK UNIFIED IDEOGRAPH
                                (#x8D67 . #x5CE0)	;CJK UNIFIED IDEOGRAPH
                                (#x8D68 . #x5CE2)	;CJK UNIFIED IDEOGRAPH
                                (#x8D69 . #x5CE3)	;CJK UNIFIED IDEOGRAPH
                                (#x8D6A . #x5CE7)	;CJK UNIFIED IDEOGRAPH
                                (#x8D6B . #x5CE9)	;CJK UNIFIED IDEOGRAPH
                                (#x8D6C . #x5CEB)	;CJK UNIFIED IDEOGRAPH
                                (#x8D6D . #x5CEC)	;CJK UNIFIED IDEOGRAPH
                                (#x8D6E . #x5CEE)	;CJK UNIFIED IDEOGRAPH
                                (#x8D6F . #x5CEF)	;CJK UNIFIED IDEOGRAPH
                                (#x8D70 . #x5CF1)	;CJK UNIFIED IDEOGRAPH
                                (#x8D71 . #x5CF2)	;CJK UNIFIED IDEOGRAPH
                                (#x8D72 . #x5CF3)	;CJK UNIFIED IDEOGRAPH
                                (#x8D73 . #x5CF4)	;CJK UNIFIED IDEOGRAPH
                                (#x8D74 . #x5CF5)	;CJK UNIFIED IDEOGRAPH
                                (#x8D75 . #x5CF6)	;CJK UNIFIED IDEOGRAPH
                                (#x8D76 . #x5CF7)	;CJK UNIFIED IDEOGRAPH
                                (#x8D77 . #x5CF8)	;CJK UNIFIED IDEOGRAPH
                                (#x8D78 . #x5CF9)	;CJK UNIFIED IDEOGRAPH
                                (#x8D79 . #x5CFA)	;CJK UNIFIED IDEOGRAPH
                                (#x8D7A . #x5CFC)	;CJK UNIFIED IDEOGRAPH
                                (#x8D7B . #x5CFD)	;CJK UNIFIED IDEOGRAPH
                                (#x8D7C . #x5CFE)	;CJK UNIFIED IDEOGRAPH
                                (#x8D7D . #x5CFF)	;CJK UNIFIED IDEOGRAPH
                                (#x8D7E . #x5D00)	;CJK UNIFIED IDEOGRAPH
                                (#x8D80 . #x5D01)	;CJK UNIFIED IDEOGRAPH
                                (#x8D81 . #x5D04)	;CJK UNIFIED IDEOGRAPH
                                (#x8D82 . #x5D05)	;CJK UNIFIED IDEOGRAPH
                                (#x8D83 . #x5D08)	;CJK UNIFIED IDEOGRAPH
                                (#x8D84 . #x5D09)	;CJK UNIFIED IDEOGRAPH
                                (#x8D85 . #x5D0A)	;CJK UNIFIED IDEOGRAPH
                                (#x8D86 . #x5D0B)	;CJK UNIFIED IDEOGRAPH
                                (#x8D87 . #x5D0C)	;CJK UNIFIED IDEOGRAPH
                                (#x8D88 . #x5D0D)	;CJK UNIFIED IDEOGRAPH
                                (#x8D89 . #x5D0F)	;CJK UNIFIED IDEOGRAPH
                                (#x8D8A . #x5D10)	;CJK UNIFIED IDEOGRAPH
                                (#x8D8B . #x5D11)	;CJK UNIFIED IDEOGRAPH
                                (#x8D8C . #x5D12)	;CJK UNIFIED IDEOGRAPH
                                (#x8D8D . #x5D13)	;CJK UNIFIED IDEOGRAPH
                                (#x8D8E . #x5D15)	;CJK UNIFIED IDEOGRAPH
                                (#x8D8F . #x5D17)	;CJK UNIFIED IDEOGRAPH
                                (#x8D90 . #x5D18)	;CJK UNIFIED IDEOGRAPH
                                (#x8D91 . #x5D19)	;CJK UNIFIED IDEOGRAPH
                                (#x8D92 . #x5D1A)	;CJK UNIFIED IDEOGRAPH
                                (#x8D93 . #x5D1C)	;CJK UNIFIED IDEOGRAPH
                                (#x8D94 . #x5D1D)	;CJK UNIFIED IDEOGRAPH
                                (#x8D95 . #x5D1F)	;CJK UNIFIED IDEOGRAPH
                                (#x8D96 . #x5D20)	;CJK UNIFIED IDEOGRAPH
                                (#x8D97 . #x5D21)	;CJK UNIFIED IDEOGRAPH
                                (#x8D98 . #x5D22)	;CJK UNIFIED IDEOGRAPH
                                (#x8D99 . #x5D23)	;CJK UNIFIED IDEOGRAPH
                                (#x8D9A . #x5D25)	;CJK UNIFIED IDEOGRAPH
                                (#x8D9B . #x5D28)	;CJK UNIFIED IDEOGRAPH
                                (#x8D9C . #x5D2A)	;CJK UNIFIED IDEOGRAPH
                                (#x8D9D . #x5D2B)	;CJK UNIFIED IDEOGRAPH
                                (#x8D9E . #x5D2C)	;CJK UNIFIED IDEOGRAPH
                                (#x8D9F . #x5D2F)	;CJK UNIFIED IDEOGRAPH
                                (#x8DA0 . #x5D30)	;CJK UNIFIED IDEOGRAPH
                                (#x8DA1 . #x5D31)	;CJK UNIFIED IDEOGRAPH
                                (#x8DA2 . #x5D32)	;CJK UNIFIED IDEOGRAPH
                                (#x8DA3 . #x5D33)	;CJK UNIFIED IDEOGRAPH
                                (#x8DA4 . #x5D35)	;CJK UNIFIED IDEOGRAPH
                                (#x8DA5 . #x5D36)	;CJK UNIFIED IDEOGRAPH
                                (#x8DA6 . #x5D37)	;CJK UNIFIED IDEOGRAPH
                                (#x8DA7 . #x5D38)	;CJK UNIFIED IDEOGRAPH
                                (#x8DA8 . #x5D39)	;CJK UNIFIED IDEOGRAPH
                                (#x8DA9 . #x5D3A)	;CJK UNIFIED IDEOGRAPH
                                (#x8DAA . #x5D3B)	;CJK UNIFIED IDEOGRAPH
                                (#x8DAB . #x5D3C)	;CJK UNIFIED IDEOGRAPH
                                (#x8DAC . #x5D3F)	;CJK UNIFIED IDEOGRAPH
                                (#x8DAD . #x5D40)	;CJK UNIFIED IDEOGRAPH
                                (#x8DAE . #x5D41)	;CJK UNIFIED IDEOGRAPH
                                (#x8DAF . #x5D42)	;CJK UNIFIED IDEOGRAPH
                                (#x8DB0 . #x5D43)	;CJK UNIFIED IDEOGRAPH
                                (#x8DB1 . #x5D44)	;CJK UNIFIED IDEOGRAPH
                                (#x8DB2 . #x5D45)	;CJK UNIFIED IDEOGRAPH
                                (#x8DB3 . #x5D46)	;CJK UNIFIED IDEOGRAPH
                                (#x8DB4 . #x5D48)	;CJK UNIFIED IDEOGRAPH
                                (#x8DB5 . #x5D49)	;CJK UNIFIED IDEOGRAPH
                                (#x8DB6 . #x5D4D)	;CJK UNIFIED IDEOGRAPH
                                (#x8DB7 . #x5D4E)	;CJK UNIFIED IDEOGRAPH
                                (#x8DB8 . #x5D4F)	;CJK UNIFIED IDEOGRAPH
                                (#x8DB9 . #x5D50)	;CJK UNIFIED IDEOGRAPH
                                (#x8DBA . #x5D51)	;CJK UNIFIED IDEOGRAPH
                                (#x8DBB . #x5D52)	;CJK UNIFIED IDEOGRAPH
                                (#x8DBC . #x5D53)	;CJK UNIFIED IDEOGRAPH
                                (#x8DBD . #x5D54)	;CJK UNIFIED IDEOGRAPH
                                (#x8DBE . #x5D55)	;CJK UNIFIED IDEOGRAPH
                                (#x8DBF . #x5D56)	;CJK UNIFIED IDEOGRAPH
                                (#x8DC0 . #x5D57)	;CJK UNIFIED IDEOGRAPH
                                (#x8DC1 . #x5D59)	;CJK UNIFIED IDEOGRAPH
                                (#x8DC2 . #x5D5A)	;CJK UNIFIED IDEOGRAPH
                                (#x8DC3 . #x5D5C)	;CJK UNIFIED IDEOGRAPH
                                (#x8DC4 . #x5D5E)	;CJK UNIFIED IDEOGRAPH
                                (#x8DC5 . #x5D5F)	;CJK UNIFIED IDEOGRAPH
                                (#x8DC6 . #x5D60)	;CJK UNIFIED IDEOGRAPH
                                (#x8DC7 . #x5D61)	;CJK UNIFIED IDEOGRAPH
                                (#x8DC8 . #x5D62)	;CJK UNIFIED IDEOGRAPH
                                (#x8DC9 . #x5D63)	;CJK UNIFIED IDEOGRAPH
                                (#x8DCA . #x5D64)	;CJK UNIFIED IDEOGRAPH
                                (#x8DCB . #x5D65)	;CJK UNIFIED IDEOGRAPH
                                (#x8DCC . #x5D66)	;CJK UNIFIED IDEOGRAPH
                                (#x8DCD . #x5D67)	;CJK UNIFIED IDEOGRAPH
                                (#x8DCE . #x5D68)	;CJK UNIFIED IDEOGRAPH
                                (#x8DCF . #x5D6A)	;CJK UNIFIED IDEOGRAPH
                                (#x8DD0 . #x5D6D)	;CJK UNIFIED IDEOGRAPH
                                (#x8DD1 . #x5D6E)	;CJK UNIFIED IDEOGRAPH
                                (#x8DD2 . #x5D70)	;CJK UNIFIED IDEOGRAPH
                                (#x8DD3 . #x5D71)	;CJK UNIFIED IDEOGRAPH
                                (#x8DD4 . #x5D72)	;CJK UNIFIED IDEOGRAPH
                                (#x8DD5 . #x5D73)	;CJK UNIFIED IDEOGRAPH
                                (#x8DD6 . #x5D75)	;CJK UNIFIED IDEOGRAPH
                                (#x8DD7 . #x5D76)	;CJK UNIFIED IDEOGRAPH
                                (#x8DD8 . #x5D77)	;CJK UNIFIED IDEOGRAPH
                                (#x8DD9 . #x5D78)	;CJK UNIFIED IDEOGRAPH
                                (#x8DDA . #x5D79)	;CJK UNIFIED IDEOGRAPH
                                (#x8DDB . #x5D7A)	;CJK UNIFIED IDEOGRAPH
                                (#x8DDC . #x5D7B)	;CJK UNIFIED IDEOGRAPH
                                (#x8DDD . #x5D7C)	;CJK UNIFIED IDEOGRAPH
                                (#x8DDE . #x5D7D)	;CJK UNIFIED IDEOGRAPH
                                (#x8DDF . #x5D7E)	;CJK UNIFIED IDEOGRAPH
                                (#x8DE0 . #x5D7F)	;CJK UNIFIED IDEOGRAPH
                                (#x8DE1 . #x5D80)	;CJK UNIFIED IDEOGRAPH
                                (#x8DE2 . #x5D81)	;CJK UNIFIED IDEOGRAPH
                                (#x8DE3 . #x5D83)	;CJK UNIFIED IDEOGRAPH
                                (#x8DE4 . #x5D84)	;CJK UNIFIED IDEOGRAPH
                                (#x8DE5 . #x5D85)	;CJK UNIFIED IDEOGRAPH
                                (#x8DE6 . #x5D86)	;CJK UNIFIED IDEOGRAPH
                                (#x8DE7 . #x5D87)	;CJK UNIFIED IDEOGRAPH
                                (#x8DE8 . #x5D88)	;CJK UNIFIED IDEOGRAPH
                                (#x8DE9 . #x5D89)	;CJK UNIFIED IDEOGRAPH
                                (#x8DEA . #x5D8A)	;CJK UNIFIED IDEOGRAPH
                                (#x8DEB . #x5D8B)	;CJK UNIFIED IDEOGRAPH
                                (#x8DEC . #x5D8C)	;CJK UNIFIED IDEOGRAPH
                                (#x8DED . #x5D8D)	;CJK UNIFIED IDEOGRAPH
                                (#x8DEE . #x5D8E)	;CJK UNIFIED IDEOGRAPH
                                (#x8DEF . #x5D8F)	;CJK UNIFIED IDEOGRAPH
                                (#x8DF0 . #x5D90)	;CJK UNIFIED IDEOGRAPH
                                (#x8DF1 . #x5D91)	;CJK UNIFIED IDEOGRAPH
                                (#x8DF2 . #x5D92)	;CJK UNIFIED IDEOGRAPH
                                (#x8DF3 . #x5D93)	;CJK UNIFIED IDEOGRAPH
                                (#x8DF4 . #x5D94)	;CJK UNIFIED IDEOGRAPH
                                (#x8DF5 . #x5D95)	;CJK UNIFIED IDEOGRAPH
                                (#x8DF6 . #x5D96)	;CJK UNIFIED IDEOGRAPH
                                (#x8DF7 . #x5D97)	;CJK UNIFIED IDEOGRAPH
                                (#x8DF8 . #x5D98)	;CJK UNIFIED IDEOGRAPH
                                (#x8DF9 . #x5D9A)	;CJK UNIFIED IDEOGRAPH
                                (#x8DFA . #x5D9B)	;CJK UNIFIED IDEOGRAPH
                                (#x8DFB . #x5D9C)	;CJK UNIFIED IDEOGRAPH
                                (#x8DFC . #x5D9E)	;CJK UNIFIED IDEOGRAPH
                                (#x8DFD . #x5D9F)	;CJK UNIFIED IDEOGRAPH
                                (#x8DFE . #x5DA0)	;CJK UNIFIED IDEOGRAPH
                                (#x8E40 . #x5DA1)	;CJK UNIFIED IDEOGRAPH
                                (#x8E41 . #x5DA2)	;CJK UNIFIED IDEOGRAPH
                                (#x8E42 . #x5DA3)	;CJK UNIFIED IDEOGRAPH
                                (#x8E43 . #x5DA4)	;CJK UNIFIED IDEOGRAPH
                                (#x8E44 . #x5DA5)	;CJK UNIFIED IDEOGRAPH
                                (#x8E45 . #x5DA6)	;CJK UNIFIED IDEOGRAPH
                                (#x8E46 . #x5DA7)	;CJK UNIFIED IDEOGRAPH
                                (#x8E47 . #x5DA8)	;CJK UNIFIED IDEOGRAPH
                                (#x8E48 . #x5DA9)	;CJK UNIFIED IDEOGRAPH
                                (#x8E49 . #x5DAA)	;CJK UNIFIED IDEOGRAPH
                                (#x8E4A . #x5DAB)	;CJK UNIFIED IDEOGRAPH
                                (#x8E4B . #x5DAC)	;CJK UNIFIED IDEOGRAPH
                                (#x8E4C . #x5DAD)	;CJK UNIFIED IDEOGRAPH
                                (#x8E4D . #x5DAE)	;CJK UNIFIED IDEOGRAPH
                                (#x8E4E . #x5DAF)	;CJK UNIFIED IDEOGRAPH
                                (#x8E4F . #x5DB0)	;CJK UNIFIED IDEOGRAPH
                                (#x8E50 . #x5DB1)	;CJK UNIFIED IDEOGRAPH
                                (#x8E51 . #x5DB2)	;CJK UNIFIED IDEOGRAPH
                                (#x8E52 . #x5DB3)	;CJK UNIFIED IDEOGRAPH
                                (#x8E53 . #x5DB4)	;CJK UNIFIED IDEOGRAPH
                                (#x8E54 . #x5DB5)	;CJK UNIFIED IDEOGRAPH
                                (#x8E55 . #x5DB6)	;CJK UNIFIED IDEOGRAPH
                                (#x8E56 . #x5DB8)	;CJK UNIFIED IDEOGRAPH
                                (#x8E57 . #x5DB9)	;CJK UNIFIED IDEOGRAPH
                                (#x8E58 . #x5DBA)	;CJK UNIFIED IDEOGRAPH
                                (#x8E59 . #x5DBB)	;CJK UNIFIED IDEOGRAPH
                                (#x8E5A . #x5DBC)	;CJK UNIFIED IDEOGRAPH
                                (#x8E5B . #x5DBD)	;CJK UNIFIED IDEOGRAPH
                                (#x8E5C . #x5DBE)	;CJK UNIFIED IDEOGRAPH
                                (#x8E5D . #x5DBF)	;CJK UNIFIED IDEOGRAPH
                                (#x8E5E . #x5DC0)	;CJK UNIFIED IDEOGRAPH
                                (#x8E5F . #x5DC1)	;CJK UNIFIED IDEOGRAPH
                                (#x8E60 . #x5DC2)	;CJK UNIFIED IDEOGRAPH
                                (#x8E61 . #x5DC3)	;CJK UNIFIED IDEOGRAPH
                                (#x8E62 . #x5DC4)	;CJK UNIFIED IDEOGRAPH
                                (#x8E63 . #x5DC6)	;CJK UNIFIED IDEOGRAPH
                                (#x8E64 . #x5DC7)	;CJK UNIFIED IDEOGRAPH
                                (#x8E65 . #x5DC8)	;CJK UNIFIED IDEOGRAPH
                                (#x8E66 . #x5DC9)	;CJK UNIFIED IDEOGRAPH
                                (#x8E67 . #x5DCA)	;CJK UNIFIED IDEOGRAPH
                                (#x8E68 . #x5DCB)	;CJK UNIFIED IDEOGRAPH
                                (#x8E69 . #x5DCC)	;CJK UNIFIED IDEOGRAPH
                                (#x8E6A . #x5DCE)	;CJK UNIFIED IDEOGRAPH
                                (#x8E6B . #x5DCF)	;CJK UNIFIED IDEOGRAPH
                                (#x8E6C . #x5DD0)	;CJK UNIFIED IDEOGRAPH
                                (#x8E6D . #x5DD1)	;CJK UNIFIED IDEOGRAPH
                                (#x8E6E . #x5DD2)	;CJK UNIFIED IDEOGRAPH
                                (#x8E6F . #x5DD3)	;CJK UNIFIED IDEOGRAPH
                                (#x8E70 . #x5DD4)	;CJK UNIFIED IDEOGRAPH
                                (#x8E71 . #x5DD5)	;CJK UNIFIED IDEOGRAPH
                                (#x8E72 . #x5DD6)	;CJK UNIFIED IDEOGRAPH
                                (#x8E73 . #x5DD7)	;CJK UNIFIED IDEOGRAPH
                                (#x8E74 . #x5DD8)	;CJK UNIFIED IDEOGRAPH
                                (#x8E75 . #x5DD9)	;CJK UNIFIED IDEOGRAPH
                                (#x8E76 . #x5DDA)	;CJK UNIFIED IDEOGRAPH
                                (#x8E77 . #x5DDC)	;CJK UNIFIED IDEOGRAPH
                                (#x8E78 . #x5DDF)	;CJK UNIFIED IDEOGRAPH
                                (#x8E79 . #x5DE0)	;CJK UNIFIED IDEOGRAPH
                                (#x8E7A . #x5DE3)	;CJK UNIFIED IDEOGRAPH
                                (#x8E7B . #x5DE4)	;CJK UNIFIED IDEOGRAPH
                                (#x8E7C . #x5DEA)	;CJK UNIFIED IDEOGRAPH
                                (#x8E7D . #x5DEC)	;CJK UNIFIED IDEOGRAPH
                                (#x8E7E . #x5DED)	;CJK UNIFIED IDEOGRAPH
                                (#x8E80 . #x5DF0)	;CJK UNIFIED IDEOGRAPH
                                (#x8E81 . #x5DF5)	;CJK UNIFIED IDEOGRAPH
                                (#x8E82 . #x5DF6)	;CJK UNIFIED IDEOGRAPH
                                (#x8E83 . #x5DF8)	;CJK UNIFIED IDEOGRAPH
                                (#x8E84 . #x5DF9)	;CJK UNIFIED IDEOGRAPH
                                (#x8E85 . #x5DFA)	;CJK UNIFIED IDEOGRAPH
                                (#x8E86 . #x5DFB)	;CJK UNIFIED IDEOGRAPH
                                (#x8E87 . #x5DFC)	;CJK UNIFIED IDEOGRAPH
                                (#x8E88 . #x5DFF)	;CJK UNIFIED IDEOGRAPH
                                (#x8E89 . #x5E00)	;CJK UNIFIED IDEOGRAPH
                                (#x8E8A . #x5E04)	;CJK UNIFIED IDEOGRAPH
                                (#x8E8B . #x5E07)	;CJK UNIFIED IDEOGRAPH
                                (#x8E8C . #x5E09)	;CJK UNIFIED IDEOGRAPH
                                (#x8E8D . #x5E0A)	;CJK UNIFIED IDEOGRAPH
                                (#x8E8E . #x5E0B)	;CJK UNIFIED IDEOGRAPH
                                (#x8E8F . #x5E0D)	;CJK UNIFIED IDEOGRAPH
                                (#x8E90 . #x5E0E)	;CJK UNIFIED IDEOGRAPH
                                (#x8E91 . #x5E12)	;CJK UNIFIED IDEOGRAPH
                                (#x8E92 . #x5E13)	;CJK UNIFIED IDEOGRAPH
                                (#x8E93 . #x5E17)	;CJK UNIFIED IDEOGRAPH
                                (#x8E94 . #x5E1E)	;CJK UNIFIED IDEOGRAPH
                                (#x8E95 . #x5E1F)	;CJK UNIFIED IDEOGRAPH
                                (#x8E96 . #x5E20)	;CJK UNIFIED IDEOGRAPH
                                (#x8E97 . #x5E21)	;CJK UNIFIED IDEOGRAPH
                                (#x8E98 . #x5E22)	;CJK UNIFIED IDEOGRAPH
                                (#x8E99 . #x5E23)	;CJK UNIFIED IDEOGRAPH
                                (#x8E9A . #x5E24)	;CJK UNIFIED IDEOGRAPH
                                (#x8E9B . #x5E25)	;CJK UNIFIED IDEOGRAPH
                                (#x8E9C . #x5E28)	;CJK UNIFIED IDEOGRAPH
                                (#x8E9D . #x5E29)	;CJK UNIFIED IDEOGRAPH
                                (#x8E9E . #x5E2A)	;CJK UNIFIED IDEOGRAPH
                                (#x8E9F . #x5E2B)	;CJK UNIFIED IDEOGRAPH
                                (#x8EA0 . #x5E2C)	;CJK UNIFIED IDEOGRAPH
                                (#x8EA1 . #x5E2F)	;CJK UNIFIED IDEOGRAPH
                                (#x8EA2 . #x5E30)	;CJK UNIFIED IDEOGRAPH
                                (#x8EA3 . #x5E32)	;CJK UNIFIED IDEOGRAPH
                                (#x8EA4 . #x5E33)	;CJK UNIFIED IDEOGRAPH
                                (#x8EA5 . #x5E34)	;CJK UNIFIED IDEOGRAPH
                                (#x8EA6 . #x5E35)	;CJK UNIFIED IDEOGRAPH
                                (#x8EA7 . #x5E36)	;CJK UNIFIED IDEOGRAPH
                                (#x8EA8 . #x5E39)	;CJK UNIFIED IDEOGRAPH
                                (#x8EA9 . #x5E3A)	;CJK UNIFIED IDEOGRAPH
                                (#x8EAA . #x5E3E)	;CJK UNIFIED IDEOGRAPH
                                (#x8EAB . #x5E3F)	;CJK UNIFIED IDEOGRAPH
                                (#x8EAC . #x5E40)	;CJK UNIFIED IDEOGRAPH
                                (#x8EAD . #x5E41)	;CJK UNIFIED IDEOGRAPH
                                (#x8EAE . #x5E43)	;CJK UNIFIED IDEOGRAPH
                                (#x8EAF . #x5E46)	;CJK UNIFIED IDEOGRAPH
                                (#x8EB0 . #x5E47)	;CJK UNIFIED IDEOGRAPH
                                (#x8EB1 . #x5E48)	;CJK UNIFIED IDEOGRAPH
                                (#x8EB2 . #x5E49)	;CJK UNIFIED IDEOGRAPH
                                (#x8EB3 . #x5E4A)	;CJK UNIFIED IDEOGRAPH
                                (#x8EB4 . #x5E4B)	;CJK UNIFIED IDEOGRAPH
                                (#x8EB5 . #x5E4D)	;CJK UNIFIED IDEOGRAPH
                                (#x8EB6 . #x5E4E)	;CJK UNIFIED IDEOGRAPH
                                (#x8EB7 . #x5E4F)	;CJK UNIFIED IDEOGRAPH
                                (#x8EB8 . #x5E50)	;CJK UNIFIED IDEOGRAPH
                                (#x8EB9 . #x5E51)	;CJK UNIFIED IDEOGRAPH
                                (#x8EBA . #x5E52)	;CJK UNIFIED IDEOGRAPH
                                (#x8EBB . #x5E53)	;CJK UNIFIED IDEOGRAPH
                                (#x8EBC . #x5E56)	;CJK UNIFIED IDEOGRAPH
                                (#x8EBD . #x5E57)	;CJK UNIFIED IDEOGRAPH
                                (#x8EBE . #x5E58)	;CJK UNIFIED IDEOGRAPH
                                (#x8EBF . #x5E59)	;CJK UNIFIED IDEOGRAPH
                                (#x8EC0 . #x5E5A)	;CJK UNIFIED IDEOGRAPH
                                (#x8EC1 . #x5E5C)	;CJK UNIFIED IDEOGRAPH
                                (#x8EC2 . #x5E5D)	;CJK UNIFIED IDEOGRAPH
                                (#x8EC3 . #x5E5F)	;CJK UNIFIED IDEOGRAPH
                                (#x8EC4 . #x5E60)	;CJK UNIFIED IDEOGRAPH
                                (#x8EC5 . #x5E63)	;CJK UNIFIED IDEOGRAPH
                                (#x8EC6 . #x5E64)	;CJK UNIFIED IDEOGRAPH
                                (#x8EC7 . #x5E65)	;CJK UNIFIED IDEOGRAPH
                                (#x8EC8 . #x5E66)	;CJK UNIFIED IDEOGRAPH
                                (#x8EC9 . #x5E67)	;CJK UNIFIED IDEOGRAPH
                                (#x8ECA . #x5E68)	;CJK UNIFIED IDEOGRAPH
                                (#x8ECB . #x5E69)	;CJK UNIFIED IDEOGRAPH
                                (#x8ECC . #x5E6A)	;CJK UNIFIED IDEOGRAPH
                                (#x8ECD . #x5E6B)	;CJK UNIFIED IDEOGRAPH
                                (#x8ECE . #x5E6C)	;CJK UNIFIED IDEOGRAPH
                                (#x8ECF . #x5E6D)	;CJK UNIFIED IDEOGRAPH
                                (#x8ED0 . #x5E6E)	;CJK UNIFIED IDEOGRAPH
                                (#x8ED1 . #x5E6F)	;CJK UNIFIED IDEOGRAPH
                                (#x8ED2 . #x5E70)	;CJK UNIFIED IDEOGRAPH
                                (#x8ED3 . #x5E71)	;CJK UNIFIED IDEOGRAPH
                                (#x8ED4 . #x5E75)	;CJK UNIFIED IDEOGRAPH
                                (#x8ED5 . #x5E77)	;CJK UNIFIED IDEOGRAPH
                                (#x8ED6 . #x5E79)	;CJK UNIFIED IDEOGRAPH
                                (#x8ED7 . #x5E7E)	;CJK UNIFIED IDEOGRAPH
                                (#x8ED8 . #x5E81)	;CJK UNIFIED IDEOGRAPH
                                (#x8ED9 . #x5E82)	;CJK UNIFIED IDEOGRAPH
                                (#x8EDA . #x5E83)	;CJK UNIFIED IDEOGRAPH
                                (#x8EDB . #x5E85)	;CJK UNIFIED IDEOGRAPH
                                (#x8EDC . #x5E88)	;CJK UNIFIED IDEOGRAPH
                                (#x8EDD . #x5E89)	;CJK UNIFIED IDEOGRAPH
                                (#x8EDE . #x5E8C)	;CJK UNIFIED IDEOGRAPH
                                (#x8EDF . #x5E8D)	;CJK UNIFIED IDEOGRAPH
                                (#x8EE0 . #x5E8E)	;CJK UNIFIED IDEOGRAPH
                                (#x8EE1 . #x5E92)	;CJK UNIFIED IDEOGRAPH
                                (#x8EE2 . #x5E98)	;CJK UNIFIED IDEOGRAPH
                                (#x8EE3 . #x5E9B)	;CJK UNIFIED IDEOGRAPH
                                (#x8EE4 . #x5E9D)	;CJK UNIFIED IDEOGRAPH
                                (#x8EE5 . #x5EA1)	;CJK UNIFIED IDEOGRAPH
                                (#x8EE6 . #x5EA2)	;CJK UNIFIED IDEOGRAPH
                                (#x8EE7 . #x5EA3)	;CJK UNIFIED IDEOGRAPH
                                (#x8EE8 . #x5EA4)	;CJK UNIFIED IDEOGRAPH
                                (#x8EE9 . #x5EA8)	;CJK UNIFIED IDEOGRAPH
                                (#x8EEA . #x5EA9)	;CJK UNIFIED IDEOGRAPH
                                (#x8EEB . #x5EAA)	;CJK UNIFIED IDEOGRAPH
                                (#x8EEC . #x5EAB)	;CJK UNIFIED IDEOGRAPH
                                (#x8EED . #x5EAC)	;CJK UNIFIED IDEOGRAPH
                                (#x8EEE . #x5EAE)	;CJK UNIFIED IDEOGRAPH
                                (#x8EEF . #x5EAF)	;CJK UNIFIED IDEOGRAPH
                                (#x8EF0 . #x5EB0)	;CJK UNIFIED IDEOGRAPH
                                (#x8EF1 . #x5EB1)	;CJK UNIFIED IDEOGRAPH
                                (#x8EF2 . #x5EB2)	;CJK UNIFIED IDEOGRAPH
                                (#x8EF3 . #x5EB4)	;CJK UNIFIED IDEOGRAPH
                                (#x8EF4 . #x5EBA)	;CJK UNIFIED IDEOGRAPH
                                (#x8EF5 . #x5EBB)	;CJK UNIFIED IDEOGRAPH
                                (#x8EF6 . #x5EBC)	;CJK UNIFIED IDEOGRAPH
                                (#x8EF7 . #x5EBD)	;CJK UNIFIED IDEOGRAPH
                                (#x8EF8 . #x5EBF)	;CJK UNIFIED IDEOGRAPH
                                (#x8EF9 . #x5EC0)	;CJK UNIFIED IDEOGRAPH
                                (#x8EFA . #x5EC1)	;CJK UNIFIED IDEOGRAPH
                                (#x8EFB . #x5EC2)	;CJK UNIFIED IDEOGRAPH
                                (#x8EFC . #x5EC3)	;CJK UNIFIED IDEOGRAPH
                                (#x8EFD . #x5EC4)	;CJK UNIFIED IDEOGRAPH
                                (#x8EFE . #x5EC5)	;CJK UNIFIED IDEOGRAPH
                                (#x8F40 . #x5EC6)	;CJK UNIFIED IDEOGRAPH
                                (#x8F41 . #x5EC7)	;CJK UNIFIED IDEOGRAPH
                                (#x8F42 . #x5EC8)	;CJK UNIFIED IDEOGRAPH
                                (#x8F43 . #x5ECB)	;CJK UNIFIED IDEOGRAPH
                                (#x8F44 . #x5ECC)	;CJK UNIFIED IDEOGRAPH
                                (#x8F45 . #x5ECD)	;CJK UNIFIED IDEOGRAPH
                                (#x8F46 . #x5ECE)	;CJK UNIFIED IDEOGRAPH
                                (#x8F47 . #x5ECF)	;CJK UNIFIED IDEOGRAPH
                                (#x8F48 . #x5ED0)	;CJK UNIFIED IDEOGRAPH
                                (#x8F49 . #x5ED4)	;CJK UNIFIED IDEOGRAPH
                                (#x8F4A . #x5ED5)	;CJK UNIFIED IDEOGRAPH
                                (#x8F4B . #x5ED7)	;CJK UNIFIED IDEOGRAPH
                                (#x8F4C . #x5ED8)	;CJK UNIFIED IDEOGRAPH
                                (#x8F4D . #x5ED9)	;CJK UNIFIED IDEOGRAPH
                                (#x8F4E . #x5EDA)	;CJK UNIFIED IDEOGRAPH
                                (#x8F4F . #x5EDC)	;CJK UNIFIED IDEOGRAPH
                                (#x8F50 . #x5EDD)	;CJK UNIFIED IDEOGRAPH
                                (#x8F51 . #x5EDE)	;CJK UNIFIED IDEOGRAPH
                                (#x8F52 . #x5EDF)	;CJK UNIFIED IDEOGRAPH
                                (#x8F53 . #x5EE0)	;CJK UNIFIED IDEOGRAPH
                                (#x8F54 . #x5EE1)	;CJK UNIFIED IDEOGRAPH
                                (#x8F55 . #x5EE2)	;CJK UNIFIED IDEOGRAPH
                                (#x8F56 . #x5EE3)	;CJK UNIFIED IDEOGRAPH
                                (#x8F57 . #x5EE4)	;CJK UNIFIED IDEOGRAPH
                                (#x8F58 . #x5EE5)	;CJK UNIFIED IDEOGRAPH
                                (#x8F59 . #x5EE6)	;CJK UNIFIED IDEOGRAPH
                                (#x8F5A . #x5EE7)	;CJK UNIFIED IDEOGRAPH
                                (#x8F5B . #x5EE9)	;CJK UNIFIED IDEOGRAPH
                                (#x8F5C . #x5EEB)	;CJK UNIFIED IDEOGRAPH
                                (#x8F5D . #x5EEC)	;CJK UNIFIED IDEOGRAPH
                                (#x8F5E . #x5EED)	;CJK UNIFIED IDEOGRAPH
                                (#x8F5F . #x5EEE)	;CJK UNIFIED IDEOGRAPH
                                (#x8F60 . #x5EEF)	;CJK UNIFIED IDEOGRAPH
                                (#x8F61 . #x5EF0)	;CJK UNIFIED IDEOGRAPH
                                (#x8F62 . #x5EF1)	;CJK UNIFIED IDEOGRAPH
                                (#x8F63 . #x5EF2)	;CJK UNIFIED IDEOGRAPH
                                (#x8F64 . #x5EF3)	;CJK UNIFIED IDEOGRAPH
                                (#x8F65 . #x5EF5)	;CJK UNIFIED IDEOGRAPH
                                (#x8F66 . #x5EF8)	;CJK UNIFIED IDEOGRAPH
                                (#x8F67 . #x5EF9)	;CJK UNIFIED IDEOGRAPH
                                (#x8F68 . #x5EFB)	;CJK UNIFIED IDEOGRAPH
                                (#x8F69 . #x5EFC)	;CJK UNIFIED IDEOGRAPH
                                (#x8F6A . #x5EFD)	;CJK UNIFIED IDEOGRAPH
                                (#x8F6B . #x5F05)	;CJK UNIFIED IDEOGRAPH
                                (#x8F6C . #x5F06)	;CJK UNIFIED IDEOGRAPH
                                (#x8F6D . #x5F07)	;CJK UNIFIED IDEOGRAPH
                                (#x8F6E . #x5F09)	;CJK UNIFIED IDEOGRAPH
                                (#x8F6F . #x5F0C)	;CJK UNIFIED IDEOGRAPH
                                (#x8F70 . #x5F0D)	;CJK UNIFIED IDEOGRAPH
                                (#x8F71 . #x5F0E)	;CJK UNIFIED IDEOGRAPH
                                (#x8F72 . #x5F10)	;CJK UNIFIED IDEOGRAPH
                                (#x8F73 . #x5F12)	;CJK UNIFIED IDEOGRAPH
                                (#x8F74 . #x5F14)	;CJK UNIFIED IDEOGRAPH
                                (#x8F75 . #x5F16)	;CJK UNIFIED IDEOGRAPH
                                (#x8F76 . #x5F19)	;CJK UNIFIED IDEOGRAPH
                                (#x8F77 . #x5F1A)	;CJK UNIFIED IDEOGRAPH
                                (#x8F78 . #x5F1C)	;CJK UNIFIED IDEOGRAPH
                                (#x8F79 . #x5F1D)	;CJK UNIFIED IDEOGRAPH
                                (#x8F7A . #x5F1E)	;CJK UNIFIED IDEOGRAPH
                                (#x8F7B . #x5F21)	;CJK UNIFIED IDEOGRAPH
                                (#x8F7C . #x5F22)	;CJK UNIFIED IDEOGRAPH
                                (#x8F7D . #x5F23)	;CJK UNIFIED IDEOGRAPH
                                (#x8F7E . #x5F24)	;CJK UNIFIED IDEOGRAPH
                                (#x8F80 . #x5F28)	;CJK UNIFIED IDEOGRAPH
                                (#x8F81 . #x5F2B)	;CJK UNIFIED IDEOGRAPH
                                (#x8F82 . #x5F2C)	;CJK UNIFIED IDEOGRAPH
                                (#x8F83 . #x5F2E)	;CJK UNIFIED IDEOGRAPH
                                (#x8F84 . #x5F30)	;CJK UNIFIED IDEOGRAPH
                                (#x8F85 . #x5F32)	;CJK UNIFIED IDEOGRAPH
                                (#x8F86 . #x5F33)	;CJK UNIFIED IDEOGRAPH
                                (#x8F87 . #x5F34)	;CJK UNIFIED IDEOGRAPH
                                (#x8F88 . #x5F35)	;CJK UNIFIED IDEOGRAPH
                                (#x8F89 . #x5F36)	;CJK UNIFIED IDEOGRAPH
                                (#x8F8A . #x5F37)	;CJK UNIFIED IDEOGRAPH
                                (#x8F8B . #x5F38)	;CJK UNIFIED IDEOGRAPH
                                (#x8F8C . #x5F3B)	;CJK UNIFIED IDEOGRAPH
                                (#x8F8D . #x5F3D)	;CJK UNIFIED IDEOGRAPH
                                (#x8F8E . #x5F3E)	;CJK UNIFIED IDEOGRAPH
                                (#x8F8F . #x5F3F)	;CJK UNIFIED IDEOGRAPH
                                (#x8F90 . #x5F41)	;CJK UNIFIED IDEOGRAPH
                                (#x8F91 . #x5F42)	;CJK UNIFIED IDEOGRAPH
                                (#x8F92 . #x5F43)	;CJK UNIFIED IDEOGRAPH
                                (#x8F93 . #x5F44)	;CJK UNIFIED IDEOGRAPH
                                (#x8F94 . #x5F45)	;CJK UNIFIED IDEOGRAPH
                                (#x8F95 . #x5F46)	;CJK UNIFIED IDEOGRAPH
                                (#x8F96 . #x5F47)	;CJK UNIFIED IDEOGRAPH
                                (#x8F97 . #x5F48)	;CJK UNIFIED IDEOGRAPH
                                (#x8F98 . #x5F49)	;CJK UNIFIED IDEOGRAPH
                                (#x8F99 . #x5F4A)	;CJK UNIFIED IDEOGRAPH
                                (#x8F9A . #x5F4B)	;CJK UNIFIED IDEOGRAPH
                                (#x8F9B . #x5F4C)	;CJK UNIFIED IDEOGRAPH
                                (#x8F9C . #x5F4D)	;CJK UNIFIED IDEOGRAPH
                                (#x8F9D . #x5F4E)	;CJK UNIFIED IDEOGRAPH
                                (#x8F9E . #x5F4F)	;CJK UNIFIED IDEOGRAPH
                                (#x8F9F . #x5F51)	;CJK UNIFIED IDEOGRAPH
                                (#x8FA0 . #x5F54)	;CJK UNIFIED IDEOGRAPH
                                (#x8FA1 . #x5F59)	;CJK UNIFIED IDEOGRAPH
                                (#x8FA2 . #x5F5A)	;CJK UNIFIED IDEOGRAPH
                                (#x8FA3 . #x5F5B)	;CJK UNIFIED IDEOGRAPH
                                (#x8FA4 . #x5F5C)	;CJK UNIFIED IDEOGRAPH
                                (#x8FA5 . #x5F5E)	;CJK UNIFIED IDEOGRAPH
                                (#x8FA6 . #x5F5F)	;CJK UNIFIED IDEOGRAPH
                                (#x8FA7 . #x5F60)	;CJK UNIFIED IDEOGRAPH
                                (#x8FA8 . #x5F63)	;CJK UNIFIED IDEOGRAPH
                                (#x8FA9 . #x5F65)	;CJK UNIFIED IDEOGRAPH
                                (#x8FAA . #x5F67)	;CJK UNIFIED IDEOGRAPH
                                (#x8FAB . #x5F68)	;CJK UNIFIED IDEOGRAPH
                                (#x8FAC . #x5F6B)	;CJK UNIFIED IDEOGRAPH
                                (#x8FAD . #x5F6E)	;CJK UNIFIED IDEOGRAPH
                                (#x8FAE . #x5F6F)	;CJK UNIFIED IDEOGRAPH
                                (#x8FAF . #x5F72)	;CJK UNIFIED IDEOGRAPH
                                (#x8FB0 . #x5F74)	;CJK UNIFIED IDEOGRAPH
                                (#x8FB1 . #x5F75)	;CJK UNIFIED IDEOGRAPH
                                (#x8FB2 . #x5F76)	;CJK UNIFIED IDEOGRAPH
                                (#x8FB3 . #x5F78)	;CJK UNIFIED IDEOGRAPH
                                (#x8FB4 . #x5F7A)	;CJK UNIFIED IDEOGRAPH
                                (#x8FB5 . #x5F7D)	;CJK UNIFIED IDEOGRAPH
                                (#x8FB6 . #x5F7E)	;CJK UNIFIED IDEOGRAPH
                                (#x8FB7 . #x5F7F)	;CJK UNIFIED IDEOGRAPH
                                (#x8FB8 . #x5F83)	;CJK UNIFIED IDEOGRAPH
                                (#x8FB9 . #x5F86)	;CJK UNIFIED IDEOGRAPH
                                (#x8FBA . #x5F8D)	;CJK UNIFIED IDEOGRAPH
                                (#x8FBB . #x5F8E)	;CJK UNIFIED IDEOGRAPH
                                (#x8FBC . #x5F8F)	;CJK UNIFIED IDEOGRAPH
                                (#x8FBD . #x5F91)	;CJK UNIFIED IDEOGRAPH
                                (#x8FBE . #x5F93)	;CJK UNIFIED IDEOGRAPH
                                (#x8FBF . #x5F94)	;CJK UNIFIED IDEOGRAPH
                                (#x8FC0 . #x5F96)	;CJK UNIFIED IDEOGRAPH
                                (#x8FC1 . #x5F9A)	;CJK UNIFIED IDEOGRAPH
                                (#x8FC2 . #x5F9B)	;CJK UNIFIED IDEOGRAPH
                                (#x8FC3 . #x5F9D)	;CJK UNIFIED IDEOGRAPH
                                (#x8FC4 . #x5F9E)	;CJK UNIFIED IDEOGRAPH
                                (#x8FC5 . #x5F9F)	;CJK UNIFIED IDEOGRAPH
                                (#x8FC6 . #x5FA0)	;CJK UNIFIED IDEOGRAPH
                                (#x8FC7 . #x5FA2)	;CJK UNIFIED IDEOGRAPH
                                (#x8FC8 . #x5FA3)	;CJK UNIFIED IDEOGRAPH
                                (#x8FC9 . #x5FA4)	;CJK UNIFIED IDEOGRAPH
                                (#x8FCA . #x5FA5)	;CJK UNIFIED IDEOGRAPH
                                (#x8FCB . #x5FA6)	;CJK UNIFIED IDEOGRAPH
                                (#x8FCC . #x5FA7)	;CJK UNIFIED IDEOGRAPH
                                (#x8FCD . #x5FA9)	;CJK UNIFIED IDEOGRAPH
                                (#x8FCE . #x5FAB)	;CJK UNIFIED IDEOGRAPH
                                (#x8FCF . #x5FAC)	;CJK UNIFIED IDEOGRAPH
                                (#x8FD0 . #x5FAF)	;CJK UNIFIED IDEOGRAPH
                                (#x8FD1 . #x5FB0)	;CJK UNIFIED IDEOGRAPH
                                (#x8FD2 . #x5FB1)	;CJK UNIFIED IDEOGRAPH
                                (#x8FD3 . #x5FB2)	;CJK UNIFIED IDEOGRAPH
                                (#x8FD4 . #x5FB3)	;CJK UNIFIED IDEOGRAPH
                                (#x8FD5 . #x5FB4)	;CJK UNIFIED IDEOGRAPH
                                (#x8FD6 . #x5FB6)	;CJK UNIFIED IDEOGRAPH
                                (#x8FD7 . #x5FB8)	;CJK UNIFIED IDEOGRAPH
                                (#x8FD8 . #x5FB9)	;CJK UNIFIED IDEOGRAPH
                                (#x8FD9 . #x5FBA)	;CJK UNIFIED IDEOGRAPH
                                (#x8FDA . #x5FBB)	;CJK UNIFIED IDEOGRAPH
                                (#x8FDB . #x5FBE)	;CJK UNIFIED IDEOGRAPH
                                (#x8FDC . #x5FBF)	;CJK UNIFIED IDEOGRAPH
                                (#x8FDD . #x5FC0)	;CJK UNIFIED IDEOGRAPH
                                (#x8FDE . #x5FC1)	;CJK UNIFIED IDEOGRAPH
                                (#x8FDF . #x5FC2)	;CJK UNIFIED IDEOGRAPH
                                (#x8FE0 . #x5FC7)	;CJK UNIFIED IDEOGRAPH
                                (#x8FE1 . #x5FC8)	;CJK UNIFIED IDEOGRAPH
                                (#x8FE2 . #x5FCA)	;CJK UNIFIED IDEOGRAPH
                                (#x8FE3 . #x5FCB)	;CJK UNIFIED IDEOGRAPH
                                (#x8FE4 . #x5FCE)	;CJK UNIFIED IDEOGRAPH
                                (#x8FE5 . #x5FD3)	;CJK UNIFIED IDEOGRAPH
                                (#x8FE6 . #x5FD4)	;CJK UNIFIED IDEOGRAPH
                                (#x8FE7 . #x5FD5)	;CJK UNIFIED IDEOGRAPH
                                (#x8FE8 . #x5FDA)	;CJK UNIFIED IDEOGRAPH
                                (#x8FE9 . #x5FDB)	;CJK UNIFIED IDEOGRAPH
                                (#x8FEA . #x5FDC)	;CJK UNIFIED IDEOGRAPH
                                (#x8FEB . #x5FDE)	;CJK UNIFIED IDEOGRAPH
                                (#x8FEC . #x5FDF)	;CJK UNIFIED IDEOGRAPH
                                (#x8FED . #x5FE2)	;CJK UNIFIED IDEOGRAPH
                                (#x8FEE . #x5FE3)	;CJK UNIFIED IDEOGRAPH
                                (#x8FEF . #x5FE5)	;CJK UNIFIED IDEOGRAPH
                                (#x8FF0 . #x5FE6)	;CJK UNIFIED IDEOGRAPH
                                (#x8FF1 . #x5FE8)	;CJK UNIFIED IDEOGRAPH
                                (#x8FF2 . #x5FE9)	;CJK UNIFIED IDEOGRAPH
                                (#x8FF3 . #x5FEC)	;CJK UNIFIED IDEOGRAPH
                                (#x8FF4 . #x5FEF)	;CJK UNIFIED IDEOGRAPH
                                (#x8FF5 . #x5FF0)	;CJK UNIFIED IDEOGRAPH
                                (#x8FF6 . #x5FF2)	;CJK UNIFIED IDEOGRAPH
                                (#x8FF7 . #x5FF3)	;CJK UNIFIED IDEOGRAPH
                                (#x8FF8 . #x5FF4)	;CJK UNIFIED IDEOGRAPH
                                (#x8FF9 . #x5FF6)	;CJK UNIFIED IDEOGRAPH
                                (#x8FFA . #x5FF7)	;CJK UNIFIED IDEOGRAPH
                                (#x8FFB . #x5FF9)	;CJK UNIFIED IDEOGRAPH
                                (#x8FFC . #x5FFA)	;CJK UNIFIED IDEOGRAPH
                                (#x8FFD . #x5FFC)	;CJK UNIFIED IDEOGRAPH
                                (#x8FFE . #x6007)	;CJK UNIFIED IDEOGRAPH
                                (#x9040 . #x6008)	;CJK UNIFIED IDEOGRAPH
                                (#x9041 . #x6009)	;CJK UNIFIED IDEOGRAPH
                                (#x9042 . #x600B)	;CJK UNIFIED IDEOGRAPH
                                (#x9043 . #x600C)	;CJK UNIFIED IDEOGRAPH
                                (#x9044 . #x6010)	;CJK UNIFIED IDEOGRAPH
                                (#x9045 . #x6011)	;CJK UNIFIED IDEOGRAPH
                                (#x9046 . #x6013)	;CJK UNIFIED IDEOGRAPH
                                (#x9047 . #x6017)	;CJK UNIFIED IDEOGRAPH
                                (#x9048 . #x6018)	;CJK UNIFIED IDEOGRAPH
                                (#x9049 . #x601A)	;CJK UNIFIED IDEOGRAPH
                                (#x904A . #x601E)	;CJK UNIFIED IDEOGRAPH
                                (#x904B . #x601F)	;CJK UNIFIED IDEOGRAPH
                                (#x904C . #x6022)	;CJK UNIFIED IDEOGRAPH
                                (#x904D . #x6023)	;CJK UNIFIED IDEOGRAPH
                                (#x904E . #x6024)	;CJK UNIFIED IDEOGRAPH
                                (#x904F . #x602C)	;CJK UNIFIED IDEOGRAPH
                                (#x9050 . #x602D)	;CJK UNIFIED IDEOGRAPH
                                (#x9051 . #x602E)	;CJK UNIFIED IDEOGRAPH
                                (#x9052 . #x6030)	;CJK UNIFIED IDEOGRAPH
                                (#x9053 . #x6031)	;CJK UNIFIED IDEOGRAPH
                                (#x9054 . #x6032)	;CJK UNIFIED IDEOGRAPH
                                (#x9055 . #x6033)	;CJK UNIFIED IDEOGRAPH
                                (#x9056 . #x6034)	;CJK UNIFIED IDEOGRAPH
                                (#x9057 . #x6036)	;CJK UNIFIED IDEOGRAPH
                                (#x9058 . #x6037)	;CJK UNIFIED IDEOGRAPH
                                (#x9059 . #x6038)	;CJK UNIFIED IDEOGRAPH
                                (#x905A . #x6039)	;CJK UNIFIED IDEOGRAPH
                                (#x905B . #x603A)	;CJK UNIFIED IDEOGRAPH
                                (#x905C . #x603D)	;CJK UNIFIED IDEOGRAPH
                                (#x905D . #x603E)	;CJK UNIFIED IDEOGRAPH
                                (#x905E . #x6040)	;CJK UNIFIED IDEOGRAPH
                                (#x905F . #x6044)	;CJK UNIFIED IDEOGRAPH
                                (#x9060 . #x6045)	;CJK UNIFIED IDEOGRAPH
                                (#x9061 . #x6046)	;CJK UNIFIED IDEOGRAPH
                                (#x9062 . #x6047)	;CJK UNIFIED IDEOGRAPH
                                (#x9063 . #x6048)	;CJK UNIFIED IDEOGRAPH
                                (#x9064 . #x6049)	;CJK UNIFIED IDEOGRAPH
                                (#x9065 . #x604A)	;CJK UNIFIED IDEOGRAPH
                                (#x9066 . #x604C)	;CJK UNIFIED IDEOGRAPH
                                (#x9067 . #x604E)	;CJK UNIFIED IDEOGRAPH
                                (#x9068 . #x604F)	;CJK UNIFIED IDEOGRAPH
                                (#x9069 . #x6051)	;CJK UNIFIED IDEOGRAPH
                                (#x906A . #x6053)	;CJK UNIFIED IDEOGRAPH
                                (#x906B . #x6054)	;CJK UNIFIED IDEOGRAPH
                                (#x906C . #x6056)	;CJK UNIFIED IDEOGRAPH
                                (#x906D . #x6057)	;CJK UNIFIED IDEOGRAPH
                                (#x906E . #x6058)	;CJK UNIFIED IDEOGRAPH
                                (#x906F . #x605B)	;CJK UNIFIED IDEOGRAPH
                                (#x9070 . #x605C)	;CJK UNIFIED IDEOGRAPH
                                (#x9071 . #x605E)	;CJK UNIFIED IDEOGRAPH
                                (#x9072 . #x605F)	;CJK UNIFIED IDEOGRAPH
                                (#x9073 . #x6060)	;CJK UNIFIED IDEOGRAPH
                                (#x9074 . #x6061)	;CJK UNIFIED IDEOGRAPH
                                (#x9075 . #x6065)	;CJK UNIFIED IDEOGRAPH
                                (#x9076 . #x6066)	;CJK UNIFIED IDEOGRAPH
                                (#x9077 . #x606E)	;CJK UNIFIED IDEOGRAPH
                                (#x9078 . #x6071)	;CJK UNIFIED IDEOGRAPH
                                (#x9079 . #x6072)	;CJK UNIFIED IDEOGRAPH
                                (#x907A . #x6074)	;CJK UNIFIED IDEOGRAPH
                                (#x907B . #x6075)	;CJK UNIFIED IDEOGRAPH
                                (#x907C . #x6077)	;CJK UNIFIED IDEOGRAPH
                                (#x907D . #x607E)	;CJK UNIFIED IDEOGRAPH
                                (#x907E . #x6080)	;CJK UNIFIED IDEOGRAPH
                                (#x9080 . #x6081)	;CJK UNIFIED IDEOGRAPH
                                (#x9081 . #x6082)	;CJK UNIFIED IDEOGRAPH
                                (#x9082 . #x6085)	;CJK UNIFIED IDEOGRAPH
                                (#x9083 . #x6086)	;CJK UNIFIED IDEOGRAPH
                                (#x9084 . #x6087)	;CJK UNIFIED IDEOGRAPH
                                (#x9085 . #x6088)	;CJK UNIFIED IDEOGRAPH
                                (#x9086 . #x608A)	;CJK UNIFIED IDEOGRAPH
                                (#x9087 . #x608B)	;CJK UNIFIED IDEOGRAPH
                                (#x9088 . #x608E)	;CJK UNIFIED IDEOGRAPH
                                (#x9089 . #x608F)	;CJK UNIFIED IDEOGRAPH
                                (#x908A . #x6090)	;CJK UNIFIED IDEOGRAPH
                                (#x908B . #x6091)	;CJK UNIFIED IDEOGRAPH
                                (#x908C . #x6093)	;CJK UNIFIED IDEOGRAPH
                                (#x908D . #x6095)	;CJK UNIFIED IDEOGRAPH
                                (#x908E . #x6097)	;CJK UNIFIED IDEOGRAPH
                                (#x908F . #x6098)	;CJK UNIFIED IDEOGRAPH
                                (#x9090 . #x6099)	;CJK UNIFIED IDEOGRAPH
                                (#x9091 . #x609C)	;CJK UNIFIED IDEOGRAPH
                                (#x9092 . #x609E)	;CJK UNIFIED IDEOGRAPH
                                (#x9093 . #x60A1)	;CJK UNIFIED IDEOGRAPH
                                (#x9094 . #x60A2)	;CJK UNIFIED IDEOGRAPH
                                (#x9095 . #x60A4)	;CJK UNIFIED IDEOGRAPH
                                (#x9096 . #x60A5)	;CJK UNIFIED IDEOGRAPH
                                (#x9097 . #x60A7)	;CJK UNIFIED IDEOGRAPH
                                (#x9098 . #x60A9)	;CJK UNIFIED IDEOGRAPH
                                (#x9099 . #x60AA)	;CJK UNIFIED IDEOGRAPH
                                (#x909A . #x60AE)	;CJK UNIFIED IDEOGRAPH
                                (#x909B . #x60B0)	;CJK UNIFIED IDEOGRAPH
                                (#x909C . #x60B3)	;CJK UNIFIED IDEOGRAPH
                                (#x909D . #x60B5)	;CJK UNIFIED IDEOGRAPH
                                (#x909E . #x60B6)	;CJK UNIFIED IDEOGRAPH
                                (#x909F . #x60B7)	;CJK UNIFIED IDEOGRAPH
                                (#x90A0 . #x60B9)	;CJK UNIFIED IDEOGRAPH
                                (#x90A1 . #x60BA)	;CJK UNIFIED IDEOGRAPH
                                (#x90A2 . #x60BD)	;CJK UNIFIED IDEOGRAPH
                                (#x90A3 . #x60BE)	;CJK UNIFIED IDEOGRAPH
                                (#x90A4 . #x60BF)	;CJK UNIFIED IDEOGRAPH
                                (#x90A5 . #x60C0)	;CJK UNIFIED IDEOGRAPH
                                (#x90A6 . #x60C1)	;CJK UNIFIED IDEOGRAPH
                                (#x90A7 . #x60C2)	;CJK UNIFIED IDEOGRAPH
                                (#x90A8 . #x60C3)	;CJK UNIFIED IDEOGRAPH
                                (#x90A9 . #x60C4)	;CJK UNIFIED IDEOGRAPH
                                (#x90AA . #x60C7)	;CJK UNIFIED IDEOGRAPH
                                (#x90AB . #x60C8)	;CJK UNIFIED IDEOGRAPH
                                (#x90AC . #x60C9)	;CJK UNIFIED IDEOGRAPH
                                (#x90AD . #x60CC)	;CJK UNIFIED IDEOGRAPH
                                (#x90AE . #x60CD)	;CJK UNIFIED IDEOGRAPH
                                (#x90AF . #x60CE)	;CJK UNIFIED IDEOGRAPH
                                (#x90B0 . #x60CF)	;CJK UNIFIED IDEOGRAPH
                                (#x90B1 . #x60D0)	;CJK UNIFIED IDEOGRAPH
                                (#x90B2 . #x60D2)	;CJK UNIFIED IDEOGRAPH
                                (#x90B3 . #x60D3)	;CJK UNIFIED IDEOGRAPH
                                (#x90B4 . #x60D4)	;CJK UNIFIED IDEOGRAPH
                                (#x90B5 . #x60D6)	;CJK UNIFIED IDEOGRAPH
                                (#x90B6 . #x60D7)	;CJK UNIFIED IDEOGRAPH
                                (#x90B7 . #x60D9)	;CJK UNIFIED IDEOGRAPH
                                (#x90B8 . #x60DB)	;CJK UNIFIED IDEOGRAPH
                                (#x90B9 . #x60DE)	;CJK UNIFIED IDEOGRAPH
                                (#x90BA . #x60E1)	;CJK UNIFIED IDEOGRAPH
                                (#x90BB . #x60E2)	;CJK UNIFIED IDEOGRAPH
                                (#x90BC . #x60E3)	;CJK UNIFIED IDEOGRAPH
                                (#x90BD . #x60E4)	;CJK UNIFIED IDEOGRAPH
                                (#x90BE . #x60E5)	;CJK UNIFIED IDEOGRAPH
                                (#x90BF . #x60EA)	;CJK UNIFIED IDEOGRAPH
                                (#x90C0 . #x60F1)	;CJK UNIFIED IDEOGRAPH
                                (#x90C1 . #x60F2)	;CJK UNIFIED IDEOGRAPH
                                (#x90C2 . #x60F5)	;CJK UNIFIED IDEOGRAPH
                                (#x90C3 . #x60F7)	;CJK UNIFIED IDEOGRAPH
                                (#x90C4 . #x60F8)	;CJK UNIFIED IDEOGRAPH
                                (#x90C5 . #x60FB)	;CJK UNIFIED IDEOGRAPH
                                (#x90C6 . #x60FC)	;CJK UNIFIED IDEOGRAPH
                                (#x90C7 . #x60FD)	;CJK UNIFIED IDEOGRAPH
                                (#x90C8 . #x60FE)	;CJK UNIFIED IDEOGRAPH
                                (#x90C9 . #x60FF)	;CJK UNIFIED IDEOGRAPH
                                (#x90CA . #x6102)	;CJK UNIFIED IDEOGRAPH
                                (#x90CB . #x6103)	;CJK UNIFIED IDEOGRAPH
                                (#x90CC . #x6104)	;CJK UNIFIED IDEOGRAPH
                                (#x90CD . #x6105)	;CJK UNIFIED IDEOGRAPH
                                (#x90CE . #x6107)	;CJK UNIFIED IDEOGRAPH
                                (#x90CF . #x610A)	;CJK UNIFIED IDEOGRAPH
                                (#x90D0 . #x610B)	;CJK UNIFIED IDEOGRAPH
                                (#x90D1 . #x610C)	;CJK UNIFIED IDEOGRAPH
                                (#x90D2 . #x6110)	;CJK UNIFIED IDEOGRAPH
                                (#x90D3 . #x6111)	;CJK UNIFIED IDEOGRAPH
                                (#x90D4 . #x6112)	;CJK UNIFIED IDEOGRAPH
                                (#x90D5 . #x6113)	;CJK UNIFIED IDEOGRAPH
                                (#x90D6 . #x6114)	;CJK UNIFIED IDEOGRAPH
                                (#x90D7 . #x6116)	;CJK UNIFIED IDEOGRAPH
                                (#x90D8 . #x6117)	;CJK UNIFIED IDEOGRAPH
                                (#x90D9 . #x6118)	;CJK UNIFIED IDEOGRAPH
                                (#x90DA . #x6119)	;CJK UNIFIED IDEOGRAPH
                                (#x90DB . #x611B)	;CJK UNIFIED IDEOGRAPH
                                (#x90DC . #x611C)	;CJK UNIFIED IDEOGRAPH
                                (#x90DD . #x611D)	;CJK UNIFIED IDEOGRAPH
                                (#x90DE . #x611E)	;CJK UNIFIED IDEOGRAPH
                                (#x90DF . #x6121)	;CJK UNIFIED IDEOGRAPH
                                (#x90E0 . #x6122)	;CJK UNIFIED IDEOGRAPH
                                (#x90E1 . #x6125)	;CJK UNIFIED IDEOGRAPH
                                (#x90E2 . #x6128)	;CJK UNIFIED IDEOGRAPH
                                (#x90E3 . #x6129)	;CJK UNIFIED IDEOGRAPH
                                (#x90E4 . #x612A)	;CJK UNIFIED IDEOGRAPH
                                (#x90E5 . #x612C)	;CJK UNIFIED IDEOGRAPH
                                (#x90E6 . #x612D)	;CJK UNIFIED IDEOGRAPH
                                (#x90E7 . #x612E)	;CJK UNIFIED IDEOGRAPH
                                (#x90E8 . #x612F)	;CJK UNIFIED IDEOGRAPH
                                (#x90E9 . #x6130)	;CJK UNIFIED IDEOGRAPH
                                (#x90EA . #x6131)	;CJK UNIFIED IDEOGRAPH
                                (#x90EB . #x6132)	;CJK UNIFIED IDEOGRAPH
                                (#x90EC . #x6133)	;CJK UNIFIED IDEOGRAPH
                                (#x90ED . #x6134)	;CJK UNIFIED IDEOGRAPH
                                (#x90EE . #x6135)	;CJK UNIFIED IDEOGRAPH
                                (#x90EF . #x6136)	;CJK UNIFIED IDEOGRAPH
                                (#x90F0 . #x6137)	;CJK UNIFIED IDEOGRAPH
                                (#x90F1 . #x6138)	;CJK UNIFIED IDEOGRAPH
                                (#x90F2 . #x6139)	;CJK UNIFIED IDEOGRAPH
                                (#x90F3 . #x613A)	;CJK UNIFIED IDEOGRAPH
                                (#x90F4 . #x613B)	;CJK UNIFIED IDEOGRAPH
                                (#x90F5 . #x613C)	;CJK UNIFIED IDEOGRAPH
                                (#x90F6 . #x613D)	;CJK UNIFIED IDEOGRAPH
                                (#x90F7 . #x613E)	;CJK UNIFIED IDEOGRAPH
                                (#x90F8 . #x6140)	;CJK UNIFIED IDEOGRAPH
                                (#x90F9 . #x6141)	;CJK UNIFIED IDEOGRAPH
                                (#x90FA . #x6142)	;CJK UNIFIED IDEOGRAPH
                                (#x90FB . #x6143)	;CJK UNIFIED IDEOGRAPH
                                (#x90FC . #x6144)	;CJK UNIFIED IDEOGRAPH
                                (#x90FD . #x6145)	;CJK UNIFIED IDEOGRAPH
                                (#x90FE . #x6146)	;CJK UNIFIED IDEOGRAPH
                                (#x9140 . #x6147)	;CJK UNIFIED IDEOGRAPH
                                (#x9141 . #x6149)	;CJK UNIFIED IDEOGRAPH
                                (#x9142 . #x614B)	;CJK UNIFIED IDEOGRAPH
                                (#x9143 . #x614D)	;CJK UNIFIED IDEOGRAPH
                                (#x9144 . #x614F)	;CJK UNIFIED IDEOGRAPH
                                (#x9145 . #x6150)	;CJK UNIFIED IDEOGRAPH
                                (#x9146 . #x6152)	;CJK UNIFIED IDEOGRAPH
                                (#x9147 . #x6153)	;CJK UNIFIED IDEOGRAPH
                                (#x9148 . #x6154)	;CJK UNIFIED IDEOGRAPH
                                (#x9149 . #x6156)	;CJK UNIFIED IDEOGRAPH
                                (#x914A . #x6157)	;CJK UNIFIED IDEOGRAPH
                                (#x914B . #x6158)	;CJK UNIFIED IDEOGRAPH
                                (#x914C . #x6159)	;CJK UNIFIED IDEOGRAPH
                                (#x914D . #x615A)	;CJK UNIFIED IDEOGRAPH
                                (#x914E . #x615B)	;CJK UNIFIED IDEOGRAPH
                                (#x914F . #x615C)	;CJK UNIFIED IDEOGRAPH
                                (#x9150 . #x615E)	;CJK UNIFIED IDEOGRAPH
                                (#x9151 . #x615F)	;CJK UNIFIED IDEOGRAPH
                                (#x9152 . #x6160)	;CJK UNIFIED IDEOGRAPH
                                (#x9153 . #x6161)	;CJK UNIFIED IDEOGRAPH
                                (#x9154 . #x6163)	;CJK UNIFIED IDEOGRAPH
                                (#x9155 . #x6164)	;CJK UNIFIED IDEOGRAPH
                                (#x9156 . #x6165)	;CJK UNIFIED IDEOGRAPH
                                (#x9157 . #x6166)	;CJK UNIFIED IDEOGRAPH
                                (#x9158 . #x6169)	;CJK UNIFIED IDEOGRAPH
                                (#x9159 . #x616A)	;CJK UNIFIED IDEOGRAPH
                                (#x915A . #x616B)	;CJK UNIFIED IDEOGRAPH
                                (#x915B . #x616C)	;CJK UNIFIED IDEOGRAPH
                                (#x915C . #x616D)	;CJK UNIFIED IDEOGRAPH
                                (#x915D . #x616E)	;CJK UNIFIED IDEOGRAPH
                                (#x915E . #x616F)	;CJK UNIFIED IDEOGRAPH
                                (#x915F . #x6171)	;CJK UNIFIED IDEOGRAPH
                                (#x9160 . #x6172)	;CJK UNIFIED IDEOGRAPH
                                (#x9161 . #x6173)	;CJK UNIFIED IDEOGRAPH
                                (#x9162 . #x6174)	;CJK UNIFIED IDEOGRAPH
                                (#x9163 . #x6176)	;CJK UNIFIED IDEOGRAPH
                                (#x9164 . #x6178)	;CJK UNIFIED IDEOGRAPH
                                (#x9165 . #x6179)	;CJK UNIFIED IDEOGRAPH
                                (#x9166 . #x617A)	;CJK UNIFIED IDEOGRAPH
                                (#x9167 . #x617B)	;CJK UNIFIED IDEOGRAPH
                                (#x9168 . #x617C)	;CJK UNIFIED IDEOGRAPH
                                (#x9169 . #x617D)	;CJK UNIFIED IDEOGRAPH
                                (#x916A . #x617E)	;CJK UNIFIED IDEOGRAPH
                                (#x916B . #x617F)	;CJK UNIFIED IDEOGRAPH
                                (#x916C . #x6180)	;CJK UNIFIED IDEOGRAPH
                                (#x916D . #x6181)	;CJK UNIFIED IDEOGRAPH
                                (#x916E . #x6182)	;CJK UNIFIED IDEOGRAPH
                                (#x916F . #x6183)	;CJK UNIFIED IDEOGRAPH
                                (#x9170 . #x6184)	;CJK UNIFIED IDEOGRAPH
                                (#x9171 . #x6185)	;CJK UNIFIED IDEOGRAPH
                                (#x9172 . #x6186)	;CJK UNIFIED IDEOGRAPH
                                (#x9173 . #x6187)	;CJK UNIFIED IDEOGRAPH
                                (#x9174 . #x6188)	;CJK UNIFIED IDEOGRAPH
                                (#x9175 . #x6189)	;CJK UNIFIED IDEOGRAPH
                                (#x9176 . #x618A)	;CJK UNIFIED IDEOGRAPH
                                (#x9177 . #x618C)	;CJK UNIFIED IDEOGRAPH
                                (#x9178 . #x618D)	;CJK UNIFIED IDEOGRAPH
                                (#x9179 . #x618F)	;CJK UNIFIED IDEOGRAPH
                                (#x917A . #x6190)	;CJK UNIFIED IDEOGRAPH
                                (#x917B . #x6191)	;CJK UNIFIED IDEOGRAPH
                                (#x917C . #x6192)	;CJK UNIFIED IDEOGRAPH
                                (#x917D . #x6193)	;CJK UNIFIED IDEOGRAPH
                                (#x917E . #x6195)	;CJK UNIFIED IDEOGRAPH
                                (#x9180 . #x6196)	;CJK UNIFIED IDEOGRAPH
                                (#x9181 . #x6197)	;CJK UNIFIED IDEOGRAPH
                                (#x9182 . #x6198)	;CJK UNIFIED IDEOGRAPH
                                (#x9183 . #x6199)	;CJK UNIFIED IDEOGRAPH
                                (#x9184 . #x619A)	;CJK UNIFIED IDEOGRAPH
                                (#x9185 . #x619B)	;CJK UNIFIED IDEOGRAPH
                                (#x9186 . #x619C)	;CJK UNIFIED IDEOGRAPH
                                (#x9187 . #x619E)	;CJK UNIFIED IDEOGRAPH
                                (#x9188 . #x619F)	;CJK UNIFIED IDEOGRAPH
                                (#x9189 . #x61A0)	;CJK UNIFIED IDEOGRAPH
                                (#x918A . #x61A1)	;CJK UNIFIED IDEOGRAPH
                                (#x918B . #x61A2)	;CJK UNIFIED IDEOGRAPH
                                (#x918C . #x61A3)	;CJK UNIFIED IDEOGRAPH
                                (#x918D . #x61A4)	;CJK UNIFIED IDEOGRAPH
                                (#x918E . #x61A5)	;CJK UNIFIED IDEOGRAPH
                                (#x918F . #x61A6)	;CJK UNIFIED IDEOGRAPH
                                (#x9190 . #x61AA)	;CJK UNIFIED IDEOGRAPH
                                (#x9191 . #x61AB)	;CJK UNIFIED IDEOGRAPH
                                (#x9192 . #x61AD)	;CJK UNIFIED IDEOGRAPH
                                (#x9193 . #x61AE)	;CJK UNIFIED IDEOGRAPH
                                (#x9194 . #x61AF)	;CJK UNIFIED IDEOGRAPH
                                (#x9195 . #x61B0)	;CJK UNIFIED IDEOGRAPH
                                (#x9196 . #x61B1)	;CJK UNIFIED IDEOGRAPH
                                (#x9197 . #x61B2)	;CJK UNIFIED IDEOGRAPH
                                (#x9198 . #x61B3)	;CJK UNIFIED IDEOGRAPH
                                (#x9199 . #x61B4)	;CJK UNIFIED IDEOGRAPH
                                (#x919A . #x61B5)	;CJK UNIFIED IDEOGRAPH
                                (#x919B . #x61B6)	;CJK UNIFIED IDEOGRAPH
                                (#x919C . #x61B8)	;CJK UNIFIED IDEOGRAPH
                                (#x919D . #x61B9)	;CJK UNIFIED IDEOGRAPH
                                (#x919E . #x61BA)	;CJK UNIFIED IDEOGRAPH
                                (#x919F . #x61BB)	;CJK UNIFIED IDEOGRAPH
                                (#x91A0 . #x61BC)	;CJK UNIFIED IDEOGRAPH
                                (#x91A1 . #x61BD)	;CJK UNIFIED IDEOGRAPH
                                (#x91A2 . #x61BF)	;CJK UNIFIED IDEOGRAPH
                                (#x91A3 . #x61C0)	;CJK UNIFIED IDEOGRAPH
                                (#x91A4 . #x61C1)	;CJK UNIFIED IDEOGRAPH
                                (#x91A5 . #x61C3)	;CJK UNIFIED IDEOGRAPH
                                (#x91A6 . #x61C4)	;CJK UNIFIED IDEOGRAPH
                                (#x91A7 . #x61C5)	;CJK UNIFIED IDEOGRAPH
                                (#x91A8 . #x61C6)	;CJK UNIFIED IDEOGRAPH
                                (#x91A9 . #x61C7)	;CJK UNIFIED IDEOGRAPH
                                (#x91AA . #x61C9)	;CJK UNIFIED IDEOGRAPH
                                (#x91AB . #x61CC)	;CJK UNIFIED IDEOGRAPH
                                (#x91AC . #x61CD)	;CJK UNIFIED IDEOGRAPH
                                (#x91AD . #x61CE)	;CJK UNIFIED IDEOGRAPH
                                (#x91AE . #x61CF)	;CJK UNIFIED IDEOGRAPH
                                (#x91AF . #x61D0)	;CJK UNIFIED IDEOGRAPH
                                (#x91B0 . #x61D3)	;CJK UNIFIED IDEOGRAPH
                                (#x91B1 . #x61D5)	;CJK UNIFIED IDEOGRAPH
                                (#x91B2 . #x61D6)	;CJK UNIFIED IDEOGRAPH
                                (#x91B3 . #x61D7)	;CJK UNIFIED IDEOGRAPH
                                (#x91B4 . #x61D8)	;CJK UNIFIED IDEOGRAPH
                                (#x91B5 . #x61D9)	;CJK UNIFIED IDEOGRAPH
                                (#x91B6 . #x61DA)	;CJK UNIFIED IDEOGRAPH
                                (#x91B7 . #x61DB)	;CJK UNIFIED IDEOGRAPH
                                (#x91B8 . #x61DC)	;CJK UNIFIED IDEOGRAPH
                                (#x91B9 . #x61DD)	;CJK UNIFIED IDEOGRAPH
                                (#x91BA . #x61DE)	;CJK UNIFIED IDEOGRAPH
                                (#x91BB . #x61DF)	;CJK UNIFIED IDEOGRAPH
                                (#x91BC . #x61E0)	;CJK UNIFIED IDEOGRAPH
                                (#x91BD . #x61E1)	;CJK UNIFIED IDEOGRAPH
                                (#x91BE . #x61E2)	;CJK UNIFIED IDEOGRAPH
                                (#x91BF . #x61E3)	;CJK UNIFIED IDEOGRAPH
                                (#x91C0 . #x61E4)	;CJK UNIFIED IDEOGRAPH
                                (#x91C1 . #x61E5)	;CJK UNIFIED IDEOGRAPH
                                (#x91C2 . #x61E7)	;CJK UNIFIED IDEOGRAPH
                                (#x91C3 . #x61E8)	;CJK UNIFIED IDEOGRAPH
                                (#x91C4 . #x61E9)	;CJK UNIFIED IDEOGRAPH
                                (#x91C5 . #x61EA)	;CJK UNIFIED IDEOGRAPH
                                (#x91C6 . #x61EB)	;CJK UNIFIED IDEOGRAPH
                                (#x91C7 . #x61EC)	;CJK UNIFIED IDEOGRAPH
                                (#x91C8 . #x61ED)	;CJK UNIFIED IDEOGRAPH
                                (#x91C9 . #x61EE)	;CJK UNIFIED IDEOGRAPH
                                (#x91CA . #x61EF)	;CJK UNIFIED IDEOGRAPH
                                (#x91CB . #x61F0)	;CJK UNIFIED IDEOGRAPH
                                (#x91CC . #x61F1)	;CJK UNIFIED IDEOGRAPH
                                (#x91CD . #x61F2)	;CJK UNIFIED IDEOGRAPH
                                (#x91CE . #x61F3)	;CJK UNIFIED IDEOGRAPH
                                (#x91CF . #x61F4)	;CJK UNIFIED IDEOGRAPH
                                (#x91D0 . #x61F6)	;CJK UNIFIED IDEOGRAPH
                                (#x91D1 . #x61F7)	;CJK UNIFIED IDEOGRAPH
                                (#x91D2 . #x61F8)	;CJK UNIFIED IDEOGRAPH
                                (#x91D3 . #x61F9)	;CJK UNIFIED IDEOGRAPH
                                (#x91D4 . #x61FA)	;CJK UNIFIED IDEOGRAPH
                                (#x91D5 . #x61FB)	;CJK UNIFIED IDEOGRAPH
                                (#x91D6 . #x61FC)	;CJK UNIFIED IDEOGRAPH
                                (#x91D7 . #x61FD)	;CJK UNIFIED IDEOGRAPH
                                (#x91D8 . #x61FE)	;CJK UNIFIED IDEOGRAPH
                                (#x91D9 . #x6200)	;CJK UNIFIED IDEOGRAPH
                                (#x91DA . #x6201)	;CJK UNIFIED IDEOGRAPH
                                (#x91DB . #x6202)	;CJK UNIFIED IDEOGRAPH
                                (#x91DC . #x6203)	;CJK UNIFIED IDEOGRAPH
                                (#x91DD . #x6204)	;CJK UNIFIED IDEOGRAPH
                                (#x91DE . #x6205)	;CJK UNIFIED IDEOGRAPH
                                (#x91DF . #x6207)	;CJK UNIFIED IDEOGRAPH
                                (#x91E0 . #x6209)	;CJK UNIFIED IDEOGRAPH
                                (#x91E1 . #x6213)	;CJK UNIFIED IDEOGRAPH
                                (#x91E2 . #x6214)	;CJK UNIFIED IDEOGRAPH
                                (#x91E3 . #x6219)	;CJK UNIFIED IDEOGRAPH
                                (#x91E4 . #x621C)	;CJK UNIFIED IDEOGRAPH
                                (#x91E5 . #x621D)	;CJK UNIFIED IDEOGRAPH
                                (#x91E6 . #x621E)	;CJK UNIFIED IDEOGRAPH
                                (#x91E7 . #x6220)	;CJK UNIFIED IDEOGRAPH
                                (#x91E8 . #x6223)	;CJK UNIFIED IDEOGRAPH
                                (#x91E9 . #x6226)	;CJK UNIFIED IDEOGRAPH
                                (#x91EA . #x6227)	;CJK UNIFIED IDEOGRAPH
                                (#x91EB . #x6228)	;CJK UNIFIED IDEOGRAPH
                                (#x91EC . #x6229)	;CJK UNIFIED IDEOGRAPH
                                (#x91ED . #x622B)	;CJK UNIFIED IDEOGRAPH
                                (#x91EE . #x622D)	;CJK UNIFIED IDEOGRAPH
                                (#x91EF . #x622F)	;CJK UNIFIED IDEOGRAPH
                                (#x91F0 . #x6230)	;CJK UNIFIED IDEOGRAPH
                                (#x91F1 . #x6231)	;CJK UNIFIED IDEOGRAPH
                                (#x91F2 . #x6232)	;CJK UNIFIED IDEOGRAPH
                                (#x91F3 . #x6235)	;CJK UNIFIED IDEOGRAPH
                                (#x91F4 . #x6236)	;CJK UNIFIED IDEOGRAPH
                                (#x91F5 . #x6238)	;CJK UNIFIED IDEOGRAPH
                                (#x91F6 . #x6239)	;CJK UNIFIED IDEOGRAPH
                                (#x91F7 . #x623A)	;CJK UNIFIED IDEOGRAPH
                                (#x91F8 . #x623B)	;CJK UNIFIED IDEOGRAPH
                                (#x91F9 . #x623C)	;CJK UNIFIED IDEOGRAPH
                                (#x91FA . #x6242)	;CJK UNIFIED IDEOGRAPH
                                (#x91FB . #x6244)	;CJK UNIFIED IDEOGRAPH
                                (#x91FC . #x6245)	;CJK UNIFIED IDEOGRAPH
                                (#x91FD . #x6246)	;CJK UNIFIED IDEOGRAPH
                                (#x91FE . #x624A)	;CJK UNIFIED IDEOGRAPH
                                (#x9240 . #x624F)	;CJK UNIFIED IDEOGRAPH
                                (#x9241 . #x6250)	;CJK UNIFIED IDEOGRAPH
                                (#x9242 . #x6255)	;CJK UNIFIED IDEOGRAPH
                                (#x9243 . #x6256)	;CJK UNIFIED IDEOGRAPH
                                (#x9244 . #x6257)	;CJK UNIFIED IDEOGRAPH
                                (#x9245 . #x6259)	;CJK UNIFIED IDEOGRAPH
                                (#x9246 . #x625A)	;CJK UNIFIED IDEOGRAPH
                                (#x9247 . #x625C)	;CJK UNIFIED IDEOGRAPH
                                (#x9248 . #x625D)	;CJK UNIFIED IDEOGRAPH
                                (#x9249 . #x625E)	;CJK UNIFIED IDEOGRAPH
                                (#x924A . #x625F)	;CJK UNIFIED IDEOGRAPH
                                (#x924B . #x6260)	;CJK UNIFIED IDEOGRAPH
                                (#x924C . #x6261)	;CJK UNIFIED IDEOGRAPH
                                (#x924D . #x6262)	;CJK UNIFIED IDEOGRAPH
                                (#x924E . #x6264)	;CJK UNIFIED IDEOGRAPH
                                (#x924F . #x6265)	;CJK UNIFIED IDEOGRAPH
                                (#x9250 . #x6268)	;CJK UNIFIED IDEOGRAPH
                                (#x9251 . #x6271)	;CJK UNIFIED IDEOGRAPH
                                (#x9252 . #x6272)	;CJK UNIFIED IDEOGRAPH
                                (#x9253 . #x6274)	;CJK UNIFIED IDEOGRAPH
                                (#x9254 . #x6275)	;CJK UNIFIED IDEOGRAPH
                                (#x9255 . #x6277)	;CJK UNIFIED IDEOGRAPH
                                (#x9256 . #x6278)	;CJK UNIFIED IDEOGRAPH
                                (#x9257 . #x627A)	;CJK UNIFIED IDEOGRAPH
                                (#x9258 . #x627B)	;CJK UNIFIED IDEOGRAPH
                                (#x9259 . #x627D)	;CJK UNIFIED IDEOGRAPH
                                (#x925A . #x6281)	;CJK UNIFIED IDEOGRAPH
                                (#x925B . #x6282)	;CJK UNIFIED IDEOGRAPH
                                (#x925C . #x6283)	;CJK UNIFIED IDEOGRAPH
                                (#x925D . #x6285)	;CJK UNIFIED IDEOGRAPH
                                (#x925E . #x6286)	;CJK UNIFIED IDEOGRAPH
                                (#x925F . #x6287)	;CJK UNIFIED IDEOGRAPH
                                (#x9260 . #x6288)	;CJK UNIFIED IDEOGRAPH
                                (#x9261 . #x628B)	;CJK UNIFIED IDEOGRAPH
                                (#x9262 . #x628C)	;CJK UNIFIED IDEOGRAPH
                                (#x9263 . #x628D)	;CJK UNIFIED IDEOGRAPH
                                (#x9264 . #x628E)	;CJK UNIFIED IDEOGRAPH
                                (#x9265 . #x628F)	;CJK UNIFIED IDEOGRAPH
                                (#x9266 . #x6290)	;CJK UNIFIED IDEOGRAPH
                                (#x9267 . #x6294)	;CJK UNIFIED IDEOGRAPH
                                (#x9268 . #x6299)	;CJK UNIFIED IDEOGRAPH
                                (#x9269 . #x629C)	;CJK UNIFIED IDEOGRAPH
                                (#x926A . #x629D)	;CJK UNIFIED IDEOGRAPH
                                (#x926B . #x629E)	;CJK UNIFIED IDEOGRAPH
                                (#x926C . #x62A3)	;CJK UNIFIED IDEOGRAPH
                                (#x926D . #x62A6)	;CJK UNIFIED IDEOGRAPH
                                (#x926E . #x62A7)	;CJK UNIFIED IDEOGRAPH
                                (#x926F . #x62A9)	;CJK UNIFIED IDEOGRAPH
                                (#x9270 . #x62AA)	;CJK UNIFIED IDEOGRAPH
                                (#x9271 . #x62AD)	;CJK UNIFIED IDEOGRAPH
                                (#x9272 . #x62AE)	;CJK UNIFIED IDEOGRAPH
                                (#x9273 . #x62AF)	;CJK UNIFIED IDEOGRAPH
                                (#x9274 . #x62B0)	;CJK UNIFIED IDEOGRAPH
                                (#x9275 . #x62B2)	;CJK UNIFIED IDEOGRAPH
                                (#x9276 . #x62B3)	;CJK UNIFIED IDEOGRAPH
                                (#x9277 . #x62B4)	;CJK UNIFIED IDEOGRAPH
                                (#x9278 . #x62B6)	;CJK UNIFIED IDEOGRAPH
                                (#x9279 . #x62B7)	;CJK UNIFIED IDEOGRAPH
                                (#x927A . #x62B8)	;CJK UNIFIED IDEOGRAPH
                                (#x927B . #x62BA)	;CJK UNIFIED IDEOGRAPH
                                (#x927C . #x62BE)	;CJK UNIFIED IDEOGRAPH
                                (#x927D . #x62C0)	;CJK UNIFIED IDEOGRAPH
                                (#x927E . #x62C1)	;CJK UNIFIED IDEOGRAPH
                                (#x9280 . #x62C3)	;CJK UNIFIED IDEOGRAPH
                                (#x9281 . #x62CB)	;CJK UNIFIED IDEOGRAPH
                                (#x9282 . #x62CF)	;CJK UNIFIED IDEOGRAPH
                                (#x9283 . #x62D1)	;CJK UNIFIED IDEOGRAPH
                                (#x9284 . #x62D5)	;CJK UNIFIED IDEOGRAPH
                                (#x9285 . #x62DD)	;CJK UNIFIED IDEOGRAPH
                                (#x9286 . #x62DE)	;CJK UNIFIED IDEOGRAPH
                                (#x9287 . #x62E0)	;CJK UNIFIED IDEOGRAPH
                                (#x9288 . #x62E1)	;CJK UNIFIED IDEOGRAPH
                                (#x9289 . #x62E4)	;CJK UNIFIED IDEOGRAPH
                                (#x928A . #x62EA)	;CJK UNIFIED IDEOGRAPH
                                (#x928B . #x62EB)	;CJK UNIFIED IDEOGRAPH
                                (#x928C . #x62F0)	;CJK UNIFIED IDEOGRAPH
                                (#x928D . #x62F2)	;CJK UNIFIED IDEOGRAPH
                                (#x928E . #x62F5)	;CJK UNIFIED IDEOGRAPH
                                (#x928F . #x62F8)	;CJK UNIFIED IDEOGRAPH
                                (#x9290 . #x62F9)	;CJK UNIFIED IDEOGRAPH
                                (#x9291 . #x62FA)	;CJK UNIFIED IDEOGRAPH
                                (#x9292 . #x62FB)	;CJK UNIFIED IDEOGRAPH
                                (#x9293 . #x6300)	;CJK UNIFIED IDEOGRAPH
                                (#x9294 . #x6303)	;CJK UNIFIED IDEOGRAPH
                                (#x9295 . #x6304)	;CJK UNIFIED IDEOGRAPH
                                (#x9296 . #x6305)	;CJK UNIFIED IDEOGRAPH
                                (#x9297 . #x6306)	;CJK UNIFIED IDEOGRAPH
                                (#x9298 . #x630A)	;CJK UNIFIED IDEOGRAPH
                                (#x9299 . #x630B)	;CJK UNIFIED IDEOGRAPH
                                (#x929A . #x630C)	;CJK UNIFIED IDEOGRAPH
                                (#x929B . #x630D)	;CJK UNIFIED IDEOGRAPH
                                (#x929C . #x630F)	;CJK UNIFIED IDEOGRAPH
                                (#x929D . #x6310)	;CJK UNIFIED IDEOGRAPH
                                (#x929E . #x6312)	;CJK UNIFIED IDEOGRAPH
                                (#x929F . #x6313)	;CJK UNIFIED IDEOGRAPH
                                (#x92A0 . #x6314)	;CJK UNIFIED IDEOGRAPH
                                (#x92A1 . #x6315)	;CJK UNIFIED IDEOGRAPH
                                (#x92A2 . #x6317)	;CJK UNIFIED IDEOGRAPH
                                (#x92A3 . #x6318)	;CJK UNIFIED IDEOGRAPH
                                (#x92A4 . #x6319)	;CJK UNIFIED IDEOGRAPH
                                (#x92A5 . #x631C)	;CJK UNIFIED IDEOGRAPH
                                (#x92A6 . #x6326)	;CJK UNIFIED IDEOGRAPH
                                (#x92A7 . #x6327)	;CJK UNIFIED IDEOGRAPH
                                (#x92A8 . #x6329)	;CJK UNIFIED IDEOGRAPH
                                (#x92A9 . #x632C)	;CJK UNIFIED IDEOGRAPH
                                (#x92AA . #x632D)	;CJK UNIFIED IDEOGRAPH
                                (#x92AB . #x632E)	;CJK UNIFIED IDEOGRAPH
                                (#x92AC . #x6330)	;CJK UNIFIED IDEOGRAPH
                                (#x92AD . #x6331)	;CJK UNIFIED IDEOGRAPH
                                (#x92AE . #x6333)	;CJK UNIFIED IDEOGRAPH
                                (#x92AF . #x6334)	;CJK UNIFIED IDEOGRAPH
                                (#x92B0 . #x6335)	;CJK UNIFIED IDEOGRAPH
                                (#x92B1 . #x6336)	;CJK UNIFIED IDEOGRAPH
                                (#x92B2 . #x6337)	;CJK UNIFIED IDEOGRAPH
                                (#x92B3 . #x6338)	;CJK UNIFIED IDEOGRAPH
                                (#x92B4 . #x633B)	;CJK UNIFIED IDEOGRAPH
                                (#x92B5 . #x633C)	;CJK UNIFIED IDEOGRAPH
                                (#x92B6 . #x633E)	;CJK UNIFIED IDEOGRAPH
                                (#x92B7 . #x633F)	;CJK UNIFIED IDEOGRAPH
                                (#x92B8 . #x6340)	;CJK UNIFIED IDEOGRAPH
                                (#x92B9 . #x6341)	;CJK UNIFIED IDEOGRAPH
                                (#x92BA . #x6344)	;CJK UNIFIED IDEOGRAPH
                                (#x92BB . #x6347)	;CJK UNIFIED IDEOGRAPH
                                (#x92BC . #x6348)	;CJK UNIFIED IDEOGRAPH
                                (#x92BD . #x634A)	;CJK UNIFIED IDEOGRAPH
                                (#x92BE . #x6351)	;CJK UNIFIED IDEOGRAPH
                                (#x92BF . #x6352)	;CJK UNIFIED IDEOGRAPH
                                (#x92C0 . #x6353)	;CJK UNIFIED IDEOGRAPH
                                (#x92C1 . #x6354)	;CJK UNIFIED IDEOGRAPH
                                (#x92C2 . #x6356)	;CJK UNIFIED IDEOGRAPH
                                (#x92C3 . #x6357)	;CJK UNIFIED IDEOGRAPH
                                (#x92C4 . #x6358)	;CJK UNIFIED IDEOGRAPH
                                (#x92C5 . #x6359)	;CJK UNIFIED IDEOGRAPH
                                (#x92C6 . #x635A)	;CJK UNIFIED IDEOGRAPH
                                (#x92C7 . #x635B)	;CJK UNIFIED IDEOGRAPH
                                (#x92C8 . #x635C)	;CJK UNIFIED IDEOGRAPH
                                (#x92C9 . #x635D)	;CJK UNIFIED IDEOGRAPH
                                (#x92CA . #x6360)	;CJK UNIFIED IDEOGRAPH
                                (#x92CB . #x6364)	;CJK UNIFIED IDEOGRAPH
                                (#x92CC . #x6365)	;CJK UNIFIED IDEOGRAPH
                                (#x92CD . #x6366)	;CJK UNIFIED IDEOGRAPH
                                (#x92CE . #x6368)	;CJK UNIFIED IDEOGRAPH
                                (#x92CF . #x636A)	;CJK UNIFIED IDEOGRAPH
                                (#x92D0 . #x636B)	;CJK UNIFIED IDEOGRAPH
                                (#x92D1 . #x636C)	;CJK UNIFIED IDEOGRAPH
                                (#x92D2 . #x636F)	;CJK UNIFIED IDEOGRAPH
                                (#x92D3 . #x6370)	;CJK UNIFIED IDEOGRAPH
                                (#x92D4 . #x6372)	;CJK UNIFIED IDEOGRAPH
                                (#x92D5 . #x6373)	;CJK UNIFIED IDEOGRAPH
                                (#x92D6 . #x6374)	;CJK UNIFIED IDEOGRAPH
                                (#x92D7 . #x6375)	;CJK UNIFIED IDEOGRAPH
                                (#x92D8 . #x6378)	;CJK UNIFIED IDEOGRAPH
                                (#x92D9 . #x6379)	;CJK UNIFIED IDEOGRAPH
                                (#x92DA . #x637C)	;CJK UNIFIED IDEOGRAPH
                                (#x92DB . #x637D)	;CJK UNIFIED IDEOGRAPH
                                (#x92DC . #x637E)	;CJK UNIFIED IDEOGRAPH
                                (#x92DD . #x637F)	;CJK UNIFIED IDEOGRAPH
                                (#x92DE . #x6381)	;CJK UNIFIED IDEOGRAPH
                                (#x92DF . #x6383)	;CJK UNIFIED IDEOGRAPH
                                (#x92E0 . #x6384)	;CJK UNIFIED IDEOGRAPH
                                (#x92E1 . #x6385)	;CJK UNIFIED IDEOGRAPH
                                (#x92E2 . #x6386)	;CJK UNIFIED IDEOGRAPH
                                (#x92E3 . #x638B)	;CJK UNIFIED IDEOGRAPH
                                (#x92E4 . #x638D)	;CJK UNIFIED IDEOGRAPH
                                (#x92E5 . #x6391)	;CJK UNIFIED IDEOGRAPH
                                (#x92E6 . #x6393)	;CJK UNIFIED IDEOGRAPH
                                (#x92E7 . #x6394)	;CJK UNIFIED IDEOGRAPH
                                (#x92E8 . #x6395)	;CJK UNIFIED IDEOGRAPH
                                (#x92E9 . #x6397)	;CJK UNIFIED IDEOGRAPH
                                (#x92EA . #x6399)	;CJK UNIFIED IDEOGRAPH
                                (#x92EB . #x639A)	;CJK UNIFIED IDEOGRAPH
                                (#x92EC . #x639B)	;CJK UNIFIED IDEOGRAPH
                                (#x92ED . #x639C)	;CJK UNIFIED IDEOGRAPH
                                (#x92EE . #x639D)	;CJK UNIFIED IDEOGRAPH
                                (#x92EF . #x639E)	;CJK UNIFIED IDEOGRAPH
                                (#x92F0 . #x639F)	;CJK UNIFIED IDEOGRAPH
                                (#x92F1 . #x63A1)	;CJK UNIFIED IDEOGRAPH
                                (#x92F2 . #x63A4)	;CJK UNIFIED IDEOGRAPH
                                (#x92F3 . #x63A6)	;CJK UNIFIED IDEOGRAPH
                                (#x92F4 . #x63AB)	;CJK UNIFIED IDEOGRAPH
                                (#x92F5 . #x63AF)	;CJK UNIFIED IDEOGRAPH
                                (#x92F6 . #x63B1)	;CJK UNIFIED IDEOGRAPH
                                (#x92F7 . #x63B2)	;CJK UNIFIED IDEOGRAPH
                                (#x92F8 . #x63B5)	;CJK UNIFIED IDEOGRAPH
                                (#x92F9 . #x63B6)	;CJK UNIFIED IDEOGRAPH
                                (#x92FA . #x63B9)	;CJK UNIFIED IDEOGRAPH
                                (#x92FB . #x63BB)	;CJK UNIFIED IDEOGRAPH
                                (#x92FC . #x63BD)	;CJK UNIFIED IDEOGRAPH
                                (#x92FD . #x63BF)	;CJK UNIFIED IDEOGRAPH
                                (#x92FE . #x63C0)	;CJK UNIFIED IDEOGRAPH
                                (#x9340 . #x63C1)	;CJK UNIFIED IDEOGRAPH
                                (#x9341 . #x63C2)	;CJK UNIFIED IDEOGRAPH
                                (#x9342 . #x63C3)	;CJK UNIFIED IDEOGRAPH
                                (#x9343 . #x63C5)	;CJK UNIFIED IDEOGRAPH
                                (#x9344 . #x63C7)	;CJK UNIFIED IDEOGRAPH
                                (#x9345 . #x63C8)	;CJK UNIFIED IDEOGRAPH
                                (#x9346 . #x63CA)	;CJK UNIFIED IDEOGRAPH
                                (#x9347 . #x63CB)	;CJK UNIFIED IDEOGRAPH
                                (#x9348 . #x63CC)	;CJK UNIFIED IDEOGRAPH
                                (#x9349 . #x63D1)	;CJK UNIFIED IDEOGRAPH
                                (#x934A . #x63D3)	;CJK UNIFIED IDEOGRAPH
                                (#x934B . #x63D4)	;CJK UNIFIED IDEOGRAPH
                                (#x934C . #x63D5)	;CJK UNIFIED IDEOGRAPH
                                (#x934D . #x63D7)	;CJK UNIFIED IDEOGRAPH
                                (#x934E . #x63D8)	;CJK UNIFIED IDEOGRAPH
                                (#x934F . #x63D9)	;CJK UNIFIED IDEOGRAPH
                                (#x9350 . #x63DA)	;CJK UNIFIED IDEOGRAPH
                                (#x9351 . #x63DB)	;CJK UNIFIED IDEOGRAPH
                                (#x9352 . #x63DC)	;CJK UNIFIED IDEOGRAPH
                                (#x9353 . #x63DD)	;CJK UNIFIED IDEOGRAPH
                                (#x9354 . #x63DF)	;CJK UNIFIED IDEOGRAPH
                                (#x9355 . #x63E2)	;CJK UNIFIED IDEOGRAPH
                                (#x9356 . #x63E4)	;CJK UNIFIED IDEOGRAPH
                                (#x9357 . #x63E5)	;CJK UNIFIED IDEOGRAPH
                                (#x9358 . #x63E6)	;CJK UNIFIED IDEOGRAPH
                                (#x9359 . #x63E7)	;CJK UNIFIED IDEOGRAPH
                                (#x935A . #x63E8)	;CJK UNIFIED IDEOGRAPH
                                (#x935B . #x63EB)	;CJK UNIFIED IDEOGRAPH
                                (#x935C . #x63EC)	;CJK UNIFIED IDEOGRAPH
                                (#x935D . #x63EE)	;CJK UNIFIED IDEOGRAPH
                                (#x935E . #x63EF)	;CJK UNIFIED IDEOGRAPH
                                (#x935F . #x63F0)	;CJK UNIFIED IDEOGRAPH
                                (#x9360 . #x63F1)	;CJK UNIFIED IDEOGRAPH
                                (#x9361 . #x63F3)	;CJK UNIFIED IDEOGRAPH
                                (#x9362 . #x63F5)	;CJK UNIFIED IDEOGRAPH
                                (#x9363 . #x63F7)	;CJK UNIFIED IDEOGRAPH
                                (#x9364 . #x63F9)	;CJK UNIFIED IDEOGRAPH
                                (#x9365 . #x63FA)	;CJK UNIFIED IDEOGRAPH
                                (#x9366 . #x63FB)	;CJK UNIFIED IDEOGRAPH
                                (#x9367 . #x63FC)	;CJK UNIFIED IDEOGRAPH
                                (#x9368 . #x63FE)	;CJK UNIFIED IDEOGRAPH
                                (#x9369 . #x6403)	;CJK UNIFIED IDEOGRAPH
                                (#x936A . #x6404)	;CJK UNIFIED IDEOGRAPH
                                (#x936B . #x6406)	;CJK UNIFIED IDEOGRAPH
                                (#x936C . #x6407)	;CJK UNIFIED IDEOGRAPH
                                (#x936D . #x6408)	;CJK UNIFIED IDEOGRAPH
                                (#x936E . #x6409)	;CJK UNIFIED IDEOGRAPH
                                (#x936F . #x640A)	;CJK UNIFIED IDEOGRAPH
                                (#x9370 . #x640D)	;CJK UNIFIED IDEOGRAPH
                                (#x9371 . #x640E)	;CJK UNIFIED IDEOGRAPH
                                (#x9372 . #x6411)	;CJK UNIFIED IDEOGRAPH
                                (#x9373 . #x6412)	;CJK UNIFIED IDEOGRAPH
                                (#x9374 . #x6415)	;CJK UNIFIED IDEOGRAPH
                                (#x9375 . #x6416)	;CJK UNIFIED IDEOGRAPH
                                (#x9376 . #x6417)	;CJK UNIFIED IDEOGRAPH
                                (#x9377 . #x6418)	;CJK UNIFIED IDEOGRAPH
                                (#x9378 . #x6419)	;CJK UNIFIED IDEOGRAPH
                                (#x9379 . #x641A)	;CJK UNIFIED IDEOGRAPH
                                (#x937A . #x641D)	;CJK UNIFIED IDEOGRAPH
                                (#x937B . #x641F)	;CJK UNIFIED IDEOGRAPH
                                (#x937C . #x6422)	;CJK UNIFIED IDEOGRAPH
                                (#x937D . #x6423)	;CJK UNIFIED IDEOGRAPH
                                (#x937E . #x6424)	;CJK UNIFIED IDEOGRAPH
                                (#x9380 . #x6425)	;CJK UNIFIED IDEOGRAPH
                                (#x9381 . #x6427)	;CJK UNIFIED IDEOGRAPH
                                (#x9382 . #x6428)	;CJK UNIFIED IDEOGRAPH
                                (#x9383 . #x6429)	;CJK UNIFIED IDEOGRAPH
                                (#x9384 . #x642B)	;CJK UNIFIED IDEOGRAPH
                                (#x9385 . #x642E)	;CJK UNIFIED IDEOGRAPH
                                (#x9386 . #x642F)	;CJK UNIFIED IDEOGRAPH
                                (#x9387 . #x6430)	;CJK UNIFIED IDEOGRAPH
                                (#x9388 . #x6431)	;CJK UNIFIED IDEOGRAPH
                                (#x9389 . #x6432)	;CJK UNIFIED IDEOGRAPH
                                (#x938A . #x6433)	;CJK UNIFIED IDEOGRAPH
                                (#x938B . #x6435)	;CJK UNIFIED IDEOGRAPH
                                (#x938C . #x6436)	;CJK UNIFIED IDEOGRAPH
                                (#x938D . #x6437)	;CJK UNIFIED IDEOGRAPH
                                (#x938E . #x6438)	;CJK UNIFIED IDEOGRAPH
                                (#x938F . #x6439)	;CJK UNIFIED IDEOGRAPH
                                (#x9390 . #x643B)	;CJK UNIFIED IDEOGRAPH
                                (#x9391 . #x643C)	;CJK UNIFIED IDEOGRAPH
                                (#x9392 . #x643E)	;CJK UNIFIED IDEOGRAPH
                                (#x9393 . #x6440)	;CJK UNIFIED IDEOGRAPH
                                (#x9394 . #x6442)	;CJK UNIFIED IDEOGRAPH
                                (#x9395 . #x6443)	;CJK UNIFIED IDEOGRAPH
                                (#x9396 . #x6449)	;CJK UNIFIED IDEOGRAPH
                                (#x9397 . #x644B)	;CJK UNIFIED IDEOGRAPH
                                (#x9398 . #x644C)	;CJK UNIFIED IDEOGRAPH
                                (#x9399 . #x644D)	;CJK UNIFIED IDEOGRAPH
                                (#x939A . #x644E)	;CJK UNIFIED IDEOGRAPH
                                (#x939B . #x644F)	;CJK UNIFIED IDEOGRAPH
                                (#x939C . #x6450)	;CJK UNIFIED IDEOGRAPH
                                (#x939D . #x6451)	;CJK UNIFIED IDEOGRAPH
                                (#x939E . #x6453)	;CJK UNIFIED IDEOGRAPH
                                (#x939F . #x6455)	;CJK UNIFIED IDEOGRAPH
                                (#x93A0 . #x6456)	;CJK UNIFIED IDEOGRAPH
                                (#x93A1 . #x6457)	;CJK UNIFIED IDEOGRAPH
                                (#x93A2 . #x6459)	;CJK UNIFIED IDEOGRAPH
                                (#x93A3 . #x645A)	;CJK UNIFIED IDEOGRAPH
                                (#x93A4 . #x645B)	;CJK UNIFIED IDEOGRAPH
                                (#x93A5 . #x645C)	;CJK UNIFIED IDEOGRAPH
                                (#x93A6 . #x645D)	;CJK UNIFIED IDEOGRAPH
                                (#x93A7 . #x645F)	;CJK UNIFIED IDEOGRAPH
                                (#x93A8 . #x6460)	;CJK UNIFIED IDEOGRAPH
                                (#x93A9 . #x6461)	;CJK UNIFIED IDEOGRAPH
                                (#x93AA . #x6462)	;CJK UNIFIED IDEOGRAPH
                                (#x93AB . #x6463)	;CJK UNIFIED IDEOGRAPH
                                (#x93AC . #x6464)	;CJK UNIFIED IDEOGRAPH
                                (#x93AD . #x6465)	;CJK UNIFIED IDEOGRAPH
                                (#x93AE . #x6466)	;CJK UNIFIED IDEOGRAPH
                                (#x93AF . #x6468)	;CJK UNIFIED IDEOGRAPH
                                (#x93B0 . #x646A)	;CJK UNIFIED IDEOGRAPH
                                (#x93B1 . #x646B)	;CJK UNIFIED IDEOGRAPH
                                (#x93B2 . #x646C)	;CJK UNIFIED IDEOGRAPH
                                (#x93B3 . #x646E)	;CJK UNIFIED IDEOGRAPH
                                (#x93B4 . #x646F)	;CJK UNIFIED IDEOGRAPH
                                (#x93B5 . #x6470)	;CJK UNIFIED IDEOGRAPH
                                (#x93B6 . #x6471)	;CJK UNIFIED IDEOGRAPH
                                (#x93B7 . #x6472)	;CJK UNIFIED IDEOGRAPH
                                (#x93B8 . #x6473)	;CJK UNIFIED IDEOGRAPH
                                (#x93B9 . #x6474)	;CJK UNIFIED IDEOGRAPH
                                (#x93BA . #x6475)	;CJK UNIFIED IDEOGRAPH
                                (#x93BB . #x6476)	;CJK UNIFIED IDEOGRAPH
                                (#x93BC . #x6477)	;CJK UNIFIED IDEOGRAPH
                                (#x93BD . #x647B)	;CJK UNIFIED IDEOGRAPH
                                (#x93BE . #x647C)	;CJK UNIFIED IDEOGRAPH
                                (#x93BF . #x647D)	;CJK UNIFIED IDEOGRAPH
                                (#x93C0 . #x647E)	;CJK UNIFIED IDEOGRAPH
                                (#x93C1 . #x647F)	;CJK UNIFIED IDEOGRAPH
                                (#x93C2 . #x6480)	;CJK UNIFIED IDEOGRAPH
                                (#x93C3 . #x6481)	;CJK UNIFIED IDEOGRAPH
                                (#x93C4 . #x6483)	;CJK UNIFIED IDEOGRAPH
                                (#x93C5 . #x6486)	;CJK UNIFIED IDEOGRAPH
                                (#x93C6 . #x6488)	;CJK UNIFIED IDEOGRAPH
                                (#x93C7 . #x6489)	;CJK UNIFIED IDEOGRAPH
                                (#x93C8 . #x648A)	;CJK UNIFIED IDEOGRAPH
                                (#x93C9 . #x648B)	;CJK UNIFIED IDEOGRAPH
                                (#x93CA . #x648C)	;CJK UNIFIED IDEOGRAPH
                                (#x93CB . #x648D)	;CJK UNIFIED IDEOGRAPH
                                (#x93CC . #x648E)	;CJK UNIFIED IDEOGRAPH
                                (#x93CD . #x648F)	;CJK UNIFIED IDEOGRAPH
                                (#x93CE . #x6490)	;CJK UNIFIED IDEOGRAPH
                                (#x93CF . #x6493)	;CJK UNIFIED IDEOGRAPH
                                (#x93D0 . #x6494)	;CJK UNIFIED IDEOGRAPH
                                (#x93D1 . #x6497)	;CJK UNIFIED IDEOGRAPH
                                (#x93D2 . #x6498)	;CJK UNIFIED IDEOGRAPH
                                (#x93D3 . #x649A)	;CJK UNIFIED IDEOGRAPH
                                (#x93D4 . #x649B)	;CJK UNIFIED IDEOGRAPH
                                (#x93D5 . #x649C)	;CJK UNIFIED IDEOGRAPH
                                (#x93D6 . #x649D)	;CJK UNIFIED IDEOGRAPH
                                (#x93D7 . #x649F)	;CJK UNIFIED IDEOGRAPH
                                (#x93D8 . #x64A0)	;CJK UNIFIED IDEOGRAPH
                                (#x93D9 . #x64A1)	;CJK UNIFIED IDEOGRAPH
                                (#x93DA . #x64A2)	;CJK UNIFIED IDEOGRAPH
                                (#x93DB . #x64A3)	;CJK UNIFIED IDEOGRAPH
                                (#x93DC . #x64A5)	;CJK UNIFIED IDEOGRAPH
                                (#x93DD . #x64A6)	;CJK UNIFIED IDEOGRAPH
                                (#x93DE . #x64A7)	;CJK UNIFIED IDEOGRAPH
                                (#x93DF . #x64A8)	;CJK UNIFIED IDEOGRAPH
                                (#x93E0 . #x64AA)	;CJK UNIFIED IDEOGRAPH
                                (#x93E1 . #x64AB)	;CJK UNIFIED IDEOGRAPH
                                (#x93E2 . #x64AF)	;CJK UNIFIED IDEOGRAPH
                                (#x93E3 . #x64B1)	;CJK UNIFIED IDEOGRAPH
                                (#x93E4 . #x64B2)	;CJK UNIFIED IDEOGRAPH
                                (#x93E5 . #x64B3)	;CJK UNIFIED IDEOGRAPH
                                (#x93E6 . #x64B4)	;CJK UNIFIED IDEOGRAPH
                                (#x93E7 . #x64B6)	;CJK UNIFIED IDEOGRAPH
                                (#x93E8 . #x64B9)	;CJK UNIFIED IDEOGRAPH
                                (#x93E9 . #x64BB)	;CJK UNIFIED IDEOGRAPH
                                (#x93EA . #x64BD)	;CJK UNIFIED IDEOGRAPH
                                (#x93EB . #x64BE)	;CJK UNIFIED IDEOGRAPH
                                (#x93EC . #x64BF)	;CJK UNIFIED IDEOGRAPH
                                (#x93ED . #x64C1)	;CJK UNIFIED IDEOGRAPH
                                (#x93EE . #x64C3)	;CJK UNIFIED IDEOGRAPH
                                (#x93EF . #x64C4)	;CJK UNIFIED IDEOGRAPH
                                (#x93F0 . #x64C6)	;CJK UNIFIED IDEOGRAPH
                                (#x93F1 . #x64C7)	;CJK UNIFIED IDEOGRAPH
                                (#x93F2 . #x64C8)	;CJK UNIFIED IDEOGRAPH
                                (#x93F3 . #x64C9)	;CJK UNIFIED IDEOGRAPH
                                (#x93F4 . #x64CA)	;CJK UNIFIED IDEOGRAPH
                                (#x93F5 . #x64CB)	;CJK UNIFIED IDEOGRAPH
                                (#x93F6 . #x64CC)	;CJK UNIFIED IDEOGRAPH
                                (#x93F7 . #x64CF)	;CJK UNIFIED IDEOGRAPH
                                (#x93F8 . #x64D1)	;CJK UNIFIED IDEOGRAPH
                                (#x93F9 . #x64D3)	;CJK UNIFIED IDEOGRAPH
                                (#x93FA . #x64D4)	;CJK UNIFIED IDEOGRAPH
                                (#x93FB . #x64D5)	;CJK UNIFIED IDEOGRAPH
                                (#x93FC . #x64D6)	;CJK UNIFIED IDEOGRAPH
                                (#x93FD . #x64D9)	;CJK UNIFIED IDEOGRAPH
                                (#x93FE . #x64DA)	;CJK UNIFIED IDEOGRAPH
                                (#x9440 . #x64DB)	;CJK UNIFIED IDEOGRAPH
                                (#x9441 . #x64DC)	;CJK UNIFIED IDEOGRAPH
                                (#x9442 . #x64DD)	;CJK UNIFIED IDEOGRAPH
                                (#x9443 . #x64DF)	;CJK UNIFIED IDEOGRAPH
                                (#x9444 . #x64E0)	;CJK UNIFIED IDEOGRAPH
                                (#x9445 . #x64E1)	;CJK UNIFIED IDEOGRAPH
                                (#x9446 . #x64E3)	;CJK UNIFIED IDEOGRAPH
                                (#x9447 . #x64E5)	;CJK UNIFIED IDEOGRAPH
                                (#x9448 . #x64E7)	;CJK UNIFIED IDEOGRAPH
                                (#x9449 . #x64E8)	;CJK UNIFIED IDEOGRAPH
                                (#x944A . #x64E9)	;CJK UNIFIED IDEOGRAPH
                                (#x944B . #x64EA)	;CJK UNIFIED IDEOGRAPH
                                (#x944C . #x64EB)	;CJK UNIFIED IDEOGRAPH
                                (#x944D . #x64EC)	;CJK UNIFIED IDEOGRAPH
                                (#x944E . #x64ED)	;CJK UNIFIED IDEOGRAPH
                                (#x944F . #x64EE)	;CJK UNIFIED IDEOGRAPH
                                (#x9450 . #x64EF)	;CJK UNIFIED IDEOGRAPH
                                (#x9451 . #x64F0)	;CJK UNIFIED IDEOGRAPH
                                (#x9452 . #x64F1)	;CJK UNIFIED IDEOGRAPH
                                (#x9453 . #x64F2)	;CJK UNIFIED IDEOGRAPH
                                (#x9454 . #x64F3)	;CJK UNIFIED IDEOGRAPH
                                (#x9455 . #x64F4)	;CJK UNIFIED IDEOGRAPH
                                (#x9456 . #x64F5)	;CJK UNIFIED IDEOGRAPH
                                (#x9457 . #x64F6)	;CJK UNIFIED IDEOGRAPH
                                (#x9458 . #x64F7)	;CJK UNIFIED IDEOGRAPH
                                (#x9459 . #x64F8)	;CJK UNIFIED IDEOGRAPH
                                (#x945A . #x64F9)	;CJK UNIFIED IDEOGRAPH
                                (#x945B . #x64FA)	;CJK UNIFIED IDEOGRAPH
                                (#x945C . #x64FB)	;CJK UNIFIED IDEOGRAPH
                                (#x945D . #x64FC)	;CJK UNIFIED IDEOGRAPH
                                (#x945E . #x64FD)	;CJK UNIFIED IDEOGRAPH
                                (#x945F . #x64FE)	;CJK UNIFIED IDEOGRAPH
                                (#x9460 . #x64FF)	;CJK UNIFIED IDEOGRAPH
                                (#x9461 . #x6501)	;CJK UNIFIED IDEOGRAPH
                                (#x9462 . #x6502)	;CJK UNIFIED IDEOGRAPH
                                (#x9463 . #x6503)	;CJK UNIFIED IDEOGRAPH
                                (#x9464 . #x6504)	;CJK UNIFIED IDEOGRAPH
                                (#x9465 . #x6505)	;CJK UNIFIED IDEOGRAPH
                                (#x9466 . #x6506)	;CJK UNIFIED IDEOGRAPH
                                (#x9467 . #x6507)	;CJK UNIFIED IDEOGRAPH
                                (#x9468 . #x6508)	;CJK UNIFIED IDEOGRAPH
                                (#x9469 . #x650A)	;CJK UNIFIED IDEOGRAPH
                                (#x946A . #x650B)	;CJK UNIFIED IDEOGRAPH
                                (#x946B . #x650C)	;CJK UNIFIED IDEOGRAPH
                                (#x946C . #x650D)	;CJK UNIFIED IDEOGRAPH
                                (#x946D . #x650E)	;CJK UNIFIED IDEOGRAPH
                                (#x946E . #x650F)	;CJK UNIFIED IDEOGRAPH
                                (#x946F . #x6510)	;CJK UNIFIED IDEOGRAPH
                                (#x9470 . #x6511)	;CJK UNIFIED IDEOGRAPH
                                (#x9471 . #x6513)	;CJK UNIFIED IDEOGRAPH
                                (#x9472 . #x6514)	;CJK UNIFIED IDEOGRAPH
                                (#x9473 . #x6515)	;CJK UNIFIED IDEOGRAPH
                                (#x9474 . #x6516)	;CJK UNIFIED IDEOGRAPH
                                (#x9475 . #x6517)	;CJK UNIFIED IDEOGRAPH
                                (#x9476 . #x6519)	;CJK UNIFIED IDEOGRAPH
                                (#x9477 . #x651A)	;CJK UNIFIED IDEOGRAPH
                                (#x9478 . #x651B)	;CJK UNIFIED IDEOGRAPH
                                (#x9479 . #x651C)	;CJK UNIFIED IDEOGRAPH
                                (#x947A . #x651D)	;CJK UNIFIED IDEOGRAPH
                                (#x947B . #x651E)	;CJK UNIFIED IDEOGRAPH
                                (#x947C . #x651F)	;CJK UNIFIED IDEOGRAPH
                                (#x947D . #x6520)	;CJK UNIFIED IDEOGRAPH
                                (#x947E . #x6521)	;CJK UNIFIED IDEOGRAPH
                                (#x9480 . #x6522)	;CJK UNIFIED IDEOGRAPH
                                (#x9481 . #x6523)	;CJK UNIFIED IDEOGRAPH
                                (#x9482 . #x6524)	;CJK UNIFIED IDEOGRAPH
                                (#x9483 . #x6526)	;CJK UNIFIED IDEOGRAPH
                                (#x9484 . #x6527)	;CJK UNIFIED IDEOGRAPH
                                (#x9485 . #x6528)	;CJK UNIFIED IDEOGRAPH
                                (#x9486 . #x6529)	;CJK UNIFIED IDEOGRAPH
                                (#x9487 . #x652A)	;CJK UNIFIED IDEOGRAPH
                                (#x9488 . #x652C)	;CJK UNIFIED IDEOGRAPH
                                (#x9489 . #x652D)	;CJK UNIFIED IDEOGRAPH
                                (#x948A . #x6530)	;CJK UNIFIED IDEOGRAPH
                                (#x948B . #x6531)	;CJK UNIFIED IDEOGRAPH
                                (#x948C . #x6532)	;CJK UNIFIED IDEOGRAPH
                                (#x948D . #x6533)	;CJK UNIFIED IDEOGRAPH
                                (#x948E . #x6537)	;CJK UNIFIED IDEOGRAPH
                                (#x948F . #x653A)	;CJK UNIFIED IDEOGRAPH
                                (#x9490 . #x653C)	;CJK UNIFIED IDEOGRAPH
                                (#x9491 . #x653D)	;CJK UNIFIED IDEOGRAPH
                                (#x9492 . #x6540)	;CJK UNIFIED IDEOGRAPH
                                (#x9493 . #x6541)	;CJK UNIFIED IDEOGRAPH
                                (#x9494 . #x6542)	;CJK UNIFIED IDEOGRAPH
                                (#x9495 . #x6543)	;CJK UNIFIED IDEOGRAPH
                                (#x9496 . #x6544)	;CJK UNIFIED IDEOGRAPH
                                (#x9497 . #x6546)	;CJK UNIFIED IDEOGRAPH
                                (#x9498 . #x6547)	;CJK UNIFIED IDEOGRAPH
                                (#x9499 . #x654A)	;CJK UNIFIED IDEOGRAPH
                                (#x949A . #x654B)	;CJK UNIFIED IDEOGRAPH
                                (#x949B . #x654D)	;CJK UNIFIED IDEOGRAPH
                                (#x949C . #x654E)	;CJK UNIFIED IDEOGRAPH
                                (#x949D . #x6550)	;CJK UNIFIED IDEOGRAPH
                                (#x949E . #x6552)	;CJK UNIFIED IDEOGRAPH
                                (#x949F . #x6553)	;CJK UNIFIED IDEOGRAPH
                                (#x94A0 . #x6554)	;CJK UNIFIED IDEOGRAPH
                                (#x94A1 . #x6557)	;CJK UNIFIED IDEOGRAPH
                                (#x94A2 . #x6558)	;CJK UNIFIED IDEOGRAPH
                                (#x94A3 . #x655A)	;CJK UNIFIED IDEOGRAPH
                                (#x94A4 . #x655C)	;CJK UNIFIED IDEOGRAPH
                                (#x94A5 . #x655F)	;CJK UNIFIED IDEOGRAPH
                                (#x94A6 . #x6560)	;CJK UNIFIED IDEOGRAPH
                                (#x94A7 . #x6561)	;CJK UNIFIED IDEOGRAPH
                                (#x94A8 . #x6564)	;CJK UNIFIED IDEOGRAPH
                                (#x94A9 . #x6565)	;CJK UNIFIED IDEOGRAPH
                                (#x94AA . #x6567)	;CJK UNIFIED IDEOGRAPH
                                (#x94AB . #x6568)	;CJK UNIFIED IDEOGRAPH
                                (#x94AC . #x6569)	;CJK UNIFIED IDEOGRAPH
                                (#x94AD . #x656A)	;CJK UNIFIED IDEOGRAPH
                                (#x94AE . #x656D)	;CJK UNIFIED IDEOGRAPH
                                (#x94AF . #x656E)	;CJK UNIFIED IDEOGRAPH
                                (#x94B0 . #x656F)	;CJK UNIFIED IDEOGRAPH
                                (#x94B1 . #x6571)	;CJK UNIFIED IDEOGRAPH
                                (#x94B2 . #x6573)	;CJK UNIFIED IDEOGRAPH
                                (#x94B3 . #x6575)	;CJK UNIFIED IDEOGRAPH
                                (#x94B4 . #x6576)	;CJK UNIFIED IDEOGRAPH
                                (#x94B5 . #x6578)	;CJK UNIFIED IDEOGRAPH
                                (#x94B6 . #x6579)	;CJK UNIFIED IDEOGRAPH
                                (#x94B7 . #x657A)	;CJK UNIFIED IDEOGRAPH
                                (#x94B8 . #x657B)	;CJK UNIFIED IDEOGRAPH
                                (#x94B9 . #x657C)	;CJK UNIFIED IDEOGRAPH
                                (#x94BA . #x657D)	;CJK UNIFIED IDEOGRAPH
                                (#x94BB . #x657E)	;CJK UNIFIED IDEOGRAPH
                                (#x94BC . #x657F)	;CJK UNIFIED IDEOGRAPH
                                (#x94BD . #x6580)	;CJK UNIFIED IDEOGRAPH
                                (#x94BE . #x6581)	;CJK UNIFIED IDEOGRAPH
                                (#x94BF . #x6582)	;CJK UNIFIED IDEOGRAPH
                                (#x94C0 . #x6583)	;CJK UNIFIED IDEOGRAPH
                                (#x94C1 . #x6584)	;CJK UNIFIED IDEOGRAPH
                                (#x94C2 . #x6585)	;CJK UNIFIED IDEOGRAPH
                                (#x94C3 . #x6586)	;CJK UNIFIED IDEOGRAPH
                                (#x94C4 . #x6588)	;CJK UNIFIED IDEOGRAPH
                                (#x94C5 . #x6589)	;CJK UNIFIED IDEOGRAPH
                                (#x94C6 . #x658A)	;CJK UNIFIED IDEOGRAPH
                                (#x94C7 . #x658D)	;CJK UNIFIED IDEOGRAPH
                                (#x94C8 . #x658E)	;CJK UNIFIED IDEOGRAPH
                                (#x94C9 . #x658F)	;CJK UNIFIED IDEOGRAPH
                                (#x94CA . #x6592)	;CJK UNIFIED IDEOGRAPH
                                (#x94CB . #x6594)	;CJK UNIFIED IDEOGRAPH
                                (#x94CC . #x6595)	;CJK UNIFIED IDEOGRAPH
                                (#x94CD . #x6596)	;CJK UNIFIED IDEOGRAPH
                                (#x94CE . #x6598)	;CJK UNIFIED IDEOGRAPH
                                (#x94CF . #x659A)	;CJK UNIFIED IDEOGRAPH
                                (#x94D0 . #x659D)	;CJK UNIFIED IDEOGRAPH
                                (#x94D1 . #x659E)	;CJK UNIFIED IDEOGRAPH
                                (#x94D2 . #x65A0)	;CJK UNIFIED IDEOGRAPH
                                (#x94D3 . #x65A2)	;CJK UNIFIED IDEOGRAPH
                                (#x94D4 . #x65A3)	;CJK UNIFIED IDEOGRAPH
                                (#x94D5 . #x65A6)	;CJK UNIFIED IDEOGRAPH
                                (#x94D6 . #x65A8)	;CJK UNIFIED IDEOGRAPH
                                (#x94D7 . #x65AA)	;CJK UNIFIED IDEOGRAPH
                                (#x94D8 . #x65AC)	;CJK UNIFIED IDEOGRAPH
                                (#x94D9 . #x65AE)	;CJK UNIFIED IDEOGRAPH
                                (#x94DA . #x65B1)	;CJK UNIFIED IDEOGRAPH
                                (#x94DB . #x65B2)	;CJK UNIFIED IDEOGRAPH
                                (#x94DC . #x65B3)	;CJK UNIFIED IDEOGRAPH
                                (#x94DD . #x65B4)	;CJK UNIFIED IDEOGRAPH
                                (#x94DE . #x65B5)	;CJK UNIFIED IDEOGRAPH
                                (#x94DF . #x65B6)	;CJK UNIFIED IDEOGRAPH
                                (#x94E0 . #x65B7)	;CJK UNIFIED IDEOGRAPH
                                (#x94E1 . #x65B8)	;CJK UNIFIED IDEOGRAPH
                                (#x94E2 . #x65BA)	;CJK UNIFIED IDEOGRAPH
                                (#x94E3 . #x65BB)	;CJK UNIFIED IDEOGRAPH
                                (#x94E4 . #x65BE)	;CJK UNIFIED IDEOGRAPH
                                (#x94E5 . #x65BF)	;CJK UNIFIED IDEOGRAPH
                                (#x94E6 . #x65C0)	;CJK UNIFIED IDEOGRAPH
                                (#x94E7 . #x65C2)	;CJK UNIFIED IDEOGRAPH
                                (#x94E8 . #x65C7)	;CJK UNIFIED IDEOGRAPH
                                (#x94E9 . #x65C8)	;CJK UNIFIED IDEOGRAPH
                                (#x94EA . #x65C9)	;CJK UNIFIED IDEOGRAPH
                                (#x94EB . #x65CA)	;CJK UNIFIED IDEOGRAPH
                                (#x94EC . #x65CD)	;CJK UNIFIED IDEOGRAPH
                                (#x94ED . #x65D0)	;CJK UNIFIED IDEOGRAPH
                                (#x94EE . #x65D1)	;CJK UNIFIED IDEOGRAPH
                                (#x94EF . #x65D3)	;CJK UNIFIED IDEOGRAPH
                                (#x94F0 . #x65D4)	;CJK UNIFIED IDEOGRAPH
                                (#x94F1 . #x65D5)	;CJK UNIFIED IDEOGRAPH
                                (#x94F2 . #x65D8)	;CJK UNIFIED IDEOGRAPH
                                (#x94F3 . #x65D9)	;CJK UNIFIED IDEOGRAPH
                                (#x94F4 . #x65DA)	;CJK UNIFIED IDEOGRAPH
                                (#x94F5 . #x65DB)	;CJK UNIFIED IDEOGRAPH
                                (#x94F6 . #x65DC)	;CJK UNIFIED IDEOGRAPH
                                (#x94F7 . #x65DD)	;CJK UNIFIED IDEOGRAPH
                                (#x94F8 . #x65DE)	;CJK UNIFIED IDEOGRAPH
                                (#x94F9 . #x65DF)	;CJK UNIFIED IDEOGRAPH
                                (#x94FA . #x65E1)	;CJK UNIFIED IDEOGRAPH
                                (#x94FB . #x65E3)	;CJK UNIFIED IDEOGRAPH
                                (#x94FC . #x65E4)	;CJK UNIFIED IDEOGRAPH
                                (#x94FD . #x65EA)	;CJK UNIFIED IDEOGRAPH
                                (#x94FE . #x65EB)	;CJK UNIFIED IDEOGRAPH
                                (#x9540 . #x65F2)	;CJK UNIFIED IDEOGRAPH
                                (#x9541 . #x65F3)	;CJK UNIFIED IDEOGRAPH
                                (#x9542 . #x65F4)	;CJK UNIFIED IDEOGRAPH
                                (#x9543 . #x65F5)	;CJK UNIFIED IDEOGRAPH
                                (#x9544 . #x65F8)	;CJK UNIFIED IDEOGRAPH
                                (#x9545 . #x65F9)	;CJK UNIFIED IDEOGRAPH
                                (#x9546 . #x65FB)	;CJK UNIFIED IDEOGRAPH
                                (#x9547 . #x65FC)	;CJK UNIFIED IDEOGRAPH
                                (#x9548 . #x65FD)	;CJK UNIFIED IDEOGRAPH
                                (#x9549 . #x65FE)	;CJK UNIFIED IDEOGRAPH
                                (#x954A . #x65FF)	;CJK UNIFIED IDEOGRAPH
                                (#x954B . #x6601)	;CJK UNIFIED IDEOGRAPH
                                (#x954C . #x6604)	;CJK UNIFIED IDEOGRAPH
                                (#x954D . #x6605)	;CJK UNIFIED IDEOGRAPH
                                (#x954E . #x6607)	;CJK UNIFIED IDEOGRAPH
                                (#x954F . #x6608)	;CJK UNIFIED IDEOGRAPH
                                (#x9550 . #x6609)	;CJK UNIFIED IDEOGRAPH
                                (#x9551 . #x660B)	;CJK UNIFIED IDEOGRAPH
                                (#x9552 . #x660D)	;CJK UNIFIED IDEOGRAPH
                                (#x9553 . #x6610)	;CJK UNIFIED IDEOGRAPH
                                (#x9554 . #x6611)	;CJK UNIFIED IDEOGRAPH
                                (#x9555 . #x6612)	;CJK UNIFIED IDEOGRAPH
                                (#x9556 . #x6616)	;CJK UNIFIED IDEOGRAPH
                                (#x9557 . #x6617)	;CJK UNIFIED IDEOGRAPH
                                (#x9558 . #x6618)	;CJK UNIFIED IDEOGRAPH
                                (#x9559 . #x661A)	;CJK UNIFIED IDEOGRAPH
                                (#x955A . #x661B)	;CJK UNIFIED IDEOGRAPH
                                (#x955B . #x661C)	;CJK UNIFIED IDEOGRAPH
                                (#x955C . #x661E)	;CJK UNIFIED IDEOGRAPH
                                (#x955D . #x6621)	;CJK UNIFIED IDEOGRAPH
                                (#x955E . #x6622)	;CJK UNIFIED IDEOGRAPH
                                (#x955F . #x6623)	;CJK UNIFIED IDEOGRAPH
                                (#x9560 . #x6624)	;CJK UNIFIED IDEOGRAPH
                                (#x9561 . #x6626)	;CJK UNIFIED IDEOGRAPH
                                (#x9562 . #x6629)	;CJK UNIFIED IDEOGRAPH
                                (#x9563 . #x662A)	;CJK UNIFIED IDEOGRAPH
                                (#x9564 . #x662B)	;CJK UNIFIED IDEOGRAPH
                                (#x9565 . #x662C)	;CJK UNIFIED IDEOGRAPH
                                (#x9566 . #x662E)	;CJK UNIFIED IDEOGRAPH
                                (#x9567 . #x6630)	;CJK UNIFIED IDEOGRAPH
                                (#x9568 . #x6632)	;CJK UNIFIED IDEOGRAPH
                                (#x9569 . #x6633)	;CJK UNIFIED IDEOGRAPH
                                (#x956A . #x6637)	;CJK UNIFIED IDEOGRAPH
                                (#x956B . #x6638)	;CJK UNIFIED IDEOGRAPH
                                (#x956C . #x6639)	;CJK UNIFIED IDEOGRAPH
                                (#x956D . #x663A)	;CJK UNIFIED IDEOGRAPH
                                (#x956E . #x663B)	;CJK UNIFIED IDEOGRAPH
                                (#x956F . #x663D)	;CJK UNIFIED IDEOGRAPH
                                (#x9570 . #x663F)	;CJK UNIFIED IDEOGRAPH
                                (#x9571 . #x6640)	;CJK UNIFIED IDEOGRAPH
                                (#x9572 . #x6642)	;CJK UNIFIED IDEOGRAPH
                                (#x9573 . #x6644)	;CJK UNIFIED IDEOGRAPH
                                (#x9574 . #x6645)	;CJK UNIFIED IDEOGRAPH
                                (#x9575 . #x6646)	;CJK UNIFIED IDEOGRAPH
                                (#x9576 . #x6647)	;CJK UNIFIED IDEOGRAPH
                                (#x9577 . #x6648)	;CJK UNIFIED IDEOGRAPH
                                (#x9578 . #x6649)	;CJK UNIFIED IDEOGRAPH
                                (#x9579 . #x664A)	;CJK UNIFIED IDEOGRAPH
                                (#x957A . #x664D)	;CJK UNIFIED IDEOGRAPH
                                (#x957B . #x664E)	;CJK UNIFIED IDEOGRAPH
                                (#x957C . #x6650)	;CJK UNIFIED IDEOGRAPH
                                (#x957D . #x6651)	;CJK UNIFIED IDEOGRAPH
                                (#x957E . #x6658)	;CJK UNIFIED IDEOGRAPH
                                (#x9580 . #x6659)	;CJK UNIFIED IDEOGRAPH
                                (#x9581 . #x665B)	;CJK UNIFIED IDEOGRAPH
                                (#x9582 . #x665C)	;CJK UNIFIED IDEOGRAPH
                                (#x9583 . #x665D)	;CJK UNIFIED IDEOGRAPH
                                (#x9584 . #x665E)	;CJK UNIFIED IDEOGRAPH
                                (#x9585 . #x6660)	;CJK UNIFIED IDEOGRAPH
                                (#x9586 . #x6662)	;CJK UNIFIED IDEOGRAPH
                                (#x9587 . #x6663)	;CJK UNIFIED IDEOGRAPH
                                (#x9588 . #x6665)	;CJK UNIFIED IDEOGRAPH
                                (#x9589 . #x6667)	;CJK UNIFIED IDEOGRAPH
                                (#x958A . #x6669)	;CJK UNIFIED IDEOGRAPH
                                (#x958B . #x666A)	;CJK UNIFIED IDEOGRAPH
                                (#x958C . #x666B)	;CJK UNIFIED IDEOGRAPH
                                (#x958D . #x666C)	;CJK UNIFIED IDEOGRAPH
                                (#x958E . #x666D)	;CJK UNIFIED IDEOGRAPH
                                (#x958F . #x6671)	;CJK UNIFIED IDEOGRAPH
                                (#x9590 . #x6672)	;CJK UNIFIED IDEOGRAPH
                                (#x9591 . #x6673)	;CJK UNIFIED IDEOGRAPH
                                (#x9592 . #x6675)	;CJK UNIFIED IDEOGRAPH
                                (#x9593 . #x6678)	;CJK UNIFIED IDEOGRAPH
                                (#x9594 . #x6679)	;CJK UNIFIED IDEOGRAPH
                                (#x9595 . #x667B)	;CJK UNIFIED IDEOGRAPH
                                (#x9596 . #x667C)	;CJK UNIFIED IDEOGRAPH
                                (#x9597 . #x667D)	;CJK UNIFIED IDEOGRAPH
                                (#x9598 . #x667F)	;CJK UNIFIED IDEOGRAPH
                                (#x9599 . #x6680)	;CJK UNIFIED IDEOGRAPH
                                (#x959A . #x6681)	;CJK UNIFIED IDEOGRAPH
                                (#x959B . #x6683)	;CJK UNIFIED IDEOGRAPH
                                (#x959C . #x6685)	;CJK UNIFIED IDEOGRAPH
                                (#x959D . #x6686)	;CJK UNIFIED IDEOGRAPH
                                (#x959E . #x6688)	;CJK UNIFIED IDEOGRAPH
                                (#x959F . #x6689)	;CJK UNIFIED IDEOGRAPH
                                (#x95A0 . #x668A)	;CJK UNIFIED IDEOGRAPH
                                (#x95A1 . #x668B)	;CJK UNIFIED IDEOGRAPH
                                (#x95A2 . #x668D)	;CJK UNIFIED IDEOGRAPH
                                (#x95A3 . #x668E)	;CJK UNIFIED IDEOGRAPH
                                (#x95A4 . #x668F)	;CJK UNIFIED IDEOGRAPH
                                (#x95A5 . #x6690)	;CJK UNIFIED IDEOGRAPH
                                (#x95A6 . #x6692)	;CJK UNIFIED IDEOGRAPH
                                (#x95A7 . #x6693)	;CJK UNIFIED IDEOGRAPH
                                (#x95A8 . #x6694)	;CJK UNIFIED IDEOGRAPH
                                (#x95A9 . #x6695)	;CJK UNIFIED IDEOGRAPH
                                (#x95AA . #x6698)	;CJK UNIFIED IDEOGRAPH
                                (#x95AB . #x6699)	;CJK UNIFIED IDEOGRAPH
                                (#x95AC . #x669A)	;CJK UNIFIED IDEOGRAPH
                                (#x95AD . #x669B)	;CJK UNIFIED IDEOGRAPH
                                (#x95AE . #x669C)	;CJK UNIFIED IDEOGRAPH
                                (#x95AF . #x669E)	;CJK UNIFIED IDEOGRAPH
                                (#x95B0 . #x669F)	;CJK UNIFIED IDEOGRAPH
                                (#x95B1 . #x66A0)	;CJK UNIFIED IDEOGRAPH
                                (#x95B2 . #x66A1)	;CJK UNIFIED IDEOGRAPH
                                (#x95B3 . #x66A2)	;CJK UNIFIED IDEOGRAPH
                                (#x95B4 . #x66A3)	;CJK UNIFIED IDEOGRAPH
                                (#x95B5 . #x66A4)	;CJK UNIFIED IDEOGRAPH
                                (#x95B6 . #x66A5)	;CJK UNIFIED IDEOGRAPH
                                (#x95B7 . #x66A6)	;CJK UNIFIED IDEOGRAPH
                                (#x95B8 . #x66A9)	;CJK UNIFIED IDEOGRAPH
                                (#x95B9 . #x66AA)	;CJK UNIFIED IDEOGRAPH
                                (#x95BA . #x66AB)	;CJK UNIFIED IDEOGRAPH
                                (#x95BB . #x66AC)	;CJK UNIFIED IDEOGRAPH
                                (#x95BC . #x66AD)	;CJK UNIFIED IDEOGRAPH
                                (#x95BD . #x66AF)	;CJK UNIFIED IDEOGRAPH
                                (#x95BE . #x66B0)	;CJK UNIFIED IDEOGRAPH
                                (#x95BF . #x66B1)	;CJK UNIFIED IDEOGRAPH
                                (#x95C0 . #x66B2)	;CJK UNIFIED IDEOGRAPH
                                (#x95C1 . #x66B3)	;CJK UNIFIED IDEOGRAPH
                                (#x95C2 . #x66B5)	;CJK UNIFIED IDEOGRAPH
                                (#x95C3 . #x66B6)	;CJK UNIFIED IDEOGRAPH
                                (#x95C4 . #x66B7)	;CJK UNIFIED IDEOGRAPH
                                (#x95C5 . #x66B8)	;CJK UNIFIED IDEOGRAPH
                                (#x95C6 . #x66BA)	;CJK UNIFIED IDEOGRAPH
                                (#x95C7 . #x66BB)	;CJK UNIFIED IDEOGRAPH
                                (#x95C8 . #x66BC)	;CJK UNIFIED IDEOGRAPH
                                (#x95C9 . #x66BD)	;CJK UNIFIED IDEOGRAPH
                                (#x95CA . #x66BF)	;CJK UNIFIED IDEOGRAPH
                                (#x95CB . #x66C0)	;CJK UNIFIED IDEOGRAPH
                                (#x95CC . #x66C1)	;CJK UNIFIED IDEOGRAPH
                                (#x95CD . #x66C2)	;CJK UNIFIED IDEOGRAPH
                                (#x95CE . #x66C3)	;CJK UNIFIED IDEOGRAPH
                                (#x95CF . #x66C4)	;CJK UNIFIED IDEOGRAPH
                                (#x95D0 . #x66C5)	;CJK UNIFIED IDEOGRAPH
                                (#x95D1 . #x66C6)	;CJK UNIFIED IDEOGRAPH
                                (#x95D2 . #x66C7)	;CJK UNIFIED IDEOGRAPH
                                (#x95D3 . #x66C8)	;CJK UNIFIED IDEOGRAPH
                                (#x95D4 . #x66C9)	;CJK UNIFIED IDEOGRAPH
                                (#x95D5 . #x66CA)	;CJK UNIFIED IDEOGRAPH
                                (#x95D6 . #x66CB)	;CJK UNIFIED IDEOGRAPH
                                (#x95D7 . #x66CC)	;CJK UNIFIED IDEOGRAPH
                                (#x95D8 . #x66CD)	;CJK UNIFIED IDEOGRAPH
                                (#x95D9 . #x66CE)	;CJK UNIFIED IDEOGRAPH
                                (#x95DA . #x66CF)	;CJK UNIFIED IDEOGRAPH
                                (#x95DB . #x66D0)	;CJK UNIFIED IDEOGRAPH
                                (#x95DC . #x66D1)	;CJK UNIFIED IDEOGRAPH
                                (#x95DD . #x66D2)	;CJK UNIFIED IDEOGRAPH
                                (#x95DE . #x66D3)	;CJK UNIFIED IDEOGRAPH
                                (#x95DF . #x66D4)	;CJK UNIFIED IDEOGRAPH
                                (#x95E0 . #x66D5)	;CJK UNIFIED IDEOGRAPH
                                (#x95E1 . #x66D6)	;CJK UNIFIED IDEOGRAPH
                                (#x95E2 . #x66D7)	;CJK UNIFIED IDEOGRAPH
                                (#x95E3 . #x66D8)	;CJK UNIFIED IDEOGRAPH
                                (#x95E4 . #x66DA)	;CJK UNIFIED IDEOGRAPH
                                (#x95E5 . #x66DE)	;CJK UNIFIED IDEOGRAPH
                                (#x95E6 . #x66DF)	;CJK UNIFIED IDEOGRAPH
                                (#x95E7 . #x66E0)	;CJK UNIFIED IDEOGRAPH
                                (#x95E8 . #x66E1)	;CJK UNIFIED IDEOGRAPH
                                (#x95E9 . #x66E2)	;CJK UNIFIED IDEOGRAPH
                                (#x95EA . #x66E3)	;CJK UNIFIED IDEOGRAPH
                                (#x95EB . #x66E4)	;CJK UNIFIED IDEOGRAPH
                                (#x95EC . #x66E5)	;CJK UNIFIED IDEOGRAPH
                                (#x95ED . #x66E7)	;CJK UNIFIED IDEOGRAPH
                                (#x95EE . #x66E8)	;CJK UNIFIED IDEOGRAPH
                                (#x95EF . #x66EA)	;CJK UNIFIED IDEOGRAPH
                                (#x95F0 . #x66EB)	;CJK UNIFIED IDEOGRAPH
                                (#x95F1 . #x66EC)	;CJK UNIFIED IDEOGRAPH
                                (#x95F2 . #x66ED)	;CJK UNIFIED IDEOGRAPH
                                (#x95F3 . #x66EE)	;CJK UNIFIED IDEOGRAPH
                                (#x95F4 . #x66EF)	;CJK UNIFIED IDEOGRAPH
                                (#x95F5 . #x66F1)	;CJK UNIFIED IDEOGRAPH
                                (#x95F6 . #x66F5)	;CJK UNIFIED IDEOGRAPH
                                (#x95F7 . #x66F6)	;CJK UNIFIED IDEOGRAPH
                                (#x95F8 . #x66F8)	;CJK UNIFIED IDEOGRAPH
                                (#x95F9 . #x66FA)	;CJK UNIFIED IDEOGRAPH
                                (#x95FA . #x66FB)	;CJK UNIFIED IDEOGRAPH
                                (#x95FB . #x66FD)	;CJK UNIFIED IDEOGRAPH
                                (#x95FC . #x6701)	;CJK UNIFIED IDEOGRAPH
                                (#x95FD . #x6702)	;CJK UNIFIED IDEOGRAPH
                                (#x95FE . #x6703)	;CJK UNIFIED IDEOGRAPH
                                (#x9640 . #x6704)	;CJK UNIFIED IDEOGRAPH
                                (#x9641 . #x6705)	;CJK UNIFIED IDEOGRAPH
                                (#x9642 . #x6706)	;CJK UNIFIED IDEOGRAPH
                                (#x9643 . #x6707)	;CJK UNIFIED IDEOGRAPH
                                (#x9644 . #x670C)	;CJK UNIFIED IDEOGRAPH
                                (#x9645 . #x670E)	;CJK UNIFIED IDEOGRAPH
                                (#x9646 . #x670F)	;CJK UNIFIED IDEOGRAPH
                                (#x9647 . #x6711)	;CJK UNIFIED IDEOGRAPH
                                (#x9648 . #x6712)	;CJK UNIFIED IDEOGRAPH
                                (#x9649 . #x6713)	;CJK UNIFIED IDEOGRAPH
                                (#x964A . #x6716)	;CJK UNIFIED IDEOGRAPH
                                (#x964B . #x6718)	;CJK UNIFIED IDEOGRAPH
                                (#x964C . #x6719)	;CJK UNIFIED IDEOGRAPH
                                (#x964D . #x671A)	;CJK UNIFIED IDEOGRAPH
                                (#x964E . #x671C)	;CJK UNIFIED IDEOGRAPH
                                (#x964F . #x671E)	;CJK UNIFIED IDEOGRAPH
                                (#x9650 . #x6720)	;CJK UNIFIED IDEOGRAPH
                                (#x9651 . #x6721)	;CJK UNIFIED IDEOGRAPH
                                (#x9652 . #x6722)	;CJK UNIFIED IDEOGRAPH
                                (#x9653 . #x6723)	;CJK UNIFIED IDEOGRAPH
                                (#x9654 . #x6724)	;CJK UNIFIED IDEOGRAPH
                                (#x9655 . #x6725)	;CJK UNIFIED IDEOGRAPH
                                (#x9656 . #x6727)	;CJK UNIFIED IDEOGRAPH
                                (#x9657 . #x6729)	;CJK UNIFIED IDEOGRAPH
                                (#x9658 . #x672E)	;CJK UNIFIED IDEOGRAPH
                                (#x9659 . #x6730)	;CJK UNIFIED IDEOGRAPH
                                (#x965A . #x6732)	;CJK UNIFIED IDEOGRAPH
                                (#x965B . #x6733)	;CJK UNIFIED IDEOGRAPH
                                (#x965C . #x6736)	;CJK UNIFIED IDEOGRAPH
                                (#x965D . #x6737)	;CJK UNIFIED IDEOGRAPH
                                (#x965E . #x6738)	;CJK UNIFIED IDEOGRAPH
                                (#x965F . #x6739)	;CJK UNIFIED IDEOGRAPH
                                (#x9660 . #x673B)	;CJK UNIFIED IDEOGRAPH
                                (#x9661 . #x673C)	;CJK UNIFIED IDEOGRAPH
                                (#x9662 . #x673E)	;CJK UNIFIED IDEOGRAPH
                                (#x9663 . #x673F)	;CJK UNIFIED IDEOGRAPH
                                (#x9664 . #x6741)	;CJK UNIFIED IDEOGRAPH
                                (#x9665 . #x6744)	;CJK UNIFIED IDEOGRAPH
                                (#x9666 . #x6745)	;CJK UNIFIED IDEOGRAPH
                                (#x9667 . #x6747)	;CJK UNIFIED IDEOGRAPH
                                (#x9668 . #x674A)	;CJK UNIFIED IDEOGRAPH
                                (#x9669 . #x674B)	;CJK UNIFIED IDEOGRAPH
                                (#x966A . #x674D)	;CJK UNIFIED IDEOGRAPH
                                (#x966B . #x6752)	;CJK UNIFIED IDEOGRAPH
                                (#x966C . #x6754)	;CJK UNIFIED IDEOGRAPH
                                (#x966D . #x6755)	;CJK UNIFIED IDEOGRAPH
                                (#x966E . #x6757)	;CJK UNIFIED IDEOGRAPH
                                (#x966F . #x6758)	;CJK UNIFIED IDEOGRAPH
                                (#x9670 . #x6759)	;CJK UNIFIED IDEOGRAPH
                                (#x9671 . #x675A)	;CJK UNIFIED IDEOGRAPH
                                (#x9672 . #x675B)	;CJK UNIFIED IDEOGRAPH
                                (#x9673 . #x675D)	;CJK UNIFIED IDEOGRAPH
                                (#x9674 . #x6762)	;CJK UNIFIED IDEOGRAPH
                                (#x9675 . #x6763)	;CJK UNIFIED IDEOGRAPH
                                (#x9676 . #x6764)	;CJK UNIFIED IDEOGRAPH
                                (#x9677 . #x6766)	;CJK UNIFIED IDEOGRAPH
                                (#x9678 . #x6767)	;CJK UNIFIED IDEOGRAPH
                                (#x9679 . #x676B)	;CJK UNIFIED IDEOGRAPH
                                (#x967A . #x676C)	;CJK UNIFIED IDEOGRAPH
                                (#x967B . #x676E)	;CJK UNIFIED IDEOGRAPH
                                (#x967C . #x6771)	;CJK UNIFIED IDEOGRAPH
                                (#x967D . #x6774)	;CJK UNIFIED IDEOGRAPH
                                (#x967E . #x6776)	;CJK UNIFIED IDEOGRAPH
                                (#x9680 . #x6778)	;CJK UNIFIED IDEOGRAPH
                                (#x9681 . #x6779)	;CJK UNIFIED IDEOGRAPH
                                (#x9682 . #x677A)	;CJK UNIFIED IDEOGRAPH
                                (#x9683 . #x677B)	;CJK UNIFIED IDEOGRAPH
                                (#x9684 . #x677D)	;CJK UNIFIED IDEOGRAPH
                                (#x9685 . #x6780)	;CJK UNIFIED IDEOGRAPH
                                (#x9686 . #x6782)	;CJK UNIFIED IDEOGRAPH
                                (#x9687 . #x6783)	;CJK UNIFIED IDEOGRAPH
                                (#x9688 . #x6785)	;CJK UNIFIED IDEOGRAPH
                                (#x9689 . #x6786)	;CJK UNIFIED IDEOGRAPH
                                (#x968A . #x6788)	;CJK UNIFIED IDEOGRAPH
                                (#x968B . #x678A)	;CJK UNIFIED IDEOGRAPH
                                (#x968C . #x678C)	;CJK UNIFIED IDEOGRAPH
                                (#x968D . #x678D)	;CJK UNIFIED IDEOGRAPH
                                (#x968E . #x678E)	;CJK UNIFIED IDEOGRAPH
                                (#x968F . #x678F)	;CJK UNIFIED IDEOGRAPH
                                (#x9690 . #x6791)	;CJK UNIFIED IDEOGRAPH
                                (#x9691 . #x6792)	;CJK UNIFIED IDEOGRAPH
                                (#x9692 . #x6793)	;CJK UNIFIED IDEOGRAPH
                                (#x9693 . #x6794)	;CJK UNIFIED IDEOGRAPH
                                (#x9694 . #x6796)	;CJK UNIFIED IDEOGRAPH
                                (#x9695 . #x6799)	;CJK UNIFIED IDEOGRAPH
                                (#x9696 . #x679B)	;CJK UNIFIED IDEOGRAPH
                                (#x9697 . #x679F)	;CJK UNIFIED IDEOGRAPH
                                (#x9698 . #x67A0)	;CJK UNIFIED IDEOGRAPH
                                (#x9699 . #x67A1)	;CJK UNIFIED IDEOGRAPH
                                (#x969A . #x67A4)	;CJK UNIFIED IDEOGRAPH
                                (#x969B . #x67A6)	;CJK UNIFIED IDEOGRAPH
                                (#x969C . #x67A9)	;CJK UNIFIED IDEOGRAPH
                                (#x969D . #x67AC)	;CJK UNIFIED IDEOGRAPH
                                (#x969E . #x67AE)	;CJK UNIFIED IDEOGRAPH
                                (#x969F . #x67B1)	;CJK UNIFIED IDEOGRAPH
                                (#x96A0 . #x67B2)	;CJK UNIFIED IDEOGRAPH
                                (#x96A1 . #x67B4)	;CJK UNIFIED IDEOGRAPH
                                (#x96A2 . #x67B9)	;CJK UNIFIED IDEOGRAPH
                                (#x96A3 . #x67BA)	;CJK UNIFIED IDEOGRAPH
                                (#x96A4 . #x67BB)	;CJK UNIFIED IDEOGRAPH
                                (#x96A5 . #x67BC)	;CJK UNIFIED IDEOGRAPH
                                (#x96A6 . #x67BD)	;CJK UNIFIED IDEOGRAPH
                                (#x96A7 . #x67BE)	;CJK UNIFIED IDEOGRAPH
                                (#x96A8 . #x67BF)	;CJK UNIFIED IDEOGRAPH
                                (#x96A9 . #x67C0)	;CJK UNIFIED IDEOGRAPH
                                (#x96AA . #x67C2)	;CJK UNIFIED IDEOGRAPH
                                (#x96AB . #x67C5)	;CJK UNIFIED IDEOGRAPH
                                (#x96AC . #x67C6)	;CJK UNIFIED IDEOGRAPH
                                (#x96AD . #x67C7)	;CJK UNIFIED IDEOGRAPH
                                (#x96AE . #x67C8)	;CJK UNIFIED IDEOGRAPH
                                (#x96AF . #x67C9)	;CJK UNIFIED IDEOGRAPH
                                (#x96B0 . #x67CA)	;CJK UNIFIED IDEOGRAPH
                                (#x96B1 . #x67CB)	;CJK UNIFIED IDEOGRAPH
                                (#x96B2 . #x67CC)	;CJK UNIFIED IDEOGRAPH
                                (#x96B3 . #x67CD)	;CJK UNIFIED IDEOGRAPH
                                (#x96B4 . #x67CE)	;CJK UNIFIED IDEOGRAPH
                                (#x96B5 . #x67D5)	;CJK UNIFIED IDEOGRAPH
                                (#x96B6 . #x67D6)	;CJK UNIFIED IDEOGRAPH
                                (#x96B7 . #x67D7)	;CJK UNIFIED IDEOGRAPH
                                (#x96B8 . #x67DB)	;CJK UNIFIED IDEOGRAPH
                                (#x96B9 . #x67DF)	;CJK UNIFIED IDEOGRAPH
                                (#x96BA . #x67E1)	;CJK UNIFIED IDEOGRAPH
                                (#x96BB . #x67E3)	;CJK UNIFIED IDEOGRAPH
                                (#x96BC . #x67E4)	;CJK UNIFIED IDEOGRAPH
                                (#x96BD . #x67E6)	;CJK UNIFIED IDEOGRAPH
                                (#x96BE . #x67E7)	;CJK UNIFIED IDEOGRAPH
                                (#x96BF . #x67E8)	;CJK UNIFIED IDEOGRAPH
                                (#x96C0 . #x67EA)	;CJK UNIFIED IDEOGRAPH
                                (#x96C1 . #x67EB)	;CJK UNIFIED IDEOGRAPH
                                (#x96C2 . #x67ED)	;CJK UNIFIED IDEOGRAPH
                                (#x96C3 . #x67EE)	;CJK UNIFIED IDEOGRAPH
                                (#x96C4 . #x67F2)	;CJK UNIFIED IDEOGRAPH
                                (#x96C5 . #x67F5)	;CJK UNIFIED IDEOGRAPH
                                (#x96C6 . #x67F6)	;CJK UNIFIED IDEOGRAPH
                                (#x96C7 . #x67F7)	;CJK UNIFIED IDEOGRAPH
                                (#x96C8 . #x67F8)	;CJK UNIFIED IDEOGRAPH
                                (#x96C9 . #x67F9)	;CJK UNIFIED IDEOGRAPH
                                (#x96CA . #x67FA)	;CJK UNIFIED IDEOGRAPH
                                (#x96CB . #x67FB)	;CJK UNIFIED IDEOGRAPH
                                (#x96CC . #x67FC)	;CJK UNIFIED IDEOGRAPH
                                (#x96CD . #x67FE)	;CJK UNIFIED IDEOGRAPH
                                (#x96CE . #x6801)	;CJK UNIFIED IDEOGRAPH
                                (#x96CF . #x6802)	;CJK UNIFIED IDEOGRAPH
                                (#x96D0 . #x6803)	;CJK UNIFIED IDEOGRAPH
                                (#x96D1 . #x6804)	;CJK UNIFIED IDEOGRAPH
                                (#x96D2 . #x6806)	;CJK UNIFIED IDEOGRAPH
                                (#x96D3 . #x680D)	;CJK UNIFIED IDEOGRAPH
                                (#x96D4 . #x6810)	;CJK UNIFIED IDEOGRAPH
                                (#x96D5 . #x6812)	;CJK UNIFIED IDEOGRAPH
                                (#x96D6 . #x6814)	;CJK UNIFIED IDEOGRAPH
                                (#x96D7 . #x6815)	;CJK UNIFIED IDEOGRAPH
                                (#x96D8 . #x6818)	;CJK UNIFIED IDEOGRAPH
                                (#x96D9 . #x6819)	;CJK UNIFIED IDEOGRAPH
                                (#x96DA . #x681A)	;CJK UNIFIED IDEOGRAPH
                                (#x96DB . #x681B)	;CJK UNIFIED IDEOGRAPH
                                (#x96DC . #x681C)	;CJK UNIFIED IDEOGRAPH
                                (#x96DD . #x681E)	;CJK UNIFIED IDEOGRAPH
                                (#x96DE . #x681F)	;CJK UNIFIED IDEOGRAPH
                                (#x96DF . #x6820)	;CJK UNIFIED IDEOGRAPH
                                (#x96E0 . #x6822)	;CJK UNIFIED IDEOGRAPH
                                (#x96E1 . #x6823)	;CJK UNIFIED IDEOGRAPH
                                (#x96E2 . #x6824)	;CJK UNIFIED IDEOGRAPH
                                (#x96E3 . #x6825)	;CJK UNIFIED IDEOGRAPH
                                (#x96E4 . #x6826)	;CJK UNIFIED IDEOGRAPH
                                (#x96E5 . #x6827)	;CJK UNIFIED IDEOGRAPH
                                (#x96E6 . #x6828)	;CJK UNIFIED IDEOGRAPH
                                (#x96E7 . #x682B)	;CJK UNIFIED IDEOGRAPH
                                (#x96E8 . #x682C)	;CJK UNIFIED IDEOGRAPH
                                (#x96E9 . #x682D)	;CJK UNIFIED IDEOGRAPH
                                (#x96EA . #x682E)	;CJK UNIFIED IDEOGRAPH
                                (#x96EB . #x682F)	;CJK UNIFIED IDEOGRAPH
                                (#x96EC . #x6830)	;CJK UNIFIED IDEOGRAPH
                                (#x96ED . #x6831)	;CJK UNIFIED IDEOGRAPH
                                (#x96EE . #x6834)	;CJK UNIFIED IDEOGRAPH
                                (#x96EF . #x6835)	;CJK UNIFIED IDEOGRAPH
                                (#x96F0 . #x6836)	;CJK UNIFIED IDEOGRAPH
                                (#x96F1 . #x683A)	;CJK UNIFIED IDEOGRAPH
                                (#x96F2 . #x683B)	;CJK UNIFIED IDEOGRAPH
                                (#x96F3 . #x683F)	;CJK UNIFIED IDEOGRAPH
                                (#x96F4 . #x6847)	;CJK UNIFIED IDEOGRAPH
                                (#x96F5 . #x684B)	;CJK UNIFIED IDEOGRAPH
                                (#x96F6 . #x684D)	;CJK UNIFIED IDEOGRAPH
                                (#x96F7 . #x684F)	;CJK UNIFIED IDEOGRAPH
                                (#x96F8 . #x6852)	;CJK UNIFIED IDEOGRAPH
                                (#x96F9 . #x6856)	;CJK UNIFIED IDEOGRAPH
                                (#x96FA . #x6857)	;CJK UNIFIED IDEOGRAPH
                                (#x96FB . #x6858)	;CJK UNIFIED IDEOGRAPH
                                (#x96FC . #x6859)	;CJK UNIFIED IDEOGRAPH
                                (#x96FD . #x685A)	;CJK UNIFIED IDEOGRAPH
                                (#x96FE . #x685B)	;CJK UNIFIED IDEOGRAPH
                                (#x9740 . #x685C)	;CJK UNIFIED IDEOGRAPH
                                (#x9741 . #x685D)	;CJK UNIFIED IDEOGRAPH
                                (#x9742 . #x685E)	;CJK UNIFIED IDEOGRAPH
                                (#x9743 . #x685F)	;CJK UNIFIED IDEOGRAPH
                                (#x9744 . #x686A)	;CJK UNIFIED IDEOGRAPH
                                (#x9745 . #x686C)	;CJK UNIFIED IDEOGRAPH
                                (#x9746 . #x686D)	;CJK UNIFIED IDEOGRAPH
                                (#x9747 . #x686E)	;CJK UNIFIED IDEOGRAPH
                                (#x9748 . #x686F)	;CJK UNIFIED IDEOGRAPH
                                (#x9749 . #x6870)	;CJK UNIFIED IDEOGRAPH
                                (#x974A . #x6871)	;CJK UNIFIED IDEOGRAPH
                                (#x974B . #x6872)	;CJK UNIFIED IDEOGRAPH
                                (#x974C . #x6873)	;CJK UNIFIED IDEOGRAPH
                                (#x974D . #x6875)	;CJK UNIFIED IDEOGRAPH
                                (#x974E . #x6878)	;CJK UNIFIED IDEOGRAPH
                                (#x974F . #x6879)	;CJK UNIFIED IDEOGRAPH
                                (#x9750 . #x687A)	;CJK UNIFIED IDEOGRAPH
                                (#x9751 . #x687B)	;CJK UNIFIED IDEOGRAPH
                                (#x9752 . #x687C)	;CJK UNIFIED IDEOGRAPH
                                (#x9753 . #x687D)	;CJK UNIFIED IDEOGRAPH
                                (#x9754 . #x687E)	;CJK UNIFIED IDEOGRAPH
                                (#x9755 . #x687F)	;CJK UNIFIED IDEOGRAPH
                                (#x9756 . #x6880)	;CJK UNIFIED IDEOGRAPH
                                (#x9757 . #x6882)	;CJK UNIFIED IDEOGRAPH
                                (#x9758 . #x6884)	;CJK UNIFIED IDEOGRAPH
                                (#x9759 . #x6887)	;CJK UNIFIED IDEOGRAPH
                                (#x975A . #x6888)	;CJK UNIFIED IDEOGRAPH
                                (#x975B . #x6889)	;CJK UNIFIED IDEOGRAPH
                                (#x975C . #x688A)	;CJK UNIFIED IDEOGRAPH
                                (#x975D . #x688B)	;CJK UNIFIED IDEOGRAPH
                                (#x975E . #x688C)	;CJK UNIFIED IDEOGRAPH
                                (#x975F . #x688D)	;CJK UNIFIED IDEOGRAPH
                                (#x9760 . #x688E)	;CJK UNIFIED IDEOGRAPH
                                (#x9761 . #x6890)	;CJK UNIFIED IDEOGRAPH
                                (#x9762 . #x6891)	;CJK UNIFIED IDEOGRAPH
                                (#x9763 . #x6892)	;CJK UNIFIED IDEOGRAPH
                                (#x9764 . #x6894)	;CJK UNIFIED IDEOGRAPH
                                (#x9765 . #x6895)	;CJK UNIFIED IDEOGRAPH
                                (#x9766 . #x6896)	;CJK UNIFIED IDEOGRAPH
                                (#x9767 . #x6898)	;CJK UNIFIED IDEOGRAPH
                                (#x9768 . #x6899)	;CJK UNIFIED IDEOGRAPH
                                (#x9769 . #x689A)	;CJK UNIFIED IDEOGRAPH
                                (#x976A . #x689B)	;CJK UNIFIED IDEOGRAPH
                                (#x976B . #x689C)	;CJK UNIFIED IDEOGRAPH
                                (#x976C . #x689D)	;CJK UNIFIED IDEOGRAPH
                                (#x976D . #x689E)	;CJK UNIFIED IDEOGRAPH
                                (#x976E . #x689F)	;CJK UNIFIED IDEOGRAPH
                                (#x976F . #x68A0)	;CJK UNIFIED IDEOGRAPH
                                (#x9770 . #x68A1)	;CJK UNIFIED IDEOGRAPH
                                (#x9771 . #x68A3)	;CJK UNIFIED IDEOGRAPH
                                (#x9772 . #x68A4)	;CJK UNIFIED IDEOGRAPH
                                (#x9773 . #x68A5)	;CJK UNIFIED IDEOGRAPH
                                (#x9774 . #x68A9)	;CJK UNIFIED IDEOGRAPH
                                (#x9775 . #x68AA)	;CJK UNIFIED IDEOGRAPH
                                (#x9776 . #x68AB)	;CJK UNIFIED IDEOGRAPH
                                (#x9777 . #x68AC)	;CJK UNIFIED IDEOGRAPH
                                (#x9778 . #x68AE)	;CJK UNIFIED IDEOGRAPH
                                (#x9779 . #x68B1)	;CJK UNIFIED IDEOGRAPH
                                (#x977A . #x68B2)	;CJK UNIFIED IDEOGRAPH
                                (#x977B . #x68B4)	;CJK UNIFIED IDEOGRAPH
                                (#x977C . #x68B6)	;CJK UNIFIED IDEOGRAPH
                                (#x977D . #x68B7)	;CJK UNIFIED IDEOGRAPH
                                (#x977E . #x68B8)	;CJK UNIFIED IDEOGRAPH
                                (#x9780 . #x68B9)	;CJK UNIFIED IDEOGRAPH
                                (#x9781 . #x68BA)	;CJK UNIFIED IDEOGRAPH
                                (#x9782 . #x68BB)	;CJK UNIFIED IDEOGRAPH
                                (#x9783 . #x68BC)	;CJK UNIFIED IDEOGRAPH
                                (#x9784 . #x68BD)	;CJK UNIFIED IDEOGRAPH
                                (#x9785 . #x68BE)	;CJK UNIFIED IDEOGRAPH
                                (#x9786 . #x68BF)	;CJK UNIFIED IDEOGRAPH
                                (#x9787 . #x68C1)	;CJK UNIFIED IDEOGRAPH
                                (#x9788 . #x68C3)	;CJK UNIFIED IDEOGRAPH
                                (#x9789 . #x68C4)	;CJK UNIFIED IDEOGRAPH
                                (#x978A . #x68C5)	;CJK UNIFIED IDEOGRAPH
                                (#x978B . #x68C6)	;CJK UNIFIED IDEOGRAPH
                                (#x978C . #x68C7)	;CJK UNIFIED IDEOGRAPH
                                (#x978D . #x68C8)	;CJK UNIFIED IDEOGRAPH
                                (#x978E . #x68CA)	;CJK UNIFIED IDEOGRAPH
                                (#x978F . #x68CC)	;CJK UNIFIED IDEOGRAPH
                                (#x9790 . #x68CE)	;CJK UNIFIED IDEOGRAPH
                                (#x9791 . #x68CF)	;CJK UNIFIED IDEOGRAPH
                                (#x9792 . #x68D0)	;CJK UNIFIED IDEOGRAPH
                                (#x9793 . #x68D1)	;CJK UNIFIED IDEOGRAPH
                                (#x9794 . #x68D3)	;CJK UNIFIED IDEOGRAPH
                                (#x9795 . #x68D4)	;CJK UNIFIED IDEOGRAPH
                                (#x9796 . #x68D6)	;CJK UNIFIED IDEOGRAPH
                                (#x9797 . #x68D7)	;CJK UNIFIED IDEOGRAPH
                                (#x9798 . #x68D9)	;CJK UNIFIED IDEOGRAPH
                                (#x9799 . #x68DB)	;CJK UNIFIED IDEOGRAPH
                                (#x979A . #x68DC)	;CJK UNIFIED IDEOGRAPH
                                (#x979B . #x68DD)	;CJK UNIFIED IDEOGRAPH
                                (#x979C . #x68DE)	;CJK UNIFIED IDEOGRAPH
                                (#x979D . #x68DF)	;CJK UNIFIED IDEOGRAPH
                                (#x979E . #x68E1)	;CJK UNIFIED IDEOGRAPH
                                (#x979F . #x68E2)	;CJK UNIFIED IDEOGRAPH
                                (#x97A0 . #x68E4)	;CJK UNIFIED IDEOGRAPH
                                (#x97A1 . #x68E5)	;CJK UNIFIED IDEOGRAPH
                                (#x97A2 . #x68E6)	;CJK UNIFIED IDEOGRAPH
                                (#x97A3 . #x68E7)	;CJK UNIFIED IDEOGRAPH
                                (#x97A4 . #x68E8)	;CJK UNIFIED IDEOGRAPH
                                (#x97A5 . #x68E9)	;CJK UNIFIED IDEOGRAPH
                                (#x97A6 . #x68EA)	;CJK UNIFIED IDEOGRAPH
                                (#x97A7 . #x68EB)	;CJK UNIFIED IDEOGRAPH
                                (#x97A8 . #x68EC)	;CJK UNIFIED IDEOGRAPH
                                (#x97A9 . #x68ED)	;CJK UNIFIED IDEOGRAPH
                                (#x97AA . #x68EF)	;CJK UNIFIED IDEOGRAPH
                                (#x97AB . #x68F2)	;CJK UNIFIED IDEOGRAPH
                                (#x97AC . #x68F3)	;CJK UNIFIED IDEOGRAPH
                                (#x97AD . #x68F4)	;CJK UNIFIED IDEOGRAPH
                                (#x97AE . #x68F6)	;CJK UNIFIED IDEOGRAPH
                                (#x97AF . #x68F7)	;CJK UNIFIED IDEOGRAPH
                                (#x97B0 . #x68F8)	;CJK UNIFIED IDEOGRAPH
                                (#x97B1 . #x68FB)	;CJK UNIFIED IDEOGRAPH
                                (#x97B2 . #x68FD)	;CJK UNIFIED IDEOGRAPH
                                (#x97B3 . #x68FE)	;CJK UNIFIED IDEOGRAPH
                                (#x97B4 . #x68FF)	;CJK UNIFIED IDEOGRAPH
                                (#x97B5 . #x6900)	;CJK UNIFIED IDEOGRAPH
                                (#x97B6 . #x6902)	;CJK UNIFIED IDEOGRAPH
                                (#x97B7 . #x6903)	;CJK UNIFIED IDEOGRAPH
                                (#x97B8 . #x6904)	;CJK UNIFIED IDEOGRAPH
                                (#x97B9 . #x6906)	;CJK UNIFIED IDEOGRAPH
                                (#x97BA . #x6907)	;CJK UNIFIED IDEOGRAPH
                                (#x97BB . #x6908)	;CJK UNIFIED IDEOGRAPH
                                (#x97BC . #x6909)	;CJK UNIFIED IDEOGRAPH
                                (#x97BD . #x690A)	;CJK UNIFIED IDEOGRAPH
                                (#x97BE . #x690C)	;CJK UNIFIED IDEOGRAPH
                                (#x97BF . #x690F)	;CJK UNIFIED IDEOGRAPH
                                (#x97C0 . #x6911)	;CJK UNIFIED IDEOGRAPH
                                (#x97C1 . #x6913)	;CJK UNIFIED IDEOGRAPH
                                (#x97C2 . #x6914)	;CJK UNIFIED IDEOGRAPH
                                (#x97C3 . #x6915)	;CJK UNIFIED IDEOGRAPH
                                (#x97C4 . #x6916)	;CJK UNIFIED IDEOGRAPH
                                (#x97C5 . #x6917)	;CJK UNIFIED IDEOGRAPH
                                (#x97C6 . #x6918)	;CJK UNIFIED IDEOGRAPH
                                (#x97C7 . #x6919)	;CJK UNIFIED IDEOGRAPH
                                (#x97C8 . #x691A)	;CJK UNIFIED IDEOGRAPH
                                (#x97C9 . #x691B)	;CJK UNIFIED IDEOGRAPH
                                (#x97CA . #x691C)	;CJK UNIFIED IDEOGRAPH
                                (#x97CB . #x691D)	;CJK UNIFIED IDEOGRAPH
                                (#x97CC . #x691E)	;CJK UNIFIED IDEOGRAPH
                                (#x97CD . #x6921)	;CJK UNIFIED IDEOGRAPH
                                (#x97CE . #x6922)	;CJK UNIFIED IDEOGRAPH
                                (#x97CF . #x6923)	;CJK UNIFIED IDEOGRAPH
                                (#x97D0 . #x6925)	;CJK UNIFIED IDEOGRAPH
                                (#x97D1 . #x6926)	;CJK UNIFIED IDEOGRAPH
                                (#x97D2 . #x6927)	;CJK UNIFIED IDEOGRAPH
                                (#x97D3 . #x6928)	;CJK UNIFIED IDEOGRAPH
                                (#x97D4 . #x6929)	;CJK UNIFIED IDEOGRAPH
                                (#x97D5 . #x692A)	;CJK UNIFIED IDEOGRAPH
                                (#x97D6 . #x692B)	;CJK UNIFIED IDEOGRAPH
                                (#x97D7 . #x692C)	;CJK UNIFIED IDEOGRAPH
                                (#x97D8 . #x692E)	;CJK UNIFIED IDEOGRAPH
                                (#x97D9 . #x692F)	;CJK UNIFIED IDEOGRAPH
                                (#x97DA . #x6931)	;CJK UNIFIED IDEOGRAPH
                                (#x97DB . #x6932)	;CJK UNIFIED IDEOGRAPH
                                (#x97DC . #x6933)	;CJK UNIFIED IDEOGRAPH
                                (#x97DD . #x6935)	;CJK UNIFIED IDEOGRAPH
                                (#x97DE . #x6936)	;CJK UNIFIED IDEOGRAPH
                                (#x97DF . #x6937)	;CJK UNIFIED IDEOGRAPH
                                (#x97E0 . #x6938)	;CJK UNIFIED IDEOGRAPH
                                (#x97E1 . #x693A)	;CJK UNIFIED IDEOGRAPH
                                (#x97E2 . #x693B)	;CJK UNIFIED IDEOGRAPH
                                (#x97E3 . #x693C)	;CJK UNIFIED IDEOGRAPH
                                (#x97E4 . #x693E)	;CJK UNIFIED IDEOGRAPH
                                (#x97E5 . #x6940)	;CJK UNIFIED IDEOGRAPH
                                (#x97E6 . #x6941)	;CJK UNIFIED IDEOGRAPH
                                (#x97E7 . #x6943)	;CJK UNIFIED IDEOGRAPH
                                (#x97E8 . #x6944)	;CJK UNIFIED IDEOGRAPH
                                (#x97E9 . #x6945)	;CJK UNIFIED IDEOGRAPH
                                (#x97EA . #x6946)	;CJK UNIFIED IDEOGRAPH
                                (#x97EB . #x6947)	;CJK UNIFIED IDEOGRAPH
                                (#x97EC . #x6948)	;CJK UNIFIED IDEOGRAPH
                                (#x97ED . #x6949)	;CJK UNIFIED IDEOGRAPH
                                (#x97EE . #x694A)	;CJK UNIFIED IDEOGRAPH
                                (#x97EF . #x694B)	;CJK UNIFIED IDEOGRAPH
                                (#x97F0 . #x694C)	;CJK UNIFIED IDEOGRAPH
                                (#x97F1 . #x694D)	;CJK UNIFIED IDEOGRAPH
                                (#x97F2 . #x694E)	;CJK UNIFIED IDEOGRAPH
                                (#x97F3 . #x694F)	;CJK UNIFIED IDEOGRAPH
                                (#x97F4 . #x6950)	;CJK UNIFIED IDEOGRAPH
                                (#x97F5 . #x6951)	;CJK UNIFIED IDEOGRAPH
                                (#x97F6 . #x6952)	;CJK UNIFIED IDEOGRAPH
                                (#x97F7 . #x6953)	;CJK UNIFIED IDEOGRAPH
                                (#x97F8 . #x6955)	;CJK UNIFIED IDEOGRAPH
                                (#x97F9 . #x6956)	;CJK UNIFIED IDEOGRAPH
                                (#x97FA . #x6958)	;CJK UNIFIED IDEOGRAPH
                                (#x97FB . #x6959)	;CJK UNIFIED IDEOGRAPH
                                (#x97FC . #x695B)	;CJK UNIFIED IDEOGRAPH
                                (#x97FD . #x695C)	;CJK UNIFIED IDEOGRAPH
                                (#x97FE . #x695F)	;CJK UNIFIED IDEOGRAPH
                                (#x9840 . #x6961)	;CJK UNIFIED IDEOGRAPH
                                (#x9841 . #x6962)	;CJK UNIFIED IDEOGRAPH
                                (#x9842 . #x6964)	;CJK UNIFIED IDEOGRAPH
                                (#x9843 . #x6965)	;CJK UNIFIED IDEOGRAPH
                                (#x9844 . #x6967)	;CJK UNIFIED IDEOGRAPH
                                (#x9845 . #x6968)	;CJK UNIFIED IDEOGRAPH
                                (#x9846 . #x6969)	;CJK UNIFIED IDEOGRAPH
                                (#x9847 . #x696A)	;CJK UNIFIED IDEOGRAPH
                                (#x9848 . #x696C)	;CJK UNIFIED IDEOGRAPH
                                (#x9849 . #x696D)	;CJK UNIFIED IDEOGRAPH
                                (#x984A . #x696F)	;CJK UNIFIED IDEOGRAPH
                                (#x984B . #x6970)	;CJK UNIFIED IDEOGRAPH
                                (#x984C . #x6972)	;CJK UNIFIED IDEOGRAPH
                                (#x984D . #x6973)	;CJK UNIFIED IDEOGRAPH
                                (#x984E . #x6974)	;CJK UNIFIED IDEOGRAPH
                                (#x984F . #x6975)	;CJK UNIFIED IDEOGRAPH
                                (#x9850 . #x6976)	;CJK UNIFIED IDEOGRAPH
                                (#x9851 . #x697A)	;CJK UNIFIED IDEOGRAPH
                                (#x9852 . #x697B)	;CJK UNIFIED IDEOGRAPH
                                (#x9853 . #x697D)	;CJK UNIFIED IDEOGRAPH
                                (#x9854 . #x697E)	;CJK UNIFIED IDEOGRAPH
                                (#x9855 . #x697F)	;CJK UNIFIED IDEOGRAPH
                                (#x9856 . #x6981)	;CJK UNIFIED IDEOGRAPH
                                (#x9857 . #x6983)	;CJK UNIFIED IDEOGRAPH
                                (#x9858 . #x6985)	;CJK UNIFIED IDEOGRAPH
                                (#x9859 . #x698A)	;CJK UNIFIED IDEOGRAPH
                                (#x985A . #x698B)	;CJK UNIFIED IDEOGRAPH
                                (#x985B . #x698C)	;CJK UNIFIED IDEOGRAPH
                                (#x985C . #x698E)	;CJK UNIFIED IDEOGRAPH
                                (#x985D . #x698F)	;CJK UNIFIED IDEOGRAPH
                                (#x985E . #x6990)	;CJK UNIFIED IDEOGRAPH
                                (#x985F . #x6991)	;CJK UNIFIED IDEOGRAPH
                                (#x9860 . #x6992)	;CJK UNIFIED IDEOGRAPH
                                (#x9861 . #x6993)	;CJK UNIFIED IDEOGRAPH
                                (#x9862 . #x6996)	;CJK UNIFIED IDEOGRAPH
                                (#x9863 . #x6997)	;CJK UNIFIED IDEOGRAPH
                                (#x9864 . #x6999)	;CJK UNIFIED IDEOGRAPH
                                (#x9865 . #x699A)	;CJK UNIFIED IDEOGRAPH
                                (#x9866 . #x699D)	;CJK UNIFIED IDEOGRAPH
                                (#x9867 . #x699E)	;CJK UNIFIED IDEOGRAPH
                                (#x9868 . #x699F)	;CJK UNIFIED IDEOGRAPH
                                (#x9869 . #x69A0)	;CJK UNIFIED IDEOGRAPH
                                (#x986A . #x69A1)	;CJK UNIFIED IDEOGRAPH
                                (#x986B . #x69A2)	;CJK UNIFIED IDEOGRAPH
                                (#x986C . #x69A3)	;CJK UNIFIED IDEOGRAPH
                                (#x986D . #x69A4)	;CJK UNIFIED IDEOGRAPH
                                (#x986E . #x69A5)	;CJK UNIFIED IDEOGRAPH
                                (#x986F . #x69A6)	;CJK UNIFIED IDEOGRAPH
                                (#x9870 . #x69A9)	;CJK UNIFIED IDEOGRAPH
                                (#x9871 . #x69AA)	;CJK UNIFIED IDEOGRAPH
                                (#x9872 . #x69AC)	;CJK UNIFIED IDEOGRAPH
                                (#x9873 . #x69AE)	;CJK UNIFIED IDEOGRAPH
                                (#x9874 . #x69AF)	;CJK UNIFIED IDEOGRAPH
                                (#x9875 . #x69B0)	;CJK UNIFIED IDEOGRAPH
                                (#x9876 . #x69B2)	;CJK UNIFIED IDEOGRAPH
                                (#x9877 . #x69B3)	;CJK UNIFIED IDEOGRAPH
                                (#x9878 . #x69B5)	;CJK UNIFIED IDEOGRAPH
                                (#x9879 . #x69B6)	;CJK UNIFIED IDEOGRAPH
                                (#x987A . #x69B8)	;CJK UNIFIED IDEOGRAPH
                                (#x987B . #x69B9)	;CJK UNIFIED IDEOGRAPH
                                (#x987C . #x69BA)	;CJK UNIFIED IDEOGRAPH
                                (#x987D . #x69BC)	;CJK UNIFIED IDEOGRAPH
                                (#x987E . #x69BD)	;CJK UNIFIED IDEOGRAPH
                                (#x9880 . #x69BE)	;CJK UNIFIED IDEOGRAPH
                                (#x9881 . #x69BF)	;CJK UNIFIED IDEOGRAPH
                                (#x9882 . #x69C0)	;CJK UNIFIED IDEOGRAPH
                                (#x9883 . #x69C2)	;CJK UNIFIED IDEOGRAPH
                                (#x9884 . #x69C3)	;CJK UNIFIED IDEOGRAPH
                                (#x9885 . #x69C4)	;CJK UNIFIED IDEOGRAPH
                                (#x9886 . #x69C5)	;CJK UNIFIED IDEOGRAPH
                                (#x9887 . #x69C6)	;CJK UNIFIED IDEOGRAPH
                                (#x9888 . #x69C7)	;CJK UNIFIED IDEOGRAPH
                                (#x9889 . #x69C8)	;CJK UNIFIED IDEOGRAPH
                                (#x988A . #x69C9)	;CJK UNIFIED IDEOGRAPH
                                (#x988B . #x69CB)	;CJK UNIFIED IDEOGRAPH
                                (#x988C . #x69CD)	;CJK UNIFIED IDEOGRAPH
                                (#x988D . #x69CF)	;CJK UNIFIED IDEOGRAPH
                                (#x988E . #x69D1)	;CJK UNIFIED IDEOGRAPH
                                (#x988F . #x69D2)	;CJK UNIFIED IDEOGRAPH
                                (#x9890 . #x69D3)	;CJK UNIFIED IDEOGRAPH
                                (#x9891 . #x69D5)	;CJK UNIFIED IDEOGRAPH
                                (#x9892 . #x69D6)	;CJK UNIFIED IDEOGRAPH
                                (#x9893 . #x69D7)	;CJK UNIFIED IDEOGRAPH
                                (#x9894 . #x69D8)	;CJK UNIFIED IDEOGRAPH
                                (#x9895 . #x69D9)	;CJK UNIFIED IDEOGRAPH
                                (#x9896 . #x69DA)	;CJK UNIFIED IDEOGRAPH
                                (#x9897 . #x69DC)	;CJK UNIFIED IDEOGRAPH
                                (#x9898 . #x69DD)	;CJK UNIFIED IDEOGRAPH
                                (#x9899 . #x69DE)	;CJK UNIFIED IDEOGRAPH
                                (#x989A . #x69E1)	;CJK UNIFIED IDEOGRAPH
                                (#x989B . #x69E2)	;CJK UNIFIED IDEOGRAPH
                                (#x989C . #x69E3)	;CJK UNIFIED IDEOGRAPH
                                (#x989D . #x69E4)	;CJK UNIFIED IDEOGRAPH
                                (#x989E . #x69E5)	;CJK UNIFIED IDEOGRAPH
                                (#x989F . #x69E6)	;CJK UNIFIED IDEOGRAPH
                                (#x98A0 . #x69E7)	;CJK UNIFIED IDEOGRAPH
                                (#x98A1 . #x69E8)	;CJK UNIFIED IDEOGRAPH
                                (#x98A2 . #x69E9)	;CJK UNIFIED IDEOGRAPH
                                (#x98A3 . #x69EA)	;CJK UNIFIED IDEOGRAPH
                                (#x98A4 . #x69EB)	;CJK UNIFIED IDEOGRAPH
                                (#x98A5 . #x69EC)	;CJK UNIFIED IDEOGRAPH
                                (#x98A6 . #x69EE)	;CJK UNIFIED IDEOGRAPH
                                (#x98A7 . #x69EF)	;CJK UNIFIED IDEOGRAPH
                                (#x98A8 . #x69F0)	;CJK UNIFIED IDEOGRAPH
                                (#x98A9 . #x69F1)	;CJK UNIFIED IDEOGRAPH
                                (#x98AA . #x69F3)	;CJK UNIFIED IDEOGRAPH
                                (#x98AB . #x69F4)	;CJK UNIFIED IDEOGRAPH
                                (#x98AC . #x69F5)	;CJK UNIFIED IDEOGRAPH
                                (#x98AD . #x69F6)	;CJK UNIFIED IDEOGRAPH
                                (#x98AE . #x69F7)	;CJK UNIFIED IDEOGRAPH
                                (#x98AF . #x69F8)	;CJK UNIFIED IDEOGRAPH
                                (#x98B0 . #x69F9)	;CJK UNIFIED IDEOGRAPH
                                (#x98B1 . #x69FA)	;CJK UNIFIED IDEOGRAPH
                                (#x98B2 . #x69FB)	;CJK UNIFIED IDEOGRAPH
                                (#x98B3 . #x69FC)	;CJK UNIFIED IDEOGRAPH
                                (#x98B4 . #x69FE)	;CJK UNIFIED IDEOGRAPH
                                (#x98B5 . #x6A00)	;CJK UNIFIED IDEOGRAPH
                                (#x98B6 . #x6A01)	;CJK UNIFIED IDEOGRAPH
                                (#x98B7 . #x6A02)	;CJK UNIFIED IDEOGRAPH
                                (#x98B8 . #x6A03)	;CJK UNIFIED IDEOGRAPH
                                (#x98B9 . #x6A04)	;CJK UNIFIED IDEOGRAPH
                                (#x98BA . #x6A05)	;CJK UNIFIED IDEOGRAPH
                                (#x98BB . #x6A06)	;CJK UNIFIED IDEOGRAPH
                                (#x98BC . #x6A07)	;CJK UNIFIED IDEOGRAPH
                                (#x98BD . #x6A08)	;CJK UNIFIED IDEOGRAPH
                                (#x98BE . #x6A09)	;CJK UNIFIED IDEOGRAPH
                                (#x98BF . #x6A0B)	;CJK UNIFIED IDEOGRAPH
                                (#x98C0 . #x6A0C)	;CJK UNIFIED IDEOGRAPH
                                (#x98C1 . #x6A0D)	;CJK UNIFIED IDEOGRAPH
                                (#x98C2 . #x6A0E)	;CJK UNIFIED IDEOGRAPH
                                (#x98C3 . #x6A0F)	;CJK UNIFIED IDEOGRAPH
                                (#x98C4 . #x6A10)	;CJK UNIFIED IDEOGRAPH
                                (#x98C5 . #x6A11)	;CJK UNIFIED IDEOGRAPH
                                (#x98C6 . #x6A12)	;CJK UNIFIED IDEOGRAPH
                                (#x98C7 . #x6A13)	;CJK UNIFIED IDEOGRAPH
                                (#x98C8 . #x6A14)	;CJK UNIFIED IDEOGRAPH
                                (#x98C9 . #x6A15)	;CJK UNIFIED IDEOGRAPH
                                (#x98CA . #x6A16)	;CJK UNIFIED IDEOGRAPH
                                (#x98CB . #x6A19)	;CJK UNIFIED IDEOGRAPH
                                (#x98CC . #x6A1A)	;CJK UNIFIED IDEOGRAPH
                                (#x98CD . #x6A1B)	;CJK UNIFIED IDEOGRAPH
                                (#x98CE . #x6A1C)	;CJK UNIFIED IDEOGRAPH
                                (#x98CF . #x6A1D)	;CJK UNIFIED IDEOGRAPH
                                (#x98D0 . #x6A1E)	;CJK UNIFIED IDEOGRAPH
                                (#x98D1 . #x6A20)	;CJK UNIFIED IDEOGRAPH
                                (#x98D2 . #x6A22)	;CJK UNIFIED IDEOGRAPH
                                (#x98D3 . #x6A23)	;CJK UNIFIED IDEOGRAPH
                                (#x98D4 . #x6A24)	;CJK UNIFIED IDEOGRAPH
                                (#x98D5 . #x6A25)	;CJK UNIFIED IDEOGRAPH
                                (#x98D6 . #x6A26)	;CJK UNIFIED IDEOGRAPH
                                (#x98D7 . #x6A27)	;CJK UNIFIED IDEOGRAPH
                                (#x98D8 . #x6A29)	;CJK UNIFIED IDEOGRAPH
                                (#x98D9 . #x6A2B)	;CJK UNIFIED IDEOGRAPH
                                (#x98DA . #x6A2C)	;CJK UNIFIED IDEOGRAPH
                                (#x98DB . #x6A2D)	;CJK UNIFIED IDEOGRAPH
                                (#x98DC . #x6A2E)	;CJK UNIFIED IDEOGRAPH
                                (#x98DD . #x6A30)	;CJK UNIFIED IDEOGRAPH
                                (#x98DE . #x6A32)	;CJK UNIFIED IDEOGRAPH
                                (#x98DF . #x6A33)	;CJK UNIFIED IDEOGRAPH
                                (#x98E0 . #x6A34)	;CJK UNIFIED IDEOGRAPH
                                (#x98E1 . #x6A36)	;CJK UNIFIED IDEOGRAPH
                                (#x98E2 . #x6A37)	;CJK UNIFIED IDEOGRAPH
                                (#x98E3 . #x6A38)	;CJK UNIFIED IDEOGRAPH
                                (#x98E4 . #x6A39)	;CJK UNIFIED IDEOGRAPH
                                (#x98E5 . #x6A3A)	;CJK UNIFIED IDEOGRAPH
                                (#x98E6 . #x6A3B)	;CJK UNIFIED IDEOGRAPH
                                (#x98E7 . #x6A3C)	;CJK UNIFIED IDEOGRAPH
                                (#x98E8 . #x6A3F)	;CJK UNIFIED IDEOGRAPH
                                (#x98E9 . #x6A40)	;CJK UNIFIED IDEOGRAPH
                                (#x98EA . #x6A41)	;CJK UNIFIED IDEOGRAPH
                                (#x98EB . #x6A42)	;CJK UNIFIED IDEOGRAPH
                                (#x98EC . #x6A43)	;CJK UNIFIED IDEOGRAPH
                                (#x98ED . #x6A45)	;CJK UNIFIED IDEOGRAPH
                                (#x98EE . #x6A46)	;CJK UNIFIED IDEOGRAPH
                                (#x98EF . #x6A48)	;CJK UNIFIED IDEOGRAPH
                                (#x98F0 . #x6A49)	;CJK UNIFIED IDEOGRAPH
                                (#x98F1 . #x6A4A)	;CJK UNIFIED IDEOGRAPH
                                (#x98F2 . #x6A4B)	;CJK UNIFIED IDEOGRAPH
                                (#x98F3 . #x6A4C)	;CJK UNIFIED IDEOGRAPH
                                (#x98F4 . #x6A4D)	;CJK UNIFIED IDEOGRAPH
                                (#x98F5 . #x6A4E)	;CJK UNIFIED IDEOGRAPH
                                (#x98F6 . #x6A4F)	;CJK UNIFIED IDEOGRAPH
                                (#x98F7 . #x6A51)	;CJK UNIFIED IDEOGRAPH
                                (#x98F8 . #x6A52)	;CJK UNIFIED IDEOGRAPH
                                (#x98F9 . #x6A53)	;CJK UNIFIED IDEOGRAPH
                                (#x98FA . #x6A54)	;CJK UNIFIED IDEOGRAPH
                                (#x98FB . #x6A55)	;CJK UNIFIED IDEOGRAPH
                                (#x98FC . #x6A56)	;CJK UNIFIED IDEOGRAPH
                                (#x98FD . #x6A57)	;CJK UNIFIED IDEOGRAPH
                                (#x98FE . #x6A5A)	;CJK UNIFIED IDEOGRAPH
                                (#x9940 . #x6A5C)	;CJK UNIFIED IDEOGRAPH
                                (#x9941 . #x6A5D)	;CJK UNIFIED IDEOGRAPH
                                (#x9942 . #x6A5E)	;CJK UNIFIED IDEOGRAPH
                                (#x9943 . #x6A5F)	;CJK UNIFIED IDEOGRAPH
                                (#x9944 . #x6A60)	;CJK UNIFIED IDEOGRAPH
                                (#x9945 . #x6A62)	;CJK UNIFIED IDEOGRAPH
                                (#x9946 . #x6A63)	;CJK UNIFIED IDEOGRAPH
                                (#x9947 . #x6A64)	;CJK UNIFIED IDEOGRAPH
                                (#x9948 . #x6A66)	;CJK UNIFIED IDEOGRAPH
                                (#x9949 . #x6A67)	;CJK UNIFIED IDEOGRAPH
                                (#x994A . #x6A68)	;CJK UNIFIED IDEOGRAPH
                                (#x994B . #x6A69)	;CJK UNIFIED IDEOGRAPH
                                (#x994C . #x6A6A)	;CJK UNIFIED IDEOGRAPH
                                (#x994D . #x6A6B)	;CJK UNIFIED IDEOGRAPH
                                (#x994E . #x6A6C)	;CJK UNIFIED IDEOGRAPH
                                (#x994F . #x6A6D)	;CJK UNIFIED IDEOGRAPH
                                (#x9950 . #x6A6E)	;CJK UNIFIED IDEOGRAPH
                                (#x9951 . #x6A6F)	;CJK UNIFIED IDEOGRAPH
                                (#x9952 . #x6A70)	;CJK UNIFIED IDEOGRAPH
                                (#x9953 . #x6A72)	;CJK UNIFIED IDEOGRAPH
                                (#x9954 . #x6A73)	;CJK UNIFIED IDEOGRAPH
                                (#x9955 . #x6A74)	;CJK UNIFIED IDEOGRAPH
                                (#x9956 . #x6A75)	;CJK UNIFIED IDEOGRAPH
                                (#x9957 . #x6A76)	;CJK UNIFIED IDEOGRAPH
                                (#x9958 . #x6A77)	;CJK UNIFIED IDEOGRAPH
                                (#x9959 . #x6A78)	;CJK UNIFIED IDEOGRAPH
                                (#x995A . #x6A7A)	;CJK UNIFIED IDEOGRAPH
                                (#x995B . #x6A7B)	;CJK UNIFIED IDEOGRAPH
                                (#x995C . #x6A7D)	;CJK UNIFIED IDEOGRAPH
                                (#x995D . #x6A7E)	;CJK UNIFIED IDEOGRAPH
                                (#x995E . #x6A7F)	;CJK UNIFIED IDEOGRAPH
                                (#x995F . #x6A81)	;CJK UNIFIED IDEOGRAPH
                                (#x9960 . #x6A82)	;CJK UNIFIED IDEOGRAPH
                                (#x9961 . #x6A83)	;CJK UNIFIED IDEOGRAPH
                                (#x9962 . #x6A85)	;CJK UNIFIED IDEOGRAPH
                                (#x9963 . #x6A86)	;CJK UNIFIED IDEOGRAPH
                                (#x9964 . #x6A87)	;CJK UNIFIED IDEOGRAPH
                                (#x9965 . #x6A88)	;CJK UNIFIED IDEOGRAPH
                                (#x9966 . #x6A89)	;CJK UNIFIED IDEOGRAPH
                                (#x9967 . #x6A8A)	;CJK UNIFIED IDEOGRAPH
                                (#x9968 . #x6A8B)	;CJK UNIFIED IDEOGRAPH
                                (#x9969 . #x6A8C)	;CJK UNIFIED IDEOGRAPH
                                (#x996A . #x6A8D)	;CJK UNIFIED IDEOGRAPH
                                (#x996B . #x6A8F)	;CJK UNIFIED IDEOGRAPH
                                (#x996C . #x6A92)	;CJK UNIFIED IDEOGRAPH
                                (#x996D . #x6A93)	;CJK UNIFIED IDEOGRAPH
                                (#x996E . #x6A94)	;CJK UNIFIED IDEOGRAPH
                                (#x996F . #x6A95)	;CJK UNIFIED IDEOGRAPH
                                (#x9970 . #x6A96)	;CJK UNIFIED IDEOGRAPH
                                (#x9971 . #x6A98)	;CJK UNIFIED IDEOGRAPH
                                (#x9972 . #x6A99)	;CJK UNIFIED IDEOGRAPH
                                (#x9973 . #x6A9A)	;CJK UNIFIED IDEOGRAPH
                                (#x9974 . #x6A9B)	;CJK UNIFIED IDEOGRAPH
                                (#x9975 . #x6A9C)	;CJK UNIFIED IDEOGRAPH
                                (#x9976 . #x6A9D)	;CJK UNIFIED IDEOGRAPH
                                (#x9977 . #x6A9E)	;CJK UNIFIED IDEOGRAPH
                                (#x9978 . #x6A9F)	;CJK UNIFIED IDEOGRAPH
                                (#x9979 . #x6AA1)	;CJK UNIFIED IDEOGRAPH
                                (#x997A . #x6AA2)	;CJK UNIFIED IDEOGRAPH
                                (#x997B . #x6AA3)	;CJK UNIFIED IDEOGRAPH
                                (#x997C . #x6AA4)	;CJK UNIFIED IDEOGRAPH
                                (#x997D . #x6AA5)	;CJK UNIFIED IDEOGRAPH
                                (#x997E . #x6AA6)	;CJK UNIFIED IDEOGRAPH
                                (#x9980 . #x6AA7)	;CJK UNIFIED IDEOGRAPH
                                (#x9981 . #x6AA8)	;CJK UNIFIED IDEOGRAPH
                                (#x9982 . #x6AAA)	;CJK UNIFIED IDEOGRAPH
                                (#x9983 . #x6AAD)	;CJK UNIFIED IDEOGRAPH
                                (#x9984 . #x6AAE)	;CJK UNIFIED IDEOGRAPH
                                (#x9985 . #x6AAF)	;CJK UNIFIED IDEOGRAPH
                                (#x9986 . #x6AB0)	;CJK UNIFIED IDEOGRAPH
                                (#x9987 . #x6AB1)	;CJK UNIFIED IDEOGRAPH
                                (#x9988 . #x6AB2)	;CJK UNIFIED IDEOGRAPH
                                (#x9989 . #x6AB3)	;CJK UNIFIED IDEOGRAPH
                                (#x998A . #x6AB4)	;CJK UNIFIED IDEOGRAPH
                                (#x998B . #x6AB5)	;CJK UNIFIED IDEOGRAPH
                                (#x998C . #x6AB6)	;CJK UNIFIED IDEOGRAPH
                                (#x998D . #x6AB7)	;CJK UNIFIED IDEOGRAPH
                                (#x998E . #x6AB8)	;CJK UNIFIED IDEOGRAPH
                                (#x998F . #x6AB9)	;CJK UNIFIED IDEOGRAPH
                                (#x9990 . #x6ABA)	;CJK UNIFIED IDEOGRAPH
                                (#x9991 . #x6ABB)	;CJK UNIFIED IDEOGRAPH
                                (#x9992 . #x6ABC)	;CJK UNIFIED IDEOGRAPH
                                (#x9993 . #x6ABD)	;CJK UNIFIED IDEOGRAPH
                                (#x9994 . #x6ABE)	;CJK UNIFIED IDEOGRAPH
                                (#x9995 . #x6ABF)	;CJK UNIFIED IDEOGRAPH
                                (#x9996 . #x6AC0)	;CJK UNIFIED IDEOGRAPH
                                (#x9997 . #x6AC1)	;CJK UNIFIED IDEOGRAPH
                                (#x9998 . #x6AC2)	;CJK UNIFIED IDEOGRAPH
                                (#x9999 . #x6AC3)	;CJK UNIFIED IDEOGRAPH
                                (#x999A . #x6AC4)	;CJK UNIFIED IDEOGRAPH
                                (#x999B . #x6AC5)	;CJK UNIFIED IDEOGRAPH
                                (#x999C . #x6AC6)	;CJK UNIFIED IDEOGRAPH
                                (#x999D . #x6AC7)	;CJK UNIFIED IDEOGRAPH
                                (#x999E . #x6AC8)	;CJK UNIFIED IDEOGRAPH
                                (#x999F . #x6AC9)	;CJK UNIFIED IDEOGRAPH
                                (#x99A0 . #x6ACA)	;CJK UNIFIED IDEOGRAPH
                                (#x99A1 . #x6ACB)	;CJK UNIFIED IDEOGRAPH
                                (#x99A2 . #x6ACC)	;CJK UNIFIED IDEOGRAPH
                                (#x99A3 . #x6ACD)	;CJK UNIFIED IDEOGRAPH
                                (#x99A4 . #x6ACE)	;CJK UNIFIED IDEOGRAPH
                                (#x99A5 . #x6ACF)	;CJK UNIFIED IDEOGRAPH
                                (#x99A6 . #x6AD0)	;CJK UNIFIED IDEOGRAPH
                                (#x99A7 . #x6AD1)	;CJK UNIFIED IDEOGRAPH
                                (#x99A8 . #x6AD2)	;CJK UNIFIED IDEOGRAPH
                                (#x99A9 . #x6AD3)	;CJK UNIFIED IDEOGRAPH
                                (#x99AA . #x6AD4)	;CJK UNIFIED IDEOGRAPH
                                (#x99AB . #x6AD5)	;CJK UNIFIED IDEOGRAPH
                                (#x99AC . #x6AD6)	;CJK UNIFIED IDEOGRAPH
                                (#x99AD . #x6AD7)	;CJK UNIFIED IDEOGRAPH
                                (#x99AE . #x6AD8)	;CJK UNIFIED IDEOGRAPH
                                (#x99AF . #x6AD9)	;CJK UNIFIED IDEOGRAPH
                                (#x99B0 . #x6ADA)	;CJK UNIFIED IDEOGRAPH
                                (#x99B1 . #x6ADB)	;CJK UNIFIED IDEOGRAPH
                                (#x99B2 . #x6ADC)	;CJK UNIFIED IDEOGRAPH
                                (#x99B3 . #x6ADD)	;CJK UNIFIED IDEOGRAPH
                                (#x99B4 . #x6ADE)	;CJK UNIFIED IDEOGRAPH
                                (#x99B5 . #x6ADF)	;CJK UNIFIED IDEOGRAPH
                                (#x99B6 . #x6AE0)	;CJK UNIFIED IDEOGRAPH
                                (#x99B7 . #x6AE1)	;CJK UNIFIED IDEOGRAPH
                                (#x99B8 . #x6AE2)	;CJK UNIFIED IDEOGRAPH
                                (#x99B9 . #x6AE3)	;CJK UNIFIED IDEOGRAPH
                                (#x99BA . #x6AE4)	;CJK UNIFIED IDEOGRAPH
                                (#x99BB . #x6AE5)	;CJK UNIFIED IDEOGRAPH
                                (#x99BC . #x6AE6)	;CJK UNIFIED IDEOGRAPH
                                (#x99BD . #x6AE7)	;CJK UNIFIED IDEOGRAPH
                                (#x99BE . #x6AE8)	;CJK UNIFIED IDEOGRAPH
                                (#x99BF . #x6AE9)	;CJK UNIFIED IDEOGRAPH
                                (#x99C0 . #x6AEA)	;CJK UNIFIED IDEOGRAPH
                                (#x99C1 . #x6AEB)	;CJK UNIFIED IDEOGRAPH
                                (#x99C2 . #x6AEC)	;CJK UNIFIED IDEOGRAPH
                                (#x99C3 . #x6AED)	;CJK UNIFIED IDEOGRAPH
                                (#x99C4 . #x6AEE)	;CJK UNIFIED IDEOGRAPH
                                (#x99C5 . #x6AEF)	;CJK UNIFIED IDEOGRAPH
                                (#x99C6 . #x6AF0)	;CJK UNIFIED IDEOGRAPH
                                (#x99C7 . #x6AF1)	;CJK UNIFIED IDEOGRAPH
                                (#x99C8 . #x6AF2)	;CJK UNIFIED IDEOGRAPH
                                (#x99C9 . #x6AF3)	;CJK UNIFIED IDEOGRAPH
                                (#x99CA . #x6AF4)	;CJK UNIFIED IDEOGRAPH
                                (#x99CB . #x6AF5)	;CJK UNIFIED IDEOGRAPH
                                (#x99CC . #x6AF6)	;CJK UNIFIED IDEOGRAPH
                                (#x99CD . #x6AF7)	;CJK UNIFIED IDEOGRAPH
                                (#x99CE . #x6AF8)	;CJK UNIFIED IDEOGRAPH
                                (#x99CF . #x6AF9)	;CJK UNIFIED IDEOGRAPH
                                (#x99D0 . #x6AFA)	;CJK UNIFIED IDEOGRAPH
                                (#x99D1 . #x6AFB)	;CJK UNIFIED IDEOGRAPH
                                (#x99D2 . #x6AFC)	;CJK UNIFIED IDEOGRAPH
                                (#x99D3 . #x6AFD)	;CJK UNIFIED IDEOGRAPH
                                (#x99D4 . #x6AFE)	;CJK UNIFIED IDEOGRAPH
                                (#x99D5 . #x6AFF)	;CJK UNIFIED IDEOGRAPH
                                (#x99D6 . #x6B00)	;CJK UNIFIED IDEOGRAPH
                                (#x99D7 . #x6B01)	;CJK UNIFIED IDEOGRAPH
                                (#x99D8 . #x6B02)	;CJK UNIFIED IDEOGRAPH
                                (#x99D9 . #x6B03)	;CJK UNIFIED IDEOGRAPH
                                (#x99DA . #x6B04)	;CJK UNIFIED IDEOGRAPH
                                (#x99DB . #x6B05)	;CJK UNIFIED IDEOGRAPH
                                (#x99DC . #x6B06)	;CJK UNIFIED IDEOGRAPH
                                (#x99DD . #x6B07)	;CJK UNIFIED IDEOGRAPH
                                (#x99DE . #x6B08)	;CJK UNIFIED IDEOGRAPH
                                (#x99DF . #x6B09)	;CJK UNIFIED IDEOGRAPH
                                (#x99E0 . #x6B0A)	;CJK UNIFIED IDEOGRAPH
                                (#x99E1 . #x6B0B)	;CJK UNIFIED IDEOGRAPH
                                (#x99E2 . #x6B0C)	;CJK UNIFIED IDEOGRAPH
                                (#x99E3 . #x6B0D)	;CJK UNIFIED IDEOGRAPH
                                (#x99E4 . #x6B0E)	;CJK UNIFIED IDEOGRAPH
                                (#x99E5 . #x6B0F)	;CJK UNIFIED IDEOGRAPH
                                (#x99E6 . #x6B10)	;CJK UNIFIED IDEOGRAPH
                                (#x99E7 . #x6B11)	;CJK UNIFIED IDEOGRAPH
                                (#x99E8 . #x6B12)	;CJK UNIFIED IDEOGRAPH
                                (#x99E9 . #x6B13)	;CJK UNIFIED IDEOGRAPH
                                (#x99EA . #x6B14)	;CJK UNIFIED IDEOGRAPH
                                (#x99EB . #x6B15)	;CJK UNIFIED IDEOGRAPH
                                (#x99EC . #x6B16)	;CJK UNIFIED IDEOGRAPH
                                (#x99ED . #x6B17)	;CJK UNIFIED IDEOGRAPH
                                (#x99EE . #x6B18)	;CJK UNIFIED IDEOGRAPH
                                (#x99EF . #x6B19)	;CJK UNIFIED IDEOGRAPH
                                (#x99F0 . #x6B1A)	;CJK UNIFIED IDEOGRAPH
                                (#x99F1 . #x6B1B)	;CJK UNIFIED IDEOGRAPH
                                (#x99F2 . #x6B1C)	;CJK UNIFIED IDEOGRAPH
                                (#x99F3 . #x6B1D)	;CJK UNIFIED IDEOGRAPH
                                (#x99F4 . #x6B1E)	;CJK UNIFIED IDEOGRAPH
                                (#x99F5 . #x6B1F)	;CJK UNIFIED IDEOGRAPH
                                (#x99F6 . #x6B25)	;CJK UNIFIED IDEOGRAPH
                                (#x99F7 . #x6B26)	;CJK UNIFIED IDEOGRAPH
                                (#x99F8 . #x6B28)	;CJK UNIFIED IDEOGRAPH
                                (#x99F9 . #x6B29)	;CJK UNIFIED IDEOGRAPH
                                (#x99FA . #x6B2A)	;CJK UNIFIED IDEOGRAPH
                                (#x99FB . #x6B2B)	;CJK UNIFIED IDEOGRAPH
                                (#x99FC . #x6B2C)	;CJK UNIFIED IDEOGRAPH
                                (#x99FD . #x6B2D)	;CJK UNIFIED IDEOGRAPH
                                (#x99FE . #x6B2E)	;CJK UNIFIED IDEOGRAPH
                                (#x9A40 . #x6B2F)	;CJK UNIFIED IDEOGRAPH
                                (#x9A41 . #x6B30)	;CJK UNIFIED IDEOGRAPH
                                (#x9A42 . #x6B31)	;CJK UNIFIED IDEOGRAPH
                                (#x9A43 . #x6B33)	;CJK UNIFIED IDEOGRAPH
                                (#x9A44 . #x6B34)	;CJK UNIFIED IDEOGRAPH
                                (#x9A45 . #x6B35)	;CJK UNIFIED IDEOGRAPH
                                (#x9A46 . #x6B36)	;CJK UNIFIED IDEOGRAPH
                                (#x9A47 . #x6B38)	;CJK UNIFIED IDEOGRAPH
                                (#x9A48 . #x6B3B)	;CJK UNIFIED IDEOGRAPH
                                (#x9A49 . #x6B3C)	;CJK UNIFIED IDEOGRAPH
                                (#x9A4A . #x6B3D)	;CJK UNIFIED IDEOGRAPH
                                (#x9A4B . #x6B3F)	;CJK UNIFIED IDEOGRAPH
                                (#x9A4C . #x6B40)	;CJK UNIFIED IDEOGRAPH
                                (#x9A4D . #x6B41)	;CJK UNIFIED IDEOGRAPH
                                (#x9A4E . #x6B42)	;CJK UNIFIED IDEOGRAPH
                                (#x9A4F . #x6B44)	;CJK UNIFIED IDEOGRAPH
                                (#x9A50 . #x6B45)	;CJK UNIFIED IDEOGRAPH
                                (#x9A51 . #x6B48)	;CJK UNIFIED IDEOGRAPH
                                (#x9A52 . #x6B4A)	;CJK UNIFIED IDEOGRAPH
                                (#x9A53 . #x6B4B)	;CJK UNIFIED IDEOGRAPH
                                (#x9A54 . #x6B4D)	;CJK UNIFIED IDEOGRAPH
                                (#x9A55 . #x6B4E)	;CJK UNIFIED IDEOGRAPH
                                (#x9A56 . #x6B4F)	;CJK UNIFIED IDEOGRAPH
                                (#x9A57 . #x6B50)	;CJK UNIFIED IDEOGRAPH
                                (#x9A58 . #x6B51)	;CJK UNIFIED IDEOGRAPH
                                (#x9A59 . #x6B52)	;CJK UNIFIED IDEOGRAPH
                                (#x9A5A . #x6B53)	;CJK UNIFIED IDEOGRAPH
                                (#x9A5B . #x6B54)	;CJK UNIFIED IDEOGRAPH
                                (#x9A5C . #x6B55)	;CJK UNIFIED IDEOGRAPH
                                (#x9A5D . #x6B56)	;CJK UNIFIED IDEOGRAPH
                                (#x9A5E . #x6B57)	;CJK UNIFIED IDEOGRAPH
                                (#x9A5F . #x6B58)	;CJK UNIFIED IDEOGRAPH
                                (#x9A60 . #x6B5A)	;CJK UNIFIED IDEOGRAPH
                                (#x9A61 . #x6B5B)	;CJK UNIFIED IDEOGRAPH
                                (#x9A62 . #x6B5C)	;CJK UNIFIED IDEOGRAPH
                                (#x9A63 . #x6B5D)	;CJK UNIFIED IDEOGRAPH
                                (#x9A64 . #x6B5E)	;CJK UNIFIED IDEOGRAPH
                                (#x9A65 . #x6B5F)	;CJK UNIFIED IDEOGRAPH
                                (#x9A66 . #x6B60)	;CJK UNIFIED IDEOGRAPH
                                (#x9A67 . #x6B61)	;CJK UNIFIED IDEOGRAPH
                                (#x9A68 . #x6B68)	;CJK UNIFIED IDEOGRAPH
                                (#x9A69 . #x6B69)	;CJK UNIFIED IDEOGRAPH
                                (#x9A6A . #x6B6B)	;CJK UNIFIED IDEOGRAPH
                                (#x9A6B . #x6B6C)	;CJK UNIFIED IDEOGRAPH
                                (#x9A6C . #x6B6D)	;CJK UNIFIED IDEOGRAPH
                                (#x9A6D . #x6B6E)	;CJK UNIFIED IDEOGRAPH
                                (#x9A6E . #x6B6F)	;CJK UNIFIED IDEOGRAPH
                                (#x9A6F . #x6B70)	;CJK UNIFIED IDEOGRAPH
                                (#x9A70 . #x6B71)	;CJK UNIFIED IDEOGRAPH
                                (#x9A71 . #x6B72)	;CJK UNIFIED IDEOGRAPH
                                (#x9A72 . #x6B73)	;CJK UNIFIED IDEOGRAPH
                                (#x9A73 . #x6B74)	;CJK UNIFIED IDEOGRAPH
                                (#x9A74 . #x6B75)	;CJK UNIFIED IDEOGRAPH
                                (#x9A75 . #x6B76)	;CJK UNIFIED IDEOGRAPH
                                (#x9A76 . #x6B77)	;CJK UNIFIED IDEOGRAPH
                                (#x9A77 . #x6B78)	;CJK UNIFIED IDEOGRAPH
                                (#x9A78 . #x6B7A)	;CJK UNIFIED IDEOGRAPH
                                (#x9A79 . #x6B7D)	;CJK UNIFIED IDEOGRAPH
                                (#x9A7A . #x6B7E)	;CJK UNIFIED IDEOGRAPH
                                (#x9A7B . #x6B7F)	;CJK UNIFIED IDEOGRAPH
                                (#x9A7C . #x6B80)	;CJK UNIFIED IDEOGRAPH
                                (#x9A7D . #x6B85)	;CJK UNIFIED IDEOGRAPH
                                (#x9A7E . #x6B88)	;CJK UNIFIED IDEOGRAPH
                                (#x9A80 . #x6B8C)	;CJK UNIFIED IDEOGRAPH
                                (#x9A81 . #x6B8E)	;CJK UNIFIED IDEOGRAPH
                                (#x9A82 . #x6B8F)	;CJK UNIFIED IDEOGRAPH
                                (#x9A83 . #x6B90)	;CJK UNIFIED IDEOGRAPH
                                (#x9A84 . #x6B91)	;CJK UNIFIED IDEOGRAPH
                                (#x9A85 . #x6B94)	;CJK UNIFIED IDEOGRAPH
                                (#x9A86 . #x6B95)	;CJK UNIFIED IDEOGRAPH
                                (#x9A87 . #x6B97)	;CJK UNIFIED IDEOGRAPH
                                (#x9A88 . #x6B98)	;CJK UNIFIED IDEOGRAPH
                                (#x9A89 . #x6B99)	;CJK UNIFIED IDEOGRAPH
                                (#x9A8A . #x6B9C)	;CJK UNIFIED IDEOGRAPH
                                (#x9A8B . #x6B9D)	;CJK UNIFIED IDEOGRAPH
                                (#x9A8C . #x6B9E)	;CJK UNIFIED IDEOGRAPH
                                (#x9A8D . #x6B9F)	;CJK UNIFIED IDEOGRAPH
                                (#x9A8E . #x6BA0)	;CJK UNIFIED IDEOGRAPH
                                (#x9A8F . #x6BA2)	;CJK UNIFIED IDEOGRAPH
                                (#x9A90 . #x6BA3)	;CJK UNIFIED IDEOGRAPH
                                (#x9A91 . #x6BA4)	;CJK UNIFIED IDEOGRAPH
                                (#x9A92 . #x6BA5)	;CJK UNIFIED IDEOGRAPH
                                (#x9A93 . #x6BA6)	;CJK UNIFIED IDEOGRAPH
                                (#x9A94 . #x6BA7)	;CJK UNIFIED IDEOGRAPH
                                (#x9A95 . #x6BA8)	;CJK UNIFIED IDEOGRAPH
                                (#x9A96 . #x6BA9)	;CJK UNIFIED IDEOGRAPH
                                (#x9A97 . #x6BAB)	;CJK UNIFIED IDEOGRAPH
                                (#x9A98 . #x6BAC)	;CJK UNIFIED IDEOGRAPH
                                (#x9A99 . #x6BAD)	;CJK UNIFIED IDEOGRAPH
                                (#x9A9A . #x6BAE)	;CJK UNIFIED IDEOGRAPH
                                (#x9A9B . #x6BAF)	;CJK UNIFIED IDEOGRAPH
                                (#x9A9C . #x6BB0)	;CJK UNIFIED IDEOGRAPH
                                (#x9A9D . #x6BB1)	;CJK UNIFIED IDEOGRAPH
                                (#x9A9E . #x6BB2)	;CJK UNIFIED IDEOGRAPH
                                (#x9A9F . #x6BB6)	;CJK UNIFIED IDEOGRAPH
                                (#x9AA0 . #x6BB8)	;CJK UNIFIED IDEOGRAPH
                                (#x9AA1 . #x6BB9)	;CJK UNIFIED IDEOGRAPH
                                (#x9AA2 . #x6BBA)	;CJK UNIFIED IDEOGRAPH
                                (#x9AA3 . #x6BBB)	;CJK UNIFIED IDEOGRAPH
                                (#x9AA4 . #x6BBC)	;CJK UNIFIED IDEOGRAPH
                                (#x9AA5 . #x6BBD)	;CJK UNIFIED IDEOGRAPH
                                (#x9AA6 . #x6BBE)	;CJK UNIFIED IDEOGRAPH
                                (#x9AA7 . #x6BC0)	;CJK UNIFIED IDEOGRAPH
                                (#x9AA8 . #x6BC3)	;CJK UNIFIED IDEOGRAPH
                                (#x9AA9 . #x6BC4)	;CJK UNIFIED IDEOGRAPH
                                (#x9AAA . #x6BC6)	;CJK UNIFIED IDEOGRAPH
                                (#x9AAB . #x6BC7)	;CJK UNIFIED IDEOGRAPH
                                (#x9AAC . #x6BC8)	;CJK UNIFIED IDEOGRAPH
                                (#x9AAD . #x6BC9)	;CJK UNIFIED IDEOGRAPH
                                (#x9AAE . #x6BCA)	;CJK UNIFIED IDEOGRAPH
                                (#x9AAF . #x6BCC)	;CJK UNIFIED IDEOGRAPH
                                (#x9AB0 . #x6BCE)	;CJK UNIFIED IDEOGRAPH
                                (#x9AB1 . #x6BD0)	;CJK UNIFIED IDEOGRAPH
                                (#x9AB2 . #x6BD1)	;CJK UNIFIED IDEOGRAPH
                                (#x9AB3 . #x6BD8)	;CJK UNIFIED IDEOGRAPH
                                (#x9AB4 . #x6BDA)	;CJK UNIFIED IDEOGRAPH
                                (#x9AB5 . #x6BDC)	;CJK UNIFIED IDEOGRAPH
                                (#x9AB6 . #x6BDD)	;CJK UNIFIED IDEOGRAPH
                                (#x9AB7 . #x6BDE)	;CJK UNIFIED IDEOGRAPH
                                (#x9AB8 . #x6BDF)	;CJK UNIFIED IDEOGRAPH
                                (#x9AB9 . #x6BE0)	;CJK UNIFIED IDEOGRAPH
                                (#x9ABA . #x6BE2)	;CJK UNIFIED IDEOGRAPH
                                (#x9ABB . #x6BE3)	;CJK UNIFIED IDEOGRAPH
                                (#x9ABC . #x6BE4)	;CJK UNIFIED IDEOGRAPH
                                (#x9ABD . #x6BE5)	;CJK UNIFIED IDEOGRAPH
                                (#x9ABE . #x6BE6)	;CJK UNIFIED IDEOGRAPH
                                (#x9ABF . #x6BE7)	;CJK UNIFIED IDEOGRAPH
                                (#x9AC0 . #x6BE8)	;CJK UNIFIED IDEOGRAPH
                                (#x9AC1 . #x6BE9)	;CJK UNIFIED IDEOGRAPH
                                (#x9AC2 . #x6BEC)	;CJK UNIFIED IDEOGRAPH
                                (#x9AC3 . #x6BED)	;CJK UNIFIED IDEOGRAPH
                                (#x9AC4 . #x6BEE)	;CJK UNIFIED IDEOGRAPH
                                (#x9AC5 . #x6BF0)	;CJK UNIFIED IDEOGRAPH
                                (#x9AC6 . #x6BF1)	;CJK UNIFIED IDEOGRAPH
                                (#x9AC7 . #x6BF2)	;CJK UNIFIED IDEOGRAPH
                                (#x9AC8 . #x6BF4)	;CJK UNIFIED IDEOGRAPH
                                (#x9AC9 . #x6BF6)	;CJK UNIFIED IDEOGRAPH
                                (#x9ACA . #x6BF7)	;CJK UNIFIED IDEOGRAPH
                                (#x9ACB . #x6BF8)	;CJK UNIFIED IDEOGRAPH
                                (#x9ACC . #x6BFA)	;CJK UNIFIED IDEOGRAPH
                                (#x9ACD . #x6BFB)	;CJK UNIFIED IDEOGRAPH
                                (#x9ACE . #x6BFC)	;CJK UNIFIED IDEOGRAPH
                                (#x9ACF . #x6BFE)	;CJK UNIFIED IDEOGRAPH
                                (#x9AD0 . #x6BFF)	;CJK UNIFIED IDEOGRAPH
                                (#x9AD1 . #x6C00)	;CJK UNIFIED IDEOGRAPH
                                (#x9AD2 . #x6C01)	;CJK UNIFIED IDEOGRAPH
                                (#x9AD3 . #x6C02)	;CJK UNIFIED IDEOGRAPH
                                (#x9AD4 . #x6C03)	;CJK UNIFIED IDEOGRAPH
                                (#x9AD5 . #x6C04)	;CJK UNIFIED IDEOGRAPH
                                (#x9AD6 . #x6C08)	;CJK UNIFIED IDEOGRAPH
                                (#x9AD7 . #x6C09)	;CJK UNIFIED IDEOGRAPH
                                (#x9AD8 . #x6C0A)	;CJK UNIFIED IDEOGRAPH
                                (#x9AD9 . #x6C0B)	;CJK UNIFIED IDEOGRAPH
                                (#x9ADA . #x6C0C)	;CJK UNIFIED IDEOGRAPH
                                (#x9ADB . #x6C0E)	;CJK UNIFIED IDEOGRAPH
                                (#x9ADC . #x6C12)	;CJK UNIFIED IDEOGRAPH
                                (#x9ADD . #x6C17)	;CJK UNIFIED IDEOGRAPH
                                (#x9ADE . #x6C1C)	;CJK UNIFIED IDEOGRAPH
                                (#x9ADF . #x6C1D)	;CJK UNIFIED IDEOGRAPH
                                (#x9AE0 . #x6C1E)	;CJK UNIFIED IDEOGRAPH
                                (#x9AE1 . #x6C20)	;CJK UNIFIED IDEOGRAPH
                                (#x9AE2 . #x6C23)	;CJK UNIFIED IDEOGRAPH
                                (#x9AE3 . #x6C25)	;CJK UNIFIED IDEOGRAPH
                                (#x9AE4 . #x6C2B)	;CJK UNIFIED IDEOGRAPH
                                (#x9AE5 . #x6C2C)	;CJK UNIFIED IDEOGRAPH
                                (#x9AE6 . #x6C2D)	;CJK UNIFIED IDEOGRAPH
                                (#x9AE7 . #x6C31)	;CJK UNIFIED IDEOGRAPH
                                (#x9AE8 . #x6C33)	;CJK UNIFIED IDEOGRAPH
                                (#x9AE9 . #x6C36)	;CJK UNIFIED IDEOGRAPH
                                (#x9AEA . #x6C37)	;CJK UNIFIED IDEOGRAPH
                                (#x9AEB . #x6C39)	;CJK UNIFIED IDEOGRAPH
                                (#x9AEC . #x6C3A)	;CJK UNIFIED IDEOGRAPH
                                (#x9AED . #x6C3B)	;CJK UNIFIED IDEOGRAPH
                                (#x9AEE . #x6C3C)	;CJK UNIFIED IDEOGRAPH
                                (#x9AEF . #x6C3E)	;CJK UNIFIED IDEOGRAPH
                                (#x9AF0 . #x6C3F)	;CJK UNIFIED IDEOGRAPH
                                (#x9AF1 . #x6C43)	;CJK UNIFIED IDEOGRAPH
                                (#x9AF2 . #x6C44)	;CJK UNIFIED IDEOGRAPH
                                (#x9AF3 . #x6C45)	;CJK UNIFIED IDEOGRAPH
                                (#x9AF4 . #x6C48)	;CJK UNIFIED IDEOGRAPH
                                (#x9AF5 . #x6C4B)	;CJK UNIFIED IDEOGRAPH
                                (#x9AF6 . #x6C4C)	;CJK UNIFIED IDEOGRAPH
                                (#x9AF7 . #x6C4D)	;CJK UNIFIED IDEOGRAPH
                                (#x9AF8 . #x6C4E)	;CJK UNIFIED IDEOGRAPH
                                (#x9AF9 . #x6C4F)	;CJK UNIFIED IDEOGRAPH
                                (#x9AFA . #x6C51)	;CJK UNIFIED IDEOGRAPH
                                (#x9AFB . #x6C52)	;CJK UNIFIED IDEOGRAPH
                                (#x9AFC . #x6C53)	;CJK UNIFIED IDEOGRAPH
                                (#x9AFD . #x6C56)	;CJK UNIFIED IDEOGRAPH
                                (#x9AFE . #x6C58)	;CJK UNIFIED IDEOGRAPH
                                (#x9B40 . #x6C59)	;CJK UNIFIED IDEOGRAPH
                                (#x9B41 . #x6C5A)	;CJK UNIFIED IDEOGRAPH
                                (#x9B42 . #x6C62)	;CJK UNIFIED IDEOGRAPH
                                (#x9B43 . #x6C63)	;CJK UNIFIED IDEOGRAPH
                                (#x9B44 . #x6C65)	;CJK UNIFIED IDEOGRAPH
                                (#x9B45 . #x6C66)	;CJK UNIFIED IDEOGRAPH
                                (#x9B46 . #x6C67)	;CJK UNIFIED IDEOGRAPH
                                (#x9B47 . #x6C6B)	;CJK UNIFIED IDEOGRAPH
                                (#x9B48 . #x6C6C)	;CJK UNIFIED IDEOGRAPH
                                (#x9B49 . #x6C6D)	;CJK UNIFIED IDEOGRAPH
                                (#x9B4A . #x6C6E)	;CJK UNIFIED IDEOGRAPH
                                (#x9B4B . #x6C6F)	;CJK UNIFIED IDEOGRAPH
                                (#x9B4C . #x6C71)	;CJK UNIFIED IDEOGRAPH
                                (#x9B4D . #x6C73)	;CJK UNIFIED IDEOGRAPH
                                (#x9B4E . #x6C75)	;CJK UNIFIED IDEOGRAPH
                                (#x9B4F . #x6C77)	;CJK UNIFIED IDEOGRAPH
                                (#x9B50 . #x6C78)	;CJK UNIFIED IDEOGRAPH
                                (#x9B51 . #x6C7A)	;CJK UNIFIED IDEOGRAPH
                                (#x9B52 . #x6C7B)	;CJK UNIFIED IDEOGRAPH
                                (#x9B53 . #x6C7C)	;CJK UNIFIED IDEOGRAPH
                                (#x9B54 . #x6C7F)	;CJK UNIFIED IDEOGRAPH
                                (#x9B55 . #x6C80)	;CJK UNIFIED IDEOGRAPH
                                (#x9B56 . #x6C84)	;CJK UNIFIED IDEOGRAPH
                                (#x9B57 . #x6C87)	;CJK UNIFIED IDEOGRAPH
                                (#x9B58 . #x6C8A)	;CJK UNIFIED IDEOGRAPH
                                (#x9B59 . #x6C8B)	;CJK UNIFIED IDEOGRAPH
                                (#x9B5A . #x6C8D)	;CJK UNIFIED IDEOGRAPH
                                (#x9B5B . #x6C8E)	;CJK UNIFIED IDEOGRAPH
                                (#x9B5C . #x6C91)	;CJK UNIFIED IDEOGRAPH
                                (#x9B5D . #x6C92)	;CJK UNIFIED IDEOGRAPH
                                (#x9B5E . #x6C95)	;CJK UNIFIED IDEOGRAPH
                                (#x9B5F . #x6C96)	;CJK UNIFIED IDEOGRAPH
                                (#x9B60 . #x6C97)	;CJK UNIFIED IDEOGRAPH
                                (#x9B61 . #x6C98)	;CJK UNIFIED IDEOGRAPH
                                (#x9B62 . #x6C9A)	;CJK UNIFIED IDEOGRAPH
                                (#x9B63 . #x6C9C)	;CJK UNIFIED IDEOGRAPH
                                (#x9B64 . #x6C9D)	;CJK UNIFIED IDEOGRAPH
                                (#x9B65 . #x6C9E)	;CJK UNIFIED IDEOGRAPH
                                (#x9B66 . #x6CA0)	;CJK UNIFIED IDEOGRAPH
                                (#x9B67 . #x6CA2)	;CJK UNIFIED IDEOGRAPH
                                (#x9B68 . #x6CA8)	;CJK UNIFIED IDEOGRAPH
                                (#x9B69 . #x6CAC)	;CJK UNIFIED IDEOGRAPH
                                (#x9B6A . #x6CAF)	;CJK UNIFIED IDEOGRAPH
                                (#x9B6B . #x6CB0)	;CJK UNIFIED IDEOGRAPH
                                (#x9B6C . #x6CB4)	;CJK UNIFIED IDEOGRAPH
                                (#x9B6D . #x6CB5)	;CJK UNIFIED IDEOGRAPH
                                (#x9B6E . #x6CB6)	;CJK UNIFIED IDEOGRAPH
                                (#x9B6F . #x6CB7)	;CJK UNIFIED IDEOGRAPH
                                (#x9B70 . #x6CBA)	;CJK UNIFIED IDEOGRAPH
                                (#x9B71 . #x6CC0)	;CJK UNIFIED IDEOGRAPH
                                (#x9B72 . #x6CC1)	;CJK UNIFIED IDEOGRAPH
                                (#x9B73 . #x6CC2)	;CJK UNIFIED IDEOGRAPH
                                (#x9B74 . #x6CC3)	;CJK UNIFIED IDEOGRAPH
                                (#x9B75 . #x6CC6)	;CJK UNIFIED IDEOGRAPH
                                (#x9B76 . #x6CC7)	;CJK UNIFIED IDEOGRAPH
                                (#x9B77 . #x6CC8)	;CJK UNIFIED IDEOGRAPH
                                (#x9B78 . #x6CCB)	;CJK UNIFIED IDEOGRAPH
                                (#x9B79 . #x6CCD)	;CJK UNIFIED IDEOGRAPH
                                (#x9B7A . #x6CCE)	;CJK UNIFIED IDEOGRAPH
                                (#x9B7B . #x6CCF)	;CJK UNIFIED IDEOGRAPH
                                (#x9B7C . #x6CD1)	;CJK UNIFIED IDEOGRAPH
                                (#x9B7D . #x6CD2)	;CJK UNIFIED IDEOGRAPH
                                (#x9B7E . #x6CD8)	;CJK UNIFIED IDEOGRAPH
                                (#x9B80 . #x6CD9)	;CJK UNIFIED IDEOGRAPH
                                (#x9B81 . #x6CDA)	;CJK UNIFIED IDEOGRAPH
                                (#x9B82 . #x6CDC)	;CJK UNIFIED IDEOGRAPH
                                (#x9B83 . #x6CDD)	;CJK UNIFIED IDEOGRAPH
                                (#x9B84 . #x6CDF)	;CJK UNIFIED IDEOGRAPH
                                (#x9B85 . #x6CE4)	;CJK UNIFIED IDEOGRAPH
                                (#x9B86 . #x6CE6)	;CJK UNIFIED IDEOGRAPH
                                (#x9B87 . #x6CE7)	;CJK UNIFIED IDEOGRAPH
                                (#x9B88 . #x6CE9)	;CJK UNIFIED IDEOGRAPH
                                (#x9B89 . #x6CEC)	;CJK UNIFIED IDEOGRAPH
                                (#x9B8A . #x6CED)	;CJK UNIFIED IDEOGRAPH
                                (#x9B8B . #x6CF2)	;CJK UNIFIED IDEOGRAPH
                                (#x9B8C . #x6CF4)	;CJK UNIFIED IDEOGRAPH
                                (#x9B8D . #x6CF9)	;CJK UNIFIED IDEOGRAPH
                                (#x9B8E . #x6CFF)	;CJK UNIFIED IDEOGRAPH
                                (#x9B8F . #x6D00)	;CJK UNIFIED IDEOGRAPH
                                (#x9B90 . #x6D02)	;CJK UNIFIED IDEOGRAPH
                                (#x9B91 . #x6D03)	;CJK UNIFIED IDEOGRAPH
                                (#x9B92 . #x6D05)	;CJK UNIFIED IDEOGRAPH
                                (#x9B93 . #x6D06)	;CJK UNIFIED IDEOGRAPH
                                (#x9B94 . #x6D08)	;CJK UNIFIED IDEOGRAPH
                                (#x9B95 . #x6D09)	;CJK UNIFIED IDEOGRAPH
                                (#x9B96 . #x6D0A)	;CJK UNIFIED IDEOGRAPH
                                (#x9B97 . #x6D0D)	;CJK UNIFIED IDEOGRAPH
                                (#x9B98 . #x6D0F)	;CJK UNIFIED IDEOGRAPH
                                (#x9B99 . #x6D10)	;CJK UNIFIED IDEOGRAPH
                                (#x9B9A . #x6D11)	;CJK UNIFIED IDEOGRAPH
                                (#x9B9B . #x6D13)	;CJK UNIFIED IDEOGRAPH
                                (#x9B9C . #x6D14)	;CJK UNIFIED IDEOGRAPH
                                (#x9B9D . #x6D15)	;CJK UNIFIED IDEOGRAPH
                                (#x9B9E . #x6D16)	;CJK UNIFIED IDEOGRAPH
                                (#x9B9F . #x6D18)	;CJK UNIFIED IDEOGRAPH
                                (#x9BA0 . #x6D1C)	;CJK UNIFIED IDEOGRAPH
                                (#x9BA1 . #x6D1D)	;CJK UNIFIED IDEOGRAPH
                                (#x9BA2 . #x6D1F)	;CJK UNIFIED IDEOGRAPH
                                (#x9BA3 . #x6D20)	;CJK UNIFIED IDEOGRAPH
                                (#x9BA4 . #x6D21)	;CJK UNIFIED IDEOGRAPH
                                (#x9BA5 . #x6D22)	;CJK UNIFIED IDEOGRAPH
                                (#x9BA6 . #x6D23)	;CJK UNIFIED IDEOGRAPH
                                (#x9BA7 . #x6D24)	;CJK UNIFIED IDEOGRAPH
                                (#x9BA8 . #x6D26)	;CJK UNIFIED IDEOGRAPH
                                (#x9BA9 . #x6D28)	;CJK UNIFIED IDEOGRAPH
                                (#x9BAA . #x6D29)	;CJK UNIFIED IDEOGRAPH
                                (#x9BAB . #x6D2C)	;CJK UNIFIED IDEOGRAPH
                                (#x9BAC . #x6D2D)	;CJK UNIFIED IDEOGRAPH
                                (#x9BAD . #x6D2F)	;CJK UNIFIED IDEOGRAPH
                                (#x9BAE . #x6D30)	;CJK UNIFIED IDEOGRAPH
                                (#x9BAF . #x6D34)	;CJK UNIFIED IDEOGRAPH
                                (#x9BB0 . #x6D36)	;CJK UNIFIED IDEOGRAPH
                                (#x9BB1 . #x6D37)	;CJK UNIFIED IDEOGRAPH
                                (#x9BB2 . #x6D38)	;CJK UNIFIED IDEOGRAPH
                                (#x9BB3 . #x6D3A)	;CJK UNIFIED IDEOGRAPH
                                (#x9BB4 . #x6D3F)	;CJK UNIFIED IDEOGRAPH
                                (#x9BB5 . #x6D40)	;CJK UNIFIED IDEOGRAPH
                                (#x9BB6 . #x6D42)	;CJK UNIFIED IDEOGRAPH
                                (#x9BB7 . #x6D44)	;CJK UNIFIED IDEOGRAPH
                                (#x9BB8 . #x6D49)	;CJK UNIFIED IDEOGRAPH
                                (#x9BB9 . #x6D4C)	;CJK UNIFIED IDEOGRAPH
                                (#x9BBA . #x6D50)	;CJK UNIFIED IDEOGRAPH
                                (#x9BBB . #x6D55)	;CJK UNIFIED IDEOGRAPH
                                (#x9BBC . #x6D56)	;CJK UNIFIED IDEOGRAPH
                                (#x9BBD . #x6D57)	;CJK UNIFIED IDEOGRAPH
                                (#x9BBE . #x6D58)	;CJK UNIFIED IDEOGRAPH
                                (#x9BBF . #x6D5B)	;CJK UNIFIED IDEOGRAPH
                                (#x9BC0 . #x6D5D)	;CJK UNIFIED IDEOGRAPH
                                (#x9BC1 . #x6D5F)	;CJK UNIFIED IDEOGRAPH
                                (#x9BC2 . #x6D61)	;CJK UNIFIED IDEOGRAPH
                                (#x9BC3 . #x6D62)	;CJK UNIFIED IDEOGRAPH
                                (#x9BC4 . #x6D64)	;CJK UNIFIED IDEOGRAPH
                                (#x9BC5 . #x6D65)	;CJK UNIFIED IDEOGRAPH
                                (#x9BC6 . #x6D67)	;CJK UNIFIED IDEOGRAPH
                                (#x9BC7 . #x6D68)	;CJK UNIFIED IDEOGRAPH
                                (#x9BC8 . #x6D6B)	;CJK UNIFIED IDEOGRAPH
                                (#x9BC9 . #x6D6C)	;CJK UNIFIED IDEOGRAPH
                                (#x9BCA . #x6D6D)	;CJK UNIFIED IDEOGRAPH
                                (#x9BCB . #x6D70)	;CJK UNIFIED IDEOGRAPH
                                (#x9BCC . #x6D71)	;CJK UNIFIED IDEOGRAPH
                                (#x9BCD . #x6D72)	;CJK UNIFIED IDEOGRAPH
                                (#x9BCE . #x6D73)	;CJK UNIFIED IDEOGRAPH
                                (#x9BCF . #x6D75)	;CJK UNIFIED IDEOGRAPH
                                (#x9BD0 . #x6D76)	;CJK UNIFIED IDEOGRAPH
                                (#x9BD1 . #x6D79)	;CJK UNIFIED IDEOGRAPH
                                (#x9BD2 . #x6D7A)	;CJK UNIFIED IDEOGRAPH
                                (#x9BD3 . #x6D7B)	;CJK UNIFIED IDEOGRAPH
                                (#x9BD4 . #x6D7D)	;CJK UNIFIED IDEOGRAPH
                                (#x9BD5 . #x6D7E)	;CJK UNIFIED IDEOGRAPH
                                (#x9BD6 . #x6D7F)	;CJK UNIFIED IDEOGRAPH
                                (#x9BD7 . #x6D80)	;CJK UNIFIED IDEOGRAPH
                                (#x9BD8 . #x6D81)	;CJK UNIFIED IDEOGRAPH
                                (#x9BD9 . #x6D83)	;CJK UNIFIED IDEOGRAPH
                                (#x9BDA . #x6D84)	;CJK UNIFIED IDEOGRAPH
                                (#x9BDB . #x6D86)	;CJK UNIFIED IDEOGRAPH
                                (#x9BDC . #x6D87)	;CJK UNIFIED IDEOGRAPH
                                (#x9BDD . #x6D8A)	;CJK UNIFIED IDEOGRAPH
                                (#x9BDE . #x6D8B)	;CJK UNIFIED IDEOGRAPH
                                (#x9BDF . #x6D8D)	;CJK UNIFIED IDEOGRAPH
                                (#x9BE0 . #x6D8F)	;CJK UNIFIED IDEOGRAPH
                                (#x9BE1 . #x6D90)	;CJK UNIFIED IDEOGRAPH
                                (#x9BE2 . #x6D92)	;CJK UNIFIED IDEOGRAPH
                                (#x9BE3 . #x6D96)	;CJK UNIFIED IDEOGRAPH
                                (#x9BE4 . #x6D97)	;CJK UNIFIED IDEOGRAPH
                                (#x9BE5 . #x6D98)	;CJK UNIFIED IDEOGRAPH
                                (#x9BE6 . #x6D99)	;CJK UNIFIED IDEOGRAPH
                                (#x9BE7 . #x6D9A)	;CJK UNIFIED IDEOGRAPH
                                (#x9BE8 . #x6D9C)	;CJK UNIFIED IDEOGRAPH
                                (#x9BE9 . #x6DA2)	;CJK UNIFIED IDEOGRAPH
                                (#x9BEA . #x6DA5)	;CJK UNIFIED IDEOGRAPH
                                (#x9BEB . #x6DAC)	;CJK UNIFIED IDEOGRAPH
                                (#x9BEC . #x6DAD)	;CJK UNIFIED IDEOGRAPH
                                (#x9BED . #x6DB0)	;CJK UNIFIED IDEOGRAPH
                                (#x9BEE . #x6DB1)	;CJK UNIFIED IDEOGRAPH
                                (#x9BEF . #x6DB3)	;CJK UNIFIED IDEOGRAPH
                                (#x9BF0 . #x6DB4)	;CJK UNIFIED IDEOGRAPH
                                (#x9BF1 . #x6DB6)	;CJK UNIFIED IDEOGRAPH
                                (#x9BF2 . #x6DB7)	;CJK UNIFIED IDEOGRAPH
                                (#x9BF3 . #x6DB9)	;CJK UNIFIED IDEOGRAPH
                                (#x9BF4 . #x6DBA)	;CJK UNIFIED IDEOGRAPH
                                (#x9BF5 . #x6DBB)	;CJK UNIFIED IDEOGRAPH
                                (#x9BF6 . #x6DBC)	;CJK UNIFIED IDEOGRAPH
                                (#x9BF7 . #x6DBD)	;CJK UNIFIED IDEOGRAPH
                                (#x9BF8 . #x6DBE)	;CJK UNIFIED IDEOGRAPH
                                (#x9BF9 . #x6DC1)	;CJK UNIFIED IDEOGRAPH
                                (#x9BFA . #x6DC2)	;CJK UNIFIED IDEOGRAPH
                                (#x9BFB . #x6DC3)	;CJK UNIFIED IDEOGRAPH
                                (#x9BFC . #x6DC8)	;CJK UNIFIED IDEOGRAPH
                                (#x9BFD . #x6DC9)	;CJK UNIFIED IDEOGRAPH
                                (#x9BFE . #x6DCA)	;CJK UNIFIED IDEOGRAPH
                                (#x9C40 . #x6DCD)	;CJK UNIFIED IDEOGRAPH
                                (#x9C41 . #x6DCE)	;CJK UNIFIED IDEOGRAPH
                                (#x9C42 . #x6DCF)	;CJK UNIFIED IDEOGRAPH
                                (#x9C43 . #x6DD0)	;CJK UNIFIED IDEOGRAPH
                                (#x9C44 . #x6DD2)	;CJK UNIFIED IDEOGRAPH
                                (#x9C45 . #x6DD3)	;CJK UNIFIED IDEOGRAPH
                                (#x9C46 . #x6DD4)	;CJK UNIFIED IDEOGRAPH
                                (#x9C47 . #x6DD5)	;CJK UNIFIED IDEOGRAPH
                                (#x9C48 . #x6DD7)	;CJK UNIFIED IDEOGRAPH
                                (#x9C49 . #x6DDA)	;CJK UNIFIED IDEOGRAPH
                                (#x9C4A . #x6DDB)	;CJK UNIFIED IDEOGRAPH
                                (#x9C4B . #x6DDC)	;CJK UNIFIED IDEOGRAPH
                                (#x9C4C . #x6DDF)	;CJK UNIFIED IDEOGRAPH
                                (#x9C4D . #x6DE2)	;CJK UNIFIED IDEOGRAPH
                                (#x9C4E . #x6DE3)	;CJK UNIFIED IDEOGRAPH
                                (#x9C4F . #x6DE5)	;CJK UNIFIED IDEOGRAPH
                                (#x9C50 . #x6DE7)	;CJK UNIFIED IDEOGRAPH
                                (#x9C51 . #x6DE8)	;CJK UNIFIED IDEOGRAPH
                                (#x9C52 . #x6DE9)	;CJK UNIFIED IDEOGRAPH
                                (#x9C53 . #x6DEA)	;CJK UNIFIED IDEOGRAPH
                                (#x9C54 . #x6DED)	;CJK UNIFIED IDEOGRAPH
                                (#x9C55 . #x6DEF)	;CJK UNIFIED IDEOGRAPH
                                (#x9C56 . #x6DF0)	;CJK UNIFIED IDEOGRAPH
                                (#x9C57 . #x6DF2)	;CJK UNIFIED IDEOGRAPH
                                (#x9C58 . #x6DF4)	;CJK UNIFIED IDEOGRAPH
                                (#x9C59 . #x6DF5)	;CJK UNIFIED IDEOGRAPH
                                (#x9C5A . #x6DF6)	;CJK UNIFIED IDEOGRAPH
                                (#x9C5B . #x6DF8)	;CJK UNIFIED IDEOGRAPH
                                (#x9C5C . #x6DFA)	;CJK UNIFIED IDEOGRAPH
                                (#x9C5D . #x6DFD)	;CJK UNIFIED IDEOGRAPH
                                (#x9C5E . #x6DFE)	;CJK UNIFIED IDEOGRAPH
                                (#x9C5F . #x6DFF)	;CJK UNIFIED IDEOGRAPH
                                (#x9C60 . #x6E00)	;CJK UNIFIED IDEOGRAPH
                                (#x9C61 . #x6E01)	;CJK UNIFIED IDEOGRAPH
                                (#x9C62 . #x6E02)	;CJK UNIFIED IDEOGRAPH
                                (#x9C63 . #x6E03)	;CJK UNIFIED IDEOGRAPH
                                (#x9C64 . #x6E04)	;CJK UNIFIED IDEOGRAPH
                                (#x9C65 . #x6E06)	;CJK UNIFIED IDEOGRAPH
                                (#x9C66 . #x6E07)	;CJK UNIFIED IDEOGRAPH
                                (#x9C67 . #x6E08)	;CJK UNIFIED IDEOGRAPH
                                (#x9C68 . #x6E09)	;CJK UNIFIED IDEOGRAPH
                                (#x9C69 . #x6E0B)	;CJK UNIFIED IDEOGRAPH
                                (#x9C6A . #x6E0F)	;CJK UNIFIED IDEOGRAPH
                                (#x9C6B . #x6E12)	;CJK UNIFIED IDEOGRAPH
                                (#x9C6C . #x6E13)	;CJK UNIFIED IDEOGRAPH
                                (#x9C6D . #x6E15)	;CJK UNIFIED IDEOGRAPH
                                (#x9C6E . #x6E18)	;CJK UNIFIED IDEOGRAPH
                                (#x9C6F . #x6E19)	;CJK UNIFIED IDEOGRAPH
                                (#x9C70 . #x6E1B)	;CJK UNIFIED IDEOGRAPH
                                (#x9C71 . #x6E1C)	;CJK UNIFIED IDEOGRAPH
                                (#x9C72 . #x6E1E)	;CJK UNIFIED IDEOGRAPH
                                (#x9C73 . #x6E1F)	;CJK UNIFIED IDEOGRAPH
                                (#x9C74 . #x6E22)	;CJK UNIFIED IDEOGRAPH
                                (#x9C75 . #x6E26)	;CJK UNIFIED IDEOGRAPH
                                (#x9C76 . #x6E27)	;CJK UNIFIED IDEOGRAPH
                                (#x9C77 . #x6E28)	;CJK UNIFIED IDEOGRAPH
                                (#x9C78 . #x6E2A)	;CJK UNIFIED IDEOGRAPH
                                (#x9C79 . #x6E2C)	;CJK UNIFIED IDEOGRAPH
                                (#x9C7A . #x6E2E)	;CJK UNIFIED IDEOGRAPH
                                (#x9C7B . #x6E30)	;CJK UNIFIED IDEOGRAPH
                                (#x9C7C . #x6E31)	;CJK UNIFIED IDEOGRAPH
                                (#x9C7D . #x6E33)	;CJK UNIFIED IDEOGRAPH
                                (#x9C7E . #x6E35)	;CJK UNIFIED IDEOGRAPH
                                (#x9C80 . #x6E36)	;CJK UNIFIED IDEOGRAPH
                                (#x9C81 . #x6E37)	;CJK UNIFIED IDEOGRAPH
                                (#x9C82 . #x6E39)	;CJK UNIFIED IDEOGRAPH
                                (#x9C83 . #x6E3B)	;CJK UNIFIED IDEOGRAPH
                                (#x9C84 . #x6E3C)	;CJK UNIFIED IDEOGRAPH
                                (#x9C85 . #x6E3D)	;CJK UNIFIED IDEOGRAPH
                                (#x9C86 . #x6E3E)	;CJK UNIFIED IDEOGRAPH
                                (#x9C87 . #x6E3F)	;CJK UNIFIED IDEOGRAPH
                                (#x9C88 . #x6E40)	;CJK UNIFIED IDEOGRAPH
                                (#x9C89 . #x6E41)	;CJK UNIFIED IDEOGRAPH
                                (#x9C8A . #x6E42)	;CJK UNIFIED IDEOGRAPH
                                (#x9C8B . #x6E45)	;CJK UNIFIED IDEOGRAPH
                                (#x9C8C . #x6E46)	;CJK UNIFIED IDEOGRAPH
                                (#x9C8D . #x6E47)	;CJK UNIFIED IDEOGRAPH
                                (#x9C8E . #x6E48)	;CJK UNIFIED IDEOGRAPH
                                (#x9C8F . #x6E49)	;CJK UNIFIED IDEOGRAPH
                                (#x9C90 . #x6E4A)	;CJK UNIFIED IDEOGRAPH
                                (#x9C91 . #x6E4B)	;CJK UNIFIED IDEOGRAPH
                                (#x9C92 . #x6E4C)	;CJK UNIFIED IDEOGRAPH
                                (#x9C93 . #x6E4F)	;CJK UNIFIED IDEOGRAPH
                                (#x9C94 . #x6E50)	;CJK UNIFIED IDEOGRAPH
                                (#x9C95 . #x6E51)	;CJK UNIFIED IDEOGRAPH
                                (#x9C96 . #x6E52)	;CJK UNIFIED IDEOGRAPH
                                (#x9C97 . #x6E55)	;CJK UNIFIED IDEOGRAPH
                                (#x9C98 . #x6E57)	;CJK UNIFIED IDEOGRAPH
                                (#x9C99 . #x6E59)	;CJK UNIFIED IDEOGRAPH
                                (#x9C9A . #x6E5A)	;CJK UNIFIED IDEOGRAPH
                                (#x9C9B . #x6E5C)	;CJK UNIFIED IDEOGRAPH
                                (#x9C9C . #x6E5D)	;CJK UNIFIED IDEOGRAPH
                                (#x9C9D . #x6E5E)	;CJK UNIFIED IDEOGRAPH
                                (#x9C9E . #x6E60)	;CJK UNIFIED IDEOGRAPH
                                (#x9C9F . #x6E61)	;CJK UNIFIED IDEOGRAPH
                                (#x9CA0 . #x6E62)	;CJK UNIFIED IDEOGRAPH
                                (#x9CA1 . #x6E63)	;CJK UNIFIED IDEOGRAPH
                                (#x9CA2 . #x6E64)	;CJK UNIFIED IDEOGRAPH
                                (#x9CA3 . #x6E65)	;CJK UNIFIED IDEOGRAPH
                                (#x9CA4 . #x6E66)	;CJK UNIFIED IDEOGRAPH
                                (#x9CA5 . #x6E67)	;CJK UNIFIED IDEOGRAPH
                                (#x9CA6 . #x6E68)	;CJK UNIFIED IDEOGRAPH
                                (#x9CA7 . #x6E69)	;CJK UNIFIED IDEOGRAPH
                                (#x9CA8 . #x6E6A)	;CJK UNIFIED IDEOGRAPH
                                (#x9CA9 . #x6E6C)	;CJK UNIFIED IDEOGRAPH
                                (#x9CAA . #x6E6D)	;CJK UNIFIED IDEOGRAPH
                                (#x9CAB . #x6E6F)	;CJK UNIFIED IDEOGRAPH
                                (#x9CAC . #x6E70)	;CJK UNIFIED IDEOGRAPH
                                (#x9CAD . #x6E71)	;CJK UNIFIED IDEOGRAPH
                                (#x9CAE . #x6E72)	;CJK UNIFIED IDEOGRAPH
                                (#x9CAF . #x6E73)	;CJK UNIFIED IDEOGRAPH
                                (#x9CB0 . #x6E74)	;CJK UNIFIED IDEOGRAPH
                                (#x9CB1 . #x6E75)	;CJK UNIFIED IDEOGRAPH
                                (#x9CB2 . #x6E76)	;CJK UNIFIED IDEOGRAPH
                                (#x9CB3 . #x6E77)	;CJK UNIFIED IDEOGRAPH
                                (#x9CB4 . #x6E78)	;CJK UNIFIED IDEOGRAPH
                                (#x9CB5 . #x6E79)	;CJK UNIFIED IDEOGRAPH
                                (#x9CB6 . #x6E7A)	;CJK UNIFIED IDEOGRAPH
                                (#x9CB7 . #x6E7B)	;CJK UNIFIED IDEOGRAPH
                                (#x9CB8 . #x6E7C)	;CJK UNIFIED IDEOGRAPH
                                (#x9CB9 . #x6E7D)	;CJK UNIFIED IDEOGRAPH
                                (#x9CBA . #x6E80)	;CJK UNIFIED IDEOGRAPH
                                (#x9CBB . #x6E81)	;CJK UNIFIED IDEOGRAPH
                                (#x9CBC . #x6E82)	;CJK UNIFIED IDEOGRAPH
                                (#x9CBD . #x6E84)	;CJK UNIFIED IDEOGRAPH
                                (#x9CBE . #x6E87)	;CJK UNIFIED IDEOGRAPH
                                (#x9CBF . #x6E88)	;CJK UNIFIED IDEOGRAPH
                                (#x9CC0 . #x6E8A)	;CJK UNIFIED IDEOGRAPH
                                (#x9CC1 . #x6E8B)	;CJK UNIFIED IDEOGRAPH
                                (#x9CC2 . #x6E8C)	;CJK UNIFIED IDEOGRAPH
                                (#x9CC3 . #x6E8D)	;CJK UNIFIED IDEOGRAPH
                                (#x9CC4 . #x6E8E)	;CJK UNIFIED IDEOGRAPH
                                (#x9CC5 . #x6E91)	;CJK UNIFIED IDEOGRAPH
                                (#x9CC6 . #x6E92)	;CJK UNIFIED IDEOGRAPH
                                (#x9CC7 . #x6E93)	;CJK UNIFIED IDEOGRAPH
                                (#x9CC8 . #x6E94)	;CJK UNIFIED IDEOGRAPH
                                (#x9CC9 . #x6E95)	;CJK UNIFIED IDEOGRAPH
                                (#x9CCA . #x6E96)	;CJK UNIFIED IDEOGRAPH
                                (#x9CCB . #x6E97)	;CJK UNIFIED IDEOGRAPH
                                (#x9CCC . #x6E99)	;CJK UNIFIED IDEOGRAPH
                                (#x9CCD . #x6E9A)	;CJK UNIFIED IDEOGRAPH
                                (#x9CCE . #x6E9B)	;CJK UNIFIED IDEOGRAPH
                                (#x9CCF . #x6E9D)	;CJK UNIFIED IDEOGRAPH
                                (#x9CD0 . #x6E9E)	;CJK UNIFIED IDEOGRAPH
                                (#x9CD1 . #x6EA0)	;CJK UNIFIED IDEOGRAPH
                                (#x9CD2 . #x6EA1)	;CJK UNIFIED IDEOGRAPH
                                (#x9CD3 . #x6EA3)	;CJK UNIFIED IDEOGRAPH
                                (#x9CD4 . #x6EA4)	;CJK UNIFIED IDEOGRAPH
                                (#x9CD5 . #x6EA6)	;CJK UNIFIED IDEOGRAPH
                                (#x9CD6 . #x6EA8)	;CJK UNIFIED IDEOGRAPH
                                (#x9CD7 . #x6EA9)	;CJK UNIFIED IDEOGRAPH
                                (#x9CD8 . #x6EAB)	;CJK UNIFIED IDEOGRAPH
                                (#x9CD9 . #x6EAC)	;CJK UNIFIED IDEOGRAPH
                                (#x9CDA . #x6EAD)	;CJK UNIFIED IDEOGRAPH
                                (#x9CDB . #x6EAE)	;CJK UNIFIED IDEOGRAPH
                                (#x9CDC . #x6EB0)	;CJK UNIFIED IDEOGRAPH
                                (#x9CDD . #x6EB3)	;CJK UNIFIED IDEOGRAPH
                                (#x9CDE . #x6EB5)	;CJK UNIFIED IDEOGRAPH
                                (#x9CDF . #x6EB8)	;CJK UNIFIED IDEOGRAPH
                                (#x9CE0 . #x6EB9)	;CJK UNIFIED IDEOGRAPH
                                (#x9CE1 . #x6EBC)	;CJK UNIFIED IDEOGRAPH
                                (#x9CE2 . #x6EBE)	;CJK UNIFIED IDEOGRAPH
                                (#x9CE3 . #x6EBF)	;CJK UNIFIED IDEOGRAPH
                                (#x9CE4 . #x6EC0)	;CJK UNIFIED IDEOGRAPH
                                (#x9CE5 . #x6EC3)	;CJK UNIFIED IDEOGRAPH
                                (#x9CE6 . #x6EC4)	;CJK UNIFIED IDEOGRAPH
                                (#x9CE7 . #x6EC5)	;CJK UNIFIED IDEOGRAPH
                                (#x9CE8 . #x6EC6)	;CJK UNIFIED IDEOGRAPH
                                (#x9CE9 . #x6EC8)	;CJK UNIFIED IDEOGRAPH
                                (#x9CEA . #x6EC9)	;CJK UNIFIED IDEOGRAPH
                                (#x9CEB . #x6ECA)	;CJK UNIFIED IDEOGRAPH
                                (#x9CEC . #x6ECC)	;CJK UNIFIED IDEOGRAPH
                                (#x9CED . #x6ECD)	;CJK UNIFIED IDEOGRAPH
                                (#x9CEE . #x6ECE)	;CJK UNIFIED IDEOGRAPH
                                (#x9CEF . #x6ED0)	;CJK UNIFIED IDEOGRAPH
                                (#x9CF0 . #x6ED2)	;CJK UNIFIED IDEOGRAPH
                                (#x9CF1 . #x6ED6)	;CJK UNIFIED IDEOGRAPH
                                (#x9CF2 . #x6ED8)	;CJK UNIFIED IDEOGRAPH
                                (#x9CF3 . #x6ED9)	;CJK UNIFIED IDEOGRAPH
                                (#x9CF4 . #x6EDB)	;CJK UNIFIED IDEOGRAPH
                                (#x9CF5 . #x6EDC)	;CJK UNIFIED IDEOGRAPH
                                (#x9CF6 . #x6EDD)	;CJK UNIFIED IDEOGRAPH
                                (#x9CF7 . #x6EE3)	;CJK UNIFIED IDEOGRAPH
                                (#x9CF8 . #x6EE7)	;CJK UNIFIED IDEOGRAPH
                                (#x9CF9 . #x6EEA)	;CJK UNIFIED IDEOGRAPH
                                (#x9CFA . #x6EEB)	;CJK UNIFIED IDEOGRAPH
                                (#x9CFB . #x6EEC)	;CJK UNIFIED IDEOGRAPH
                                (#x9CFC . #x6EED)	;CJK UNIFIED IDEOGRAPH
                                (#x9CFD . #x6EEE)	;CJK UNIFIED IDEOGRAPH
                                (#x9CFE . #x6EEF)	;CJK UNIFIED IDEOGRAPH
                                (#x9D40 . #x6EF0)	;CJK UNIFIED IDEOGRAPH
                                (#x9D41 . #x6EF1)	;CJK UNIFIED IDEOGRAPH
                                (#x9D42 . #x6EF2)	;CJK UNIFIED IDEOGRAPH
                                (#x9D43 . #x6EF3)	;CJK UNIFIED IDEOGRAPH
                                (#x9D44 . #x6EF5)	;CJK UNIFIED IDEOGRAPH
                                (#x9D45 . #x6EF6)	;CJK UNIFIED IDEOGRAPH
                                (#x9D46 . #x6EF7)	;CJK UNIFIED IDEOGRAPH
                                (#x9D47 . #x6EF8)	;CJK UNIFIED IDEOGRAPH
                                (#x9D48 . #x6EFA)	;CJK UNIFIED IDEOGRAPH
                                (#x9D49 . #x6EFB)	;CJK UNIFIED IDEOGRAPH
                                (#x9D4A . #x6EFC)	;CJK UNIFIED IDEOGRAPH
                                (#x9D4B . #x6EFD)	;CJK UNIFIED IDEOGRAPH
                                (#x9D4C . #x6EFE)	;CJK UNIFIED IDEOGRAPH
                                (#x9D4D . #x6EFF)	;CJK UNIFIED IDEOGRAPH
                                (#x9D4E . #x6F00)	;CJK UNIFIED IDEOGRAPH
                                (#x9D4F . #x6F01)	;CJK UNIFIED IDEOGRAPH
                                (#x9D50 . #x6F03)	;CJK UNIFIED IDEOGRAPH
                                (#x9D51 . #x6F04)	;CJK UNIFIED IDEOGRAPH
                                (#x9D52 . #x6F05)	;CJK UNIFIED IDEOGRAPH
                                (#x9D53 . #x6F07)	;CJK UNIFIED IDEOGRAPH
                                (#x9D54 . #x6F08)	;CJK UNIFIED IDEOGRAPH
                                (#x9D55 . #x6F0A)	;CJK UNIFIED IDEOGRAPH
                                (#x9D56 . #x6F0B)	;CJK UNIFIED IDEOGRAPH
                                (#x9D57 . #x6F0C)	;CJK UNIFIED IDEOGRAPH
                                (#x9D58 . #x6F0D)	;CJK UNIFIED IDEOGRAPH
                                (#x9D59 . #x6F0E)	;CJK UNIFIED IDEOGRAPH
                                (#x9D5A . #x6F10)	;CJK UNIFIED IDEOGRAPH
                                (#x9D5B . #x6F11)	;CJK UNIFIED IDEOGRAPH
                                (#x9D5C . #x6F12)	;CJK UNIFIED IDEOGRAPH
                                (#x9D5D . #x6F16)	;CJK UNIFIED IDEOGRAPH
                                (#x9D5E . #x6F17)	;CJK UNIFIED IDEOGRAPH
                                (#x9D5F . #x6F18)	;CJK UNIFIED IDEOGRAPH
                                (#x9D60 . #x6F19)	;CJK UNIFIED IDEOGRAPH
                                (#x9D61 . #x6F1A)	;CJK UNIFIED IDEOGRAPH
                                (#x9D62 . #x6F1B)	;CJK UNIFIED IDEOGRAPH
                                (#x9D63 . #x6F1C)	;CJK UNIFIED IDEOGRAPH
                                (#x9D64 . #x6F1D)	;CJK UNIFIED IDEOGRAPH
                                (#x9D65 . #x6F1E)	;CJK UNIFIED IDEOGRAPH
                                (#x9D66 . #x6F1F)	;CJK UNIFIED IDEOGRAPH
                                (#x9D67 . #x6F21)	;CJK UNIFIED IDEOGRAPH
                                (#x9D68 . #x6F22)	;CJK UNIFIED IDEOGRAPH
                                (#x9D69 . #x6F23)	;CJK UNIFIED IDEOGRAPH
                                (#x9D6A . #x6F25)	;CJK UNIFIED IDEOGRAPH
                                (#x9D6B . #x6F26)	;CJK UNIFIED IDEOGRAPH
                                (#x9D6C . #x6F27)	;CJK UNIFIED IDEOGRAPH
                                (#x9D6D . #x6F28)	;CJK UNIFIED IDEOGRAPH
                                (#x9D6E . #x6F2C)	;CJK UNIFIED IDEOGRAPH
                                (#x9D6F . #x6F2E)	;CJK UNIFIED IDEOGRAPH
                                (#x9D70 . #x6F30)	;CJK UNIFIED IDEOGRAPH
                                (#x9D71 . #x6F32)	;CJK UNIFIED IDEOGRAPH
                                (#x9D72 . #x6F34)	;CJK UNIFIED IDEOGRAPH
                                (#x9D73 . #x6F35)	;CJK UNIFIED IDEOGRAPH
                                (#x9D74 . #x6F37)	;CJK UNIFIED IDEOGRAPH
                                (#x9D75 . #x6F38)	;CJK UNIFIED IDEOGRAPH
                                (#x9D76 . #x6F39)	;CJK UNIFIED IDEOGRAPH
                                (#x9D77 . #x6F3A)	;CJK UNIFIED IDEOGRAPH
                                (#x9D78 . #x6F3B)	;CJK UNIFIED IDEOGRAPH
                                (#x9D79 . #x6F3C)	;CJK UNIFIED IDEOGRAPH
                                (#x9D7A . #x6F3D)	;CJK UNIFIED IDEOGRAPH
                                (#x9D7B . #x6F3F)	;CJK UNIFIED IDEOGRAPH
                                (#x9D7C . #x6F40)	;CJK UNIFIED IDEOGRAPH
                                (#x9D7D . #x6F41)	;CJK UNIFIED IDEOGRAPH
                                (#x9D7E . #x6F42)	;CJK UNIFIED IDEOGRAPH
                                (#x9D80 . #x6F43)	;CJK UNIFIED IDEOGRAPH
                                (#x9D81 . #x6F44)	;CJK UNIFIED IDEOGRAPH
                                (#x9D82 . #x6F45)	;CJK UNIFIED IDEOGRAPH
                                (#x9D83 . #x6F48)	;CJK UNIFIED IDEOGRAPH
                                (#x9D84 . #x6F49)	;CJK UNIFIED IDEOGRAPH
                                (#x9D85 . #x6F4A)	;CJK UNIFIED IDEOGRAPH
                                (#x9D86 . #x6F4C)	;CJK UNIFIED IDEOGRAPH
                                (#x9D87 . #x6F4E)	;CJK UNIFIED IDEOGRAPH
                                (#x9D88 . #x6F4F)	;CJK UNIFIED IDEOGRAPH
                                (#x9D89 . #x6F50)	;CJK UNIFIED IDEOGRAPH
                                (#x9D8A . #x6F51)	;CJK UNIFIED IDEOGRAPH
                                (#x9D8B . #x6F52)	;CJK UNIFIED IDEOGRAPH
                                (#x9D8C . #x6F53)	;CJK UNIFIED IDEOGRAPH
                                (#x9D8D . #x6F54)	;CJK UNIFIED IDEOGRAPH
                                (#x9D8E . #x6F55)	;CJK UNIFIED IDEOGRAPH
                                (#x9D8F . #x6F56)	;CJK UNIFIED IDEOGRAPH
                                (#x9D90 . #x6F57)	;CJK UNIFIED IDEOGRAPH
                                (#x9D91 . #x6F59)	;CJK UNIFIED IDEOGRAPH
                                (#x9D92 . #x6F5A)	;CJK UNIFIED IDEOGRAPH
                                (#x9D93 . #x6F5B)	;CJK UNIFIED IDEOGRAPH
                                (#x9D94 . #x6F5D)	;CJK UNIFIED IDEOGRAPH
                                (#x9D95 . #x6F5F)	;CJK UNIFIED IDEOGRAPH
                                (#x9D96 . #x6F60)	;CJK UNIFIED IDEOGRAPH
                                (#x9D97 . #x6F61)	;CJK UNIFIED IDEOGRAPH
                                (#x9D98 . #x6F63)	;CJK UNIFIED IDEOGRAPH
                                (#x9D99 . #x6F64)	;CJK UNIFIED IDEOGRAPH
                                (#x9D9A . #x6F65)	;CJK UNIFIED IDEOGRAPH
                                (#x9D9B . #x6F67)	;CJK UNIFIED IDEOGRAPH
                                (#x9D9C . #x6F68)	;CJK UNIFIED IDEOGRAPH
                                (#x9D9D . #x6F69)	;CJK UNIFIED IDEOGRAPH
                                (#x9D9E . #x6F6A)	;CJK UNIFIED IDEOGRAPH
                                (#x9D9F . #x6F6B)	;CJK UNIFIED IDEOGRAPH
                                (#x9DA0 . #x6F6C)	;CJK UNIFIED IDEOGRAPH
                                (#x9DA1 . #x6F6F)	;CJK UNIFIED IDEOGRAPH
                                (#x9DA2 . #x6F70)	;CJK UNIFIED IDEOGRAPH
                                (#x9DA3 . #x6F71)	;CJK UNIFIED IDEOGRAPH
                                (#x9DA4 . #x6F73)	;CJK UNIFIED IDEOGRAPH
                                (#x9DA5 . #x6F75)	;CJK UNIFIED IDEOGRAPH
                                (#x9DA6 . #x6F76)	;CJK UNIFIED IDEOGRAPH
                                (#x9DA7 . #x6F77)	;CJK UNIFIED IDEOGRAPH
                                (#x9DA8 . #x6F79)	;CJK UNIFIED IDEOGRAPH
                                (#x9DA9 . #x6F7B)	;CJK UNIFIED IDEOGRAPH
                                (#x9DAA . #x6F7D)	;CJK UNIFIED IDEOGRAPH
                                (#x9DAB . #x6F7E)	;CJK UNIFIED IDEOGRAPH
                                (#x9DAC . #x6F7F)	;CJK UNIFIED IDEOGRAPH
                                (#x9DAD . #x6F80)	;CJK UNIFIED IDEOGRAPH
                                (#x9DAE . #x6F81)	;CJK UNIFIED IDEOGRAPH
                                (#x9DAF . #x6F82)	;CJK UNIFIED IDEOGRAPH
                                (#x9DB0 . #x6F83)	;CJK UNIFIED IDEOGRAPH
                                (#x9DB1 . #x6F85)	;CJK UNIFIED IDEOGRAPH
                                (#x9DB2 . #x6F86)	;CJK UNIFIED IDEOGRAPH
                                (#x9DB3 . #x6F87)	;CJK UNIFIED IDEOGRAPH
                                (#x9DB4 . #x6F8A)	;CJK UNIFIED IDEOGRAPH
                                (#x9DB5 . #x6F8B)	;CJK UNIFIED IDEOGRAPH
                                (#x9DB6 . #x6F8F)	;CJK UNIFIED IDEOGRAPH
                                (#x9DB7 . #x6F90)	;CJK UNIFIED IDEOGRAPH
                                (#x9DB8 . #x6F91)	;CJK UNIFIED IDEOGRAPH
                                (#x9DB9 . #x6F92)	;CJK UNIFIED IDEOGRAPH
                                (#x9DBA . #x6F93)	;CJK UNIFIED IDEOGRAPH
                                (#x9DBB . #x6F94)	;CJK UNIFIED IDEOGRAPH
                                (#x9DBC . #x6F95)	;CJK UNIFIED IDEOGRAPH
                                (#x9DBD . #x6F96)	;CJK UNIFIED IDEOGRAPH
                                (#x9DBE . #x6F97)	;CJK UNIFIED IDEOGRAPH
                                (#x9DBF . #x6F98)	;CJK UNIFIED IDEOGRAPH
                                (#x9DC0 . #x6F99)	;CJK UNIFIED IDEOGRAPH
                                (#x9DC1 . #x6F9A)	;CJK UNIFIED IDEOGRAPH
                                (#x9DC2 . #x6F9B)	;CJK UNIFIED IDEOGRAPH
                                (#x9DC3 . #x6F9D)	;CJK UNIFIED IDEOGRAPH
                                (#x9DC4 . #x6F9E)	;CJK UNIFIED IDEOGRAPH
                                (#x9DC5 . #x6F9F)	;CJK UNIFIED IDEOGRAPH
                                (#x9DC6 . #x6FA0)	;CJK UNIFIED IDEOGRAPH
                                (#x9DC7 . #x6FA2)	;CJK UNIFIED IDEOGRAPH
                                (#x9DC8 . #x6FA3)	;CJK UNIFIED IDEOGRAPH
                                (#x9DC9 . #x6FA4)	;CJK UNIFIED IDEOGRAPH
                                (#x9DCA . #x6FA5)	;CJK UNIFIED IDEOGRAPH
                                (#x9DCB . #x6FA6)	;CJK UNIFIED IDEOGRAPH
                                (#x9DCC . #x6FA8)	;CJK UNIFIED IDEOGRAPH
                                (#x9DCD . #x6FA9)	;CJK UNIFIED IDEOGRAPH
                                (#x9DCE . #x6FAA)	;CJK UNIFIED IDEOGRAPH
                                (#x9DCF . #x6FAB)	;CJK UNIFIED IDEOGRAPH
                                (#x9DD0 . #x6FAC)	;CJK UNIFIED IDEOGRAPH
                                (#x9DD1 . #x6FAD)	;CJK UNIFIED IDEOGRAPH
                                (#x9DD2 . #x6FAE)	;CJK UNIFIED IDEOGRAPH
                                (#x9DD3 . #x6FAF)	;CJK UNIFIED IDEOGRAPH
                                (#x9DD4 . #x6FB0)	;CJK UNIFIED IDEOGRAPH
                                (#x9DD5 . #x6FB1)	;CJK UNIFIED IDEOGRAPH
                                (#x9DD6 . #x6FB2)	;CJK UNIFIED IDEOGRAPH
                                (#x9DD7 . #x6FB4)	;CJK UNIFIED IDEOGRAPH
                                (#x9DD8 . #x6FB5)	;CJK UNIFIED IDEOGRAPH
                                (#x9DD9 . #x6FB7)	;CJK UNIFIED IDEOGRAPH
                                (#x9DDA . #x6FB8)	;CJK UNIFIED IDEOGRAPH
                                (#x9DDB . #x6FBA)	;CJK UNIFIED IDEOGRAPH
                                (#x9DDC . #x6FBB)	;CJK UNIFIED IDEOGRAPH
                                (#x9DDD . #x6FBC)	;CJK UNIFIED IDEOGRAPH
                                (#x9DDE . #x6FBD)	;CJK UNIFIED IDEOGRAPH
                                (#x9DDF . #x6FBE)	;CJK UNIFIED IDEOGRAPH
                                (#x9DE0 . #x6FBF)	;CJK UNIFIED IDEOGRAPH
                                (#x9DE1 . #x6FC1)	;CJK UNIFIED IDEOGRAPH
                                (#x9DE2 . #x6FC3)	;CJK UNIFIED IDEOGRAPH
                                (#x9DE3 . #x6FC4)	;CJK UNIFIED IDEOGRAPH
                                (#x9DE4 . #x6FC5)	;CJK UNIFIED IDEOGRAPH
                                (#x9DE5 . #x6FC6)	;CJK UNIFIED IDEOGRAPH
                                (#x9DE6 . #x6FC7)	;CJK UNIFIED IDEOGRAPH
                                (#x9DE7 . #x6FC8)	;CJK UNIFIED IDEOGRAPH
                                (#x9DE8 . #x6FCA)	;CJK UNIFIED IDEOGRAPH
                                (#x9DE9 . #x6FCB)	;CJK UNIFIED IDEOGRAPH
                                (#x9DEA . #x6FCC)	;CJK UNIFIED IDEOGRAPH
                                (#x9DEB . #x6FCD)	;CJK UNIFIED IDEOGRAPH
                                (#x9DEC . #x6FCE)	;CJK UNIFIED IDEOGRAPH
                                (#x9DED . #x6FCF)	;CJK UNIFIED IDEOGRAPH
                                (#x9DEE . #x6FD0)	;CJK UNIFIED IDEOGRAPH
                                (#x9DEF . #x6FD3)	;CJK UNIFIED IDEOGRAPH
                                (#x9DF0 . #x6FD4)	;CJK UNIFIED IDEOGRAPH
                                (#x9DF1 . #x6FD5)	;CJK UNIFIED IDEOGRAPH
                                (#x9DF2 . #x6FD6)	;CJK UNIFIED IDEOGRAPH
                                (#x9DF3 . #x6FD7)	;CJK UNIFIED IDEOGRAPH
                                (#x9DF4 . #x6FD8)	;CJK UNIFIED IDEOGRAPH
                                (#x9DF5 . #x6FD9)	;CJK UNIFIED IDEOGRAPH
                                (#x9DF6 . #x6FDA)	;CJK UNIFIED IDEOGRAPH
                                (#x9DF7 . #x6FDB)	;CJK UNIFIED IDEOGRAPH
                                (#x9DF8 . #x6FDC)	;CJK UNIFIED IDEOGRAPH
                                (#x9DF9 . #x6FDD)	;CJK UNIFIED IDEOGRAPH
                                (#x9DFA . #x6FDF)	;CJK UNIFIED IDEOGRAPH
                                (#x9DFB . #x6FE2)	;CJK UNIFIED IDEOGRAPH
                                (#x9DFC . #x6FE3)	;CJK UNIFIED IDEOGRAPH
                                (#x9DFD . #x6FE4)	;CJK UNIFIED IDEOGRAPH
                                (#x9DFE . #x6FE5)	;CJK UNIFIED IDEOGRAPH
                                (#x9E40 . #x6FE6)	;CJK UNIFIED IDEOGRAPH
                                (#x9E41 . #x6FE7)	;CJK UNIFIED IDEOGRAPH
                                (#x9E42 . #x6FE8)	;CJK UNIFIED IDEOGRAPH
                                (#x9E43 . #x6FE9)	;CJK UNIFIED IDEOGRAPH
                                (#x9E44 . #x6FEA)	;CJK UNIFIED IDEOGRAPH
                                (#x9E45 . #x6FEB)	;CJK UNIFIED IDEOGRAPH
                                (#x9E46 . #x6FEC)	;CJK UNIFIED IDEOGRAPH
                                (#x9E47 . #x6FED)	;CJK UNIFIED IDEOGRAPH
                                (#x9E48 . #x6FF0)	;CJK UNIFIED IDEOGRAPH
                                (#x9E49 . #x6FF1)	;CJK UNIFIED IDEOGRAPH
                                (#x9E4A . #x6FF2)	;CJK UNIFIED IDEOGRAPH
                                (#x9E4B . #x6FF3)	;CJK UNIFIED IDEOGRAPH
                                (#x9E4C . #x6FF4)	;CJK UNIFIED IDEOGRAPH
                                (#x9E4D . #x6FF5)	;CJK UNIFIED IDEOGRAPH
                                (#x9E4E . #x6FF6)	;CJK UNIFIED IDEOGRAPH
                                (#x9E4F . #x6FF7)	;CJK UNIFIED IDEOGRAPH
                                (#x9E50 . #x6FF8)	;CJK UNIFIED IDEOGRAPH
                                (#x9E51 . #x6FF9)	;CJK UNIFIED IDEOGRAPH
                                (#x9E52 . #x6FFA)	;CJK UNIFIED IDEOGRAPH
                                (#x9E53 . #x6FFB)	;CJK UNIFIED IDEOGRAPH
                                (#x9E54 . #x6FFC)	;CJK UNIFIED IDEOGRAPH
                                (#x9E55 . #x6FFD)	;CJK UNIFIED IDEOGRAPH
                                (#x9E56 . #x6FFE)	;CJK UNIFIED IDEOGRAPH
                                (#x9E57 . #x6FFF)	;CJK UNIFIED IDEOGRAPH
                                (#x9E58 . #x7000)	;CJK UNIFIED IDEOGRAPH
                                (#x9E59 . #x7001)	;CJK UNIFIED IDEOGRAPH
                                (#x9E5A . #x7002)	;CJK UNIFIED IDEOGRAPH
                                (#x9E5B . #x7003)	;CJK UNIFIED IDEOGRAPH
                                (#x9E5C . #x7004)	;CJK UNIFIED IDEOGRAPH
                                (#x9E5D . #x7005)	;CJK UNIFIED IDEOGRAPH
                                (#x9E5E . #x7006)	;CJK UNIFIED IDEOGRAPH
                                (#x9E5F . #x7007)	;CJK UNIFIED IDEOGRAPH
                                (#x9E60 . #x7008)	;CJK UNIFIED IDEOGRAPH
                                (#x9E61 . #x7009)	;CJK UNIFIED IDEOGRAPH
                                (#x9E62 . #x700A)	;CJK UNIFIED IDEOGRAPH
                                (#x9E63 . #x700B)	;CJK UNIFIED IDEOGRAPH
                                (#x9E64 . #x700C)	;CJK UNIFIED IDEOGRAPH
                                (#x9E65 . #x700D)	;CJK UNIFIED IDEOGRAPH
                                (#x9E66 . #x700E)	;CJK UNIFIED IDEOGRAPH
                                (#x9E67 . #x700F)	;CJK UNIFIED IDEOGRAPH
                                (#x9E68 . #x7010)	;CJK UNIFIED IDEOGRAPH
                                (#x9E69 . #x7012)	;CJK UNIFIED IDEOGRAPH
                                (#x9E6A . #x7013)	;CJK UNIFIED IDEOGRAPH
                                (#x9E6B . #x7014)	;CJK UNIFIED IDEOGRAPH
                                (#x9E6C . #x7015)	;CJK UNIFIED IDEOGRAPH
                                (#x9E6D . #x7016)	;CJK UNIFIED IDEOGRAPH
                                (#x9E6E . #x7017)	;CJK UNIFIED IDEOGRAPH
                                (#x9E6F . #x7018)	;CJK UNIFIED IDEOGRAPH
                                (#x9E70 . #x7019)	;CJK UNIFIED IDEOGRAPH
                                (#x9E71 . #x701C)	;CJK UNIFIED IDEOGRAPH
                                (#x9E72 . #x701D)	;CJK UNIFIED IDEOGRAPH
                                (#x9E73 . #x701E)	;CJK UNIFIED IDEOGRAPH
                                (#x9E74 . #x701F)	;CJK UNIFIED IDEOGRAPH
                                (#x9E75 . #x7020)	;CJK UNIFIED IDEOGRAPH
                                (#x9E76 . #x7021)	;CJK UNIFIED IDEOGRAPH
                                (#x9E77 . #x7022)	;CJK UNIFIED IDEOGRAPH
                                (#x9E78 . #x7024)	;CJK UNIFIED IDEOGRAPH
                                (#x9E79 . #x7025)	;CJK UNIFIED IDEOGRAPH
                                (#x9E7A . #x7026)	;CJK UNIFIED IDEOGRAPH
                                (#x9E7B . #x7027)	;CJK UNIFIED IDEOGRAPH
                                (#x9E7C . #x7028)	;CJK UNIFIED IDEOGRAPH
                                (#x9E7D . #x7029)	;CJK UNIFIED IDEOGRAPH
                                (#x9E7E . #x702A)	;CJK UNIFIED IDEOGRAPH
                                (#x9E80 . #x702B)	;CJK UNIFIED IDEOGRAPH
                                (#x9E81 . #x702C)	;CJK UNIFIED IDEOGRAPH
                                (#x9E82 . #x702D)	;CJK UNIFIED IDEOGRAPH
                                (#x9E83 . #x702E)	;CJK UNIFIED IDEOGRAPH
                                (#x9E84 . #x702F)	;CJK UNIFIED IDEOGRAPH
                                (#x9E85 . #x7030)	;CJK UNIFIED IDEOGRAPH
                                (#x9E86 . #x7031)	;CJK UNIFIED IDEOGRAPH
                                (#x9E87 . #x7032)	;CJK UNIFIED IDEOGRAPH
                                (#x9E88 . #x7033)	;CJK UNIFIED IDEOGRAPH
                                (#x9E89 . #x7034)	;CJK UNIFIED IDEOGRAPH
                                (#x9E8A . #x7036)	;CJK UNIFIED IDEOGRAPH
                                (#x9E8B . #x7037)	;CJK UNIFIED IDEOGRAPH
                                (#x9E8C . #x7038)	;CJK UNIFIED IDEOGRAPH
                                (#x9E8D . #x703A)	;CJK UNIFIED IDEOGRAPH
                                (#x9E8E . #x703B)	;CJK UNIFIED IDEOGRAPH
                                (#x9E8F . #x703C)	;CJK UNIFIED IDEOGRAPH
                                (#x9E90 . #x703D)	;CJK UNIFIED IDEOGRAPH
                                (#x9E91 . #x703E)	;CJK UNIFIED IDEOGRAPH
                                (#x9E92 . #x703F)	;CJK UNIFIED IDEOGRAPH
                                (#x9E93 . #x7040)	;CJK UNIFIED IDEOGRAPH
                                (#x9E94 . #x7041)	;CJK UNIFIED IDEOGRAPH
                                (#x9E95 . #x7042)	;CJK UNIFIED IDEOGRAPH
                                (#x9E96 . #x7043)	;CJK UNIFIED IDEOGRAPH
                                (#x9E97 . #x7044)	;CJK UNIFIED IDEOGRAPH
                                (#x9E98 . #x7045)	;CJK UNIFIED IDEOGRAPH
                                (#x9E99 . #x7046)	;CJK UNIFIED IDEOGRAPH
                                (#x9E9A . #x7047)	;CJK UNIFIED IDEOGRAPH
                                (#x9E9B . #x7048)	;CJK UNIFIED IDEOGRAPH
                                (#x9E9C . #x7049)	;CJK UNIFIED IDEOGRAPH
                                (#x9E9D . #x704A)	;CJK UNIFIED IDEOGRAPH
                                (#x9E9E . #x704B)	;CJK UNIFIED IDEOGRAPH
                                (#x9E9F . #x704D)	;CJK UNIFIED IDEOGRAPH
                                (#x9EA0 . #x704E)	;CJK UNIFIED IDEOGRAPH
                                (#x9EA1 . #x7050)	;CJK UNIFIED IDEOGRAPH
                                (#x9EA2 . #x7051)	;CJK UNIFIED IDEOGRAPH
                                (#x9EA3 . #x7052)	;CJK UNIFIED IDEOGRAPH
                                (#x9EA4 . #x7053)	;CJK UNIFIED IDEOGRAPH
                                (#x9EA5 . #x7054)	;CJK UNIFIED IDEOGRAPH
                                (#x9EA6 . #x7055)	;CJK UNIFIED IDEOGRAPH
                                (#x9EA7 . #x7056)	;CJK UNIFIED IDEOGRAPH
                                (#x9EA8 . #x7057)	;CJK UNIFIED IDEOGRAPH
                                (#x9EA9 . #x7058)	;CJK UNIFIED IDEOGRAPH
                                (#x9EAA . #x7059)	;CJK UNIFIED IDEOGRAPH
                                (#x9EAB . #x705A)	;CJK UNIFIED IDEOGRAPH
                                (#x9EAC . #x705B)	;CJK UNIFIED IDEOGRAPH
                                (#x9EAD . #x705C)	;CJK UNIFIED IDEOGRAPH
                                (#x9EAE . #x705D)	;CJK UNIFIED IDEOGRAPH
                                (#x9EAF . #x705F)	;CJK UNIFIED IDEOGRAPH
                                (#x9EB0 . #x7060)	;CJK UNIFIED IDEOGRAPH
                                (#x9EB1 . #x7061)	;CJK UNIFIED IDEOGRAPH
                                (#x9EB2 . #x7062)	;CJK UNIFIED IDEOGRAPH
                                (#x9EB3 . #x7063)	;CJK UNIFIED IDEOGRAPH
                                (#x9EB4 . #x7064)	;CJK UNIFIED IDEOGRAPH
                                (#x9EB5 . #x7065)	;CJK UNIFIED IDEOGRAPH
                                (#x9EB6 . #x7066)	;CJK UNIFIED IDEOGRAPH
                                (#x9EB7 . #x7067)	;CJK UNIFIED IDEOGRAPH
                                (#x9EB8 . #x7068)	;CJK UNIFIED IDEOGRAPH
                                (#x9EB9 . #x7069)	;CJK UNIFIED IDEOGRAPH
                                (#x9EBA . #x706A)	;CJK UNIFIED IDEOGRAPH
                                (#x9EBB . #x706E)	;CJK UNIFIED IDEOGRAPH
                                (#x9EBC . #x7071)	;CJK UNIFIED IDEOGRAPH
                                (#x9EBD . #x7072)	;CJK UNIFIED IDEOGRAPH
                                (#x9EBE . #x7073)	;CJK UNIFIED IDEOGRAPH
                                (#x9EBF . #x7074)	;CJK UNIFIED IDEOGRAPH
                                (#x9EC0 . #x7077)	;CJK UNIFIED IDEOGRAPH
                                (#x9EC1 . #x7079)	;CJK UNIFIED IDEOGRAPH
                                (#x9EC2 . #x707A)	;CJK UNIFIED IDEOGRAPH
                                (#x9EC3 . #x707B)	;CJK UNIFIED IDEOGRAPH
                                (#x9EC4 . #x707D)	;CJK UNIFIED IDEOGRAPH
                                (#x9EC5 . #x7081)	;CJK UNIFIED IDEOGRAPH
                                (#x9EC6 . #x7082)	;CJK UNIFIED IDEOGRAPH
                                (#x9EC7 . #x7083)	;CJK UNIFIED IDEOGRAPH
                                (#x9EC8 . #x7084)	;CJK UNIFIED IDEOGRAPH
                                (#x9EC9 . #x7086)	;CJK UNIFIED IDEOGRAPH
                                (#x9ECA . #x7087)	;CJK UNIFIED IDEOGRAPH
                                (#x9ECB . #x7088)	;CJK UNIFIED IDEOGRAPH
                                (#x9ECC . #x708B)	;CJK UNIFIED IDEOGRAPH
                                (#x9ECD . #x708C)	;CJK UNIFIED IDEOGRAPH
                                (#x9ECE . #x708D)	;CJK UNIFIED IDEOGRAPH
                                (#x9ECF . #x708F)	;CJK UNIFIED IDEOGRAPH
                                (#x9ED0 . #x7090)	;CJK UNIFIED IDEOGRAPH
                                (#x9ED1 . #x7091)	;CJK UNIFIED IDEOGRAPH
                                (#x9ED2 . #x7093)	;CJK UNIFIED IDEOGRAPH
                                (#x9ED3 . #x7097)	;CJK UNIFIED IDEOGRAPH
                                (#x9ED4 . #x7098)	;CJK UNIFIED IDEOGRAPH
                                (#x9ED5 . #x709A)	;CJK UNIFIED IDEOGRAPH
                                (#x9ED6 . #x709B)	;CJK UNIFIED IDEOGRAPH
                                (#x9ED7 . #x709E)	;CJK UNIFIED IDEOGRAPH
                                (#x9ED8 . #x709F)	;CJK UNIFIED IDEOGRAPH
                                (#x9ED9 . #x70A0)	;CJK UNIFIED IDEOGRAPH
                                (#x9EDA . #x70A1)	;CJK UNIFIED IDEOGRAPH
                                (#x9EDB . #x70A2)	;CJK UNIFIED IDEOGRAPH
                                (#x9EDC . #x70A3)	;CJK UNIFIED IDEOGRAPH
                                (#x9EDD . #x70A4)	;CJK UNIFIED IDEOGRAPH
                                (#x9EDE . #x70A5)	;CJK UNIFIED IDEOGRAPH
                                (#x9EDF . #x70A6)	;CJK UNIFIED IDEOGRAPH
                                (#x9EE0 . #x70A7)	;CJK UNIFIED IDEOGRAPH
                                (#x9EE1 . #x70A8)	;CJK UNIFIED IDEOGRAPH
                                (#x9EE2 . #x70A9)	;CJK UNIFIED IDEOGRAPH
                                (#x9EE3 . #x70AA)	;CJK UNIFIED IDEOGRAPH
                                (#x9EE4 . #x70B0)	;CJK UNIFIED IDEOGRAPH
                                (#x9EE5 . #x70B2)	;CJK UNIFIED IDEOGRAPH
                                (#x9EE6 . #x70B4)	;CJK UNIFIED IDEOGRAPH
                                (#x9EE7 . #x70B5)	;CJK UNIFIED IDEOGRAPH
                                (#x9EE8 . #x70B6)	;CJK UNIFIED IDEOGRAPH
                                (#x9EE9 . #x70BA)	;CJK UNIFIED IDEOGRAPH
                                (#x9EEA . #x70BE)	;CJK UNIFIED IDEOGRAPH
                                (#x9EEB . #x70BF)	;CJK UNIFIED IDEOGRAPH
                                (#x9EEC . #x70C4)	;CJK UNIFIED IDEOGRAPH
                                (#x9EED . #x70C5)	;CJK UNIFIED IDEOGRAPH
                                (#x9EEE . #x70C6)	;CJK UNIFIED IDEOGRAPH
                                (#x9EEF . #x70C7)	;CJK UNIFIED IDEOGRAPH
                                (#x9EF0 . #x70C9)	;CJK UNIFIED IDEOGRAPH
                                (#x9EF1 . #x70CB)	;CJK UNIFIED IDEOGRAPH
                                (#x9EF2 . #x70CC)	;CJK UNIFIED IDEOGRAPH
                                (#x9EF3 . #x70CD)	;CJK UNIFIED IDEOGRAPH
                                (#x9EF4 . #x70CE)	;CJK UNIFIED IDEOGRAPH
                                (#x9EF5 . #x70CF)	;CJK UNIFIED IDEOGRAPH
                                (#x9EF6 . #x70D0)	;CJK UNIFIED IDEOGRAPH
                                (#x9EF7 . #x70D1)	;CJK UNIFIED IDEOGRAPH
                                (#x9EF8 . #x70D2)	;CJK UNIFIED IDEOGRAPH
                                (#x9EF9 . #x70D3)	;CJK UNIFIED IDEOGRAPH
                                (#x9EFA . #x70D4)	;CJK UNIFIED IDEOGRAPH
                                (#x9EFB . #x70D5)	;CJK UNIFIED IDEOGRAPH
                                (#x9EFC . #x70D6)	;CJK UNIFIED IDEOGRAPH
                                (#x9EFD . #x70D7)	;CJK UNIFIED IDEOGRAPH
                                (#x9EFE . #x70DA)	;CJK UNIFIED IDEOGRAPH
                                (#x9F40 . #x70DC)	;CJK UNIFIED IDEOGRAPH
                                (#x9F41 . #x70DD)	;CJK UNIFIED IDEOGRAPH
                                (#x9F42 . #x70DE)	;CJK UNIFIED IDEOGRAPH
                                (#x9F43 . #x70E0)	;CJK UNIFIED IDEOGRAPH
                                (#x9F44 . #x70E1)	;CJK UNIFIED IDEOGRAPH
                                (#x9F45 . #x70E2)	;CJK UNIFIED IDEOGRAPH
                                (#x9F46 . #x70E3)	;CJK UNIFIED IDEOGRAPH
                                (#x9F47 . #x70E5)	;CJK UNIFIED IDEOGRAPH
                                (#x9F48 . #x70EA)	;CJK UNIFIED IDEOGRAPH
                                (#x9F49 . #x70EE)	;CJK UNIFIED IDEOGRAPH
                                (#x9F4A . #x70F0)	;CJK UNIFIED IDEOGRAPH
                                (#x9F4B . #x70F1)	;CJK UNIFIED IDEOGRAPH
                                (#x9F4C . #x70F2)	;CJK UNIFIED IDEOGRAPH
                                (#x9F4D . #x70F3)	;CJK UNIFIED IDEOGRAPH
                                (#x9F4E . #x70F4)	;CJK UNIFIED IDEOGRAPH
                                (#x9F4F . #x70F5)	;CJK UNIFIED IDEOGRAPH
                                (#x9F50 . #x70F6)	;CJK UNIFIED IDEOGRAPH
                                (#x9F51 . #x70F8)	;CJK UNIFIED IDEOGRAPH
                                (#x9F52 . #x70FA)	;CJK UNIFIED IDEOGRAPH
                                (#x9F53 . #x70FB)	;CJK UNIFIED IDEOGRAPH
                                (#x9F54 . #x70FC)	;CJK UNIFIED IDEOGRAPH
                                (#x9F55 . #x70FE)	;CJK UNIFIED IDEOGRAPH
                                (#x9F56 . #x70FF)	;CJK UNIFIED IDEOGRAPH
                                (#x9F57 . #x7100)	;CJK UNIFIED IDEOGRAPH
                                (#x9F58 . #x7101)	;CJK UNIFIED IDEOGRAPH
                                (#x9F59 . #x7102)	;CJK UNIFIED IDEOGRAPH
                                (#x9F5A . #x7103)	;CJK UNIFIED IDEOGRAPH
                                (#x9F5B . #x7104)	;CJK UNIFIED IDEOGRAPH
                                (#x9F5C . #x7105)	;CJK UNIFIED IDEOGRAPH
                                (#x9F5D . #x7106)	;CJK UNIFIED IDEOGRAPH
                                (#x9F5E . #x7107)	;CJK UNIFIED IDEOGRAPH
                                (#x9F5F . #x7108)	;CJK UNIFIED IDEOGRAPH
                                (#x9F60 . #x710B)	;CJK UNIFIED IDEOGRAPH
                                (#x9F61 . #x710C)	;CJK UNIFIED IDEOGRAPH
                                (#x9F62 . #x710D)	;CJK UNIFIED IDEOGRAPH
                                (#x9F63 . #x710E)	;CJK UNIFIED IDEOGRAPH
                                (#x9F64 . #x710F)	;CJK UNIFIED IDEOGRAPH
                                (#x9F65 . #x7111)	;CJK UNIFIED IDEOGRAPH
                                (#x9F66 . #x7112)	;CJK UNIFIED IDEOGRAPH
                                (#x9F67 . #x7114)	;CJK UNIFIED IDEOGRAPH
                                (#x9F68 . #x7117)	;CJK UNIFIED IDEOGRAPH
                                (#x9F69 . #x711B)	;CJK UNIFIED IDEOGRAPH
                                (#x9F6A . #x711C)	;CJK UNIFIED IDEOGRAPH
                                (#x9F6B . #x711D)	;CJK UNIFIED IDEOGRAPH
                                (#x9F6C . #x711E)	;CJK UNIFIED IDEOGRAPH
                                (#x9F6D . #x711F)	;CJK UNIFIED IDEOGRAPH
                                (#x9F6E . #x7120)	;CJK UNIFIED IDEOGRAPH
                                (#x9F6F . #x7121)	;CJK UNIFIED IDEOGRAPH
                                (#x9F70 . #x7122)	;CJK UNIFIED IDEOGRAPH
                                (#x9F71 . #x7123)	;CJK UNIFIED IDEOGRAPH
                                (#x9F72 . #x7124)	;CJK UNIFIED IDEOGRAPH
                                (#x9F73 . #x7125)	;CJK UNIFIED IDEOGRAPH
                                (#x9F74 . #x7127)	;CJK UNIFIED IDEOGRAPH
                                (#x9F75 . #x7128)	;CJK UNIFIED IDEOGRAPH
                                (#x9F76 . #x7129)	;CJK UNIFIED IDEOGRAPH
                                (#x9F77 . #x712A)	;CJK UNIFIED IDEOGRAPH
                                (#x9F78 . #x712B)	;CJK UNIFIED IDEOGRAPH
                                (#x9F79 . #x712C)	;CJK UNIFIED IDEOGRAPH
                                (#x9F7A . #x712D)	;CJK UNIFIED IDEOGRAPH
                                (#x9F7B . #x712E)	;CJK UNIFIED IDEOGRAPH
                                (#x9F7C . #x7132)	;CJK UNIFIED IDEOGRAPH
                                (#x9F7D . #x7133)	;CJK UNIFIED IDEOGRAPH
                                (#x9F7E . #x7134)	;CJK UNIFIED IDEOGRAPH
                                (#x9F80 . #x7135)	;CJK UNIFIED IDEOGRAPH
                                (#x9F81 . #x7137)	;CJK UNIFIED IDEOGRAPH
                                (#x9F82 . #x7138)	;CJK UNIFIED IDEOGRAPH
                                (#x9F83 . #x7139)	;CJK UNIFIED IDEOGRAPH
                                (#x9F84 . #x713A)	;CJK UNIFIED IDEOGRAPH
                                (#x9F85 . #x713B)	;CJK UNIFIED IDEOGRAPH
                                (#x9F86 . #x713C)	;CJK UNIFIED IDEOGRAPH
                                (#x9F87 . #x713D)	;CJK UNIFIED IDEOGRAPH
                                (#x9F88 . #x713E)	;CJK UNIFIED IDEOGRAPH
                                (#x9F89 . #x713F)	;CJK UNIFIED IDEOGRAPH
                                (#x9F8A . #x7140)	;CJK UNIFIED IDEOGRAPH
                                (#x9F8B . #x7141)	;CJK UNIFIED IDEOGRAPH
                                (#x9F8C . #x7142)	;CJK UNIFIED IDEOGRAPH
                                (#x9F8D . #x7143)	;CJK UNIFIED IDEOGRAPH
                                (#x9F8E . #x7144)	;CJK UNIFIED IDEOGRAPH
                                (#x9F8F . #x7146)	;CJK UNIFIED IDEOGRAPH
                                (#x9F90 . #x7147)	;CJK UNIFIED IDEOGRAPH
                                (#x9F91 . #x7148)	;CJK UNIFIED IDEOGRAPH
                                (#x9F92 . #x7149)	;CJK UNIFIED IDEOGRAPH
                                (#x9F93 . #x714B)	;CJK UNIFIED IDEOGRAPH
                                (#x9F94 . #x714D)	;CJK UNIFIED IDEOGRAPH
                                (#x9F95 . #x714F)	;CJK UNIFIED IDEOGRAPH
                                (#x9F96 . #x7150)	;CJK UNIFIED IDEOGRAPH
                                (#x9F97 . #x7151)	;CJK UNIFIED IDEOGRAPH
                                (#x9F98 . #x7152)	;CJK UNIFIED IDEOGRAPH
                                (#x9F99 . #x7153)	;CJK UNIFIED IDEOGRAPH
                                (#x9F9A . #x7154)	;CJK UNIFIED IDEOGRAPH
                                (#x9F9B . #x7155)	;CJK UNIFIED IDEOGRAPH
                                (#x9F9C . #x7156)	;CJK UNIFIED IDEOGRAPH
                                (#x9F9D . #x7157)	;CJK UNIFIED IDEOGRAPH
                                (#x9F9E . #x7158)	;CJK UNIFIED IDEOGRAPH
                                (#x9F9F . #x7159)	;CJK UNIFIED IDEOGRAPH
                                (#x9FA0 . #x715A)	;CJK UNIFIED IDEOGRAPH
                                (#x9FA1 . #x715B)	;CJK UNIFIED IDEOGRAPH
                                (#x9FA2 . #x715D)	;CJK UNIFIED IDEOGRAPH
                                (#x9FA3 . #x715F)	;CJK UNIFIED IDEOGRAPH
                                (#x9FA4 . #x7160)	;CJK UNIFIED IDEOGRAPH
                                (#x9FA5 . #x7161)	;CJK UNIFIED IDEOGRAPH
                                (#x9FA6 . #x7162)	;CJK UNIFIED IDEOGRAPH
                                (#x9FA7 . #x7163)	;CJK UNIFIED IDEOGRAPH
                                (#x9FA8 . #x7165)	;CJK UNIFIED IDEOGRAPH
                                (#x9FA9 . #x7169)	;CJK UNIFIED IDEOGRAPH
                                (#x9FAA . #x716A)	;CJK UNIFIED IDEOGRAPH
                                (#x9FAB . #x716B)	;CJK UNIFIED IDEOGRAPH
                                (#x9FAC . #x716C)	;CJK UNIFIED IDEOGRAPH
                                (#x9FAD . #x716D)	;CJK UNIFIED IDEOGRAPH
                                (#x9FAE . #x716F)	;CJK UNIFIED IDEOGRAPH
                                (#x9FAF . #x7170)	;CJK UNIFIED IDEOGRAPH
                                (#x9FB0 . #x7171)	;CJK UNIFIED IDEOGRAPH
                                (#x9FB1 . #x7174)	;CJK UNIFIED IDEOGRAPH
                                (#x9FB2 . #x7175)	;CJK UNIFIED IDEOGRAPH
                                (#x9FB3 . #x7176)	;CJK UNIFIED IDEOGRAPH
                                (#x9FB4 . #x7177)	;CJK UNIFIED IDEOGRAPH
                                (#x9FB5 . #x7179)	;CJK UNIFIED IDEOGRAPH
                                (#x9FB6 . #x717B)	;CJK UNIFIED IDEOGRAPH
                                (#x9FB7 . #x717C)	;CJK UNIFIED IDEOGRAPH
                                (#x9FB8 . #x717E)	;CJK UNIFIED IDEOGRAPH
                                (#x9FB9 . #x717F)	;CJK UNIFIED IDEOGRAPH
                                (#x9FBA . #x7180)	;CJK UNIFIED IDEOGRAPH
                                (#x9FBB . #x7181)	;CJK UNIFIED IDEOGRAPH
                                (#x9FBC . #x7182)	;CJK UNIFIED IDEOGRAPH
                                (#x9FBD . #x7183)	;CJK UNIFIED IDEOGRAPH
                                (#x9FBE . #x7185)	;CJK UNIFIED IDEOGRAPH
                                (#x9FBF . #x7186)	;CJK UNIFIED IDEOGRAPH
                                (#x9FC0 . #x7187)	;CJK UNIFIED IDEOGRAPH
                                (#x9FC1 . #x7188)	;CJK UNIFIED IDEOGRAPH
                                (#x9FC2 . #x7189)	;CJK UNIFIED IDEOGRAPH
                                (#x9FC3 . #x718B)	;CJK UNIFIED IDEOGRAPH
                                (#x9FC4 . #x718C)	;CJK UNIFIED IDEOGRAPH
                                (#x9FC5 . #x718D)	;CJK UNIFIED IDEOGRAPH
                                (#x9FC6 . #x718E)	;CJK UNIFIED IDEOGRAPH
                                (#x9FC7 . #x7190)	;CJK UNIFIED IDEOGRAPH
                                (#x9FC8 . #x7191)	;CJK UNIFIED IDEOGRAPH
                                (#x9FC9 . #x7192)	;CJK UNIFIED IDEOGRAPH
                                (#x9FCA . #x7193)	;CJK UNIFIED IDEOGRAPH
                                (#x9FCB . #x7195)	;CJK UNIFIED IDEOGRAPH
                                (#x9FCC . #x7196)	;CJK UNIFIED IDEOGRAPH
                                (#x9FCD . #x7197)	;CJK UNIFIED IDEOGRAPH
                                (#x9FCE . #x719A)	;CJK UNIFIED IDEOGRAPH
                                (#x9FCF . #x719B)	;CJK UNIFIED IDEOGRAPH
                                (#x9FD0 . #x719C)	;CJK UNIFIED IDEOGRAPH
                                (#x9FD1 . #x719D)	;CJK UNIFIED IDEOGRAPH
                                (#x9FD2 . #x719E)	;CJK UNIFIED IDEOGRAPH
                                (#x9FD3 . #x71A1)	;CJK UNIFIED IDEOGRAPH
                                (#x9FD4 . #x71A2)	;CJK UNIFIED IDEOGRAPH
                                (#x9FD5 . #x71A3)	;CJK UNIFIED IDEOGRAPH
                                (#x9FD6 . #x71A4)	;CJK UNIFIED IDEOGRAPH
                                (#x9FD7 . #x71A5)	;CJK UNIFIED IDEOGRAPH
                                (#x9FD8 . #x71A6)	;CJK UNIFIED IDEOGRAPH
                                (#x9FD9 . #x71A7)	;CJK UNIFIED IDEOGRAPH
                                (#x9FDA . #x71A9)	;CJK UNIFIED IDEOGRAPH
                                (#x9FDB . #x71AA)	;CJK UNIFIED IDEOGRAPH
                                (#x9FDC . #x71AB)	;CJK UNIFIED IDEOGRAPH
                                (#x9FDD . #x71AD)	;CJK UNIFIED IDEOGRAPH
                                (#x9FDE . #x71AE)	;CJK UNIFIED IDEOGRAPH
                                (#x9FDF . #x71AF)	;CJK UNIFIED IDEOGRAPH
                                (#x9FE0 . #x71B0)	;CJK UNIFIED IDEOGRAPH
                                (#x9FE1 . #x71B1)	;CJK UNIFIED IDEOGRAPH
                                (#x9FE2 . #x71B2)	;CJK UNIFIED IDEOGRAPH
                                (#x9FE3 . #x71B4)	;CJK UNIFIED IDEOGRAPH
                                (#x9FE4 . #x71B6)	;CJK UNIFIED IDEOGRAPH
                                (#x9FE5 . #x71B7)	;CJK UNIFIED IDEOGRAPH
                                (#x9FE6 . #x71B8)	;CJK UNIFIED IDEOGRAPH
                                (#x9FE7 . #x71BA)	;CJK UNIFIED IDEOGRAPH
                                (#x9FE8 . #x71BB)	;CJK UNIFIED IDEOGRAPH
                                (#x9FE9 . #x71BC)	;CJK UNIFIED IDEOGRAPH
                                (#x9FEA . #x71BD)	;CJK UNIFIED IDEOGRAPH
                                (#x9FEB . #x71BE)	;CJK UNIFIED IDEOGRAPH
                                (#x9FEC . #x71BF)	;CJK UNIFIED IDEOGRAPH
                                (#x9FED . #x71C0)	;CJK UNIFIED IDEOGRAPH
                                (#x9FEE . #x71C1)	;CJK UNIFIED IDEOGRAPH
                                (#x9FEF . #x71C2)	;CJK UNIFIED IDEOGRAPH
                                (#x9FF0 . #x71C4)	;CJK UNIFIED IDEOGRAPH
                                (#x9FF1 . #x71C5)	;CJK UNIFIED IDEOGRAPH
                                (#x9FF2 . #x71C6)	;CJK UNIFIED IDEOGRAPH
                                (#x9FF3 . #x71C7)	;CJK UNIFIED IDEOGRAPH
                                (#x9FF4 . #x71C8)	;CJK UNIFIED IDEOGRAPH
                                (#x9FF5 . #x71C9)	;CJK UNIFIED IDEOGRAPH
                                (#x9FF6 . #x71CA)	;CJK UNIFIED IDEOGRAPH
                                (#x9FF7 . #x71CB)	;CJK UNIFIED IDEOGRAPH
                                (#x9FF8 . #x71CC)	;CJK UNIFIED IDEOGRAPH
                                (#x9FF9 . #x71CD)	;CJK UNIFIED IDEOGRAPH
                                (#x9FFA . #x71CF)	;CJK UNIFIED IDEOGRAPH
                                (#x9FFB . #x71D0)	;CJK UNIFIED IDEOGRAPH
                                (#x9FFC . #x71D1)	;CJK UNIFIED IDEOGRAPH
                                (#x9FFD . #x71D2)	;CJK UNIFIED IDEOGRAPH
                                (#x9FFE . #x71D3)	;CJK UNIFIED IDEOGRAPH
                                (#xA040 . #x71D6)	;CJK UNIFIED IDEOGRAPH
                                (#xA041 . #x71D7)	;CJK UNIFIED IDEOGRAPH
                                (#xA042 . #x71D8)	;CJK UNIFIED IDEOGRAPH
                                (#xA043 . #x71D9)	;CJK UNIFIED IDEOGRAPH
                                (#xA044 . #x71DA)	;CJK UNIFIED IDEOGRAPH
                                (#xA045 . #x71DB)	;CJK UNIFIED IDEOGRAPH
                                (#xA046 . #x71DC)	;CJK UNIFIED IDEOGRAPH
                                (#xA047 . #x71DD)	;CJK UNIFIED IDEOGRAPH
                                (#xA048 . #x71DE)	;CJK UNIFIED IDEOGRAPH
                                (#xA049 . #x71DF)	;CJK UNIFIED IDEOGRAPH
                                (#xA04A . #x71E1)	;CJK UNIFIED IDEOGRAPH
                                (#xA04B . #x71E2)	;CJK UNIFIED IDEOGRAPH
                                (#xA04C . #x71E3)	;CJK UNIFIED IDEOGRAPH
                                (#xA04D . #x71E4)	;CJK UNIFIED IDEOGRAPH
                                (#xA04E . #x71E6)	;CJK UNIFIED IDEOGRAPH
                                (#xA04F . #x71E8)	;CJK UNIFIED IDEOGRAPH
                                (#xA050 . #x71E9)	;CJK UNIFIED IDEOGRAPH
                                (#xA051 . #x71EA)	;CJK UNIFIED IDEOGRAPH
                                (#xA052 . #x71EB)	;CJK UNIFIED IDEOGRAPH
                                (#xA053 . #x71EC)	;CJK UNIFIED IDEOGRAPH
                                (#xA054 . #x71ED)	;CJK UNIFIED IDEOGRAPH
                                (#xA055 . #x71EF)	;CJK UNIFIED IDEOGRAPH
                                (#xA056 . #x71F0)	;CJK UNIFIED IDEOGRAPH
                                (#xA057 . #x71F1)	;CJK UNIFIED IDEOGRAPH
                                (#xA058 . #x71F2)	;CJK UNIFIED IDEOGRAPH
                                (#xA059 . #x71F3)	;CJK UNIFIED IDEOGRAPH
                                (#xA05A . #x71F4)	;CJK UNIFIED IDEOGRAPH
                                (#xA05B . #x71F5)	;CJK UNIFIED IDEOGRAPH
                                (#xA05C . #x71F6)	;CJK UNIFIED IDEOGRAPH
                                (#xA05D . #x71F7)	;CJK UNIFIED IDEOGRAPH
                                (#xA05E . #x71F8)	;CJK UNIFIED IDEOGRAPH
                                (#xA05F . #x71FA)	;CJK UNIFIED IDEOGRAPH
                                (#xA060 . #x71FB)	;CJK UNIFIED IDEOGRAPH
                                (#xA061 . #x71FC)	;CJK UNIFIED IDEOGRAPH
                                (#xA062 . #x71FD)	;CJK UNIFIED IDEOGRAPH
                                (#xA063 . #x71FE)	;CJK UNIFIED IDEOGRAPH
                                (#xA064 . #x71FF)	;CJK UNIFIED IDEOGRAPH
                                (#xA065 . #x7200)	;CJK UNIFIED IDEOGRAPH
                                (#xA066 . #x7201)	;CJK UNIFIED IDEOGRAPH
                                (#xA067 . #x7202)	;CJK UNIFIED IDEOGRAPH
                                (#xA068 . #x7203)	;CJK UNIFIED IDEOGRAPH
                                (#xA069 . #x7204)	;CJK UNIFIED IDEOGRAPH
                                (#xA06A . #x7205)	;CJK UNIFIED IDEOGRAPH
                                (#xA06B . #x7207)	;CJK UNIFIED IDEOGRAPH
                                (#xA06C . #x7208)	;CJK UNIFIED IDEOGRAPH
                                (#xA06D . #x7209)	;CJK UNIFIED IDEOGRAPH
                                (#xA06E . #x720A)	;CJK UNIFIED IDEOGRAPH
                                (#xA06F . #x720B)	;CJK UNIFIED IDEOGRAPH
                                (#xA070 . #x720C)	;CJK UNIFIED IDEOGRAPH
                                (#xA071 . #x720D)	;CJK UNIFIED IDEOGRAPH
                                (#xA072 . #x720E)	;CJK UNIFIED IDEOGRAPH
                                (#xA073 . #x720F)	;CJK UNIFIED IDEOGRAPH
                                (#xA074 . #x7210)	;CJK UNIFIED IDEOGRAPH
                                (#xA075 . #x7211)	;CJK UNIFIED IDEOGRAPH
                                (#xA076 . #x7212)	;CJK UNIFIED IDEOGRAPH
                                (#xA077 . #x7213)	;CJK UNIFIED IDEOGRAPH
                                (#xA078 . #x7214)	;CJK UNIFIED IDEOGRAPH
                                (#xA079 . #x7215)	;CJK UNIFIED IDEOGRAPH
                                (#xA07A . #x7216)	;CJK UNIFIED IDEOGRAPH
                                (#xA07B . #x7217)	;CJK UNIFIED IDEOGRAPH
                                (#xA07C . #x7218)	;CJK UNIFIED IDEOGRAPH
                                (#xA07D . #x7219)	;CJK UNIFIED IDEOGRAPH
                                (#xA07E . #x721A)	;CJK UNIFIED IDEOGRAPH
                                (#xA080 . #x721B)	;CJK UNIFIED IDEOGRAPH
                                (#xA081 . #x721C)	;CJK UNIFIED IDEOGRAPH
                                (#xA082 . #x721E)	;CJK UNIFIED IDEOGRAPH
                                (#xA083 . #x721F)	;CJK UNIFIED IDEOGRAPH
                                (#xA084 . #x7220)	;CJK UNIFIED IDEOGRAPH
                                (#xA085 . #x7221)	;CJK UNIFIED IDEOGRAPH
                                (#xA086 . #x7222)	;CJK UNIFIED IDEOGRAPH
                                (#xA087 . #x7223)	;CJK UNIFIED IDEOGRAPH
                                (#xA088 . #x7224)	;CJK UNIFIED IDEOGRAPH
                                (#xA089 . #x7225)	;CJK UNIFIED IDEOGRAPH
                                (#xA08A . #x7226)	;CJK UNIFIED IDEOGRAPH
                                (#xA08B . #x7227)	;CJK UNIFIED IDEOGRAPH
                                (#xA08C . #x7229)	;CJK UNIFIED IDEOGRAPH
                                (#xA08D . #x722B)	;CJK UNIFIED IDEOGRAPH
                                (#xA08E . #x722D)	;CJK UNIFIED IDEOGRAPH
                                (#xA08F . #x722E)	;CJK UNIFIED IDEOGRAPH
                                (#xA090 . #x722F)	;CJK UNIFIED IDEOGRAPH
                                (#xA091 . #x7232)	;CJK UNIFIED IDEOGRAPH
                                (#xA092 . #x7233)	;CJK UNIFIED IDEOGRAPH
                                (#xA093 . #x7234)	;CJK UNIFIED IDEOGRAPH
                                (#xA094 . #x723A)	;CJK UNIFIED IDEOGRAPH
                                (#xA095 . #x723C)	;CJK UNIFIED IDEOGRAPH
                                (#xA096 . #x723E)	;CJK UNIFIED IDEOGRAPH
                                (#xA097 . #x7240)	;CJK UNIFIED IDEOGRAPH
                                (#xA098 . #x7241)	;CJK UNIFIED IDEOGRAPH
                                (#xA099 . #x7242)	;CJK UNIFIED IDEOGRAPH
                                (#xA09A . #x7243)	;CJK UNIFIED IDEOGRAPH
                                (#xA09B . #x7244)	;CJK UNIFIED IDEOGRAPH
                                (#xA09C . #x7245)	;CJK UNIFIED IDEOGRAPH
                                (#xA09D . #x7246)	;CJK UNIFIED IDEOGRAPH
                                (#xA09E . #x7249)	;CJK UNIFIED IDEOGRAPH
                                (#xA09F . #x724A)	;CJK UNIFIED IDEOGRAPH
                                (#xA0A0 . #x724B)	;CJK UNIFIED IDEOGRAPH
                                (#xA0A1 . #x724E)	;CJK UNIFIED IDEOGRAPH
                                (#xA0A2 . #x724F)	;CJK UNIFIED IDEOGRAPH
                                (#xA0A3 . #x7250)	;CJK UNIFIED IDEOGRAPH
                                (#xA0A4 . #x7251)	;CJK UNIFIED IDEOGRAPH
                                (#xA0A5 . #x7253)	;CJK UNIFIED IDEOGRAPH
                                (#xA0A6 . #x7254)	;CJK UNIFIED IDEOGRAPH
                                (#xA0A7 . #x7255)	;CJK UNIFIED IDEOGRAPH
                                (#xA0A8 . #x7257)	;CJK UNIFIED IDEOGRAPH
                                (#xA0A9 . #x7258)	;CJK UNIFIED IDEOGRAPH
                                (#xA0AA . #x725A)	;CJK UNIFIED IDEOGRAPH
                                (#xA0AB . #x725C)	;CJK UNIFIED IDEOGRAPH
                                (#xA0AC . #x725E)	;CJK UNIFIED IDEOGRAPH
                                (#xA0AD . #x7260)	;CJK UNIFIED IDEOGRAPH
                                (#xA0AE . #x7263)	;CJK UNIFIED IDEOGRAPH
                                (#xA0AF . #x7264)	;CJK UNIFIED IDEOGRAPH
                                (#xA0B0 . #x7265)	;CJK UNIFIED IDEOGRAPH
                                (#xA0B1 . #x7268)	;CJK UNIFIED IDEOGRAPH
                                (#xA0B2 . #x726A)	;CJK UNIFIED IDEOGRAPH
                                (#xA0B3 . #x726B)	;CJK UNIFIED IDEOGRAPH
                                (#xA0B4 . #x726C)	;CJK UNIFIED IDEOGRAPH
                                (#xA0B5 . #x726D)	;CJK UNIFIED IDEOGRAPH
                                (#xA0B6 . #x7270)	;CJK UNIFIED IDEOGRAPH
                                (#xA0B7 . #x7271)	;CJK UNIFIED IDEOGRAPH
                                (#xA0B8 . #x7273)	;CJK UNIFIED IDEOGRAPH
                                (#xA0B9 . #x7274)	;CJK UNIFIED IDEOGRAPH
                                (#xA0BA . #x7276)	;CJK UNIFIED IDEOGRAPH
                                (#xA0BB . #x7277)	;CJK UNIFIED IDEOGRAPH
                                (#xA0BC . #x7278)	;CJK UNIFIED IDEOGRAPH
                                (#xA0BD . #x727B)	;CJK UNIFIED IDEOGRAPH
                                (#xA0BE . #x727C)	;CJK UNIFIED IDEOGRAPH
                                (#xA0BF . #x727D)	;CJK UNIFIED IDEOGRAPH
                                (#xA0C0 . #x7282)	;CJK UNIFIED IDEOGRAPH
                                (#xA0C1 . #x7283)	;CJK UNIFIED IDEOGRAPH
                                (#xA0C2 . #x7285)	;CJK UNIFIED IDEOGRAPH
                                (#xA0C3 . #x7286)	;CJK UNIFIED IDEOGRAPH
                                (#xA0C4 . #x7287)	;CJK UNIFIED IDEOGRAPH
                                (#xA0C5 . #x7288)	;CJK UNIFIED IDEOGRAPH
                                (#xA0C6 . #x7289)	;CJK UNIFIED IDEOGRAPH
                                (#xA0C7 . #x728C)	;CJK UNIFIED IDEOGRAPH
                                (#xA0C8 . #x728E)	;CJK UNIFIED IDEOGRAPH
                                (#xA0C9 . #x7290)	;CJK UNIFIED IDEOGRAPH
                                (#xA0CA . #x7291)	;CJK UNIFIED IDEOGRAPH
                                (#xA0CB . #x7293)	;CJK UNIFIED IDEOGRAPH
                                (#xA0CC . #x7294)	;CJK UNIFIED IDEOGRAPH
                                (#xA0CD . #x7295)	;CJK UNIFIED IDEOGRAPH
                                (#xA0CE . #x7296)	;CJK UNIFIED IDEOGRAPH
                                (#xA0CF . #x7297)	;CJK UNIFIED IDEOGRAPH
                                (#xA0D0 . #x7298)	;CJK UNIFIED IDEOGRAPH
                                (#xA0D1 . #x7299)	;CJK UNIFIED IDEOGRAPH
                                (#xA0D2 . #x729A)	;CJK UNIFIED IDEOGRAPH
                                (#xA0D3 . #x729B)	;CJK UNIFIED IDEOGRAPH
                                (#xA0D4 . #x729C)	;CJK UNIFIED IDEOGRAPH
                                (#xA0D5 . #x729D)	;CJK UNIFIED IDEOGRAPH
                                (#xA0D6 . #x729E)	;CJK UNIFIED IDEOGRAPH
                                (#xA0D7 . #x72A0)	;CJK UNIFIED IDEOGRAPH
                                (#xA0D8 . #x72A1)	;CJK UNIFIED IDEOGRAPH
                                (#xA0D9 . #x72A2)	;CJK UNIFIED IDEOGRAPH
                                (#xA0DA . #x72A3)	;CJK UNIFIED IDEOGRAPH
                                (#xA0DB . #x72A4)	;CJK UNIFIED IDEOGRAPH
                                (#xA0DC . #x72A5)	;CJK UNIFIED IDEOGRAPH
                                (#xA0DD . #x72A6)	;CJK UNIFIED IDEOGRAPH
                                (#xA0DE . #x72A7)	;CJK UNIFIED IDEOGRAPH
                                (#xA0DF . #x72A8)	;CJK UNIFIED IDEOGRAPH
                                (#xA0E0 . #x72A9)	;CJK UNIFIED IDEOGRAPH
                                (#xA0E1 . #x72AA)	;CJK UNIFIED IDEOGRAPH
                                (#xA0E2 . #x72AB)	;CJK UNIFIED IDEOGRAPH
                                (#xA0E3 . #x72AE)	;CJK UNIFIED IDEOGRAPH
                                (#xA0E4 . #x72B1)	;CJK UNIFIED IDEOGRAPH
                                (#xA0E5 . #x72B2)	;CJK UNIFIED IDEOGRAPH
                                (#xA0E6 . #x72B3)	;CJK UNIFIED IDEOGRAPH
                                (#xA0E7 . #x72B5)	;CJK UNIFIED IDEOGRAPH
                                (#xA0E8 . #x72BA)	;CJK UNIFIED IDEOGRAPH
                                (#xA0E9 . #x72BB)	;CJK UNIFIED IDEOGRAPH
                                (#xA0EA . #x72BC)	;CJK UNIFIED IDEOGRAPH
                                (#xA0EB . #x72BD)	;CJK UNIFIED IDEOGRAPH
                                (#xA0EC . #x72BE)	;CJK UNIFIED IDEOGRAPH
                                (#xA0ED . #x72BF)	;CJK UNIFIED IDEOGRAPH
                                (#xA0EE . #x72C0)	;CJK UNIFIED IDEOGRAPH
                                (#xA0EF . #x72C5)	;CJK UNIFIED IDEOGRAPH
                                (#xA0F0 . #x72C6)	;CJK UNIFIED IDEOGRAPH
                                (#xA0F1 . #x72C7)	;CJK UNIFIED IDEOGRAPH
                                (#xA0F2 . #x72C9)	;CJK UNIFIED IDEOGRAPH
                                (#xA0F3 . #x72CA)	;CJK UNIFIED IDEOGRAPH
                                (#xA0F4 . #x72CB)	;CJK UNIFIED IDEOGRAPH
                                (#xA0F5 . #x72CC)	;CJK UNIFIED IDEOGRAPH
                                (#xA0F6 . #x72CF)	;CJK UNIFIED IDEOGRAPH
                                (#xA0F7 . #x72D1)	;CJK UNIFIED IDEOGRAPH
                                (#xA0F8 . #x72D3)	;CJK UNIFIED IDEOGRAPH
                                (#xA0F9 . #x72D4)	;CJK UNIFIED IDEOGRAPH
                                (#xA0FA . #x72D5)	;CJK UNIFIED IDEOGRAPH
                                (#xA0FB . #x72D6)	;CJK UNIFIED IDEOGRAPH
                                (#xA0FC . #x72D8)	;CJK UNIFIED IDEOGRAPH
                                (#xA0FD . #x72DA)	;CJK UNIFIED IDEOGRAPH
                                (#xA0FE . #x72DB)	;CJK UNIFIED IDEOGRAPH
                                (#xA1A1 . #x3000)	;IDEOGRAPHIC SPACE
                                (#xA1A2 . #x3001)	;IDEOGRAPHIC COMMA
                                (#xA1A3 . #x3002)	;IDEOGRAPHIC FULL STOP
                                (#xA1A4 . #x00B7)	;MIDDLE DOT
                                (#xA1A5 . #x02C9)	;MODIFIER LETTER MACRON
                                (#xA1A6 . #x02C7)	;CARON
                                (#xA1A7 . #x00A8)	;DIAERESIS
                                (#xA1A8 . #x3003)	;DITTO MARK
                                (#xA1A9 . #x3005)	;IDEOGRAPHIC ITERATION MARK
                                (#xA1AA . #x2014)	;EM DASH
                                (#xA1AB . #xFF5E)	;FULLWIDTH TILDE
                                (#xA1AC . #x2016)	;DOUBLE VERTICAL LINE
                                (#xA1AD . #x2026)	;HORIZONTAL ELLIPSIS
                                (#xA1AE . #x2018)	;LEFT SINGLE QUOTATION MARK
                                (#xA1AF . #x2019)	;RIGHT SINGLE QUOTATION MARK
                                (#xA1B0 . #x201C)	;LEFT DOUBLE QUOTATION MARK
                                (#xA1B1 . #x201D)	;RIGHT DOUBLE QUOTATION MARK
                                (#xA1B2 . #x3014)	;LEFT TORTOISE SHELL BRACKET
                                (#xA1B3 . #x3015)	;RIGHT TORTOISE SHELL BRACKET
                                (#xA1B4 . #x3008)	;LEFT ANGLE BRACKET
                                (#xA1B5 . #x3009)	;RIGHT ANGLE BRACKET
                                (#xA1B6 . #x300A)	;LEFT DOUBLE ANGLE BRACKET
                                (#xA1B7 . #x300B)	;RIGHT DOUBLE ANGLE BRACKET
                                (#xA1B8 . #x300C)	;LEFT CORNER BRACKET
                                (#xA1B9 . #x300D)	;RIGHT CORNER BRACKET
                                (#xA1BA . #x300E)	;LEFT WHITE CORNER BRACKET
                                (#xA1BB . #x300F)	;RIGHT WHITE CORNER BRACKET
                                (#xA1BC . #x3016)	;LEFT WHITE LENTICULAR BRACKET
                                (#xA1BD . #x3017)	;RIGHT WHITE LENTICULAR BRACKET
                                (#xA1BE . #x3010)	;LEFT BLACK LENTICULAR BRACKET
                                (#xA1BF . #x3011)	;RIGHT BLACK LENTICULAR BRACKET
                                (#xA1C0 . #x00B1)	;PLUS-MINUS SIGN
                                (#xA1C1 . #x00D7)	;MULTIPLICATION SIGN
                                (#xA1C2 . #x00F7)	;DIVISION SIGN
                                (#xA1C3 . #x2236)	;RATIO
                                (#xA1C4 . #x2227)	;LOGICAL AND
                                (#xA1C5 . #x2228)	;LOGICAL OR
                                (#xA1C6 . #x2211)	;N-ARY SUMMATION
                                (#xA1C7 . #x220F)	;N-ARY PRODUCT
                                (#xA1C8 . #x222A)	;UNION
                                (#xA1C9 . #x2229)	;INTERSECTION
                                (#xA1CA . #x2208)	;ELEMENT OF
                                (#xA1CB . #x2237)	;PROPORTION
                                (#xA1CC . #x221A)	;SQUARE ROOT
                                (#xA1CD . #x22A5)	;UP TACK
                                (#xA1CE . #x2225)	;PARALLEL TO
                                (#xA1CF . #x2220)	;ANGLE
                                (#xA1D0 . #x2312)	;ARC
                                (#xA1D1 . #x2299)	;CIRCLED DOT OPERATOR
                                (#xA1D2 . #x222B)	;INTEGRAL
                                (#xA1D3 . #x222E)	;CONTOUR INTEGRAL
                                (#xA1D4 . #x2261)	;IDENTICAL TO
                                (#xA1D5 . #x224C)	;ALL EQUAL TO
                                (#xA1D6 . #x2248)	;ALMOST EQUAL TO
                                (#xA1D7 . #x223D)	;REVERSED TILDE
                                (#xA1D8 . #x221D)	;PROPORTIONAL TO
                                (#xA1D9 . #x2260)	;NOT EQUAL TO
                                (#xA1DA . #x226E)	;NOT LESS-THAN
                                (#xA1DB . #x226F)	;NOT GREATER-THAN
                                (#xA1DC . #x2264)	;LESS-THAN OR EQUAL TO
                                (#xA1DD . #x2265)	;GREATER-THAN OR EQUAL TO
                                (#xA1DE . #x221E)	;INFINITY
                                (#xA1DF . #x2235)	;BECAUSE
                                (#xA1E0 . #x2234)	;THEREFORE
                                (#xA1E1 . #x2642)	;MALE SIGN
                                (#xA1E2 . #x2640)	;FEMALE SIGN
                                (#xA1E3 . #x00B0)	;DEGREE SIGN
                                (#xA1E4 . #x2032)	;PRIME
                                (#xA1E5 . #x2033)	;DOUBLE PRIME
                                (#xA1E6 . #x2103)	;DEGREE CELSIUS
                                (#xA1E7 . #xFF04)	;FULLWIDTH DOLLAR SIGN
                                (#xA1E8 . #x00A4)	;CURRENCY SIGN
                                (#xA1E9 . #xFFE0)	;FULLWIDTH CENT SIGN
                                (#xA1EA . #xFFE1)	;FULLWIDTH POUND SIGN
                                (#xA1EB . #x2030)	;PER MILLE SIGN
                                (#xA1EC . #x00A7)	;SECTION SIGN
                                (#xA1ED . #x2116)	;NUMERO SIGN
                                (#xA1EE . #x2606)	;WHITE STAR
                                (#xA1EF . #x2605)	;BLACK STAR
                                (#xA1F0 . #x25CB)	;WHITE CIRCLE
                                (#xA1F1 . #x25CF)	;BLACK CIRCLE
                                (#xA1F2 . #x25CE)	;BULLSEYE
                                (#xA1F3 . #x25C7)	;WHITE DIAMOND
                                (#xA1F4 . #x25C6)	;BLACK DIAMOND
                                (#xA1F5 . #x25A1)	;WHITE SQUARE
                                (#xA1F6 . #x25A0)	;BLACK SQUARE
                                (#xA1F7 . #x25B3)	;WHITE UP-POINTING TRIANGLE
                                (#xA1F8 . #x25B2)	;BLACK UP-POINTING TRIANGLE
                                (#xA1F9 . #x203B)	;REFERENCE MARK
                                (#xA1FA . #x2192)	;RIGHTWARDS ARROW
                                (#xA1FB . #x2190)	;LEFTWARDS ARROW
                                (#xA1FC . #x2191)	;UPWARDS ARROW
                                (#xA1FD . #x2193)	;DOWNWARDS ARROW
                                (#xA1FE . #x3013)	;GETA MARK
                                (#xA2A1 . #x2170)	;SMALL ROMAN NUMERAL ONE
                                (#xA2A2 . #x2171)	;SMALL ROMAN NUMERAL TWO
                                (#xA2A3 . #x2172)	;SMALL ROMAN NUMERAL THREE
                                (#xA2A4 . #x2173)	;SMALL ROMAN NUMERAL FOUR
                                (#xA2A5 . #x2174)	;SMALL ROMAN NUMERAL FIVE
                                (#xA2A6 . #x2175)	;SMALL ROMAN NUMERAL SIX
                                (#xA2A7 . #x2176)	;SMALL ROMAN NUMERAL SEVEN
                                (#xA2A8 . #x2177)	;SMALL ROMAN NUMERAL EIGHT
                                (#xA2A9 . #x2178)	;SMALL ROMAN NUMERAL NINE
                                (#xA2AA . #x2179)	;SMALL ROMAN NUMERAL TEN
                                (#xA2B1 . #x2488)	;DIGIT ONE FULL STOP
                                (#xA2B2 . #x2489)	;DIGIT TWO FULL STOP
                                (#xA2B3 . #x248A)	;DIGIT THREE FULL STOP
                                (#xA2B4 . #x248B)	;DIGIT FOUR FULL STOP
                                (#xA2B5 . #x248C)	;DIGIT FIVE FULL STOP
                                (#xA2B6 . #x248D)	;DIGIT SIX FULL STOP
                                (#xA2B7 . #x248E)	;DIGIT SEVEN FULL STOP
                                (#xA2B8 . #x248F)	;DIGIT EIGHT FULL STOP
                                (#xA2B9 . #x2490)	;DIGIT NINE FULL STOP
                                (#xA2BA . #x2491)	;NUMBER TEN FULL STOP
                                (#xA2BB . #x2492)	;NUMBER ELEVEN FULL STOP
                                (#xA2BC . #x2493)	;NUMBER TWELVE FULL STOP
                                (#xA2BD . #x2494)	;NUMBER THIRTEEN FULL STOP
                                (#xA2BE . #x2495)	;NUMBER FOURTEEN FULL STOP
                                (#xA2BF . #x2496)	;NUMBER FIFTEEN FULL STOP
                                (#xA2C0 . #x2497)	;NUMBER SIXTEEN FULL STOP
                                (#xA2C1 . #x2498)	;NUMBER SEVENTEEN FULL STOP
                                (#xA2C2 . #x2499)	;NUMBER EIGHTEEN FULL STOP
                                (#xA2C3 . #x249A)	;NUMBER NINETEEN FULL STOP
                                (#xA2C4 . #x249B)	;NUMBER TWENTY FULL STOP
                                (#xA2C5 . #x2474)	;PARENTHESIZED DIGIT ONE
                                (#xA2C6 . #x2475)	;PARENTHESIZED DIGIT TWO
                                (#xA2C7 . #x2476)	;PARENTHESIZED DIGIT THREE
                                (#xA2C8 . #x2477)	;PARENTHESIZED DIGIT FOUR
                                (#xA2C9 . #x2478)	;PARENTHESIZED DIGIT FIVE
                                (#xA2CA . #x2479)	;PARENTHESIZED DIGIT SIX
                                (#xA2CB . #x247A)	;PARENTHESIZED DIGIT SEVEN
                                (#xA2CC . #x247B)	;PARENTHESIZED DIGIT EIGHT
                                (#xA2CD . #x247C)	;PARENTHESIZED DIGIT NINE
                                (#xA2CE . #x247D)	;PARENTHESIZED NUMBER TEN
                                (#xA2CF . #x247E)	;PARENTHESIZED NUMBER ELEVEN
                                (#xA2D0 . #x247F)	;PARENTHESIZED NUMBER TWELVE
                                (#xA2D1 . #x2480)	;PARENTHESIZED NUMBER THIRTEEN
                                (#xA2D2 . #x2481)	;PARENTHESIZED NUMBER FOURTEEN
                                (#xA2D3 . #x2482)	;PARENTHESIZED NUMBER FIFTEEN
                                (#xA2D4 . #x2483)	;PARENTHESIZED NUMBER SIXTEEN
                                (#xA2D5 . #x2484)	;PARENTHESIZED NUMBER SEVENTEEN
                                (#xA2D6 . #x2485)	;PARENTHESIZED NUMBER EIGHTEEN
                                (#xA2D7 . #x2486)	;PARENTHESIZED NUMBER NINETEEN
                                (#xA2D8 . #x2487)	;PARENTHESIZED NUMBER TWENTY
                                (#xA2D9 . #x2460)	;CIRCLED DIGIT ONE
                                (#xA2DA . #x2461)	;CIRCLED DIGIT TWO
                                (#xA2DB . #x2462)	;CIRCLED DIGIT THREE
                                (#xA2DC . #x2463)	;CIRCLED DIGIT FOUR
                                (#xA2DD . #x2464)	;CIRCLED DIGIT FIVE
                                (#xA2DE . #x2465)	;CIRCLED DIGIT SIX
                                (#xA2DF . #x2466)	;CIRCLED DIGIT SEVEN
                                (#xA2E0 . #x2467)	;CIRCLED DIGIT EIGHT
                                (#xA2E1 . #x2468)	;CIRCLED DIGIT NINE
                                (#xA2E2 . #x2469)	;CIRCLED NUMBER TEN
                                (#xA2E5 . #x3220)	;PARENTHESIZED IDEOGRAPH ONE
                                (#xA2E6 . #x3221)	;PARENTHESIZED IDEOGRAPH TWO
                                (#xA2E7 . #x3222)	;PARENTHESIZED IDEOGRAPH THREE
                                (#xA2E8 . #x3223)	;PARENTHESIZED IDEOGRAPH FOUR
                                (#xA2E9 . #x3224)	;PARENTHESIZED IDEOGRAPH FIVE
                                (#xA2EA . #x3225)	;PARENTHESIZED IDEOGRAPH SIX
                                (#xA2EB . #x3226)	;PARENTHESIZED IDEOGRAPH SEVEN
                                (#xA2EC . #x3227)	;PARENTHESIZED IDEOGRAPH EIGHT
                                (#xA2ED . #x3228)	;PARENTHESIZED IDEOGRAPH NINE
                                (#xA2EE . #x3229)	;PARENTHESIZED IDEOGRAPH TEN
                                (#xA2F1 . #x2160)	;ROMAN NUMERAL ONE
                                (#xA2F2 . #x2161)	;ROMAN NUMERAL TWO
                                (#xA2F3 . #x2162)	;ROMAN NUMERAL THREE
                                (#xA2F4 . #x2163)	;ROMAN NUMERAL FOUR
                                (#xA2F5 . #x2164)	;ROMAN NUMERAL FIVE
                                (#xA2F6 . #x2165)	;ROMAN NUMERAL SIX
                                (#xA2F7 . #x2166)	;ROMAN NUMERAL SEVEN
                                (#xA2F8 . #x2167)	;ROMAN NUMERAL EIGHT
                                (#xA2F9 . #x2168)	;ROMAN NUMERAL NINE
                                (#xA2FA . #x2169)	;ROMAN NUMERAL TEN
                                (#xA2FB . #x216A)	;ROMAN NUMERAL ELEVEN
                                (#xA2FC . #x216B)	;ROMAN NUMERAL TWELVE
                                (#xA3A1 . #xFF01)	;FULLWIDTH EXCLAMATION MARK
                                (#xA3A2 . #xFF02)	;FULLWIDTH QUOTATION MARK
                                (#xA3A3 . #xFF03)	;FULLWIDTH NUMBER SIGN
                                (#xA3A4 . #xFFE5)	;FULLWIDTH YEN SIGN
                                (#xA3A5 . #xFF05)	;FULLWIDTH PERCENT SIGN
                                (#xA3A6 . #xFF06)	;FULLWIDTH AMPERSAND
                                (#xA3A7 . #xFF07)	;FULLWIDTH APOSTROPHE
                                (#xA3A8 . #xFF08)	;FULLWIDTH LEFT PARENTHESIS
                                (#xA3A9 . #xFF09)	;FULLWIDTH RIGHT PARENTHESIS
                                (#xA3AA . #xFF0A)	;FULLWIDTH ASTERISK
                                (#xA3AB . #xFF0B)	;FULLWIDTH PLUS SIGN
                                (#xA3AC . #xFF0C)	;FULLWIDTH COMMA
                                (#xA3AD . #xFF0D)	;FULLWIDTH HYPHEN-MINUS
                                (#xA3AE . #xFF0E)	;FULLWIDTH FULL STOP
                                (#xA3AF . #xFF0F)	;FULLWIDTH SOLIDUS
                                (#xA3B0 . #xFF10)	;FULLWIDTH DIGIT ZERO
                                (#xA3B1 . #xFF11)	;FULLWIDTH DIGIT ONE
                                (#xA3B2 . #xFF12)	;FULLWIDTH DIGIT TWO
                                (#xA3B3 . #xFF13)	;FULLWIDTH DIGIT THREE
                                (#xA3B4 . #xFF14)	;FULLWIDTH DIGIT FOUR
                                (#xA3B5 . #xFF15)	;FULLWIDTH DIGIT FIVE
                                (#xA3B6 . #xFF16)	;FULLWIDTH DIGIT SIX
                                (#xA3B7 . #xFF17)	;FULLWIDTH DIGIT SEVEN
                                (#xA3B8 . #xFF18)	;FULLWIDTH DIGIT EIGHT
                                (#xA3B9 . #xFF19)	;FULLWIDTH DIGIT NINE
                                (#xA3BA . #xFF1A)	;FULLWIDTH COLON
                                (#xA3BB . #xFF1B)	;FULLWIDTH SEMICOLON
                                (#xA3BC . #xFF1C)	;FULLWIDTH LESS-THAN SIGN
                                (#xA3BD . #xFF1D)	;FULLWIDTH EQUALS SIGN
                                (#xA3BE . #xFF1E)	;FULLWIDTH GREATER-THAN SIGN
                                (#xA3BF . #xFF1F)	;FULLWIDTH QUESTION MARK
                                (#xA3C0 . #xFF20)	;FULLWIDTH COMMERCIAL AT
                                (#xA3C1 . #xFF21)	;FULLWIDTH LATIN CAPITAL LETTER A
                                (#xA3C2 . #xFF22)	;FULLWIDTH LATIN CAPITAL LETTER B
                                (#xA3C3 . #xFF23)	;FULLWIDTH LATIN CAPITAL LETTER C
                                (#xA3C4 . #xFF24)	;FULLWIDTH LATIN CAPITAL LETTER D
                                (#xA3C5 . #xFF25)	;FULLWIDTH LATIN CAPITAL LETTER E
                                (#xA3C6 . #xFF26)	;FULLWIDTH LATIN CAPITAL LETTER F
                                (#xA3C7 . #xFF27)	;FULLWIDTH LATIN CAPITAL LETTER G
                                (#xA3C8 . #xFF28)	;FULLWIDTH LATIN CAPITAL LETTER H
                                (#xA3C9 . #xFF29)	;FULLWIDTH LATIN CAPITAL LETTER I
                                (#xA3CA . #xFF2A)	;FULLWIDTH LATIN CAPITAL LETTER J
                                (#xA3CB . #xFF2B)	;FULLWIDTH LATIN CAPITAL LETTER K
                                (#xA3CC . #xFF2C)	;FULLWIDTH LATIN CAPITAL LETTER L
                                (#xA3CD . #xFF2D)	;FULLWIDTH LATIN CAPITAL LETTER M
                                (#xA3CE . #xFF2E)	;FULLWIDTH LATIN CAPITAL LETTER N
                                (#xA3CF . #xFF2F)	;FULLWIDTH LATIN CAPITAL LETTER O
                                (#xA3D0 . #xFF30)	;FULLWIDTH LATIN CAPITAL LETTER P
                                (#xA3D1 . #xFF31)	;FULLWIDTH LATIN CAPITAL LETTER Q
                                (#xA3D2 . #xFF32)	;FULLWIDTH LATIN CAPITAL LETTER R
                                (#xA3D3 . #xFF33)	;FULLWIDTH LATIN CAPITAL LETTER S
                                (#xA3D4 . #xFF34)	;FULLWIDTH LATIN CAPITAL LETTER T
                                (#xA3D5 . #xFF35)	;FULLWIDTH LATIN CAPITAL LETTER U
                                (#xA3D6 . #xFF36)	;FULLWIDTH LATIN CAPITAL LETTER V
                                (#xA3D7 . #xFF37)	;FULLWIDTH LATIN CAPITAL LETTER W
                                (#xA3D8 . #xFF38)	;FULLWIDTH LATIN CAPITAL LETTER X
                                (#xA3D9 . #xFF39)	;FULLWIDTH LATIN CAPITAL LETTER Y
                                (#xA3DA . #xFF3A)	;FULLWIDTH LATIN CAPITAL LETTER Z
                                (#xA3DB . #xFF3B)	;FULLWIDTH LEFT SQUARE BRACKET
                                (#xA3DC . #xFF3C)	;FULLWIDTH REVERSE SOLIDUS
                                (#xA3DD . #xFF3D)	;FULLWIDTH RIGHT SQUARE BRACKET
                                (#xA3DE . #xFF3E)	;FULLWIDTH CIRCUMFLEX ACCENT
                                (#xA3DF . #xFF3F)	;FULLWIDTH LOW LINE
                                (#xA3E0 . #xFF40)	;FULLWIDTH GRAVE ACCENT
                                (#xA3E1 . #xFF41)	;FULLWIDTH LATIN SMALL LETTER A
                                (#xA3E2 . #xFF42)	;FULLWIDTH LATIN SMALL LETTER B
                                (#xA3E3 . #xFF43)	;FULLWIDTH LATIN SMALL LETTER C
                                (#xA3E4 . #xFF44)	;FULLWIDTH LATIN SMALL LETTER D
                                (#xA3E5 . #xFF45)	;FULLWIDTH LATIN SMALL LETTER E
                                (#xA3E6 . #xFF46)	;FULLWIDTH LATIN SMALL LETTER F
                                (#xA3E7 . #xFF47)	;FULLWIDTH LATIN SMALL LETTER G
                                (#xA3E8 . #xFF48)	;FULLWIDTH LATIN SMALL LETTER H
                                (#xA3E9 . #xFF49)	;FULLWIDTH LATIN SMALL LETTER I
                                (#xA3EA . #xFF4A)	;FULLWIDTH LATIN SMALL LETTER J
                                (#xA3EB . #xFF4B)	;FULLWIDTH LATIN SMALL LETTER K
                                (#xA3EC . #xFF4C)	;FULLWIDTH LATIN SMALL LETTER L
                                (#xA3ED . #xFF4D)	;FULLWIDTH LATIN SMALL LETTER M
                                (#xA3EE . #xFF4E)	;FULLWIDTH LATIN SMALL LETTER N
                                (#xA3EF . #xFF4F)	;FULLWIDTH LATIN SMALL LETTER O
                                (#xA3F0 . #xFF50)	;FULLWIDTH LATIN SMALL LETTER P
                                (#xA3F1 . #xFF51)	;FULLWIDTH LATIN SMALL LETTER Q
                                (#xA3F2 . #xFF52)	;FULLWIDTH LATIN SMALL LETTER R
                                (#xA3F3 . #xFF53)	;FULLWIDTH LATIN SMALL LETTER S
                                (#xA3F4 . #xFF54)	;FULLWIDTH LATIN SMALL LETTER T
                                (#xA3F5 . #xFF55)	;FULLWIDTH LATIN SMALL LETTER U
                                (#xA3F6 . #xFF56)	;FULLWIDTH LATIN SMALL LETTER V
                                (#xA3F7 . #xFF57)	;FULLWIDTH LATIN SMALL LETTER W
                                (#xA3F8 . #xFF58)	;FULLWIDTH LATIN SMALL LETTER X
                                (#xA3F9 . #xFF59)	;FULLWIDTH LATIN SMALL LETTER Y
                                (#xA3FA . #xFF5A)	;FULLWIDTH LATIN SMALL LETTER Z
                                (#xA3FB . #xFF5B)	;FULLWIDTH LEFT CURLY BRACKET
                                (#xA3FC . #xFF5C)	;FULLWIDTH VERTICAL LINE
                                (#xA3FD . #xFF5D)	;FULLWIDTH RIGHT CURLY BRACKET
                                (#xA3FE . #xFFE3)	;FULLWIDTH MACRON
                                (#xA4A1 . #x3041)	;HIRAGANA LETTER SMALL A
                                (#xA4A2 . #x3042)	;HIRAGANA LETTER A
                                (#xA4A3 . #x3043)	;HIRAGANA LETTER SMALL I
                                (#xA4A4 . #x3044)	;HIRAGANA LETTER I
                                (#xA4A5 . #x3045)	;HIRAGANA LETTER SMALL U
                                (#xA4A6 . #x3046)	;HIRAGANA LETTER U
                                (#xA4A7 . #x3047)	;HIRAGANA LETTER SMALL E
                                (#xA4A8 . #x3048)	;HIRAGANA LETTER E
                                (#xA4A9 . #x3049)	;HIRAGANA LETTER SMALL O
                                (#xA4AA . #x304A)	;HIRAGANA LETTER O
                                (#xA4AB . #x304B)	;HIRAGANA LETTER KA
                                (#xA4AC . #x304C)	;HIRAGANA LETTER GA
                                (#xA4AD . #x304D)	;HIRAGANA LETTER KI
                                (#xA4AE . #x304E)	;HIRAGANA LETTER GI
                                (#xA4AF . #x304F)	;HIRAGANA LETTER KU
                                (#xA4B0 . #x3050)	;HIRAGANA LETTER GU
                                (#xA4B1 . #x3051)	;HIRAGANA LETTER KE
                                (#xA4B2 . #x3052)	;HIRAGANA LETTER GE
                                (#xA4B3 . #x3053)	;HIRAGANA LETTER KO
                                (#xA4B4 . #x3054)	;HIRAGANA LETTER GO
                                (#xA4B5 . #x3055)	;HIRAGANA LETTER SA
                                (#xA4B6 . #x3056)	;HIRAGANA LETTER ZA
                                (#xA4B7 . #x3057)	;HIRAGANA LETTER SI
                                (#xA4B8 . #x3058)	;HIRAGANA LETTER ZI
                                (#xA4B9 . #x3059)	;HIRAGANA LETTER SU
                                (#xA4BA . #x305A)	;HIRAGANA LETTER ZU
                                (#xA4BB . #x305B)	;HIRAGANA LETTER SE
                                (#xA4BC . #x305C)	;HIRAGANA LETTER ZE
                                (#xA4BD . #x305D)	;HIRAGANA LETTER SO
                                (#xA4BE . #x305E)	;HIRAGANA LETTER ZO
                                (#xA4BF . #x305F)	;HIRAGANA LETTER TA
                                (#xA4C0 . #x3060)	;HIRAGANA LETTER DA
                                (#xA4C1 . #x3061)	;HIRAGANA LETTER TI
                                (#xA4C2 . #x3062)	;HIRAGANA LETTER DI
                                (#xA4C3 . #x3063)	;HIRAGANA LETTER SMALL TU
                                (#xA4C4 . #x3064)	;HIRAGANA LETTER TU
                                (#xA4C5 . #x3065)	;HIRAGANA LETTER DU
                                (#xA4C6 . #x3066)	;HIRAGANA LETTER TE
                                (#xA4C7 . #x3067)	;HIRAGANA LETTER DE
                                (#xA4C8 . #x3068)	;HIRAGANA LETTER TO
                                (#xA4C9 . #x3069)	;HIRAGANA LETTER DO
                                (#xA4CA . #x306A)	;HIRAGANA LETTER NA
                                (#xA4CB . #x306B)	;HIRAGANA LETTER NI
                                (#xA4CC . #x306C)	;HIRAGANA LETTER NU
                                (#xA4CD . #x306D)	;HIRAGANA LETTER NE
                                (#xA4CE . #x306E)	;HIRAGANA LETTER NO
                                (#xA4CF . #x306F)	;HIRAGANA LETTER HA
                                (#xA4D0 . #x3070)	;HIRAGANA LETTER BA
                                (#xA4D1 . #x3071)	;HIRAGANA LETTER PA
                                (#xA4D2 . #x3072)	;HIRAGANA LETTER HI
                                (#xA4D3 . #x3073)	;HIRAGANA LETTER BI
                                (#xA4D4 . #x3074)	;HIRAGANA LETTER PI
                                (#xA4D5 . #x3075)	;HIRAGANA LETTER HU
                                (#xA4D6 . #x3076)	;HIRAGANA LETTER BU
                                (#xA4D7 . #x3077)	;HIRAGANA LETTER PU
                                (#xA4D8 . #x3078)	;HIRAGANA LETTER HE
                                (#xA4D9 . #x3079)	;HIRAGANA LETTER BE
                                (#xA4DA . #x307A)	;HIRAGANA LETTER PE
                                (#xA4DB . #x307B)	;HIRAGANA LETTER HO
                                (#xA4DC . #x307C)	;HIRAGANA LETTER BO
                                (#xA4DD . #x307D)	;HIRAGANA LETTER PO
                                (#xA4DE . #x307E)	;HIRAGANA LETTER MA
                                (#xA4DF . #x307F)	;HIRAGANA LETTER MI
                                (#xA4E0 . #x3080)	;HIRAGANA LETTER MU
                                (#xA4E1 . #x3081)	;HIRAGANA LETTER ME
                                (#xA4E2 . #x3082)	;HIRAGANA LETTER MO
                                (#xA4E3 . #x3083)	;HIRAGANA LETTER SMALL YA
                                (#xA4E4 . #x3084)	;HIRAGANA LETTER YA
                                (#xA4E5 . #x3085)	;HIRAGANA LETTER SMALL YU
                                (#xA4E6 . #x3086)	;HIRAGANA LETTER YU
                                (#xA4E7 . #x3087)	;HIRAGANA LETTER SMALL YO
                                (#xA4E8 . #x3088)	;HIRAGANA LETTER YO
                                (#xA4E9 . #x3089)	;HIRAGANA LETTER RA
                                (#xA4EA . #x308A)	;HIRAGANA LETTER RI
                                (#xA4EB . #x308B)	;HIRAGANA LETTER RU
                                (#xA4EC . #x308C)	;HIRAGANA LETTER RE
                                (#xA4ED . #x308D)	;HIRAGANA LETTER RO
                                (#xA4EE . #x308E)	;HIRAGANA LETTER SMALL WA
                                (#xA4EF . #x308F)	;HIRAGANA LETTER WA
                                (#xA4F0 . #x3090)	;HIRAGANA LETTER WI
                                (#xA4F1 . #x3091)	;HIRAGANA LETTER WE
                                (#xA4F2 . #x3092)	;HIRAGANA LETTER WO
                                (#xA4F3 . #x3093)	;HIRAGANA LETTER N
                                (#xA5A1 . #x30A1)	;KATAKANA LETTER SMALL A
                                (#xA5A2 . #x30A2)	;KATAKANA LETTER A
                                (#xA5A3 . #x30A3)	;KATAKANA LETTER SMALL I
                                (#xA5A4 . #x30A4)	;KATAKANA LETTER I
                                (#xA5A5 . #x30A5)	;KATAKANA LETTER SMALL U
                                (#xA5A6 . #x30A6)	;KATAKANA LETTER U
                                (#xA5A7 . #x30A7)	;KATAKANA LETTER SMALL E
                                (#xA5A8 . #x30A8)	;KATAKANA LETTER E
                                (#xA5A9 . #x30A9)	;KATAKANA LETTER SMALL O
                                (#xA5AA . #x30AA)	;KATAKANA LETTER O
                                (#xA5AB . #x30AB)	;KATAKANA LETTER KA
                                (#xA5AC . #x30AC)	;KATAKANA LETTER GA
                                (#xA5AD . #x30AD)	;KATAKANA LETTER KI
                                (#xA5AE . #x30AE)	;KATAKANA LETTER GI
                                (#xA5AF . #x30AF)	;KATAKANA LETTER KU
                                (#xA5B0 . #x30B0)	;KATAKANA LETTER GU
                                (#xA5B1 . #x30B1)	;KATAKANA LETTER KE
                                (#xA5B2 . #x30B2)	;KATAKANA LETTER GE
                                (#xA5B3 . #x30B3)	;KATAKANA LETTER KO
                                (#xA5B4 . #x30B4)	;KATAKANA LETTER GO
                                (#xA5B5 . #x30B5)	;KATAKANA LETTER SA
                                (#xA5B6 . #x30B6)	;KATAKANA LETTER ZA
                                (#xA5B7 . #x30B7)	;KATAKANA LETTER SI
                                (#xA5B8 . #x30B8)	;KATAKANA LETTER ZI
                                (#xA5B9 . #x30B9)	;KATAKANA LETTER SU
                                (#xA5BA . #x30BA)	;KATAKANA LETTER ZU
                                (#xA5BB . #x30BB)	;KATAKANA LETTER SE
                                (#xA5BC . #x30BC)	;KATAKANA LETTER ZE
                                (#xA5BD . #x30BD)	;KATAKANA LETTER SO
                                (#xA5BE . #x30BE)	;KATAKANA LETTER ZO
                                (#xA5BF . #x30BF)	;KATAKANA LETTER TA
                                (#xA5C0 . #x30C0)	;KATAKANA LETTER DA
                                (#xA5C1 . #x30C1)	;KATAKANA LETTER TI
                                (#xA5C2 . #x30C2)	;KATAKANA LETTER DI
                                (#xA5C3 . #x30C3)	;KATAKANA LETTER SMALL TU
                                (#xA5C4 . #x30C4)	;KATAKANA LETTER TU
                                (#xA5C5 . #x30C5)	;KATAKANA LETTER DU
                                (#xA5C6 . #x30C6)	;KATAKANA LETTER TE
                                (#xA5C7 . #x30C7)	;KATAKANA LETTER DE
                                (#xA5C8 . #x30C8)	;KATAKANA LETTER TO
                                (#xA5C9 . #x30C9)	;KATAKANA LETTER DO
                                (#xA5CA . #x30CA)	;KATAKANA LETTER NA
                                (#xA5CB . #x30CB)	;KATAKANA LETTER NI
                                (#xA5CC . #x30CC)	;KATAKANA LETTER NU
                                (#xA5CD . #x30CD)	;KATAKANA LETTER NE
                                (#xA5CE . #x30CE)	;KATAKANA LETTER NO
                                (#xA5CF . #x30CF)	;KATAKANA LETTER HA
                                (#xA5D0 . #x30D0)	;KATAKANA LETTER BA
                                (#xA5D1 . #x30D1)	;KATAKANA LETTER PA
                                (#xA5D2 . #x30D2)	;KATAKANA LETTER HI
                                (#xA5D3 . #x30D3)	;KATAKANA LETTER BI
                                (#xA5D4 . #x30D4)	;KATAKANA LETTER PI
                                (#xA5D5 . #x30D5)	;KATAKANA LETTER HU
                                (#xA5D6 . #x30D6)	;KATAKANA LETTER BU
                                (#xA5D7 . #x30D7)	;KATAKANA LETTER PU
                                (#xA5D8 . #x30D8)	;KATAKANA LETTER HE
                                (#xA5D9 . #x30D9)	;KATAKANA LETTER BE
                                (#xA5DA . #x30DA)	;KATAKANA LETTER PE
                                (#xA5DB . #x30DB)	;KATAKANA LETTER HO
                                (#xA5DC . #x30DC)	;KATAKANA LETTER BO
                                (#xA5DD . #x30DD)	;KATAKANA LETTER PO
                                (#xA5DE . #x30DE)	;KATAKANA LETTER MA
                                (#xA5DF . #x30DF)	;KATAKANA LETTER MI
                                (#xA5E0 . #x30E0)	;KATAKANA LETTER MU
                                (#xA5E1 . #x30E1)	;KATAKANA LETTER ME
                                (#xA5E2 . #x30E2)	;KATAKANA LETTER MO
                                (#xA5E3 . #x30E3)	;KATAKANA LETTER SMALL YA
                                (#xA5E4 . #x30E4)	;KATAKANA LETTER YA
                                (#xA5E5 . #x30E5)	;KATAKANA LETTER SMALL YU
                                (#xA5E6 . #x30E6)	;KATAKANA LETTER YU
                                (#xA5E7 . #x30E7)	;KATAKANA LETTER SMALL YO
                                (#xA5E8 . #x30E8)	;KATAKANA LETTER YO
                                (#xA5E9 . #x30E9)	;KATAKANA LETTER RA
                                (#xA5EA . #x30EA)	;KATAKANA LETTER RI
                                (#xA5EB . #x30EB)	;KATAKANA LETTER RU
                                (#xA5EC . #x30EC)	;KATAKANA LETTER RE
                                (#xA5ED . #x30ED)	;KATAKANA LETTER RO
                                (#xA5EE . #x30EE)	;KATAKANA LETTER SMALL WA
                                (#xA5EF . #x30EF)	;KATAKANA LETTER WA
                                (#xA5F0 . #x30F0)	;KATAKANA LETTER WI
                                (#xA5F1 . #x30F1)	;KATAKANA LETTER WE
                                (#xA5F2 . #x30F2)	;KATAKANA LETTER WO
                                (#xA5F3 . #x30F3)	;KATAKANA LETTER N
                                (#xA5F4 . #x30F4)	;KATAKANA LETTER VU
                                (#xA5F5 . #x30F5)	;KATAKANA LETTER SMALL KA
                                (#xA5F6 . #x30F6)	;KATAKANA LETTER SMALL KE
                                (#xA6A1 . #x0391)	;GREEK CAPITAL LETTER ALPHA
                                (#xA6A2 . #x0392)	;GREEK CAPITAL LETTER BETA
                                (#xA6A3 . #x0393)	;GREEK CAPITAL LETTER GAMMA
                                (#xA6A4 . #x0394)	;GREEK CAPITAL LETTER DELTA
                                (#xA6A5 . #x0395)	;GREEK CAPITAL LETTER EPSILON
                                (#xA6A6 . #x0396)	;GREEK CAPITAL LETTER ZETA
                                (#xA6A7 . #x0397)	;GREEK CAPITAL LETTER ETA
                                (#xA6A8 . #x0398)	;GREEK CAPITAL LETTER THETA
                                (#xA6A9 . #x0399)	;GREEK CAPITAL LETTER IOTA
                                (#xA6AA . #x039A)	;GREEK CAPITAL LETTER KAPPA
                                (#xA6AB . #x039B)	;GREEK CAPITAL LETTER LAMDA
                                (#xA6AC . #x039C)	;GREEK CAPITAL LETTER MU
                                (#xA6AD . #x039D)	;GREEK CAPITAL LETTER NU
                                (#xA6AE . #x039E)	;GREEK CAPITAL LETTER XI
                                (#xA6AF . #x039F)	;GREEK CAPITAL LETTER OMICRON
                                (#xA6B0 . #x03A0)	;GREEK CAPITAL LETTER PI
                                (#xA6B1 . #x03A1)	;GREEK CAPITAL LETTER RHO
                                (#xA6B2 . #x03A3)	;GREEK CAPITAL LETTER SIGMA
                                (#xA6B3 . #x03A4)	;GREEK CAPITAL LETTER TAU
                                (#xA6B4 . #x03A5)	;GREEK CAPITAL LETTER UPSILON
                                (#xA6B5 . #x03A6)	;GREEK CAPITAL LETTER PHI
                                (#xA6B6 . #x03A7)	;GREEK CAPITAL LETTER CHI
                                (#xA6B7 . #x03A8)	;GREEK CAPITAL LETTER PSI
                                (#xA6B8 . #x03A9)	;GREEK CAPITAL LETTER OMEGA
                                (#xA6C1 . #x03B1)	;GREEK SMALL LETTER ALPHA
                                (#xA6C2 . #x03B2)	;GREEK SMALL LETTER BETA
                                (#xA6C3 . #x03B3)	;GREEK SMALL LETTER GAMMA
                                (#xA6C4 . #x03B4)	;GREEK SMALL LETTER DELTA
                                (#xA6C5 . #x03B5)	;GREEK SMALL LETTER EPSILON
                                (#xA6C6 . #x03B6)	;GREEK SMALL LETTER ZETA
                                (#xA6C7 . #x03B7)	;GREEK SMALL LETTER ETA
                                (#xA6C8 . #x03B8)	;GREEK SMALL LETTER THETA
                                (#xA6C9 . #x03B9)	;GREEK SMALL LETTER IOTA
                                (#xA6CA . #x03BA)	;GREEK SMALL LETTER KAPPA
                                (#xA6CB . #x03BB)	;GREEK SMALL LETTER LAMDA
                                (#xA6CC . #x03BC)	;GREEK SMALL LETTER MU
                                (#xA6CD . #x03BD)	;GREEK SMALL LETTER NU
                                (#xA6CE . #x03BE)	;GREEK SMALL LETTER XI
                                (#xA6CF . #x03BF)	;GREEK SMALL LETTER OMICRON
                                (#xA6D0 . #x03C0)	;GREEK SMALL LETTER PI
                                (#xA6D1 . #x03C1)	;GREEK SMALL LETTER RHO
                                (#xA6D2 . #x03C3)	;GREEK SMALL LETTER SIGMA
                                (#xA6D3 . #x03C4)	;GREEK SMALL LETTER TAU
                                (#xA6D4 . #x03C5)	;GREEK SMALL LETTER UPSILON
                                (#xA6D5 . #x03C6)	;GREEK SMALL LETTER PHI
                                (#xA6D6 . #x03C7)	;GREEK SMALL LETTER CHI
                                (#xA6D7 . #x03C8)	;GREEK SMALL LETTER PSI
                                (#xA6D8 . #x03C9)	;GREEK SMALL LETTER OMEGA
                                (#xA6E0 . #xFE35)	;PRESENTATION FORM FOR VERTICAL LEFT PARENTHESIS
                                (#xA6E1 . #xFE36)	;PRESENTATION FORM FOR VERTICAL RIGHT PARENTHESIS
                                (#xA6E2 . #xFE39)	;PRESENTATION FORM FOR VERTICAL LEFT TORTOISE SHELL BRACKET
                                (#xA6E3 . #xFE3A)	;PRESENTATION FORM FOR VERTICAL RIGHT TORTOISE SHELL BRACKET
                                (#xA6E4 . #xFE3F)	;PRESENTATION FORM FOR VERTICAL LEFT ANGLE BRACKET
                                (#xA6E5 . #xFE40)	;PRESENTATION FORM FOR VERTICAL RIGHT ANGLE BRACKET
                                (#xA6E6 . #xFE3D)	;PRESENTATION FORM FOR VERTICAL LEFT DOUBLE ANGLE BRACKET
                                (#xA6E7 . #xFE3E)	;PRESENTATION FORM FOR VERTICAL RIGHT DOUBLE ANGLE BRACKET
                                (#xA6E8 . #xFE41)	;PRESENTATION FORM FOR VERTICAL LEFT CORNER BRACKET
                                (#xA6E9 . #xFE42)	;PRESENTATION FORM FOR VERTICAL RIGHT CORNER BRACKET
                                (#xA6EA . #xFE43)	;PRESENTATION FORM FOR VERTICAL LEFT WHITE CORNER BRACKET
                                (#xA6EB . #xFE44)	;PRESENTATION FORM FOR VERTICAL RIGHT WHITE CORNER BRACKET
                                (#xA6EE . #xFE3B)	;PRESENTATION FORM FOR VERTICAL LEFT BLACK LENTICULAR BRACKET
                                (#xA6EF . #xFE3C)	;PRESENTATION FORM FOR VERTICAL RIGHT BLACK LENTICULAR BRACKET
                                (#xA6F0 . #xFE37)	;PRESENTATION FORM FOR VERTICAL LEFT CURLY BRACKET
                                (#xA6F1 . #xFE38)	;PRESENTATION FORM FOR VERTICAL RIGHT CURLY BRACKET
                                (#xA6F2 . #xFE31)	;PRESENTATION FORM FOR VERTICAL EM DASH
                                (#xA6F4 . #xFE33)	;PRESENTATION FORM FOR VERTICAL LOW LINE
                                (#xA6F5 . #xFE34)	;PRESENTATION FORM FOR VERTICAL WAVY LOW LINE
                                (#xA7A1 . #x0410)	;CYRILLIC CAPITAL LETTER A
                                (#xA7A2 . #x0411)	;CYRILLIC CAPITAL LETTER BE
                                (#xA7A3 . #x0412)	;CYRILLIC CAPITAL LETTER VE
                                (#xA7A4 . #x0413)	;CYRILLIC CAPITAL LETTER GHE
                                (#xA7A5 . #x0414)	;CYRILLIC CAPITAL LETTER DE
                                (#xA7A6 . #x0415)	;CYRILLIC CAPITAL LETTER IE
                                (#xA7A7 . #x0401)	;CYRILLIC CAPITAL LETTER IO
                                (#xA7A8 . #x0416)	;CYRILLIC CAPITAL LETTER ZHE
                                (#xA7A9 . #x0417)	;CYRILLIC CAPITAL LETTER ZE
                                (#xA7AA . #x0418)	;CYRILLIC CAPITAL LETTER I
                                (#xA7AB . #x0419)	;CYRILLIC CAPITAL LETTER SHORT I
                                (#xA7AC . #x041A)	;CYRILLIC CAPITAL LETTER KA
                                (#xA7AD . #x041B)	;CYRILLIC CAPITAL LETTER EL
                                (#xA7AE . #x041C)	;CYRILLIC CAPITAL LETTER EM
                                (#xA7AF . #x041D)	;CYRILLIC CAPITAL LETTER EN
                                (#xA7B0 . #x041E)	;CYRILLIC CAPITAL LETTER O
                                (#xA7B1 . #x041F)	;CYRILLIC CAPITAL LETTER PE
                                (#xA7B2 . #x0420)	;CYRILLIC CAPITAL LETTER ER
                                (#xA7B3 . #x0421)	;CYRILLIC CAPITAL LETTER ES
                                (#xA7B4 . #x0422)	;CYRILLIC CAPITAL LETTER TE
                                (#xA7B5 . #x0423)	;CYRILLIC CAPITAL LETTER U
                                (#xA7B6 . #x0424)	;CYRILLIC CAPITAL LETTER EF
                                (#xA7B7 . #x0425)	;CYRILLIC CAPITAL LETTER HA
                                (#xA7B8 . #x0426)	;CYRILLIC CAPITAL LETTER TSE
                                (#xA7B9 . #x0427)	;CYRILLIC CAPITAL LETTER CHE
                                (#xA7BA . #x0428)	;CYRILLIC CAPITAL LETTER SHA
                                (#xA7BB . #x0429)	;CYRILLIC CAPITAL LETTER SHCHA
                                (#xA7BC . #x042A)	;CYRILLIC CAPITAL LETTER HARD SIGN
                                (#xA7BD . #x042B)	;CYRILLIC CAPITAL LETTER YERU
                                (#xA7BE . #x042C)	;CYRILLIC CAPITAL LETTER SOFT SIGN
                                (#xA7BF . #x042D)	;CYRILLIC CAPITAL LETTER E
                                (#xA7C0 . #x042E)	;CYRILLIC CAPITAL LETTER YU
                                (#xA7C1 . #x042F)	;CYRILLIC CAPITAL LETTER YA
                                (#xA7D1 . #x0430)	;CYRILLIC SMALL LETTER A
                                (#xA7D2 . #x0431)	;CYRILLIC SMALL LETTER BE
                                (#xA7D3 . #x0432)	;CYRILLIC SMALL LETTER VE
                                (#xA7D4 . #x0433)	;CYRILLIC SMALL LETTER GHE
                                (#xA7D5 . #x0434)	;CYRILLIC SMALL LETTER DE
                                (#xA7D6 . #x0435)	;CYRILLIC SMALL LETTER IE
                                (#xA7D7 . #x0451)	;CYRILLIC SMALL LETTER IO
                                (#xA7D8 . #x0436)	;CYRILLIC SMALL LETTER ZHE
                                (#xA7D9 . #x0437)	;CYRILLIC SMALL LETTER ZE
                                (#xA7DA . #x0438)	;CYRILLIC SMALL LETTER I
                                (#xA7DB . #x0439)	;CYRILLIC SMALL LETTER SHORT I
                                (#xA7DC . #x043A)	;CYRILLIC SMALL LETTER KA
                                (#xA7DD . #x043B)	;CYRILLIC SMALL LETTER EL
                                (#xA7DE . #x043C)	;CYRILLIC SMALL LETTER EM
                                (#xA7DF . #x043D)	;CYRILLIC SMALL LETTER EN
                                (#xA7E0 . #x043E)	;CYRILLIC SMALL LETTER O
                                (#xA7E1 . #x043F)	;CYRILLIC SMALL LETTER PE
                                (#xA7E2 . #x0440)	;CYRILLIC SMALL LETTER ER
                                (#xA7E3 . #x0441)	;CYRILLIC SMALL LETTER ES
                                (#xA7E4 . #x0442)	;CYRILLIC SMALL LETTER TE
                                (#xA7E5 . #x0443)	;CYRILLIC SMALL LETTER U
                                (#xA7E6 . #x0444)	;CYRILLIC SMALL LETTER EF
                                (#xA7E7 . #x0445)	;CYRILLIC SMALL LETTER HA
                                (#xA7E8 . #x0446)	;CYRILLIC SMALL LETTER TSE
                                (#xA7E9 . #x0447)	;CYRILLIC SMALL LETTER CHE
                                (#xA7EA . #x0448)	;CYRILLIC SMALL LETTER SHA
                                (#xA7EB . #x0449)	;CYRILLIC SMALL LETTER SHCHA
                                (#xA7EC . #x044A)	;CYRILLIC SMALL LETTER HARD SIGN
                                (#xA7ED . #x044B)	;CYRILLIC SMALL LETTER YERU
                                (#xA7EE . #x044C)	;CYRILLIC SMALL LETTER SOFT SIGN
                                (#xA7EF . #x044D)	;CYRILLIC SMALL LETTER E
                                (#xA7F0 . #x044E)	;CYRILLIC SMALL LETTER YU
                                (#xA7F1 . #x044F)	;CYRILLIC SMALL LETTER YA
                                (#xA840 . #x02CA)	;MODIFIER LETTER ACUTE ACCENT
                                (#xA841 . #x02CB)	;MODIFIER LETTER GRAVE ACCENT
                                (#xA842 . #x02D9)	;DOT ABOVE
                                (#xA843 . #x2013)	;EN DASH
                                (#xA844 . #x2015)	;HORIZONTAL BAR
                                (#xA845 . #x2025)	;TWO DOT LEADER
                                (#xA846 . #x2035)	;REVERSED PRIME
                                (#xA847 . #x2105)	;CARE OF
                                (#xA848 . #x2109)	;DEGREE FAHRENHEIT
                                (#xA849 . #x2196)	;NORTH WEST ARROW
                                (#xA84A . #x2197)	;NORTH EAST ARROW
                                (#xA84B . #x2198)	;SOUTH EAST ARROW
                                (#xA84C . #x2199)	;SOUTH WEST ARROW
                                (#xA84D . #x2215)	;DIVISION SLASH
                                (#xA84E . #x221F)	;RIGHT ANGLE
                                (#xA84F . #x2223)	;DIVIDES
                                (#xA850 . #x2252)	;APPROXIMATELY EQUAL TO OR THE IMAGE OF
                                (#xA851 . #x2266)	;LESS-THAN OVER EQUAL TO
                                (#xA852 . #x2267)	;GREATER-THAN OVER EQUAL TO
                                (#xA853 . #x22BF)	;RIGHT TRIANGLE
                                (#xA854 . #x2550)	;BOX DRAWINGS DOUBLE HORIZONTAL
                                (#xA855 . #x2551)	;BOX DRAWINGS DOUBLE VERTICAL
                                (#xA856 . #x2552)	;BOX DRAWINGS DOWN SINGLE AND RIGHT DOUBLE
                                (#xA857 . #x2553)	;BOX DRAWINGS DOWN DOUBLE AND RIGHT SINGLE
                                (#xA858 . #x2554)	;BOX DRAWINGS DOUBLE DOWN AND RIGHT
                                (#xA859 . #x2555)	;BOX DRAWINGS DOWN SINGLE AND LEFT DOUBLE
                                (#xA85A . #x2556)	;BOX DRAWINGS DOWN DOUBLE AND LEFT SINGLE
                                (#xA85B . #x2557)	;BOX DRAWINGS DOUBLE DOWN AND LEFT
                                (#xA85C . #x2558)	;BOX DRAWINGS UP SINGLE AND RIGHT DOUBLE
                                (#xA85D . #x2559)	;BOX DRAWINGS UP DOUBLE AND RIGHT SINGLE
                                (#xA85E . #x255A)	;BOX DRAWINGS DOUBLE UP AND RIGHT
                                (#xA85F . #x255B)	;BOX DRAWINGS UP SINGLE AND LEFT DOUBLE
                                (#xA860 . #x255C)	;BOX DRAWINGS UP DOUBLE AND LEFT SINGLE
                                (#xA861 . #x255D)	;BOX DRAWINGS DOUBLE UP AND LEFT
                                (#xA862 . #x255E)	;BOX DRAWINGS VERTICAL SINGLE AND RIGHT DOUBLE
                                (#xA863 . #x255F)	;BOX DRAWINGS VERTICAL DOUBLE AND RIGHT SINGLE
                                (#xA864 . #x2560)	;BOX DRAWINGS DOUBLE VERTICAL AND RIGHT
                                (#xA865 . #x2561)	;BOX DRAWINGS VERTICAL SINGLE AND LEFT DOUBLE
                                (#xA866 . #x2562)	;BOX DRAWINGS VERTICAL DOUBLE AND LEFT SINGLE
                                (#xA867 . #x2563)	;BOX DRAWINGS DOUBLE VERTICAL AND LEFT
                                (#xA868 . #x2564)	;BOX DRAWINGS DOWN SINGLE AND HORIZONTAL DOUBLE
                                (#xA869 . #x2565)	;BOX DRAWINGS DOWN DOUBLE AND HORIZONTAL SINGLE
                                (#xA86A . #x2566)	;BOX DRAWINGS DOUBLE DOWN AND HORIZONTAL
                                (#xA86B . #x2567)	;BOX DRAWINGS UP SINGLE AND HORIZONTAL DOUBLE
                                (#xA86C . #x2568)	;BOX DRAWINGS UP DOUBLE AND HORIZONTAL SINGLE
                                (#xA86D . #x2569)	;BOX DRAWINGS DOUBLE UP AND HORIZONTAL
                                (#xA86E . #x256A)	;BOX DRAWINGS VERTICAL SINGLE AND HORIZONTAL DOUBLE
                                (#xA86F . #x256B)	;BOX DRAWINGS VERTICAL DOUBLE AND HORIZONTAL SINGLE
                                (#xA870 . #x256C)	;BOX DRAWINGS DOUBLE VERTICAL AND HORIZONTAL
                                (#xA871 . #x256D)	;BOX DRAWINGS LIGHT ARC DOWN AND RIGHT
                                (#xA872 . #x256E)	;BOX DRAWINGS LIGHT ARC DOWN AND LEFT
                                (#xA873 . #x256F)	;BOX DRAWINGS LIGHT ARC UP AND LEFT
                                (#xA874 . #x2570)	;BOX DRAWINGS LIGHT ARC UP AND RIGHT
                                (#xA875 . #x2571)	;BOX DRAWINGS LIGHT DIAGONAL UPPER RIGHT TO LOWER LEFT
                                (#xA876 . #x2572)	;BOX DRAWINGS LIGHT DIAGONAL UPPER LEFT TO LOWER RIGHT
                                (#xA877 . #x2573)	;BOX DRAWINGS LIGHT DIAGONAL CROSS
                                (#xA878 . #x2581)	;LOWER ONE EIGHTH BLOCK
                                (#xA879 . #x2582)	;LOWER ONE QUARTER BLOCK
                                (#xA87A . #x2583)	;LOWER THREE EIGHTHS BLOCK
                                (#xA87B . #x2584)	;LOWER HALF BLOCK
                                (#xA87C . #x2585)	;LOWER FIVE EIGHTHS BLOCK
                                (#xA87D . #x2586)	;LOWER THREE QUARTERS BLOCK
                                (#xA87E . #x2587)	;LOWER SEVEN EIGHTHS BLOCK
                                (#xA880 . #x2588)	;FULL BLOCK
                                (#xA881 . #x2589)	;LEFT SEVEN EIGHTHS BLOCK
                                (#xA882 . #x258A)	;LEFT THREE QUARTERS BLOCK
                                (#xA883 . #x258B)	;LEFT FIVE EIGHTHS BLOCK
                                (#xA884 . #x258C)	;LEFT HALF BLOCK
                                (#xA885 . #x258D)	;LEFT THREE EIGHTHS BLOCK
                                (#xA886 . #x258E)	;LEFT ONE QUARTER BLOCK
                                (#xA887 . #x258F)	;LEFT ONE EIGHTH BLOCK
                                (#xA888 . #x2593)	;DARK SHADE
                                (#xA889 . #x2594)	;UPPER ONE EIGHTH BLOCK
                                (#xA88A . #x2595)	;RIGHT ONE EIGHTH BLOCK
                                (#xA88B . #x25BC)	;BLACK DOWN-POINTING TRIANGLE
                                (#xA88C . #x25BD)	;WHITE DOWN-POINTING TRIANGLE
                                (#xA88D . #x25E2)	;BLACK LOWER RIGHT TRIANGLE
                                (#xA88E . #x25E3)	;BLACK LOWER LEFT TRIANGLE
                                (#xA88F . #x25E4)	;BLACK UPPER LEFT TRIANGLE
                                (#xA890 . #x25E5)	;BLACK UPPER RIGHT TRIANGLE
                                (#xA891 . #x2609)	;SUN
                                (#xA892 . #x2295)	;CIRCLED PLUS
                                (#xA893 . #x3012)	;POSTAL MARK
                                (#xA894 . #x301D)	;REVERSED DOUBLE PRIME QUOTATION MARK
                                (#xA895 . #x301E)	;DOUBLE PRIME QUOTATION MARK
                                (#xA8A1 . #x0101)	;LATIN SMALL LETTER A WITH MACRON
                                (#xA8A2 . #x00E1)	;LATIN SMALL LETTER A WITH ACUTE
                                (#xA8A3 . #x01CE)	;LATIN SMALL LETTER A WITH CARON
                                (#xA8A4 . #x00E0)	;LATIN SMALL LETTER A WITH GRAVE
                                (#xA8A5 . #x0113)	;LATIN SMALL LETTER E WITH MACRON
                                (#xA8A6 . #x00E9)	;LATIN SMALL LETTER E WITH ACUTE
                                (#xA8A7 . #x011B)	;LATIN SMALL LETTER E WITH CARON
                                (#xA8A8 . #x00E8)	;LATIN SMALL LETTER E WITH GRAVE
                                (#xA8A9 . #x012B)	;LATIN SMALL LETTER I WITH MACRON
                                (#xA8AA . #x00ED)	;LATIN SMALL LETTER I WITH ACUTE
                                (#xA8AB . #x01D0)	;LATIN SMALL LETTER I WITH CARON
                                (#xA8AC . #x00EC)	;LATIN SMALL LETTER I WITH GRAVE
                                (#xA8AD . #x014D)	;LATIN SMALL LETTER O WITH MACRON
                                (#xA8AE . #x00F3)	;LATIN SMALL LETTER O WITH ACUTE
                                (#xA8AF . #x01D2)	;LATIN SMALL LETTER O WITH CARON
                                (#xA8B0 . #x00F2)	;LATIN SMALL LETTER O WITH GRAVE
                                (#xA8B1 . #x016B)	;LATIN SMALL LETTER U WITH MACRON
                                (#xA8B2 . #x00FA)	;LATIN SMALL LETTER U WITH ACUTE
                                (#xA8B3 . #x01D4)	;LATIN SMALL LETTER U WITH CARON
                                (#xA8B4 . #x00F9)	;LATIN SMALL LETTER U WITH GRAVE
                                (#xA8B5 . #x01D6)	;LATIN SMALL LETTER U WITH DIAERESIS AND MACRON
                                (#xA8B6 . #x01D8)	;LATIN SMALL LETTER U WITH DIAERESIS AND ACUTE
                                (#xA8B7 . #x01DA)	;LATIN SMALL LETTER U WITH DIAERESIS AND CARON
                                (#xA8B8 . #x01DC)	;LATIN SMALL LETTER U WITH DIAERESIS AND GRAVE
                                (#xA8B9 . #x00FC)	;LATIN SMALL LETTER U WITH DIAERESIS
                                (#xA8BA . #x00EA)	;LATIN SMALL LETTER E WITH CIRCUMFLEX
                                (#xA8BB . #x0251)	;LATIN SMALL LETTER ALPHA
                                (#xA8BD . #x0144)	;LATIN SMALL LETTER N WITH ACUTE
                                (#xA8BE . #x0148)	;LATIN SMALL LETTER N WITH CARON
                                (#xA8C0 . #x0261)	;LATIN SMALL LETTER SCRIPT G
                                (#xA8C5 . #x3105)	;BOPOMOFO LETTER B
                                (#xA8C6 . #x3106)	;BOPOMOFO LETTER P
                                (#xA8C7 . #x3107)	;BOPOMOFO LETTER M
                                (#xA8C8 . #x3108)	;BOPOMOFO LETTER F
                                (#xA8C9 . #x3109)	;BOPOMOFO LETTER D
                                (#xA8CA . #x310A)	;BOPOMOFO LETTER T
                                (#xA8CB . #x310B)	;BOPOMOFO LETTER N
                                (#xA8CC . #x310C)	;BOPOMOFO LETTER L
                                (#xA8CD . #x310D)	;BOPOMOFO LETTER G
                                (#xA8CE . #x310E)	;BOPOMOFO LETTER K
                                (#xA8CF . #x310F)	;BOPOMOFO LETTER H
                                (#xA8D0 . #x3110)	;BOPOMOFO LETTER J
                                (#xA8D1 . #x3111)	;BOPOMOFO LETTER Q
                                (#xA8D2 . #x3112)	;BOPOMOFO LETTER X
                                (#xA8D3 . #x3113)	;BOPOMOFO LETTER ZH
                                (#xA8D4 . #x3114)	;BOPOMOFO LETTER CH
                                (#xA8D5 . #x3115)	;BOPOMOFO LETTER SH
                                (#xA8D6 . #x3116)	;BOPOMOFO LETTER R
                                (#xA8D7 . #x3117)	;BOPOMOFO LETTER Z
                                (#xA8D8 . #x3118)	;BOPOMOFO LETTER C
                                (#xA8D9 . #x3119)	;BOPOMOFO LETTER S
                                (#xA8DA . #x311A)	;BOPOMOFO LETTER A
                                (#xA8DB . #x311B)	;BOPOMOFO LETTER O
                                (#xA8DC . #x311C)	;BOPOMOFO LETTER E
                                (#xA8DD . #x311D)	;BOPOMOFO LETTER EH
                                (#xA8DE . #x311E)	;BOPOMOFO LETTER AI
                                (#xA8DF . #x311F)	;BOPOMOFO LETTER EI
                                (#xA8E0 . #x3120)	;BOPOMOFO LETTER AU
                                (#xA8E1 . #x3121)	;BOPOMOFO LETTER OU
                                (#xA8E2 . #x3122)	;BOPOMOFO LETTER AN
                                (#xA8E3 . #x3123)	;BOPOMOFO LETTER EN
                                (#xA8E4 . #x3124)	;BOPOMOFO LETTER ANG
                                (#xA8E5 . #x3125)	;BOPOMOFO LETTER ENG
                                (#xA8E6 . #x3126)	;BOPOMOFO LETTER ER
                                (#xA8E7 . #x3127)	;BOPOMOFO LETTER I
                                (#xA8E8 . #x3128)	;BOPOMOFO LETTER U
                                (#xA8E9 . #x3129)	;BOPOMOFO LETTER IU
                                (#xA940 . #x3021)	;HANGZHOU NUMERAL ONE
                                (#xA941 . #x3022)	;HANGZHOU NUMERAL TWO
                                (#xA942 . #x3023)	;HANGZHOU NUMERAL THREE
                                (#xA943 . #x3024)	;HANGZHOU NUMERAL FOUR
                                (#xA944 . #x3025)	;HANGZHOU NUMERAL FIVE
                                (#xA945 . #x3026)	;HANGZHOU NUMERAL SIX
                                (#xA946 . #x3027)	;HANGZHOU NUMERAL SEVEN
                                (#xA947 . #x3028)	;HANGZHOU NUMERAL EIGHT
                                (#xA948 . #x3029)	;HANGZHOU NUMERAL NINE
                                (#xA949 . #x32A3)	;CIRCLED IDEOGRAPH CORRECT
                                (#xA94A . #x338E)	;SQUARE MG
                                (#xA94B . #x338F)	;SQUARE KG
                                (#xA94C . #x339C)	;SQUARE MM
                                (#xA94D . #x339D)	;SQUARE CM
                                (#xA94E . #x339E)	;SQUARE KM
                                (#xA94F . #x33A1)	;SQUARE M SQUARED
                                (#xA950 . #x33C4)	;SQUARE CC
                                (#xA951 . #x33CE)	;SQUARE KM CAPITAL
                                (#xA952 . #x33D1)	;SQUARE LN
                                (#xA953 . #x33D2)	;SQUARE LOG
                                (#xA954 . #x33D5)	;SQUARE MIL
                                (#xA955 . #xFE30)	;PRESENTATION FORM FOR VERTICAL TWO DOT LEADER
                                (#xA956 . #xFFE2)	;FULLWIDTH NOT SIGN
                                (#xA957 . #xFFE4)	;FULLWIDTH BROKEN BAR
                                (#xA959 . #x2121)	;TELEPHONE SIGN
                                (#xA95A . #x3231)	;PARENTHESIZED IDEOGRAPH STOCK
                                (#xA95C . #x2010)	;HYPHEN
                                (#xA960 . #x30FC)	;KATAKANA-HIRAGANA PROLONGED SOUND MARK
                                (#xA961 . #x309B)	;KATAKANA-HIRAGANA VOICED SOUND MARK
                                (#xA962 . #x309C)	;KATAKANA-HIRAGANA SEMI-VOICED SOUND MARK
                                (#xA963 . #x30FD)	;KATAKANA ITERATION MARK
                                (#xA964 . #x30FE)	;KATAKANA VOICED ITERATION MARK
                                (#xA965 . #x3006)	;IDEOGRAPHIC CLOSING MARK
                                (#xA966 . #x309D)	;HIRAGANA ITERATION MARK
                                (#xA967 . #x309E)	;HIRAGANA VOICED ITERATION MARK
                                (#xA968 . #xFE49)	;DASHED OVERLINE
                                (#xA969 . #xFE4A)	;CENTRELINE OVERLINE
                                (#xA96A . #xFE4B)	;WAVY OVERLINE
                                (#xA96B . #xFE4C)	;DOUBLE WAVY OVERLINE
                                (#xA96C . #xFE4D)	;DASHED LOW LINE
                                (#xA96D . #xFE4E)	;CENTRELINE LOW LINE
                                (#xA96E . #xFE4F)	;WAVY LOW LINE
                                (#xA96F . #xFE50)	;SMALL COMMA
                                (#xA970 . #xFE51)	;SMALL IDEOGRAPHIC COMMA
                                (#xA971 . #xFE52)	;SMALL FULL STOP
                                (#xA972 . #xFE54)	;SMALL SEMICOLON
                                (#xA973 . #xFE55)	;SMALL COLON
                                (#xA974 . #xFE56)	;SMALL QUESTION MARK
                                (#xA975 . #xFE57)	;SMALL EXCLAMATION MARK
                                (#xA976 . #xFE59)	;SMALL LEFT PARENTHESIS
                                (#xA977 . #xFE5A)	;SMALL RIGHT PARENTHESIS
                                (#xA978 . #xFE5B)	;SMALL LEFT CURLY BRACKET
                                (#xA979 . #xFE5C)	;SMALL RIGHT CURLY BRACKET
                                (#xA97A . #xFE5D)	;SMALL LEFT TORTOISE SHELL BRACKET
                                (#xA97B . #xFE5E)	;SMALL RIGHT TORTOISE SHELL BRACKET
                                (#xA97C . #xFE5F)	;SMALL NUMBER SIGN
                                (#xA97D . #xFE60)	;SMALL AMPERSAND
                                (#xA97E . #xFE61)	;SMALL ASTERISK
                                (#xA980 . #xFE62)	;SMALL PLUS SIGN
                                (#xA981 . #xFE63)	;SMALL HYPHEN-MINUS
                                (#xA982 . #xFE64)	;SMALL LESS-THAN SIGN
                                (#xA983 . #xFE65)	;SMALL GREATER-THAN SIGN
                                (#xA984 . #xFE66)	;SMALL EQUALS SIGN
                                (#xA985 . #xFE68)	;SMALL REVERSE SOLIDUS
                                (#xA986 . #xFE69)	;SMALL DOLLAR SIGN
                                (#xA987 . #xFE6A)	;SMALL PERCENT SIGN
                                (#xA988 . #xFE6B)	;SMALL COMMERCIAL AT
                                (#xA996 . #x3007)	;IDEOGRAPHIC NUMBER ZERO
                                (#xA9A4 . #x2500)	;BOX DRAWINGS LIGHT HORIZONTAL
                                (#xA9A5 . #x2501)	;BOX DRAWINGS HEAVY HORIZONTAL
                                (#xA9A6 . #x2502)	;BOX DRAWINGS LIGHT VERTICAL
                                (#xA9A7 . #x2503)	;BOX DRAWINGS HEAVY VERTICAL
                                (#xA9A8 . #x2504)	;BOX DRAWINGS LIGHT TRIPLE DASH HORIZONTAL
                                (#xA9A9 . #x2505)	;BOX DRAWINGS HEAVY TRIPLE DASH HORIZONTAL
                                (#xA9AA . #x2506)	;BOX DRAWINGS LIGHT TRIPLE DASH VERTICAL
                                (#xA9AB . #x2507)	;BOX DRAWINGS HEAVY TRIPLE DASH VERTICAL
                                (#xA9AC . #x2508)	;BOX DRAWINGS LIGHT QUADRUPLE DASH HORIZONTAL
                                (#xA9AD . #x2509)	;BOX DRAWINGS HEAVY QUADRUPLE DASH HORIZONTAL
                                (#xA9AE . #x250A)	;BOX DRAWINGS LIGHT QUADRUPLE DASH VERTICAL
                                (#xA9AF . #x250B)	;BOX DRAWINGS HEAVY QUADRUPLE DASH VERTICAL
                                (#xA9B0 . #x250C)	;BOX DRAWINGS LIGHT DOWN AND RIGHT
                                (#xA9B1 . #x250D)	;BOX DRAWINGS DOWN LIGHT AND RIGHT HEAVY
                                (#xA9B2 . #x250E)	;BOX DRAWINGS DOWN HEAVY AND RIGHT LIGHT
                                (#xA9B3 . #x250F)	;BOX DRAWINGS HEAVY DOWN AND RIGHT
                                (#xA9B4 . #x2510)	;BOX DRAWINGS LIGHT DOWN AND LEFT
                                (#xA9B5 . #x2511)	;BOX DRAWINGS DOWN LIGHT AND LEFT HEAVY
                                (#xA9B6 . #x2512)	;BOX DRAWINGS DOWN HEAVY AND LEFT LIGHT
                                (#xA9B7 . #x2513)	;BOX DRAWINGS HEAVY DOWN AND LEFT
                                (#xA9B8 . #x2514)	;BOX DRAWINGS LIGHT UP AND RIGHT
                                (#xA9B9 . #x2515)	;BOX DRAWINGS UP LIGHT AND RIGHT HEAVY
                                (#xA9BA . #x2516)	;BOX DRAWINGS UP HEAVY AND RIGHT LIGHT
                                (#xA9BB . #x2517)	;BOX DRAWINGS HEAVY UP AND RIGHT
                                (#xA9BC . #x2518)	;BOX DRAWINGS LIGHT UP AND LEFT
                                (#xA9BD . #x2519)	;BOX DRAWINGS UP LIGHT AND LEFT HEAVY
                                (#xA9BE . #x251A)	;BOX DRAWINGS UP HEAVY AND LEFT LIGHT
                                (#xA9BF . #x251B)	;BOX DRAWINGS HEAVY UP AND LEFT
                                (#xA9C0 . #x251C)	;BOX DRAWINGS LIGHT VERTICAL AND RIGHT
                                (#xA9C1 . #x251D)	;BOX DRAWINGS VERTICAL LIGHT AND RIGHT HEAVY
                                (#xA9C2 . #x251E)	;BOX DRAWINGS UP HEAVY AND RIGHT DOWN LIGHT
                                (#xA9C3 . #x251F)	;BOX DRAWINGS DOWN HEAVY AND RIGHT UP LIGHT
                                (#xA9C4 . #x2520)	;BOX DRAWINGS VERTICAL HEAVY AND RIGHT LIGHT
                                (#xA9C5 . #x2521)	;BOX DRAWINGS DOWN LIGHT AND RIGHT UP HEAVY
                                (#xA9C6 . #x2522)	;BOX DRAWINGS UP LIGHT AND RIGHT DOWN HEAVY
                                (#xA9C7 . #x2523)	;BOX DRAWINGS HEAVY VERTICAL AND RIGHT
                                (#xA9C8 . #x2524)	;BOX DRAWINGS LIGHT VERTICAL AND LEFT
                                (#xA9C9 . #x2525)	;BOX DRAWINGS VERTICAL LIGHT AND LEFT HEAVY
                                (#xA9CA . #x2526)	;BOX DRAWINGS UP HEAVY AND LEFT DOWN LIGHT
                                (#xA9CB . #x2527)	;BOX DRAWINGS DOWN HEAVY AND LEFT UP LIGHT
                                (#xA9CC . #x2528)	;BOX DRAWINGS VERTICAL HEAVY AND LEFT LIGHT
                                (#xA9CD . #x2529)	;BOX DRAWINGS DOWN LIGHT AND LEFT UP HEAVY
                                (#xA9CE . #x252A)	;BOX DRAWINGS UP LIGHT AND LEFT DOWN HEAVY
                                (#xA9CF . #x252B)	;BOX DRAWINGS HEAVY VERTICAL AND LEFT
                                (#xA9D0 . #x252C)	;BOX DRAWINGS LIGHT DOWN AND HORIZONTAL
                                (#xA9D1 . #x252D)	;BOX DRAWINGS LEFT HEAVY AND RIGHT DOWN LIGHT
                                (#xA9D2 . #x252E)	;BOX DRAWINGS RIGHT HEAVY AND LEFT DOWN LIGHT
                                (#xA9D3 . #x252F)	;BOX DRAWINGS DOWN LIGHT AND HORIZONTAL HEAVY
                                (#xA9D4 . #x2530)	;BOX DRAWINGS DOWN HEAVY AND HORIZONTAL LIGHT
                                (#xA9D5 . #x2531)	;BOX DRAWINGS RIGHT LIGHT AND LEFT DOWN HEAVY
                                (#xA9D6 . #x2532)	;BOX DRAWINGS LEFT LIGHT AND RIGHT DOWN HEAVY
                                (#xA9D7 . #x2533)	;BOX DRAWINGS HEAVY DOWN AND HORIZONTAL
                                (#xA9D8 . #x2534)	;BOX DRAWINGS LIGHT UP AND HORIZONTAL
                                (#xA9D9 . #x2535)	;BOX DRAWINGS LEFT HEAVY AND RIGHT UP LIGHT
                                (#xA9DA . #x2536)	;BOX DRAWINGS RIGHT HEAVY AND LEFT UP LIGHT
                                (#xA9DB . #x2537)	;BOX DRAWINGS UP LIGHT AND HORIZONTAL HEAVY
                                (#xA9DC . #x2538)	;BOX DRAWINGS UP HEAVY AND HORIZONTAL LIGHT
                                (#xA9DD . #x2539)	;BOX DRAWINGS RIGHT LIGHT AND LEFT UP HEAVY
                                (#xA9DE . #x253A)	;BOX DRAWINGS LEFT LIGHT AND RIGHT UP HEAVY
                                (#xA9DF . #x253B)	;BOX DRAWINGS HEAVY UP AND HORIZONTAL
                                (#xA9E0 . #x253C)	;BOX DRAWINGS LIGHT VERTICAL AND HORIZONTAL
                                (#xA9E1 . #x253D)	;BOX DRAWINGS LEFT HEAVY AND RIGHT VERTICAL LIGHT
                                (#xA9E2 . #x253E)	;BOX DRAWINGS RIGHT HEAVY AND LEFT VERTICAL LIGHT
                                (#xA9E3 . #x253F)	;BOX DRAWINGS VERTICAL LIGHT AND HORIZONTAL HEAVY
                                (#xA9E4 . #x2540)	;BOX DRAWINGS UP HEAVY AND DOWN HORIZONTAL LIGHT
                                (#xA9E5 . #x2541)	;BOX DRAWINGS DOWN HEAVY AND UP HORIZONTAL LIGHT
                                (#xA9E6 . #x2542)	;BOX DRAWINGS VERTICAL HEAVY AND HORIZONTAL LIGHT
                                (#xA9E7 . #x2543)	;BOX DRAWINGS LEFT UP HEAVY AND RIGHT DOWN LIGHT
                                (#xA9E8 . #x2544)	;BOX DRAWINGS RIGHT UP HEAVY AND LEFT DOWN LIGHT
                                (#xA9E9 . #x2545)	;BOX DRAWINGS LEFT DOWN HEAVY AND RIGHT UP LIGHT
                                (#xA9EA . #x2546)	;BOX DRAWINGS RIGHT DOWN HEAVY AND LEFT UP LIGHT
                                (#xA9EB . #x2547)	;BOX DRAWINGS DOWN LIGHT AND UP HORIZONTAL HEAVY
                                (#xA9EC . #x2548)	;BOX DRAWINGS UP LIGHT AND DOWN HORIZONTAL HEAVY
                                (#xA9ED . #x2549)	;BOX DRAWINGS RIGHT LIGHT AND LEFT VERTICAL HEAVY
                                (#xA9EE . #x254A)	;BOX DRAWINGS LEFT LIGHT AND RIGHT VERTICAL HEAVY
                                (#xA9EF . #x254B)	;BOX DRAWINGS HEAVY VERTICAL AND HORIZONTAL
                                (#xAA40 . #x72DC)	;CJK UNIFIED IDEOGRAPH
                                (#xAA41 . #x72DD)	;CJK UNIFIED IDEOGRAPH
                                (#xAA42 . #x72DF)	;CJK UNIFIED IDEOGRAPH
                                (#xAA43 . #x72E2)	;CJK UNIFIED IDEOGRAPH
                                (#xAA44 . #x72E3)	;CJK UNIFIED IDEOGRAPH
                                (#xAA45 . #x72E4)	;CJK UNIFIED IDEOGRAPH
                                (#xAA46 . #x72E5)	;CJK UNIFIED IDEOGRAPH
                                (#xAA47 . #x72E6)	;CJK UNIFIED IDEOGRAPH
                                (#xAA48 . #x72E7)	;CJK UNIFIED IDEOGRAPH
                                (#xAA49 . #x72EA)	;CJK UNIFIED IDEOGRAPH
                                (#xAA4A . #x72EB)	;CJK UNIFIED IDEOGRAPH
                                (#xAA4B . #x72F5)	;CJK UNIFIED IDEOGRAPH
                                (#xAA4C . #x72F6)	;CJK UNIFIED IDEOGRAPH
                                (#xAA4D . #x72F9)	;CJK UNIFIED IDEOGRAPH
                                (#xAA4E . #x72FD)	;CJK UNIFIED IDEOGRAPH
                                (#xAA4F . #x72FE)	;CJK UNIFIED IDEOGRAPH
                                (#xAA50 . #x72FF)	;CJK UNIFIED IDEOGRAPH
                                (#xAA51 . #x7300)	;CJK UNIFIED IDEOGRAPH
                                (#xAA52 . #x7302)	;CJK UNIFIED IDEOGRAPH
                                (#xAA53 . #x7304)	;CJK UNIFIED IDEOGRAPH
                                (#xAA54 . #x7305)	;CJK UNIFIED IDEOGRAPH
                                (#xAA55 . #x7306)	;CJK UNIFIED IDEOGRAPH
                                (#xAA56 . #x7307)	;CJK UNIFIED IDEOGRAPH
                                (#xAA57 . #x7308)	;CJK UNIFIED IDEOGRAPH
                                (#xAA58 . #x7309)	;CJK UNIFIED IDEOGRAPH
                                (#xAA59 . #x730B)	;CJK UNIFIED IDEOGRAPH
                                (#xAA5A . #x730C)	;CJK UNIFIED IDEOGRAPH
                                (#xAA5B . #x730D)	;CJK UNIFIED IDEOGRAPH
                                (#xAA5C . #x730F)	;CJK UNIFIED IDEOGRAPH
                                (#xAA5D . #x7310)	;CJK UNIFIED IDEOGRAPH
                                (#xAA5E . #x7311)	;CJK UNIFIED IDEOGRAPH
                                (#xAA5F . #x7312)	;CJK UNIFIED IDEOGRAPH
                                (#xAA60 . #x7314)	;CJK UNIFIED IDEOGRAPH
                                (#xAA61 . #x7318)	;CJK UNIFIED IDEOGRAPH
                                (#xAA62 . #x7319)	;CJK UNIFIED IDEOGRAPH
                                (#xAA63 . #x731A)	;CJK UNIFIED IDEOGRAPH
                                (#xAA64 . #x731F)	;CJK UNIFIED IDEOGRAPH
                                (#xAA65 . #x7320)	;CJK UNIFIED IDEOGRAPH
                                (#xAA66 . #x7323)	;CJK UNIFIED IDEOGRAPH
                                (#xAA67 . #x7324)	;CJK UNIFIED IDEOGRAPH
                                (#xAA68 . #x7326)	;CJK UNIFIED IDEOGRAPH
                                (#xAA69 . #x7327)	;CJK UNIFIED IDEOGRAPH
                                (#xAA6A . #x7328)	;CJK UNIFIED IDEOGRAPH
                                (#xAA6B . #x732D)	;CJK UNIFIED IDEOGRAPH
                                (#xAA6C . #x732F)	;CJK UNIFIED IDEOGRAPH
                                (#xAA6D . #x7330)	;CJK UNIFIED IDEOGRAPH
                                (#xAA6E . #x7332)	;CJK UNIFIED IDEOGRAPH
                                (#xAA6F . #x7333)	;CJK UNIFIED IDEOGRAPH
                                (#xAA70 . #x7335)	;CJK UNIFIED IDEOGRAPH
                                (#xAA71 . #x7336)	;CJK UNIFIED IDEOGRAPH
                                (#xAA72 . #x733A)	;CJK UNIFIED IDEOGRAPH
                                (#xAA73 . #x733B)	;CJK UNIFIED IDEOGRAPH
                                (#xAA74 . #x733C)	;CJK UNIFIED IDEOGRAPH
                                (#xAA75 . #x733D)	;CJK UNIFIED IDEOGRAPH
                                (#xAA76 . #x7340)	;CJK UNIFIED IDEOGRAPH
                                (#xAA77 . #x7341)	;CJK UNIFIED IDEOGRAPH
                                (#xAA78 . #x7342)	;CJK UNIFIED IDEOGRAPH
                                (#xAA79 . #x7343)	;CJK UNIFIED IDEOGRAPH
                                (#xAA7A . #x7344)	;CJK UNIFIED IDEOGRAPH
                                (#xAA7B . #x7345)	;CJK UNIFIED IDEOGRAPH
                                (#xAA7C . #x7346)	;CJK UNIFIED IDEOGRAPH
                                (#xAA7D . #x7347)	;CJK UNIFIED IDEOGRAPH
                                (#xAA7E . #x7348)	;CJK UNIFIED IDEOGRAPH
                                (#xAA80 . #x7349)	;CJK UNIFIED IDEOGRAPH
                                (#xAA81 . #x734A)	;CJK UNIFIED IDEOGRAPH
                                (#xAA82 . #x734B)	;CJK UNIFIED IDEOGRAPH
                                (#xAA83 . #x734C)	;CJK UNIFIED IDEOGRAPH
                                (#xAA84 . #x734E)	;CJK UNIFIED IDEOGRAPH
                                (#xAA85 . #x734F)	;CJK UNIFIED IDEOGRAPH
                                (#xAA86 . #x7351)	;CJK UNIFIED IDEOGRAPH
                                (#xAA87 . #x7353)	;CJK UNIFIED IDEOGRAPH
                                (#xAA88 . #x7354)	;CJK UNIFIED IDEOGRAPH
                                (#xAA89 . #x7355)	;CJK UNIFIED IDEOGRAPH
                                (#xAA8A . #x7356)	;CJK UNIFIED IDEOGRAPH
                                (#xAA8B . #x7358)	;CJK UNIFIED IDEOGRAPH
                                (#xAA8C . #x7359)	;CJK UNIFIED IDEOGRAPH
                                (#xAA8D . #x735A)	;CJK UNIFIED IDEOGRAPH
                                (#xAA8E . #x735B)	;CJK UNIFIED IDEOGRAPH
                                (#xAA8F . #x735C)	;CJK UNIFIED IDEOGRAPH
                                (#xAA90 . #x735D)	;CJK UNIFIED IDEOGRAPH
                                (#xAA91 . #x735E)	;CJK UNIFIED IDEOGRAPH
                                (#xAA92 . #x735F)	;CJK UNIFIED IDEOGRAPH
                                (#xAA93 . #x7361)	;CJK UNIFIED IDEOGRAPH
                                (#xAA94 . #x7362)	;CJK UNIFIED IDEOGRAPH
                                (#xAA95 . #x7363)	;CJK UNIFIED IDEOGRAPH
                                (#xAA96 . #x7364)	;CJK UNIFIED IDEOGRAPH
                                (#xAA97 . #x7365)	;CJK UNIFIED IDEOGRAPH
                                (#xAA98 . #x7366)	;CJK UNIFIED IDEOGRAPH
                                (#xAA99 . #x7367)	;CJK UNIFIED IDEOGRAPH
                                (#xAA9A . #x7368)	;CJK UNIFIED IDEOGRAPH
                                (#xAA9B . #x7369)	;CJK UNIFIED IDEOGRAPH
                                (#xAA9C . #x736A)	;CJK UNIFIED IDEOGRAPH
                                (#xAA9D . #x736B)	;CJK UNIFIED IDEOGRAPH
                                (#xAA9E . #x736E)	;CJK UNIFIED IDEOGRAPH
                                (#xAA9F . #x7370)	;CJK UNIFIED IDEOGRAPH
                                (#xAAA0 . #x7371)	;CJK UNIFIED IDEOGRAPH
                                (#xAB40 . #x7372)	;CJK UNIFIED IDEOGRAPH
                                (#xAB41 . #x7373)	;CJK UNIFIED IDEOGRAPH
                                (#xAB42 . #x7374)	;CJK UNIFIED IDEOGRAPH
                                (#xAB43 . #x7375)	;CJK UNIFIED IDEOGRAPH
                                (#xAB44 . #x7376)	;CJK UNIFIED IDEOGRAPH
                                (#xAB45 . #x7377)	;CJK UNIFIED IDEOGRAPH
                                (#xAB46 . #x7378)	;CJK UNIFIED IDEOGRAPH
                                (#xAB47 . #x7379)	;CJK UNIFIED IDEOGRAPH
                                (#xAB48 . #x737A)	;CJK UNIFIED IDEOGRAPH
                                (#xAB49 . #x737B)	;CJK UNIFIED IDEOGRAPH
                                (#xAB4A . #x737C)	;CJK UNIFIED IDEOGRAPH
                                (#xAB4B . #x737D)	;CJK UNIFIED IDEOGRAPH
                                (#xAB4C . #x737F)	;CJK UNIFIED IDEOGRAPH
                                (#xAB4D . #x7380)	;CJK UNIFIED IDEOGRAPH
                                (#xAB4E . #x7381)	;CJK UNIFIED IDEOGRAPH
                                (#xAB4F . #x7382)	;CJK UNIFIED IDEOGRAPH
                                (#xAB50 . #x7383)	;CJK UNIFIED IDEOGRAPH
                                (#xAB51 . #x7385)	;CJK UNIFIED IDEOGRAPH
                                (#xAB52 . #x7386)	;CJK UNIFIED IDEOGRAPH
                                (#xAB53 . #x7388)	;CJK UNIFIED IDEOGRAPH
                                (#xAB54 . #x738A)	;CJK UNIFIED IDEOGRAPH
                                (#xAB55 . #x738C)	;CJK UNIFIED IDEOGRAPH
                                (#xAB56 . #x738D)	;CJK UNIFIED IDEOGRAPH
                                (#xAB57 . #x738F)	;CJK UNIFIED IDEOGRAPH
                                (#xAB58 . #x7390)	;CJK UNIFIED IDEOGRAPH
                                (#xAB59 . #x7392)	;CJK UNIFIED IDEOGRAPH
                                (#xAB5A . #x7393)	;CJK UNIFIED IDEOGRAPH
                                (#xAB5B . #x7394)	;CJK UNIFIED IDEOGRAPH
                                (#xAB5C . #x7395)	;CJK UNIFIED IDEOGRAPH
                                (#xAB5D . #x7397)	;CJK UNIFIED IDEOGRAPH
                                (#xAB5E . #x7398)	;CJK UNIFIED IDEOGRAPH
                                (#xAB5F . #x7399)	;CJK UNIFIED IDEOGRAPH
                                (#xAB60 . #x739A)	;CJK UNIFIED IDEOGRAPH
                                (#xAB61 . #x739C)	;CJK UNIFIED IDEOGRAPH
                                (#xAB62 . #x739D)	;CJK UNIFIED IDEOGRAPH
                                (#xAB63 . #x739E)	;CJK UNIFIED IDEOGRAPH
                                (#xAB64 . #x73A0)	;CJK UNIFIED IDEOGRAPH
                                (#xAB65 . #x73A1)	;CJK UNIFIED IDEOGRAPH
                                (#xAB66 . #x73A3)	;CJK UNIFIED IDEOGRAPH
                                (#xAB67 . #x73A4)	;CJK UNIFIED IDEOGRAPH
                                (#xAB68 . #x73A5)	;CJK UNIFIED IDEOGRAPH
                                (#xAB69 . #x73A6)	;CJK UNIFIED IDEOGRAPH
                                (#xAB6A . #x73A7)	;CJK UNIFIED IDEOGRAPH
                                (#xAB6B . #x73A8)	;CJK UNIFIED IDEOGRAPH
                                (#xAB6C . #x73AA)	;CJK UNIFIED IDEOGRAPH
                                (#xAB6D . #x73AC)	;CJK UNIFIED IDEOGRAPH
                                (#xAB6E . #x73AD)	;CJK UNIFIED IDEOGRAPH
                                (#xAB6F . #x73B1)	;CJK UNIFIED IDEOGRAPH
                                (#xAB70 . #x73B4)	;CJK UNIFIED IDEOGRAPH
                                (#xAB71 . #x73B5)	;CJK UNIFIED IDEOGRAPH
                                (#xAB72 . #x73B6)	;CJK UNIFIED IDEOGRAPH
                                (#xAB73 . #x73B8)	;CJK UNIFIED IDEOGRAPH
                                (#xAB74 . #x73B9)	;CJK UNIFIED IDEOGRAPH
                                (#xAB75 . #x73BC)	;CJK UNIFIED IDEOGRAPH
                                (#xAB76 . #x73BD)	;CJK UNIFIED IDEOGRAPH
                                (#xAB77 . #x73BE)	;CJK UNIFIED IDEOGRAPH
                                (#xAB78 . #x73BF)	;CJK UNIFIED IDEOGRAPH
                                (#xAB79 . #x73C1)	;CJK UNIFIED IDEOGRAPH
                                (#xAB7A . #x73C3)	;CJK UNIFIED IDEOGRAPH
                                (#xAB7B . #x73C4)	;CJK UNIFIED IDEOGRAPH
                                (#xAB7C . #x73C5)	;CJK UNIFIED IDEOGRAPH
                                (#xAB7D . #x73C6)	;CJK UNIFIED IDEOGRAPH
                                (#xAB7E . #x73C7)	;CJK UNIFIED IDEOGRAPH
                                (#xAB80 . #x73CB)	;CJK UNIFIED IDEOGRAPH
                                (#xAB81 . #x73CC)	;CJK UNIFIED IDEOGRAPH
                                (#xAB82 . #x73CE)	;CJK UNIFIED IDEOGRAPH
                                (#xAB83 . #x73D2)	;CJK UNIFIED IDEOGRAPH
                                (#xAB84 . #x73D3)	;CJK UNIFIED IDEOGRAPH
                                (#xAB85 . #x73D4)	;CJK UNIFIED IDEOGRAPH
                                (#xAB86 . #x73D5)	;CJK UNIFIED IDEOGRAPH
                                (#xAB87 . #x73D6)	;CJK UNIFIED IDEOGRAPH
                                (#xAB88 . #x73D7)	;CJK UNIFIED IDEOGRAPH
                                (#xAB89 . #x73D8)	;CJK UNIFIED IDEOGRAPH
                                (#xAB8A . #x73DA)	;CJK UNIFIED IDEOGRAPH
                                (#xAB8B . #x73DB)	;CJK UNIFIED IDEOGRAPH
                                (#xAB8C . #x73DC)	;CJK UNIFIED IDEOGRAPH
                                (#xAB8D . #x73DD)	;CJK UNIFIED IDEOGRAPH
                                (#xAB8E . #x73DF)	;CJK UNIFIED IDEOGRAPH
                                (#xAB8F . #x73E1)	;CJK UNIFIED IDEOGRAPH
                                (#xAB90 . #x73E2)	;CJK UNIFIED IDEOGRAPH
                                (#xAB91 . #x73E3)	;CJK UNIFIED IDEOGRAPH
                                (#xAB92 . #x73E4)	;CJK UNIFIED IDEOGRAPH
                                (#xAB93 . #x73E6)	;CJK UNIFIED IDEOGRAPH
                                (#xAB94 . #x73E8)	;CJK UNIFIED IDEOGRAPH
                                (#xAB95 . #x73EA)	;CJK UNIFIED IDEOGRAPH
                                (#xAB96 . #x73EB)	;CJK UNIFIED IDEOGRAPH
                                (#xAB97 . #x73EC)	;CJK UNIFIED IDEOGRAPH
                                (#xAB98 . #x73EE)	;CJK UNIFIED IDEOGRAPH
                                (#xAB99 . #x73EF)	;CJK UNIFIED IDEOGRAPH
                                (#xAB9A . #x73F0)	;CJK UNIFIED IDEOGRAPH
                                (#xAB9B . #x73F1)	;CJK UNIFIED IDEOGRAPH
                                (#xAB9C . #x73F3)	;CJK UNIFIED IDEOGRAPH
                                (#xAB9D . #x73F4)	;CJK UNIFIED IDEOGRAPH
                                (#xAB9E . #x73F5)	;CJK UNIFIED IDEOGRAPH
                                (#xAB9F . #x73F6)	;CJK UNIFIED IDEOGRAPH
                                (#xABA0 . #x73F7)	;CJK UNIFIED IDEOGRAPH
                                (#xAC40 . #x73F8)	;CJK UNIFIED IDEOGRAPH
                                (#xAC41 . #x73F9)	;CJK UNIFIED IDEOGRAPH
                                (#xAC42 . #x73FA)	;CJK UNIFIED IDEOGRAPH
                                (#xAC43 . #x73FB)	;CJK UNIFIED IDEOGRAPH
                                (#xAC44 . #x73FC)	;CJK UNIFIED IDEOGRAPH
                                (#xAC45 . #x73FD)	;CJK UNIFIED IDEOGRAPH
                                (#xAC46 . #x73FE)	;CJK UNIFIED IDEOGRAPH
                                (#xAC47 . #x73FF)	;CJK UNIFIED IDEOGRAPH
                                (#xAC48 . #x7400)	;CJK UNIFIED IDEOGRAPH
                                (#xAC49 . #x7401)	;CJK UNIFIED IDEOGRAPH
                                (#xAC4A . #x7402)	;CJK UNIFIED IDEOGRAPH
                                (#xAC4B . #x7404)	;CJK UNIFIED IDEOGRAPH
                                (#xAC4C . #x7407)	;CJK UNIFIED IDEOGRAPH
                                (#xAC4D . #x7408)	;CJK UNIFIED IDEOGRAPH
                                (#xAC4E . #x740B)	;CJK UNIFIED IDEOGRAPH
                                (#xAC4F . #x740C)	;CJK UNIFIED IDEOGRAPH
                                (#xAC50 . #x740D)	;CJK UNIFIED IDEOGRAPH
                                (#xAC51 . #x740E)	;CJK UNIFIED IDEOGRAPH
                                (#xAC52 . #x7411)	;CJK UNIFIED IDEOGRAPH
                                (#xAC53 . #x7412)	;CJK UNIFIED IDEOGRAPH
                                (#xAC54 . #x7413)	;CJK UNIFIED IDEOGRAPH
                                (#xAC55 . #x7414)	;CJK UNIFIED IDEOGRAPH
                                (#xAC56 . #x7415)	;CJK UNIFIED IDEOGRAPH
                                (#xAC57 . #x7416)	;CJK UNIFIED IDEOGRAPH
                                (#xAC58 . #x7417)	;CJK UNIFIED IDEOGRAPH
                                (#xAC59 . #x7418)	;CJK UNIFIED IDEOGRAPH
                                (#xAC5A . #x7419)	;CJK UNIFIED IDEOGRAPH
                                (#xAC5B . #x741C)	;CJK UNIFIED IDEOGRAPH
                                (#xAC5C . #x741D)	;CJK UNIFIED IDEOGRAPH
                                (#xAC5D . #x741E)	;CJK UNIFIED IDEOGRAPH
                                (#xAC5E . #x741F)	;CJK UNIFIED IDEOGRAPH
                                (#xAC5F . #x7420)	;CJK UNIFIED IDEOGRAPH
                                (#xAC60 . #x7421)	;CJK UNIFIED IDEOGRAPH
                                (#xAC61 . #x7423)	;CJK UNIFIED IDEOGRAPH
                                (#xAC62 . #x7424)	;CJK UNIFIED IDEOGRAPH
                                (#xAC63 . #x7427)	;CJK UNIFIED IDEOGRAPH
                                (#xAC64 . #x7429)	;CJK UNIFIED IDEOGRAPH
                                (#xAC65 . #x742B)	;CJK UNIFIED IDEOGRAPH
                                (#xAC66 . #x742D)	;CJK UNIFIED IDEOGRAPH
                                (#xAC67 . #x742F)	;CJK UNIFIED IDEOGRAPH
                                (#xAC68 . #x7431)	;CJK UNIFIED IDEOGRAPH
                                (#xAC69 . #x7432)	;CJK UNIFIED IDEOGRAPH
                                (#xAC6A . #x7437)	;CJK UNIFIED IDEOGRAPH
                                (#xAC6B . #x7438)	;CJK UNIFIED IDEOGRAPH
                                (#xAC6C . #x7439)	;CJK UNIFIED IDEOGRAPH
                                (#xAC6D . #x743A)	;CJK UNIFIED IDEOGRAPH
                                (#xAC6E . #x743B)	;CJK UNIFIED IDEOGRAPH
                                (#xAC6F . #x743D)	;CJK UNIFIED IDEOGRAPH
                                (#xAC70 . #x743E)	;CJK UNIFIED IDEOGRAPH
                                (#xAC71 . #x743F)	;CJK UNIFIED IDEOGRAPH
                                (#xAC72 . #x7440)	;CJK UNIFIED IDEOGRAPH
                                (#xAC73 . #x7442)	;CJK UNIFIED IDEOGRAPH
                                (#xAC74 . #x7443)	;CJK UNIFIED IDEOGRAPH
                                (#xAC75 . #x7444)	;CJK UNIFIED IDEOGRAPH
                                (#xAC76 . #x7445)	;CJK UNIFIED IDEOGRAPH
                                (#xAC77 . #x7446)	;CJK UNIFIED IDEOGRAPH
                                (#xAC78 . #x7447)	;CJK UNIFIED IDEOGRAPH
                                (#xAC79 . #x7448)	;CJK UNIFIED IDEOGRAPH
                                (#xAC7A . #x7449)	;CJK UNIFIED IDEOGRAPH
                                (#xAC7B . #x744A)	;CJK UNIFIED IDEOGRAPH
                                (#xAC7C . #x744B)	;CJK UNIFIED IDEOGRAPH
                                (#xAC7D . #x744C)	;CJK UNIFIED IDEOGRAPH
                                (#xAC7E . #x744D)	;CJK UNIFIED IDEOGRAPH
                                (#xAC80 . #x744E)	;CJK UNIFIED IDEOGRAPH
                                (#xAC81 . #x744F)	;CJK UNIFIED IDEOGRAPH
                                (#xAC82 . #x7450)	;CJK UNIFIED IDEOGRAPH
                                (#xAC83 . #x7451)	;CJK UNIFIED IDEOGRAPH
                                (#xAC84 . #x7452)	;CJK UNIFIED IDEOGRAPH
                                (#xAC85 . #x7453)	;CJK UNIFIED IDEOGRAPH
                                (#xAC86 . #x7454)	;CJK UNIFIED IDEOGRAPH
                                (#xAC87 . #x7456)	;CJK UNIFIED IDEOGRAPH
                                (#xAC88 . #x7458)	;CJK UNIFIED IDEOGRAPH
                                (#xAC89 . #x745D)	;CJK UNIFIED IDEOGRAPH
                                (#xAC8A . #x7460)	;CJK UNIFIED IDEOGRAPH
                                (#xAC8B . #x7461)	;CJK UNIFIED IDEOGRAPH
                                (#xAC8C . #x7462)	;CJK UNIFIED IDEOGRAPH
                                (#xAC8D . #x7463)	;CJK UNIFIED IDEOGRAPH
                                (#xAC8E . #x7464)	;CJK UNIFIED IDEOGRAPH
                                (#xAC8F . #x7465)	;CJK UNIFIED IDEOGRAPH
                                (#xAC90 . #x7466)	;CJK UNIFIED IDEOGRAPH
                                (#xAC91 . #x7467)	;CJK UNIFIED IDEOGRAPH
                                (#xAC92 . #x7468)	;CJK UNIFIED IDEOGRAPH
                                (#xAC93 . #x7469)	;CJK UNIFIED IDEOGRAPH
                                (#xAC94 . #x746A)	;CJK UNIFIED IDEOGRAPH
                                (#xAC95 . #x746B)	;CJK UNIFIED IDEOGRAPH
                                (#xAC96 . #x746C)	;CJK UNIFIED IDEOGRAPH
                                (#xAC97 . #x746E)	;CJK UNIFIED IDEOGRAPH
                                (#xAC98 . #x746F)	;CJK UNIFIED IDEOGRAPH
                                (#xAC99 . #x7471)	;CJK UNIFIED IDEOGRAPH
                                (#xAC9A . #x7472)	;CJK UNIFIED IDEOGRAPH
                                (#xAC9B . #x7473)	;CJK UNIFIED IDEOGRAPH
                                (#xAC9C . #x7474)	;CJK UNIFIED IDEOGRAPH
                                (#xAC9D . #x7475)	;CJK UNIFIED IDEOGRAPH
                                (#xAC9E . #x7478)	;CJK UNIFIED IDEOGRAPH
                                (#xAC9F . #x7479)	;CJK UNIFIED IDEOGRAPH
                                (#xACA0 . #x747A)	;CJK UNIFIED IDEOGRAPH
                                (#xAD40 . #x747B)	;CJK UNIFIED IDEOGRAPH
                                (#xAD41 . #x747C)	;CJK UNIFIED IDEOGRAPH
                                (#xAD42 . #x747D)	;CJK UNIFIED IDEOGRAPH
                                (#xAD43 . #x747F)	;CJK UNIFIED IDEOGRAPH
                                (#xAD44 . #x7482)	;CJK UNIFIED IDEOGRAPH
                                (#xAD45 . #x7484)	;CJK UNIFIED IDEOGRAPH
                                (#xAD46 . #x7485)	;CJK UNIFIED IDEOGRAPH
                                (#xAD47 . #x7486)	;CJK UNIFIED IDEOGRAPH
                                (#xAD48 . #x7488)	;CJK UNIFIED IDEOGRAPH
                                (#xAD49 . #x7489)	;CJK UNIFIED IDEOGRAPH
                                (#xAD4A . #x748A)	;CJK UNIFIED IDEOGRAPH
                                (#xAD4B . #x748C)	;CJK UNIFIED IDEOGRAPH
                                (#xAD4C . #x748D)	;CJK UNIFIED IDEOGRAPH
                                (#xAD4D . #x748F)	;CJK UNIFIED IDEOGRAPH
                                (#xAD4E . #x7491)	;CJK UNIFIED IDEOGRAPH
                                (#xAD4F . #x7492)	;CJK UNIFIED IDEOGRAPH
                                (#xAD50 . #x7493)	;CJK UNIFIED IDEOGRAPH
                                (#xAD51 . #x7494)	;CJK UNIFIED IDEOGRAPH
                                (#xAD52 . #x7495)	;CJK UNIFIED IDEOGRAPH
                                (#xAD53 . #x7496)	;CJK UNIFIED IDEOGRAPH
                                (#xAD54 . #x7497)	;CJK UNIFIED IDEOGRAPH
                                (#xAD55 . #x7498)	;CJK UNIFIED IDEOGRAPH
                                (#xAD56 . #x7499)	;CJK UNIFIED IDEOGRAPH
                                (#xAD57 . #x749A)	;CJK UNIFIED IDEOGRAPH
                                (#xAD58 . #x749B)	;CJK UNIFIED IDEOGRAPH
                                (#xAD59 . #x749D)	;CJK UNIFIED IDEOGRAPH
                                (#xAD5A . #x749F)	;CJK UNIFIED IDEOGRAPH
                                (#xAD5B . #x74A0)	;CJK UNIFIED IDEOGRAPH
                                (#xAD5C . #x74A1)	;CJK UNIFIED IDEOGRAPH
                                (#xAD5D . #x74A2)	;CJK UNIFIED IDEOGRAPH
                                (#xAD5E . #x74A3)	;CJK UNIFIED IDEOGRAPH
                                (#xAD5F . #x74A4)	;CJK UNIFIED IDEOGRAPH
                                (#xAD60 . #x74A5)	;CJK UNIFIED IDEOGRAPH
                                (#xAD61 . #x74A6)	;CJK UNIFIED IDEOGRAPH
                                (#xAD62 . #x74AA)	;CJK UNIFIED IDEOGRAPH
                                (#xAD63 . #x74AB)	;CJK UNIFIED IDEOGRAPH
                                (#xAD64 . #x74AC)	;CJK UNIFIED IDEOGRAPH
                                (#xAD65 . #x74AD)	;CJK UNIFIED IDEOGRAPH
                                (#xAD66 . #x74AE)	;CJK UNIFIED IDEOGRAPH
                                (#xAD67 . #x74AF)	;CJK UNIFIED IDEOGRAPH
                                (#xAD68 . #x74B0)	;CJK UNIFIED IDEOGRAPH
                                (#xAD69 . #x74B1)	;CJK UNIFIED IDEOGRAPH
                                (#xAD6A . #x74B2)	;CJK UNIFIED IDEOGRAPH
                                (#xAD6B . #x74B3)	;CJK UNIFIED IDEOGRAPH
                                (#xAD6C . #x74B4)	;CJK UNIFIED IDEOGRAPH
                                (#xAD6D . #x74B5)	;CJK UNIFIED IDEOGRAPH
                                (#xAD6E . #x74B6)	;CJK UNIFIED IDEOGRAPH
                                (#xAD6F . #x74B7)	;CJK UNIFIED IDEOGRAPH
                                (#xAD70 . #x74B8)	;CJK UNIFIED IDEOGRAPH
                                (#xAD71 . #x74B9)	;CJK UNIFIED IDEOGRAPH
                                (#xAD72 . #x74BB)	;CJK UNIFIED IDEOGRAPH
                                (#xAD73 . #x74BC)	;CJK UNIFIED IDEOGRAPH
                                (#xAD74 . #x74BD)	;CJK UNIFIED IDEOGRAPH
                                (#xAD75 . #x74BE)	;CJK UNIFIED IDEOGRAPH
                                (#xAD76 . #x74BF)	;CJK UNIFIED IDEOGRAPH
                                (#xAD77 . #x74C0)	;CJK UNIFIED IDEOGRAPH
                                (#xAD78 . #x74C1)	;CJK UNIFIED IDEOGRAPH
                                (#xAD79 . #x74C2)	;CJK UNIFIED IDEOGRAPH
                                (#xAD7A . #x74C3)	;CJK UNIFIED IDEOGRAPH
                                (#xAD7B . #x74C4)	;CJK UNIFIED IDEOGRAPH
                                (#xAD7C . #x74C5)	;CJK UNIFIED IDEOGRAPH
                                (#xAD7D . #x74C6)	;CJK UNIFIED IDEOGRAPH
                                (#xAD7E . #x74C7)	;CJK UNIFIED IDEOGRAPH
                                (#xAD80 . #x74C8)	;CJK UNIFIED IDEOGRAPH
                                (#xAD81 . #x74C9)	;CJK UNIFIED IDEOGRAPH
                                (#xAD82 . #x74CA)	;CJK UNIFIED IDEOGRAPH
                                (#xAD83 . #x74CB)	;CJK UNIFIED IDEOGRAPH
                                (#xAD84 . #x74CC)	;CJK UNIFIED IDEOGRAPH
                                (#xAD85 . #x74CD)	;CJK UNIFIED IDEOGRAPH
                                (#xAD86 . #x74CE)	;CJK UNIFIED IDEOGRAPH
                                (#xAD87 . #x74CF)	;CJK UNIFIED IDEOGRAPH
                                (#xAD88 . #x74D0)	;CJK UNIFIED IDEOGRAPH
                                (#xAD89 . #x74D1)	;CJK UNIFIED IDEOGRAPH
                                (#xAD8A . #x74D3)	;CJK UNIFIED IDEOGRAPH
                                (#xAD8B . #x74D4)	;CJK UNIFIED IDEOGRAPH
                                (#xAD8C . #x74D5)	;CJK UNIFIED IDEOGRAPH
                                (#xAD8D . #x74D6)	;CJK UNIFIED IDEOGRAPH
                                (#xAD8E . #x74D7)	;CJK UNIFIED IDEOGRAPH
                                (#xAD8F . #x74D8)	;CJK UNIFIED IDEOGRAPH
                                (#xAD90 . #x74D9)	;CJK UNIFIED IDEOGRAPH
                                (#xAD91 . #x74DA)	;CJK UNIFIED IDEOGRAPH
                                (#xAD92 . #x74DB)	;CJK UNIFIED IDEOGRAPH
                                (#xAD93 . #x74DD)	;CJK UNIFIED IDEOGRAPH
                                (#xAD94 . #x74DF)	;CJK UNIFIED IDEOGRAPH
                                (#xAD95 . #x74E1)	;CJK UNIFIED IDEOGRAPH
                                (#xAD96 . #x74E5)	;CJK UNIFIED IDEOGRAPH
                                (#xAD97 . #x74E7)	;CJK UNIFIED IDEOGRAPH
                                (#xAD98 . #x74E8)	;CJK UNIFIED IDEOGRAPH
                                (#xAD99 . #x74E9)	;CJK UNIFIED IDEOGRAPH
                                (#xAD9A . #x74EA)	;CJK UNIFIED IDEOGRAPH
                                (#xAD9B . #x74EB)	;CJK UNIFIED IDEOGRAPH
                                (#xAD9C . #x74EC)	;CJK UNIFIED IDEOGRAPH
                                (#xAD9D . #x74ED)	;CJK UNIFIED IDEOGRAPH
                                (#xAD9E . #x74F0)	;CJK UNIFIED IDEOGRAPH
                                (#xAD9F . #x74F1)	;CJK UNIFIED IDEOGRAPH
                                (#xADA0 . #x74F2)	;CJK UNIFIED IDEOGRAPH
                                (#xAE40 . #x74F3)	;CJK UNIFIED IDEOGRAPH
                                (#xAE41 . #x74F5)	;CJK UNIFIED IDEOGRAPH
                                (#xAE42 . #x74F8)	;CJK UNIFIED IDEOGRAPH
                                (#xAE43 . #x74F9)	;CJK UNIFIED IDEOGRAPH
                                (#xAE44 . #x74FA)	;CJK UNIFIED IDEOGRAPH
                                (#xAE45 . #x74FB)	;CJK UNIFIED IDEOGRAPH
                                (#xAE46 . #x74FC)	;CJK UNIFIED IDEOGRAPH
                                (#xAE47 . #x74FD)	;CJK UNIFIED IDEOGRAPH
                                (#xAE48 . #x74FE)	;CJK UNIFIED IDEOGRAPH
                                (#xAE49 . #x7500)	;CJK UNIFIED IDEOGRAPH
                                (#xAE4A . #x7501)	;CJK UNIFIED IDEOGRAPH
                                (#xAE4B . #x7502)	;CJK UNIFIED IDEOGRAPH
                                (#xAE4C . #x7503)	;CJK UNIFIED IDEOGRAPH
                                (#xAE4D . #x7505)	;CJK UNIFIED IDEOGRAPH
                                (#xAE4E . #x7506)	;CJK UNIFIED IDEOGRAPH
                                (#xAE4F . #x7507)	;CJK UNIFIED IDEOGRAPH
                                (#xAE50 . #x7508)	;CJK UNIFIED IDEOGRAPH
                                (#xAE51 . #x7509)	;CJK UNIFIED IDEOGRAPH
                                (#xAE52 . #x750A)	;CJK UNIFIED IDEOGRAPH
                                (#xAE53 . #x750B)	;CJK UNIFIED IDEOGRAPH
                                (#xAE54 . #x750C)	;CJK UNIFIED IDEOGRAPH
                                (#xAE55 . #x750E)	;CJK UNIFIED IDEOGRAPH
                                (#xAE56 . #x7510)	;CJK UNIFIED IDEOGRAPH
                                (#xAE57 . #x7512)	;CJK UNIFIED IDEOGRAPH
                                (#xAE58 . #x7514)	;CJK UNIFIED IDEOGRAPH
                                (#xAE59 . #x7515)	;CJK UNIFIED IDEOGRAPH
                                (#xAE5A . #x7516)	;CJK UNIFIED IDEOGRAPH
                                (#xAE5B . #x7517)	;CJK UNIFIED IDEOGRAPH
                                (#xAE5C . #x751B)	;CJK UNIFIED IDEOGRAPH
                                (#xAE5D . #x751D)	;CJK UNIFIED IDEOGRAPH
                                (#xAE5E . #x751E)	;CJK UNIFIED IDEOGRAPH
                                (#xAE5F . #x7520)	;CJK UNIFIED IDEOGRAPH
                                (#xAE60 . #x7521)	;CJK UNIFIED IDEOGRAPH
                                (#xAE61 . #x7522)	;CJK UNIFIED IDEOGRAPH
                                (#xAE62 . #x7523)	;CJK UNIFIED IDEOGRAPH
                                (#xAE63 . #x7524)	;CJK UNIFIED IDEOGRAPH
                                (#xAE64 . #x7526)	;CJK UNIFIED IDEOGRAPH
                                (#xAE65 . #x7527)	;CJK UNIFIED IDEOGRAPH
                                (#xAE66 . #x752A)	;CJK UNIFIED IDEOGRAPH
                                (#xAE67 . #x752E)	;CJK UNIFIED IDEOGRAPH
                                (#xAE68 . #x7534)	;CJK UNIFIED IDEOGRAPH
                                (#xAE69 . #x7536)	;CJK UNIFIED IDEOGRAPH
                                (#xAE6A . #x7539)	;CJK UNIFIED IDEOGRAPH
                                (#xAE6B . #x753C)	;CJK UNIFIED IDEOGRAPH
                                (#xAE6C . #x753D)	;CJK UNIFIED IDEOGRAPH
                                (#xAE6D . #x753F)	;CJK UNIFIED IDEOGRAPH
                                (#xAE6E . #x7541)	;CJK UNIFIED IDEOGRAPH
                                (#xAE6F . #x7542)	;CJK UNIFIED IDEOGRAPH
                                (#xAE70 . #x7543)	;CJK UNIFIED IDEOGRAPH
                                (#xAE71 . #x7544)	;CJK UNIFIED IDEOGRAPH
                                (#xAE72 . #x7546)	;CJK UNIFIED IDEOGRAPH
                                (#xAE73 . #x7547)	;CJK UNIFIED IDEOGRAPH
                                (#xAE74 . #x7549)	;CJK UNIFIED IDEOGRAPH
                                (#xAE75 . #x754A)	;CJK UNIFIED IDEOGRAPH
                                (#xAE76 . #x754D)	;CJK UNIFIED IDEOGRAPH
                                (#xAE77 . #x7550)	;CJK UNIFIED IDEOGRAPH
                                (#xAE78 . #x7551)	;CJK UNIFIED IDEOGRAPH
                                (#xAE79 . #x7552)	;CJK UNIFIED IDEOGRAPH
                                (#xAE7A . #x7553)	;CJK UNIFIED IDEOGRAPH
                                (#xAE7B . #x7555)	;CJK UNIFIED IDEOGRAPH
                                (#xAE7C . #x7556)	;CJK UNIFIED IDEOGRAPH
                                (#xAE7D . #x7557)	;CJK UNIFIED IDEOGRAPH
                                (#xAE7E . #x7558)	;CJK UNIFIED IDEOGRAPH
                                (#xAE80 . #x755D)	;CJK UNIFIED IDEOGRAPH
                                (#xAE81 . #x755E)	;CJK UNIFIED IDEOGRAPH
                                (#xAE82 . #x755F)	;CJK UNIFIED IDEOGRAPH
                                (#xAE83 . #x7560)	;CJK UNIFIED IDEOGRAPH
                                (#xAE84 . #x7561)	;CJK UNIFIED IDEOGRAPH
                                (#xAE85 . #x7562)	;CJK UNIFIED IDEOGRAPH
                                (#xAE86 . #x7563)	;CJK UNIFIED IDEOGRAPH
                                (#xAE87 . #x7564)	;CJK UNIFIED IDEOGRAPH
                                (#xAE88 . #x7567)	;CJK UNIFIED IDEOGRAPH
                                (#xAE89 . #x7568)	;CJK UNIFIED IDEOGRAPH
                                (#xAE8A . #x7569)	;CJK UNIFIED IDEOGRAPH
                                (#xAE8B . #x756B)	;CJK UNIFIED IDEOGRAPH
                                (#xAE8C . #x756C)	;CJK UNIFIED IDEOGRAPH
                                (#xAE8D . #x756D)	;CJK UNIFIED IDEOGRAPH
                                (#xAE8E . #x756E)	;CJK UNIFIED IDEOGRAPH
                                (#xAE8F . #x756F)	;CJK UNIFIED IDEOGRAPH
                                (#xAE90 . #x7570)	;CJK UNIFIED IDEOGRAPH
                                (#xAE91 . #x7571)	;CJK UNIFIED IDEOGRAPH
                                (#xAE92 . #x7573)	;CJK UNIFIED IDEOGRAPH
                                (#xAE93 . #x7575)	;CJK UNIFIED IDEOGRAPH
                                (#xAE94 . #x7576)	;CJK UNIFIED IDEOGRAPH
                                (#xAE95 . #x7577)	;CJK UNIFIED IDEOGRAPH
                                (#xAE96 . #x757A)	;CJK UNIFIED IDEOGRAPH
                                (#xAE97 . #x757B)	;CJK UNIFIED IDEOGRAPH
                                (#xAE98 . #x757C)	;CJK UNIFIED IDEOGRAPH
                                (#xAE99 . #x757D)	;CJK UNIFIED IDEOGRAPH
                                (#xAE9A . #x757E)	;CJK UNIFIED IDEOGRAPH
                                (#xAE9B . #x7580)	;CJK UNIFIED IDEOGRAPH
                                (#xAE9C . #x7581)	;CJK UNIFIED IDEOGRAPH
                                (#xAE9D . #x7582)	;CJK UNIFIED IDEOGRAPH
                                (#xAE9E . #x7584)	;CJK UNIFIED IDEOGRAPH
                                (#xAE9F . #x7585)	;CJK UNIFIED IDEOGRAPH
                                (#xAEA0 . #x7587)	;CJK UNIFIED IDEOGRAPH
                                (#xAF40 . #x7588)	;CJK UNIFIED IDEOGRAPH
                                (#xAF41 . #x7589)	;CJK UNIFIED IDEOGRAPH
                                (#xAF42 . #x758A)	;CJK UNIFIED IDEOGRAPH
                                (#xAF43 . #x758C)	;CJK UNIFIED IDEOGRAPH
                                (#xAF44 . #x758D)	;CJK UNIFIED IDEOGRAPH
                                (#xAF45 . #x758E)	;CJK UNIFIED IDEOGRAPH
                                (#xAF46 . #x7590)	;CJK UNIFIED IDEOGRAPH
                                (#xAF47 . #x7593)	;CJK UNIFIED IDEOGRAPH
                                (#xAF48 . #x7595)	;CJK UNIFIED IDEOGRAPH
                                (#xAF49 . #x7598)	;CJK UNIFIED IDEOGRAPH
                                (#xAF4A . #x759B)	;CJK UNIFIED IDEOGRAPH
                                (#xAF4B . #x759C)	;CJK UNIFIED IDEOGRAPH
                                (#xAF4C . #x759E)	;CJK UNIFIED IDEOGRAPH
                                (#xAF4D . #x75A2)	;CJK UNIFIED IDEOGRAPH
                                (#xAF4E . #x75A6)	;CJK UNIFIED IDEOGRAPH
                                (#xAF4F . #x75A7)	;CJK UNIFIED IDEOGRAPH
                                (#xAF50 . #x75A8)	;CJK UNIFIED IDEOGRAPH
                                (#xAF51 . #x75A9)	;CJK UNIFIED IDEOGRAPH
                                (#xAF52 . #x75AA)	;CJK UNIFIED IDEOGRAPH
                                (#xAF53 . #x75AD)	;CJK UNIFIED IDEOGRAPH
                                (#xAF54 . #x75B6)	;CJK UNIFIED IDEOGRAPH
                                (#xAF55 . #x75B7)	;CJK UNIFIED IDEOGRAPH
                                (#xAF56 . #x75BA)	;CJK UNIFIED IDEOGRAPH
                                (#xAF57 . #x75BB)	;CJK UNIFIED IDEOGRAPH
                                (#xAF58 . #x75BF)	;CJK UNIFIED IDEOGRAPH
                                (#xAF59 . #x75C0)	;CJK UNIFIED IDEOGRAPH
                                (#xAF5A . #x75C1)	;CJK UNIFIED IDEOGRAPH
                                (#xAF5B . #x75C6)	;CJK UNIFIED IDEOGRAPH
                                (#xAF5C . #x75CB)	;CJK UNIFIED IDEOGRAPH
                                (#xAF5D . #x75CC)	;CJK UNIFIED IDEOGRAPH
                                (#xAF5E . #x75CE)	;CJK UNIFIED IDEOGRAPH
                                (#xAF5F . #x75CF)	;CJK UNIFIED IDEOGRAPH
                                (#xAF60 . #x75D0)	;CJK UNIFIED IDEOGRAPH
                                (#xAF61 . #x75D1)	;CJK UNIFIED IDEOGRAPH
                                (#xAF62 . #x75D3)	;CJK UNIFIED IDEOGRAPH
                                (#xAF63 . #x75D7)	;CJK UNIFIED IDEOGRAPH
                                (#xAF64 . #x75D9)	;CJK UNIFIED IDEOGRAPH
                                (#xAF65 . #x75DA)	;CJK UNIFIED IDEOGRAPH
                                (#xAF66 . #x75DC)	;CJK UNIFIED IDEOGRAPH
                                (#xAF67 . #x75DD)	;CJK UNIFIED IDEOGRAPH
                                (#xAF68 . #x75DF)	;CJK UNIFIED IDEOGRAPH
                                (#xAF69 . #x75E0)	;CJK UNIFIED IDEOGRAPH
                                (#xAF6A . #x75E1)	;CJK UNIFIED IDEOGRAPH
                                (#xAF6B . #x75E5)	;CJK UNIFIED IDEOGRAPH
                                (#xAF6C . #x75E9)	;CJK UNIFIED IDEOGRAPH
                                (#xAF6D . #x75EC)	;CJK UNIFIED IDEOGRAPH
                                (#xAF6E . #x75ED)	;CJK UNIFIED IDEOGRAPH
                                (#xAF6F . #x75EE)	;CJK UNIFIED IDEOGRAPH
                                (#xAF70 . #x75EF)	;CJK UNIFIED IDEOGRAPH
                                (#xAF71 . #x75F2)	;CJK UNIFIED IDEOGRAPH
                                (#xAF72 . #x75F3)	;CJK UNIFIED IDEOGRAPH
                                (#xAF73 . #x75F5)	;CJK UNIFIED IDEOGRAPH
                                (#xAF74 . #x75F6)	;CJK UNIFIED IDEOGRAPH
                                (#xAF75 . #x75F7)	;CJK UNIFIED IDEOGRAPH
                                (#xAF76 . #x75F8)	;CJK UNIFIED IDEOGRAPH
                                (#xAF77 . #x75FA)	;CJK UNIFIED IDEOGRAPH
                                (#xAF78 . #x75FB)	;CJK UNIFIED IDEOGRAPH
                                (#xAF79 . #x75FD)	;CJK UNIFIED IDEOGRAPH
                                (#xAF7A . #x75FE)	;CJK UNIFIED IDEOGRAPH
                                (#xAF7B . #x7602)	;CJK UNIFIED IDEOGRAPH
                                (#xAF7C . #x7604)	;CJK UNIFIED IDEOGRAPH
                                (#xAF7D . #x7606)	;CJK UNIFIED IDEOGRAPH
                                (#xAF7E . #x7607)	;CJK UNIFIED IDEOGRAPH
                                (#xAF80 . #x7608)	;CJK UNIFIED IDEOGRAPH
                                (#xAF81 . #x7609)	;CJK UNIFIED IDEOGRAPH
                                (#xAF82 . #x760B)	;CJK UNIFIED IDEOGRAPH
                                (#xAF83 . #x760D)	;CJK UNIFIED IDEOGRAPH
                                (#xAF84 . #x760E)	;CJK UNIFIED IDEOGRAPH
                                (#xAF85 . #x760F)	;CJK UNIFIED IDEOGRAPH
                                (#xAF86 . #x7611)	;CJK UNIFIED IDEOGRAPH
                                (#xAF87 . #x7612)	;CJK UNIFIED IDEOGRAPH
                                (#xAF88 . #x7613)	;CJK UNIFIED IDEOGRAPH
                                (#xAF89 . #x7614)	;CJK UNIFIED IDEOGRAPH
                                (#xAF8A . #x7616)	;CJK UNIFIED IDEOGRAPH
                                (#xAF8B . #x761A)	;CJK UNIFIED IDEOGRAPH
                                (#xAF8C . #x761C)	;CJK UNIFIED IDEOGRAPH
                                (#xAF8D . #x761D)	;CJK UNIFIED IDEOGRAPH
                                (#xAF8E . #x761E)	;CJK UNIFIED IDEOGRAPH
                                (#xAF8F . #x7621)	;CJK UNIFIED IDEOGRAPH
                                (#xAF90 . #x7623)	;CJK UNIFIED IDEOGRAPH
                                (#xAF91 . #x7627)	;CJK UNIFIED IDEOGRAPH
                                (#xAF92 . #x7628)	;CJK UNIFIED IDEOGRAPH
                                (#xAF93 . #x762C)	;CJK UNIFIED IDEOGRAPH
                                (#xAF94 . #x762E)	;CJK UNIFIED IDEOGRAPH
                                (#xAF95 . #x762F)	;CJK UNIFIED IDEOGRAPH
                                (#xAF96 . #x7631)	;CJK UNIFIED IDEOGRAPH
                                (#xAF97 . #x7632)	;CJK UNIFIED IDEOGRAPH
                                (#xAF98 . #x7636)	;CJK UNIFIED IDEOGRAPH
                                (#xAF99 . #x7637)	;CJK UNIFIED IDEOGRAPH
                                (#xAF9A . #x7639)	;CJK UNIFIED IDEOGRAPH
                                (#xAF9B . #x763A)	;CJK UNIFIED IDEOGRAPH
                                (#xAF9C . #x763B)	;CJK UNIFIED IDEOGRAPH
                                (#xAF9D . #x763D)	;CJK UNIFIED IDEOGRAPH
                                (#xAF9E . #x7641)	;CJK UNIFIED IDEOGRAPH
                                (#xAF9F . #x7642)	;CJK UNIFIED IDEOGRAPH
                                (#xAFA0 . #x7644)	;CJK UNIFIED IDEOGRAPH
                                (#xB040 . #x7645)	;CJK UNIFIED IDEOGRAPH
                                (#xB041 . #x7646)	;CJK UNIFIED IDEOGRAPH
                                (#xB042 . #x7647)	;CJK UNIFIED IDEOGRAPH
                                (#xB043 . #x7648)	;CJK UNIFIED IDEOGRAPH
                                (#xB044 . #x7649)	;CJK UNIFIED IDEOGRAPH
                                (#xB045 . #x764A)	;CJK UNIFIED IDEOGRAPH
                                (#xB046 . #x764B)	;CJK UNIFIED IDEOGRAPH
                                (#xB047 . #x764E)	;CJK UNIFIED IDEOGRAPH
                                (#xB048 . #x764F)	;CJK UNIFIED IDEOGRAPH
                                (#xB049 . #x7650)	;CJK UNIFIED IDEOGRAPH
                                (#xB04A . #x7651)	;CJK UNIFIED IDEOGRAPH
                                (#xB04B . #x7652)	;CJK UNIFIED IDEOGRAPH
                                (#xB04C . #x7653)	;CJK UNIFIED IDEOGRAPH
                                (#xB04D . #x7655)	;CJK UNIFIED IDEOGRAPH
                                (#xB04E . #x7657)	;CJK UNIFIED IDEOGRAPH
                                (#xB04F . #x7658)	;CJK UNIFIED IDEOGRAPH
                                (#xB050 . #x7659)	;CJK UNIFIED IDEOGRAPH
                                (#xB051 . #x765A)	;CJK UNIFIED IDEOGRAPH
                                (#xB052 . #x765B)	;CJK UNIFIED IDEOGRAPH
                                (#xB053 . #x765D)	;CJK UNIFIED IDEOGRAPH
                                (#xB054 . #x765F)	;CJK UNIFIED IDEOGRAPH
                                (#xB055 . #x7660)	;CJK UNIFIED IDEOGRAPH
                                (#xB056 . #x7661)	;CJK UNIFIED IDEOGRAPH
                                (#xB057 . #x7662)	;CJK UNIFIED IDEOGRAPH
                                (#xB058 . #x7664)	;CJK UNIFIED IDEOGRAPH
                                (#xB059 . #x7665)	;CJK UNIFIED IDEOGRAPH
                                (#xB05A . #x7666)	;CJK UNIFIED IDEOGRAPH
                                (#xB05B . #x7667)	;CJK UNIFIED IDEOGRAPH
                                (#xB05C . #x7668)	;CJK UNIFIED IDEOGRAPH
                                (#xB05D . #x7669)	;CJK UNIFIED IDEOGRAPH
                                (#xB05E . #x766A)	;CJK UNIFIED IDEOGRAPH
                                (#xB05F . #x766C)	;CJK UNIFIED IDEOGRAPH
                                (#xB060 . #x766D)	;CJK UNIFIED IDEOGRAPH
                                (#xB061 . #x766E)	;CJK UNIFIED IDEOGRAPH
                                (#xB062 . #x7670)	;CJK UNIFIED IDEOGRAPH
                                (#xB063 . #x7671)	;CJK UNIFIED IDEOGRAPH
                                (#xB064 . #x7672)	;CJK UNIFIED IDEOGRAPH
                                (#xB065 . #x7673)	;CJK UNIFIED IDEOGRAPH
                                (#xB066 . #x7674)	;CJK UNIFIED IDEOGRAPH
                                (#xB067 . #x7675)	;CJK UNIFIED IDEOGRAPH
                                (#xB068 . #x7676)	;CJK UNIFIED IDEOGRAPH
                                (#xB069 . #x7677)	;CJK UNIFIED IDEOGRAPH
                                (#xB06A . #x7679)	;CJK UNIFIED IDEOGRAPH
                                (#xB06B . #x767A)	;CJK UNIFIED IDEOGRAPH
                                (#xB06C . #x767C)	;CJK UNIFIED IDEOGRAPH
                                (#xB06D . #x767F)	;CJK UNIFIED IDEOGRAPH
                                (#xB06E . #x7680)	;CJK UNIFIED IDEOGRAPH
                                (#xB06F . #x7681)	;CJK UNIFIED IDEOGRAPH
                                (#xB070 . #x7683)	;CJK UNIFIED IDEOGRAPH
                                (#xB071 . #x7685)	;CJK UNIFIED IDEOGRAPH
                                (#xB072 . #x7689)	;CJK UNIFIED IDEOGRAPH
                                (#xB073 . #x768A)	;CJK UNIFIED IDEOGRAPH
                                (#xB074 . #x768C)	;CJK UNIFIED IDEOGRAPH
                                (#xB075 . #x768D)	;CJK UNIFIED IDEOGRAPH
                                (#xB076 . #x768F)	;CJK UNIFIED IDEOGRAPH
                                (#xB077 . #x7690)	;CJK UNIFIED IDEOGRAPH
                                (#xB078 . #x7692)	;CJK UNIFIED IDEOGRAPH
                                (#xB079 . #x7694)	;CJK UNIFIED IDEOGRAPH
                                (#xB07A . #x7695)	;CJK UNIFIED IDEOGRAPH
                                (#xB07B . #x7697)	;CJK UNIFIED IDEOGRAPH
                                (#xB07C . #x7698)	;CJK UNIFIED IDEOGRAPH
                                (#xB07D . #x769A)	;CJK UNIFIED IDEOGRAPH
                                (#xB07E . #x769B)	;CJK UNIFIED IDEOGRAPH
                                (#xB080 . #x769C)	;CJK UNIFIED IDEOGRAPH
                                (#xB081 . #x769D)	;CJK UNIFIED IDEOGRAPH
                                (#xB082 . #x769E)	;CJK UNIFIED IDEOGRAPH
                                (#xB083 . #x769F)	;CJK UNIFIED IDEOGRAPH
                                (#xB084 . #x76A0)	;CJK UNIFIED IDEOGRAPH
                                (#xB085 . #x76A1)	;CJK UNIFIED IDEOGRAPH
                                (#xB086 . #x76A2)	;CJK UNIFIED IDEOGRAPH
                                (#xB087 . #x76A3)	;CJK UNIFIED IDEOGRAPH
                                (#xB088 . #x76A5)	;CJK UNIFIED IDEOGRAPH
                                (#xB089 . #x76A6)	;CJK UNIFIED IDEOGRAPH
                                (#xB08A . #x76A7)	;CJK UNIFIED IDEOGRAPH
                                (#xB08B . #x76A8)	;CJK UNIFIED IDEOGRAPH
                                (#xB08C . #x76A9)	;CJK UNIFIED IDEOGRAPH
                                (#xB08D . #x76AA)	;CJK UNIFIED IDEOGRAPH
                                (#xB08E . #x76AB)	;CJK UNIFIED IDEOGRAPH
                                (#xB08F . #x76AC)	;CJK UNIFIED IDEOGRAPH
                                (#xB090 . #x76AD)	;CJK UNIFIED IDEOGRAPH
                                (#xB091 . #x76AF)	;CJK UNIFIED IDEOGRAPH
                                (#xB092 . #x76B0)	;CJK UNIFIED IDEOGRAPH
                                (#xB093 . #x76B3)	;CJK UNIFIED IDEOGRAPH
                                (#xB094 . #x76B5)	;CJK UNIFIED IDEOGRAPH
                                (#xB095 . #x76B6)	;CJK UNIFIED IDEOGRAPH
                                (#xB096 . #x76B7)	;CJK UNIFIED IDEOGRAPH
                                (#xB097 . #x76B8)	;CJK UNIFIED IDEOGRAPH
                                (#xB098 . #x76B9)	;CJK UNIFIED IDEOGRAPH
                                (#xB099 . #x76BA)	;CJK UNIFIED IDEOGRAPH
                                (#xB09A . #x76BB)	;CJK UNIFIED IDEOGRAPH
                                (#xB09B . #x76BC)	;CJK UNIFIED IDEOGRAPH
                                (#xB09C . #x76BD)	;CJK UNIFIED IDEOGRAPH
                                (#xB09D . #x76BE)	;CJK UNIFIED IDEOGRAPH
                                (#xB09E . #x76C0)	;CJK UNIFIED IDEOGRAPH
                                (#xB09F . #x76C1)	;CJK UNIFIED IDEOGRAPH
                                (#xB0A0 . #x76C3)	;CJK UNIFIED IDEOGRAPH
                                (#xB0A1 . #x554A)	;CJK UNIFIED IDEOGRAPH
                                (#xB0A2 . #x963F)	;CJK UNIFIED IDEOGRAPH
                                (#xB0A3 . #x57C3)	;CJK UNIFIED IDEOGRAPH
                                (#xB0A4 . #x6328)	;CJK UNIFIED IDEOGRAPH
                                (#xB0A5 . #x54CE)	;CJK UNIFIED IDEOGRAPH
                                (#xB0A6 . #x5509)	;CJK UNIFIED IDEOGRAPH
                                (#xB0A7 . #x54C0)	;CJK UNIFIED IDEOGRAPH
                                (#xB0A8 . #x7691)	;CJK UNIFIED IDEOGRAPH
                                (#xB0A9 . #x764C)	;CJK UNIFIED IDEOGRAPH
                                (#xB0AA . #x853C)	;CJK UNIFIED IDEOGRAPH
                                (#xB0AB . #x77EE)	;CJK UNIFIED IDEOGRAPH
                                (#xB0AC . #x827E)	;CJK UNIFIED IDEOGRAPH
                                (#xB0AD . #x788D)	;CJK UNIFIED IDEOGRAPH
                                (#xB0AE . #x7231)	;CJK UNIFIED IDEOGRAPH
                                (#xB0AF . #x9698)	;CJK UNIFIED IDEOGRAPH
                                (#xB0B0 . #x978D)	;CJK UNIFIED IDEOGRAPH
                                (#xB0B1 . #x6C28)	;CJK UNIFIED IDEOGRAPH
                                (#xB0B2 . #x5B89)	;CJK UNIFIED IDEOGRAPH
                                (#xB0B3 . #x4FFA)	;CJK UNIFIED IDEOGRAPH
                                (#xB0B4 . #x6309)	;CJK UNIFIED IDEOGRAPH
                                (#xB0B5 . #x6697)	;CJK UNIFIED IDEOGRAPH
                                (#xB0B6 . #x5CB8)	;CJK UNIFIED IDEOGRAPH
                                (#xB0B7 . #x80FA)	;CJK UNIFIED IDEOGRAPH
                                (#xB0B8 . #x6848)	;CJK UNIFIED IDEOGRAPH
                                (#xB0B9 . #x80AE)	;CJK UNIFIED IDEOGRAPH
                                (#xB0BA . #x6602)	;CJK UNIFIED IDEOGRAPH
                                (#xB0BB . #x76CE)	;CJK UNIFIED IDEOGRAPH
                                (#xB0BC . #x51F9)	;CJK UNIFIED IDEOGRAPH
                                (#xB0BD . #x6556)	;CJK UNIFIED IDEOGRAPH
                                (#xB0BE . #x71AC)	;CJK UNIFIED IDEOGRAPH
                                (#xB0BF . #x7FF1)	;CJK UNIFIED IDEOGRAPH
                                (#xB0C0 . #x8884)	;CJK UNIFIED IDEOGRAPH
                                (#xB0C1 . #x50B2)	;CJK UNIFIED IDEOGRAPH
                                (#xB0C2 . #x5965)	;CJK UNIFIED IDEOGRAPH
                                (#xB0C3 . #x61CA)	;CJK UNIFIED IDEOGRAPH
                                (#xB0C4 . #x6FB3)	;CJK UNIFIED IDEOGRAPH
                                (#xB0C5 . #x82AD)	;CJK UNIFIED IDEOGRAPH
                                (#xB0C6 . #x634C)	;CJK UNIFIED IDEOGRAPH
                                (#xB0C7 . #x6252)	;CJK UNIFIED IDEOGRAPH
                                (#xB0C8 . #x53ED)	;CJK UNIFIED IDEOGRAPH
                                (#xB0C9 . #x5427)	;CJK UNIFIED IDEOGRAPH
                                (#xB0CA . #x7B06)	;CJK UNIFIED IDEOGRAPH
                                (#xB0CB . #x516B)	;CJK UNIFIED IDEOGRAPH
                                (#xB0CC . #x75A4)	;CJK UNIFIED IDEOGRAPH
                                (#xB0CD . #x5DF4)	;CJK UNIFIED IDEOGRAPH
                                (#xB0CE . #x62D4)	;CJK UNIFIED IDEOGRAPH
                                (#xB0CF . #x8DCB)	;CJK UNIFIED IDEOGRAPH
                                (#xB0D0 . #x9776)	;CJK UNIFIED IDEOGRAPH
                                (#xB0D1 . #x628A)	;CJK UNIFIED IDEOGRAPH
                                (#xB0D2 . #x8019)	;CJK UNIFIED IDEOGRAPH
                                (#xB0D3 . #x575D)	;CJK UNIFIED IDEOGRAPH
                                (#xB0D4 . #x9738)	;CJK UNIFIED IDEOGRAPH
                                (#xB0D5 . #x7F62)	;CJK UNIFIED IDEOGRAPH
                                (#xB0D6 . #x7238)	;CJK UNIFIED IDEOGRAPH
                                (#xB0D7 . #x767D)	;CJK UNIFIED IDEOGRAPH
                                (#xB0D8 . #x67CF)	;CJK UNIFIED IDEOGRAPH
                                (#xB0D9 . #x767E)	;CJK UNIFIED IDEOGRAPH
                                (#xB0DA . #x6446)	;CJK UNIFIED IDEOGRAPH
                                (#xB0DB . #x4F70)	;CJK UNIFIED IDEOGRAPH
                                (#xB0DC . #x8D25)	;CJK UNIFIED IDEOGRAPH
                                (#xB0DD . #x62DC)	;CJK UNIFIED IDEOGRAPH
                                (#xB0DE . #x7A17)	;CJK UNIFIED IDEOGRAPH
                                (#xB0DF . #x6591)	;CJK UNIFIED IDEOGRAPH
                                (#xB0E0 . #x73ED)	;CJK UNIFIED IDEOGRAPH
                                (#xB0E1 . #x642C)	;CJK UNIFIED IDEOGRAPH
                                (#xB0E2 . #x6273)	;CJK UNIFIED IDEOGRAPH
                                (#xB0E3 . #x822C)	;CJK UNIFIED IDEOGRAPH
                                (#xB0E4 . #x9881)	;CJK UNIFIED IDEOGRAPH
                                (#xB0E5 . #x677F)	;CJK UNIFIED IDEOGRAPH
                                (#xB0E6 . #x7248)	;CJK UNIFIED IDEOGRAPH
                                (#xB0E7 . #x626E)	;CJK UNIFIED IDEOGRAPH
                                (#xB0E8 . #x62CC)	;CJK UNIFIED IDEOGRAPH
                                (#xB0E9 . #x4F34)	;CJK UNIFIED IDEOGRAPH
                                (#xB0EA . #x74E3)	;CJK UNIFIED IDEOGRAPH
                                (#xB0EB . #x534A)	;CJK UNIFIED IDEOGRAPH
                                (#xB0EC . #x529E)	;CJK UNIFIED IDEOGRAPH
                                (#xB0ED . #x7ECA)	;CJK UNIFIED IDEOGRAPH
                                (#xB0EE . #x90A6)	;CJK UNIFIED IDEOGRAPH
                                (#xB0EF . #x5E2E)	;CJK UNIFIED IDEOGRAPH
                                (#xB0F0 . #x6886)	;CJK UNIFIED IDEOGRAPH
                                (#xB0F1 . #x699C)	;CJK UNIFIED IDEOGRAPH
                                (#xB0F2 . #x8180)	;CJK UNIFIED IDEOGRAPH
                                (#xB0F3 . #x7ED1)	;CJK UNIFIED IDEOGRAPH
                                (#xB0F4 . #x68D2)	;CJK UNIFIED IDEOGRAPH
                                (#xB0F5 . #x78C5)	;CJK UNIFIED IDEOGRAPH
                                (#xB0F6 . #x868C)	;CJK UNIFIED IDEOGRAPH
                                (#xB0F7 . #x9551)	;CJK UNIFIED IDEOGRAPH
                                (#xB0F8 . #x508D)	;CJK UNIFIED IDEOGRAPH
                                (#xB0F9 . #x8C24)	;CJK UNIFIED IDEOGRAPH
                                (#xB0FA . #x82DE)	;CJK UNIFIED IDEOGRAPH
                                (#xB0FB . #x80DE)	;CJK UNIFIED IDEOGRAPH
                                (#xB0FC . #x5305)	;CJK UNIFIED IDEOGRAPH
                                (#xB0FD . #x8912)	;CJK UNIFIED IDEOGRAPH
                                (#xB0FE . #x5265)	;CJK UNIFIED IDEOGRAPH
                                (#xB140 . #x76C4)	;CJK UNIFIED IDEOGRAPH
                                (#xB141 . #x76C7)	;CJK UNIFIED IDEOGRAPH
                                (#xB142 . #x76C9)	;CJK UNIFIED IDEOGRAPH
                                (#xB143 . #x76CB)	;CJK UNIFIED IDEOGRAPH
                                (#xB144 . #x76CC)	;CJK UNIFIED IDEOGRAPH
                                (#xB145 . #x76D3)	;CJK UNIFIED IDEOGRAPH
                                (#xB146 . #x76D5)	;CJK UNIFIED IDEOGRAPH
                                (#xB147 . #x76D9)	;CJK UNIFIED IDEOGRAPH
                                (#xB148 . #x76DA)	;CJK UNIFIED IDEOGRAPH
                                (#xB149 . #x76DC)	;CJK UNIFIED IDEOGRAPH
                                (#xB14A . #x76DD)	;CJK UNIFIED IDEOGRAPH
                                (#xB14B . #x76DE)	;CJK UNIFIED IDEOGRAPH
                                (#xB14C . #x76E0)	;CJK UNIFIED IDEOGRAPH
                                (#xB14D . #x76E1)	;CJK UNIFIED IDEOGRAPH
                                (#xB14E . #x76E2)	;CJK UNIFIED IDEOGRAPH
                                (#xB14F . #x76E3)	;CJK UNIFIED IDEOGRAPH
                                (#xB150 . #x76E4)	;CJK UNIFIED IDEOGRAPH
                                (#xB151 . #x76E6)	;CJK UNIFIED IDEOGRAPH
                                (#xB152 . #x76E7)	;CJK UNIFIED IDEOGRAPH
                                (#xB153 . #x76E8)	;CJK UNIFIED IDEOGRAPH
                                (#xB154 . #x76E9)	;CJK UNIFIED IDEOGRAPH
                                (#xB155 . #x76EA)	;CJK UNIFIED IDEOGRAPH
                                (#xB156 . #x76EB)	;CJK UNIFIED IDEOGRAPH
                                (#xB157 . #x76EC)	;CJK UNIFIED IDEOGRAPH
                                (#xB158 . #x76ED)	;CJK UNIFIED IDEOGRAPH
                                (#xB159 . #x76F0)	;CJK UNIFIED IDEOGRAPH
                                (#xB15A . #x76F3)	;CJK UNIFIED IDEOGRAPH
                                (#xB15B . #x76F5)	;CJK UNIFIED IDEOGRAPH
                                (#xB15C . #x76F6)	;CJK UNIFIED IDEOGRAPH
                                (#xB15D . #x76F7)	;CJK UNIFIED IDEOGRAPH
                                (#xB15E . #x76FA)	;CJK UNIFIED IDEOGRAPH
                                (#xB15F . #x76FB)	;CJK UNIFIED IDEOGRAPH
                                (#xB160 . #x76FD)	;CJK UNIFIED IDEOGRAPH
                                (#xB161 . #x76FF)	;CJK UNIFIED IDEOGRAPH
                                (#xB162 . #x7700)	;CJK UNIFIED IDEOGRAPH
                                (#xB163 . #x7702)	;CJK UNIFIED IDEOGRAPH
                                (#xB164 . #x7703)	;CJK UNIFIED IDEOGRAPH
                                (#xB165 . #x7705)	;CJK UNIFIED IDEOGRAPH
                                (#xB166 . #x7706)	;CJK UNIFIED IDEOGRAPH
                                (#xB167 . #x770A)	;CJK UNIFIED IDEOGRAPH
                                (#xB168 . #x770C)	;CJK UNIFIED IDEOGRAPH
                                (#xB169 . #x770E)	;CJK UNIFIED IDEOGRAPH
                                (#xB16A . #x770F)	;CJK UNIFIED IDEOGRAPH
                                (#xB16B . #x7710)	;CJK UNIFIED IDEOGRAPH
                                (#xB16C . #x7711)	;CJK UNIFIED IDEOGRAPH
                                (#xB16D . #x7712)	;CJK UNIFIED IDEOGRAPH
                                (#xB16E . #x7713)	;CJK UNIFIED IDEOGRAPH
                                (#xB16F . #x7714)	;CJK UNIFIED IDEOGRAPH
                                (#xB170 . #x7715)	;CJK UNIFIED IDEOGRAPH
                                (#xB171 . #x7716)	;CJK UNIFIED IDEOGRAPH
                                (#xB172 . #x7717)	;CJK UNIFIED IDEOGRAPH
                                (#xB173 . #x7718)	;CJK UNIFIED IDEOGRAPH
                                (#xB174 . #x771B)	;CJK UNIFIED IDEOGRAPH
                                (#xB175 . #x771C)	;CJK UNIFIED IDEOGRAPH
                                (#xB176 . #x771D)	;CJK UNIFIED IDEOGRAPH
                                (#xB177 . #x771E)	;CJK UNIFIED IDEOGRAPH
                                (#xB178 . #x7721)	;CJK UNIFIED IDEOGRAPH
                                (#xB179 . #x7723)	;CJK UNIFIED IDEOGRAPH
                                (#xB17A . #x7724)	;CJK UNIFIED IDEOGRAPH
                                (#xB17B . #x7725)	;CJK UNIFIED IDEOGRAPH
                                (#xB17C . #x7727)	;CJK UNIFIED IDEOGRAPH
                                (#xB17D . #x772A)	;CJK UNIFIED IDEOGRAPH
                                (#xB17E . #x772B)	;CJK UNIFIED IDEOGRAPH
                                (#xB180 . #x772C)	;CJK UNIFIED IDEOGRAPH
                                (#xB181 . #x772E)	;CJK UNIFIED IDEOGRAPH
                                (#xB182 . #x7730)	;CJK UNIFIED IDEOGRAPH
                                (#xB183 . #x7731)	;CJK UNIFIED IDEOGRAPH
                                (#xB184 . #x7732)	;CJK UNIFIED IDEOGRAPH
                                (#xB185 . #x7733)	;CJK UNIFIED IDEOGRAPH
                                (#xB186 . #x7734)	;CJK UNIFIED IDEOGRAPH
                                (#xB187 . #x7739)	;CJK UNIFIED IDEOGRAPH
                                (#xB188 . #x773B)	;CJK UNIFIED IDEOGRAPH
                                (#xB189 . #x773D)	;CJK UNIFIED IDEOGRAPH
                                (#xB18A . #x773E)	;CJK UNIFIED IDEOGRAPH
                                (#xB18B . #x773F)	;CJK UNIFIED IDEOGRAPH
                                (#xB18C . #x7742)	;CJK UNIFIED IDEOGRAPH
                                (#xB18D . #x7744)	;CJK UNIFIED IDEOGRAPH
                                (#xB18E . #x7745)	;CJK UNIFIED IDEOGRAPH
                                (#xB18F . #x7746)	;CJK UNIFIED IDEOGRAPH
                                (#xB190 . #x7748)	;CJK UNIFIED IDEOGRAPH
                                (#xB191 . #x7749)	;CJK UNIFIED IDEOGRAPH
                                (#xB192 . #x774A)	;CJK UNIFIED IDEOGRAPH
                                (#xB193 . #x774B)	;CJK UNIFIED IDEOGRAPH
                                (#xB194 . #x774C)	;CJK UNIFIED IDEOGRAPH
                                (#xB195 . #x774D)	;CJK UNIFIED IDEOGRAPH
                                (#xB196 . #x774E)	;CJK UNIFIED IDEOGRAPH
                                (#xB197 . #x774F)	;CJK UNIFIED IDEOGRAPH
                                (#xB198 . #x7752)	;CJK UNIFIED IDEOGRAPH
                                (#xB199 . #x7753)	;CJK UNIFIED IDEOGRAPH
                                (#xB19A . #x7754)	;CJK UNIFIED IDEOGRAPH
                                (#xB19B . #x7755)	;CJK UNIFIED IDEOGRAPH
                                (#xB19C . #x7756)	;CJK UNIFIED IDEOGRAPH
                                (#xB19D . #x7757)	;CJK UNIFIED IDEOGRAPH
                                (#xB19E . #x7758)	;CJK UNIFIED IDEOGRAPH
                                (#xB19F . #x7759)	;CJK UNIFIED IDEOGRAPH
                                (#xB1A0 . #x775C)	;CJK UNIFIED IDEOGRAPH
                                (#xB1A1 . #x8584)	;CJK UNIFIED IDEOGRAPH
                                (#xB1A2 . #x96F9)	;CJK UNIFIED IDEOGRAPH
                                (#xB1A3 . #x4FDD)	;CJK UNIFIED IDEOGRAPH
                                (#xB1A4 . #x5821)	;CJK UNIFIED IDEOGRAPH
                                (#xB1A5 . #x9971)	;CJK UNIFIED IDEOGRAPH
                                (#xB1A6 . #x5B9D)	;CJK UNIFIED IDEOGRAPH
                                (#xB1A7 . #x62B1)	;CJK UNIFIED IDEOGRAPH
                                (#xB1A8 . #x62A5)	;CJK UNIFIED IDEOGRAPH
                                (#xB1A9 . #x66B4)	;CJK UNIFIED IDEOGRAPH
                                (#xB1AA . #x8C79)	;CJK UNIFIED IDEOGRAPH
                                (#xB1AB . #x9C8D)	;CJK UNIFIED IDEOGRAPH
                                (#xB1AC . #x7206)	;CJK UNIFIED IDEOGRAPH
                                (#xB1AD . #x676F)	;CJK UNIFIED IDEOGRAPH
                                (#xB1AE . #x7891)	;CJK UNIFIED IDEOGRAPH
                                (#xB1AF . #x60B2)	;CJK UNIFIED IDEOGRAPH
                                (#xB1B0 . #x5351)	;CJK UNIFIED IDEOGRAPH
                                (#xB1B1 . #x5317)	;CJK UNIFIED IDEOGRAPH
                                (#xB1B2 . #x8F88)	;CJK UNIFIED IDEOGRAPH
                                (#xB1B3 . #x80CC)	;CJK UNIFIED IDEOGRAPH
                                (#xB1B4 . #x8D1D)	;CJK UNIFIED IDEOGRAPH
                                (#xB1B5 . #x94A1)	;CJK UNIFIED IDEOGRAPH
                                (#xB1B6 . #x500D)	;CJK UNIFIED IDEOGRAPH
                                (#xB1B7 . #x72C8)	;CJK UNIFIED IDEOGRAPH
                                (#xB1B8 . #x5907)	;CJK UNIFIED IDEOGRAPH
                                (#xB1B9 . #x60EB)	;CJK UNIFIED IDEOGRAPH
                                (#xB1BA . #x7119)	;CJK UNIFIED IDEOGRAPH
                                (#xB1BB . #x88AB)	;CJK UNIFIED IDEOGRAPH
                                (#xB1BC . #x5954)	;CJK UNIFIED IDEOGRAPH
                                (#xB1BD . #x82EF)	;CJK UNIFIED IDEOGRAPH
                                (#xB1BE . #x672C)	;CJK UNIFIED IDEOGRAPH
                                (#xB1BF . #x7B28)	;CJK UNIFIED IDEOGRAPH
                                (#xB1C0 . #x5D29)	;CJK UNIFIED IDEOGRAPH
                                (#xB1C1 . #x7EF7)	;CJK UNIFIED IDEOGRAPH
                                (#xB1C2 . #x752D)	;CJK UNIFIED IDEOGRAPH
                                (#xB1C3 . #x6CF5)	;CJK UNIFIED IDEOGRAPH
                                (#xB1C4 . #x8E66)	;CJK UNIFIED IDEOGRAPH
                                (#xB1C5 . #x8FF8)	;CJK UNIFIED IDEOGRAPH
                                (#xB1C6 . #x903C)	;CJK UNIFIED IDEOGRAPH
                                (#xB1C7 . #x9F3B)	;CJK UNIFIED IDEOGRAPH
                                (#xB1C8 . #x6BD4)	;CJK UNIFIED IDEOGRAPH
                                (#xB1C9 . #x9119)	;CJK UNIFIED IDEOGRAPH
                                (#xB1CA . #x7B14)	;CJK UNIFIED IDEOGRAPH
                                (#xB1CB . #x5F7C)	;CJK UNIFIED IDEOGRAPH
                                (#xB1CC . #x78A7)	;CJK UNIFIED IDEOGRAPH
                                (#xB1CD . #x84D6)	;CJK UNIFIED IDEOGRAPH
                                (#xB1CE . #x853D)	;CJK UNIFIED IDEOGRAPH
                                (#xB1CF . #x6BD5)	;CJK UNIFIED IDEOGRAPH
                                (#xB1D0 . #x6BD9)	;CJK UNIFIED IDEOGRAPH
                                (#xB1D1 . #x6BD6)	;CJK UNIFIED IDEOGRAPH
                                (#xB1D2 . #x5E01)	;CJK UNIFIED IDEOGRAPH
                                (#xB1D3 . #x5E87)	;CJK UNIFIED IDEOGRAPH
                                (#xB1D4 . #x75F9)	;CJK UNIFIED IDEOGRAPH
                                (#xB1D5 . #x95ED)	;CJK UNIFIED IDEOGRAPH
                                (#xB1D6 . #x655D)	;CJK UNIFIED IDEOGRAPH
                                (#xB1D7 . #x5F0A)	;CJK UNIFIED IDEOGRAPH
                                (#xB1D8 . #x5FC5)	;CJK UNIFIED IDEOGRAPH
                                (#xB1D9 . #x8F9F)	;CJK UNIFIED IDEOGRAPH
                                (#xB1DA . #x58C1)	;CJK UNIFIED IDEOGRAPH
                                (#xB1DB . #x81C2)	;CJK UNIFIED IDEOGRAPH
                                (#xB1DC . #x907F)	;CJK UNIFIED IDEOGRAPH
                                (#xB1DD . #x965B)	;CJK UNIFIED IDEOGRAPH
                                (#xB1DE . #x97AD)	;CJK UNIFIED IDEOGRAPH
                                (#xB1DF . #x8FB9)	;CJK UNIFIED IDEOGRAPH
                                (#xB1E0 . #x7F16)	;CJK UNIFIED IDEOGRAPH
                                (#xB1E1 . #x8D2C)	;CJK UNIFIED IDEOGRAPH
                                (#xB1E2 . #x6241)	;CJK UNIFIED IDEOGRAPH
                                (#xB1E3 . #x4FBF)	;CJK UNIFIED IDEOGRAPH
                                (#xB1E4 . #x53D8)	;CJK UNIFIED IDEOGRAPH
                                (#xB1E5 . #x535E)	;CJK UNIFIED IDEOGRAPH
                                (#xB1E6 . #x8FA8)	;CJK UNIFIED IDEOGRAPH
                                (#xB1E7 . #x8FA9)	;CJK UNIFIED IDEOGRAPH
                                (#xB1E8 . #x8FAB)	;CJK UNIFIED IDEOGRAPH
                                (#xB1E9 . #x904D)	;CJK UNIFIED IDEOGRAPH
                                (#xB1EA . #x6807)	;CJK UNIFIED IDEOGRAPH
                                (#xB1EB . #x5F6A)	;CJK UNIFIED IDEOGRAPH
                                (#xB1EC . #x8198)	;CJK UNIFIED IDEOGRAPH
                                (#xB1ED . #x8868)	;CJK UNIFIED IDEOGRAPH
                                (#xB1EE . #x9CD6)	;CJK UNIFIED IDEOGRAPH
                                (#xB1EF . #x618B)	;CJK UNIFIED IDEOGRAPH
                                (#xB1F0 . #x522B)	;CJK UNIFIED IDEOGRAPH
                                (#xB1F1 . #x762A)	;CJK UNIFIED IDEOGRAPH
                                (#xB1F2 . #x5F6C)	;CJK UNIFIED IDEOGRAPH
                                (#xB1F3 . #x658C)	;CJK UNIFIED IDEOGRAPH
                                (#xB1F4 . #x6FD2)	;CJK UNIFIED IDEOGRAPH
                                (#xB1F5 . #x6EE8)	;CJK UNIFIED IDEOGRAPH
                                (#xB1F6 . #x5BBE)	;CJK UNIFIED IDEOGRAPH
                                (#xB1F7 . #x6448)	;CJK UNIFIED IDEOGRAPH
                                (#xB1F8 . #x5175)	;CJK UNIFIED IDEOGRAPH
                                (#xB1F9 . #x51B0)	;CJK UNIFIED IDEOGRAPH
                                (#xB1FA . #x67C4)	;CJK UNIFIED IDEOGRAPH
                                (#xB1FB . #x4E19)	;CJK UNIFIED IDEOGRAPH
                                (#xB1FC . #x79C9)	;CJK UNIFIED IDEOGRAPH
                                (#xB1FD . #x997C)	;CJK UNIFIED IDEOGRAPH
                                (#xB1FE . #x70B3)	;CJK UNIFIED IDEOGRAPH
                                (#xB240 . #x775D)	;CJK UNIFIED IDEOGRAPH
                                (#xB241 . #x775E)	;CJK UNIFIED IDEOGRAPH
                                (#xB242 . #x775F)	;CJK UNIFIED IDEOGRAPH
                                (#xB243 . #x7760)	;CJK UNIFIED IDEOGRAPH
                                (#xB244 . #x7764)	;CJK UNIFIED IDEOGRAPH
                                (#xB245 . #x7767)	;CJK UNIFIED IDEOGRAPH
                                (#xB246 . #x7769)	;CJK UNIFIED IDEOGRAPH
                                (#xB247 . #x776A)	;CJK UNIFIED IDEOGRAPH
                                (#xB248 . #x776D)	;CJK UNIFIED IDEOGRAPH
                                (#xB249 . #x776E)	;CJK UNIFIED IDEOGRAPH
                                (#xB24A . #x776F)	;CJK UNIFIED IDEOGRAPH
                                (#xB24B . #x7770)	;CJK UNIFIED IDEOGRAPH
                                (#xB24C . #x7771)	;CJK UNIFIED IDEOGRAPH
                                (#xB24D . #x7772)	;CJK UNIFIED IDEOGRAPH
                                (#xB24E . #x7773)	;CJK UNIFIED IDEOGRAPH
                                (#xB24F . #x7774)	;CJK UNIFIED IDEOGRAPH
                                (#xB250 . #x7775)	;CJK UNIFIED IDEOGRAPH
                                (#xB251 . #x7776)	;CJK UNIFIED IDEOGRAPH
                                (#xB252 . #x7777)	;CJK UNIFIED IDEOGRAPH
                                (#xB253 . #x7778)	;CJK UNIFIED IDEOGRAPH
                                (#xB254 . #x777A)	;CJK UNIFIED IDEOGRAPH
                                (#xB255 . #x777B)	;CJK UNIFIED IDEOGRAPH
                                (#xB256 . #x777C)	;CJK UNIFIED IDEOGRAPH
                                (#xB257 . #x7781)	;CJK UNIFIED IDEOGRAPH
                                (#xB258 . #x7782)	;CJK UNIFIED IDEOGRAPH
                                (#xB259 . #x7783)	;CJK UNIFIED IDEOGRAPH
                                (#xB25A . #x7786)	;CJK UNIFIED IDEOGRAPH
                                (#xB25B . #x7787)	;CJK UNIFIED IDEOGRAPH
                                (#xB25C . #x7788)	;CJK UNIFIED IDEOGRAPH
                                (#xB25D . #x7789)	;CJK UNIFIED IDEOGRAPH
                                (#xB25E . #x778A)	;CJK UNIFIED IDEOGRAPH
                                (#xB25F . #x778B)	;CJK UNIFIED IDEOGRAPH
                                (#xB260 . #x778F)	;CJK UNIFIED IDEOGRAPH
                                (#xB261 . #x7790)	;CJK UNIFIED IDEOGRAPH
                                (#xB262 . #x7793)	;CJK UNIFIED IDEOGRAPH
                                (#xB263 . #x7794)	;CJK UNIFIED IDEOGRAPH
                                (#xB264 . #x7795)	;CJK UNIFIED IDEOGRAPH
                                (#xB265 . #x7796)	;CJK UNIFIED IDEOGRAPH
                                (#xB266 . #x7797)	;CJK UNIFIED IDEOGRAPH
                                (#xB267 . #x7798)	;CJK UNIFIED IDEOGRAPH
                                (#xB268 . #x7799)	;CJK UNIFIED IDEOGRAPH
                                (#xB269 . #x779A)	;CJK UNIFIED IDEOGRAPH
                                (#xB26A . #x779B)	;CJK UNIFIED IDEOGRAPH
                                (#xB26B . #x779C)	;CJK UNIFIED IDEOGRAPH
                                (#xB26C . #x779D)	;CJK UNIFIED IDEOGRAPH
                                (#xB26D . #x779E)	;CJK UNIFIED IDEOGRAPH
                                (#xB26E . #x77A1)	;CJK UNIFIED IDEOGRAPH
                                (#xB26F . #x77A3)	;CJK UNIFIED IDEOGRAPH
                                (#xB270 . #x77A4)	;CJK UNIFIED IDEOGRAPH
                                (#xB271 . #x77A6)	;CJK UNIFIED IDEOGRAPH
                                (#xB272 . #x77A8)	;CJK UNIFIED IDEOGRAPH
                                (#xB273 . #x77AB)	;CJK UNIFIED IDEOGRAPH
                                (#xB274 . #x77AD)	;CJK UNIFIED IDEOGRAPH
                                (#xB275 . #x77AE)	;CJK UNIFIED IDEOGRAPH
                                (#xB276 . #x77AF)	;CJK UNIFIED IDEOGRAPH
                                (#xB277 . #x77B1)	;CJK UNIFIED IDEOGRAPH
                                (#xB278 . #x77B2)	;CJK UNIFIED IDEOGRAPH
                                (#xB279 . #x77B4)	;CJK UNIFIED IDEOGRAPH
                                (#xB27A . #x77B6)	;CJK UNIFIED IDEOGRAPH
                                (#xB27B . #x77B7)	;CJK UNIFIED IDEOGRAPH
                                (#xB27C . #x77B8)	;CJK UNIFIED IDEOGRAPH
                                (#xB27D . #x77B9)	;CJK UNIFIED IDEOGRAPH
                                (#xB27E . #x77BA)	;CJK UNIFIED IDEOGRAPH
                                (#xB280 . #x77BC)	;CJK UNIFIED IDEOGRAPH
                                (#xB281 . #x77BE)	;CJK UNIFIED IDEOGRAPH
                                (#xB282 . #x77C0)	;CJK UNIFIED IDEOGRAPH
                                (#xB283 . #x77C1)	;CJK UNIFIED IDEOGRAPH
                                (#xB284 . #x77C2)	;CJK UNIFIED IDEOGRAPH
                                (#xB285 . #x77C3)	;CJK UNIFIED IDEOGRAPH
                                (#xB286 . #x77C4)	;CJK UNIFIED IDEOGRAPH
                                (#xB287 . #x77C5)	;CJK UNIFIED IDEOGRAPH
                                (#xB288 . #x77C6)	;CJK UNIFIED IDEOGRAPH
                                (#xB289 . #x77C7)	;CJK UNIFIED IDEOGRAPH
                                (#xB28A . #x77C8)	;CJK UNIFIED IDEOGRAPH
                                (#xB28B . #x77C9)	;CJK UNIFIED IDEOGRAPH
                                (#xB28C . #x77CA)	;CJK UNIFIED IDEOGRAPH
                                (#xB28D . #x77CB)	;CJK UNIFIED IDEOGRAPH
                                (#xB28E . #x77CC)	;CJK UNIFIED IDEOGRAPH
                                (#xB28F . #x77CE)	;CJK UNIFIED IDEOGRAPH
                                (#xB290 . #x77CF)	;CJK UNIFIED IDEOGRAPH
                                (#xB291 . #x77D0)	;CJK UNIFIED IDEOGRAPH
                                (#xB292 . #x77D1)	;CJK UNIFIED IDEOGRAPH
                                (#xB293 . #x77D2)	;CJK UNIFIED IDEOGRAPH
                                (#xB294 . #x77D3)	;CJK UNIFIED IDEOGRAPH
                                (#xB295 . #x77D4)	;CJK UNIFIED IDEOGRAPH
                                (#xB296 . #x77D5)	;CJK UNIFIED IDEOGRAPH
                                (#xB297 . #x77D6)	;CJK UNIFIED IDEOGRAPH
                                (#xB298 . #x77D8)	;CJK UNIFIED IDEOGRAPH
                                (#xB299 . #x77D9)	;CJK UNIFIED IDEOGRAPH
                                (#xB29A . #x77DA)	;CJK UNIFIED IDEOGRAPH
                                (#xB29B . #x77DD)	;CJK UNIFIED IDEOGRAPH
                                (#xB29C . #x77DE)	;CJK UNIFIED IDEOGRAPH
                                (#xB29D . #x77DF)	;CJK UNIFIED IDEOGRAPH
                                (#xB29E . #x77E0)	;CJK UNIFIED IDEOGRAPH
                                (#xB29F . #x77E1)	;CJK UNIFIED IDEOGRAPH
                                (#xB2A0 . #x77E4)	;CJK UNIFIED IDEOGRAPH
                                (#xB2A1 . #x75C5)	;CJK UNIFIED IDEOGRAPH
                                (#xB2A2 . #x5E76)	;CJK UNIFIED IDEOGRAPH
                                (#xB2A3 . #x73BB)	;CJK UNIFIED IDEOGRAPH
                                (#xB2A4 . #x83E0)	;CJK UNIFIED IDEOGRAPH
                                (#xB2A5 . #x64AD)	;CJK UNIFIED IDEOGRAPH
                                (#xB2A6 . #x62E8)	;CJK UNIFIED IDEOGRAPH
                                (#xB2A7 . #x94B5)	;CJK UNIFIED IDEOGRAPH
                                (#xB2A8 . #x6CE2)	;CJK UNIFIED IDEOGRAPH
                                (#xB2A9 . #x535A)	;CJK UNIFIED IDEOGRAPH
                                (#xB2AA . #x52C3)	;CJK UNIFIED IDEOGRAPH
                                (#xB2AB . #x640F)	;CJK UNIFIED IDEOGRAPH
                                (#xB2AC . #x94C2)	;CJK UNIFIED IDEOGRAPH
                                (#xB2AD . #x7B94)	;CJK UNIFIED IDEOGRAPH
                                (#xB2AE . #x4F2F)	;CJK UNIFIED IDEOGRAPH
                                (#xB2AF . #x5E1B)	;CJK UNIFIED IDEOGRAPH
                                (#xB2B0 . #x8236)	;CJK UNIFIED IDEOGRAPH
                                (#xB2B1 . #x8116)	;CJK UNIFIED IDEOGRAPH
                                (#xB2B2 . #x818A)	;CJK UNIFIED IDEOGRAPH
                                (#xB2B3 . #x6E24)	;CJK UNIFIED IDEOGRAPH
                                (#xB2B4 . #x6CCA)	;CJK UNIFIED IDEOGRAPH
                                (#xB2B5 . #x9A73)	;CJK UNIFIED IDEOGRAPH
                                (#xB2B6 . #x6355)	;CJK UNIFIED IDEOGRAPH
                                (#xB2B7 . #x535C)	;CJK UNIFIED IDEOGRAPH
                                (#xB2B8 . #x54FA)	;CJK UNIFIED IDEOGRAPH
                                (#xB2B9 . #x8865)	;CJK UNIFIED IDEOGRAPH
                                (#xB2BA . #x57E0)	;CJK UNIFIED IDEOGRAPH
                                (#xB2BB . #x4E0D)	;CJK UNIFIED IDEOGRAPH
                                (#xB2BC . #x5E03)	;CJK UNIFIED IDEOGRAPH
                                (#xB2BD . #x6B65)	;CJK UNIFIED IDEOGRAPH
                                (#xB2BE . #x7C3F)	;CJK UNIFIED IDEOGRAPH
                                (#xB2BF . #x90E8)	;CJK UNIFIED IDEOGRAPH
                                (#xB2C0 . #x6016)	;CJK UNIFIED IDEOGRAPH
                                (#xB2C1 . #x64E6)	;CJK UNIFIED IDEOGRAPH
                                (#xB2C2 . #x731C)	;CJK UNIFIED IDEOGRAPH
                                (#xB2C3 . #x88C1)	;CJK UNIFIED IDEOGRAPH
                                (#xB2C4 . #x6750)	;CJK UNIFIED IDEOGRAPH
                                (#xB2C5 . #x624D)	;CJK UNIFIED IDEOGRAPH
                                (#xB2C6 . #x8D22)	;CJK UNIFIED IDEOGRAPH
                                (#xB2C7 . #x776C)	;CJK UNIFIED IDEOGRAPH
                                (#xB2C8 . #x8E29)	;CJK UNIFIED IDEOGRAPH
                                (#xB2C9 . #x91C7)	;CJK UNIFIED IDEOGRAPH
                                (#xB2CA . #x5F69)	;CJK UNIFIED IDEOGRAPH
                                (#xB2CB . #x83DC)	;CJK UNIFIED IDEOGRAPH
                                (#xB2CC . #x8521)	;CJK UNIFIED IDEOGRAPH
                                (#xB2CD . #x9910)	;CJK UNIFIED IDEOGRAPH
                                (#xB2CE . #x53C2)	;CJK UNIFIED IDEOGRAPH
                                (#xB2CF . #x8695)	;CJK UNIFIED IDEOGRAPH
                                (#xB2D0 . #x6B8B)	;CJK UNIFIED IDEOGRAPH
                                (#xB2D1 . #x60ED)	;CJK UNIFIED IDEOGRAPH
                                (#xB2D2 . #x60E8)	;CJK UNIFIED IDEOGRAPH
                                (#xB2D3 . #x707F)	;CJK UNIFIED IDEOGRAPH
                                (#xB2D4 . #x82CD)	;CJK UNIFIED IDEOGRAPH
                                (#xB2D5 . #x8231)	;CJK UNIFIED IDEOGRAPH
                                (#xB2D6 . #x4ED3)	;CJK UNIFIED IDEOGRAPH
                                (#xB2D7 . #x6CA7)	;CJK UNIFIED IDEOGRAPH
                                (#xB2D8 . #x85CF)	;CJK UNIFIED IDEOGRAPH
                                (#xB2D9 . #x64CD)	;CJK UNIFIED IDEOGRAPH
                                (#xB2DA . #x7CD9)	;CJK UNIFIED IDEOGRAPH
                                (#xB2DB . #x69FD)	;CJK UNIFIED IDEOGRAPH
                                (#xB2DC . #x66F9)	;CJK UNIFIED IDEOGRAPH
                                (#xB2DD . #x8349)	;CJK UNIFIED IDEOGRAPH
                                (#xB2DE . #x5395)	;CJK UNIFIED IDEOGRAPH
                                (#xB2DF . #x7B56)	;CJK UNIFIED IDEOGRAPH
                                (#xB2E0 . #x4FA7)	;CJK UNIFIED IDEOGRAPH
                                (#xB2E1 . #x518C)	;CJK UNIFIED IDEOGRAPH
                                (#xB2E2 . #x6D4B)	;CJK UNIFIED IDEOGRAPH
                                (#xB2E3 . #x5C42)	;CJK UNIFIED IDEOGRAPH
                                (#xB2E4 . #x8E6D)	;CJK UNIFIED IDEOGRAPH
                                (#xB2E5 . #x63D2)	;CJK UNIFIED IDEOGRAPH
                                (#xB2E6 . #x53C9)	;CJK UNIFIED IDEOGRAPH
                                (#xB2E7 . #x832C)	;CJK UNIFIED IDEOGRAPH
                                (#xB2E8 . #x8336)	;CJK UNIFIED IDEOGRAPH
                                (#xB2E9 . #x67E5)	;CJK UNIFIED IDEOGRAPH
                                (#xB2EA . #x78B4)	;CJK UNIFIED IDEOGRAPH
                                (#xB2EB . #x643D)	;CJK UNIFIED IDEOGRAPH
                                (#xB2EC . #x5BDF)	;CJK UNIFIED IDEOGRAPH
                                (#xB2ED . #x5C94)	;CJK UNIFIED IDEOGRAPH
                                (#xB2EE . #x5DEE)	;CJK UNIFIED IDEOGRAPH
                                (#xB2EF . #x8BE7)	;CJK UNIFIED IDEOGRAPH
                                (#xB2F0 . #x62C6)	;CJK UNIFIED IDEOGRAPH
                                (#xB2F1 . #x67F4)	;CJK UNIFIED IDEOGRAPH
                                (#xB2F2 . #x8C7A)	;CJK UNIFIED IDEOGRAPH
                                (#xB2F3 . #x6400)	;CJK UNIFIED IDEOGRAPH
                                (#xB2F4 . #x63BA)	;CJK UNIFIED IDEOGRAPH
                                (#xB2F5 . #x8749)	;CJK UNIFIED IDEOGRAPH
                                (#xB2F6 . #x998B)	;CJK UNIFIED IDEOGRAPH
                                (#xB2F7 . #x8C17)	;CJK UNIFIED IDEOGRAPH
                                (#xB2F8 . #x7F20)	;CJK UNIFIED IDEOGRAPH
                                (#xB2F9 . #x94F2)	;CJK UNIFIED IDEOGRAPH
                                (#xB2FA . #x4EA7)	;CJK UNIFIED IDEOGRAPH
                                (#xB2FB . #x9610)	;CJK UNIFIED IDEOGRAPH
                                (#xB2FC . #x98A4)	;CJK UNIFIED IDEOGRAPH
                                (#xB2FD . #x660C)	;CJK UNIFIED IDEOGRAPH
                                (#xB2FE . #x7316)	;CJK UNIFIED IDEOGRAPH
                                (#xB340 . #x77E6)	;CJK UNIFIED IDEOGRAPH
                                (#xB341 . #x77E8)	;CJK UNIFIED IDEOGRAPH
                                (#xB342 . #x77EA)	;CJK UNIFIED IDEOGRAPH
                                (#xB343 . #x77EF)	;CJK UNIFIED IDEOGRAPH
                                (#xB344 . #x77F0)	;CJK UNIFIED IDEOGRAPH
                                (#xB345 . #x77F1)	;CJK UNIFIED IDEOGRAPH
                                (#xB346 . #x77F2)	;CJK UNIFIED IDEOGRAPH
                                (#xB347 . #x77F4)	;CJK UNIFIED IDEOGRAPH
                                (#xB348 . #x77F5)	;CJK UNIFIED IDEOGRAPH
                                (#xB349 . #x77F7)	;CJK UNIFIED IDEOGRAPH
                                (#xB34A . #x77F9)	;CJK UNIFIED IDEOGRAPH
                                (#xB34B . #x77FA)	;CJK UNIFIED IDEOGRAPH
                                (#xB34C . #x77FB)	;CJK UNIFIED IDEOGRAPH
                                (#xB34D . #x77FC)	;CJK UNIFIED IDEOGRAPH
                                (#xB34E . #x7803)	;CJK UNIFIED IDEOGRAPH
                                (#xB34F . #x7804)	;CJK UNIFIED IDEOGRAPH
                                (#xB350 . #x7805)	;CJK UNIFIED IDEOGRAPH
                                (#xB351 . #x7806)	;CJK UNIFIED IDEOGRAPH
                                (#xB352 . #x7807)	;CJK UNIFIED IDEOGRAPH
                                (#xB353 . #x7808)	;CJK UNIFIED IDEOGRAPH
                                (#xB354 . #x780A)	;CJK UNIFIED IDEOGRAPH
                                (#xB355 . #x780B)	;CJK UNIFIED IDEOGRAPH
                                (#xB356 . #x780E)	;CJK UNIFIED IDEOGRAPH
                                (#xB357 . #x780F)	;CJK UNIFIED IDEOGRAPH
                                (#xB358 . #x7810)	;CJK UNIFIED IDEOGRAPH
                                (#xB359 . #x7813)	;CJK UNIFIED IDEOGRAPH
                                (#xB35A . #x7815)	;CJK UNIFIED IDEOGRAPH
                                (#xB35B . #x7819)	;CJK UNIFIED IDEOGRAPH
                                (#xB35C . #x781B)	;CJK UNIFIED IDEOGRAPH
                                (#xB35D . #x781E)	;CJK UNIFIED IDEOGRAPH
                                (#xB35E . #x7820)	;CJK UNIFIED IDEOGRAPH
                                (#xB35F . #x7821)	;CJK UNIFIED IDEOGRAPH
                                (#xB360 . #x7822)	;CJK UNIFIED IDEOGRAPH
                                (#xB361 . #x7824)	;CJK UNIFIED IDEOGRAPH
                                (#xB362 . #x7828)	;CJK UNIFIED IDEOGRAPH
                                (#xB363 . #x782A)	;CJK UNIFIED IDEOGRAPH
                                (#xB364 . #x782B)	;CJK UNIFIED IDEOGRAPH
                                (#xB365 . #x782E)	;CJK UNIFIED IDEOGRAPH
                                (#xB366 . #x782F)	;CJK UNIFIED IDEOGRAPH
                                (#xB367 . #x7831)	;CJK UNIFIED IDEOGRAPH
                                (#xB368 . #x7832)	;CJK UNIFIED IDEOGRAPH
                                (#xB369 . #x7833)	;CJK UNIFIED IDEOGRAPH
                                (#xB36A . #x7835)	;CJK UNIFIED IDEOGRAPH
                                (#xB36B . #x7836)	;CJK UNIFIED IDEOGRAPH
                                (#xB36C . #x783D)	;CJK UNIFIED IDEOGRAPH
                                (#xB36D . #x783F)	;CJK UNIFIED IDEOGRAPH
                                (#xB36E . #x7841)	;CJK UNIFIED IDEOGRAPH
                                (#xB36F . #x7842)	;CJK UNIFIED IDEOGRAPH
                                (#xB370 . #x7843)	;CJK UNIFIED IDEOGRAPH
                                (#xB371 . #x7844)	;CJK UNIFIED IDEOGRAPH
                                (#xB372 . #x7846)	;CJK UNIFIED IDEOGRAPH
                                (#xB373 . #x7848)	;CJK UNIFIED IDEOGRAPH
                                (#xB374 . #x7849)	;CJK UNIFIED IDEOGRAPH
                                (#xB375 . #x784A)	;CJK UNIFIED IDEOGRAPH
                                (#xB376 . #x784B)	;CJK UNIFIED IDEOGRAPH
                                (#xB377 . #x784D)	;CJK UNIFIED IDEOGRAPH
                                (#xB378 . #x784F)	;CJK UNIFIED IDEOGRAPH
                                (#xB379 . #x7851)	;CJK UNIFIED IDEOGRAPH
                                (#xB37A . #x7853)	;CJK UNIFIED IDEOGRAPH
                                (#xB37B . #x7854)	;CJK UNIFIED IDEOGRAPH
                                (#xB37C . #x7858)	;CJK UNIFIED IDEOGRAPH
                                (#xB37D . #x7859)	;CJK UNIFIED IDEOGRAPH
                                (#xB37E . #x785A)	;CJK UNIFIED IDEOGRAPH
                                (#xB380 . #x785B)	;CJK UNIFIED IDEOGRAPH
                                (#xB381 . #x785C)	;CJK UNIFIED IDEOGRAPH
                                (#xB382 . #x785E)	;CJK UNIFIED IDEOGRAPH
                                (#xB383 . #x785F)	;CJK UNIFIED IDEOGRAPH
                                (#xB384 . #x7860)	;CJK UNIFIED IDEOGRAPH
                                (#xB385 . #x7861)	;CJK UNIFIED IDEOGRAPH
                                (#xB386 . #x7862)	;CJK UNIFIED IDEOGRAPH
                                (#xB387 . #x7863)	;CJK UNIFIED IDEOGRAPH
                                (#xB388 . #x7864)	;CJK UNIFIED IDEOGRAPH
                                (#xB389 . #x7865)	;CJK UNIFIED IDEOGRAPH
                                (#xB38A . #x7866)	;CJK UNIFIED IDEOGRAPH
                                (#xB38B . #x7867)	;CJK UNIFIED IDEOGRAPH
                                (#xB38C . #x7868)	;CJK UNIFIED IDEOGRAPH
                                (#xB38D . #x7869)	;CJK UNIFIED IDEOGRAPH
                                (#xB38E . #x786F)	;CJK UNIFIED IDEOGRAPH
                                (#xB38F . #x7870)	;CJK UNIFIED IDEOGRAPH
                                (#xB390 . #x7871)	;CJK UNIFIED IDEOGRAPH
                                (#xB391 . #x7872)	;CJK UNIFIED IDEOGRAPH
                                (#xB392 . #x7873)	;CJK UNIFIED IDEOGRAPH
                                (#xB393 . #x7874)	;CJK UNIFIED IDEOGRAPH
                                (#xB394 . #x7875)	;CJK UNIFIED IDEOGRAPH
                                (#xB395 . #x7876)	;CJK UNIFIED IDEOGRAPH
                                (#xB396 . #x7878)	;CJK UNIFIED IDEOGRAPH
                                (#xB397 . #x7879)	;CJK UNIFIED IDEOGRAPH
                                (#xB398 . #x787A)	;CJK UNIFIED IDEOGRAPH
                                (#xB399 . #x787B)	;CJK UNIFIED IDEOGRAPH
                                (#xB39A . #x787D)	;CJK UNIFIED IDEOGRAPH
                                (#xB39B . #x787E)	;CJK UNIFIED IDEOGRAPH
                                (#xB39C . #x787F)	;CJK UNIFIED IDEOGRAPH
                                (#xB39D . #x7880)	;CJK UNIFIED IDEOGRAPH
                                (#xB39E . #x7881)	;CJK UNIFIED IDEOGRAPH
                                (#xB39F . #x7882)	;CJK UNIFIED IDEOGRAPH
                                (#xB3A0 . #x7883)	;CJK UNIFIED IDEOGRAPH
                                (#xB3A1 . #x573A)	;CJK UNIFIED IDEOGRAPH
                                (#xB3A2 . #x5C1D)	;CJK UNIFIED IDEOGRAPH
                                (#xB3A3 . #x5E38)	;CJK UNIFIED IDEOGRAPH
                                (#xB3A4 . #x957F)	;CJK UNIFIED IDEOGRAPH
                                (#xB3A5 . #x507F)	;CJK UNIFIED IDEOGRAPH
                                (#xB3A6 . #x80A0)	;CJK UNIFIED IDEOGRAPH
                                (#xB3A7 . #x5382)	;CJK UNIFIED IDEOGRAPH
                                (#xB3A8 . #x655E)	;CJK UNIFIED IDEOGRAPH
                                (#xB3A9 . #x7545)	;CJK UNIFIED IDEOGRAPH
                                (#xB3AA . #x5531)	;CJK UNIFIED IDEOGRAPH
                                (#xB3AB . #x5021)	;CJK UNIFIED IDEOGRAPH
                                (#xB3AC . #x8D85)	;CJK UNIFIED IDEOGRAPH
                                (#xB3AD . #x6284)	;CJK UNIFIED IDEOGRAPH
                                (#xB3AE . #x949E)	;CJK UNIFIED IDEOGRAPH
                                (#xB3AF . #x671D)	;CJK UNIFIED IDEOGRAPH
                                (#xB3B0 . #x5632)	;CJK UNIFIED IDEOGRAPH
                                (#xB3B1 . #x6F6E)	;CJK UNIFIED IDEOGRAPH
                                (#xB3B2 . #x5DE2)	;CJK UNIFIED IDEOGRAPH
                                (#xB3B3 . #x5435)	;CJK UNIFIED IDEOGRAPH
                                (#xB3B4 . #x7092)	;CJK UNIFIED IDEOGRAPH
                                (#xB3B5 . #x8F66)	;CJK UNIFIED IDEOGRAPH
                                (#xB3B6 . #x626F)	;CJK UNIFIED IDEOGRAPH
                                (#xB3B7 . #x64A4)	;CJK UNIFIED IDEOGRAPH
                                (#xB3B8 . #x63A3)	;CJK UNIFIED IDEOGRAPH
                                (#xB3B9 . #x5F7B)	;CJK UNIFIED IDEOGRAPH
                                (#xB3BA . #x6F88)	;CJK UNIFIED IDEOGRAPH
                                (#xB3BB . #x90F4)	;CJK UNIFIED IDEOGRAPH
                                (#xB3BC . #x81E3)	;CJK UNIFIED IDEOGRAPH
                                (#xB3BD . #x8FB0)	;CJK UNIFIED IDEOGRAPH
                                (#xB3BE . #x5C18)	;CJK UNIFIED IDEOGRAPH
                                (#xB3BF . #x6668)	;CJK UNIFIED IDEOGRAPH
                                (#xB3C0 . #x5FF1)	;CJK UNIFIED IDEOGRAPH
                                (#xB3C1 . #x6C89)	;CJK UNIFIED IDEOGRAPH
                                (#xB3C2 . #x9648)	;CJK UNIFIED IDEOGRAPH
                                (#xB3C3 . #x8D81)	;CJK UNIFIED IDEOGRAPH
                                (#xB3C4 . #x886C)	;CJK UNIFIED IDEOGRAPH
                                (#xB3C5 . #x6491)	;CJK UNIFIED IDEOGRAPH
                                (#xB3C6 . #x79F0)	;CJK UNIFIED IDEOGRAPH
                                (#xB3C7 . #x57CE)	;CJK UNIFIED IDEOGRAPH
                                (#xB3C8 . #x6A59)	;CJK UNIFIED IDEOGRAPH
                                (#xB3C9 . #x6210)	;CJK UNIFIED IDEOGRAPH
                                (#xB3CA . #x5448)	;CJK UNIFIED IDEOGRAPH
                                (#xB3CB . #x4E58)	;CJK UNIFIED IDEOGRAPH
                                (#xB3CC . #x7A0B)	;CJK UNIFIED IDEOGRAPH
                                (#xB3CD . #x60E9)	;CJK UNIFIED IDEOGRAPH
                                (#xB3CE . #x6F84)	;CJK UNIFIED IDEOGRAPH
                                (#xB3CF . #x8BDA)	;CJK UNIFIED IDEOGRAPH
                                (#xB3D0 . #x627F)	;CJK UNIFIED IDEOGRAPH
                                (#xB3D1 . #x901E)	;CJK UNIFIED IDEOGRAPH
                                (#xB3D2 . #x9A8B)	;CJK UNIFIED IDEOGRAPH
                                (#xB3D3 . #x79E4)	;CJK UNIFIED IDEOGRAPH
                                (#xB3D4 . #x5403)	;CJK UNIFIED IDEOGRAPH
                                (#xB3D5 . #x75F4)	;CJK UNIFIED IDEOGRAPH
                                (#xB3D6 . #x6301)	;CJK UNIFIED IDEOGRAPH
                                (#xB3D7 . #x5319)	;CJK UNIFIED IDEOGRAPH
                                (#xB3D8 . #x6C60)	;CJK UNIFIED IDEOGRAPH
                                (#xB3D9 . #x8FDF)	;CJK UNIFIED IDEOGRAPH
                                (#xB3DA . #x5F1B)	;CJK UNIFIED IDEOGRAPH
                                (#xB3DB . #x9A70)	;CJK UNIFIED IDEOGRAPH
                                (#xB3DC . #x803B)	;CJK UNIFIED IDEOGRAPH
                                (#xB3DD . #x9F7F)	;CJK UNIFIED IDEOGRAPH
                                (#xB3DE . #x4F88)	;CJK UNIFIED IDEOGRAPH
                                (#xB3DF . #x5C3A)	;CJK UNIFIED IDEOGRAPH
                                (#xB3E0 . #x8D64)	;CJK UNIFIED IDEOGRAPH
                                (#xB3E1 . #x7FC5)	;CJK UNIFIED IDEOGRAPH
                                (#xB3E2 . #x65A5)	;CJK UNIFIED IDEOGRAPH
                                (#xB3E3 . #x70BD)	;CJK UNIFIED IDEOGRAPH
                                (#xB3E4 . #x5145)	;CJK UNIFIED IDEOGRAPH
                                (#xB3E5 . #x51B2)	;CJK UNIFIED IDEOGRAPH
                                (#xB3E6 . #x866B)	;CJK UNIFIED IDEOGRAPH
                                (#xB3E7 . #x5D07)	;CJK UNIFIED IDEOGRAPH
                                (#xB3E8 . #x5BA0)	;CJK UNIFIED IDEOGRAPH
                                (#xB3E9 . #x62BD)	;CJK UNIFIED IDEOGRAPH
                                (#xB3EA . #x916C)	;CJK UNIFIED IDEOGRAPH
                                (#xB3EB . #x7574)	;CJK UNIFIED IDEOGRAPH
                                (#xB3EC . #x8E0C)	;CJK UNIFIED IDEOGRAPH
                                (#xB3ED . #x7A20)	;CJK UNIFIED IDEOGRAPH
                                (#xB3EE . #x6101)	;CJK UNIFIED IDEOGRAPH
                                (#xB3EF . #x7B79)	;CJK UNIFIED IDEOGRAPH
                                (#xB3F0 . #x4EC7)	;CJK UNIFIED IDEOGRAPH
                                (#xB3F1 . #x7EF8)	;CJK UNIFIED IDEOGRAPH
                                (#xB3F2 . #x7785)	;CJK UNIFIED IDEOGRAPH
                                (#xB3F3 . #x4E11)	;CJK UNIFIED IDEOGRAPH
                                (#xB3F4 . #x81ED)	;CJK UNIFIED IDEOGRAPH
                                (#xB3F5 . #x521D)	;CJK UNIFIED IDEOGRAPH
                                (#xB3F6 . #x51FA)	;CJK UNIFIED IDEOGRAPH
                                (#xB3F7 . #x6A71)	;CJK UNIFIED IDEOGRAPH
                                (#xB3F8 . #x53A8)	;CJK UNIFIED IDEOGRAPH
                                (#xB3F9 . #x8E87)	;CJK UNIFIED IDEOGRAPH
                                (#xB3FA . #x9504)	;CJK UNIFIED IDEOGRAPH
                                (#xB3FB . #x96CF)	;CJK UNIFIED IDEOGRAPH
                                (#xB3FC . #x6EC1)	;CJK UNIFIED IDEOGRAPH
                                (#xB3FD . #x9664)	;CJK UNIFIED IDEOGRAPH
                                (#xB3FE . #x695A)	;CJK UNIFIED IDEOGRAPH
                                (#xB440 . #x7884)	;CJK UNIFIED IDEOGRAPH
                                (#xB441 . #x7885)	;CJK UNIFIED IDEOGRAPH
                                (#xB442 . #x7886)	;CJK UNIFIED IDEOGRAPH
                                (#xB443 . #x7888)	;CJK UNIFIED IDEOGRAPH
                                (#xB444 . #x788A)	;CJK UNIFIED IDEOGRAPH
                                (#xB445 . #x788B)	;CJK UNIFIED IDEOGRAPH
                                (#xB446 . #x788F)	;CJK UNIFIED IDEOGRAPH
                                (#xB447 . #x7890)	;CJK UNIFIED IDEOGRAPH
                                (#xB448 . #x7892)	;CJK UNIFIED IDEOGRAPH
                                (#xB449 . #x7894)	;CJK UNIFIED IDEOGRAPH
                                (#xB44A . #x7895)	;CJK UNIFIED IDEOGRAPH
                                (#xB44B . #x7896)	;CJK UNIFIED IDEOGRAPH
                                (#xB44C . #x7899)	;CJK UNIFIED IDEOGRAPH
                                (#xB44D . #x789D)	;CJK UNIFIED IDEOGRAPH
                                (#xB44E . #x789E)	;CJK UNIFIED IDEOGRAPH
                                (#xB44F . #x78A0)	;CJK UNIFIED IDEOGRAPH
                                (#xB450 . #x78A2)	;CJK UNIFIED IDEOGRAPH
                                (#xB451 . #x78A4)	;CJK UNIFIED IDEOGRAPH
                                (#xB452 . #x78A6)	;CJK UNIFIED IDEOGRAPH
                                (#xB453 . #x78A8)	;CJK UNIFIED IDEOGRAPH
                                (#xB454 . #x78A9)	;CJK UNIFIED IDEOGRAPH
                                (#xB455 . #x78AA)	;CJK UNIFIED IDEOGRAPH
                                (#xB456 . #x78AB)	;CJK UNIFIED IDEOGRAPH
                                (#xB457 . #x78AC)	;CJK UNIFIED IDEOGRAPH
                                (#xB458 . #x78AD)	;CJK UNIFIED IDEOGRAPH
                                (#xB459 . #x78AE)	;CJK UNIFIED IDEOGRAPH
                                (#xB45A . #x78AF)	;CJK UNIFIED IDEOGRAPH
                                (#xB45B . #x78B5)	;CJK UNIFIED IDEOGRAPH
                                (#xB45C . #x78B6)	;CJK UNIFIED IDEOGRAPH
                                (#xB45D . #x78B7)	;CJK UNIFIED IDEOGRAPH
                                (#xB45E . #x78B8)	;CJK UNIFIED IDEOGRAPH
                                (#xB45F . #x78BA)	;CJK UNIFIED IDEOGRAPH
                                (#xB460 . #x78BB)	;CJK UNIFIED IDEOGRAPH
                                (#xB461 . #x78BC)	;CJK UNIFIED IDEOGRAPH
                                (#xB462 . #x78BD)	;CJK UNIFIED IDEOGRAPH
                                (#xB463 . #x78BF)	;CJK UNIFIED IDEOGRAPH
                                (#xB464 . #x78C0)	;CJK UNIFIED IDEOGRAPH
                                (#xB465 . #x78C2)	;CJK UNIFIED IDEOGRAPH
                                (#xB466 . #x78C3)	;CJK UNIFIED IDEOGRAPH
                                (#xB467 . #x78C4)	;CJK UNIFIED IDEOGRAPH
                                (#xB468 . #x78C6)	;CJK UNIFIED IDEOGRAPH
                                (#xB469 . #x78C7)	;CJK UNIFIED IDEOGRAPH
                                (#xB46A . #x78C8)	;CJK UNIFIED IDEOGRAPH
                                (#xB46B . #x78CC)	;CJK UNIFIED IDEOGRAPH
                                (#xB46C . #x78CD)	;CJK UNIFIED IDEOGRAPH
                                (#xB46D . #x78CE)	;CJK UNIFIED IDEOGRAPH
                                (#xB46E . #x78CF)	;CJK UNIFIED IDEOGRAPH
                                (#xB46F . #x78D1)	;CJK UNIFIED IDEOGRAPH
                                (#xB470 . #x78D2)	;CJK UNIFIED IDEOGRAPH
                                (#xB471 . #x78D3)	;CJK UNIFIED IDEOGRAPH
                                (#xB472 . #x78D6)	;CJK UNIFIED IDEOGRAPH
                                (#xB473 . #x78D7)	;CJK UNIFIED IDEOGRAPH
                                (#xB474 . #x78D8)	;CJK UNIFIED IDEOGRAPH
                                (#xB475 . #x78DA)	;CJK UNIFIED IDEOGRAPH
                                (#xB476 . #x78DB)	;CJK UNIFIED IDEOGRAPH
                                (#xB477 . #x78DC)	;CJK UNIFIED IDEOGRAPH
                                (#xB478 . #x78DD)	;CJK UNIFIED IDEOGRAPH
                                (#xB479 . #x78DE)	;CJK UNIFIED IDEOGRAPH
                                (#xB47A . #x78DF)	;CJK UNIFIED IDEOGRAPH
                                (#xB47B . #x78E0)	;CJK UNIFIED IDEOGRAPH
                                (#xB47C . #x78E1)	;CJK UNIFIED IDEOGRAPH
                                (#xB47D . #x78E2)	;CJK UNIFIED IDEOGRAPH
                                (#xB47E . #x78E3)	;CJK UNIFIED IDEOGRAPH
                                (#xB480 . #x78E4)	;CJK UNIFIED IDEOGRAPH
                                (#xB481 . #x78E5)	;CJK UNIFIED IDEOGRAPH
                                (#xB482 . #x78E6)	;CJK UNIFIED IDEOGRAPH
                                (#xB483 . #x78E7)	;CJK UNIFIED IDEOGRAPH
                                (#xB484 . #x78E9)	;CJK UNIFIED IDEOGRAPH
                                (#xB485 . #x78EA)	;CJK UNIFIED IDEOGRAPH
                                (#xB486 . #x78EB)	;CJK UNIFIED IDEOGRAPH
                                (#xB487 . #x78ED)	;CJK UNIFIED IDEOGRAPH
                                (#xB488 . #x78EE)	;CJK UNIFIED IDEOGRAPH
                                (#xB489 . #x78EF)	;CJK UNIFIED IDEOGRAPH
                                (#xB48A . #x78F0)	;CJK UNIFIED IDEOGRAPH
                                (#xB48B . #x78F1)	;CJK UNIFIED IDEOGRAPH
                                (#xB48C . #x78F3)	;CJK UNIFIED IDEOGRAPH
                                (#xB48D . #x78F5)	;CJK UNIFIED IDEOGRAPH
                                (#xB48E . #x78F6)	;CJK UNIFIED IDEOGRAPH
                                (#xB48F . #x78F8)	;CJK UNIFIED IDEOGRAPH
                                (#xB490 . #x78F9)	;CJK UNIFIED IDEOGRAPH
                                (#xB491 . #x78FB)	;CJK UNIFIED IDEOGRAPH
                                (#xB492 . #x78FC)	;CJK UNIFIED IDEOGRAPH
                                (#xB493 . #x78FD)	;CJK UNIFIED IDEOGRAPH
                                (#xB494 . #x78FE)	;CJK UNIFIED IDEOGRAPH
                                (#xB495 . #x78FF)	;CJK UNIFIED IDEOGRAPH
                                (#xB496 . #x7900)	;CJK UNIFIED IDEOGRAPH
                                (#xB497 . #x7902)	;CJK UNIFIED IDEOGRAPH
                                (#xB498 . #x7903)	;CJK UNIFIED IDEOGRAPH
                                (#xB499 . #x7904)	;CJK UNIFIED IDEOGRAPH
                                (#xB49A . #x7906)	;CJK UNIFIED IDEOGRAPH
                                (#xB49B . #x7907)	;CJK UNIFIED IDEOGRAPH
                                (#xB49C . #x7908)	;CJK UNIFIED IDEOGRAPH
                                (#xB49D . #x7909)	;CJK UNIFIED IDEOGRAPH
                                (#xB49E . #x790A)	;CJK UNIFIED IDEOGRAPH
                                (#xB49F . #x790B)	;CJK UNIFIED IDEOGRAPH
                                (#xB4A0 . #x790C)	;CJK UNIFIED IDEOGRAPH
                                (#xB4A1 . #x7840)	;CJK UNIFIED IDEOGRAPH
                                (#xB4A2 . #x50A8)	;CJK UNIFIED IDEOGRAPH
                                (#xB4A3 . #x77D7)	;CJK UNIFIED IDEOGRAPH
                                (#xB4A4 . #x6410)	;CJK UNIFIED IDEOGRAPH
                                (#xB4A5 . #x89E6)	;CJK UNIFIED IDEOGRAPH
                                (#xB4A6 . #x5904)	;CJK UNIFIED IDEOGRAPH
                                (#xB4A7 . #x63E3)	;CJK UNIFIED IDEOGRAPH
                                (#xB4A8 . #x5DDD)	;CJK UNIFIED IDEOGRAPH
                                (#xB4A9 . #x7A7F)	;CJK UNIFIED IDEOGRAPH
                                (#xB4AA . #x693D)	;CJK UNIFIED IDEOGRAPH
                                (#xB4AB . #x4F20)	;CJK UNIFIED IDEOGRAPH
                                (#xB4AC . #x8239)	;CJK UNIFIED IDEOGRAPH
                                (#xB4AD . #x5598)	;CJK UNIFIED IDEOGRAPH
                                (#xB4AE . #x4E32)	;CJK UNIFIED IDEOGRAPH
                                (#xB4AF . #x75AE)	;CJK UNIFIED IDEOGRAPH
                                (#xB4B0 . #x7A97)	;CJK UNIFIED IDEOGRAPH
                                (#xB4B1 . #x5E62)	;CJK UNIFIED IDEOGRAPH
                                (#xB4B2 . #x5E8A)	;CJK UNIFIED IDEOGRAPH
                                (#xB4B3 . #x95EF)	;CJK UNIFIED IDEOGRAPH
                                (#xB4B4 . #x521B)	;CJK UNIFIED IDEOGRAPH
                                (#xB4B5 . #x5439)	;CJK UNIFIED IDEOGRAPH
                                (#xB4B6 . #x708A)	;CJK UNIFIED IDEOGRAPH
                                (#xB4B7 . #x6376)	;CJK UNIFIED IDEOGRAPH
                                (#xB4B8 . #x9524)	;CJK UNIFIED IDEOGRAPH
                                (#xB4B9 . #x5782)	;CJK UNIFIED IDEOGRAPH
                                (#xB4BA . #x6625)	;CJK UNIFIED IDEOGRAPH
                                (#xB4BB . #x693F)	;CJK UNIFIED IDEOGRAPH
                                (#xB4BC . #x9187)	;CJK UNIFIED IDEOGRAPH
                                (#xB4BD . #x5507)	;CJK UNIFIED IDEOGRAPH
                                (#xB4BE . #x6DF3)	;CJK UNIFIED IDEOGRAPH
                                (#xB4BF . #x7EAF)	;CJK UNIFIED IDEOGRAPH
                                (#xB4C0 . #x8822)	;CJK UNIFIED IDEOGRAPH
                                (#xB4C1 . #x6233)	;CJK UNIFIED IDEOGRAPH
                                (#xB4C2 . #x7EF0)	;CJK UNIFIED IDEOGRAPH
                                (#xB4C3 . #x75B5)	;CJK UNIFIED IDEOGRAPH
                                (#xB4C4 . #x8328)	;CJK UNIFIED IDEOGRAPH
                                (#xB4C5 . #x78C1)	;CJK UNIFIED IDEOGRAPH
                                (#xB4C6 . #x96CC)	;CJK UNIFIED IDEOGRAPH
                                (#xB4C7 . #x8F9E)	;CJK UNIFIED IDEOGRAPH
                                (#xB4C8 . #x6148)	;CJK UNIFIED IDEOGRAPH
                                (#xB4C9 . #x74F7)	;CJK UNIFIED IDEOGRAPH
                                (#xB4CA . #x8BCD)	;CJK UNIFIED IDEOGRAPH
                                (#xB4CB . #x6B64)	;CJK UNIFIED IDEOGRAPH
                                (#xB4CC . #x523A)	;CJK UNIFIED IDEOGRAPH
                                (#xB4CD . #x8D50)	;CJK UNIFIED IDEOGRAPH
                                (#xB4CE . #x6B21)	;CJK UNIFIED IDEOGRAPH
                                (#xB4CF . #x806A)	;CJK UNIFIED IDEOGRAPH
                                (#xB4D0 . #x8471)	;CJK UNIFIED IDEOGRAPH
                                (#xB4D1 . #x56F1)	;CJK UNIFIED IDEOGRAPH
                                (#xB4D2 . #x5306)	;CJK UNIFIED IDEOGRAPH
                                (#xB4D3 . #x4ECE)	;CJK UNIFIED IDEOGRAPH
                                (#xB4D4 . #x4E1B)	;CJK UNIFIED IDEOGRAPH
                                (#xB4D5 . #x51D1)	;CJK UNIFIED IDEOGRAPH
                                (#xB4D6 . #x7C97)	;CJK UNIFIED IDEOGRAPH
                                (#xB4D7 . #x918B)	;CJK UNIFIED IDEOGRAPH
                                (#xB4D8 . #x7C07)	;CJK UNIFIED IDEOGRAPH
                                (#xB4D9 . #x4FC3)	;CJK UNIFIED IDEOGRAPH
                                (#xB4DA . #x8E7F)	;CJK UNIFIED IDEOGRAPH
                                (#xB4DB . #x7BE1)	;CJK UNIFIED IDEOGRAPH
                                (#xB4DC . #x7A9C)	;CJK UNIFIED IDEOGRAPH
                                (#xB4DD . #x6467)	;CJK UNIFIED IDEOGRAPH
                                (#xB4DE . #x5D14)	;CJK UNIFIED IDEOGRAPH
                                (#xB4DF . #x50AC)	;CJK UNIFIED IDEOGRAPH
                                (#xB4E0 . #x8106)	;CJK UNIFIED IDEOGRAPH
                                (#xB4E1 . #x7601)	;CJK UNIFIED IDEOGRAPH
                                (#xB4E2 . #x7CB9)	;CJK UNIFIED IDEOGRAPH
                                (#xB4E3 . #x6DEC)	;CJK UNIFIED IDEOGRAPH
                                (#xB4E4 . #x7FE0)	;CJK UNIFIED IDEOGRAPH
                                (#xB4E5 . #x6751)	;CJK UNIFIED IDEOGRAPH
                                (#xB4E6 . #x5B58)	;CJK UNIFIED IDEOGRAPH
                                (#xB4E7 . #x5BF8)	;CJK UNIFIED IDEOGRAPH
                                (#xB4E8 . #x78CB)	;CJK UNIFIED IDEOGRAPH
                                (#xB4E9 . #x64AE)	;CJK UNIFIED IDEOGRAPH
                                (#xB4EA . #x6413)	;CJK UNIFIED IDEOGRAPH
                                (#xB4EB . #x63AA)	;CJK UNIFIED IDEOGRAPH
                                (#xB4EC . #x632B)	;CJK UNIFIED IDEOGRAPH
                                (#xB4ED . #x9519)	;CJK UNIFIED IDEOGRAPH
                                (#xB4EE . #x642D)	;CJK UNIFIED IDEOGRAPH
                                (#xB4EF . #x8FBE)	;CJK UNIFIED IDEOGRAPH
                                (#xB4F0 . #x7B54)	;CJK UNIFIED IDEOGRAPH
                                (#xB4F1 . #x7629)	;CJK UNIFIED IDEOGRAPH
                                (#xB4F2 . #x6253)	;CJK UNIFIED IDEOGRAPH
                                (#xB4F3 . #x5927)	;CJK UNIFIED IDEOGRAPH
                                (#xB4F4 . #x5446)	;CJK UNIFIED IDEOGRAPH
                                (#xB4F5 . #x6B79)	;CJK UNIFIED IDEOGRAPH
                                (#xB4F6 . #x50A3)	;CJK UNIFIED IDEOGRAPH
                                (#xB4F7 . #x6234)	;CJK UNIFIED IDEOGRAPH
                                (#xB4F8 . #x5E26)	;CJK UNIFIED IDEOGRAPH
                                (#xB4F9 . #x6B86)	;CJK UNIFIED IDEOGRAPH
                                (#xB4FA . #x4EE3)	;CJK UNIFIED IDEOGRAPH
                                (#xB4FB . #x8D37)	;CJK UNIFIED IDEOGRAPH
                                (#xB4FC . #x888B)	;CJK UNIFIED IDEOGRAPH
                                (#xB4FD . #x5F85)	;CJK UNIFIED IDEOGRAPH
                                (#xB4FE . #x902E)	;CJK UNIFIED IDEOGRAPH
                                (#xB540 . #x790D)	;CJK UNIFIED IDEOGRAPH
                                (#xB541 . #x790E)	;CJK UNIFIED IDEOGRAPH
                                (#xB542 . #x790F)	;CJK UNIFIED IDEOGRAPH
                                (#xB543 . #x7910)	;CJK UNIFIED IDEOGRAPH
                                (#xB544 . #x7911)	;CJK UNIFIED IDEOGRAPH
                                (#xB545 . #x7912)	;CJK UNIFIED IDEOGRAPH
                                (#xB546 . #x7914)	;CJK UNIFIED IDEOGRAPH
                                (#xB547 . #x7915)	;CJK UNIFIED IDEOGRAPH
                                (#xB548 . #x7916)	;CJK UNIFIED IDEOGRAPH
                                (#xB549 . #x7917)	;CJK UNIFIED IDEOGRAPH
                                (#xB54A . #x7918)	;CJK UNIFIED IDEOGRAPH
                                (#xB54B . #x7919)	;CJK UNIFIED IDEOGRAPH
                                (#xB54C . #x791A)	;CJK UNIFIED IDEOGRAPH
                                (#xB54D . #x791B)	;CJK UNIFIED IDEOGRAPH
                                (#xB54E . #x791C)	;CJK UNIFIED IDEOGRAPH
                                (#xB54F . #x791D)	;CJK UNIFIED IDEOGRAPH
                                (#xB550 . #x791F)	;CJK UNIFIED IDEOGRAPH
                                (#xB551 . #x7920)	;CJK UNIFIED IDEOGRAPH
                                (#xB552 . #x7921)	;CJK UNIFIED IDEOGRAPH
                                (#xB553 . #x7922)	;CJK UNIFIED IDEOGRAPH
                                (#xB554 . #x7923)	;CJK UNIFIED IDEOGRAPH
                                (#xB555 . #x7925)	;CJK UNIFIED IDEOGRAPH
                                (#xB556 . #x7926)	;CJK UNIFIED IDEOGRAPH
                                (#xB557 . #x7927)	;CJK UNIFIED IDEOGRAPH
                                (#xB558 . #x7928)	;CJK UNIFIED IDEOGRAPH
                                (#xB559 . #x7929)	;CJK UNIFIED IDEOGRAPH
                                (#xB55A . #x792A)	;CJK UNIFIED IDEOGRAPH
                                (#xB55B . #x792B)	;CJK UNIFIED IDEOGRAPH
                                (#xB55C . #x792C)	;CJK UNIFIED IDEOGRAPH
                                (#xB55D . #x792D)	;CJK UNIFIED IDEOGRAPH
                                (#xB55E . #x792E)	;CJK UNIFIED IDEOGRAPH
                                (#xB55F . #x792F)	;CJK UNIFIED IDEOGRAPH
                                (#xB560 . #x7930)	;CJK UNIFIED IDEOGRAPH
                                (#xB561 . #x7931)	;CJK UNIFIED IDEOGRAPH
                                (#xB562 . #x7932)	;CJK UNIFIED IDEOGRAPH
                                (#xB563 . #x7933)	;CJK UNIFIED IDEOGRAPH
                                (#xB564 . #x7935)	;CJK UNIFIED IDEOGRAPH
                                (#xB565 . #x7936)	;CJK UNIFIED IDEOGRAPH
                                (#xB566 . #x7937)	;CJK UNIFIED IDEOGRAPH
                                (#xB567 . #x7938)	;CJK UNIFIED IDEOGRAPH
                                (#xB568 . #x7939)	;CJK UNIFIED IDEOGRAPH
                                (#xB569 . #x793D)	;CJK UNIFIED IDEOGRAPH
                                (#xB56A . #x793F)	;CJK UNIFIED IDEOGRAPH
                                (#xB56B . #x7942)	;CJK UNIFIED IDEOGRAPH
                                (#xB56C . #x7943)	;CJK UNIFIED IDEOGRAPH
                                (#xB56D . #x7944)	;CJK UNIFIED IDEOGRAPH
                                (#xB56E . #x7945)	;CJK UNIFIED IDEOGRAPH
                                (#xB56F . #x7947)	;CJK UNIFIED IDEOGRAPH
                                (#xB570 . #x794A)	;CJK UNIFIED IDEOGRAPH
                                (#xB571 . #x794B)	;CJK UNIFIED IDEOGRAPH
                                (#xB572 . #x794C)	;CJK UNIFIED IDEOGRAPH
                                (#xB573 . #x794D)	;CJK UNIFIED IDEOGRAPH
                                (#xB574 . #x794E)	;CJK UNIFIED IDEOGRAPH
                                (#xB575 . #x794F)	;CJK UNIFIED IDEOGRAPH
                                (#xB576 . #x7950)	;CJK UNIFIED IDEOGRAPH
                                (#xB577 . #x7951)	;CJK UNIFIED IDEOGRAPH
                                (#xB578 . #x7952)	;CJK UNIFIED IDEOGRAPH
                                (#xB579 . #x7954)	;CJK UNIFIED IDEOGRAPH
                                (#xB57A . #x7955)	;CJK UNIFIED IDEOGRAPH
                                (#xB57B . #x7958)	;CJK UNIFIED IDEOGRAPH
                                (#xB57C . #x7959)	;CJK UNIFIED IDEOGRAPH
                                (#xB57D . #x7961)	;CJK UNIFIED IDEOGRAPH
                                (#xB57E . #x7963)	;CJK UNIFIED IDEOGRAPH
                                (#xB580 . #x7964)	;CJK UNIFIED IDEOGRAPH
                                (#xB581 . #x7966)	;CJK UNIFIED IDEOGRAPH
                                (#xB582 . #x7969)	;CJK UNIFIED IDEOGRAPH
                                (#xB583 . #x796A)	;CJK UNIFIED IDEOGRAPH
                                (#xB584 . #x796B)	;CJK UNIFIED IDEOGRAPH
                                (#xB585 . #x796C)	;CJK UNIFIED IDEOGRAPH
                                (#xB586 . #x796E)	;CJK UNIFIED IDEOGRAPH
                                (#xB587 . #x7970)	;CJK UNIFIED IDEOGRAPH
                                (#xB588 . #x7971)	;CJK UNIFIED IDEOGRAPH
                                (#xB589 . #x7972)	;CJK UNIFIED IDEOGRAPH
                                (#xB58A . #x7973)	;CJK UNIFIED IDEOGRAPH
                                (#xB58B . #x7974)	;CJK UNIFIED IDEOGRAPH
                                (#xB58C . #x7975)	;CJK UNIFIED IDEOGRAPH
                                (#xB58D . #x7976)	;CJK UNIFIED IDEOGRAPH
                                (#xB58E . #x7979)	;CJK UNIFIED IDEOGRAPH
                                (#xB58F . #x797B)	;CJK UNIFIED IDEOGRAPH
                                (#xB590 . #x797C)	;CJK UNIFIED IDEOGRAPH
                                (#xB591 . #x797D)	;CJK UNIFIED IDEOGRAPH
                                (#xB592 . #x797E)	;CJK UNIFIED IDEOGRAPH
                                (#xB593 . #x797F)	;CJK UNIFIED IDEOGRAPH
                                (#xB594 . #x7982)	;CJK UNIFIED IDEOGRAPH
                                (#xB595 . #x7983)	;CJK UNIFIED IDEOGRAPH
                                (#xB596 . #x7986)	;CJK UNIFIED IDEOGRAPH
                                (#xB597 . #x7987)	;CJK UNIFIED IDEOGRAPH
                                (#xB598 . #x7988)	;CJK UNIFIED IDEOGRAPH
                                (#xB599 . #x7989)	;CJK UNIFIED IDEOGRAPH
                                (#xB59A . #x798B)	;CJK UNIFIED IDEOGRAPH
                                (#xB59B . #x798C)	;CJK UNIFIED IDEOGRAPH
                                (#xB59C . #x798D)	;CJK UNIFIED IDEOGRAPH
                                (#xB59D . #x798E)	;CJK UNIFIED IDEOGRAPH
                                (#xB59E . #x7990)	;CJK UNIFIED IDEOGRAPH
                                (#xB59F . #x7991)	;CJK UNIFIED IDEOGRAPH
                                (#xB5A0 . #x7992)	;CJK UNIFIED IDEOGRAPH
                                (#xB5A1 . #x6020)	;CJK UNIFIED IDEOGRAPH
                                (#xB5A2 . #x803D)	;CJK UNIFIED IDEOGRAPH
                                (#xB5A3 . #x62C5)	;CJK UNIFIED IDEOGRAPH
                                (#xB5A4 . #x4E39)	;CJK UNIFIED IDEOGRAPH
                                (#xB5A5 . #x5355)	;CJK UNIFIED IDEOGRAPH
                                (#xB5A6 . #x90F8)	;CJK UNIFIED IDEOGRAPH
                                (#xB5A7 . #x63B8)	;CJK UNIFIED IDEOGRAPH
                                (#xB5A8 . #x80C6)	;CJK UNIFIED IDEOGRAPH
                                (#xB5A9 . #x65E6)	;CJK UNIFIED IDEOGRAPH
                                (#xB5AA . #x6C2E)	;CJK UNIFIED IDEOGRAPH
                                (#xB5AB . #x4F46)	;CJK UNIFIED IDEOGRAPH
                                (#xB5AC . #x60EE)	;CJK UNIFIED IDEOGRAPH
                                (#xB5AD . #x6DE1)	;CJK UNIFIED IDEOGRAPH
                                (#xB5AE . #x8BDE)	;CJK UNIFIED IDEOGRAPH
                                (#xB5AF . #x5F39)	;CJK UNIFIED IDEOGRAPH
                                (#xB5B0 . #x86CB)	;CJK UNIFIED IDEOGRAPH
                                (#xB5B1 . #x5F53)	;CJK UNIFIED IDEOGRAPH
                                (#xB5B2 . #x6321)	;CJK UNIFIED IDEOGRAPH
                                (#xB5B3 . #x515A)	;CJK UNIFIED IDEOGRAPH
                                (#xB5B4 . #x8361)	;CJK UNIFIED IDEOGRAPH
                                (#xB5B5 . #x6863)	;CJK UNIFIED IDEOGRAPH
                                (#xB5B6 . #x5200)	;CJK UNIFIED IDEOGRAPH
                                (#xB5B7 . #x6363)	;CJK UNIFIED IDEOGRAPH
                                (#xB5B8 . #x8E48)	;CJK UNIFIED IDEOGRAPH
                                (#xB5B9 . #x5012)	;CJK UNIFIED IDEOGRAPH
                                (#xB5BA . #x5C9B)	;CJK UNIFIED IDEOGRAPH
                                (#xB5BB . #x7977)	;CJK UNIFIED IDEOGRAPH
                                (#xB5BC . #x5BFC)	;CJK UNIFIED IDEOGRAPH
                                (#xB5BD . #x5230)	;CJK UNIFIED IDEOGRAPH
                                (#xB5BE . #x7A3B)	;CJK UNIFIED IDEOGRAPH
                                (#xB5BF . #x60BC)	;CJK UNIFIED IDEOGRAPH
                                (#xB5C0 . #x9053)	;CJK UNIFIED IDEOGRAPH
                                (#xB5C1 . #x76D7)	;CJK UNIFIED IDEOGRAPH
                                (#xB5C2 . #x5FB7)	;CJK UNIFIED IDEOGRAPH
                                (#xB5C3 . #x5F97)	;CJK UNIFIED IDEOGRAPH
                                (#xB5C4 . #x7684)	;CJK UNIFIED IDEOGRAPH
                                (#xB5C5 . #x8E6C)	;CJK UNIFIED IDEOGRAPH
                                (#xB5C6 . #x706F)	;CJK UNIFIED IDEOGRAPH
                                (#xB5C7 . #x767B)	;CJK UNIFIED IDEOGRAPH
                                (#xB5C8 . #x7B49)	;CJK UNIFIED IDEOGRAPH
                                (#xB5C9 . #x77AA)	;CJK UNIFIED IDEOGRAPH
                                (#xB5CA . #x51F3)	;CJK UNIFIED IDEOGRAPH
                                (#xB5CB . #x9093)	;CJK UNIFIED IDEOGRAPH
                                (#xB5CC . #x5824)	;CJK UNIFIED IDEOGRAPH
                                (#xB5CD . #x4F4E)	;CJK UNIFIED IDEOGRAPH
                                (#xB5CE . #x6EF4)	;CJK UNIFIED IDEOGRAPH
                                (#xB5CF . #x8FEA)	;CJK UNIFIED IDEOGRAPH
                                (#xB5D0 . #x654C)	;CJK UNIFIED IDEOGRAPH
                                (#xB5D1 . #x7B1B)	;CJK UNIFIED IDEOGRAPH
                                (#xB5D2 . #x72C4)	;CJK UNIFIED IDEOGRAPH
                                (#xB5D3 . #x6DA4)	;CJK UNIFIED IDEOGRAPH
                                (#xB5D4 . #x7FDF)	;CJK UNIFIED IDEOGRAPH
                                (#xB5D5 . #x5AE1)	;CJK UNIFIED IDEOGRAPH
                                (#xB5D6 . #x62B5)	;CJK UNIFIED IDEOGRAPH
                                (#xB5D7 . #x5E95)	;CJK UNIFIED IDEOGRAPH
                                (#xB5D8 . #x5730)	;CJK UNIFIED IDEOGRAPH
                                (#xB5D9 . #x8482)	;CJK UNIFIED IDEOGRAPH
                                (#xB5DA . #x7B2C)	;CJK UNIFIED IDEOGRAPH
                                (#xB5DB . #x5E1D)	;CJK UNIFIED IDEOGRAPH
                                (#xB5DC . #x5F1F)	;CJK UNIFIED IDEOGRAPH
                                (#xB5DD . #x9012)	;CJK UNIFIED IDEOGRAPH
                                (#xB5DE . #x7F14)	;CJK UNIFIED IDEOGRAPH
                                (#xB5DF . #x98A0)	;CJK UNIFIED IDEOGRAPH
                                (#xB5E0 . #x6382)	;CJK UNIFIED IDEOGRAPH
                                (#xB5E1 . #x6EC7)	;CJK UNIFIED IDEOGRAPH
                                (#xB5E2 . #x7898)	;CJK UNIFIED IDEOGRAPH
                                (#xB5E3 . #x70B9)	;CJK UNIFIED IDEOGRAPH
                                (#xB5E4 . #x5178)	;CJK UNIFIED IDEOGRAPH
                                (#xB5E5 . #x975B)	;CJK UNIFIED IDEOGRAPH
                                (#xB5E6 . #x57AB)	;CJK UNIFIED IDEOGRAPH
                                (#xB5E7 . #x7535)	;CJK UNIFIED IDEOGRAPH
                                (#xB5E8 . #x4F43)	;CJK UNIFIED IDEOGRAPH
                                (#xB5E9 . #x7538)	;CJK UNIFIED IDEOGRAPH
                                (#xB5EA . #x5E97)	;CJK UNIFIED IDEOGRAPH
                                (#xB5EB . #x60E6)	;CJK UNIFIED IDEOGRAPH
                                (#xB5EC . #x5960)	;CJK UNIFIED IDEOGRAPH
                                (#xB5ED . #x6DC0)	;CJK UNIFIED IDEOGRAPH
                                (#xB5EE . #x6BBF)	;CJK UNIFIED IDEOGRAPH
                                (#xB5EF . #x7889)	;CJK UNIFIED IDEOGRAPH
                                (#xB5F0 . #x53FC)	;CJK UNIFIED IDEOGRAPH
                                (#xB5F1 . #x96D5)	;CJK UNIFIED IDEOGRAPH
                                (#xB5F2 . #x51CB)	;CJK UNIFIED IDEOGRAPH
                                (#xB5F3 . #x5201)	;CJK UNIFIED IDEOGRAPH
                                (#xB5F4 . #x6389)	;CJK UNIFIED IDEOGRAPH
                                (#xB5F5 . #x540A)	;CJK UNIFIED IDEOGRAPH
                                (#xB5F6 . #x9493)	;CJK UNIFIED IDEOGRAPH
                                (#xB5F7 . #x8C03)	;CJK UNIFIED IDEOGRAPH
                                (#xB5F8 . #x8DCC)	;CJK UNIFIED IDEOGRAPH
                                (#xB5F9 . #x7239)	;CJK UNIFIED IDEOGRAPH
                                (#xB5FA . #x789F)	;CJK UNIFIED IDEOGRAPH
                                (#xB5FB . #x8776)	;CJK UNIFIED IDEOGRAPH
                                (#xB5FC . #x8FED)	;CJK UNIFIED IDEOGRAPH
                                (#xB5FD . #x8C0D)	;CJK UNIFIED IDEOGRAPH
                                (#xB5FE . #x53E0)	;CJK UNIFIED IDEOGRAPH
                                (#xB640 . #x7993)	;CJK UNIFIED IDEOGRAPH
                                (#xB641 . #x7994)	;CJK UNIFIED IDEOGRAPH
                                (#xB642 . #x7995)	;CJK UNIFIED IDEOGRAPH
                                (#xB643 . #x7996)	;CJK UNIFIED IDEOGRAPH
                                (#xB644 . #x7997)	;CJK UNIFIED IDEOGRAPH
                                (#xB645 . #x7998)	;CJK UNIFIED IDEOGRAPH
                                (#xB646 . #x7999)	;CJK UNIFIED IDEOGRAPH
                                (#xB647 . #x799B)	;CJK UNIFIED IDEOGRAPH
                                (#xB648 . #x799C)	;CJK UNIFIED IDEOGRAPH
                                (#xB649 . #x799D)	;CJK UNIFIED IDEOGRAPH
                                (#xB64A . #x799E)	;CJK UNIFIED IDEOGRAPH
                                (#xB64B . #x799F)	;CJK UNIFIED IDEOGRAPH
                                (#xB64C . #x79A0)	;CJK UNIFIED IDEOGRAPH
                                (#xB64D . #x79A1)	;CJK UNIFIED IDEOGRAPH
                                (#xB64E . #x79A2)	;CJK UNIFIED IDEOGRAPH
                                (#xB64F . #x79A3)	;CJK UNIFIED IDEOGRAPH
                                (#xB650 . #x79A4)	;CJK UNIFIED IDEOGRAPH
                                (#xB651 . #x79A5)	;CJK UNIFIED IDEOGRAPH
                                (#xB652 . #x79A6)	;CJK UNIFIED IDEOGRAPH
                                (#xB653 . #x79A8)	;CJK UNIFIED IDEOGRAPH
                                (#xB654 . #x79A9)	;CJK UNIFIED IDEOGRAPH
                                (#xB655 . #x79AA)	;CJK UNIFIED IDEOGRAPH
                                (#xB656 . #x79AB)	;CJK UNIFIED IDEOGRAPH
                                (#xB657 . #x79AC)	;CJK UNIFIED IDEOGRAPH
                                (#xB658 . #x79AD)	;CJK UNIFIED IDEOGRAPH
                                (#xB659 . #x79AE)	;CJK UNIFIED IDEOGRAPH
                                (#xB65A . #x79AF)	;CJK UNIFIED IDEOGRAPH
                                (#xB65B . #x79B0)	;CJK UNIFIED IDEOGRAPH
                                (#xB65C . #x79B1)	;CJK UNIFIED IDEOGRAPH
                                (#xB65D . #x79B2)	;CJK UNIFIED IDEOGRAPH
                                (#xB65E . #x79B4)	;CJK UNIFIED IDEOGRAPH
                                (#xB65F . #x79B5)	;CJK UNIFIED IDEOGRAPH
                                (#xB660 . #x79B6)	;CJK UNIFIED IDEOGRAPH
                                (#xB661 . #x79B7)	;CJK UNIFIED IDEOGRAPH
                                (#xB662 . #x79B8)	;CJK UNIFIED IDEOGRAPH
                                (#xB663 . #x79BC)	;CJK UNIFIED IDEOGRAPH
                                (#xB664 . #x79BF)	;CJK UNIFIED IDEOGRAPH
                                (#xB665 . #x79C2)	;CJK UNIFIED IDEOGRAPH
                                (#xB666 . #x79C4)	;CJK UNIFIED IDEOGRAPH
                                (#xB667 . #x79C5)	;CJK UNIFIED IDEOGRAPH
                                (#xB668 . #x79C7)	;CJK UNIFIED IDEOGRAPH
                                (#xB669 . #x79C8)	;CJK UNIFIED IDEOGRAPH
                                (#xB66A . #x79CA)	;CJK UNIFIED IDEOGRAPH
                                (#xB66B . #x79CC)	;CJK UNIFIED IDEOGRAPH
                                (#xB66C . #x79CE)	;CJK UNIFIED IDEOGRAPH
                                (#xB66D . #x79CF)	;CJK UNIFIED IDEOGRAPH
                                (#xB66E . #x79D0)	;CJK UNIFIED IDEOGRAPH
                                (#xB66F . #x79D3)	;CJK UNIFIED IDEOGRAPH
                                (#xB670 . #x79D4)	;CJK UNIFIED IDEOGRAPH
                                (#xB671 . #x79D6)	;CJK UNIFIED IDEOGRAPH
                                (#xB672 . #x79D7)	;CJK UNIFIED IDEOGRAPH
                                (#xB673 . #x79D9)	;CJK UNIFIED IDEOGRAPH
                                (#xB674 . #x79DA)	;CJK UNIFIED IDEOGRAPH
                                (#xB675 . #x79DB)	;CJK UNIFIED IDEOGRAPH
                                (#xB676 . #x79DC)	;CJK UNIFIED IDEOGRAPH
                                (#xB677 . #x79DD)	;CJK UNIFIED IDEOGRAPH
                                (#xB678 . #x79DE)	;CJK UNIFIED IDEOGRAPH
                                (#xB679 . #x79E0)	;CJK UNIFIED IDEOGRAPH
                                (#xB67A . #x79E1)	;CJK UNIFIED IDEOGRAPH
                                (#xB67B . #x79E2)	;CJK UNIFIED IDEOGRAPH
                                (#xB67C . #x79E5)	;CJK UNIFIED IDEOGRAPH
                                (#xB67D . #x79E8)	;CJK UNIFIED IDEOGRAPH
                                (#xB67E . #x79EA)	;CJK UNIFIED IDEOGRAPH
                                (#xB680 . #x79EC)	;CJK UNIFIED IDEOGRAPH
                                (#xB681 . #x79EE)	;CJK UNIFIED IDEOGRAPH
                                (#xB682 . #x79F1)	;CJK UNIFIED IDEOGRAPH
                                (#xB683 . #x79F2)	;CJK UNIFIED IDEOGRAPH
                                (#xB684 . #x79F3)	;CJK UNIFIED IDEOGRAPH
                                (#xB685 . #x79F4)	;CJK UNIFIED IDEOGRAPH
                                (#xB686 . #x79F5)	;CJK UNIFIED IDEOGRAPH
                                (#xB687 . #x79F6)	;CJK UNIFIED IDEOGRAPH
                                (#xB688 . #x79F7)	;CJK UNIFIED IDEOGRAPH
                                (#xB689 . #x79F9)	;CJK UNIFIED IDEOGRAPH
                                (#xB68A . #x79FA)	;CJK UNIFIED IDEOGRAPH
                                (#xB68B . #x79FC)	;CJK UNIFIED IDEOGRAPH
                                (#xB68C . #x79FE)	;CJK UNIFIED IDEOGRAPH
                                (#xB68D . #x79FF)	;CJK UNIFIED IDEOGRAPH
                                (#xB68E . #x7A01)	;CJK UNIFIED IDEOGRAPH
                                (#xB68F . #x7A04)	;CJK UNIFIED IDEOGRAPH
                                (#xB690 . #x7A05)	;CJK UNIFIED IDEOGRAPH
                                (#xB691 . #x7A07)	;CJK UNIFIED IDEOGRAPH
                                (#xB692 . #x7A08)	;CJK UNIFIED IDEOGRAPH
                                (#xB693 . #x7A09)	;CJK UNIFIED IDEOGRAPH
                                (#xB694 . #x7A0A)	;CJK UNIFIED IDEOGRAPH
                                (#xB695 . #x7A0C)	;CJK UNIFIED IDEOGRAPH
                                (#xB696 . #x7A0F)	;CJK UNIFIED IDEOGRAPH
                                (#xB697 . #x7A10)	;CJK UNIFIED IDEOGRAPH
                                (#xB698 . #x7A11)	;CJK UNIFIED IDEOGRAPH
                                (#xB699 . #x7A12)	;CJK UNIFIED IDEOGRAPH
                                (#xB69A . #x7A13)	;CJK UNIFIED IDEOGRAPH
                                (#xB69B . #x7A15)	;CJK UNIFIED IDEOGRAPH
                                (#xB69C . #x7A16)	;CJK UNIFIED IDEOGRAPH
                                (#xB69D . #x7A18)	;CJK UNIFIED IDEOGRAPH
                                (#xB69E . #x7A19)	;CJK UNIFIED IDEOGRAPH
                                (#xB69F . #x7A1B)	;CJK UNIFIED IDEOGRAPH
                                (#xB6A0 . #x7A1C)	;CJK UNIFIED IDEOGRAPH
                                (#xB6A1 . #x4E01)	;CJK UNIFIED IDEOGRAPH
                                (#xB6A2 . #x76EF)	;CJK UNIFIED IDEOGRAPH
                                (#xB6A3 . #x53EE)	;CJK UNIFIED IDEOGRAPH
                                (#xB6A4 . #x9489)	;CJK UNIFIED IDEOGRAPH
                                (#xB6A5 . #x9876)	;CJK UNIFIED IDEOGRAPH
                                (#xB6A6 . #x9F0E)	;CJK UNIFIED IDEOGRAPH
                                (#xB6A7 . #x952D)	;CJK UNIFIED IDEOGRAPH
                                (#xB6A8 . #x5B9A)	;CJK UNIFIED IDEOGRAPH
                                (#xB6A9 . #x8BA2)	;CJK UNIFIED IDEOGRAPH
                                (#xB6AA . #x4E22)	;CJK UNIFIED IDEOGRAPH
                                (#xB6AB . #x4E1C)	;CJK UNIFIED IDEOGRAPH
                                (#xB6AC . #x51AC)	;CJK UNIFIED IDEOGRAPH
                                (#xB6AD . #x8463)	;CJK UNIFIED IDEOGRAPH
                                (#xB6AE . #x61C2)	;CJK UNIFIED IDEOGRAPH
                                (#xB6AF . #x52A8)	;CJK UNIFIED IDEOGRAPH
                                (#xB6B0 . #x680B)	;CJK UNIFIED IDEOGRAPH
                                (#xB6B1 . #x4F97)	;CJK UNIFIED IDEOGRAPH
                                (#xB6B2 . #x606B)	;CJK UNIFIED IDEOGRAPH
                                (#xB6B3 . #x51BB)	;CJK UNIFIED IDEOGRAPH
                                (#xB6B4 . #x6D1E)	;CJK UNIFIED IDEOGRAPH
                                (#xB6B5 . #x515C)	;CJK UNIFIED IDEOGRAPH
                                (#xB6B6 . #x6296)	;CJK UNIFIED IDEOGRAPH
                                (#xB6B7 . #x6597)	;CJK UNIFIED IDEOGRAPH
                                (#xB6B8 . #x9661)	;CJK UNIFIED IDEOGRAPH
                                (#xB6B9 . #x8C46)	;CJK UNIFIED IDEOGRAPH
                                (#xB6BA . #x9017)	;CJK UNIFIED IDEOGRAPH
                                (#xB6BB . #x75D8)	;CJK UNIFIED IDEOGRAPH
                                (#xB6BC . #x90FD)	;CJK UNIFIED IDEOGRAPH
                                (#xB6BD . #x7763)	;CJK UNIFIED IDEOGRAPH
                                (#xB6BE . #x6BD2)	;CJK UNIFIED IDEOGRAPH
                                (#xB6BF . #x728A)	;CJK UNIFIED IDEOGRAPH
                                (#xB6C0 . #x72EC)	;CJK UNIFIED IDEOGRAPH
                                (#xB6C1 . #x8BFB)	;CJK UNIFIED IDEOGRAPH
                                (#xB6C2 . #x5835)	;CJK UNIFIED IDEOGRAPH
                                (#xB6C3 . #x7779)	;CJK UNIFIED IDEOGRAPH
                                (#xB6C4 . #x8D4C)	;CJK UNIFIED IDEOGRAPH
                                (#xB6C5 . #x675C)	;CJK UNIFIED IDEOGRAPH
                                (#xB6C6 . #x9540)	;CJK UNIFIED IDEOGRAPH
                                (#xB6C7 . #x809A)	;CJK UNIFIED IDEOGRAPH
                                (#xB6C8 . #x5EA6)	;CJK UNIFIED IDEOGRAPH
                                (#xB6C9 . #x6E21)	;CJK UNIFIED IDEOGRAPH
                                (#xB6CA . #x5992)	;CJK UNIFIED IDEOGRAPH
                                (#xB6CB . #x7AEF)	;CJK UNIFIED IDEOGRAPH
                                (#xB6CC . #x77ED)	;CJK UNIFIED IDEOGRAPH
                                (#xB6CD . #x953B)	;CJK UNIFIED IDEOGRAPH
                                (#xB6CE . #x6BB5)	;CJK UNIFIED IDEOGRAPH
                                (#xB6CF . #x65AD)	;CJK UNIFIED IDEOGRAPH
                                (#xB6D0 . #x7F0E)	;CJK UNIFIED IDEOGRAPH
                                (#xB6D1 . #x5806)	;CJK UNIFIED IDEOGRAPH
                                (#xB6D2 . #x5151)	;CJK UNIFIED IDEOGRAPH
                                (#xB6D3 . #x961F)	;CJK UNIFIED IDEOGRAPH
                                (#xB6D4 . #x5BF9)	;CJK UNIFIED IDEOGRAPH
                                (#xB6D5 . #x58A9)	;CJK UNIFIED IDEOGRAPH
                                (#xB6D6 . #x5428)	;CJK UNIFIED IDEOGRAPH
                                (#xB6D7 . #x8E72)	;CJK UNIFIED IDEOGRAPH
                                (#xB6D8 . #x6566)	;CJK UNIFIED IDEOGRAPH
                                (#xB6D9 . #x987F)	;CJK UNIFIED IDEOGRAPH
                                (#xB6DA . #x56E4)	;CJK UNIFIED IDEOGRAPH
                                (#xB6DB . #x949D)	;CJK UNIFIED IDEOGRAPH
                                (#xB6DC . #x76FE)	;CJK UNIFIED IDEOGRAPH
                                (#xB6DD . #x9041)	;CJK UNIFIED IDEOGRAPH
                                (#xB6DE . #x6387)	;CJK UNIFIED IDEOGRAPH
                                (#xB6DF . #x54C6)	;CJK UNIFIED IDEOGRAPH
                                (#xB6E0 . #x591A)	;CJK UNIFIED IDEOGRAPH
                                (#xB6E1 . #x593A)	;CJK UNIFIED IDEOGRAPH
                                (#xB6E2 . #x579B)	;CJK UNIFIED IDEOGRAPH
                                (#xB6E3 . #x8EB2)	;CJK UNIFIED IDEOGRAPH
                                (#xB6E4 . #x6735)	;CJK UNIFIED IDEOGRAPH
                                (#xB6E5 . #x8DFA)	;CJK UNIFIED IDEOGRAPH
                                (#xB6E6 . #x8235)	;CJK UNIFIED IDEOGRAPH
                                (#xB6E7 . #x5241)	;CJK UNIFIED IDEOGRAPH
                                (#xB6E8 . #x60F0)	;CJK UNIFIED IDEOGRAPH
                                (#xB6E9 . #x5815)	;CJK UNIFIED IDEOGRAPH
                                (#xB6EA . #x86FE)	;CJK UNIFIED IDEOGRAPH
                                (#xB6EB . #x5CE8)	;CJK UNIFIED IDEOGRAPH
                                (#xB6EC . #x9E45)	;CJK UNIFIED IDEOGRAPH
                                (#xB6ED . #x4FC4)	;CJK UNIFIED IDEOGRAPH
                                (#xB6EE . #x989D)	;CJK UNIFIED IDEOGRAPH
                                (#xB6EF . #x8BB9)	;CJK UNIFIED IDEOGRAPH
                                (#xB6F0 . #x5A25)	;CJK UNIFIED IDEOGRAPH
                                (#xB6F1 . #x6076)	;CJK UNIFIED IDEOGRAPH
                                (#xB6F2 . #x5384)	;CJK UNIFIED IDEOGRAPH
                                (#xB6F3 . #x627C)	;CJK UNIFIED IDEOGRAPH
                                (#xB6F4 . #x904F)	;CJK UNIFIED IDEOGRAPH
                                (#xB6F5 . #x9102)	;CJK UNIFIED IDEOGRAPH
                                (#xB6F6 . #x997F)	;CJK UNIFIED IDEOGRAPH
                                (#xB6F7 . #x6069)	;CJK UNIFIED IDEOGRAPH
                                (#xB6F8 . #x800C)	;CJK UNIFIED IDEOGRAPH
                                (#xB6F9 . #x513F)	;CJK UNIFIED IDEOGRAPH
                                (#xB6FA . #x8033)	;CJK UNIFIED IDEOGRAPH
                                (#xB6FB . #x5C14)	;CJK UNIFIED IDEOGRAPH
                                (#xB6FC . #x9975)	;CJK UNIFIED IDEOGRAPH
                                (#xB6FD . #x6D31)	;CJK UNIFIED IDEOGRAPH
                                (#xB6FE . #x4E8C)	;CJK UNIFIED IDEOGRAPH
                                (#xB740 . #x7A1D)	;CJK UNIFIED IDEOGRAPH
                                (#xB741 . #x7A1F)	;CJK UNIFIED IDEOGRAPH
                                (#xB742 . #x7A21)	;CJK UNIFIED IDEOGRAPH
                                (#xB743 . #x7A22)	;CJK UNIFIED IDEOGRAPH
                                (#xB744 . #x7A24)	;CJK UNIFIED IDEOGRAPH
                                (#xB745 . #x7A25)	;CJK UNIFIED IDEOGRAPH
                                (#xB746 . #x7A26)	;CJK UNIFIED IDEOGRAPH
                                (#xB747 . #x7A27)	;CJK UNIFIED IDEOGRAPH
                                (#xB748 . #x7A28)	;CJK UNIFIED IDEOGRAPH
                                (#xB749 . #x7A29)	;CJK UNIFIED IDEOGRAPH
                                (#xB74A . #x7A2A)	;CJK UNIFIED IDEOGRAPH
                                (#xB74B . #x7A2B)	;CJK UNIFIED IDEOGRAPH
                                (#xB74C . #x7A2C)	;CJK UNIFIED IDEOGRAPH
                                (#xB74D . #x7A2D)	;CJK UNIFIED IDEOGRAPH
                                (#xB74E . #x7A2E)	;CJK UNIFIED IDEOGRAPH
                                (#xB74F . #x7A2F)	;CJK UNIFIED IDEOGRAPH
                                (#xB750 . #x7A30)	;CJK UNIFIED IDEOGRAPH
                                (#xB751 . #x7A31)	;CJK UNIFIED IDEOGRAPH
                                (#xB752 . #x7A32)	;CJK UNIFIED IDEOGRAPH
                                (#xB753 . #x7A34)	;CJK UNIFIED IDEOGRAPH
                                (#xB754 . #x7A35)	;CJK UNIFIED IDEOGRAPH
                                (#xB755 . #x7A36)	;CJK UNIFIED IDEOGRAPH
                                (#xB756 . #x7A38)	;CJK UNIFIED IDEOGRAPH
                                (#xB757 . #x7A3A)	;CJK UNIFIED IDEOGRAPH
                                (#xB758 . #x7A3E)	;CJK UNIFIED IDEOGRAPH
                                (#xB759 . #x7A40)	;CJK UNIFIED IDEOGRAPH
                                (#xB75A . #x7A41)	;CJK UNIFIED IDEOGRAPH
                                (#xB75B . #x7A42)	;CJK UNIFIED IDEOGRAPH
                                (#xB75C . #x7A43)	;CJK UNIFIED IDEOGRAPH
                                (#xB75D . #x7A44)	;CJK UNIFIED IDEOGRAPH
                                (#xB75E . #x7A45)	;CJK UNIFIED IDEOGRAPH
                                (#xB75F . #x7A47)	;CJK UNIFIED IDEOGRAPH
                                (#xB760 . #x7A48)	;CJK UNIFIED IDEOGRAPH
                                (#xB761 . #x7A49)	;CJK UNIFIED IDEOGRAPH
                                (#xB762 . #x7A4A)	;CJK UNIFIED IDEOGRAPH
                                (#xB763 . #x7A4B)	;CJK UNIFIED IDEOGRAPH
                                (#xB764 . #x7A4C)	;CJK UNIFIED IDEOGRAPH
                                (#xB765 . #x7A4D)	;CJK UNIFIED IDEOGRAPH
                                (#xB766 . #x7A4E)	;CJK UNIFIED IDEOGRAPH
                                (#xB767 . #x7A4F)	;CJK UNIFIED IDEOGRAPH
                                (#xB768 . #x7A50)	;CJK UNIFIED IDEOGRAPH
                                (#xB769 . #x7A52)	;CJK UNIFIED IDEOGRAPH
                                (#xB76A . #x7A53)	;CJK UNIFIED IDEOGRAPH
                                (#xB76B . #x7A54)	;CJK UNIFIED IDEOGRAPH
                                (#xB76C . #x7A55)	;CJK UNIFIED IDEOGRAPH
                                (#xB76D . #x7A56)	;CJK UNIFIED IDEOGRAPH
                                (#xB76E . #x7A58)	;CJK UNIFIED IDEOGRAPH
                                (#xB76F . #x7A59)	;CJK UNIFIED IDEOGRAPH
                                (#xB770 . #x7A5A)	;CJK UNIFIED IDEOGRAPH
                                (#xB771 . #x7A5B)	;CJK UNIFIED IDEOGRAPH
                                (#xB772 . #x7A5C)	;CJK UNIFIED IDEOGRAPH
                                (#xB773 . #x7A5D)	;CJK UNIFIED IDEOGRAPH
                                (#xB774 . #x7A5E)	;CJK UNIFIED IDEOGRAPH
                                (#xB775 . #x7A5F)	;CJK UNIFIED IDEOGRAPH
                                (#xB776 . #x7A60)	;CJK UNIFIED IDEOGRAPH
                                (#xB777 . #x7A61)	;CJK UNIFIED IDEOGRAPH
                                (#xB778 . #x7A62)	;CJK UNIFIED IDEOGRAPH
                                (#xB779 . #x7A63)	;CJK UNIFIED IDEOGRAPH
                                (#xB77A . #x7A64)	;CJK UNIFIED IDEOGRAPH
                                (#xB77B . #x7A65)	;CJK UNIFIED IDEOGRAPH
                                (#xB77C . #x7A66)	;CJK UNIFIED IDEOGRAPH
                                (#xB77D . #x7A67)	;CJK UNIFIED IDEOGRAPH
                                (#xB77E . #x7A68)	;CJK UNIFIED IDEOGRAPH
                                (#xB780 . #x7A69)	;CJK UNIFIED IDEOGRAPH
                                (#xB781 . #x7A6A)	;CJK UNIFIED IDEOGRAPH
                                (#xB782 . #x7A6B)	;CJK UNIFIED IDEOGRAPH
                                (#xB783 . #x7A6C)	;CJK UNIFIED IDEOGRAPH
                                (#xB784 . #x7A6D)	;CJK UNIFIED IDEOGRAPH
                                (#xB785 . #x7A6E)	;CJK UNIFIED IDEOGRAPH
                                (#xB786 . #x7A6F)	;CJK UNIFIED IDEOGRAPH
                                (#xB787 . #x7A71)	;CJK UNIFIED IDEOGRAPH
                                (#xB788 . #x7A72)	;CJK UNIFIED IDEOGRAPH
                                (#xB789 . #x7A73)	;CJK UNIFIED IDEOGRAPH
                                (#xB78A . #x7A75)	;CJK UNIFIED IDEOGRAPH
                                (#xB78B . #x7A7B)	;CJK UNIFIED IDEOGRAPH
                                (#xB78C . #x7A7C)	;CJK UNIFIED IDEOGRAPH
                                (#xB78D . #x7A7D)	;CJK UNIFIED IDEOGRAPH
                                (#xB78E . #x7A7E)	;CJK UNIFIED IDEOGRAPH
                                (#xB78F . #x7A82)	;CJK UNIFIED IDEOGRAPH
                                (#xB790 . #x7A85)	;CJK UNIFIED IDEOGRAPH
                                (#xB791 . #x7A87)	;CJK UNIFIED IDEOGRAPH
                                (#xB792 . #x7A89)	;CJK UNIFIED IDEOGRAPH
                                (#xB793 . #x7A8A)	;CJK UNIFIED IDEOGRAPH
                                (#xB794 . #x7A8B)	;CJK UNIFIED IDEOGRAPH
                                (#xB795 . #x7A8C)	;CJK UNIFIED IDEOGRAPH
                                (#xB796 . #x7A8E)	;CJK UNIFIED IDEOGRAPH
                                (#xB797 . #x7A8F)	;CJK UNIFIED IDEOGRAPH
                                (#xB798 . #x7A90)	;CJK UNIFIED IDEOGRAPH
                                (#xB799 . #x7A93)	;CJK UNIFIED IDEOGRAPH
                                (#xB79A . #x7A94)	;CJK UNIFIED IDEOGRAPH
                                (#xB79B . #x7A99)	;CJK UNIFIED IDEOGRAPH
                                (#xB79C . #x7A9A)	;CJK UNIFIED IDEOGRAPH
                                (#xB79D . #x7A9B)	;CJK UNIFIED IDEOGRAPH
                                (#xB79E . #x7A9E)	;CJK UNIFIED IDEOGRAPH
                                (#xB79F . #x7AA1)	;CJK UNIFIED IDEOGRAPH
                                (#xB7A0 . #x7AA2)	;CJK UNIFIED IDEOGRAPH
                                (#xB7A1 . #x8D30)	;CJK UNIFIED IDEOGRAPH
                                (#xB7A2 . #x53D1)	;CJK UNIFIED IDEOGRAPH
                                (#xB7A3 . #x7F5A)	;CJK UNIFIED IDEOGRAPH
                                (#xB7A4 . #x7B4F)	;CJK UNIFIED IDEOGRAPH
                                (#xB7A5 . #x4F10)	;CJK UNIFIED IDEOGRAPH
                                (#xB7A6 . #x4E4F)	;CJK UNIFIED IDEOGRAPH
                                (#xB7A7 . #x9600)	;CJK UNIFIED IDEOGRAPH
                                (#xB7A8 . #x6CD5)	;CJK UNIFIED IDEOGRAPH
                                (#xB7A9 . #x73D0)	;CJK UNIFIED IDEOGRAPH
                                (#xB7AA . #x85E9)	;CJK UNIFIED IDEOGRAPH
                                (#xB7AB . #x5E06)	;CJK UNIFIED IDEOGRAPH
                                (#xB7AC . #x756A)	;CJK UNIFIED IDEOGRAPH
                                (#xB7AD . #x7FFB)	;CJK UNIFIED IDEOGRAPH
                                (#xB7AE . #x6A0A)	;CJK UNIFIED IDEOGRAPH
                                (#xB7AF . #x77FE)	;CJK UNIFIED IDEOGRAPH
                                (#xB7B0 . #x9492)	;CJK UNIFIED IDEOGRAPH
                                (#xB7B1 . #x7E41)	;CJK UNIFIED IDEOGRAPH
                                (#xB7B2 . #x51E1)	;CJK UNIFIED IDEOGRAPH
                                (#xB7B3 . #x70E6)	;CJK UNIFIED IDEOGRAPH
                                (#xB7B4 . #x53CD)	;CJK UNIFIED IDEOGRAPH
                                (#xB7B5 . #x8FD4)	;CJK UNIFIED IDEOGRAPH
                                (#xB7B6 . #x8303)	;CJK UNIFIED IDEOGRAPH
                                (#xB7B7 . #x8D29)	;CJK UNIFIED IDEOGRAPH
                                (#xB7B8 . #x72AF)	;CJK UNIFIED IDEOGRAPH
                                (#xB7B9 . #x996D)	;CJK UNIFIED IDEOGRAPH
                                (#xB7BA . #x6CDB)	;CJK UNIFIED IDEOGRAPH
                                (#xB7BB . #x574A)	;CJK UNIFIED IDEOGRAPH
                                (#xB7BC . #x82B3)	;CJK UNIFIED IDEOGRAPH
                                (#xB7BD . #x65B9)	;CJK UNIFIED IDEOGRAPH
                                (#xB7BE . #x80AA)	;CJK UNIFIED IDEOGRAPH
                                (#xB7BF . #x623F)	;CJK UNIFIED IDEOGRAPH
                                (#xB7C0 . #x9632)	;CJK UNIFIED IDEOGRAPH
                                (#xB7C1 . #x59A8)	;CJK UNIFIED IDEOGRAPH
                                (#xB7C2 . #x4EFF)	;CJK UNIFIED IDEOGRAPH
                                (#xB7C3 . #x8BBF)	;CJK UNIFIED IDEOGRAPH
                                (#xB7C4 . #x7EBA)	;CJK UNIFIED IDEOGRAPH
                                (#xB7C5 . #x653E)	;CJK UNIFIED IDEOGRAPH
                                (#xB7C6 . #x83F2)	;CJK UNIFIED IDEOGRAPH
                                (#xB7C7 . #x975E)	;CJK UNIFIED IDEOGRAPH
                                (#xB7C8 . #x5561)	;CJK UNIFIED IDEOGRAPH
                                (#xB7C9 . #x98DE)	;CJK UNIFIED IDEOGRAPH
                                (#xB7CA . #x80A5)	;CJK UNIFIED IDEOGRAPH
                                (#xB7CB . #x532A)	;CJK UNIFIED IDEOGRAPH
                                (#xB7CC . #x8BFD)	;CJK UNIFIED IDEOGRAPH
                                (#xB7CD . #x5420)	;CJK UNIFIED IDEOGRAPH
                                (#xB7CE . #x80BA)	;CJK UNIFIED IDEOGRAPH
                                (#xB7CF . #x5E9F)	;CJK UNIFIED IDEOGRAPH
                                (#xB7D0 . #x6CB8)	;CJK UNIFIED IDEOGRAPH
                                (#xB7D1 . #x8D39)	;CJK UNIFIED IDEOGRAPH
                                (#xB7D2 . #x82AC)	;CJK UNIFIED IDEOGRAPH
                                (#xB7D3 . #x915A)	;CJK UNIFIED IDEOGRAPH
                                (#xB7D4 . #x5429)	;CJK UNIFIED IDEOGRAPH
                                (#xB7D5 . #x6C1B)	;CJK UNIFIED IDEOGRAPH
                                (#xB7D6 . #x5206)	;CJK UNIFIED IDEOGRAPH
                                (#xB7D7 . #x7EB7)	;CJK UNIFIED IDEOGRAPH
                                (#xB7D8 . #x575F)	;CJK UNIFIED IDEOGRAPH
                                (#xB7D9 . #x711A)	;CJK UNIFIED IDEOGRAPH
                                (#xB7DA . #x6C7E)	;CJK UNIFIED IDEOGRAPH
                                (#xB7DB . #x7C89)	;CJK UNIFIED IDEOGRAPH
                                (#xB7DC . #x594B)	;CJK UNIFIED IDEOGRAPH
                                (#xB7DD . #x4EFD)	;CJK UNIFIED IDEOGRAPH
                                (#xB7DE . #x5FFF)	;CJK UNIFIED IDEOGRAPH
                                (#xB7DF . #x6124)	;CJK UNIFIED IDEOGRAPH
                                (#xB7E0 . #x7CAA)	;CJK UNIFIED IDEOGRAPH
                                (#xB7E1 . #x4E30)	;CJK UNIFIED IDEOGRAPH
                                (#xB7E2 . #x5C01)	;CJK UNIFIED IDEOGRAPH
                                (#xB7E3 . #x67AB)	;CJK UNIFIED IDEOGRAPH
                                (#xB7E4 . #x8702)	;CJK UNIFIED IDEOGRAPH
                                (#xB7E5 . #x5CF0)	;CJK UNIFIED IDEOGRAPH
                                (#xB7E6 . #x950B)	;CJK UNIFIED IDEOGRAPH
                                (#xB7E7 . #x98CE)	;CJK UNIFIED IDEOGRAPH
                                (#xB7E8 . #x75AF)	;CJK UNIFIED IDEOGRAPH
                                (#xB7E9 . #x70FD)	;CJK UNIFIED IDEOGRAPH
                                (#xB7EA . #x9022)	;CJK UNIFIED IDEOGRAPH
                                (#xB7EB . #x51AF)	;CJK UNIFIED IDEOGRAPH
                                (#xB7EC . #x7F1D)	;CJK UNIFIED IDEOGRAPH
                                (#xB7ED . #x8BBD)	;CJK UNIFIED IDEOGRAPH
                                (#xB7EE . #x5949)	;CJK UNIFIED IDEOGRAPH
                                (#xB7EF . #x51E4)	;CJK UNIFIED IDEOGRAPH
                                (#xB7F0 . #x4F5B)	;CJK UNIFIED IDEOGRAPH
                                (#xB7F1 . #x5426)	;CJK UNIFIED IDEOGRAPH
                                (#xB7F2 . #x592B)	;CJK UNIFIED IDEOGRAPH
                                (#xB7F3 . #x6577)	;CJK UNIFIED IDEOGRAPH
                                (#xB7F4 . #x80A4)	;CJK UNIFIED IDEOGRAPH
                                (#xB7F5 . #x5B75)	;CJK UNIFIED IDEOGRAPH
                                (#xB7F6 . #x6276)	;CJK UNIFIED IDEOGRAPH
                                (#xB7F7 . #x62C2)	;CJK UNIFIED IDEOGRAPH
                                (#xB7F8 . #x8F90)	;CJK UNIFIED IDEOGRAPH
                                (#xB7F9 . #x5E45)	;CJK UNIFIED IDEOGRAPH
                                (#xB7FA . #x6C1F)	;CJK UNIFIED IDEOGRAPH
                                (#xB7FB . #x7B26)	;CJK UNIFIED IDEOGRAPH
                                (#xB7FC . #x4F0F)	;CJK UNIFIED IDEOGRAPH
                                (#xB7FD . #x4FD8)	;CJK UNIFIED IDEOGRAPH
                                (#xB7FE . #x670D)	;CJK UNIFIED IDEOGRAPH
                                (#xB840 . #x7AA3)	;CJK UNIFIED IDEOGRAPH
                                (#xB841 . #x7AA4)	;CJK UNIFIED IDEOGRAPH
                                (#xB842 . #x7AA7)	;CJK UNIFIED IDEOGRAPH
                                (#xB843 . #x7AA9)	;CJK UNIFIED IDEOGRAPH
                                (#xB844 . #x7AAA)	;CJK UNIFIED IDEOGRAPH
                                (#xB845 . #x7AAB)	;CJK UNIFIED IDEOGRAPH
                                (#xB846 . #x7AAE)	;CJK UNIFIED IDEOGRAPH
                                (#xB847 . #x7AAF)	;CJK UNIFIED IDEOGRAPH
                                (#xB848 . #x7AB0)	;CJK UNIFIED IDEOGRAPH
                                (#xB849 . #x7AB1)	;CJK UNIFIED IDEOGRAPH
                                (#xB84A . #x7AB2)	;CJK UNIFIED IDEOGRAPH
                                (#xB84B . #x7AB4)	;CJK UNIFIED IDEOGRAPH
                                (#xB84C . #x7AB5)	;CJK UNIFIED IDEOGRAPH
                                (#xB84D . #x7AB6)	;CJK UNIFIED IDEOGRAPH
                                (#xB84E . #x7AB7)	;CJK UNIFIED IDEOGRAPH
                                (#xB84F . #x7AB8)	;CJK UNIFIED IDEOGRAPH
                                (#xB850 . #x7AB9)	;CJK UNIFIED IDEOGRAPH
                                (#xB851 . #x7ABA)	;CJK UNIFIED IDEOGRAPH
                                (#xB852 . #x7ABB)	;CJK UNIFIED IDEOGRAPH
                                (#xB853 . #x7ABC)	;CJK UNIFIED IDEOGRAPH
                                (#xB854 . #x7ABD)	;CJK UNIFIED IDEOGRAPH
                                (#xB855 . #x7ABE)	;CJK UNIFIED IDEOGRAPH
                                (#xB856 . #x7AC0)	;CJK UNIFIED IDEOGRAPH
                                (#xB857 . #x7AC1)	;CJK UNIFIED IDEOGRAPH
                                (#xB858 . #x7AC2)	;CJK UNIFIED IDEOGRAPH
                                (#xB859 . #x7AC3)	;CJK UNIFIED IDEOGRAPH
                                (#xB85A . #x7AC4)	;CJK UNIFIED IDEOGRAPH
                                (#xB85B . #x7AC5)	;CJK UNIFIED IDEOGRAPH
                                (#xB85C . #x7AC6)	;CJK UNIFIED IDEOGRAPH
                                (#xB85D . #x7AC7)	;CJK UNIFIED IDEOGRAPH
                                (#xB85E . #x7AC8)	;CJK UNIFIED IDEOGRAPH
                                (#xB85F . #x7AC9)	;CJK UNIFIED IDEOGRAPH
                                (#xB860 . #x7ACA)	;CJK UNIFIED IDEOGRAPH
                                (#xB861 . #x7ACC)	;CJK UNIFIED IDEOGRAPH
                                (#xB862 . #x7ACD)	;CJK UNIFIED IDEOGRAPH
                                (#xB863 . #x7ACE)	;CJK UNIFIED IDEOGRAPH
                                (#xB864 . #x7ACF)	;CJK UNIFIED IDEOGRAPH
                                (#xB865 . #x7AD0)	;CJK UNIFIED IDEOGRAPH
                                (#xB866 . #x7AD1)	;CJK UNIFIED IDEOGRAPH
                                (#xB867 . #x7AD2)	;CJK UNIFIED IDEOGRAPH
                                (#xB868 . #x7AD3)	;CJK UNIFIED IDEOGRAPH
                                (#xB869 . #x7AD4)	;CJK UNIFIED IDEOGRAPH
                                (#xB86A . #x7AD5)	;CJK UNIFIED IDEOGRAPH
                                (#xB86B . #x7AD7)	;CJK UNIFIED IDEOGRAPH
                                (#xB86C . #x7AD8)	;CJK UNIFIED IDEOGRAPH
                                (#xB86D . #x7ADA)	;CJK UNIFIED IDEOGRAPH
                                (#xB86E . #x7ADB)	;CJK UNIFIED IDEOGRAPH
                                (#xB86F . #x7ADC)	;CJK UNIFIED IDEOGRAPH
                                (#xB870 . #x7ADD)	;CJK UNIFIED IDEOGRAPH
                                (#xB871 . #x7AE1)	;CJK UNIFIED IDEOGRAPH
                                (#xB872 . #x7AE2)	;CJK UNIFIED IDEOGRAPH
                                (#xB873 . #x7AE4)	;CJK UNIFIED IDEOGRAPH
                                (#xB874 . #x7AE7)	;CJK UNIFIED IDEOGRAPH
                                (#xB875 . #x7AE8)	;CJK UNIFIED IDEOGRAPH
                                (#xB876 . #x7AE9)	;CJK UNIFIED IDEOGRAPH
                                (#xB877 . #x7AEA)	;CJK UNIFIED IDEOGRAPH
                                (#xB878 . #x7AEB)	;CJK UNIFIED IDEOGRAPH
                                (#xB879 . #x7AEC)	;CJK UNIFIED IDEOGRAPH
                                (#xB87A . #x7AEE)	;CJK UNIFIED IDEOGRAPH
                                (#xB87B . #x7AF0)	;CJK UNIFIED IDEOGRAPH
                                (#xB87C . #x7AF1)	;CJK UNIFIED IDEOGRAPH
                                (#xB87D . #x7AF2)	;CJK UNIFIED IDEOGRAPH
                                (#xB87E . #x7AF3)	;CJK UNIFIED IDEOGRAPH
                                (#xB880 . #x7AF4)	;CJK UNIFIED IDEOGRAPH
                                (#xB881 . #x7AF5)	;CJK UNIFIED IDEOGRAPH
                                (#xB882 . #x7AF6)	;CJK UNIFIED IDEOGRAPH
                                (#xB883 . #x7AF7)	;CJK UNIFIED IDEOGRAPH
                                (#xB884 . #x7AF8)	;CJK UNIFIED IDEOGRAPH
                                (#xB885 . #x7AFB)	;CJK UNIFIED IDEOGRAPH
                                (#xB886 . #x7AFC)	;CJK UNIFIED IDEOGRAPH
                                (#xB887 . #x7AFE)	;CJK UNIFIED IDEOGRAPH
                                (#xB888 . #x7B00)	;CJK UNIFIED IDEOGRAPH
                                (#xB889 . #x7B01)	;CJK UNIFIED IDEOGRAPH
                                (#xB88A . #x7B02)	;CJK UNIFIED IDEOGRAPH
                                (#xB88B . #x7B05)	;CJK UNIFIED IDEOGRAPH
                                (#xB88C . #x7B07)	;CJK UNIFIED IDEOGRAPH
                                (#xB88D . #x7B09)	;CJK UNIFIED IDEOGRAPH
                                (#xB88E . #x7B0C)	;CJK UNIFIED IDEOGRAPH
                                (#xB88F . #x7B0D)	;CJK UNIFIED IDEOGRAPH
                                (#xB890 . #x7B0E)	;CJK UNIFIED IDEOGRAPH
                                (#xB891 . #x7B10)	;CJK UNIFIED IDEOGRAPH
                                (#xB892 . #x7B12)	;CJK UNIFIED IDEOGRAPH
                                (#xB893 . #x7B13)	;CJK UNIFIED IDEOGRAPH
                                (#xB894 . #x7B16)	;CJK UNIFIED IDEOGRAPH
                                (#xB895 . #x7B17)	;CJK UNIFIED IDEOGRAPH
                                (#xB896 . #x7B18)	;CJK UNIFIED IDEOGRAPH
                                (#xB897 . #x7B1A)	;CJK UNIFIED IDEOGRAPH
                                (#xB898 . #x7B1C)	;CJK UNIFIED IDEOGRAPH
                                (#xB899 . #x7B1D)	;CJK UNIFIED IDEOGRAPH
                                (#xB89A . #x7B1F)	;CJK UNIFIED IDEOGRAPH
                                (#xB89B . #x7B21)	;CJK UNIFIED IDEOGRAPH
                                (#xB89C . #x7B22)	;CJK UNIFIED IDEOGRAPH
                                (#xB89D . #x7B23)	;CJK UNIFIED IDEOGRAPH
                                (#xB89E . #x7B27)	;CJK UNIFIED IDEOGRAPH
                                (#xB89F . #x7B29)	;CJK UNIFIED IDEOGRAPH
                                (#xB8A0 . #x7B2D)	;CJK UNIFIED IDEOGRAPH
                                (#xB8A1 . #x6D6E)	;CJK UNIFIED IDEOGRAPH
                                (#xB8A2 . #x6DAA)	;CJK UNIFIED IDEOGRAPH
                                (#xB8A3 . #x798F)	;CJK UNIFIED IDEOGRAPH
                                (#xB8A4 . #x88B1)	;CJK UNIFIED IDEOGRAPH
                                (#xB8A5 . #x5F17)	;CJK UNIFIED IDEOGRAPH
                                (#xB8A6 . #x752B)	;CJK UNIFIED IDEOGRAPH
                                (#xB8A7 . #x629A)	;CJK UNIFIED IDEOGRAPH
                                (#xB8A8 . #x8F85)	;CJK UNIFIED IDEOGRAPH
                                (#xB8A9 . #x4FEF)	;CJK UNIFIED IDEOGRAPH
                                (#xB8AA . #x91DC)	;CJK UNIFIED IDEOGRAPH
                                (#xB8AB . #x65A7)	;CJK UNIFIED IDEOGRAPH
                                (#xB8AC . #x812F)	;CJK UNIFIED IDEOGRAPH
                                (#xB8AD . #x8151)	;CJK UNIFIED IDEOGRAPH
                                (#xB8AE . #x5E9C)	;CJK UNIFIED IDEOGRAPH
                                (#xB8AF . #x8150)	;CJK UNIFIED IDEOGRAPH
                                (#xB8B0 . #x8D74)	;CJK UNIFIED IDEOGRAPH
                                (#xB8B1 . #x526F)	;CJK UNIFIED IDEOGRAPH
                                (#xB8B2 . #x8986)	;CJK UNIFIED IDEOGRAPH
                                (#xB8B3 . #x8D4B)	;CJK UNIFIED IDEOGRAPH
                                (#xB8B4 . #x590D)	;CJK UNIFIED IDEOGRAPH
                                (#xB8B5 . #x5085)	;CJK UNIFIED IDEOGRAPH
                                (#xB8B6 . #x4ED8)	;CJK UNIFIED IDEOGRAPH
                                (#xB8B7 . #x961C)	;CJK UNIFIED IDEOGRAPH
                                (#xB8B8 . #x7236)	;CJK UNIFIED IDEOGRAPH
                                (#xB8B9 . #x8179)	;CJK UNIFIED IDEOGRAPH
                                (#xB8BA . #x8D1F)	;CJK UNIFIED IDEOGRAPH
                                (#xB8BB . #x5BCC)	;CJK UNIFIED IDEOGRAPH
                                (#xB8BC . #x8BA3)	;CJK UNIFIED IDEOGRAPH
                                (#xB8BD . #x9644)	;CJK UNIFIED IDEOGRAPH
                                (#xB8BE . #x5987)	;CJK UNIFIED IDEOGRAPH
                                (#xB8BF . #x7F1A)	;CJK UNIFIED IDEOGRAPH
                                (#xB8C0 . #x5490)	;CJK UNIFIED IDEOGRAPH
                                (#xB8C1 . #x5676)	;CJK UNIFIED IDEOGRAPH
                                (#xB8C2 . #x560E)	;CJK UNIFIED IDEOGRAPH
                                (#xB8C3 . #x8BE5)	;CJK UNIFIED IDEOGRAPH
                                (#xB8C4 . #x6539)	;CJK UNIFIED IDEOGRAPH
                                (#xB8C5 . #x6982)	;CJK UNIFIED IDEOGRAPH
                                (#xB8C6 . #x9499)	;CJK UNIFIED IDEOGRAPH
                                (#xB8C7 . #x76D6)	;CJK UNIFIED IDEOGRAPH
                                (#xB8C8 . #x6E89)	;CJK UNIFIED IDEOGRAPH
                                (#xB8C9 . #x5E72)	;CJK UNIFIED IDEOGRAPH
                                (#xB8CA . #x7518)	;CJK UNIFIED IDEOGRAPH
                                (#xB8CB . #x6746)	;CJK UNIFIED IDEOGRAPH
                                (#xB8CC . #x67D1)	;CJK UNIFIED IDEOGRAPH
                                (#xB8CD . #x7AFF)	;CJK UNIFIED IDEOGRAPH
                                (#xB8CE . #x809D)	;CJK UNIFIED IDEOGRAPH
                                (#xB8CF . #x8D76)	;CJK UNIFIED IDEOGRAPH
                                (#xB8D0 . #x611F)	;CJK UNIFIED IDEOGRAPH
                                (#xB8D1 . #x79C6)	;CJK UNIFIED IDEOGRAPH
                                (#xB8D2 . #x6562)	;CJK UNIFIED IDEOGRAPH
                                (#xB8D3 . #x8D63)	;CJK UNIFIED IDEOGRAPH
                                (#xB8D4 . #x5188)	;CJK UNIFIED IDEOGRAPH
                                (#xB8D5 . #x521A)	;CJK UNIFIED IDEOGRAPH
                                (#xB8D6 . #x94A2)	;CJK UNIFIED IDEOGRAPH
                                (#xB8D7 . #x7F38)	;CJK UNIFIED IDEOGRAPH
                                (#xB8D8 . #x809B)	;CJK UNIFIED IDEOGRAPH
                                (#xB8D9 . #x7EB2)	;CJK UNIFIED IDEOGRAPH
                                (#xB8DA . #x5C97)	;CJK UNIFIED IDEOGRAPH
                                (#xB8DB . #x6E2F)	;CJK UNIFIED IDEOGRAPH
                                (#xB8DC . #x6760)	;CJK UNIFIED IDEOGRAPH
                                (#xB8DD . #x7BD9)	;CJK UNIFIED IDEOGRAPH
                                (#xB8DE . #x768B)	;CJK UNIFIED IDEOGRAPH
                                (#xB8DF . #x9AD8)	;CJK UNIFIED IDEOGRAPH
                                (#xB8E0 . #x818F)	;CJK UNIFIED IDEOGRAPH
                                (#xB8E1 . #x7F94)	;CJK UNIFIED IDEOGRAPH
                                (#xB8E2 . #x7CD5)	;CJK UNIFIED IDEOGRAPH
                                (#xB8E3 . #x641E)	;CJK UNIFIED IDEOGRAPH
                                (#xB8E4 . #x9550)	;CJK UNIFIED IDEOGRAPH
                                (#xB8E5 . #x7A3F)	;CJK UNIFIED IDEOGRAPH
                                (#xB8E6 . #x544A)	;CJK UNIFIED IDEOGRAPH
                                (#xB8E7 . #x54E5)	;CJK UNIFIED IDEOGRAPH
                                (#xB8E8 . #x6B4C)	;CJK UNIFIED IDEOGRAPH
                                (#xB8E9 . #x6401)	;CJK UNIFIED IDEOGRAPH
                                (#xB8EA . #x6208)	;CJK UNIFIED IDEOGRAPH
                                (#xB8EB . #x9E3D)	;CJK UNIFIED IDEOGRAPH
                                (#xB8EC . #x80F3)	;CJK UNIFIED IDEOGRAPH
                                (#xB8ED . #x7599)	;CJK UNIFIED IDEOGRAPH
                                (#xB8EE . #x5272)	;CJK UNIFIED IDEOGRAPH
                                (#xB8EF . #x9769)	;CJK UNIFIED IDEOGRAPH
                                (#xB8F0 . #x845B)	;CJK UNIFIED IDEOGRAPH
                                (#xB8F1 . #x683C)	;CJK UNIFIED IDEOGRAPH
                                (#xB8F2 . #x86E4)	;CJK UNIFIED IDEOGRAPH
                                (#xB8F3 . #x9601)	;CJK UNIFIED IDEOGRAPH
                                (#xB8F4 . #x9694)	;CJK UNIFIED IDEOGRAPH
                                (#xB8F5 . #x94EC)	;CJK UNIFIED IDEOGRAPH
                                (#xB8F6 . #x4E2A)	;CJK UNIFIED IDEOGRAPH
                                (#xB8F7 . #x5404)	;CJK UNIFIED IDEOGRAPH
                                (#xB8F8 . #x7ED9)	;CJK UNIFIED IDEOGRAPH
                                (#xB8F9 . #x6839)	;CJK UNIFIED IDEOGRAPH
                                (#xB8FA . #x8DDF)	;CJK UNIFIED IDEOGRAPH
                                (#xB8FB . #x8015)	;CJK UNIFIED IDEOGRAPH
                                (#xB8FC . #x66F4)	;CJK UNIFIED IDEOGRAPH
                                (#xB8FD . #x5E9A)	;CJK UNIFIED IDEOGRAPH
                                (#xB8FE . #x7FB9)	;CJK UNIFIED IDEOGRAPH
                                (#xB940 . #x7B2F)	;CJK UNIFIED IDEOGRAPH
                                (#xB941 . #x7B30)	;CJK UNIFIED IDEOGRAPH
                                (#xB942 . #x7B32)	;CJK UNIFIED IDEOGRAPH
                                (#xB943 . #x7B34)	;CJK UNIFIED IDEOGRAPH
                                (#xB944 . #x7B35)	;CJK UNIFIED IDEOGRAPH
                                (#xB945 . #x7B36)	;CJK UNIFIED IDEOGRAPH
                                (#xB946 . #x7B37)	;CJK UNIFIED IDEOGRAPH
                                (#xB947 . #x7B39)	;CJK UNIFIED IDEOGRAPH
                                (#xB948 . #x7B3B)	;CJK UNIFIED IDEOGRAPH
                                (#xB949 . #x7B3D)	;CJK UNIFIED IDEOGRAPH
                                (#xB94A . #x7B3F)	;CJK UNIFIED IDEOGRAPH
                                (#xB94B . #x7B40)	;CJK UNIFIED IDEOGRAPH
                                (#xB94C . #x7B41)	;CJK UNIFIED IDEOGRAPH
                                (#xB94D . #x7B42)	;CJK UNIFIED IDEOGRAPH
                                (#xB94E . #x7B43)	;CJK UNIFIED IDEOGRAPH
                                (#xB94F . #x7B44)	;CJK UNIFIED IDEOGRAPH
                                (#xB950 . #x7B46)	;CJK UNIFIED IDEOGRAPH
                                (#xB951 . #x7B48)	;CJK UNIFIED IDEOGRAPH
                                (#xB952 . #x7B4A)	;CJK UNIFIED IDEOGRAPH
                                (#xB953 . #x7B4D)	;CJK UNIFIED IDEOGRAPH
                                (#xB954 . #x7B4E)	;CJK UNIFIED IDEOGRAPH
                                (#xB955 . #x7B53)	;CJK UNIFIED IDEOGRAPH
                                (#xB956 . #x7B55)	;CJK UNIFIED IDEOGRAPH
                                (#xB957 . #x7B57)	;CJK UNIFIED IDEOGRAPH
                                (#xB958 . #x7B59)	;CJK UNIFIED IDEOGRAPH
                                (#xB959 . #x7B5C)	;CJK UNIFIED IDEOGRAPH
                                (#xB95A . #x7B5E)	;CJK UNIFIED IDEOGRAPH
                                (#xB95B . #x7B5F)	;CJK UNIFIED IDEOGRAPH
                                (#xB95C . #x7B61)	;CJK UNIFIED IDEOGRAPH
                                (#xB95D . #x7B63)	;CJK UNIFIED IDEOGRAPH
                                (#xB95E . #x7B64)	;CJK UNIFIED IDEOGRAPH
                                (#xB95F . #x7B65)	;CJK UNIFIED IDEOGRAPH
                                (#xB960 . #x7B66)	;CJK UNIFIED IDEOGRAPH
                                (#xB961 . #x7B67)	;CJK UNIFIED IDEOGRAPH
                                (#xB962 . #x7B68)	;CJK UNIFIED IDEOGRAPH
                                (#xB963 . #x7B69)	;CJK UNIFIED IDEOGRAPH
                                (#xB964 . #x7B6A)	;CJK UNIFIED IDEOGRAPH
                                (#xB965 . #x7B6B)	;CJK UNIFIED IDEOGRAPH
                                (#xB966 . #x7B6C)	;CJK UNIFIED IDEOGRAPH
                                (#xB967 . #x7B6D)	;CJK UNIFIED IDEOGRAPH
                                (#xB968 . #x7B6F)	;CJK UNIFIED IDEOGRAPH
                                (#xB969 . #x7B70)	;CJK UNIFIED IDEOGRAPH
                                (#xB96A . #x7B73)	;CJK UNIFIED IDEOGRAPH
                                (#xB96B . #x7B74)	;CJK UNIFIED IDEOGRAPH
                                (#xB96C . #x7B76)	;CJK UNIFIED IDEOGRAPH
                                (#xB96D . #x7B78)	;CJK UNIFIED IDEOGRAPH
                                (#xB96E . #x7B7A)	;CJK UNIFIED IDEOGRAPH
                                (#xB96F . #x7B7C)	;CJK UNIFIED IDEOGRAPH
                                (#xB970 . #x7B7D)	;CJK UNIFIED IDEOGRAPH
                                (#xB971 . #x7B7F)	;CJK UNIFIED IDEOGRAPH
                                (#xB972 . #x7B81)	;CJK UNIFIED IDEOGRAPH
                                (#xB973 . #x7B82)	;CJK UNIFIED IDEOGRAPH
                                (#xB974 . #x7B83)	;CJK UNIFIED IDEOGRAPH
                                (#xB975 . #x7B84)	;CJK UNIFIED IDEOGRAPH
                                (#xB976 . #x7B86)	;CJK UNIFIED IDEOGRAPH
                                (#xB977 . #x7B87)	;CJK UNIFIED IDEOGRAPH
                                (#xB978 . #x7B88)	;CJK UNIFIED IDEOGRAPH
                                (#xB979 . #x7B89)	;CJK UNIFIED IDEOGRAPH
                                (#xB97A . #x7B8A)	;CJK UNIFIED IDEOGRAPH
                                (#xB97B . #x7B8B)	;CJK UNIFIED IDEOGRAPH
                                (#xB97C . #x7B8C)	;CJK UNIFIED IDEOGRAPH
                                (#xB97D . #x7B8E)	;CJK UNIFIED IDEOGRAPH
                                (#xB97E . #x7B8F)	;CJK UNIFIED IDEOGRAPH
                                (#xB980 . #x7B91)	;CJK UNIFIED IDEOGRAPH
                                (#xB981 . #x7B92)	;CJK UNIFIED IDEOGRAPH
                                (#xB982 . #x7B93)	;CJK UNIFIED IDEOGRAPH
                                (#xB983 . #x7B96)	;CJK UNIFIED IDEOGRAPH
                                (#xB984 . #x7B98)	;CJK UNIFIED IDEOGRAPH
                                (#xB985 . #x7B99)	;CJK UNIFIED IDEOGRAPH
                                (#xB986 . #x7B9A)	;CJK UNIFIED IDEOGRAPH
                                (#xB987 . #x7B9B)	;CJK UNIFIED IDEOGRAPH
                                (#xB988 . #x7B9E)	;CJK UNIFIED IDEOGRAPH
                                (#xB989 . #x7B9F)	;CJK UNIFIED IDEOGRAPH
                                (#xB98A . #x7BA0)	;CJK UNIFIED IDEOGRAPH
                                (#xB98B . #x7BA3)	;CJK UNIFIED IDEOGRAPH
                                (#xB98C . #x7BA4)	;CJK UNIFIED IDEOGRAPH
                                (#xB98D . #x7BA5)	;CJK UNIFIED IDEOGRAPH
                                (#xB98E . #x7BAE)	;CJK UNIFIED IDEOGRAPH
                                (#xB98F . #x7BAF)	;CJK UNIFIED IDEOGRAPH
                                (#xB990 . #x7BB0)	;CJK UNIFIED IDEOGRAPH
                                (#xB991 . #x7BB2)	;CJK UNIFIED IDEOGRAPH
                                (#xB992 . #x7BB3)	;CJK UNIFIED IDEOGRAPH
                                (#xB993 . #x7BB5)	;CJK UNIFIED IDEOGRAPH
                                (#xB994 . #x7BB6)	;CJK UNIFIED IDEOGRAPH
                                (#xB995 . #x7BB7)	;CJK UNIFIED IDEOGRAPH
                                (#xB996 . #x7BB9)	;CJK UNIFIED IDEOGRAPH
                                (#xB997 . #x7BBA)	;CJK UNIFIED IDEOGRAPH
                                (#xB998 . #x7BBB)	;CJK UNIFIED IDEOGRAPH
                                (#xB999 . #x7BBC)	;CJK UNIFIED IDEOGRAPH
                                (#xB99A . #x7BBD)	;CJK UNIFIED IDEOGRAPH
                                (#xB99B . #x7BBE)	;CJK UNIFIED IDEOGRAPH
                                (#xB99C . #x7BBF)	;CJK UNIFIED IDEOGRAPH
                                (#xB99D . #x7BC0)	;CJK UNIFIED IDEOGRAPH
                                (#xB99E . #x7BC2)	;CJK UNIFIED IDEOGRAPH
                                (#xB99F . #x7BC3)	;CJK UNIFIED IDEOGRAPH
                                (#xB9A0 . #x7BC4)	;CJK UNIFIED IDEOGRAPH
                                (#xB9A1 . #x57C2)	;CJK UNIFIED IDEOGRAPH
                                (#xB9A2 . #x803F)	;CJK UNIFIED IDEOGRAPH
                                (#xB9A3 . #x6897)	;CJK UNIFIED IDEOGRAPH
                                (#xB9A4 . #x5DE5)	;CJK UNIFIED IDEOGRAPH
                                (#xB9A5 . #x653B)	;CJK UNIFIED IDEOGRAPH
                                (#xB9A6 . #x529F)	;CJK UNIFIED IDEOGRAPH
                                (#xB9A7 . #x606D)	;CJK UNIFIED IDEOGRAPH
                                (#xB9A8 . #x9F9A)	;CJK UNIFIED IDEOGRAPH
                                (#xB9A9 . #x4F9B)	;CJK UNIFIED IDEOGRAPH
                                (#xB9AA . #x8EAC)	;CJK UNIFIED IDEOGRAPH
                                (#xB9AB . #x516C)	;CJK UNIFIED IDEOGRAPH
                                (#xB9AC . #x5BAB)	;CJK UNIFIED IDEOGRAPH
                                (#xB9AD . #x5F13)	;CJK UNIFIED IDEOGRAPH
                                (#xB9AE . #x5DE9)	;CJK UNIFIED IDEOGRAPH
                                (#xB9AF . #x6C5E)	;CJK UNIFIED IDEOGRAPH
                                (#xB9B0 . #x62F1)	;CJK UNIFIED IDEOGRAPH
                                (#xB9B1 . #x8D21)	;CJK UNIFIED IDEOGRAPH
                                (#xB9B2 . #x5171)	;CJK UNIFIED IDEOGRAPH
                                (#xB9B3 . #x94A9)	;CJK UNIFIED IDEOGRAPH
                                (#xB9B4 . #x52FE)	;CJK UNIFIED IDEOGRAPH
                                (#xB9B5 . #x6C9F)	;CJK UNIFIED IDEOGRAPH
                                (#xB9B6 . #x82DF)	;CJK UNIFIED IDEOGRAPH
                                (#xB9B7 . #x72D7)	;CJK UNIFIED IDEOGRAPH
                                (#xB9B8 . #x57A2)	;CJK UNIFIED IDEOGRAPH
                                (#xB9B9 . #x6784)	;CJK UNIFIED IDEOGRAPH
                                (#xB9BA . #x8D2D)	;CJK UNIFIED IDEOGRAPH
                                (#xB9BB . #x591F)	;CJK UNIFIED IDEOGRAPH
                                (#xB9BC . #x8F9C)	;CJK UNIFIED IDEOGRAPH
                                (#xB9BD . #x83C7)	;CJK UNIFIED IDEOGRAPH
                                (#xB9BE . #x5495)	;CJK UNIFIED IDEOGRAPH
                                (#xB9BF . #x7B8D)	;CJK UNIFIED IDEOGRAPH
                                (#xB9C0 . #x4F30)	;CJK UNIFIED IDEOGRAPH
                                (#xB9C1 . #x6CBD)	;CJK UNIFIED IDEOGRAPH
                                (#xB9C2 . #x5B64)	;CJK UNIFIED IDEOGRAPH
                                (#xB9C3 . #x59D1)	;CJK UNIFIED IDEOGRAPH
                                (#xB9C4 . #x9F13)	;CJK UNIFIED IDEOGRAPH
                                (#xB9C5 . #x53E4)	;CJK UNIFIED IDEOGRAPH
                                (#xB9C6 . #x86CA)	;CJK UNIFIED IDEOGRAPH
                                (#xB9C7 . #x9AA8)	;CJK UNIFIED IDEOGRAPH
                                (#xB9C8 . #x8C37)	;CJK UNIFIED IDEOGRAPH
                                (#xB9C9 . #x80A1)	;CJK UNIFIED IDEOGRAPH
                                (#xB9CA . #x6545)	;CJK UNIFIED IDEOGRAPH
                                (#xB9CB . #x987E)	;CJK UNIFIED IDEOGRAPH
                                (#xB9CC . #x56FA)	;CJK UNIFIED IDEOGRAPH
                                (#xB9CD . #x96C7)	;CJK UNIFIED IDEOGRAPH
                                (#xB9CE . #x522E)	;CJK UNIFIED IDEOGRAPH
                                (#xB9CF . #x74DC)	;CJK UNIFIED IDEOGRAPH
                                (#xB9D0 . #x5250)	;CJK UNIFIED IDEOGRAPH
                                (#xB9D1 . #x5BE1)	;CJK UNIFIED IDEOGRAPH
                                (#xB9D2 . #x6302)	;CJK UNIFIED IDEOGRAPH
                                (#xB9D3 . #x8902)	;CJK UNIFIED IDEOGRAPH
                                (#xB9D4 . #x4E56)	;CJK UNIFIED IDEOGRAPH
                                (#xB9D5 . #x62D0)	;CJK UNIFIED IDEOGRAPH
                                (#xB9D6 . #x602A)	;CJK UNIFIED IDEOGRAPH
                                (#xB9D7 . #x68FA)	;CJK UNIFIED IDEOGRAPH
                                (#xB9D8 . #x5173)	;CJK UNIFIED IDEOGRAPH
                                (#xB9D9 . #x5B98)	;CJK UNIFIED IDEOGRAPH
                                (#xB9DA . #x51A0)	;CJK UNIFIED IDEOGRAPH
                                (#xB9DB . #x89C2)	;CJK UNIFIED IDEOGRAPH
                                (#xB9DC . #x7BA1)	;CJK UNIFIED IDEOGRAPH
                                (#xB9DD . #x9986)	;CJK UNIFIED IDEOGRAPH
                                (#xB9DE . #x7F50)	;CJK UNIFIED IDEOGRAPH
                                (#xB9DF . #x60EF)	;CJK UNIFIED IDEOGRAPH
                                (#xB9E0 . #x704C)	;CJK UNIFIED IDEOGRAPH
                                (#xB9E1 . #x8D2F)	;CJK UNIFIED IDEOGRAPH
                                (#xB9E2 . #x5149)	;CJK UNIFIED IDEOGRAPH
                                (#xB9E3 . #x5E7F)	;CJK UNIFIED IDEOGRAPH
                                (#xB9E4 . #x901B)	;CJK UNIFIED IDEOGRAPH
                                (#xB9E5 . #x7470)	;CJK UNIFIED IDEOGRAPH
                                (#xB9E6 . #x89C4)	;CJK UNIFIED IDEOGRAPH
                                (#xB9E7 . #x572D)	;CJK UNIFIED IDEOGRAPH
                                (#xB9E8 . #x7845)	;CJK UNIFIED IDEOGRAPH
                                (#xB9E9 . #x5F52)	;CJK UNIFIED IDEOGRAPH
                                (#xB9EA . #x9F9F)	;CJK UNIFIED IDEOGRAPH
                                (#xB9EB . #x95FA)	;CJK UNIFIED IDEOGRAPH
                                (#xB9EC . #x8F68)	;CJK UNIFIED IDEOGRAPH
                                (#xB9ED . #x9B3C)	;CJK UNIFIED IDEOGRAPH
                                (#xB9EE . #x8BE1)	;CJK UNIFIED IDEOGRAPH
                                (#xB9EF . #x7678)	;CJK UNIFIED IDEOGRAPH
                                (#xB9F0 . #x6842)	;CJK UNIFIED IDEOGRAPH
                                (#xB9F1 . #x67DC)	;CJK UNIFIED IDEOGRAPH
                                (#xB9F2 . #x8DEA)	;CJK UNIFIED IDEOGRAPH
                                (#xB9F3 . #x8D35)	;CJK UNIFIED IDEOGRAPH
                                (#xB9F4 . #x523D)	;CJK UNIFIED IDEOGRAPH
                                (#xB9F5 . #x8F8A)	;CJK UNIFIED IDEOGRAPH
                                (#xB9F6 . #x6EDA)	;CJK UNIFIED IDEOGRAPH
                                (#xB9F7 . #x68CD)	;CJK UNIFIED IDEOGRAPH
                                (#xB9F8 . #x9505)	;CJK UNIFIED IDEOGRAPH
                                (#xB9F9 . #x90ED)	;CJK UNIFIED IDEOGRAPH
                                (#xB9FA . #x56FD)	;CJK UNIFIED IDEOGRAPH
                                (#xB9FB . #x679C)	;CJK UNIFIED IDEOGRAPH
                                (#xB9FC . #x88F9)	;CJK UNIFIED IDEOGRAPH
                                (#xB9FD . #x8FC7)	;CJK UNIFIED IDEOGRAPH
                                (#xB9FE . #x54C8)	;CJK UNIFIED IDEOGRAPH
                                (#xBA40 . #x7BC5)	;CJK UNIFIED IDEOGRAPH
                                (#xBA41 . #x7BC8)	;CJK UNIFIED IDEOGRAPH
                                (#xBA42 . #x7BC9)	;CJK UNIFIED IDEOGRAPH
                                (#xBA43 . #x7BCA)	;CJK UNIFIED IDEOGRAPH
                                (#xBA44 . #x7BCB)	;CJK UNIFIED IDEOGRAPH
                                (#xBA45 . #x7BCD)	;CJK UNIFIED IDEOGRAPH
                                (#xBA46 . #x7BCE)	;CJK UNIFIED IDEOGRAPH
                                (#xBA47 . #x7BCF)	;CJK UNIFIED IDEOGRAPH
                                (#xBA48 . #x7BD0)	;CJK UNIFIED IDEOGRAPH
                                (#xBA49 . #x7BD2)	;CJK UNIFIED IDEOGRAPH
                                (#xBA4A . #x7BD4)	;CJK UNIFIED IDEOGRAPH
                                (#xBA4B . #x7BD5)	;CJK UNIFIED IDEOGRAPH
                                (#xBA4C . #x7BD6)	;CJK UNIFIED IDEOGRAPH
                                (#xBA4D . #x7BD7)	;CJK UNIFIED IDEOGRAPH
                                (#xBA4E . #x7BD8)	;CJK UNIFIED IDEOGRAPH
                                (#xBA4F . #x7BDB)	;CJK UNIFIED IDEOGRAPH
                                (#xBA50 . #x7BDC)	;CJK UNIFIED IDEOGRAPH
                                (#xBA51 . #x7BDE)	;CJK UNIFIED IDEOGRAPH
                                (#xBA52 . #x7BDF)	;CJK UNIFIED IDEOGRAPH
                                (#xBA53 . #x7BE0)	;CJK UNIFIED IDEOGRAPH
                                (#xBA54 . #x7BE2)	;CJK UNIFIED IDEOGRAPH
                                (#xBA55 . #x7BE3)	;CJK UNIFIED IDEOGRAPH
                                (#xBA56 . #x7BE4)	;CJK UNIFIED IDEOGRAPH
                                (#xBA57 . #x7BE7)	;CJK UNIFIED IDEOGRAPH
                                (#xBA58 . #x7BE8)	;CJK UNIFIED IDEOGRAPH
                                (#xBA59 . #x7BE9)	;CJK UNIFIED IDEOGRAPH
                                (#xBA5A . #x7BEB)	;CJK UNIFIED IDEOGRAPH
                                (#xBA5B . #x7BEC)	;CJK UNIFIED IDEOGRAPH
                                (#xBA5C . #x7BED)	;CJK UNIFIED IDEOGRAPH
                                (#xBA5D . #x7BEF)	;CJK UNIFIED IDEOGRAPH
                                (#xBA5E . #x7BF0)	;CJK UNIFIED IDEOGRAPH
                                (#xBA5F . #x7BF2)	;CJK UNIFIED IDEOGRAPH
                                (#xBA60 . #x7BF3)	;CJK UNIFIED IDEOGRAPH
                                (#xBA61 . #x7BF4)	;CJK UNIFIED IDEOGRAPH
                                (#xBA62 . #x7BF5)	;CJK UNIFIED IDEOGRAPH
                                (#xBA63 . #x7BF6)	;CJK UNIFIED IDEOGRAPH
                                (#xBA64 . #x7BF8)	;CJK UNIFIED IDEOGRAPH
                                (#xBA65 . #x7BF9)	;CJK UNIFIED IDEOGRAPH
                                (#xBA66 . #x7BFA)	;CJK UNIFIED IDEOGRAPH
                                (#xBA67 . #x7BFB)	;CJK UNIFIED IDEOGRAPH
                                (#xBA68 . #x7BFD)	;CJK UNIFIED IDEOGRAPH
                                (#xBA69 . #x7BFF)	;CJK UNIFIED IDEOGRAPH
                                (#xBA6A . #x7C00)	;CJK UNIFIED IDEOGRAPH
                                (#xBA6B . #x7C01)	;CJK UNIFIED IDEOGRAPH
                                (#xBA6C . #x7C02)	;CJK UNIFIED IDEOGRAPH
                                (#xBA6D . #x7C03)	;CJK UNIFIED IDEOGRAPH
                                (#xBA6E . #x7C04)	;CJK UNIFIED IDEOGRAPH
                                (#xBA6F . #x7C05)	;CJK UNIFIED IDEOGRAPH
                                (#xBA70 . #x7C06)	;CJK UNIFIED IDEOGRAPH
                                (#xBA71 . #x7C08)	;CJK UNIFIED IDEOGRAPH
                                (#xBA72 . #x7C09)	;CJK UNIFIED IDEOGRAPH
                                (#xBA73 . #x7C0A)	;CJK UNIFIED IDEOGRAPH
                                (#xBA74 . #x7C0D)	;CJK UNIFIED IDEOGRAPH
                                (#xBA75 . #x7C0E)	;CJK UNIFIED IDEOGRAPH
                                (#xBA76 . #x7C10)	;CJK UNIFIED IDEOGRAPH
                                (#xBA77 . #x7C11)	;CJK UNIFIED IDEOGRAPH
                                (#xBA78 . #x7C12)	;CJK UNIFIED IDEOGRAPH
                                (#xBA79 . #x7C13)	;CJK UNIFIED IDEOGRAPH
                                (#xBA7A . #x7C14)	;CJK UNIFIED IDEOGRAPH
                                (#xBA7B . #x7C15)	;CJK UNIFIED IDEOGRAPH
                                (#xBA7C . #x7C17)	;CJK UNIFIED IDEOGRAPH
                                (#xBA7D . #x7C18)	;CJK UNIFIED IDEOGRAPH
                                (#xBA7E . #x7C19)	;CJK UNIFIED IDEOGRAPH
                                (#xBA80 . #x7C1A)	;CJK UNIFIED IDEOGRAPH
                                (#xBA81 . #x7C1B)	;CJK UNIFIED IDEOGRAPH
                                (#xBA82 . #x7C1C)	;CJK UNIFIED IDEOGRAPH
                                (#xBA83 . #x7C1D)	;CJK UNIFIED IDEOGRAPH
                                (#xBA84 . #x7C1E)	;CJK UNIFIED IDEOGRAPH
                                (#xBA85 . #x7C20)	;CJK UNIFIED IDEOGRAPH
                                (#xBA86 . #x7C21)	;CJK UNIFIED IDEOGRAPH
                                (#xBA87 . #x7C22)	;CJK UNIFIED IDEOGRAPH
                                (#xBA88 . #x7C23)	;CJK UNIFIED IDEOGRAPH
                                (#xBA89 . #x7C24)	;CJK UNIFIED IDEOGRAPH
                                (#xBA8A . #x7C25)	;CJK UNIFIED IDEOGRAPH
                                (#xBA8B . #x7C28)	;CJK UNIFIED IDEOGRAPH
                                (#xBA8C . #x7C29)	;CJK UNIFIED IDEOGRAPH
                                (#xBA8D . #x7C2B)	;CJK UNIFIED IDEOGRAPH
                                (#xBA8E . #x7C2C)	;CJK UNIFIED IDEOGRAPH
                                (#xBA8F . #x7C2D)	;CJK UNIFIED IDEOGRAPH
                                (#xBA90 . #x7C2E)	;CJK UNIFIED IDEOGRAPH
                                (#xBA91 . #x7C2F)	;CJK UNIFIED IDEOGRAPH
                                (#xBA92 . #x7C30)	;CJK UNIFIED IDEOGRAPH
                                (#xBA93 . #x7C31)	;CJK UNIFIED IDEOGRAPH
                                (#xBA94 . #x7C32)	;CJK UNIFIED IDEOGRAPH
                                (#xBA95 . #x7C33)	;CJK UNIFIED IDEOGRAPH
                                (#xBA96 . #x7C34)	;CJK UNIFIED IDEOGRAPH
                                (#xBA97 . #x7C35)	;CJK UNIFIED IDEOGRAPH
                                (#xBA98 . #x7C36)	;CJK UNIFIED IDEOGRAPH
                                (#xBA99 . #x7C37)	;CJK UNIFIED IDEOGRAPH
                                (#xBA9A . #x7C39)	;CJK UNIFIED IDEOGRAPH
                                (#xBA9B . #x7C3A)	;CJK UNIFIED IDEOGRAPH
                                (#xBA9C . #x7C3B)	;CJK UNIFIED IDEOGRAPH
                                (#xBA9D . #x7C3C)	;CJK UNIFIED IDEOGRAPH
                                (#xBA9E . #x7C3D)	;CJK UNIFIED IDEOGRAPH
                                (#xBA9F . #x7C3E)	;CJK UNIFIED IDEOGRAPH
                                (#xBAA0 . #x7C42)	;CJK UNIFIED IDEOGRAPH
                                (#xBAA1 . #x9AB8)	;CJK UNIFIED IDEOGRAPH
                                (#xBAA2 . #x5B69)	;CJK UNIFIED IDEOGRAPH
                                (#xBAA3 . #x6D77)	;CJK UNIFIED IDEOGRAPH
                                (#xBAA4 . #x6C26)	;CJK UNIFIED IDEOGRAPH
                                (#xBAA5 . #x4EA5)	;CJK UNIFIED IDEOGRAPH
                                (#xBAA6 . #x5BB3)	;CJK UNIFIED IDEOGRAPH
                                (#xBAA7 . #x9A87)	;CJK UNIFIED IDEOGRAPH
                                (#xBAA8 . #x9163)	;CJK UNIFIED IDEOGRAPH
                                (#xBAA9 . #x61A8)	;CJK UNIFIED IDEOGRAPH
                                (#xBAAA . #x90AF)	;CJK UNIFIED IDEOGRAPH
                                (#xBAAB . #x97E9)	;CJK UNIFIED IDEOGRAPH
                                (#xBAAC . #x542B)	;CJK UNIFIED IDEOGRAPH
                                (#xBAAD . #x6DB5)	;CJK UNIFIED IDEOGRAPH
                                (#xBAAE . #x5BD2)	;CJK UNIFIED IDEOGRAPH
                                (#xBAAF . #x51FD)	;CJK UNIFIED IDEOGRAPH
                                (#xBAB0 . #x558A)	;CJK UNIFIED IDEOGRAPH
                                (#xBAB1 . #x7F55)	;CJK UNIFIED IDEOGRAPH
                                (#xBAB2 . #x7FF0)	;CJK UNIFIED IDEOGRAPH
                                (#xBAB3 . #x64BC)	;CJK UNIFIED IDEOGRAPH
                                (#xBAB4 . #x634D)	;CJK UNIFIED IDEOGRAPH
                                (#xBAB5 . #x65F1)	;CJK UNIFIED IDEOGRAPH
                                (#xBAB6 . #x61BE)	;CJK UNIFIED IDEOGRAPH
                                (#xBAB7 . #x608D)	;CJK UNIFIED IDEOGRAPH
                                (#xBAB8 . #x710A)	;CJK UNIFIED IDEOGRAPH
                                (#xBAB9 . #x6C57)	;CJK UNIFIED IDEOGRAPH
                                (#xBABA . #x6C49)	;CJK UNIFIED IDEOGRAPH
                                (#xBABB . #x592F)	;CJK UNIFIED IDEOGRAPH
                                (#xBABC . #x676D)	;CJK UNIFIED IDEOGRAPH
                                (#xBABD . #x822A)	;CJK UNIFIED IDEOGRAPH
                                (#xBABE . #x58D5)	;CJK UNIFIED IDEOGRAPH
                                (#xBABF . #x568E)	;CJK UNIFIED IDEOGRAPH
                                (#xBAC0 . #x8C6A)	;CJK UNIFIED IDEOGRAPH
                                (#xBAC1 . #x6BEB)	;CJK UNIFIED IDEOGRAPH
                                (#xBAC2 . #x90DD)	;CJK UNIFIED IDEOGRAPH
                                (#xBAC3 . #x597D)	;CJK UNIFIED IDEOGRAPH
                                (#xBAC4 . #x8017)	;CJK UNIFIED IDEOGRAPH
                                (#xBAC5 . #x53F7)	;CJK UNIFIED IDEOGRAPH
                                (#xBAC6 . #x6D69)	;CJK UNIFIED IDEOGRAPH
                                (#xBAC7 . #x5475)	;CJK UNIFIED IDEOGRAPH
                                (#xBAC8 . #x559D)	;CJK UNIFIED IDEOGRAPH
                                (#xBAC9 . #x8377)	;CJK UNIFIED IDEOGRAPH
                                (#xBACA . #x83CF)	;CJK UNIFIED IDEOGRAPH
                                (#xBACB . #x6838)	;CJK UNIFIED IDEOGRAPH
                                (#xBACC . #x79BE)	;CJK UNIFIED IDEOGRAPH
                                (#xBACD . #x548C)	;CJK UNIFIED IDEOGRAPH
                                (#xBACE . #x4F55)	;CJK UNIFIED IDEOGRAPH
                                (#xBACF . #x5408)	;CJK UNIFIED IDEOGRAPH
                                (#xBAD0 . #x76D2)	;CJK UNIFIED IDEOGRAPH
                                (#xBAD1 . #x8C89)	;CJK UNIFIED IDEOGRAPH
                                (#xBAD2 . #x9602)	;CJK UNIFIED IDEOGRAPH
                                (#xBAD3 . #x6CB3)	;CJK UNIFIED IDEOGRAPH
                                (#xBAD4 . #x6DB8)	;CJK UNIFIED IDEOGRAPH
                                (#xBAD5 . #x8D6B)	;CJK UNIFIED IDEOGRAPH
                                (#xBAD6 . #x8910)	;CJK UNIFIED IDEOGRAPH
                                (#xBAD7 . #x9E64)	;CJK UNIFIED IDEOGRAPH
                                (#xBAD8 . #x8D3A)	;CJK UNIFIED IDEOGRAPH
                                (#xBAD9 . #x563F)	;CJK UNIFIED IDEOGRAPH
                                (#xBADA . #x9ED1)	;CJK UNIFIED IDEOGRAPH
                                (#xBADB . #x75D5)	;CJK UNIFIED IDEOGRAPH
                                (#xBADC . #x5F88)	;CJK UNIFIED IDEOGRAPH
                                (#xBADD . #x72E0)	;CJK UNIFIED IDEOGRAPH
                                (#xBADE . #x6068)	;CJK UNIFIED IDEOGRAPH
                                (#xBADF . #x54FC)	;CJK UNIFIED IDEOGRAPH
                                (#xBAE0 . #x4EA8)	;CJK UNIFIED IDEOGRAPH
                                (#xBAE1 . #x6A2A)	;CJK UNIFIED IDEOGRAPH
                                (#xBAE2 . #x8861)	;CJK UNIFIED IDEOGRAPH
                                (#xBAE3 . #x6052)	;CJK UNIFIED IDEOGRAPH
                                (#xBAE4 . #x8F70)	;CJK UNIFIED IDEOGRAPH
                                (#xBAE5 . #x54C4)	;CJK UNIFIED IDEOGRAPH
                                (#xBAE6 . #x70D8)	;CJK UNIFIED IDEOGRAPH
                                (#xBAE7 . #x8679)	;CJK UNIFIED IDEOGRAPH
                                (#xBAE8 . #x9E3F)	;CJK UNIFIED IDEOGRAPH
                                (#xBAE9 . #x6D2A)	;CJK UNIFIED IDEOGRAPH
                                (#xBAEA . #x5B8F)	;CJK UNIFIED IDEOGRAPH
                                (#xBAEB . #x5F18)	;CJK UNIFIED IDEOGRAPH
                                (#xBAEC . #x7EA2)	;CJK UNIFIED IDEOGRAPH
                                (#xBAED . #x5589)	;CJK UNIFIED IDEOGRAPH
                                (#xBAEE . #x4FAF)	;CJK UNIFIED IDEOGRAPH
                                (#xBAEF . #x7334)	;CJK UNIFIED IDEOGRAPH
                                (#xBAF0 . #x543C)	;CJK UNIFIED IDEOGRAPH
                                (#xBAF1 . #x539A)	;CJK UNIFIED IDEOGRAPH
                                (#xBAF2 . #x5019)	;CJK UNIFIED IDEOGRAPH
                                (#xBAF3 . #x540E)	;CJK UNIFIED IDEOGRAPH
                                (#xBAF4 . #x547C)	;CJK UNIFIED IDEOGRAPH
                                (#xBAF5 . #x4E4E)	;CJK UNIFIED IDEOGRAPH
                                (#xBAF6 . #x5FFD)	;CJK UNIFIED IDEOGRAPH
                                (#xBAF7 . #x745A)	;CJK UNIFIED IDEOGRAPH
                                (#xBAF8 . #x58F6)	;CJK UNIFIED IDEOGRAPH
                                (#xBAF9 . #x846B)	;CJK UNIFIED IDEOGRAPH
                                (#xBAFA . #x80E1)	;CJK UNIFIED IDEOGRAPH
                                (#xBAFB . #x8774)	;CJK UNIFIED IDEOGRAPH
                                (#xBAFC . #x72D0)	;CJK UNIFIED IDEOGRAPH
                                (#xBAFD . #x7CCA)	;CJK UNIFIED IDEOGRAPH
                                (#xBAFE . #x6E56)	;CJK UNIFIED IDEOGRAPH
                                (#xBB40 . #x7C43)	;CJK UNIFIED IDEOGRAPH
                                (#xBB41 . #x7C44)	;CJK UNIFIED IDEOGRAPH
                                (#xBB42 . #x7C45)	;CJK UNIFIED IDEOGRAPH
                                (#xBB43 . #x7C46)	;CJK UNIFIED IDEOGRAPH
                                (#xBB44 . #x7C47)	;CJK UNIFIED IDEOGRAPH
                                (#xBB45 . #x7C48)	;CJK UNIFIED IDEOGRAPH
                                (#xBB46 . #x7C49)	;CJK UNIFIED IDEOGRAPH
                                (#xBB47 . #x7C4A)	;CJK UNIFIED IDEOGRAPH
                                (#xBB48 . #x7C4B)	;CJK UNIFIED IDEOGRAPH
                                (#xBB49 . #x7C4C)	;CJK UNIFIED IDEOGRAPH
                                (#xBB4A . #x7C4E)	;CJK UNIFIED IDEOGRAPH
                                (#xBB4B . #x7C4F)	;CJK UNIFIED IDEOGRAPH
                                (#xBB4C . #x7C50)	;CJK UNIFIED IDEOGRAPH
                                (#xBB4D . #x7C51)	;CJK UNIFIED IDEOGRAPH
                                (#xBB4E . #x7C52)	;CJK UNIFIED IDEOGRAPH
                                (#xBB4F . #x7C53)	;CJK UNIFIED IDEOGRAPH
                                (#xBB50 . #x7C54)	;CJK UNIFIED IDEOGRAPH
                                (#xBB51 . #x7C55)	;CJK UNIFIED IDEOGRAPH
                                (#xBB52 . #x7C56)	;CJK UNIFIED IDEOGRAPH
                                (#xBB53 . #x7C57)	;CJK UNIFIED IDEOGRAPH
                                (#xBB54 . #x7C58)	;CJK UNIFIED IDEOGRAPH
                                (#xBB55 . #x7C59)	;CJK UNIFIED IDEOGRAPH
                                (#xBB56 . #x7C5A)	;CJK UNIFIED IDEOGRAPH
                                (#xBB57 . #x7C5B)	;CJK UNIFIED IDEOGRAPH
                                (#xBB58 . #x7C5C)	;CJK UNIFIED IDEOGRAPH
                                (#xBB59 . #x7C5D)	;CJK UNIFIED IDEOGRAPH
                                (#xBB5A . #x7C5E)	;CJK UNIFIED IDEOGRAPH
                                (#xBB5B . #x7C5F)	;CJK UNIFIED IDEOGRAPH
                                (#xBB5C . #x7C60)	;CJK UNIFIED IDEOGRAPH
                                (#xBB5D . #x7C61)	;CJK UNIFIED IDEOGRAPH
                                (#xBB5E . #x7C62)	;CJK UNIFIED IDEOGRAPH
                                (#xBB5F . #x7C63)	;CJK UNIFIED IDEOGRAPH
                                (#xBB60 . #x7C64)	;CJK UNIFIED IDEOGRAPH
                                (#xBB61 . #x7C65)	;CJK UNIFIED IDEOGRAPH
                                (#xBB62 . #x7C66)	;CJK UNIFIED IDEOGRAPH
                                (#xBB63 . #x7C67)	;CJK UNIFIED IDEOGRAPH
                                (#xBB64 . #x7C68)	;CJK UNIFIED IDEOGRAPH
                                (#xBB65 . #x7C69)	;CJK UNIFIED IDEOGRAPH
                                (#xBB66 . #x7C6A)	;CJK UNIFIED IDEOGRAPH
                                (#xBB67 . #x7C6B)	;CJK UNIFIED IDEOGRAPH
                                (#xBB68 . #x7C6C)	;CJK UNIFIED IDEOGRAPH
                                (#xBB69 . #x7C6D)	;CJK UNIFIED IDEOGRAPH
                                (#xBB6A . #x7C6E)	;CJK UNIFIED IDEOGRAPH
                                (#xBB6B . #x7C6F)	;CJK UNIFIED IDEOGRAPH
                                (#xBB6C . #x7C70)	;CJK UNIFIED IDEOGRAPH
                                (#xBB6D . #x7C71)	;CJK UNIFIED IDEOGRAPH
                                (#xBB6E . #x7C72)	;CJK UNIFIED IDEOGRAPH
                                (#xBB6F . #x7C75)	;CJK UNIFIED IDEOGRAPH
                                (#xBB70 . #x7C76)	;CJK UNIFIED IDEOGRAPH
                                (#xBB71 . #x7C77)	;CJK UNIFIED IDEOGRAPH
                                (#xBB72 . #x7C78)	;CJK UNIFIED IDEOGRAPH
                                (#xBB73 . #x7C79)	;CJK UNIFIED IDEOGRAPH
                                (#xBB74 . #x7C7A)	;CJK UNIFIED IDEOGRAPH
                                (#xBB75 . #x7C7E)	;CJK UNIFIED IDEOGRAPH
                                (#xBB76 . #x7C7F)	;CJK UNIFIED IDEOGRAPH
                                (#xBB77 . #x7C80)	;CJK UNIFIED IDEOGRAPH
                                (#xBB78 . #x7C81)	;CJK UNIFIED IDEOGRAPH
                                (#xBB79 . #x7C82)	;CJK UNIFIED IDEOGRAPH
                                (#xBB7A . #x7C83)	;CJK UNIFIED IDEOGRAPH
                                (#xBB7B . #x7C84)	;CJK UNIFIED IDEOGRAPH
                                (#xBB7C . #x7C85)	;CJK UNIFIED IDEOGRAPH
                                (#xBB7D . #x7C86)	;CJK UNIFIED IDEOGRAPH
                                (#xBB7E . #x7C87)	;CJK UNIFIED IDEOGRAPH
                                (#xBB80 . #x7C88)	;CJK UNIFIED IDEOGRAPH
                                (#xBB81 . #x7C8A)	;CJK UNIFIED IDEOGRAPH
                                (#xBB82 . #x7C8B)	;CJK UNIFIED IDEOGRAPH
                                (#xBB83 . #x7C8C)	;CJK UNIFIED IDEOGRAPH
                                (#xBB84 . #x7C8D)	;CJK UNIFIED IDEOGRAPH
                                (#xBB85 . #x7C8E)	;CJK UNIFIED IDEOGRAPH
                                (#xBB86 . #x7C8F)	;CJK UNIFIED IDEOGRAPH
                                (#xBB87 . #x7C90)	;CJK UNIFIED IDEOGRAPH
                                (#xBB88 . #x7C93)	;CJK UNIFIED IDEOGRAPH
                                (#xBB89 . #x7C94)	;CJK UNIFIED IDEOGRAPH
                                (#xBB8A . #x7C96)	;CJK UNIFIED IDEOGRAPH
                                (#xBB8B . #x7C99)	;CJK UNIFIED IDEOGRAPH
                                (#xBB8C . #x7C9A)	;CJK UNIFIED IDEOGRAPH
                                (#xBB8D . #x7C9B)	;CJK UNIFIED IDEOGRAPH
                                (#xBB8E . #x7CA0)	;CJK UNIFIED IDEOGRAPH
                                (#xBB8F . #x7CA1)	;CJK UNIFIED IDEOGRAPH
                                (#xBB90 . #x7CA3)	;CJK UNIFIED IDEOGRAPH
                                (#xBB91 . #x7CA6)	;CJK UNIFIED IDEOGRAPH
                                (#xBB92 . #x7CA7)	;CJK UNIFIED IDEOGRAPH
                                (#xBB93 . #x7CA8)	;CJK UNIFIED IDEOGRAPH
                                (#xBB94 . #x7CA9)	;CJK UNIFIED IDEOGRAPH
                                (#xBB95 . #x7CAB)	;CJK UNIFIED IDEOGRAPH
                                (#xBB96 . #x7CAC)	;CJK UNIFIED IDEOGRAPH
                                (#xBB97 . #x7CAD)	;CJK UNIFIED IDEOGRAPH
                                (#xBB98 . #x7CAF)	;CJK UNIFIED IDEOGRAPH
                                (#xBB99 . #x7CB0)	;CJK UNIFIED IDEOGRAPH
                                (#xBB9A . #x7CB4)	;CJK UNIFIED IDEOGRAPH
                                (#xBB9B . #x7CB5)	;CJK UNIFIED IDEOGRAPH
                                (#xBB9C . #x7CB6)	;CJK UNIFIED IDEOGRAPH
                                (#xBB9D . #x7CB7)	;CJK UNIFIED IDEOGRAPH
                                (#xBB9E . #x7CB8)	;CJK UNIFIED IDEOGRAPH
                                (#xBB9F . #x7CBA)	;CJK UNIFIED IDEOGRAPH
                                (#xBBA0 . #x7CBB)	;CJK UNIFIED IDEOGRAPH
                                (#xBBA1 . #x5F27)	;CJK UNIFIED IDEOGRAPH
                                (#xBBA2 . #x864E)	;CJK UNIFIED IDEOGRAPH
                                (#xBBA3 . #x552C)	;CJK UNIFIED IDEOGRAPH
                                (#xBBA4 . #x62A4)	;CJK UNIFIED IDEOGRAPH
                                (#xBBA5 . #x4E92)	;CJK UNIFIED IDEOGRAPH
                                (#xBBA6 . #x6CAA)	;CJK UNIFIED IDEOGRAPH
                                (#xBBA7 . #x6237)	;CJK UNIFIED IDEOGRAPH
                                (#xBBA8 . #x82B1)	;CJK UNIFIED IDEOGRAPH
                                (#xBBA9 . #x54D7)	;CJK UNIFIED IDEOGRAPH
                                (#xBBAA . #x534E)	;CJK UNIFIED IDEOGRAPH
                                (#xBBAB . #x733E)	;CJK UNIFIED IDEOGRAPH
                                (#xBBAC . #x6ED1)	;CJK UNIFIED IDEOGRAPH
                                (#xBBAD . #x753B)	;CJK UNIFIED IDEOGRAPH
                                (#xBBAE . #x5212)	;CJK UNIFIED IDEOGRAPH
                                (#xBBAF . #x5316)	;CJK UNIFIED IDEOGRAPH
                                (#xBBB0 . #x8BDD)	;CJK UNIFIED IDEOGRAPH
                                (#xBBB1 . #x69D0)	;CJK UNIFIED IDEOGRAPH
                                (#xBBB2 . #x5F8A)	;CJK UNIFIED IDEOGRAPH
                                (#xBBB3 . #x6000)	;CJK UNIFIED IDEOGRAPH
                                (#xBBB4 . #x6DEE)	;CJK UNIFIED IDEOGRAPH
                                (#xBBB5 . #x574F)	;CJK UNIFIED IDEOGRAPH
                                (#xBBB6 . #x6B22)	;CJK UNIFIED IDEOGRAPH
                                (#xBBB7 . #x73AF)	;CJK UNIFIED IDEOGRAPH
                                (#xBBB8 . #x6853)	;CJK UNIFIED IDEOGRAPH
                                (#xBBB9 . #x8FD8)	;CJK UNIFIED IDEOGRAPH
                                (#xBBBA . #x7F13)	;CJK UNIFIED IDEOGRAPH
                                (#xBBBB . #x6362)	;CJK UNIFIED IDEOGRAPH
                                (#xBBBC . #x60A3)	;CJK UNIFIED IDEOGRAPH
                                (#xBBBD . #x5524)	;CJK UNIFIED IDEOGRAPH
                                (#xBBBE . #x75EA)	;CJK UNIFIED IDEOGRAPH
                                (#xBBBF . #x8C62)	;CJK UNIFIED IDEOGRAPH
                                (#xBBC0 . #x7115)	;CJK UNIFIED IDEOGRAPH
                                (#xBBC1 . #x6DA3)	;CJK UNIFIED IDEOGRAPH
                                (#xBBC2 . #x5BA6)	;CJK UNIFIED IDEOGRAPH
                                (#xBBC3 . #x5E7B)	;CJK UNIFIED IDEOGRAPH
                                (#xBBC4 . #x8352)	;CJK UNIFIED IDEOGRAPH
                                (#xBBC5 . #x614C)	;CJK UNIFIED IDEOGRAPH
                                (#xBBC6 . #x9EC4)	;CJK UNIFIED IDEOGRAPH
                                (#xBBC7 . #x78FA)	;CJK UNIFIED IDEOGRAPH
                                (#xBBC8 . #x8757)	;CJK UNIFIED IDEOGRAPH
                                (#xBBC9 . #x7C27)	;CJK UNIFIED IDEOGRAPH
                                (#xBBCA . #x7687)	;CJK UNIFIED IDEOGRAPH
                                (#xBBCB . #x51F0)	;CJK UNIFIED IDEOGRAPH
                                (#xBBCC . #x60F6)	;CJK UNIFIED IDEOGRAPH
                                (#xBBCD . #x714C)	;CJK UNIFIED IDEOGRAPH
                                (#xBBCE . #x6643)	;CJK UNIFIED IDEOGRAPH
                                (#xBBCF . #x5E4C)	;CJK UNIFIED IDEOGRAPH
                                (#xBBD0 . #x604D)	;CJK UNIFIED IDEOGRAPH
                                (#xBBD1 . #x8C0E)	;CJK UNIFIED IDEOGRAPH
                                (#xBBD2 . #x7070)	;CJK UNIFIED IDEOGRAPH
                                (#xBBD3 . #x6325)	;CJK UNIFIED IDEOGRAPH
                                (#xBBD4 . #x8F89)	;CJK UNIFIED IDEOGRAPH
                                (#xBBD5 . #x5FBD)	;CJK UNIFIED IDEOGRAPH
                                (#xBBD6 . #x6062)	;CJK UNIFIED IDEOGRAPH
                                (#xBBD7 . #x86D4)	;CJK UNIFIED IDEOGRAPH
                                (#xBBD8 . #x56DE)	;CJK UNIFIED IDEOGRAPH
                                (#xBBD9 . #x6BC1)	;CJK UNIFIED IDEOGRAPH
                                (#xBBDA . #x6094)	;CJK UNIFIED IDEOGRAPH
                                (#xBBDB . #x6167)	;CJK UNIFIED IDEOGRAPH
                                (#xBBDC . #x5349)	;CJK UNIFIED IDEOGRAPH
                                (#xBBDD . #x60E0)	;CJK UNIFIED IDEOGRAPH
                                (#xBBDE . #x6666)	;CJK UNIFIED IDEOGRAPH
                                (#xBBDF . #x8D3F)	;CJK UNIFIED IDEOGRAPH
                                (#xBBE0 . #x79FD)	;CJK UNIFIED IDEOGRAPH
                                (#xBBE1 . #x4F1A)	;CJK UNIFIED IDEOGRAPH
                                (#xBBE2 . #x70E9)	;CJK UNIFIED IDEOGRAPH
                                (#xBBE3 . #x6C47)	;CJK UNIFIED IDEOGRAPH
                                (#xBBE4 . #x8BB3)	;CJK UNIFIED IDEOGRAPH
                                (#xBBE5 . #x8BF2)	;CJK UNIFIED IDEOGRAPH
                                (#xBBE6 . #x7ED8)	;CJK UNIFIED IDEOGRAPH
                                (#xBBE7 . #x8364)	;CJK UNIFIED IDEOGRAPH
                                (#xBBE8 . #x660F)	;CJK UNIFIED IDEOGRAPH
                                (#xBBE9 . #x5A5A)	;CJK UNIFIED IDEOGRAPH
                                (#xBBEA . #x9B42)	;CJK UNIFIED IDEOGRAPH
                                (#xBBEB . #x6D51)	;CJK UNIFIED IDEOGRAPH
                                (#xBBEC . #x6DF7)	;CJK UNIFIED IDEOGRAPH
                                (#xBBED . #x8C41)	;CJK UNIFIED IDEOGRAPH
                                (#xBBEE . #x6D3B)	;CJK UNIFIED IDEOGRAPH
                                (#xBBEF . #x4F19)	;CJK UNIFIED IDEOGRAPH
                                (#xBBF0 . #x706B)	;CJK UNIFIED IDEOGRAPH
                                (#xBBF1 . #x83B7)	;CJK UNIFIED IDEOGRAPH
                                (#xBBF2 . #x6216)	;CJK UNIFIED IDEOGRAPH
                                (#xBBF3 . #x60D1)	;CJK UNIFIED IDEOGRAPH
                                (#xBBF4 . #x970D)	;CJK UNIFIED IDEOGRAPH
                                (#xBBF5 . #x8D27)	;CJK UNIFIED IDEOGRAPH
                                (#xBBF6 . #x7978)	;CJK UNIFIED IDEOGRAPH
                                (#xBBF7 . #x51FB)	;CJK UNIFIED IDEOGRAPH
                                (#xBBF8 . #x573E)	;CJK UNIFIED IDEOGRAPH
                                (#xBBF9 . #x57FA)	;CJK UNIFIED IDEOGRAPH
                                (#xBBFA . #x673A)	;CJK UNIFIED IDEOGRAPH
                                (#xBBFB . #x7578)	;CJK UNIFIED IDEOGRAPH
                                (#xBBFC . #x7A3D)	;CJK UNIFIED IDEOGRAPH
                                (#xBBFD . #x79EF)	;CJK UNIFIED IDEOGRAPH
                                (#xBBFE . #x7B95)	;CJK UNIFIED IDEOGRAPH
                                (#xBC40 . #x7CBF)	;CJK UNIFIED IDEOGRAPH
                                (#xBC41 . #x7CC0)	;CJK UNIFIED IDEOGRAPH
                                (#xBC42 . #x7CC2)	;CJK UNIFIED IDEOGRAPH
                                (#xBC43 . #x7CC3)	;CJK UNIFIED IDEOGRAPH
                                (#xBC44 . #x7CC4)	;CJK UNIFIED IDEOGRAPH
                                (#xBC45 . #x7CC6)	;CJK UNIFIED IDEOGRAPH
                                (#xBC46 . #x7CC9)	;CJK UNIFIED IDEOGRAPH
                                (#xBC47 . #x7CCB)	;CJK UNIFIED IDEOGRAPH
                                (#xBC48 . #x7CCE)	;CJK UNIFIED IDEOGRAPH
                                (#xBC49 . #x7CCF)	;CJK UNIFIED IDEOGRAPH
                                (#xBC4A . #x7CD0)	;CJK UNIFIED IDEOGRAPH
                                (#xBC4B . #x7CD1)	;CJK UNIFIED IDEOGRAPH
                                (#xBC4C . #x7CD2)	;CJK UNIFIED IDEOGRAPH
                                (#xBC4D . #x7CD3)	;CJK UNIFIED IDEOGRAPH
                                (#xBC4E . #x7CD4)	;CJK UNIFIED IDEOGRAPH
                                (#xBC4F . #x7CD8)	;CJK UNIFIED IDEOGRAPH
                                (#xBC50 . #x7CDA)	;CJK UNIFIED IDEOGRAPH
                                (#xBC51 . #x7CDB)	;CJK UNIFIED IDEOGRAPH
                                (#xBC52 . #x7CDD)	;CJK UNIFIED IDEOGRAPH
                                (#xBC53 . #x7CDE)	;CJK UNIFIED IDEOGRAPH
                                (#xBC54 . #x7CE1)	;CJK UNIFIED IDEOGRAPH
                                (#xBC55 . #x7CE2)	;CJK UNIFIED IDEOGRAPH
                                (#xBC56 . #x7CE3)	;CJK UNIFIED IDEOGRAPH
                                (#xBC57 . #x7CE4)	;CJK UNIFIED IDEOGRAPH
                                (#xBC58 . #x7CE5)	;CJK UNIFIED IDEOGRAPH
                                (#xBC59 . #x7CE6)	;CJK UNIFIED IDEOGRAPH
                                (#xBC5A . #x7CE7)	;CJK UNIFIED IDEOGRAPH
                                (#xBC5B . #x7CE9)	;CJK UNIFIED IDEOGRAPH
                                (#xBC5C . #x7CEA)	;CJK UNIFIED IDEOGRAPH
                                (#xBC5D . #x7CEB)	;CJK UNIFIED IDEOGRAPH
                                (#xBC5E . #x7CEC)	;CJK UNIFIED IDEOGRAPH
                                (#xBC5F . #x7CED)	;CJK UNIFIED IDEOGRAPH
                                (#xBC60 . #x7CEE)	;CJK UNIFIED IDEOGRAPH
                                (#xBC61 . #x7CF0)	;CJK UNIFIED IDEOGRAPH
                                (#xBC62 . #x7CF1)	;CJK UNIFIED IDEOGRAPH
                                (#xBC63 . #x7CF2)	;CJK UNIFIED IDEOGRAPH
                                (#xBC64 . #x7CF3)	;CJK UNIFIED IDEOGRAPH
                                (#xBC65 . #x7CF4)	;CJK UNIFIED IDEOGRAPH
                                (#xBC66 . #x7CF5)	;CJK UNIFIED IDEOGRAPH
                                (#xBC67 . #x7CF6)	;CJK UNIFIED IDEOGRAPH
                                (#xBC68 . #x7CF7)	;CJK UNIFIED IDEOGRAPH
                                (#xBC69 . #x7CF9)	;CJK UNIFIED IDEOGRAPH
                                (#xBC6A . #x7CFA)	;CJK UNIFIED IDEOGRAPH
                                (#xBC6B . #x7CFC)	;CJK UNIFIED IDEOGRAPH
                                (#xBC6C . #x7CFD)	;CJK UNIFIED IDEOGRAPH
                                (#xBC6D . #x7CFE)	;CJK UNIFIED IDEOGRAPH
                                (#xBC6E . #x7CFF)	;CJK UNIFIED IDEOGRAPH
                                (#xBC6F . #x7D00)	;CJK UNIFIED IDEOGRAPH
                                (#xBC70 . #x7D01)	;CJK UNIFIED IDEOGRAPH
                                (#xBC71 . #x7D02)	;CJK UNIFIED IDEOGRAPH
                                (#xBC72 . #x7D03)	;CJK UNIFIED IDEOGRAPH
                                (#xBC73 . #x7D04)	;CJK UNIFIED IDEOGRAPH
                                (#xBC74 . #x7D05)	;CJK UNIFIED IDEOGRAPH
                                (#xBC75 . #x7D06)	;CJK UNIFIED IDEOGRAPH
                                (#xBC76 . #x7D07)	;CJK UNIFIED IDEOGRAPH
                                (#xBC77 . #x7D08)	;CJK UNIFIED IDEOGRAPH
                                (#xBC78 . #x7D09)	;CJK UNIFIED IDEOGRAPH
                                (#xBC79 . #x7D0B)	;CJK UNIFIED IDEOGRAPH
                                (#xBC7A . #x7D0C)	;CJK UNIFIED IDEOGRAPH
                                (#xBC7B . #x7D0D)	;CJK UNIFIED IDEOGRAPH
                                (#xBC7C . #x7D0E)	;CJK UNIFIED IDEOGRAPH
                                (#xBC7D . #x7D0F)	;CJK UNIFIED IDEOGRAPH
                                (#xBC7E . #x7D10)	;CJK UNIFIED IDEOGRAPH
                                (#xBC80 . #x7D11)	;CJK UNIFIED IDEOGRAPH
                                (#xBC81 . #x7D12)	;CJK UNIFIED IDEOGRAPH
                                (#xBC82 . #x7D13)	;CJK UNIFIED IDEOGRAPH
                                (#xBC83 . #x7D14)	;CJK UNIFIED IDEOGRAPH
                                (#xBC84 . #x7D15)	;CJK UNIFIED IDEOGRAPH
                                (#xBC85 . #x7D16)	;CJK UNIFIED IDEOGRAPH
                                (#xBC86 . #x7D17)	;CJK UNIFIED IDEOGRAPH
                                (#xBC87 . #x7D18)	;CJK UNIFIED IDEOGRAPH
                                (#xBC88 . #x7D19)	;CJK UNIFIED IDEOGRAPH
                                (#xBC89 . #x7D1A)	;CJK UNIFIED IDEOGRAPH
                                (#xBC8A . #x7D1B)	;CJK UNIFIED IDEOGRAPH
                                (#xBC8B . #x7D1C)	;CJK UNIFIED IDEOGRAPH
                                (#xBC8C . #x7D1D)	;CJK UNIFIED IDEOGRAPH
                                (#xBC8D . #x7D1E)	;CJK UNIFIED IDEOGRAPH
                                (#xBC8E . #x7D1F)	;CJK UNIFIED IDEOGRAPH
                                (#xBC8F . #x7D21)	;CJK UNIFIED IDEOGRAPH
                                (#xBC90 . #x7D23)	;CJK UNIFIED IDEOGRAPH
                                (#xBC91 . #x7D24)	;CJK UNIFIED IDEOGRAPH
                                (#xBC92 . #x7D25)	;CJK UNIFIED IDEOGRAPH
                                (#xBC93 . #x7D26)	;CJK UNIFIED IDEOGRAPH
                                (#xBC94 . #x7D28)	;CJK UNIFIED IDEOGRAPH
                                (#xBC95 . #x7D29)	;CJK UNIFIED IDEOGRAPH
                                (#xBC96 . #x7D2A)	;CJK UNIFIED IDEOGRAPH
                                (#xBC97 . #x7D2C)	;CJK UNIFIED IDEOGRAPH
                                (#xBC98 . #x7D2D)	;CJK UNIFIED IDEOGRAPH
                                (#xBC99 . #x7D2E)	;CJK UNIFIED IDEOGRAPH
                                (#xBC9A . #x7D30)	;CJK UNIFIED IDEOGRAPH
                                (#xBC9B . #x7D31)	;CJK UNIFIED IDEOGRAPH
                                (#xBC9C . #x7D32)	;CJK UNIFIED IDEOGRAPH
                                (#xBC9D . #x7D33)	;CJK UNIFIED IDEOGRAPH
                                (#xBC9E . #x7D34)	;CJK UNIFIED IDEOGRAPH
                                (#xBC9F . #x7D35)	;CJK UNIFIED IDEOGRAPH
                                (#xBCA0 . #x7D36)	;CJK UNIFIED IDEOGRAPH
                                (#xBCA1 . #x808C)	;CJK UNIFIED IDEOGRAPH
                                (#xBCA2 . #x9965)	;CJK UNIFIED IDEOGRAPH
                                (#xBCA3 . #x8FF9)	;CJK UNIFIED IDEOGRAPH
                                (#xBCA4 . #x6FC0)	;CJK UNIFIED IDEOGRAPH
                                (#xBCA5 . #x8BA5)	;CJK UNIFIED IDEOGRAPH
                                (#xBCA6 . #x9E21)	;CJK UNIFIED IDEOGRAPH
                                (#xBCA7 . #x59EC)	;CJK UNIFIED IDEOGRAPH
                                (#xBCA8 . #x7EE9)	;CJK UNIFIED IDEOGRAPH
                                (#xBCA9 . #x7F09)	;CJK UNIFIED IDEOGRAPH
                                (#xBCAA . #x5409)	;CJK UNIFIED IDEOGRAPH
                                (#xBCAB . #x6781)	;CJK UNIFIED IDEOGRAPH
                                (#xBCAC . #x68D8)	;CJK UNIFIED IDEOGRAPH
                                (#xBCAD . #x8F91)	;CJK UNIFIED IDEOGRAPH
                                (#xBCAE . #x7C4D)	;CJK UNIFIED IDEOGRAPH
                                (#xBCAF . #x96C6)	;CJK UNIFIED IDEOGRAPH
                                (#xBCB0 . #x53CA)	;CJK UNIFIED IDEOGRAPH
                                (#xBCB1 . #x6025)	;CJK UNIFIED IDEOGRAPH
                                (#xBCB2 . #x75BE)	;CJK UNIFIED IDEOGRAPH
                                (#xBCB3 . #x6C72)	;CJK UNIFIED IDEOGRAPH
                                (#xBCB4 . #x5373)	;CJK UNIFIED IDEOGRAPH
                                (#xBCB5 . #x5AC9)	;CJK UNIFIED IDEOGRAPH
                                (#xBCB6 . #x7EA7)	;CJK UNIFIED IDEOGRAPH
                                (#xBCB7 . #x6324)	;CJK UNIFIED IDEOGRAPH
                                (#xBCB8 . #x51E0)	;CJK UNIFIED IDEOGRAPH
                                (#xBCB9 . #x810A)	;CJK UNIFIED IDEOGRAPH
                                (#xBCBA . #x5DF1)	;CJK UNIFIED IDEOGRAPH
                                (#xBCBB . #x84DF)	;CJK UNIFIED IDEOGRAPH
                                (#xBCBC . #x6280)	;CJK UNIFIED IDEOGRAPH
                                (#xBCBD . #x5180)	;CJK UNIFIED IDEOGRAPH
                                (#xBCBE . #x5B63)	;CJK UNIFIED IDEOGRAPH
                                (#xBCBF . #x4F0E)	;CJK UNIFIED IDEOGRAPH
                                (#xBCC0 . #x796D)	;CJK UNIFIED IDEOGRAPH
                                (#xBCC1 . #x5242)	;CJK UNIFIED IDEOGRAPH
                                (#xBCC2 . #x60B8)	;CJK UNIFIED IDEOGRAPH
                                (#xBCC3 . #x6D4E)	;CJK UNIFIED IDEOGRAPH
                                (#xBCC4 . #x5BC4)	;CJK UNIFIED IDEOGRAPH
                                (#xBCC5 . #x5BC2)	;CJK UNIFIED IDEOGRAPH
                                (#xBCC6 . #x8BA1)	;CJK UNIFIED IDEOGRAPH
                                (#xBCC7 . #x8BB0)	;CJK UNIFIED IDEOGRAPH
                                (#xBCC8 . #x65E2)	;CJK UNIFIED IDEOGRAPH
                                (#xBCC9 . #x5FCC)	;CJK UNIFIED IDEOGRAPH
                                (#xBCCA . #x9645)	;CJK UNIFIED IDEOGRAPH
                                (#xBCCB . #x5993)	;CJK UNIFIED IDEOGRAPH
                                (#xBCCC . #x7EE7)	;CJK UNIFIED IDEOGRAPH
                                (#xBCCD . #x7EAA)	;CJK UNIFIED IDEOGRAPH
                                (#xBCCE . #x5609)	;CJK UNIFIED IDEOGRAPH
                                (#xBCCF . #x67B7)	;CJK UNIFIED IDEOGRAPH
                                (#xBCD0 . #x5939)	;CJK UNIFIED IDEOGRAPH
                                (#xBCD1 . #x4F73)	;CJK UNIFIED IDEOGRAPH
                                (#xBCD2 . #x5BB6)	;CJK UNIFIED IDEOGRAPH
                                (#xBCD3 . #x52A0)	;CJK UNIFIED IDEOGRAPH
                                (#xBCD4 . #x835A)	;CJK UNIFIED IDEOGRAPH
                                (#xBCD5 . #x988A)	;CJK UNIFIED IDEOGRAPH
                                (#xBCD6 . #x8D3E)	;CJK UNIFIED IDEOGRAPH
                                (#xBCD7 . #x7532)	;CJK UNIFIED IDEOGRAPH
                                (#xBCD8 . #x94BE)	;CJK UNIFIED IDEOGRAPH
                                (#xBCD9 . #x5047)	;CJK UNIFIED IDEOGRAPH
                                (#xBCDA . #x7A3C)	;CJK UNIFIED IDEOGRAPH
                                (#xBCDB . #x4EF7)	;CJK UNIFIED IDEOGRAPH
                                (#xBCDC . #x67B6)	;CJK UNIFIED IDEOGRAPH
                                (#xBCDD . #x9A7E)	;CJK UNIFIED IDEOGRAPH
                                (#xBCDE . #x5AC1)	;CJK UNIFIED IDEOGRAPH
                                (#xBCDF . #x6B7C)	;CJK UNIFIED IDEOGRAPH
                                (#xBCE0 . #x76D1)	;CJK UNIFIED IDEOGRAPH
                                (#xBCE1 . #x575A)	;CJK UNIFIED IDEOGRAPH
                                (#xBCE2 . #x5C16)	;CJK UNIFIED IDEOGRAPH
                                (#xBCE3 . #x7B3A)	;CJK UNIFIED IDEOGRAPH
                                (#xBCE4 . #x95F4)	;CJK UNIFIED IDEOGRAPH
                                (#xBCE5 . #x714E)	;CJK UNIFIED IDEOGRAPH
                                (#xBCE6 . #x517C)	;CJK UNIFIED IDEOGRAPH
                                (#xBCE7 . #x80A9)	;CJK UNIFIED IDEOGRAPH
                                (#xBCE8 . #x8270)	;CJK UNIFIED IDEOGRAPH
                                (#xBCE9 . #x5978)	;CJK UNIFIED IDEOGRAPH
                                (#xBCEA . #x7F04)	;CJK UNIFIED IDEOGRAPH
                                (#xBCEB . #x8327)	;CJK UNIFIED IDEOGRAPH
                                (#xBCEC . #x68C0)	;CJK UNIFIED IDEOGRAPH
                                (#xBCED . #x67EC)	;CJK UNIFIED IDEOGRAPH
                                (#xBCEE . #x78B1)	;CJK UNIFIED IDEOGRAPH
                                (#xBCEF . #x7877)	;CJK UNIFIED IDEOGRAPH
                                (#xBCF0 . #x62E3)	;CJK UNIFIED IDEOGRAPH
                                (#xBCF1 . #x6361)	;CJK UNIFIED IDEOGRAPH
                                (#xBCF2 . #x7B80)	;CJK UNIFIED IDEOGRAPH
                                (#xBCF3 . #x4FED)	;CJK UNIFIED IDEOGRAPH
                                (#xBCF4 . #x526A)	;CJK UNIFIED IDEOGRAPH
                                (#xBCF5 . #x51CF)	;CJK UNIFIED IDEOGRAPH
                                (#xBCF6 . #x8350)	;CJK UNIFIED IDEOGRAPH
                                (#xBCF7 . #x69DB)	;CJK UNIFIED IDEOGRAPH
                                (#xBCF8 . #x9274)	;CJK UNIFIED IDEOGRAPH
                                (#xBCF9 . #x8DF5)	;CJK UNIFIED IDEOGRAPH
                                (#xBCFA . #x8D31)	;CJK UNIFIED IDEOGRAPH
                                (#xBCFB . #x89C1)	;CJK UNIFIED IDEOGRAPH
                                (#xBCFC . #x952E)	;CJK UNIFIED IDEOGRAPH
                                (#xBCFD . #x7BAD)	;CJK UNIFIED IDEOGRAPH
                                (#xBCFE . #x4EF6)	;CJK UNIFIED IDEOGRAPH
                                (#xBD40 . #x7D37)	;CJK UNIFIED IDEOGRAPH
                                (#xBD41 . #x7D38)	;CJK UNIFIED IDEOGRAPH
                                (#xBD42 . #x7D39)	;CJK UNIFIED IDEOGRAPH
                                (#xBD43 . #x7D3A)	;CJK UNIFIED IDEOGRAPH
                                (#xBD44 . #x7D3B)	;CJK UNIFIED IDEOGRAPH
                                (#xBD45 . #x7D3C)	;CJK UNIFIED IDEOGRAPH
                                (#xBD46 . #x7D3D)	;CJK UNIFIED IDEOGRAPH
                                (#xBD47 . #x7D3E)	;CJK UNIFIED IDEOGRAPH
                                (#xBD48 . #x7D3F)	;CJK UNIFIED IDEOGRAPH
                                (#xBD49 . #x7D40)	;CJK UNIFIED IDEOGRAPH
                                (#xBD4A . #x7D41)	;CJK UNIFIED IDEOGRAPH
                                (#xBD4B . #x7D42)	;CJK UNIFIED IDEOGRAPH
                                (#xBD4C . #x7D43)	;CJK UNIFIED IDEOGRAPH
                                (#xBD4D . #x7D44)	;CJK UNIFIED IDEOGRAPH
                                (#xBD4E . #x7D45)	;CJK UNIFIED IDEOGRAPH
                                (#xBD4F . #x7D46)	;CJK UNIFIED IDEOGRAPH
                                (#xBD50 . #x7D47)	;CJK UNIFIED IDEOGRAPH
                                (#xBD51 . #x7D48)	;CJK UNIFIED IDEOGRAPH
                                (#xBD52 . #x7D49)	;CJK UNIFIED IDEOGRAPH
                                (#xBD53 . #x7D4A)	;CJK UNIFIED IDEOGRAPH
                                (#xBD54 . #x7D4B)	;CJK UNIFIED IDEOGRAPH
                                (#xBD55 . #x7D4C)	;CJK UNIFIED IDEOGRAPH
                                (#xBD56 . #x7D4D)	;CJK UNIFIED IDEOGRAPH
                                (#xBD57 . #x7D4E)	;CJK UNIFIED IDEOGRAPH
                                (#xBD58 . #x7D4F)	;CJK UNIFIED IDEOGRAPH
                                (#xBD59 . #x7D50)	;CJK UNIFIED IDEOGRAPH
                                (#xBD5A . #x7D51)	;CJK UNIFIED IDEOGRAPH
                                (#xBD5B . #x7D52)	;CJK UNIFIED IDEOGRAPH
                                (#xBD5C . #x7D53)	;CJK UNIFIED IDEOGRAPH
                                (#xBD5D . #x7D54)	;CJK UNIFIED IDEOGRAPH
                                (#xBD5E . #x7D55)	;CJK UNIFIED IDEOGRAPH
                                (#xBD5F . #x7D56)	;CJK UNIFIED IDEOGRAPH
                                (#xBD60 . #x7D57)	;CJK UNIFIED IDEOGRAPH
                                (#xBD61 . #x7D58)	;CJK UNIFIED IDEOGRAPH
                                (#xBD62 . #x7D59)	;CJK UNIFIED IDEOGRAPH
                                (#xBD63 . #x7D5A)	;CJK UNIFIED IDEOGRAPH
                                (#xBD64 . #x7D5B)	;CJK UNIFIED IDEOGRAPH
                                (#xBD65 . #x7D5C)	;CJK UNIFIED IDEOGRAPH
                                (#xBD66 . #x7D5D)	;CJK UNIFIED IDEOGRAPH
                                (#xBD67 . #x7D5E)	;CJK UNIFIED IDEOGRAPH
                                (#xBD68 . #x7D5F)	;CJK UNIFIED IDEOGRAPH
                                (#xBD69 . #x7D60)	;CJK UNIFIED IDEOGRAPH
                                (#xBD6A . #x7D61)	;CJK UNIFIED IDEOGRAPH
                                (#xBD6B . #x7D62)	;CJK UNIFIED IDEOGRAPH
                                (#xBD6C . #x7D63)	;CJK UNIFIED IDEOGRAPH
                                (#xBD6D . #x7D64)	;CJK UNIFIED IDEOGRAPH
                                (#xBD6E . #x7D65)	;CJK UNIFIED IDEOGRAPH
                                (#xBD6F . #x7D66)	;CJK UNIFIED IDEOGRAPH
                                (#xBD70 . #x7D67)	;CJK UNIFIED IDEOGRAPH
                                (#xBD71 . #x7D68)	;CJK UNIFIED IDEOGRAPH
                                (#xBD72 . #x7D69)	;CJK UNIFIED IDEOGRAPH
                                (#xBD73 . #x7D6A)	;CJK UNIFIED IDEOGRAPH
                                (#xBD74 . #x7D6B)	;CJK UNIFIED IDEOGRAPH
                                (#xBD75 . #x7D6C)	;CJK UNIFIED IDEOGRAPH
                                (#xBD76 . #x7D6D)	;CJK UNIFIED IDEOGRAPH
                                (#xBD77 . #x7D6F)	;CJK UNIFIED IDEOGRAPH
                                (#xBD78 . #x7D70)	;CJK UNIFIED IDEOGRAPH
                                (#xBD79 . #x7D71)	;CJK UNIFIED IDEOGRAPH
                                (#xBD7A . #x7D72)	;CJK UNIFIED IDEOGRAPH
                                (#xBD7B . #x7D73)	;CJK UNIFIED IDEOGRAPH
                                (#xBD7C . #x7D74)	;CJK UNIFIED IDEOGRAPH
                                (#xBD7D . #x7D75)	;CJK UNIFIED IDEOGRAPH
                                (#xBD7E . #x7D76)	;CJK UNIFIED IDEOGRAPH
                                (#xBD80 . #x7D78)	;CJK UNIFIED IDEOGRAPH
                                (#xBD81 . #x7D79)	;CJK UNIFIED IDEOGRAPH
                                (#xBD82 . #x7D7A)	;CJK UNIFIED IDEOGRAPH
                                (#xBD83 . #x7D7B)	;CJK UNIFIED IDEOGRAPH
                                (#xBD84 . #x7D7C)	;CJK UNIFIED IDEOGRAPH
                                (#xBD85 . #x7D7D)	;CJK UNIFIED IDEOGRAPH
                                (#xBD86 . #x7D7E)	;CJK UNIFIED IDEOGRAPH
                                (#xBD87 . #x7D7F)	;CJK UNIFIED IDEOGRAPH
                                (#xBD88 . #x7D80)	;CJK UNIFIED IDEOGRAPH
                                (#xBD89 . #x7D81)	;CJK UNIFIED IDEOGRAPH
                                (#xBD8A . #x7D82)	;CJK UNIFIED IDEOGRAPH
                                (#xBD8B . #x7D83)	;CJK UNIFIED IDEOGRAPH
                                (#xBD8C . #x7D84)	;CJK UNIFIED IDEOGRAPH
                                (#xBD8D . #x7D85)	;CJK UNIFIED IDEOGRAPH
                                (#xBD8E . #x7D86)	;CJK UNIFIED IDEOGRAPH
                                (#xBD8F . #x7D87)	;CJK UNIFIED IDEOGRAPH
                                (#xBD90 . #x7D88)	;CJK UNIFIED IDEOGRAPH
                                (#xBD91 . #x7D89)	;CJK UNIFIED IDEOGRAPH
                                (#xBD92 . #x7D8A)	;CJK UNIFIED IDEOGRAPH
                                (#xBD93 . #x7D8B)	;CJK UNIFIED IDEOGRAPH
                                (#xBD94 . #x7D8C)	;CJK UNIFIED IDEOGRAPH
                                (#xBD95 . #x7D8D)	;CJK UNIFIED IDEOGRAPH
                                (#xBD96 . #x7D8E)	;CJK UNIFIED IDEOGRAPH
                                (#xBD97 . #x7D8F)	;CJK UNIFIED IDEOGRAPH
                                (#xBD98 . #x7D90)	;CJK UNIFIED IDEOGRAPH
                                (#xBD99 . #x7D91)	;CJK UNIFIED IDEOGRAPH
                                (#xBD9A . #x7D92)	;CJK UNIFIED IDEOGRAPH
                                (#xBD9B . #x7D93)	;CJK UNIFIED IDEOGRAPH
                                (#xBD9C . #x7D94)	;CJK UNIFIED IDEOGRAPH
                                (#xBD9D . #x7D95)	;CJK UNIFIED IDEOGRAPH
                                (#xBD9E . #x7D96)	;CJK UNIFIED IDEOGRAPH
                                (#xBD9F . #x7D97)	;CJK UNIFIED IDEOGRAPH
                                (#xBDA0 . #x7D98)	;CJK UNIFIED IDEOGRAPH
                                (#xBDA1 . #x5065)	;CJK UNIFIED IDEOGRAPH
                                (#xBDA2 . #x8230)	;CJK UNIFIED IDEOGRAPH
                                (#xBDA3 . #x5251)	;CJK UNIFIED IDEOGRAPH
                                (#xBDA4 . #x996F)	;CJK UNIFIED IDEOGRAPH
                                (#xBDA5 . #x6E10)	;CJK UNIFIED IDEOGRAPH
                                (#xBDA6 . #x6E85)	;CJK UNIFIED IDEOGRAPH
                                (#xBDA7 . #x6DA7)	;CJK UNIFIED IDEOGRAPH
                                (#xBDA8 . #x5EFA)	;CJK UNIFIED IDEOGRAPH
                                (#xBDA9 . #x50F5)	;CJK UNIFIED IDEOGRAPH
                                (#xBDAA . #x59DC)	;CJK UNIFIED IDEOGRAPH
                                (#xBDAB . #x5C06)	;CJK UNIFIED IDEOGRAPH
                                (#xBDAC . #x6D46)	;CJK UNIFIED IDEOGRAPH
                                (#xBDAD . #x6C5F)	;CJK UNIFIED IDEOGRAPH
                                (#xBDAE . #x7586)	;CJK UNIFIED IDEOGRAPH
                                (#xBDAF . #x848B)	;CJK UNIFIED IDEOGRAPH
                                (#xBDB0 . #x6868)	;CJK UNIFIED IDEOGRAPH
                                (#xBDB1 . #x5956)	;CJK UNIFIED IDEOGRAPH
                                (#xBDB2 . #x8BB2)	;CJK UNIFIED IDEOGRAPH
                                (#xBDB3 . #x5320)	;CJK UNIFIED IDEOGRAPH
                                (#xBDB4 . #x9171)	;CJK UNIFIED IDEOGRAPH
                                (#xBDB5 . #x964D)	;CJK UNIFIED IDEOGRAPH
                                (#xBDB6 . #x8549)	;CJK UNIFIED IDEOGRAPH
                                (#xBDB7 . #x6912)	;CJK UNIFIED IDEOGRAPH
                                (#xBDB8 . #x7901)	;CJK UNIFIED IDEOGRAPH
                                (#xBDB9 . #x7126)	;CJK UNIFIED IDEOGRAPH
                                (#xBDBA . #x80F6)	;CJK UNIFIED IDEOGRAPH
                                (#xBDBB . #x4EA4)	;CJK UNIFIED IDEOGRAPH
                                (#xBDBC . #x90CA)	;CJK UNIFIED IDEOGRAPH
                                (#xBDBD . #x6D47)	;CJK UNIFIED IDEOGRAPH
                                (#xBDBE . #x9A84)	;CJK UNIFIED IDEOGRAPH
                                (#xBDBF . #x5A07)	;CJK UNIFIED IDEOGRAPH
                                (#xBDC0 . #x56BC)	;CJK UNIFIED IDEOGRAPH
                                (#xBDC1 . #x6405)	;CJK UNIFIED IDEOGRAPH
                                (#xBDC2 . #x94F0)	;CJK UNIFIED IDEOGRAPH
                                (#xBDC3 . #x77EB)	;CJK UNIFIED IDEOGRAPH
                                (#xBDC4 . #x4FA5)	;CJK UNIFIED IDEOGRAPH
                                (#xBDC5 . #x811A)	;CJK UNIFIED IDEOGRAPH
                                (#xBDC6 . #x72E1)	;CJK UNIFIED IDEOGRAPH
                                (#xBDC7 . #x89D2)	;CJK UNIFIED IDEOGRAPH
                                (#xBDC8 . #x997A)	;CJK UNIFIED IDEOGRAPH
                                (#xBDC9 . #x7F34)	;CJK UNIFIED IDEOGRAPH
                                (#xBDCA . #x7EDE)	;CJK UNIFIED IDEOGRAPH
                                (#xBDCB . #x527F)	;CJK UNIFIED IDEOGRAPH
                                (#xBDCC . #x6559)	;CJK UNIFIED IDEOGRAPH
                                (#xBDCD . #x9175)	;CJK UNIFIED IDEOGRAPH
                                (#xBDCE . #x8F7F)	;CJK UNIFIED IDEOGRAPH
                                (#xBDCF . #x8F83)	;CJK UNIFIED IDEOGRAPH
                                (#xBDD0 . #x53EB)	;CJK UNIFIED IDEOGRAPH
                                (#xBDD1 . #x7A96)	;CJK UNIFIED IDEOGRAPH
                                (#xBDD2 . #x63ED)	;CJK UNIFIED IDEOGRAPH
                                (#xBDD3 . #x63A5)	;CJK UNIFIED IDEOGRAPH
                                (#xBDD4 . #x7686)	;CJK UNIFIED IDEOGRAPH
                                (#xBDD5 . #x79F8)	;CJK UNIFIED IDEOGRAPH
                                (#xBDD6 . #x8857)	;CJK UNIFIED IDEOGRAPH
                                (#xBDD7 . #x9636)	;CJK UNIFIED IDEOGRAPH
                                (#xBDD8 . #x622A)	;CJK UNIFIED IDEOGRAPH
                                (#xBDD9 . #x52AB)	;CJK UNIFIED IDEOGRAPH
                                (#xBDDA . #x8282)	;CJK UNIFIED IDEOGRAPH
                                (#xBDDB . #x6854)	;CJK UNIFIED IDEOGRAPH
                                (#xBDDC . #x6770)	;CJK UNIFIED IDEOGRAPH
                                (#xBDDD . #x6377)	;CJK UNIFIED IDEOGRAPH
                                (#xBDDE . #x776B)	;CJK UNIFIED IDEOGRAPH
                                (#xBDDF . #x7AED)	;CJK UNIFIED IDEOGRAPH
                                (#xBDE0 . #x6D01)	;CJK UNIFIED IDEOGRAPH
                                (#xBDE1 . #x7ED3)	;CJK UNIFIED IDEOGRAPH
                                (#xBDE2 . #x89E3)	;CJK UNIFIED IDEOGRAPH
                                (#xBDE3 . #x59D0)	;CJK UNIFIED IDEOGRAPH
                                (#xBDE4 . #x6212)	;CJK UNIFIED IDEOGRAPH
                                (#xBDE5 . #x85C9)	;CJK UNIFIED IDEOGRAPH
                                (#xBDE6 . #x82A5)	;CJK UNIFIED IDEOGRAPH
                                (#xBDE7 . #x754C)	;CJK UNIFIED IDEOGRAPH
                                (#xBDE8 . #x501F)	;CJK UNIFIED IDEOGRAPH
                                (#xBDE9 . #x4ECB)	;CJK UNIFIED IDEOGRAPH
                                (#xBDEA . #x75A5)	;CJK UNIFIED IDEOGRAPH
                                (#xBDEB . #x8BEB)	;CJK UNIFIED IDEOGRAPH
                                (#xBDEC . #x5C4A)	;CJK UNIFIED IDEOGRAPH
                                (#xBDED . #x5DFE)	;CJK UNIFIED IDEOGRAPH
                                (#xBDEE . #x7B4B)	;CJK UNIFIED IDEOGRAPH
                                (#xBDEF . #x65A4)	;CJK UNIFIED IDEOGRAPH
                                (#xBDF0 . #x91D1)	;CJK UNIFIED IDEOGRAPH
                                (#xBDF1 . #x4ECA)	;CJK UNIFIED IDEOGRAPH
                                (#xBDF2 . #x6D25)	;CJK UNIFIED IDEOGRAPH
                                (#xBDF3 . #x895F)	;CJK UNIFIED IDEOGRAPH
                                (#xBDF4 . #x7D27)	;CJK UNIFIED IDEOGRAPH
                                (#xBDF5 . #x9526)	;CJK UNIFIED IDEOGRAPH
                                (#xBDF6 . #x4EC5)	;CJK UNIFIED IDEOGRAPH
                                (#xBDF7 . #x8C28)	;CJK UNIFIED IDEOGRAPH
                                (#xBDF8 . #x8FDB)	;CJK UNIFIED IDEOGRAPH
                                (#xBDF9 . #x9773)	;CJK UNIFIED IDEOGRAPH
                                (#xBDFA . #x664B)	;CJK UNIFIED IDEOGRAPH
                                (#xBDFB . #x7981)	;CJK UNIFIED IDEOGRAPH
                                (#xBDFC . #x8FD1)	;CJK UNIFIED IDEOGRAPH
                                (#xBDFD . #x70EC)	;CJK UNIFIED IDEOGRAPH
                                (#xBDFE . #x6D78)	;CJK UNIFIED IDEOGRAPH
                                (#xBE40 . #x7D99)	;CJK UNIFIED IDEOGRAPH
                                (#xBE41 . #x7D9A)	;CJK UNIFIED IDEOGRAPH
                                (#xBE42 . #x7D9B)	;CJK UNIFIED IDEOGRAPH
                                (#xBE43 . #x7D9C)	;CJK UNIFIED IDEOGRAPH
                                (#xBE44 . #x7D9D)	;CJK UNIFIED IDEOGRAPH
                                (#xBE45 . #x7D9E)	;CJK UNIFIED IDEOGRAPH
                                (#xBE46 . #x7D9F)	;CJK UNIFIED IDEOGRAPH
                                (#xBE47 . #x7DA0)	;CJK UNIFIED IDEOGRAPH
                                (#xBE48 . #x7DA1)	;CJK UNIFIED IDEOGRAPH
                                (#xBE49 . #x7DA2)	;CJK UNIFIED IDEOGRAPH
                                (#xBE4A . #x7DA3)	;CJK UNIFIED IDEOGRAPH
                                (#xBE4B . #x7DA4)	;CJK UNIFIED IDEOGRAPH
                                (#xBE4C . #x7DA5)	;CJK UNIFIED IDEOGRAPH
                                (#xBE4D . #x7DA7)	;CJK UNIFIED IDEOGRAPH
                                (#xBE4E . #x7DA8)	;CJK UNIFIED IDEOGRAPH
                                (#xBE4F . #x7DA9)	;CJK UNIFIED IDEOGRAPH
                                (#xBE50 . #x7DAA)	;CJK UNIFIED IDEOGRAPH
                                (#xBE51 . #x7DAB)	;CJK UNIFIED IDEOGRAPH
                                (#xBE52 . #x7DAC)	;CJK UNIFIED IDEOGRAPH
                                (#xBE53 . #x7DAD)	;CJK UNIFIED IDEOGRAPH
                                (#xBE54 . #x7DAF)	;CJK UNIFIED IDEOGRAPH
                                (#xBE55 . #x7DB0)	;CJK UNIFIED IDEOGRAPH
                                (#xBE56 . #x7DB1)	;CJK UNIFIED IDEOGRAPH
                                (#xBE57 . #x7DB2)	;CJK UNIFIED IDEOGRAPH
                                (#xBE58 . #x7DB3)	;CJK UNIFIED IDEOGRAPH
                                (#xBE59 . #x7DB4)	;CJK UNIFIED IDEOGRAPH
                                (#xBE5A . #x7DB5)	;CJK UNIFIED IDEOGRAPH
                                (#xBE5B . #x7DB6)	;CJK UNIFIED IDEOGRAPH
                                (#xBE5C . #x7DB7)	;CJK UNIFIED IDEOGRAPH
                                (#xBE5D . #x7DB8)	;CJK UNIFIED IDEOGRAPH
                                (#xBE5E . #x7DB9)	;CJK UNIFIED IDEOGRAPH
                                (#xBE5F . #x7DBA)	;CJK UNIFIED IDEOGRAPH
                                (#xBE60 . #x7DBB)	;CJK UNIFIED IDEOGRAPH
                                (#xBE61 . #x7DBC)	;CJK UNIFIED IDEOGRAPH
                                (#xBE62 . #x7DBD)	;CJK UNIFIED IDEOGRAPH
                                (#xBE63 . #x7DBE)	;CJK UNIFIED IDEOGRAPH
                                (#xBE64 . #x7DBF)	;CJK UNIFIED IDEOGRAPH
                                (#xBE65 . #x7DC0)	;CJK UNIFIED IDEOGRAPH
                                (#xBE66 . #x7DC1)	;CJK UNIFIED IDEOGRAPH
                                (#xBE67 . #x7DC2)	;CJK UNIFIED IDEOGRAPH
                                (#xBE68 . #x7DC3)	;CJK UNIFIED IDEOGRAPH
                                (#xBE69 . #x7DC4)	;CJK UNIFIED IDEOGRAPH
                                (#xBE6A . #x7DC5)	;CJK UNIFIED IDEOGRAPH
                                (#xBE6B . #x7DC6)	;CJK UNIFIED IDEOGRAPH
                                (#xBE6C . #x7DC7)	;CJK UNIFIED IDEOGRAPH
                                (#xBE6D . #x7DC8)	;CJK UNIFIED IDEOGRAPH
                                (#xBE6E . #x7DC9)	;CJK UNIFIED IDEOGRAPH
                                (#xBE6F . #x7DCA)	;CJK UNIFIED IDEOGRAPH
                                (#xBE70 . #x7DCB)	;CJK UNIFIED IDEOGRAPH
                                (#xBE71 . #x7DCC)	;CJK UNIFIED IDEOGRAPH
                                (#xBE72 . #x7DCD)	;CJK UNIFIED IDEOGRAPH
                                (#xBE73 . #x7DCE)	;CJK UNIFIED IDEOGRAPH
                                (#xBE74 . #x7DCF)	;CJK UNIFIED IDEOGRAPH
                                (#xBE75 . #x7DD0)	;CJK UNIFIED IDEOGRAPH
                                (#xBE76 . #x7DD1)	;CJK UNIFIED IDEOGRAPH
                                (#xBE77 . #x7DD2)	;CJK UNIFIED IDEOGRAPH
                                (#xBE78 . #x7DD3)	;CJK UNIFIED IDEOGRAPH
                                (#xBE79 . #x7DD4)	;CJK UNIFIED IDEOGRAPH
                                (#xBE7A . #x7DD5)	;CJK UNIFIED IDEOGRAPH
                                (#xBE7B . #x7DD6)	;CJK UNIFIED IDEOGRAPH
                                (#xBE7C . #x7DD7)	;CJK UNIFIED IDEOGRAPH
                                (#xBE7D . #x7DD8)	;CJK UNIFIED IDEOGRAPH
                                (#xBE7E . #x7DD9)	;CJK UNIFIED IDEOGRAPH
                                (#xBE80 . #x7DDA)	;CJK UNIFIED IDEOGRAPH
                                (#xBE81 . #x7DDB)	;CJK UNIFIED IDEOGRAPH
                                (#xBE82 . #x7DDC)	;CJK UNIFIED IDEOGRAPH
                                (#xBE83 . #x7DDD)	;CJK UNIFIED IDEOGRAPH
                                (#xBE84 . #x7DDE)	;CJK UNIFIED IDEOGRAPH
                                (#xBE85 . #x7DDF)	;CJK UNIFIED IDEOGRAPH
                                (#xBE86 . #x7DE0)	;CJK UNIFIED IDEOGRAPH
                                (#xBE87 . #x7DE1)	;CJK UNIFIED IDEOGRAPH
                                (#xBE88 . #x7DE2)	;CJK UNIFIED IDEOGRAPH
                                (#xBE89 . #x7DE3)	;CJK UNIFIED IDEOGRAPH
                                (#xBE8A . #x7DE4)	;CJK UNIFIED IDEOGRAPH
                                (#xBE8B . #x7DE5)	;CJK UNIFIED IDEOGRAPH
                                (#xBE8C . #x7DE6)	;CJK UNIFIED IDEOGRAPH
                                (#xBE8D . #x7DE7)	;CJK UNIFIED IDEOGRAPH
                                (#xBE8E . #x7DE8)	;CJK UNIFIED IDEOGRAPH
                                (#xBE8F . #x7DE9)	;CJK UNIFIED IDEOGRAPH
                                (#xBE90 . #x7DEA)	;CJK UNIFIED IDEOGRAPH
                                (#xBE91 . #x7DEB)	;CJK UNIFIED IDEOGRAPH
                                (#xBE92 . #x7DEC)	;CJK UNIFIED IDEOGRAPH
                                (#xBE93 . #x7DED)	;CJK UNIFIED IDEOGRAPH
                                (#xBE94 . #x7DEE)	;CJK UNIFIED IDEOGRAPH
                                (#xBE95 . #x7DEF)	;CJK UNIFIED IDEOGRAPH
                                (#xBE96 . #x7DF0)	;CJK UNIFIED IDEOGRAPH
                                (#xBE97 . #x7DF1)	;CJK UNIFIED IDEOGRAPH
                                (#xBE98 . #x7DF2)	;CJK UNIFIED IDEOGRAPH
                                (#xBE99 . #x7DF3)	;CJK UNIFIED IDEOGRAPH
                                (#xBE9A . #x7DF4)	;CJK UNIFIED IDEOGRAPH
                                (#xBE9B . #x7DF5)	;CJK UNIFIED IDEOGRAPH
                                (#xBE9C . #x7DF6)	;CJK UNIFIED IDEOGRAPH
                                (#xBE9D . #x7DF7)	;CJK UNIFIED IDEOGRAPH
                                (#xBE9E . #x7DF8)	;CJK UNIFIED IDEOGRAPH
                                (#xBE9F . #x7DF9)	;CJK UNIFIED IDEOGRAPH
                                (#xBEA0 . #x7DFA)	;CJK UNIFIED IDEOGRAPH
                                (#xBEA1 . #x5C3D)	;CJK UNIFIED IDEOGRAPH
                                (#xBEA2 . #x52B2)	;CJK UNIFIED IDEOGRAPH
                                (#xBEA3 . #x8346)	;CJK UNIFIED IDEOGRAPH
                                (#xBEA4 . #x5162)	;CJK UNIFIED IDEOGRAPH
                                (#xBEA5 . #x830E)	;CJK UNIFIED IDEOGRAPH
                                (#xBEA6 . #x775B)	;CJK UNIFIED IDEOGRAPH
                                (#xBEA7 . #x6676)	;CJK UNIFIED IDEOGRAPH
                                (#xBEA8 . #x9CB8)	;CJK UNIFIED IDEOGRAPH
                                (#xBEA9 . #x4EAC)	;CJK UNIFIED IDEOGRAPH
                                (#xBEAA . #x60CA)	;CJK UNIFIED IDEOGRAPH
                                (#xBEAB . #x7CBE)	;CJK UNIFIED IDEOGRAPH
                                (#xBEAC . #x7CB3)	;CJK UNIFIED IDEOGRAPH
                                (#xBEAD . #x7ECF)	;CJK UNIFIED IDEOGRAPH
                                (#xBEAE . #x4E95)	;CJK UNIFIED IDEOGRAPH
                                (#xBEAF . #x8B66)	;CJK UNIFIED IDEOGRAPH
                                (#xBEB0 . #x666F)	;CJK UNIFIED IDEOGRAPH
                                (#xBEB1 . #x9888)	;CJK UNIFIED IDEOGRAPH
                                (#xBEB2 . #x9759)	;CJK UNIFIED IDEOGRAPH
                                (#xBEB3 . #x5883)	;CJK UNIFIED IDEOGRAPH
                                (#xBEB4 . #x656C)	;CJK UNIFIED IDEOGRAPH
                                (#xBEB5 . #x955C)	;CJK UNIFIED IDEOGRAPH
                                (#xBEB6 . #x5F84)	;CJK UNIFIED IDEOGRAPH
                                (#xBEB7 . #x75C9)	;CJK UNIFIED IDEOGRAPH
                                (#xBEB8 . #x9756)	;CJK UNIFIED IDEOGRAPH
                                (#xBEB9 . #x7ADF)	;CJK UNIFIED IDEOGRAPH
                                (#xBEBA . #x7ADE)	;CJK UNIFIED IDEOGRAPH
                                (#xBEBB . #x51C0)	;CJK UNIFIED IDEOGRAPH
                                (#xBEBC . #x70AF)	;CJK UNIFIED IDEOGRAPH
                                (#xBEBD . #x7A98)	;CJK UNIFIED IDEOGRAPH
                                (#xBEBE . #x63EA)	;CJK UNIFIED IDEOGRAPH
                                (#xBEBF . #x7A76)	;CJK UNIFIED IDEOGRAPH
                                (#xBEC0 . #x7EA0)	;CJK UNIFIED IDEOGRAPH
                                (#xBEC1 . #x7396)	;CJK UNIFIED IDEOGRAPH
                                (#xBEC2 . #x97ED)	;CJK UNIFIED IDEOGRAPH
                                (#xBEC3 . #x4E45)	;CJK UNIFIED IDEOGRAPH
                                (#xBEC4 . #x7078)	;CJK UNIFIED IDEOGRAPH
                                (#xBEC5 . #x4E5D)	;CJK UNIFIED IDEOGRAPH
                                (#xBEC6 . #x9152)	;CJK UNIFIED IDEOGRAPH
                                (#xBEC7 . #x53A9)	;CJK UNIFIED IDEOGRAPH
                                (#xBEC8 . #x6551)	;CJK UNIFIED IDEOGRAPH
                                (#xBEC9 . #x65E7)	;CJK UNIFIED IDEOGRAPH
                                (#xBECA . #x81FC)	;CJK UNIFIED IDEOGRAPH
                                (#xBECB . #x8205)	;CJK UNIFIED IDEOGRAPH
                                (#xBECC . #x548E)	;CJK UNIFIED IDEOGRAPH
                                (#xBECD . #x5C31)	;CJK UNIFIED IDEOGRAPH
                                (#xBECE . #x759A)	;CJK UNIFIED IDEOGRAPH
                                (#xBECF . #x97A0)	;CJK UNIFIED IDEOGRAPH
                                (#xBED0 . #x62D8)	;CJK UNIFIED IDEOGRAPH
                                (#xBED1 . #x72D9)	;CJK UNIFIED IDEOGRAPH
                                (#xBED2 . #x75BD)	;CJK UNIFIED IDEOGRAPH
                                (#xBED3 . #x5C45)	;CJK UNIFIED IDEOGRAPH
                                (#xBED4 . #x9A79)	;CJK UNIFIED IDEOGRAPH
                                (#xBED5 . #x83CA)	;CJK UNIFIED IDEOGRAPH
                                (#xBED6 . #x5C40)	;CJK UNIFIED IDEOGRAPH
                                (#xBED7 . #x5480)	;CJK UNIFIED IDEOGRAPH
                                (#xBED8 . #x77E9)	;CJK UNIFIED IDEOGRAPH
                                (#xBED9 . #x4E3E)	;CJK UNIFIED IDEOGRAPH
                                (#xBEDA . #x6CAE)	;CJK UNIFIED IDEOGRAPH
                                (#xBEDB . #x805A)	;CJK UNIFIED IDEOGRAPH
                                (#xBEDC . #x62D2)	;CJK UNIFIED IDEOGRAPH
                                (#xBEDD . #x636E)	;CJK UNIFIED IDEOGRAPH
                                (#xBEDE . #x5DE8)	;CJK UNIFIED IDEOGRAPH
                                (#xBEDF . #x5177)	;CJK UNIFIED IDEOGRAPH
                                (#xBEE0 . #x8DDD)	;CJK UNIFIED IDEOGRAPH
                                (#xBEE1 . #x8E1E)	;CJK UNIFIED IDEOGRAPH
                                (#xBEE2 . #x952F)	;CJK UNIFIED IDEOGRAPH
                                (#xBEE3 . #x4FF1)	;CJK UNIFIED IDEOGRAPH
                                (#xBEE4 . #x53E5)	;CJK UNIFIED IDEOGRAPH
                                (#xBEE5 . #x60E7)	;CJK UNIFIED IDEOGRAPH
                                (#xBEE6 . #x70AC)	;CJK UNIFIED IDEOGRAPH
                                (#xBEE7 . #x5267)	;CJK UNIFIED IDEOGRAPH
                                (#xBEE8 . #x6350)	;CJK UNIFIED IDEOGRAPH
                                (#xBEE9 . #x9E43)	;CJK UNIFIED IDEOGRAPH
                                (#xBEEA . #x5A1F)	;CJK UNIFIED IDEOGRAPH
                                (#xBEEB . #x5026)	;CJK UNIFIED IDEOGRAPH
                                (#xBEEC . #x7737)	;CJK UNIFIED IDEOGRAPH
                                (#xBEED . #x5377)	;CJK UNIFIED IDEOGRAPH
                                (#xBEEE . #x7EE2)	;CJK UNIFIED IDEOGRAPH
                                (#xBEEF . #x6485)	;CJK UNIFIED IDEOGRAPH
                                (#xBEF0 . #x652B)	;CJK UNIFIED IDEOGRAPH
                                (#xBEF1 . #x6289)	;CJK UNIFIED IDEOGRAPH
                                (#xBEF2 . #x6398)	;CJK UNIFIED IDEOGRAPH
                                (#xBEF3 . #x5014)	;CJK UNIFIED IDEOGRAPH
                                (#xBEF4 . #x7235)	;CJK UNIFIED IDEOGRAPH
                                (#xBEF5 . #x89C9)	;CJK UNIFIED IDEOGRAPH
                                (#xBEF6 . #x51B3)	;CJK UNIFIED IDEOGRAPH
                                (#xBEF7 . #x8BC0)	;CJK UNIFIED IDEOGRAPH
                                (#xBEF8 . #x7EDD)	;CJK UNIFIED IDEOGRAPH
                                (#xBEF9 . #x5747)	;CJK UNIFIED IDEOGRAPH
                                (#xBEFA . #x83CC)	;CJK UNIFIED IDEOGRAPH
                                (#xBEFB . #x94A7)	;CJK UNIFIED IDEOGRAPH
                                (#xBEFC . #x519B)	;CJK UNIFIED IDEOGRAPH
                                (#xBEFD . #x541B)	;CJK UNIFIED IDEOGRAPH
                                (#xBEFE . #x5CFB)	;CJK UNIFIED IDEOGRAPH
                                (#xBF40 . #x7DFB)	;CJK UNIFIED IDEOGRAPH
                                (#xBF41 . #x7DFC)	;CJK UNIFIED IDEOGRAPH
                                (#xBF42 . #x7DFD)	;CJK UNIFIED IDEOGRAPH
                                (#xBF43 . #x7DFE)	;CJK UNIFIED IDEOGRAPH
                                (#xBF44 . #x7DFF)	;CJK UNIFIED IDEOGRAPH
                                (#xBF45 . #x7E00)	;CJK UNIFIED IDEOGRAPH
                                (#xBF46 . #x7E01)	;CJK UNIFIED IDEOGRAPH
                                (#xBF47 . #x7E02)	;CJK UNIFIED IDEOGRAPH
                                (#xBF48 . #x7E03)	;CJK UNIFIED IDEOGRAPH
                                (#xBF49 . #x7E04)	;CJK UNIFIED IDEOGRAPH
                                (#xBF4A . #x7E05)	;CJK UNIFIED IDEOGRAPH
                                (#xBF4B . #x7E06)	;CJK UNIFIED IDEOGRAPH
                                (#xBF4C . #x7E07)	;CJK UNIFIED IDEOGRAPH
                                (#xBF4D . #x7E08)	;CJK UNIFIED IDEOGRAPH
                                (#xBF4E . #x7E09)	;CJK UNIFIED IDEOGRAPH
                                (#xBF4F . #x7E0A)	;CJK UNIFIED IDEOGRAPH
                                (#xBF50 . #x7E0B)	;CJK UNIFIED IDEOGRAPH
                                (#xBF51 . #x7E0C)	;CJK UNIFIED IDEOGRAPH
                                (#xBF52 . #x7E0D)	;CJK UNIFIED IDEOGRAPH
                                (#xBF53 . #x7E0E)	;CJK UNIFIED IDEOGRAPH
                                (#xBF54 . #x7E0F)	;CJK UNIFIED IDEOGRAPH
                                (#xBF55 . #x7E10)	;CJK UNIFIED IDEOGRAPH
                                (#xBF56 . #x7E11)	;CJK UNIFIED IDEOGRAPH
                                (#xBF57 . #x7E12)	;CJK UNIFIED IDEOGRAPH
                                (#xBF58 . #x7E13)	;CJK UNIFIED IDEOGRAPH
                                (#xBF59 . #x7E14)	;CJK UNIFIED IDEOGRAPH
                                (#xBF5A . #x7E15)	;CJK UNIFIED IDEOGRAPH
                                (#xBF5B . #x7E16)	;CJK UNIFIED IDEOGRAPH
                                (#xBF5C . #x7E17)	;CJK UNIFIED IDEOGRAPH
                                (#xBF5D . #x7E18)	;CJK UNIFIED IDEOGRAPH
                                (#xBF5E . #x7E19)	;CJK UNIFIED IDEOGRAPH
                                (#xBF5F . #x7E1A)	;CJK UNIFIED IDEOGRAPH
                                (#xBF60 . #x7E1B)	;CJK UNIFIED IDEOGRAPH
                                (#xBF61 . #x7E1C)	;CJK UNIFIED IDEOGRAPH
                                (#xBF62 . #x7E1D)	;CJK UNIFIED IDEOGRAPH
                                (#xBF63 . #x7E1E)	;CJK UNIFIED IDEOGRAPH
                                (#xBF64 . #x7E1F)	;CJK UNIFIED IDEOGRAPH
                                (#xBF65 . #x7E20)	;CJK UNIFIED IDEOGRAPH
                                (#xBF66 . #x7E21)	;CJK UNIFIED IDEOGRAPH
                                (#xBF67 . #x7E22)	;CJK UNIFIED IDEOGRAPH
                                (#xBF68 . #x7E23)	;CJK UNIFIED IDEOGRAPH
                                (#xBF69 . #x7E24)	;CJK UNIFIED IDEOGRAPH
                                (#xBF6A . #x7E25)	;CJK UNIFIED IDEOGRAPH
                                (#xBF6B . #x7E26)	;CJK UNIFIED IDEOGRAPH
                                (#xBF6C . #x7E27)	;CJK UNIFIED IDEOGRAPH
                                (#xBF6D . #x7E28)	;CJK UNIFIED IDEOGRAPH
                                (#xBF6E . #x7E29)	;CJK UNIFIED IDEOGRAPH
                                (#xBF6F . #x7E2A)	;CJK UNIFIED IDEOGRAPH
                                (#xBF70 . #x7E2B)	;CJK UNIFIED IDEOGRAPH
                                (#xBF71 . #x7E2C)	;CJK UNIFIED IDEOGRAPH
                                (#xBF72 . #x7E2D)	;CJK UNIFIED IDEOGRAPH
                                (#xBF73 . #x7E2E)	;CJK UNIFIED IDEOGRAPH
                                (#xBF74 . #x7E2F)	;CJK UNIFIED IDEOGRAPH
                                (#xBF75 . #x7E30)	;CJK UNIFIED IDEOGRAPH
                                (#xBF76 . #x7E31)	;CJK UNIFIED IDEOGRAPH
                                (#xBF77 . #x7E32)	;CJK UNIFIED IDEOGRAPH
                                (#xBF78 . #x7E33)	;CJK UNIFIED IDEOGRAPH
                                (#xBF79 . #x7E34)	;CJK UNIFIED IDEOGRAPH
                                (#xBF7A . #x7E35)	;CJK UNIFIED IDEOGRAPH
                                (#xBF7B . #x7E36)	;CJK UNIFIED IDEOGRAPH
                                (#xBF7C . #x7E37)	;CJK UNIFIED IDEOGRAPH
                                (#xBF7D . #x7E38)	;CJK UNIFIED IDEOGRAPH
                                (#xBF7E . #x7E39)	;CJK UNIFIED IDEOGRAPH
                                (#xBF80 . #x7E3A)	;CJK UNIFIED IDEOGRAPH
                                (#xBF81 . #x7E3C)	;CJK UNIFIED IDEOGRAPH
                                (#xBF82 . #x7E3D)	;CJK UNIFIED IDEOGRAPH
                                (#xBF83 . #x7E3E)	;CJK UNIFIED IDEOGRAPH
                                (#xBF84 . #x7E3F)	;CJK UNIFIED IDEOGRAPH
                                (#xBF85 . #x7E40)	;CJK UNIFIED IDEOGRAPH
                                (#xBF86 . #x7E42)	;CJK UNIFIED IDEOGRAPH
                                (#xBF87 . #x7E43)	;CJK UNIFIED IDEOGRAPH
                                (#xBF88 . #x7E44)	;CJK UNIFIED IDEOGRAPH
                                (#xBF89 . #x7E45)	;CJK UNIFIED IDEOGRAPH
                                (#xBF8A . #x7E46)	;CJK UNIFIED IDEOGRAPH
                                (#xBF8B . #x7E48)	;CJK UNIFIED IDEOGRAPH
                                (#xBF8C . #x7E49)	;CJK UNIFIED IDEOGRAPH
                                (#xBF8D . #x7E4A)	;CJK UNIFIED IDEOGRAPH
                                (#xBF8E . #x7E4B)	;CJK UNIFIED IDEOGRAPH
                                (#xBF8F . #x7E4C)	;CJK UNIFIED IDEOGRAPH
                                (#xBF90 . #x7E4D)	;CJK UNIFIED IDEOGRAPH
                                (#xBF91 . #x7E4E)	;CJK UNIFIED IDEOGRAPH
                                (#xBF92 . #x7E4F)	;CJK UNIFIED IDEOGRAPH
                                (#xBF93 . #x7E50)	;CJK UNIFIED IDEOGRAPH
                                (#xBF94 . #x7E51)	;CJK UNIFIED IDEOGRAPH
                                (#xBF95 . #x7E52)	;CJK UNIFIED IDEOGRAPH
                                (#xBF96 . #x7E53)	;CJK UNIFIED IDEOGRAPH
                                (#xBF97 . #x7E54)	;CJK UNIFIED IDEOGRAPH
                                (#xBF98 . #x7E55)	;CJK UNIFIED IDEOGRAPH
                                (#xBF99 . #x7E56)	;CJK UNIFIED IDEOGRAPH
                                (#xBF9A . #x7E57)	;CJK UNIFIED IDEOGRAPH
                                (#xBF9B . #x7E58)	;CJK UNIFIED IDEOGRAPH
                                (#xBF9C . #x7E59)	;CJK UNIFIED IDEOGRAPH
                                (#xBF9D . #x7E5A)	;CJK UNIFIED IDEOGRAPH
                                (#xBF9E . #x7E5B)	;CJK UNIFIED IDEOGRAPH
                                (#xBF9F . #x7E5C)	;CJK UNIFIED IDEOGRAPH
                                (#xBFA0 . #x7E5D)	;CJK UNIFIED IDEOGRAPH
                                (#xBFA1 . #x4FCA)	;CJK UNIFIED IDEOGRAPH
                                (#xBFA2 . #x7AE3)	;CJK UNIFIED IDEOGRAPH
                                (#xBFA3 . #x6D5A)	;CJK UNIFIED IDEOGRAPH
                                (#xBFA4 . #x90E1)	;CJK UNIFIED IDEOGRAPH
                                (#xBFA5 . #x9A8F)	;CJK UNIFIED IDEOGRAPH
                                (#xBFA6 . #x5580)	;CJK UNIFIED IDEOGRAPH
                                (#xBFA7 . #x5496)	;CJK UNIFIED IDEOGRAPH
                                (#xBFA8 . #x5361)	;CJK UNIFIED IDEOGRAPH
                                (#xBFA9 . #x54AF)	;CJK UNIFIED IDEOGRAPH
                                (#xBFAA . #x5F00)	;CJK UNIFIED IDEOGRAPH
                                (#xBFAB . #x63E9)	;CJK UNIFIED IDEOGRAPH
                                (#xBFAC . #x6977)	;CJK UNIFIED IDEOGRAPH
                                (#xBFAD . #x51EF)	;CJK UNIFIED IDEOGRAPH
                                (#xBFAE . #x6168)	;CJK UNIFIED IDEOGRAPH
                                (#xBFAF . #x520A)	;CJK UNIFIED IDEOGRAPH
                                (#xBFB0 . #x582A)	;CJK UNIFIED IDEOGRAPH
                                (#xBFB1 . #x52D8)	;CJK UNIFIED IDEOGRAPH
                                (#xBFB2 . #x574E)	;CJK UNIFIED IDEOGRAPH
                                (#xBFB3 . #x780D)	;CJK UNIFIED IDEOGRAPH
                                (#xBFB4 . #x770B)	;CJK UNIFIED IDEOGRAPH
                                (#xBFB5 . #x5EB7)	;CJK UNIFIED IDEOGRAPH
                                (#xBFB6 . #x6177)	;CJK UNIFIED IDEOGRAPH
                                (#xBFB7 . #x7CE0)	;CJK UNIFIED IDEOGRAPH
                                (#xBFB8 . #x625B)	;CJK UNIFIED IDEOGRAPH
                                (#xBFB9 . #x6297)	;CJK UNIFIED IDEOGRAPH
                                (#xBFBA . #x4EA2)	;CJK UNIFIED IDEOGRAPH
                                (#xBFBB . #x7095)	;CJK UNIFIED IDEOGRAPH
                                (#xBFBC . #x8003)	;CJK UNIFIED IDEOGRAPH
                                (#xBFBD . #x62F7)	;CJK UNIFIED IDEOGRAPH
                                (#xBFBE . #x70E4)	;CJK UNIFIED IDEOGRAPH
                                (#xBFBF . #x9760)	;CJK UNIFIED IDEOGRAPH
                                (#xBFC0 . #x5777)	;CJK UNIFIED IDEOGRAPH
                                (#xBFC1 . #x82DB)	;CJK UNIFIED IDEOGRAPH
                                (#xBFC2 . #x67EF)	;CJK UNIFIED IDEOGRAPH
                                (#xBFC3 . #x68F5)	;CJK UNIFIED IDEOGRAPH
                                (#xBFC4 . #x78D5)	;CJK UNIFIED IDEOGRAPH
                                (#xBFC5 . #x9897)	;CJK UNIFIED IDEOGRAPH
                                (#xBFC6 . #x79D1)	;CJK UNIFIED IDEOGRAPH
                                (#xBFC7 . #x58F3)	;CJK UNIFIED IDEOGRAPH
                                (#xBFC8 . #x54B3)	;CJK UNIFIED IDEOGRAPH
                                (#xBFC9 . #x53EF)	;CJK UNIFIED IDEOGRAPH
                                (#xBFCA . #x6E34)	;CJK UNIFIED IDEOGRAPH
                                (#xBFCB . #x514B)	;CJK UNIFIED IDEOGRAPH
                                (#xBFCC . #x523B)	;CJK UNIFIED IDEOGRAPH
                                (#xBFCD . #x5BA2)	;CJK UNIFIED IDEOGRAPH
                                (#xBFCE . #x8BFE)	;CJK UNIFIED IDEOGRAPH
                                (#xBFCF . #x80AF)	;CJK UNIFIED IDEOGRAPH
                                (#xBFD0 . #x5543)	;CJK UNIFIED IDEOGRAPH
                                (#xBFD1 . #x57A6)	;CJK UNIFIED IDEOGRAPH
                                (#xBFD2 . #x6073)	;CJK UNIFIED IDEOGRAPH
                                (#xBFD3 . #x5751)	;CJK UNIFIED IDEOGRAPH
                                (#xBFD4 . #x542D)	;CJK UNIFIED IDEOGRAPH
                                (#xBFD5 . #x7A7A)	;CJK UNIFIED IDEOGRAPH
                                (#xBFD6 . #x6050)	;CJK UNIFIED IDEOGRAPH
                                (#xBFD7 . #x5B54)	;CJK UNIFIED IDEOGRAPH
                                (#xBFD8 . #x63A7)	;CJK UNIFIED IDEOGRAPH
                                (#xBFD9 . #x62A0)	;CJK UNIFIED IDEOGRAPH
                                (#xBFDA . #x53E3)	;CJK UNIFIED IDEOGRAPH
                                (#xBFDB . #x6263)	;CJK UNIFIED IDEOGRAPH
                                (#xBFDC . #x5BC7)	;CJK UNIFIED IDEOGRAPH
                                (#xBFDD . #x67AF)	;CJK UNIFIED IDEOGRAPH
                                (#xBFDE . #x54ED)	;CJK UNIFIED IDEOGRAPH
                                (#xBFDF . #x7A9F)	;CJK UNIFIED IDEOGRAPH
                                (#xBFE0 . #x82E6)	;CJK UNIFIED IDEOGRAPH
                                (#xBFE1 . #x9177)	;CJK UNIFIED IDEOGRAPH
                                (#xBFE2 . #x5E93)	;CJK UNIFIED IDEOGRAPH
                                (#xBFE3 . #x88E4)	;CJK UNIFIED IDEOGRAPH
                                (#xBFE4 . #x5938)	;CJK UNIFIED IDEOGRAPH
                                (#xBFE5 . #x57AE)	;CJK UNIFIED IDEOGRAPH
                                (#xBFE6 . #x630E)	;CJK UNIFIED IDEOGRAPH
                                (#xBFE7 . #x8DE8)	;CJK UNIFIED IDEOGRAPH
                                (#xBFE8 . #x80EF)	;CJK UNIFIED IDEOGRAPH
                                (#xBFE9 . #x5757)	;CJK UNIFIED IDEOGRAPH
                                (#xBFEA . #x7B77)	;CJK UNIFIED IDEOGRAPH
                                (#xBFEB . #x4FA9)	;CJK UNIFIED IDEOGRAPH
                                (#xBFEC . #x5FEB)	;CJK UNIFIED IDEOGRAPH
                                (#xBFED . #x5BBD)	;CJK UNIFIED IDEOGRAPH
                                (#xBFEE . #x6B3E)	;CJK UNIFIED IDEOGRAPH
                                (#xBFEF . #x5321)	;CJK UNIFIED IDEOGRAPH
                                (#xBFF0 . #x7B50)	;CJK UNIFIED IDEOGRAPH
                                (#xBFF1 . #x72C2)	;CJK UNIFIED IDEOGRAPH
                                (#xBFF2 . #x6846)	;CJK UNIFIED IDEOGRAPH
                                (#xBFF3 . #x77FF)	;CJK UNIFIED IDEOGRAPH
                                (#xBFF4 . #x7736)	;CJK UNIFIED IDEOGRAPH
                                (#xBFF5 . #x65F7)	;CJK UNIFIED IDEOGRAPH
                                (#xBFF6 . #x51B5)	;CJK UNIFIED IDEOGRAPH
                                (#xBFF7 . #x4E8F)	;CJK UNIFIED IDEOGRAPH
                                (#xBFF8 . #x76D4)	;CJK UNIFIED IDEOGRAPH
                                (#xBFF9 . #x5CBF)	;CJK UNIFIED IDEOGRAPH
                                (#xBFFA . #x7AA5)	;CJK UNIFIED IDEOGRAPH
                                (#xBFFB . #x8475)	;CJK UNIFIED IDEOGRAPH
                                (#xBFFC . #x594E)	;CJK UNIFIED IDEOGRAPH
                                (#xBFFD . #x9B41)	;CJK UNIFIED IDEOGRAPH
                                (#xBFFE . #x5080)	;CJK UNIFIED IDEOGRAPH
                                (#xC040 . #x7E5E)	;CJK UNIFIED IDEOGRAPH
                                (#xC041 . #x7E5F)	;CJK UNIFIED IDEOGRAPH
                                (#xC042 . #x7E60)	;CJK UNIFIED IDEOGRAPH
                                (#xC043 . #x7E61)	;CJK UNIFIED IDEOGRAPH
                                (#xC044 . #x7E62)	;CJK UNIFIED IDEOGRAPH
                                (#xC045 . #x7E63)	;CJK UNIFIED IDEOGRAPH
                                (#xC046 . #x7E64)	;CJK UNIFIED IDEOGRAPH
                                (#xC047 . #x7E65)	;CJK UNIFIED IDEOGRAPH
                                (#xC048 . #x7E66)	;CJK UNIFIED IDEOGRAPH
                                (#xC049 . #x7E67)	;CJK UNIFIED IDEOGRAPH
                                (#xC04A . #x7E68)	;CJK UNIFIED IDEOGRAPH
                                (#xC04B . #x7E69)	;CJK UNIFIED IDEOGRAPH
                                (#xC04C . #x7E6A)	;CJK UNIFIED IDEOGRAPH
                                (#xC04D . #x7E6B)	;CJK UNIFIED IDEOGRAPH
                                (#xC04E . #x7E6C)	;CJK UNIFIED IDEOGRAPH
                                (#xC04F . #x7E6D)	;CJK UNIFIED IDEOGRAPH
                                (#xC050 . #x7E6E)	;CJK UNIFIED IDEOGRAPH
                                (#xC051 . #x7E6F)	;CJK UNIFIED IDEOGRAPH
                                (#xC052 . #x7E70)	;CJK UNIFIED IDEOGRAPH
                                (#xC053 . #x7E71)	;CJK UNIFIED IDEOGRAPH
                                (#xC054 . #x7E72)	;CJK UNIFIED IDEOGRAPH
                                (#xC055 . #x7E73)	;CJK UNIFIED IDEOGRAPH
                                (#xC056 . #x7E74)	;CJK UNIFIED IDEOGRAPH
                                (#xC057 . #x7E75)	;CJK UNIFIED IDEOGRAPH
                                (#xC058 . #x7E76)	;CJK UNIFIED IDEOGRAPH
                                (#xC059 . #x7E77)	;CJK UNIFIED IDEOGRAPH
                                (#xC05A . #x7E78)	;CJK UNIFIED IDEOGRAPH
                                (#xC05B . #x7E79)	;CJK UNIFIED IDEOGRAPH
                                (#xC05C . #x7E7A)	;CJK UNIFIED IDEOGRAPH
                                (#xC05D . #x7E7B)	;CJK UNIFIED IDEOGRAPH
                                (#xC05E . #x7E7C)	;CJK UNIFIED IDEOGRAPH
                                (#xC05F . #x7E7D)	;CJK UNIFIED IDEOGRAPH
                                (#xC060 . #x7E7E)	;CJK UNIFIED IDEOGRAPH
                                (#xC061 . #x7E7F)	;CJK UNIFIED IDEOGRAPH
                                (#xC062 . #x7E80)	;CJK UNIFIED IDEOGRAPH
                                (#xC063 . #x7E81)	;CJK UNIFIED IDEOGRAPH
                                (#xC064 . #x7E83)	;CJK UNIFIED IDEOGRAPH
                                (#xC065 . #x7E84)	;CJK UNIFIED IDEOGRAPH
                                (#xC066 . #x7E85)	;CJK UNIFIED IDEOGRAPH
                                (#xC067 . #x7E86)	;CJK UNIFIED IDEOGRAPH
                                (#xC068 . #x7E87)	;CJK UNIFIED IDEOGRAPH
                                (#xC069 . #x7E88)	;CJK UNIFIED IDEOGRAPH
                                (#xC06A . #x7E89)	;CJK UNIFIED IDEOGRAPH
                                (#xC06B . #x7E8A)	;CJK UNIFIED IDEOGRAPH
                                (#xC06C . #x7E8B)	;CJK UNIFIED IDEOGRAPH
                                (#xC06D . #x7E8C)	;CJK UNIFIED IDEOGRAPH
                                (#xC06E . #x7E8D)	;CJK UNIFIED IDEOGRAPH
                                (#xC06F . #x7E8E)	;CJK UNIFIED IDEOGRAPH
                                (#xC070 . #x7E8F)	;CJK UNIFIED IDEOGRAPH
                                (#xC071 . #x7E90)	;CJK UNIFIED IDEOGRAPH
                                (#xC072 . #x7E91)	;CJK UNIFIED IDEOGRAPH
                                (#xC073 . #x7E92)	;CJK UNIFIED IDEOGRAPH
                                (#xC074 . #x7E93)	;CJK UNIFIED IDEOGRAPH
                                (#xC075 . #x7E94)	;CJK UNIFIED IDEOGRAPH
                                (#xC076 . #x7E95)	;CJK UNIFIED IDEOGRAPH
                                (#xC077 . #x7E96)	;CJK UNIFIED IDEOGRAPH
                                (#xC078 . #x7E97)	;CJK UNIFIED IDEOGRAPH
                                (#xC079 . #x7E98)	;CJK UNIFIED IDEOGRAPH
                                (#xC07A . #x7E99)	;CJK UNIFIED IDEOGRAPH
                                (#xC07B . #x7E9A)	;CJK UNIFIED IDEOGRAPH
                                (#xC07C . #x7E9C)	;CJK UNIFIED IDEOGRAPH
                                (#xC07D . #x7E9D)	;CJK UNIFIED IDEOGRAPH
                                (#xC07E . #x7E9E)	;CJK UNIFIED IDEOGRAPH
                                (#xC080 . #x7EAE)	;CJK UNIFIED IDEOGRAPH
                                (#xC081 . #x7EB4)	;CJK UNIFIED IDEOGRAPH
                                (#xC082 . #x7EBB)	;CJK UNIFIED IDEOGRAPH
                                (#xC083 . #x7EBC)	;CJK UNIFIED IDEOGRAPH
                                (#xC084 . #x7ED6)	;CJK UNIFIED IDEOGRAPH
                                (#xC085 . #x7EE4)	;CJK UNIFIED IDEOGRAPH
                                (#xC086 . #x7EEC)	;CJK UNIFIED IDEOGRAPH
                                (#xC087 . #x7EF9)	;CJK UNIFIED IDEOGRAPH
                                (#xC088 . #x7F0A)	;CJK UNIFIED IDEOGRAPH
                                (#xC089 . #x7F10)	;CJK UNIFIED IDEOGRAPH
                                (#xC08A . #x7F1E)	;CJK UNIFIED IDEOGRAPH
                                (#xC08B . #x7F37)	;CJK UNIFIED IDEOGRAPH
                                (#xC08C . #x7F39)	;CJK UNIFIED IDEOGRAPH
                                (#xC08D . #x7F3B)	;CJK UNIFIED IDEOGRAPH
                                (#xC08E . #x7F3C)	;CJK UNIFIED IDEOGRAPH
                                (#xC08F . #x7F3D)	;CJK UNIFIED IDEOGRAPH
                                (#xC090 . #x7F3E)	;CJK UNIFIED IDEOGRAPH
                                (#xC091 . #x7F3F)	;CJK UNIFIED IDEOGRAPH
                                (#xC092 . #x7F40)	;CJK UNIFIED IDEOGRAPH
                                (#xC093 . #x7F41)	;CJK UNIFIED IDEOGRAPH
                                (#xC094 . #x7F43)	;CJK UNIFIED IDEOGRAPH
                                (#xC095 . #x7F46)	;CJK UNIFIED IDEOGRAPH
                                (#xC096 . #x7F47)	;CJK UNIFIED IDEOGRAPH
                                (#xC097 . #x7F48)	;CJK UNIFIED IDEOGRAPH
                                (#xC098 . #x7F49)	;CJK UNIFIED IDEOGRAPH
                                (#xC099 . #x7F4A)	;CJK UNIFIED IDEOGRAPH
                                (#xC09A . #x7F4B)	;CJK UNIFIED IDEOGRAPH
                                (#xC09B . #x7F4C)	;CJK UNIFIED IDEOGRAPH
                                (#xC09C . #x7F4D)	;CJK UNIFIED IDEOGRAPH
                                (#xC09D . #x7F4E)	;CJK UNIFIED IDEOGRAPH
                                (#xC09E . #x7F4F)	;CJK UNIFIED IDEOGRAPH
                                (#xC09F . #x7F52)	;CJK UNIFIED IDEOGRAPH
                                (#xC0A0 . #x7F53)	;CJK UNIFIED IDEOGRAPH
                                (#xC0A1 . #x9988)	;CJK UNIFIED IDEOGRAPH
                                (#xC0A2 . #x6127)	;CJK UNIFIED IDEOGRAPH
                                (#xC0A3 . #x6E83)	;CJK UNIFIED IDEOGRAPH
                                (#xC0A4 . #x5764)	;CJK UNIFIED IDEOGRAPH
                                (#xC0A5 . #x6606)	;CJK UNIFIED IDEOGRAPH
                                (#xC0A6 . #x6346)	;CJK UNIFIED IDEOGRAPH
                                (#xC0A7 . #x56F0)	;CJK UNIFIED IDEOGRAPH
                                (#xC0A8 . #x62EC)	;CJK UNIFIED IDEOGRAPH
                                (#xC0A9 . #x6269)	;CJK UNIFIED IDEOGRAPH
                                (#xC0AA . #x5ED3)	;CJK UNIFIED IDEOGRAPH
                                (#xC0AB . #x9614)	;CJK UNIFIED IDEOGRAPH
                                (#xC0AC . #x5783)	;CJK UNIFIED IDEOGRAPH
                                (#xC0AD . #x62C9)	;CJK UNIFIED IDEOGRAPH
                                (#xC0AE . #x5587)	;CJK UNIFIED IDEOGRAPH
                                (#xC0AF . #x8721)	;CJK UNIFIED IDEOGRAPH
                                (#xC0B0 . #x814A)	;CJK UNIFIED IDEOGRAPH
                                (#xC0B1 . #x8FA3)	;CJK UNIFIED IDEOGRAPH
                                (#xC0B2 . #x5566)	;CJK UNIFIED IDEOGRAPH
                                (#xC0B3 . #x83B1)	;CJK UNIFIED IDEOGRAPH
                                (#xC0B4 . #x6765)	;CJK UNIFIED IDEOGRAPH
                                (#xC0B5 . #x8D56)	;CJK UNIFIED IDEOGRAPH
                                (#xC0B6 . #x84DD)	;CJK UNIFIED IDEOGRAPH
                                (#xC0B7 . #x5A6A)	;CJK UNIFIED IDEOGRAPH
                                (#xC0B8 . #x680F)	;CJK UNIFIED IDEOGRAPH
                                (#xC0B9 . #x62E6)	;CJK UNIFIED IDEOGRAPH
                                (#xC0BA . #x7BEE)	;CJK UNIFIED IDEOGRAPH
                                (#xC0BB . #x9611)	;CJK UNIFIED IDEOGRAPH
                                (#xC0BC . #x5170)	;CJK UNIFIED IDEOGRAPH
                                (#xC0BD . #x6F9C)	;CJK UNIFIED IDEOGRAPH
                                (#xC0BE . #x8C30)	;CJK UNIFIED IDEOGRAPH
                                (#xC0BF . #x63FD)	;CJK UNIFIED IDEOGRAPH
                                (#xC0C0 . #x89C8)	;CJK UNIFIED IDEOGRAPH
                                (#xC0C1 . #x61D2)	;CJK UNIFIED IDEOGRAPH
                                (#xC0C2 . #x7F06)	;CJK UNIFIED IDEOGRAPH
                                (#xC0C3 . #x70C2)	;CJK UNIFIED IDEOGRAPH
                                (#xC0C4 . #x6EE5)	;CJK UNIFIED IDEOGRAPH
                                (#xC0C5 . #x7405)	;CJK UNIFIED IDEOGRAPH
                                (#xC0C6 . #x6994)	;CJK UNIFIED IDEOGRAPH
                                (#xC0C7 . #x72FC)	;CJK UNIFIED IDEOGRAPH
                                (#xC0C8 . #x5ECA)	;CJK UNIFIED IDEOGRAPH
                                (#xC0C9 . #x90CE)	;CJK UNIFIED IDEOGRAPH
                                (#xC0CA . #x6717)	;CJK UNIFIED IDEOGRAPH
                                (#xC0CB . #x6D6A)	;CJK UNIFIED IDEOGRAPH
                                (#xC0CC . #x635E)	;CJK UNIFIED IDEOGRAPH
                                (#xC0CD . #x52B3)	;CJK UNIFIED IDEOGRAPH
                                (#xC0CE . #x7262)	;CJK UNIFIED IDEOGRAPH
                                (#xC0CF . #x8001)	;CJK UNIFIED IDEOGRAPH
                                (#xC0D0 . #x4F6C)	;CJK UNIFIED IDEOGRAPH
                                (#xC0D1 . #x59E5)	;CJK UNIFIED IDEOGRAPH
                                (#xC0D2 . #x916A)	;CJK UNIFIED IDEOGRAPH
                                (#xC0D3 . #x70D9)	;CJK UNIFIED IDEOGRAPH
                                (#xC0D4 . #x6D9D)	;CJK UNIFIED IDEOGRAPH
                                (#xC0D5 . #x52D2)	;CJK UNIFIED IDEOGRAPH
                                (#xC0D6 . #x4E50)	;CJK UNIFIED IDEOGRAPH
                                (#xC0D7 . #x96F7)	;CJK UNIFIED IDEOGRAPH
                                (#xC0D8 . #x956D)	;CJK UNIFIED IDEOGRAPH
                                (#xC0D9 . #x857E)	;CJK UNIFIED IDEOGRAPH
                                (#xC0DA . #x78CA)	;CJK UNIFIED IDEOGRAPH
                                (#xC0DB . #x7D2F)	;CJK UNIFIED IDEOGRAPH
                                (#xC0DC . #x5121)	;CJK UNIFIED IDEOGRAPH
                                (#xC0DD . #x5792)	;CJK UNIFIED IDEOGRAPH
                                (#xC0DE . #x64C2)	;CJK UNIFIED IDEOGRAPH
                                (#xC0DF . #x808B)	;CJK UNIFIED IDEOGRAPH
                                (#xC0E0 . #x7C7B)	;CJK UNIFIED IDEOGRAPH
                                (#xC0E1 . #x6CEA)	;CJK UNIFIED IDEOGRAPH
                                (#xC0E2 . #x68F1)	;CJK UNIFIED IDEOGRAPH
                                (#xC0E3 . #x695E)	;CJK UNIFIED IDEOGRAPH
                                (#xC0E4 . #x51B7)	;CJK UNIFIED IDEOGRAPH
                                (#xC0E5 . #x5398)	;CJK UNIFIED IDEOGRAPH
                                (#xC0E6 . #x68A8)	;CJK UNIFIED IDEOGRAPH
                                (#xC0E7 . #x7281)	;CJK UNIFIED IDEOGRAPH
                                (#xC0E8 . #x9ECE)	;CJK UNIFIED IDEOGRAPH
                                (#xC0E9 . #x7BF1)	;CJK UNIFIED IDEOGRAPH
                                (#xC0EA . #x72F8)	;CJK UNIFIED IDEOGRAPH
                                (#xC0EB . #x79BB)	;CJK UNIFIED IDEOGRAPH
                                (#xC0EC . #x6F13)	;CJK UNIFIED IDEOGRAPH
                                (#xC0ED . #x7406)	;CJK UNIFIED IDEOGRAPH
                                (#xC0EE . #x674E)	;CJK UNIFIED IDEOGRAPH
                                (#xC0EF . #x91CC)	;CJK UNIFIED IDEOGRAPH
                                (#xC0F0 . #x9CA4)	;CJK UNIFIED IDEOGRAPH
                                (#xC0F1 . #x793C)	;CJK UNIFIED IDEOGRAPH
                                (#xC0F2 . #x8389)	;CJK UNIFIED IDEOGRAPH
                                (#xC0F3 . #x8354)	;CJK UNIFIED IDEOGRAPH
                                (#xC0F4 . #x540F)	;CJK UNIFIED IDEOGRAPH
                                (#xC0F5 . #x6817)	;CJK UNIFIED IDEOGRAPH
                                (#xC0F6 . #x4E3D)	;CJK UNIFIED IDEOGRAPH
                                (#xC0F7 . #x5389)	;CJK UNIFIED IDEOGRAPH
                                (#xC0F8 . #x52B1)	;CJK UNIFIED IDEOGRAPH
                                (#xC0F9 . #x783E)	;CJK UNIFIED IDEOGRAPH
                                (#xC0FA . #x5386)	;CJK UNIFIED IDEOGRAPH
                                (#xC0FB . #x5229)	;CJK UNIFIED IDEOGRAPH
                                (#xC0FC . #x5088)	;CJK UNIFIED IDEOGRAPH
                                (#xC0FD . #x4F8B)	;CJK UNIFIED IDEOGRAPH
                                (#xC0FE . #x4FD0)	;CJK UNIFIED IDEOGRAPH
                                (#xC140 . #x7F56)	;CJK UNIFIED IDEOGRAPH
                                (#xC141 . #x7F59)	;CJK UNIFIED IDEOGRAPH
                                (#xC142 . #x7F5B)	;CJK UNIFIED IDEOGRAPH
                                (#xC143 . #x7F5C)	;CJK UNIFIED IDEOGRAPH
                                (#xC144 . #x7F5D)	;CJK UNIFIED IDEOGRAPH
                                (#xC145 . #x7F5E)	;CJK UNIFIED IDEOGRAPH
                                (#xC146 . #x7F60)	;CJK UNIFIED IDEOGRAPH
                                (#xC147 . #x7F63)	;CJK UNIFIED IDEOGRAPH
                                (#xC148 . #x7F64)	;CJK UNIFIED IDEOGRAPH
                                (#xC149 . #x7F65)	;CJK UNIFIED IDEOGRAPH
                                (#xC14A . #x7F66)	;CJK UNIFIED IDEOGRAPH
                                (#xC14B . #x7F67)	;CJK UNIFIED IDEOGRAPH
                                (#xC14C . #x7F6B)	;CJK UNIFIED IDEOGRAPH
                                (#xC14D . #x7F6C)	;CJK UNIFIED IDEOGRAPH
                                (#xC14E . #x7F6D)	;CJK UNIFIED IDEOGRAPH
                                (#xC14F . #x7F6F)	;CJK UNIFIED IDEOGRAPH
                                (#xC150 . #x7F70)	;CJK UNIFIED IDEOGRAPH
                                (#xC151 . #x7F73)	;CJK UNIFIED IDEOGRAPH
                                (#xC152 . #x7F75)	;CJK UNIFIED IDEOGRAPH
                                (#xC153 . #x7F76)	;CJK UNIFIED IDEOGRAPH
                                (#xC154 . #x7F77)	;CJK UNIFIED IDEOGRAPH
                                (#xC155 . #x7F78)	;CJK UNIFIED IDEOGRAPH
                                (#xC156 . #x7F7A)	;CJK UNIFIED IDEOGRAPH
                                (#xC157 . #x7F7B)	;CJK UNIFIED IDEOGRAPH
                                (#xC158 . #x7F7C)	;CJK UNIFIED IDEOGRAPH
                                (#xC159 . #x7F7D)	;CJK UNIFIED IDEOGRAPH
                                (#xC15A . #x7F7F)	;CJK UNIFIED IDEOGRAPH
                                (#xC15B . #x7F80)	;CJK UNIFIED IDEOGRAPH
                                (#xC15C . #x7F82)	;CJK UNIFIED IDEOGRAPH
                                (#xC15D . #x7F83)	;CJK UNIFIED IDEOGRAPH
                                (#xC15E . #x7F84)	;CJK UNIFIED IDEOGRAPH
                                (#xC15F . #x7F85)	;CJK UNIFIED IDEOGRAPH
                                (#xC160 . #x7F86)	;CJK UNIFIED IDEOGRAPH
                                (#xC161 . #x7F87)	;CJK UNIFIED IDEOGRAPH
                                (#xC162 . #x7F88)	;CJK UNIFIED IDEOGRAPH
                                (#xC163 . #x7F89)	;CJK UNIFIED IDEOGRAPH
                                (#xC164 . #x7F8B)	;CJK UNIFIED IDEOGRAPH
                                (#xC165 . #x7F8D)	;CJK UNIFIED IDEOGRAPH
                                (#xC166 . #x7F8F)	;CJK UNIFIED IDEOGRAPH
                                (#xC167 . #x7F90)	;CJK UNIFIED IDEOGRAPH
                                (#xC168 . #x7F91)	;CJK UNIFIED IDEOGRAPH
                                (#xC169 . #x7F92)	;CJK UNIFIED IDEOGRAPH
                                (#xC16A . #x7F93)	;CJK UNIFIED IDEOGRAPH
                                (#xC16B . #x7F95)	;CJK UNIFIED IDEOGRAPH
                                (#xC16C . #x7F96)	;CJK UNIFIED IDEOGRAPH
                                (#xC16D . #x7F97)	;CJK UNIFIED IDEOGRAPH
                                (#xC16E . #x7F98)	;CJK UNIFIED IDEOGRAPH
                                (#xC16F . #x7F99)	;CJK UNIFIED IDEOGRAPH
                                (#xC170 . #x7F9B)	;CJK UNIFIED IDEOGRAPH
                                (#xC171 . #x7F9C)	;CJK UNIFIED IDEOGRAPH
                                (#xC172 . #x7FA0)	;CJK UNIFIED IDEOGRAPH
                                (#xC173 . #x7FA2)	;CJK UNIFIED IDEOGRAPH
                                (#xC174 . #x7FA3)	;CJK UNIFIED IDEOGRAPH
                                (#xC175 . #x7FA5)	;CJK UNIFIED IDEOGRAPH
                                (#xC176 . #x7FA6)	;CJK UNIFIED IDEOGRAPH
                                (#xC177 . #x7FA8)	;CJK UNIFIED IDEOGRAPH
                                (#xC178 . #x7FA9)	;CJK UNIFIED IDEOGRAPH
                                (#xC179 . #x7FAA)	;CJK UNIFIED IDEOGRAPH
                                (#xC17A . #x7FAB)	;CJK UNIFIED IDEOGRAPH
                                (#xC17B . #x7FAC)	;CJK UNIFIED IDEOGRAPH
                                (#xC17C . #x7FAD)	;CJK UNIFIED IDEOGRAPH
                                (#xC17D . #x7FAE)	;CJK UNIFIED IDEOGRAPH
                                (#xC17E . #x7FB1)	;CJK UNIFIED IDEOGRAPH
                                (#xC180 . #x7FB3)	;CJK UNIFIED IDEOGRAPH
                                (#xC181 . #x7FB4)	;CJK UNIFIED IDEOGRAPH
                                (#xC182 . #x7FB5)	;CJK UNIFIED IDEOGRAPH
                                (#xC183 . #x7FB6)	;CJK UNIFIED IDEOGRAPH
                                (#xC184 . #x7FB7)	;CJK UNIFIED IDEOGRAPH
                                (#xC185 . #x7FBA)	;CJK UNIFIED IDEOGRAPH
                                (#xC186 . #x7FBB)	;CJK UNIFIED IDEOGRAPH
                                (#xC187 . #x7FBE)	;CJK UNIFIED IDEOGRAPH
                                (#xC188 . #x7FC0)	;CJK UNIFIED IDEOGRAPH
                                (#xC189 . #x7FC2)	;CJK UNIFIED IDEOGRAPH
                                (#xC18A . #x7FC3)	;CJK UNIFIED IDEOGRAPH
                                (#xC18B . #x7FC4)	;CJK UNIFIED IDEOGRAPH
                                (#xC18C . #x7FC6)	;CJK UNIFIED IDEOGRAPH
                                (#xC18D . #x7FC7)	;CJK UNIFIED IDEOGRAPH
                                (#xC18E . #x7FC8)	;CJK UNIFIED IDEOGRAPH
                                (#xC18F . #x7FC9)	;CJK UNIFIED IDEOGRAPH
                                (#xC190 . #x7FCB)	;CJK UNIFIED IDEOGRAPH
                                (#xC191 . #x7FCD)	;CJK UNIFIED IDEOGRAPH
                                (#xC192 . #x7FCF)	;CJK UNIFIED IDEOGRAPH
                                (#xC193 . #x7FD0)	;CJK UNIFIED IDEOGRAPH
                                (#xC194 . #x7FD1)	;CJK UNIFIED IDEOGRAPH
                                (#xC195 . #x7FD2)	;CJK UNIFIED IDEOGRAPH
                                (#xC196 . #x7FD3)	;CJK UNIFIED IDEOGRAPH
                                (#xC197 . #x7FD6)	;CJK UNIFIED IDEOGRAPH
                                (#xC198 . #x7FD7)	;CJK UNIFIED IDEOGRAPH
                                (#xC199 . #x7FD9)	;CJK UNIFIED IDEOGRAPH
                                (#xC19A . #x7FDA)	;CJK UNIFIED IDEOGRAPH
                                (#xC19B . #x7FDB)	;CJK UNIFIED IDEOGRAPH
                                (#xC19C . #x7FDC)	;CJK UNIFIED IDEOGRAPH
                                (#xC19D . #x7FDD)	;CJK UNIFIED IDEOGRAPH
                                (#xC19E . #x7FDE)	;CJK UNIFIED IDEOGRAPH
                                (#xC19F . #x7FE2)	;CJK UNIFIED IDEOGRAPH
                                (#xC1A0 . #x7FE3)	;CJK UNIFIED IDEOGRAPH
                                (#xC1A1 . #x75E2)	;CJK UNIFIED IDEOGRAPH
                                (#xC1A2 . #x7ACB)	;CJK UNIFIED IDEOGRAPH
                                (#xC1A3 . #x7C92)	;CJK UNIFIED IDEOGRAPH
                                (#xC1A4 . #x6CA5)	;CJK UNIFIED IDEOGRAPH
                                (#xC1A5 . #x96B6)	;CJK UNIFIED IDEOGRAPH
                                (#xC1A6 . #x529B)	;CJK UNIFIED IDEOGRAPH
                                (#xC1A7 . #x7483)	;CJK UNIFIED IDEOGRAPH
                                (#xC1A8 . #x54E9)	;CJK UNIFIED IDEOGRAPH
                                (#xC1A9 . #x4FE9)	;CJK UNIFIED IDEOGRAPH
                                (#xC1AA . #x8054)	;CJK UNIFIED IDEOGRAPH
                                (#xC1AB . #x83B2)	;CJK UNIFIED IDEOGRAPH
                                (#xC1AC . #x8FDE)	;CJK UNIFIED IDEOGRAPH
                                (#xC1AD . #x9570)	;CJK UNIFIED IDEOGRAPH
                                (#xC1AE . #x5EC9)	;CJK UNIFIED IDEOGRAPH
                                (#xC1AF . #x601C)	;CJK UNIFIED IDEOGRAPH
                                (#xC1B0 . #x6D9F)	;CJK UNIFIED IDEOGRAPH
                                (#xC1B1 . #x5E18)	;CJK UNIFIED IDEOGRAPH
                                (#xC1B2 . #x655B)	;CJK UNIFIED IDEOGRAPH
                                (#xC1B3 . #x8138)	;CJK UNIFIED IDEOGRAPH
                                (#xC1B4 . #x94FE)	;CJK UNIFIED IDEOGRAPH
                                (#xC1B5 . #x604B)	;CJK UNIFIED IDEOGRAPH
                                (#xC1B6 . #x70BC)	;CJK UNIFIED IDEOGRAPH
                                (#xC1B7 . #x7EC3)	;CJK UNIFIED IDEOGRAPH
                                (#xC1B8 . #x7CAE)	;CJK UNIFIED IDEOGRAPH
                                (#xC1B9 . #x51C9)	;CJK UNIFIED IDEOGRAPH
                                (#xC1BA . #x6881)	;CJK UNIFIED IDEOGRAPH
                                (#xC1BB . #x7CB1)	;CJK UNIFIED IDEOGRAPH
                                (#xC1BC . #x826F)	;CJK UNIFIED IDEOGRAPH
                                (#xC1BD . #x4E24)	;CJK UNIFIED IDEOGRAPH
                                (#xC1BE . #x8F86)	;CJK UNIFIED IDEOGRAPH
                                (#xC1BF . #x91CF)	;CJK UNIFIED IDEOGRAPH
                                (#xC1C0 . #x667E)	;CJK UNIFIED IDEOGRAPH
                                (#xC1C1 . #x4EAE)	;CJK UNIFIED IDEOGRAPH
                                (#xC1C2 . #x8C05)	;CJK UNIFIED IDEOGRAPH
                                (#xC1C3 . #x64A9)	;CJK UNIFIED IDEOGRAPH
                                (#xC1C4 . #x804A)	;CJK UNIFIED IDEOGRAPH
                                (#xC1C5 . #x50DA)	;CJK UNIFIED IDEOGRAPH
                                (#xC1C6 . #x7597)	;CJK UNIFIED IDEOGRAPH
                                (#xC1C7 . #x71CE)	;CJK UNIFIED IDEOGRAPH
                                (#xC1C8 . #x5BE5)	;CJK UNIFIED IDEOGRAPH
                                (#xC1C9 . #x8FBD)	;CJK UNIFIED IDEOGRAPH
                                (#xC1CA . #x6F66)	;CJK UNIFIED IDEOGRAPH
                                (#xC1CB . #x4E86)	;CJK UNIFIED IDEOGRAPH
                                (#xC1CC . #x6482)	;CJK UNIFIED IDEOGRAPH
                                (#xC1CD . #x9563)	;CJK UNIFIED IDEOGRAPH
                                (#xC1CE . #x5ED6)	;CJK UNIFIED IDEOGRAPH
                                (#xC1CF . #x6599)	;CJK UNIFIED IDEOGRAPH
                                (#xC1D0 . #x5217)	;CJK UNIFIED IDEOGRAPH
                                (#xC1D1 . #x88C2)	;CJK UNIFIED IDEOGRAPH
                                (#xC1D2 . #x70C8)	;CJK UNIFIED IDEOGRAPH
                                (#xC1D3 . #x52A3)	;CJK UNIFIED IDEOGRAPH
                                (#xC1D4 . #x730E)	;CJK UNIFIED IDEOGRAPH
                                (#xC1D5 . #x7433)	;CJK UNIFIED IDEOGRAPH
                                (#xC1D6 . #x6797)	;CJK UNIFIED IDEOGRAPH
                                (#xC1D7 . #x78F7)	;CJK UNIFIED IDEOGRAPH
                                (#xC1D8 . #x9716)	;CJK UNIFIED IDEOGRAPH
                                (#xC1D9 . #x4E34)	;CJK UNIFIED IDEOGRAPH
                                (#xC1DA . #x90BB)	;CJK UNIFIED IDEOGRAPH
                                (#xC1DB . #x9CDE)	;CJK UNIFIED IDEOGRAPH
                                (#xC1DC . #x6DCB)	;CJK UNIFIED IDEOGRAPH
                                (#xC1DD . #x51DB)	;CJK UNIFIED IDEOGRAPH
                                (#xC1DE . #x8D41)	;CJK UNIFIED IDEOGRAPH
                                (#xC1DF . #x541D)	;CJK UNIFIED IDEOGRAPH
                                (#xC1E0 . #x62CE)	;CJK UNIFIED IDEOGRAPH
                                (#xC1E1 . #x73B2)	;CJK UNIFIED IDEOGRAPH
                                (#xC1E2 . #x83F1)	;CJK UNIFIED IDEOGRAPH
                                (#xC1E3 . #x96F6)	;CJK UNIFIED IDEOGRAPH
                                (#xC1E4 . #x9F84)	;CJK UNIFIED IDEOGRAPH
                                (#xC1E5 . #x94C3)	;CJK UNIFIED IDEOGRAPH
                                (#xC1E6 . #x4F36)	;CJK UNIFIED IDEOGRAPH
                                (#xC1E7 . #x7F9A)	;CJK UNIFIED IDEOGRAPH
                                (#xC1E8 . #x51CC)	;CJK UNIFIED IDEOGRAPH
                                (#xC1E9 . #x7075)	;CJK UNIFIED IDEOGRAPH
                                (#xC1EA . #x9675)	;CJK UNIFIED IDEOGRAPH
                                (#xC1EB . #x5CAD)	;CJK UNIFIED IDEOGRAPH
                                (#xC1EC . #x9886)	;CJK UNIFIED IDEOGRAPH
                                (#xC1ED . #x53E6)	;CJK UNIFIED IDEOGRAPH
                                (#xC1EE . #x4EE4)	;CJK UNIFIED IDEOGRAPH
                                (#xC1EF . #x6E9C)	;CJK UNIFIED IDEOGRAPH
                                (#xC1F0 . #x7409)	;CJK UNIFIED IDEOGRAPH
                                (#xC1F1 . #x69B4)	;CJK UNIFIED IDEOGRAPH
                                (#xC1F2 . #x786B)	;CJK UNIFIED IDEOGRAPH
                                (#xC1F3 . #x998F)	;CJK UNIFIED IDEOGRAPH
                                (#xC1F4 . #x7559)	;CJK UNIFIED IDEOGRAPH
                                (#xC1F5 . #x5218)	;CJK UNIFIED IDEOGRAPH
                                (#xC1F6 . #x7624)	;CJK UNIFIED IDEOGRAPH
                                (#xC1F7 . #x6D41)	;CJK UNIFIED IDEOGRAPH
                                (#xC1F8 . #x67F3)	;CJK UNIFIED IDEOGRAPH
                                (#xC1F9 . #x516D)	;CJK UNIFIED IDEOGRAPH
                                (#xC1FA . #x9F99)	;CJK UNIFIED IDEOGRAPH
                                (#xC1FB . #x804B)	;CJK UNIFIED IDEOGRAPH
                                (#xC1FC . #x5499)	;CJK UNIFIED IDEOGRAPH
                                (#xC1FD . #x7B3C)	;CJK UNIFIED IDEOGRAPH
                                (#xC1FE . #x7ABF)	;CJK UNIFIED IDEOGRAPH
                                (#xC240 . #x7FE4)	;CJK UNIFIED IDEOGRAPH
                                (#xC241 . #x7FE7)	;CJK UNIFIED IDEOGRAPH
                                (#xC242 . #x7FE8)	;CJK UNIFIED IDEOGRAPH
                                (#xC243 . #x7FEA)	;CJK UNIFIED IDEOGRAPH
                                (#xC244 . #x7FEB)	;CJK UNIFIED IDEOGRAPH
                                (#xC245 . #x7FEC)	;CJK UNIFIED IDEOGRAPH
                                (#xC246 . #x7FED)	;CJK UNIFIED IDEOGRAPH
                                (#xC247 . #x7FEF)	;CJK UNIFIED IDEOGRAPH
                                (#xC248 . #x7FF2)	;CJK UNIFIED IDEOGRAPH
                                (#xC249 . #x7FF4)	;CJK UNIFIED IDEOGRAPH
                                (#xC24A . #x7FF5)	;CJK UNIFIED IDEOGRAPH
                                (#xC24B . #x7FF6)	;CJK UNIFIED IDEOGRAPH
                                (#xC24C . #x7FF7)	;CJK UNIFIED IDEOGRAPH
                                (#xC24D . #x7FF8)	;CJK UNIFIED IDEOGRAPH
                                (#xC24E . #x7FF9)	;CJK UNIFIED IDEOGRAPH
                                (#xC24F . #x7FFA)	;CJK UNIFIED IDEOGRAPH
                                (#xC250 . #x7FFD)	;CJK UNIFIED IDEOGRAPH
                                (#xC251 . #x7FFE)	;CJK UNIFIED IDEOGRAPH
                                (#xC252 . #x7FFF)	;CJK UNIFIED IDEOGRAPH
                                (#xC253 . #x8002)	;CJK UNIFIED IDEOGRAPH
                                (#xC254 . #x8007)	;CJK UNIFIED IDEOGRAPH
                                (#xC255 . #x8008)	;CJK UNIFIED IDEOGRAPH
                                (#xC256 . #x8009)	;CJK UNIFIED IDEOGRAPH
                                (#xC257 . #x800A)	;CJK UNIFIED IDEOGRAPH
                                (#xC258 . #x800E)	;CJK UNIFIED IDEOGRAPH
                                (#xC259 . #x800F)	;CJK UNIFIED IDEOGRAPH
                                (#xC25A . #x8011)	;CJK UNIFIED IDEOGRAPH
                                (#xC25B . #x8013)	;CJK UNIFIED IDEOGRAPH
                                (#xC25C . #x801A)	;CJK UNIFIED IDEOGRAPH
                                (#xC25D . #x801B)	;CJK UNIFIED IDEOGRAPH
                                (#xC25E . #x801D)	;CJK UNIFIED IDEOGRAPH
                                (#xC25F . #x801E)	;CJK UNIFIED IDEOGRAPH
                                (#xC260 . #x801F)	;CJK UNIFIED IDEOGRAPH
                                (#xC261 . #x8021)	;CJK UNIFIED IDEOGRAPH
                                (#xC262 . #x8023)	;CJK UNIFIED IDEOGRAPH
                                (#xC263 . #x8024)	;CJK UNIFIED IDEOGRAPH
                                (#xC264 . #x802B)	;CJK UNIFIED IDEOGRAPH
                                (#xC265 . #x802C)	;CJK UNIFIED IDEOGRAPH
                                (#xC266 . #x802D)	;CJK UNIFIED IDEOGRAPH
                                (#xC267 . #x802E)	;CJK UNIFIED IDEOGRAPH
                                (#xC268 . #x802F)	;CJK UNIFIED IDEOGRAPH
                                (#xC269 . #x8030)	;CJK UNIFIED IDEOGRAPH
                                (#xC26A . #x8032)	;CJK UNIFIED IDEOGRAPH
                                (#xC26B . #x8034)	;CJK UNIFIED IDEOGRAPH
                                (#xC26C . #x8039)	;CJK UNIFIED IDEOGRAPH
                                (#xC26D . #x803A)	;CJK UNIFIED IDEOGRAPH
                                (#xC26E . #x803C)	;CJK UNIFIED IDEOGRAPH
                                (#xC26F . #x803E)	;CJK UNIFIED IDEOGRAPH
                                (#xC270 . #x8040)	;CJK UNIFIED IDEOGRAPH
                                (#xC271 . #x8041)	;CJK UNIFIED IDEOGRAPH
                                (#xC272 . #x8044)	;CJK UNIFIED IDEOGRAPH
                                (#xC273 . #x8045)	;CJK UNIFIED IDEOGRAPH
                                (#xC274 . #x8047)	;CJK UNIFIED IDEOGRAPH
                                (#xC275 . #x8048)	;CJK UNIFIED IDEOGRAPH
                                (#xC276 . #x8049)	;CJK UNIFIED IDEOGRAPH
                                (#xC277 . #x804E)	;CJK UNIFIED IDEOGRAPH
                                (#xC278 . #x804F)	;CJK UNIFIED IDEOGRAPH
                                (#xC279 . #x8050)	;CJK UNIFIED IDEOGRAPH
                                (#xC27A . #x8051)	;CJK UNIFIED IDEOGRAPH
                                (#xC27B . #x8053)	;CJK UNIFIED IDEOGRAPH
                                (#xC27C . #x8055)	;CJK UNIFIED IDEOGRAPH
                                (#xC27D . #x8056)	;CJK UNIFIED IDEOGRAPH
                                (#xC27E . #x8057)	;CJK UNIFIED IDEOGRAPH
                                (#xC280 . #x8059)	;CJK UNIFIED IDEOGRAPH
                                (#xC281 . #x805B)	;CJK UNIFIED IDEOGRAPH
                                (#xC282 . #x805C)	;CJK UNIFIED IDEOGRAPH
                                (#xC283 . #x805D)	;CJK UNIFIED IDEOGRAPH
                                (#xC284 . #x805E)	;CJK UNIFIED IDEOGRAPH
                                (#xC285 . #x805F)	;CJK UNIFIED IDEOGRAPH
                                (#xC286 . #x8060)	;CJK UNIFIED IDEOGRAPH
                                (#xC287 . #x8061)	;CJK UNIFIED IDEOGRAPH
                                (#xC288 . #x8062)	;CJK UNIFIED IDEOGRAPH
                                (#xC289 . #x8063)	;CJK UNIFIED IDEOGRAPH
                                (#xC28A . #x8064)	;CJK UNIFIED IDEOGRAPH
                                (#xC28B . #x8065)	;CJK UNIFIED IDEOGRAPH
                                (#xC28C . #x8066)	;CJK UNIFIED IDEOGRAPH
                                (#xC28D . #x8067)	;CJK UNIFIED IDEOGRAPH
                                (#xC28E . #x8068)	;CJK UNIFIED IDEOGRAPH
                                (#xC28F . #x806B)	;CJK UNIFIED IDEOGRAPH
                                (#xC290 . #x806C)	;CJK UNIFIED IDEOGRAPH
                                (#xC291 . #x806D)	;CJK UNIFIED IDEOGRAPH
                                (#xC292 . #x806E)	;CJK UNIFIED IDEOGRAPH
                                (#xC293 . #x806F)	;CJK UNIFIED IDEOGRAPH
                                (#xC294 . #x8070)	;CJK UNIFIED IDEOGRAPH
                                (#xC295 . #x8072)	;CJK UNIFIED IDEOGRAPH
                                (#xC296 . #x8073)	;CJK UNIFIED IDEOGRAPH
                                (#xC297 . #x8074)	;CJK UNIFIED IDEOGRAPH
                                (#xC298 . #x8075)	;CJK UNIFIED IDEOGRAPH
                                (#xC299 . #x8076)	;CJK UNIFIED IDEOGRAPH
                                (#xC29A . #x8077)	;CJK UNIFIED IDEOGRAPH
                                (#xC29B . #x8078)	;CJK UNIFIED IDEOGRAPH
                                (#xC29C . #x8079)	;CJK UNIFIED IDEOGRAPH
                                (#xC29D . #x807A)	;CJK UNIFIED IDEOGRAPH
                                (#xC29E . #x807B)	;CJK UNIFIED IDEOGRAPH
                                (#xC29F . #x807C)	;CJK UNIFIED IDEOGRAPH
                                (#xC2A0 . #x807D)	;CJK UNIFIED IDEOGRAPH
                                (#xC2A1 . #x9686)	;CJK UNIFIED IDEOGRAPH
                                (#xC2A2 . #x5784)	;CJK UNIFIED IDEOGRAPH
                                (#xC2A3 . #x62E2)	;CJK UNIFIED IDEOGRAPH
                                (#xC2A4 . #x9647)	;CJK UNIFIED IDEOGRAPH
                                (#xC2A5 . #x697C)	;CJK UNIFIED IDEOGRAPH
                                (#xC2A6 . #x5A04)	;CJK UNIFIED IDEOGRAPH
                                (#xC2A7 . #x6402)	;CJK UNIFIED IDEOGRAPH
                                (#xC2A8 . #x7BD3)	;CJK UNIFIED IDEOGRAPH
                                (#xC2A9 . #x6F0F)	;CJK UNIFIED IDEOGRAPH
                                (#xC2AA . #x964B)	;CJK UNIFIED IDEOGRAPH
                                (#xC2AB . #x82A6)	;CJK UNIFIED IDEOGRAPH
                                (#xC2AC . #x5362)	;CJK UNIFIED IDEOGRAPH
                                (#xC2AD . #x9885)	;CJK UNIFIED IDEOGRAPH
                                (#xC2AE . #x5E90)	;CJK UNIFIED IDEOGRAPH
                                (#xC2AF . #x7089)	;CJK UNIFIED IDEOGRAPH
                                (#xC2B0 . #x63B3)	;CJK UNIFIED IDEOGRAPH
                                (#xC2B1 . #x5364)	;CJK UNIFIED IDEOGRAPH
                                (#xC2B2 . #x864F)	;CJK UNIFIED IDEOGRAPH
                                (#xC2B3 . #x9C81)	;CJK UNIFIED IDEOGRAPH
                                (#xC2B4 . #x9E93)	;CJK UNIFIED IDEOGRAPH
                                (#xC2B5 . #x788C)	;CJK UNIFIED IDEOGRAPH
                                (#xC2B6 . #x9732)	;CJK UNIFIED IDEOGRAPH
                                (#xC2B7 . #x8DEF)	;CJK UNIFIED IDEOGRAPH
                                (#xC2B8 . #x8D42)	;CJK UNIFIED IDEOGRAPH
                                (#xC2B9 . #x9E7F)	;CJK UNIFIED IDEOGRAPH
                                (#xC2BA . #x6F5E)	;CJK UNIFIED IDEOGRAPH
                                (#xC2BB . #x7984)	;CJK UNIFIED IDEOGRAPH
                                (#xC2BC . #x5F55)	;CJK UNIFIED IDEOGRAPH
                                (#xC2BD . #x9646)	;CJK UNIFIED IDEOGRAPH
                                (#xC2BE . #x622E)	;CJK UNIFIED IDEOGRAPH
                                (#xC2BF . #x9A74)	;CJK UNIFIED IDEOGRAPH
                                (#xC2C0 . #x5415)	;CJK UNIFIED IDEOGRAPH
                                (#xC2C1 . #x94DD)	;CJK UNIFIED IDEOGRAPH
                                (#xC2C2 . #x4FA3)	;CJK UNIFIED IDEOGRAPH
                                (#xC2C3 . #x65C5)	;CJK UNIFIED IDEOGRAPH
                                (#xC2C4 . #x5C65)	;CJK UNIFIED IDEOGRAPH
                                (#xC2C5 . #x5C61)	;CJK UNIFIED IDEOGRAPH
                                (#xC2C6 . #x7F15)	;CJK UNIFIED IDEOGRAPH
                                (#xC2C7 . #x8651)	;CJK UNIFIED IDEOGRAPH
                                (#xC2C8 . #x6C2F)	;CJK UNIFIED IDEOGRAPH
                                (#xC2C9 . #x5F8B)	;CJK UNIFIED IDEOGRAPH
                                (#xC2CA . #x7387)	;CJK UNIFIED IDEOGRAPH
                                (#xC2CB . #x6EE4)	;CJK UNIFIED IDEOGRAPH
                                (#xC2CC . #x7EFF)	;CJK UNIFIED IDEOGRAPH
                                (#xC2CD . #x5CE6)	;CJK UNIFIED IDEOGRAPH
                                (#xC2CE . #x631B)	;CJK UNIFIED IDEOGRAPH
                                (#xC2CF . #x5B6A)	;CJK UNIFIED IDEOGRAPH
                                (#xC2D0 . #x6EE6)	;CJK UNIFIED IDEOGRAPH
                                (#xC2D1 . #x5375)	;CJK UNIFIED IDEOGRAPH
                                (#xC2D2 . #x4E71)	;CJK UNIFIED IDEOGRAPH
                                (#xC2D3 . #x63A0)	;CJK UNIFIED IDEOGRAPH
                                (#xC2D4 . #x7565)	;CJK UNIFIED IDEOGRAPH
                                (#xC2D5 . #x62A1)	;CJK UNIFIED IDEOGRAPH
                                (#xC2D6 . #x8F6E)	;CJK UNIFIED IDEOGRAPH
                                (#xC2D7 . #x4F26)	;CJK UNIFIED IDEOGRAPH
                                (#xC2D8 . #x4ED1)	;CJK UNIFIED IDEOGRAPH
                                (#xC2D9 . #x6CA6)	;CJK UNIFIED IDEOGRAPH
                                (#xC2DA . #x7EB6)	;CJK UNIFIED IDEOGRAPH
                                (#xC2DB . #x8BBA)	;CJK UNIFIED IDEOGRAPH
                                (#xC2DC . #x841D)	;CJK UNIFIED IDEOGRAPH
                                (#xC2DD . #x87BA)	;CJK UNIFIED IDEOGRAPH
                                (#xC2DE . #x7F57)	;CJK UNIFIED IDEOGRAPH
                                (#xC2DF . #x903B)	;CJK UNIFIED IDEOGRAPH
                                (#xC2E0 . #x9523)	;CJK UNIFIED IDEOGRAPH
                                (#xC2E1 . #x7BA9)	;CJK UNIFIED IDEOGRAPH
                                (#xC2E2 . #x9AA1)	;CJK UNIFIED IDEOGRAPH
                                (#xC2E3 . #x88F8)	;CJK UNIFIED IDEOGRAPH
                                (#xC2E4 . #x843D)	;CJK UNIFIED IDEOGRAPH
                                (#xC2E5 . #x6D1B)	;CJK UNIFIED IDEOGRAPH
                                (#xC2E6 . #x9A86)	;CJK UNIFIED IDEOGRAPH
                                (#xC2E7 . #x7EDC)	;CJK UNIFIED IDEOGRAPH
                                (#xC2E8 . #x5988)	;CJK UNIFIED IDEOGRAPH
                                (#xC2E9 . #x9EBB)	;CJK UNIFIED IDEOGRAPH
                                (#xC2EA . #x739B)	;CJK UNIFIED IDEOGRAPH
                                (#xC2EB . #x7801)	;CJK UNIFIED IDEOGRAPH
                                (#xC2EC . #x8682)	;CJK UNIFIED IDEOGRAPH
                                (#xC2ED . #x9A6C)	;CJK UNIFIED IDEOGRAPH
                                (#xC2EE . #x9A82)	;CJK UNIFIED IDEOGRAPH
                                (#xC2EF . #x561B)	;CJK UNIFIED IDEOGRAPH
                                (#xC2F0 . #x5417)	;CJK UNIFIED IDEOGRAPH
                                (#xC2F1 . #x57CB)	;CJK UNIFIED IDEOGRAPH
                                (#xC2F2 . #x4E70)	;CJK UNIFIED IDEOGRAPH
                                (#xC2F3 . #x9EA6)	;CJK UNIFIED IDEOGRAPH
                                (#xC2F4 . #x5356)	;CJK UNIFIED IDEOGRAPH
                                (#xC2F5 . #x8FC8)	;CJK UNIFIED IDEOGRAPH
                                (#xC2F6 . #x8109)	;CJK UNIFIED IDEOGRAPH
                                (#xC2F7 . #x7792)	;CJK UNIFIED IDEOGRAPH
                                (#xC2F8 . #x9992)	;CJK UNIFIED IDEOGRAPH
                                (#xC2F9 . #x86EE)	;CJK UNIFIED IDEOGRAPH
                                (#xC2FA . #x6EE1)	;CJK UNIFIED IDEOGRAPH
                                (#xC2FB . #x8513)	;CJK UNIFIED IDEOGRAPH
                                (#xC2FC . #x66FC)	;CJK UNIFIED IDEOGRAPH
                                (#xC2FD . #x6162)	;CJK UNIFIED IDEOGRAPH
                                (#xC2FE . #x6F2B)	;CJK UNIFIED IDEOGRAPH
                                (#xC340 . #x807E)	;CJK UNIFIED IDEOGRAPH
                                (#xC341 . #x8081)	;CJK UNIFIED IDEOGRAPH
                                (#xC342 . #x8082)	;CJK UNIFIED IDEOGRAPH
                                (#xC343 . #x8085)	;CJK UNIFIED IDEOGRAPH
                                (#xC344 . #x8088)	;CJK UNIFIED IDEOGRAPH
                                (#xC345 . #x808A)	;CJK UNIFIED IDEOGRAPH
                                (#xC346 . #x808D)	;CJK UNIFIED IDEOGRAPH
                                (#xC347 . #x808E)	;CJK UNIFIED IDEOGRAPH
                                (#xC348 . #x808F)	;CJK UNIFIED IDEOGRAPH
                                (#xC349 . #x8090)	;CJK UNIFIED IDEOGRAPH
                                (#xC34A . #x8091)	;CJK UNIFIED IDEOGRAPH
                                (#xC34B . #x8092)	;CJK UNIFIED IDEOGRAPH
                                (#xC34C . #x8094)	;CJK UNIFIED IDEOGRAPH
                                (#xC34D . #x8095)	;CJK UNIFIED IDEOGRAPH
                                (#xC34E . #x8097)	;CJK UNIFIED IDEOGRAPH
                                (#xC34F . #x8099)	;CJK UNIFIED IDEOGRAPH
                                (#xC350 . #x809E)	;CJK UNIFIED IDEOGRAPH
                                (#xC351 . #x80A3)	;CJK UNIFIED IDEOGRAPH
                                (#xC352 . #x80A6)	;CJK UNIFIED IDEOGRAPH
                                (#xC353 . #x80A7)	;CJK UNIFIED IDEOGRAPH
                                (#xC354 . #x80A8)	;CJK UNIFIED IDEOGRAPH
                                (#xC355 . #x80AC)	;CJK UNIFIED IDEOGRAPH
                                (#xC356 . #x80B0)	;CJK UNIFIED IDEOGRAPH
                                (#xC357 . #x80B3)	;CJK UNIFIED IDEOGRAPH
                                (#xC358 . #x80B5)	;CJK UNIFIED IDEOGRAPH
                                (#xC359 . #x80B6)	;CJK UNIFIED IDEOGRAPH
                                (#xC35A . #x80B8)	;CJK UNIFIED IDEOGRAPH
                                (#xC35B . #x80B9)	;CJK UNIFIED IDEOGRAPH
                                (#xC35C . #x80BB)	;CJK UNIFIED IDEOGRAPH
                                (#xC35D . #x80C5)	;CJK UNIFIED IDEOGRAPH
                                (#xC35E . #x80C7)	;CJK UNIFIED IDEOGRAPH
                                (#xC35F . #x80C8)	;CJK UNIFIED IDEOGRAPH
                                (#xC360 . #x80C9)	;CJK UNIFIED IDEOGRAPH
                                (#xC361 . #x80CA)	;CJK UNIFIED IDEOGRAPH
                                (#xC362 . #x80CB)	;CJK UNIFIED IDEOGRAPH
                                (#xC363 . #x80CF)	;CJK UNIFIED IDEOGRAPH
                                (#xC364 . #x80D0)	;CJK UNIFIED IDEOGRAPH
                                (#xC365 . #x80D1)	;CJK UNIFIED IDEOGRAPH
                                (#xC366 . #x80D2)	;CJK UNIFIED IDEOGRAPH
                                (#xC367 . #x80D3)	;CJK UNIFIED IDEOGRAPH
                                (#xC368 . #x80D4)	;CJK UNIFIED IDEOGRAPH
                                (#xC369 . #x80D5)	;CJK UNIFIED IDEOGRAPH
                                (#xC36A . #x80D8)	;CJK UNIFIED IDEOGRAPH
                                (#xC36B . #x80DF)	;CJK UNIFIED IDEOGRAPH
                                (#xC36C . #x80E0)	;CJK UNIFIED IDEOGRAPH
                                (#xC36D . #x80E2)	;CJK UNIFIED IDEOGRAPH
                                (#xC36E . #x80E3)	;CJK UNIFIED IDEOGRAPH
                                (#xC36F . #x80E6)	;CJK UNIFIED IDEOGRAPH
                                (#xC370 . #x80EE)	;CJK UNIFIED IDEOGRAPH
                                (#xC371 . #x80F5)	;CJK UNIFIED IDEOGRAPH
                                (#xC372 . #x80F7)	;CJK UNIFIED IDEOGRAPH
                                (#xC373 . #x80F9)	;CJK UNIFIED IDEOGRAPH
                                (#xC374 . #x80FB)	;CJK UNIFIED IDEOGRAPH
                                (#xC375 . #x80FE)	;CJK UNIFIED IDEOGRAPH
                                (#xC376 . #x80FF)	;CJK UNIFIED IDEOGRAPH
                                (#xC377 . #x8100)	;CJK UNIFIED IDEOGRAPH
                                (#xC378 . #x8101)	;CJK UNIFIED IDEOGRAPH
                                (#xC379 . #x8103)	;CJK UNIFIED IDEOGRAPH
                                (#xC37A . #x8104)	;CJK UNIFIED IDEOGRAPH
                                (#xC37B . #x8105)	;CJK UNIFIED IDEOGRAPH
                                (#xC37C . #x8107)	;CJK UNIFIED IDEOGRAPH
                                (#xC37D . #x8108)	;CJK UNIFIED IDEOGRAPH
                                (#xC37E . #x810B)	;CJK UNIFIED IDEOGRAPH
                                (#xC380 . #x810C)	;CJK UNIFIED IDEOGRAPH
                                (#xC381 . #x8115)	;CJK UNIFIED IDEOGRAPH
                                (#xC382 . #x8117)	;CJK UNIFIED IDEOGRAPH
                                (#xC383 . #x8119)	;CJK UNIFIED IDEOGRAPH
                                (#xC384 . #x811B)	;CJK UNIFIED IDEOGRAPH
                                (#xC385 . #x811C)	;CJK UNIFIED IDEOGRAPH
                                (#xC386 . #x811D)	;CJK UNIFIED IDEOGRAPH
                                (#xC387 . #x811F)	;CJK UNIFIED IDEOGRAPH
                                (#xC388 . #x8120)	;CJK UNIFIED IDEOGRAPH
                                (#xC389 . #x8121)	;CJK UNIFIED IDEOGRAPH
                                (#xC38A . #x8122)	;CJK UNIFIED IDEOGRAPH
                                (#xC38B . #x8123)	;CJK UNIFIED IDEOGRAPH
                                (#xC38C . #x8124)	;CJK UNIFIED IDEOGRAPH
                                (#xC38D . #x8125)	;CJK UNIFIED IDEOGRAPH
                                (#xC38E . #x8126)	;CJK UNIFIED IDEOGRAPH
                                (#xC38F . #x8127)	;CJK UNIFIED IDEOGRAPH
                                (#xC390 . #x8128)	;CJK UNIFIED IDEOGRAPH
                                (#xC391 . #x8129)	;CJK UNIFIED IDEOGRAPH
                                (#xC392 . #x812A)	;CJK UNIFIED IDEOGRAPH
                                (#xC393 . #x812B)	;CJK UNIFIED IDEOGRAPH
                                (#xC394 . #x812D)	;CJK UNIFIED IDEOGRAPH
                                (#xC395 . #x812E)	;CJK UNIFIED IDEOGRAPH
                                (#xC396 . #x8130)	;CJK UNIFIED IDEOGRAPH
                                (#xC397 . #x8133)	;CJK UNIFIED IDEOGRAPH
                                (#xC398 . #x8134)	;CJK UNIFIED IDEOGRAPH
                                (#xC399 . #x8135)	;CJK UNIFIED IDEOGRAPH
                                (#xC39A . #x8137)	;CJK UNIFIED IDEOGRAPH
                                (#xC39B . #x8139)	;CJK UNIFIED IDEOGRAPH
                                (#xC39C . #x813A)	;CJK UNIFIED IDEOGRAPH
                                (#xC39D . #x813B)	;CJK UNIFIED IDEOGRAPH
                                (#xC39E . #x813C)	;CJK UNIFIED IDEOGRAPH
                                (#xC39F . #x813D)	;CJK UNIFIED IDEOGRAPH
                                (#xC3A0 . #x813F)	;CJK UNIFIED IDEOGRAPH
                                (#xC3A1 . #x8C29)	;CJK UNIFIED IDEOGRAPH
                                (#xC3A2 . #x8292)	;CJK UNIFIED IDEOGRAPH
                                (#xC3A3 . #x832B)	;CJK UNIFIED IDEOGRAPH
                                (#xC3A4 . #x76F2)	;CJK UNIFIED IDEOGRAPH
                                (#xC3A5 . #x6C13)	;CJK UNIFIED IDEOGRAPH
                                (#xC3A6 . #x5FD9)	;CJK UNIFIED IDEOGRAPH
                                (#xC3A7 . #x83BD)	;CJK UNIFIED IDEOGRAPH
                                (#xC3A8 . #x732B)	;CJK UNIFIED IDEOGRAPH
                                (#xC3A9 . #x8305)	;CJK UNIFIED IDEOGRAPH
                                (#xC3AA . #x951A)	;CJK UNIFIED IDEOGRAPH
                                (#xC3AB . #x6BDB)	;CJK UNIFIED IDEOGRAPH
                                (#xC3AC . #x77DB)	;CJK UNIFIED IDEOGRAPH
                                (#xC3AD . #x94C6)	;CJK UNIFIED IDEOGRAPH
                                (#xC3AE . #x536F)	;CJK UNIFIED IDEOGRAPH
                                (#xC3AF . #x8302)	;CJK UNIFIED IDEOGRAPH
                                (#xC3B0 . #x5192)	;CJK UNIFIED IDEOGRAPH
                                (#xC3B1 . #x5E3D)	;CJK UNIFIED IDEOGRAPH
                                (#xC3B2 . #x8C8C)	;CJK UNIFIED IDEOGRAPH
                                (#xC3B3 . #x8D38)	;CJK UNIFIED IDEOGRAPH
                                (#xC3B4 . #x4E48)	;CJK UNIFIED IDEOGRAPH
                                (#xC3B5 . #x73AB)	;CJK UNIFIED IDEOGRAPH
                                (#xC3B6 . #x679A)	;CJK UNIFIED IDEOGRAPH
                                (#xC3B7 . #x6885)	;CJK UNIFIED IDEOGRAPH
                                (#xC3B8 . #x9176)	;CJK UNIFIED IDEOGRAPH
                                (#xC3B9 . #x9709)	;CJK UNIFIED IDEOGRAPH
                                (#xC3BA . #x7164)	;CJK UNIFIED IDEOGRAPH
                                (#xC3BB . #x6CA1)	;CJK UNIFIED IDEOGRAPH
                                (#xC3BC . #x7709)	;CJK UNIFIED IDEOGRAPH
                                (#xC3BD . #x5A92)	;CJK UNIFIED IDEOGRAPH
                                (#xC3BE . #x9541)	;CJK UNIFIED IDEOGRAPH
                                (#xC3BF . #x6BCF)	;CJK UNIFIED IDEOGRAPH
                                (#xC3C0 . #x7F8E)	;CJK UNIFIED IDEOGRAPH
                                (#xC3C1 . #x6627)	;CJK UNIFIED IDEOGRAPH
                                (#xC3C2 . #x5BD0)	;CJK UNIFIED IDEOGRAPH
                                (#xC3C3 . #x59B9)	;CJK UNIFIED IDEOGRAPH
                                (#xC3C4 . #x5A9A)	;CJK UNIFIED IDEOGRAPH
                                (#xC3C5 . #x95E8)	;CJK UNIFIED IDEOGRAPH
                                (#xC3C6 . #x95F7)	;CJK UNIFIED IDEOGRAPH
                                (#xC3C7 . #x4EEC)	;CJK UNIFIED IDEOGRAPH
                                (#xC3C8 . #x840C)	;CJK UNIFIED IDEOGRAPH
                                (#xC3C9 . #x8499)	;CJK UNIFIED IDEOGRAPH
                                (#xC3CA . #x6AAC)	;CJK UNIFIED IDEOGRAPH
                                (#xC3CB . #x76DF)	;CJK UNIFIED IDEOGRAPH
                                (#xC3CC . #x9530)	;CJK UNIFIED IDEOGRAPH
                                (#xC3CD . #x731B)	;CJK UNIFIED IDEOGRAPH
                                (#xC3CE . #x68A6)	;CJK UNIFIED IDEOGRAPH
                                (#xC3CF . #x5B5F)	;CJK UNIFIED IDEOGRAPH
                                (#xC3D0 . #x772F)	;CJK UNIFIED IDEOGRAPH
                                (#xC3D1 . #x919A)	;CJK UNIFIED IDEOGRAPH
                                (#xC3D2 . #x9761)	;CJK UNIFIED IDEOGRAPH
                                (#xC3D3 . #x7CDC)	;CJK UNIFIED IDEOGRAPH
                                (#xC3D4 . #x8FF7)	;CJK UNIFIED IDEOGRAPH
                                (#xC3D5 . #x8C1C)	;CJK UNIFIED IDEOGRAPH
                                (#xC3D6 . #x5F25)	;CJK UNIFIED IDEOGRAPH
                                (#xC3D7 . #x7C73)	;CJK UNIFIED IDEOGRAPH
                                (#xC3D8 . #x79D8)	;CJK UNIFIED IDEOGRAPH
                                (#xC3D9 . #x89C5)	;CJK UNIFIED IDEOGRAPH
                                (#xC3DA . #x6CCC)	;CJK UNIFIED IDEOGRAPH
                                (#xC3DB . #x871C)	;CJK UNIFIED IDEOGRAPH
                                (#xC3DC . #x5BC6)	;CJK UNIFIED IDEOGRAPH
                                (#xC3DD . #x5E42)	;CJK UNIFIED IDEOGRAPH
                                (#xC3DE . #x68C9)	;CJK UNIFIED IDEOGRAPH
                                (#xC3DF . #x7720)	;CJK UNIFIED IDEOGRAPH
                                (#xC3E0 . #x7EF5)	;CJK UNIFIED IDEOGRAPH
                                (#xC3E1 . #x5195)	;CJK UNIFIED IDEOGRAPH
                                (#xC3E2 . #x514D)	;CJK UNIFIED IDEOGRAPH
                                (#xC3E3 . #x52C9)	;CJK UNIFIED IDEOGRAPH
                                (#xC3E4 . #x5A29)	;CJK UNIFIED IDEOGRAPH
                                (#xC3E5 . #x7F05)	;CJK UNIFIED IDEOGRAPH
                                (#xC3E6 . #x9762)	;CJK UNIFIED IDEOGRAPH
                                (#xC3E7 . #x82D7)	;CJK UNIFIED IDEOGRAPH
                                (#xC3E8 . #x63CF)	;CJK UNIFIED IDEOGRAPH
                                (#xC3E9 . #x7784)	;CJK UNIFIED IDEOGRAPH
                                (#xC3EA . #x85D0)	;CJK UNIFIED IDEOGRAPH
                                (#xC3EB . #x79D2)	;CJK UNIFIED IDEOGRAPH
                                (#xC3EC . #x6E3A)	;CJK UNIFIED IDEOGRAPH
                                (#xC3ED . #x5E99)	;CJK UNIFIED IDEOGRAPH
                                (#xC3EE . #x5999)	;CJK UNIFIED IDEOGRAPH
                                (#xC3EF . #x8511)	;CJK UNIFIED IDEOGRAPH
                                (#xC3F0 . #x706D)	;CJK UNIFIED IDEOGRAPH
                                (#xC3F1 . #x6C11)	;CJK UNIFIED IDEOGRAPH
                                (#xC3F2 . #x62BF)	;CJK UNIFIED IDEOGRAPH
                                (#xC3F3 . #x76BF)	;CJK UNIFIED IDEOGRAPH
                                (#xC3F4 . #x654F)	;CJK UNIFIED IDEOGRAPH
                                (#xC3F5 . #x60AF)	;CJK UNIFIED IDEOGRAPH
                                (#xC3F6 . #x95FD)	;CJK UNIFIED IDEOGRAPH
                                (#xC3F7 . #x660E)	;CJK UNIFIED IDEOGRAPH
                                (#xC3F8 . #x879F)	;CJK UNIFIED IDEOGRAPH
                                (#xC3F9 . #x9E23)	;CJK UNIFIED IDEOGRAPH
                                (#xC3FA . #x94ED)	;CJK UNIFIED IDEOGRAPH
                                (#xC3FB . #x540D)	;CJK UNIFIED IDEOGRAPH
                                (#xC3FC . #x547D)	;CJK UNIFIED IDEOGRAPH
                                (#xC3FD . #x8C2C)	;CJK UNIFIED IDEOGRAPH
                                (#xC3FE . #x6478)	;CJK UNIFIED IDEOGRAPH
                                (#xC440 . #x8140)	;CJK UNIFIED IDEOGRAPH
                                (#xC441 . #x8141)	;CJK UNIFIED IDEOGRAPH
                                (#xC442 . #x8142)	;CJK UNIFIED IDEOGRAPH
                                (#xC443 . #x8143)	;CJK UNIFIED IDEOGRAPH
                                (#xC444 . #x8144)	;CJK UNIFIED IDEOGRAPH
                                (#xC445 . #x8145)	;CJK UNIFIED IDEOGRAPH
                                (#xC446 . #x8147)	;CJK UNIFIED IDEOGRAPH
                                (#xC447 . #x8149)	;CJK UNIFIED IDEOGRAPH
                                (#xC448 . #x814D)	;CJK UNIFIED IDEOGRAPH
                                (#xC449 . #x814E)	;CJK UNIFIED IDEOGRAPH
                                (#xC44A . #x814F)	;CJK UNIFIED IDEOGRAPH
                                (#xC44B . #x8152)	;CJK UNIFIED IDEOGRAPH
                                (#xC44C . #x8156)	;CJK UNIFIED IDEOGRAPH
                                (#xC44D . #x8157)	;CJK UNIFIED IDEOGRAPH
                                (#xC44E . #x8158)	;CJK UNIFIED IDEOGRAPH
                                (#xC44F . #x815B)	;CJK UNIFIED IDEOGRAPH
                                (#xC450 . #x815C)	;CJK UNIFIED IDEOGRAPH
                                (#xC451 . #x815D)	;CJK UNIFIED IDEOGRAPH
                                (#xC452 . #x815E)	;CJK UNIFIED IDEOGRAPH
                                (#xC453 . #x815F)	;CJK UNIFIED IDEOGRAPH
                                (#xC454 . #x8161)	;CJK UNIFIED IDEOGRAPH
                                (#xC455 . #x8162)	;CJK UNIFIED IDEOGRAPH
                                (#xC456 . #x8163)	;CJK UNIFIED IDEOGRAPH
                                (#xC457 . #x8164)	;CJK UNIFIED IDEOGRAPH
                                (#xC458 . #x8166)	;CJK UNIFIED IDEOGRAPH
                                (#xC459 . #x8168)	;CJK UNIFIED IDEOGRAPH
                                (#xC45A . #x816A)	;CJK UNIFIED IDEOGRAPH
                                (#xC45B . #x816B)	;CJK UNIFIED IDEOGRAPH
                                (#xC45C . #x816C)	;CJK UNIFIED IDEOGRAPH
                                (#xC45D . #x816F)	;CJK UNIFIED IDEOGRAPH
                                (#xC45E . #x8172)	;CJK UNIFIED IDEOGRAPH
                                (#xC45F . #x8173)	;CJK UNIFIED IDEOGRAPH
                                (#xC460 . #x8175)	;CJK UNIFIED IDEOGRAPH
                                (#xC461 . #x8176)	;CJK UNIFIED IDEOGRAPH
                                (#xC462 . #x8177)	;CJK UNIFIED IDEOGRAPH
                                (#xC463 . #x8178)	;CJK UNIFIED IDEOGRAPH
                                (#xC464 . #x8181)	;CJK UNIFIED IDEOGRAPH
                                (#xC465 . #x8183)	;CJK UNIFIED IDEOGRAPH
                                (#xC466 . #x8184)	;CJK UNIFIED IDEOGRAPH
                                (#xC467 . #x8185)	;CJK UNIFIED IDEOGRAPH
                                (#xC468 . #x8186)	;CJK UNIFIED IDEOGRAPH
                                (#xC469 . #x8187)	;CJK UNIFIED IDEOGRAPH
                                (#xC46A . #x8189)	;CJK UNIFIED IDEOGRAPH
                                (#xC46B . #x818B)	;CJK UNIFIED IDEOGRAPH
                                (#xC46C . #x818C)	;CJK UNIFIED IDEOGRAPH
                                (#xC46D . #x818D)	;CJK UNIFIED IDEOGRAPH
                                (#xC46E . #x818E)	;CJK UNIFIED IDEOGRAPH
                                (#xC46F . #x8190)	;CJK UNIFIED IDEOGRAPH
                                (#xC470 . #x8192)	;CJK UNIFIED IDEOGRAPH
                                (#xC471 . #x8193)	;CJK UNIFIED IDEOGRAPH
                                (#xC472 . #x8194)	;CJK UNIFIED IDEOGRAPH
                                (#xC473 . #x8195)	;CJK UNIFIED IDEOGRAPH
                                (#xC474 . #x8196)	;CJK UNIFIED IDEOGRAPH
                                (#xC475 . #x8197)	;CJK UNIFIED IDEOGRAPH
                                (#xC476 . #x8199)	;CJK UNIFIED IDEOGRAPH
                                (#xC477 . #x819A)	;CJK UNIFIED IDEOGRAPH
                                (#xC478 . #x819E)	;CJK UNIFIED IDEOGRAPH
                                (#xC479 . #x819F)	;CJK UNIFIED IDEOGRAPH
                                (#xC47A . #x81A0)	;CJK UNIFIED IDEOGRAPH
                                (#xC47B . #x81A1)	;CJK UNIFIED IDEOGRAPH
                                (#xC47C . #x81A2)	;CJK UNIFIED IDEOGRAPH
                                (#xC47D . #x81A4)	;CJK UNIFIED IDEOGRAPH
                                (#xC47E . #x81A5)	;CJK UNIFIED IDEOGRAPH
                                (#xC480 . #x81A7)	;CJK UNIFIED IDEOGRAPH
                                (#xC481 . #x81A9)	;CJK UNIFIED IDEOGRAPH
                                (#xC482 . #x81AB)	;CJK UNIFIED IDEOGRAPH
                                (#xC483 . #x81AC)	;CJK UNIFIED IDEOGRAPH
                                (#xC484 . #x81AD)	;CJK UNIFIED IDEOGRAPH
                                (#xC485 . #x81AE)	;CJK UNIFIED IDEOGRAPH
                                (#xC486 . #x81AF)	;CJK UNIFIED IDEOGRAPH
                                (#xC487 . #x81B0)	;CJK UNIFIED IDEOGRAPH
                                (#xC488 . #x81B1)	;CJK UNIFIED IDEOGRAPH
                                (#xC489 . #x81B2)	;CJK UNIFIED IDEOGRAPH
                                (#xC48A . #x81B4)	;CJK UNIFIED IDEOGRAPH
                                (#xC48B . #x81B5)	;CJK UNIFIED IDEOGRAPH
                                (#xC48C . #x81B6)	;CJK UNIFIED IDEOGRAPH
                                (#xC48D . #x81B7)	;CJK UNIFIED IDEOGRAPH
                                (#xC48E . #x81B8)	;CJK UNIFIED IDEOGRAPH
                                (#xC48F . #x81B9)	;CJK UNIFIED IDEOGRAPH
                                (#xC490 . #x81BC)	;CJK UNIFIED IDEOGRAPH
                                (#xC491 . #x81BD)	;CJK UNIFIED IDEOGRAPH
                                (#xC492 . #x81BE)	;CJK UNIFIED IDEOGRAPH
                                (#xC493 . #x81BF)	;CJK UNIFIED IDEOGRAPH
                                (#xC494 . #x81C4)	;CJK UNIFIED IDEOGRAPH
                                (#xC495 . #x81C5)	;CJK UNIFIED IDEOGRAPH
                                (#xC496 . #x81C7)	;CJK UNIFIED IDEOGRAPH
                                (#xC497 . #x81C8)	;CJK UNIFIED IDEOGRAPH
                                (#xC498 . #x81C9)	;CJK UNIFIED IDEOGRAPH
                                (#xC499 . #x81CB)	;CJK UNIFIED IDEOGRAPH
                                (#xC49A . #x81CD)	;CJK UNIFIED IDEOGRAPH
                                (#xC49B . #x81CE)	;CJK UNIFIED IDEOGRAPH
                                (#xC49C . #x81CF)	;CJK UNIFIED IDEOGRAPH
                                (#xC49D . #x81D0)	;CJK UNIFIED IDEOGRAPH
                                (#xC49E . #x81D1)	;CJK UNIFIED IDEOGRAPH
                                (#xC49F . #x81D2)	;CJK UNIFIED IDEOGRAPH
                                (#xC4A0 . #x81D3)	;CJK UNIFIED IDEOGRAPH
                                (#xC4A1 . #x6479)	;CJK UNIFIED IDEOGRAPH
                                (#xC4A2 . #x8611)	;CJK UNIFIED IDEOGRAPH
                                (#xC4A3 . #x6A21)	;CJK UNIFIED IDEOGRAPH
                                (#xC4A4 . #x819C)	;CJK UNIFIED IDEOGRAPH
                                (#xC4A5 . #x78E8)	;CJK UNIFIED IDEOGRAPH
                                (#xC4A6 . #x6469)	;CJK UNIFIED IDEOGRAPH
                                (#xC4A7 . #x9B54)	;CJK UNIFIED IDEOGRAPH
                                (#xC4A8 . #x62B9)	;CJK UNIFIED IDEOGRAPH
                                (#xC4A9 . #x672B)	;CJK UNIFIED IDEOGRAPH
                                (#xC4AA . #x83AB)	;CJK UNIFIED IDEOGRAPH
                                (#xC4AB . #x58A8)	;CJK UNIFIED IDEOGRAPH
                                (#xC4AC . #x9ED8)	;CJK UNIFIED IDEOGRAPH
                                (#xC4AD . #x6CAB)	;CJK UNIFIED IDEOGRAPH
                                (#xC4AE . #x6F20)	;CJK UNIFIED IDEOGRAPH
                                (#xC4AF . #x5BDE)	;CJK UNIFIED IDEOGRAPH
                                (#xC4B0 . #x964C)	;CJK UNIFIED IDEOGRAPH
                                (#xC4B1 . #x8C0B)	;CJK UNIFIED IDEOGRAPH
                                (#xC4B2 . #x725F)	;CJK UNIFIED IDEOGRAPH
                                (#xC4B3 . #x67D0)	;CJK UNIFIED IDEOGRAPH
                                (#xC4B4 . #x62C7)	;CJK UNIFIED IDEOGRAPH
                                (#xC4B5 . #x7261)	;CJK UNIFIED IDEOGRAPH
                                (#xC4B6 . #x4EA9)	;CJK UNIFIED IDEOGRAPH
                                (#xC4B7 . #x59C6)	;CJK UNIFIED IDEOGRAPH
                                (#xC4B8 . #x6BCD)	;CJK UNIFIED IDEOGRAPH
                                (#xC4B9 . #x5893)	;CJK UNIFIED IDEOGRAPH
                                (#xC4BA . #x66AE)	;CJK UNIFIED IDEOGRAPH
                                (#xC4BB . #x5E55)	;CJK UNIFIED IDEOGRAPH
                                (#xC4BC . #x52DF)	;CJK UNIFIED IDEOGRAPH
                                (#xC4BD . #x6155)	;CJK UNIFIED IDEOGRAPH
                                (#xC4BE . #x6728)	;CJK UNIFIED IDEOGRAPH
                                (#xC4BF . #x76EE)	;CJK UNIFIED IDEOGRAPH
                                (#xC4C0 . #x7766)	;CJK UNIFIED IDEOGRAPH
                                (#xC4C1 . #x7267)	;CJK UNIFIED IDEOGRAPH
                                (#xC4C2 . #x7A46)	;CJK UNIFIED IDEOGRAPH
                                (#xC4C3 . #x62FF)	;CJK UNIFIED IDEOGRAPH
                                (#xC4C4 . #x54EA)	;CJK UNIFIED IDEOGRAPH
                                (#xC4C5 . #x5450)	;CJK UNIFIED IDEOGRAPH
                                (#xC4C6 . #x94A0)	;CJK UNIFIED IDEOGRAPH
                                (#xC4C7 . #x90A3)	;CJK UNIFIED IDEOGRAPH
                                (#xC4C8 . #x5A1C)	;CJK UNIFIED IDEOGRAPH
                                (#xC4C9 . #x7EB3)	;CJK UNIFIED IDEOGRAPH
                                (#xC4CA . #x6C16)	;CJK UNIFIED IDEOGRAPH
                                (#xC4CB . #x4E43)	;CJK UNIFIED IDEOGRAPH
                                (#xC4CC . #x5976)	;CJK UNIFIED IDEOGRAPH
                                (#xC4CD . #x8010)	;CJK UNIFIED IDEOGRAPH
                                (#xC4CE . #x5948)	;CJK UNIFIED IDEOGRAPH
                                (#xC4CF . #x5357)	;CJK UNIFIED IDEOGRAPH
                                (#xC4D0 . #x7537)	;CJK UNIFIED IDEOGRAPH
                                (#xC4D1 . #x96BE)	;CJK UNIFIED IDEOGRAPH
                                (#xC4D2 . #x56CA)	;CJK UNIFIED IDEOGRAPH
                                (#xC4D3 . #x6320)	;CJK UNIFIED IDEOGRAPH
                                (#xC4D4 . #x8111)	;CJK UNIFIED IDEOGRAPH
                                (#xC4D5 . #x607C)	;CJK UNIFIED IDEOGRAPH
                                (#xC4D6 . #x95F9)	;CJK UNIFIED IDEOGRAPH
                                (#xC4D7 . #x6DD6)	;CJK UNIFIED IDEOGRAPH
                                (#xC4D8 . #x5462)	;CJK UNIFIED IDEOGRAPH
                                (#xC4D9 . #x9981)	;CJK UNIFIED IDEOGRAPH
                                (#xC4DA . #x5185)	;CJK UNIFIED IDEOGRAPH
                                (#xC4DB . #x5AE9)	;CJK UNIFIED IDEOGRAPH
                                (#xC4DC . #x80FD)	;CJK UNIFIED IDEOGRAPH
                                (#xC4DD . #x59AE)	;CJK UNIFIED IDEOGRAPH
                                (#xC4DE . #x9713)	;CJK UNIFIED IDEOGRAPH
                                (#xC4DF . #x502A)	;CJK UNIFIED IDEOGRAPH
                                (#xC4E0 . #x6CE5)	;CJK UNIFIED IDEOGRAPH
                                (#xC4E1 . #x5C3C)	;CJK UNIFIED IDEOGRAPH
                                (#xC4E2 . #x62DF)	;CJK UNIFIED IDEOGRAPH
                                (#xC4E3 . #x4F60)	;CJK UNIFIED IDEOGRAPH
                                (#xC4E4 . #x533F)	;CJK UNIFIED IDEOGRAPH
                                (#xC4E5 . #x817B)	;CJK UNIFIED IDEOGRAPH
                                (#xC4E6 . #x9006)	;CJK UNIFIED IDEOGRAPH
                                (#xC4E7 . #x6EBA)	;CJK UNIFIED IDEOGRAPH
                                (#xC4E8 . #x852B)	;CJK UNIFIED IDEOGRAPH
                                (#xC4E9 . #x62C8)	;CJK UNIFIED IDEOGRAPH
                                (#xC4EA . #x5E74)	;CJK UNIFIED IDEOGRAPH
                                (#xC4EB . #x78BE)	;CJK UNIFIED IDEOGRAPH
                                (#xC4EC . #x64B5)	;CJK UNIFIED IDEOGRAPH
                                (#xC4ED . #x637B)	;CJK UNIFIED IDEOGRAPH
                                (#xC4EE . #x5FF5)	;CJK UNIFIED IDEOGRAPH
                                (#xC4EF . #x5A18)	;CJK UNIFIED IDEOGRAPH
                                (#xC4F0 . #x917F)	;CJK UNIFIED IDEOGRAPH
                                (#xC4F1 . #x9E1F)	;CJK UNIFIED IDEOGRAPH
                                (#xC4F2 . #x5C3F)	;CJK UNIFIED IDEOGRAPH
                                (#xC4F3 . #x634F)	;CJK UNIFIED IDEOGRAPH
                                (#xC4F4 . #x8042)	;CJK UNIFIED IDEOGRAPH
                                (#xC4F5 . #x5B7D)	;CJK UNIFIED IDEOGRAPH
                                (#xC4F6 . #x556E)	;CJK UNIFIED IDEOGRAPH
                                (#xC4F7 . #x954A)	;CJK UNIFIED IDEOGRAPH
                                (#xC4F8 . #x954D)	;CJK UNIFIED IDEOGRAPH
                                (#xC4F9 . #x6D85)	;CJK UNIFIED IDEOGRAPH
                                (#xC4FA . #x60A8)	;CJK UNIFIED IDEOGRAPH
                                (#xC4FB . #x67E0)	;CJK UNIFIED IDEOGRAPH
                                (#xC4FC . #x72DE)	;CJK UNIFIED IDEOGRAPH
                                (#xC4FD . #x51DD)	;CJK UNIFIED IDEOGRAPH
                                (#xC4FE . #x5B81)	;CJK UNIFIED IDEOGRAPH
                                (#xC540 . #x81D4)	;CJK UNIFIED IDEOGRAPH
                                (#xC541 . #x81D5)	;CJK UNIFIED IDEOGRAPH
                                (#xC542 . #x81D6)	;CJK UNIFIED IDEOGRAPH
                                (#xC543 . #x81D7)	;CJK UNIFIED IDEOGRAPH
                                (#xC544 . #x81D8)	;CJK UNIFIED IDEOGRAPH
                                (#xC545 . #x81D9)	;CJK UNIFIED IDEOGRAPH
                                (#xC546 . #x81DA)	;CJK UNIFIED IDEOGRAPH
                                (#xC547 . #x81DB)	;CJK UNIFIED IDEOGRAPH
                                (#xC548 . #x81DC)	;CJK UNIFIED IDEOGRAPH
                                (#xC549 . #x81DD)	;CJK UNIFIED IDEOGRAPH
                                (#xC54A . #x81DE)	;CJK UNIFIED IDEOGRAPH
                                (#xC54B . #x81DF)	;CJK UNIFIED IDEOGRAPH
                                (#xC54C . #x81E0)	;CJK UNIFIED IDEOGRAPH
                                (#xC54D . #x81E1)	;CJK UNIFIED IDEOGRAPH
                                (#xC54E . #x81E2)	;CJK UNIFIED IDEOGRAPH
                                (#xC54F . #x81E4)	;CJK UNIFIED IDEOGRAPH
                                (#xC550 . #x81E5)	;CJK UNIFIED IDEOGRAPH
                                (#xC551 . #x81E6)	;CJK UNIFIED IDEOGRAPH
                                (#xC552 . #x81E8)	;CJK UNIFIED IDEOGRAPH
                                (#xC553 . #x81E9)	;CJK UNIFIED IDEOGRAPH
                                (#xC554 . #x81EB)	;CJK UNIFIED IDEOGRAPH
                                (#xC555 . #x81EE)	;CJK UNIFIED IDEOGRAPH
                                (#xC556 . #x81EF)	;CJK UNIFIED IDEOGRAPH
                                (#xC557 . #x81F0)	;CJK UNIFIED IDEOGRAPH
                                (#xC558 . #x81F1)	;CJK UNIFIED IDEOGRAPH
                                (#xC559 . #x81F2)	;CJK UNIFIED IDEOGRAPH
                                (#xC55A . #x81F5)	;CJK UNIFIED IDEOGRAPH
                                (#xC55B . #x81F6)	;CJK UNIFIED IDEOGRAPH
                                (#xC55C . #x81F7)	;CJK UNIFIED IDEOGRAPH
                                (#xC55D . #x81F8)	;CJK UNIFIED IDEOGRAPH
                                (#xC55E . #x81F9)	;CJK UNIFIED IDEOGRAPH
                                (#xC55F . #x81FA)	;CJK UNIFIED IDEOGRAPH
                                (#xC560 . #x81FD)	;CJK UNIFIED IDEOGRAPH
                                (#xC561 . #x81FF)	;CJK UNIFIED IDEOGRAPH
                                (#xC562 . #x8203)	;CJK UNIFIED IDEOGRAPH
                                (#xC563 . #x8207)	;CJK UNIFIED IDEOGRAPH
                                (#xC564 . #x8208)	;CJK UNIFIED IDEOGRAPH
                                (#xC565 . #x8209)	;CJK UNIFIED IDEOGRAPH
                                (#xC566 . #x820A)	;CJK UNIFIED IDEOGRAPH
                                (#xC567 . #x820B)	;CJK UNIFIED IDEOGRAPH
                                (#xC568 . #x820E)	;CJK UNIFIED IDEOGRAPH
                                (#xC569 . #x820F)	;CJK UNIFIED IDEOGRAPH
                                (#xC56A . #x8211)	;CJK UNIFIED IDEOGRAPH
                                (#xC56B . #x8213)	;CJK UNIFIED IDEOGRAPH
                                (#xC56C . #x8215)	;CJK UNIFIED IDEOGRAPH
                                (#xC56D . #x8216)	;CJK UNIFIED IDEOGRAPH
                                (#xC56E . #x8217)	;CJK UNIFIED IDEOGRAPH
                                (#xC56F . #x8218)	;CJK UNIFIED IDEOGRAPH
                                (#xC570 . #x8219)	;CJK UNIFIED IDEOGRAPH
                                (#xC571 . #x821A)	;CJK UNIFIED IDEOGRAPH
                                (#xC572 . #x821D)	;CJK UNIFIED IDEOGRAPH
                                (#xC573 . #x8220)	;CJK UNIFIED IDEOGRAPH
                                (#xC574 . #x8224)	;CJK UNIFIED IDEOGRAPH
                                (#xC575 . #x8225)	;CJK UNIFIED IDEOGRAPH
                                (#xC576 . #x8226)	;CJK UNIFIED IDEOGRAPH
                                (#xC577 . #x8227)	;CJK UNIFIED IDEOGRAPH
                                (#xC578 . #x8229)	;CJK UNIFIED IDEOGRAPH
                                (#xC579 . #x822E)	;CJK UNIFIED IDEOGRAPH
                                (#xC57A . #x8232)	;CJK UNIFIED IDEOGRAPH
                                (#xC57B . #x823A)	;CJK UNIFIED IDEOGRAPH
                                (#xC57C . #x823C)	;CJK UNIFIED IDEOGRAPH
                                (#xC57D . #x823D)	;CJK UNIFIED IDEOGRAPH
                                (#xC57E . #x823F)	;CJK UNIFIED IDEOGRAPH
                                (#xC580 . #x8240)	;CJK UNIFIED IDEOGRAPH
                                (#xC581 . #x8241)	;CJK UNIFIED IDEOGRAPH
                                (#xC582 . #x8242)	;CJK UNIFIED IDEOGRAPH
                                (#xC583 . #x8243)	;CJK UNIFIED IDEOGRAPH
                                (#xC584 . #x8245)	;CJK UNIFIED IDEOGRAPH
                                (#xC585 . #x8246)	;CJK UNIFIED IDEOGRAPH
                                (#xC586 . #x8248)	;CJK UNIFIED IDEOGRAPH
                                (#xC587 . #x824A)	;CJK UNIFIED IDEOGRAPH
                                (#xC588 . #x824C)	;CJK UNIFIED IDEOGRAPH
                                (#xC589 . #x824D)	;CJK UNIFIED IDEOGRAPH
                                (#xC58A . #x824E)	;CJK UNIFIED IDEOGRAPH
                                (#xC58B . #x8250)	;CJK UNIFIED IDEOGRAPH
                                (#xC58C . #x8251)	;CJK UNIFIED IDEOGRAPH
                                (#xC58D . #x8252)	;CJK UNIFIED IDEOGRAPH
                                (#xC58E . #x8253)	;CJK UNIFIED IDEOGRAPH
                                (#xC58F . #x8254)	;CJK UNIFIED IDEOGRAPH
                                (#xC590 . #x8255)	;CJK UNIFIED IDEOGRAPH
                                (#xC591 . #x8256)	;CJK UNIFIED IDEOGRAPH
                                (#xC592 . #x8257)	;CJK UNIFIED IDEOGRAPH
                                (#xC593 . #x8259)	;CJK UNIFIED IDEOGRAPH
                                (#xC594 . #x825B)	;CJK UNIFIED IDEOGRAPH
                                (#xC595 . #x825C)	;CJK UNIFIED IDEOGRAPH
                                (#xC596 . #x825D)	;CJK UNIFIED IDEOGRAPH
                                (#xC597 . #x825E)	;CJK UNIFIED IDEOGRAPH
                                (#xC598 . #x8260)	;CJK UNIFIED IDEOGRAPH
                                (#xC599 . #x8261)	;CJK UNIFIED IDEOGRAPH
                                (#xC59A . #x8262)	;CJK UNIFIED IDEOGRAPH
                                (#xC59B . #x8263)	;CJK UNIFIED IDEOGRAPH
                                (#xC59C . #x8264)	;CJK UNIFIED IDEOGRAPH
                                (#xC59D . #x8265)	;CJK UNIFIED IDEOGRAPH
                                (#xC59E . #x8266)	;CJK UNIFIED IDEOGRAPH
                                (#xC59F . #x8267)	;CJK UNIFIED IDEOGRAPH
                                (#xC5A0 . #x8269)	;CJK UNIFIED IDEOGRAPH
                                (#xC5A1 . #x62E7)	;CJK UNIFIED IDEOGRAPH
                                (#xC5A2 . #x6CDE)	;CJK UNIFIED IDEOGRAPH
                                (#xC5A3 . #x725B)	;CJK UNIFIED IDEOGRAPH
                                (#xC5A4 . #x626D)	;CJK UNIFIED IDEOGRAPH
                                (#xC5A5 . #x94AE)	;CJK UNIFIED IDEOGRAPH
                                (#xC5A6 . #x7EBD)	;CJK UNIFIED IDEOGRAPH
                                (#xC5A7 . #x8113)	;CJK UNIFIED IDEOGRAPH
                                (#xC5A8 . #x6D53)	;CJK UNIFIED IDEOGRAPH
                                (#xC5A9 . #x519C)	;CJK UNIFIED IDEOGRAPH
                                (#xC5AA . #x5F04)	;CJK UNIFIED IDEOGRAPH
                                (#xC5AB . #x5974)	;CJK UNIFIED IDEOGRAPH
                                (#xC5AC . #x52AA)	;CJK UNIFIED IDEOGRAPH
                                (#xC5AD . #x6012)	;CJK UNIFIED IDEOGRAPH
                                (#xC5AE . #x5973)	;CJK UNIFIED IDEOGRAPH
                                (#xC5AF . #x6696)	;CJK UNIFIED IDEOGRAPH
                                (#xC5B0 . #x8650)	;CJK UNIFIED IDEOGRAPH
                                (#xC5B1 . #x759F)	;CJK UNIFIED IDEOGRAPH
                                (#xC5B2 . #x632A)	;CJK UNIFIED IDEOGRAPH
                                (#xC5B3 . #x61E6)	;CJK UNIFIED IDEOGRAPH
                                (#xC5B4 . #x7CEF)	;CJK UNIFIED IDEOGRAPH
                                (#xC5B5 . #x8BFA)	;CJK UNIFIED IDEOGRAPH
                                (#xC5B6 . #x54E6)	;CJK UNIFIED IDEOGRAPH
                                (#xC5B7 . #x6B27)	;CJK UNIFIED IDEOGRAPH
                                (#xC5B8 . #x9E25)	;CJK UNIFIED IDEOGRAPH
                                (#xC5B9 . #x6BB4)	;CJK UNIFIED IDEOGRAPH
                                (#xC5BA . #x85D5)	;CJK UNIFIED IDEOGRAPH
                                (#xC5BB . #x5455)	;CJK UNIFIED IDEOGRAPH
                                (#xC5BC . #x5076)	;CJK UNIFIED IDEOGRAPH
                                (#xC5BD . #x6CA4)	;CJK UNIFIED IDEOGRAPH
                                (#xC5BE . #x556A)	;CJK UNIFIED IDEOGRAPH
                                (#xC5BF . #x8DB4)	;CJK UNIFIED IDEOGRAPH
                                (#xC5C0 . #x722C)	;CJK UNIFIED IDEOGRAPH
                                (#xC5C1 . #x5E15)	;CJK UNIFIED IDEOGRAPH
                                (#xC5C2 . #x6015)	;CJK UNIFIED IDEOGRAPH
                                (#xC5C3 . #x7436)	;CJK UNIFIED IDEOGRAPH
                                (#xC5C4 . #x62CD)	;CJK UNIFIED IDEOGRAPH
                                (#xC5C5 . #x6392)	;CJK UNIFIED IDEOGRAPH
                                (#xC5C6 . #x724C)	;CJK UNIFIED IDEOGRAPH
                                (#xC5C7 . #x5F98)	;CJK UNIFIED IDEOGRAPH
                                (#xC5C8 . #x6E43)	;CJK UNIFIED IDEOGRAPH
                                (#xC5C9 . #x6D3E)	;CJK UNIFIED IDEOGRAPH
                                (#xC5CA . #x6500)	;CJK UNIFIED IDEOGRAPH
                                (#xC5CB . #x6F58)	;CJK UNIFIED IDEOGRAPH
                                (#xC5CC . #x76D8)	;CJK UNIFIED IDEOGRAPH
                                (#xC5CD . #x78D0)	;CJK UNIFIED IDEOGRAPH
                                (#xC5CE . #x76FC)	;CJK UNIFIED IDEOGRAPH
                                (#xC5CF . #x7554)	;CJK UNIFIED IDEOGRAPH
                                (#xC5D0 . #x5224)	;CJK UNIFIED IDEOGRAPH
                                (#xC5D1 . #x53DB)	;CJK UNIFIED IDEOGRAPH
                                (#xC5D2 . #x4E53)	;CJK UNIFIED IDEOGRAPH
                                (#xC5D3 . #x5E9E)	;CJK UNIFIED IDEOGRAPH
                                (#xC5D4 . #x65C1)	;CJK UNIFIED IDEOGRAPH
                                (#xC5D5 . #x802A)	;CJK UNIFIED IDEOGRAPH
                                (#xC5D6 . #x80D6)	;CJK UNIFIED IDEOGRAPH
                                (#xC5D7 . #x629B)	;CJK UNIFIED IDEOGRAPH
                                (#xC5D8 . #x5486)	;CJK UNIFIED IDEOGRAPH
                                (#xC5D9 . #x5228)	;CJK UNIFIED IDEOGRAPH
                                (#xC5DA . #x70AE)	;CJK UNIFIED IDEOGRAPH
                                (#xC5DB . #x888D)	;CJK UNIFIED IDEOGRAPH
                                (#xC5DC . #x8DD1)	;CJK UNIFIED IDEOGRAPH
                                (#xC5DD . #x6CE1)	;CJK UNIFIED IDEOGRAPH
                                (#xC5DE . #x5478)	;CJK UNIFIED IDEOGRAPH
                                (#xC5DF . #x80DA)	;CJK UNIFIED IDEOGRAPH
                                (#xC5E0 . #x57F9)	;CJK UNIFIED IDEOGRAPH
                                (#xC5E1 . #x88F4)	;CJK UNIFIED IDEOGRAPH
                                (#xC5E2 . #x8D54)	;CJK UNIFIED IDEOGRAPH
                                (#xC5E3 . #x966A)	;CJK UNIFIED IDEOGRAPH
                                (#xC5E4 . #x914D)	;CJK UNIFIED IDEOGRAPH
                                (#xC5E5 . #x4F69)	;CJK UNIFIED IDEOGRAPH
                                (#xC5E6 . #x6C9B)	;CJK UNIFIED IDEOGRAPH
                                (#xC5E7 . #x55B7)	;CJK UNIFIED IDEOGRAPH
                                (#xC5E8 . #x76C6)	;CJK UNIFIED IDEOGRAPH
                                (#xC5E9 . #x7830)	;CJK UNIFIED IDEOGRAPH
                                (#xC5EA . #x62A8)	;CJK UNIFIED IDEOGRAPH
                                (#xC5EB . #x70F9)	;CJK UNIFIED IDEOGRAPH
                                (#xC5EC . #x6F8E)	;CJK UNIFIED IDEOGRAPH
                                (#xC5ED . #x5F6D)	;CJK UNIFIED IDEOGRAPH
                                (#xC5EE . #x84EC)	;CJK UNIFIED IDEOGRAPH
                                (#xC5EF . #x68DA)	;CJK UNIFIED IDEOGRAPH
                                (#xC5F0 . #x787C)	;CJK UNIFIED IDEOGRAPH
                                (#xC5F1 . #x7BF7)	;CJK UNIFIED IDEOGRAPH
                                (#xC5F2 . #x81A8)	;CJK UNIFIED IDEOGRAPH
                                (#xC5F3 . #x670B)	;CJK UNIFIED IDEOGRAPH
                                (#xC5F4 . #x9E4F)	;CJK UNIFIED IDEOGRAPH
                                (#xC5F5 . #x6367)	;CJK UNIFIED IDEOGRAPH
                                (#xC5F6 . #x78B0)	;CJK UNIFIED IDEOGRAPH
                                (#xC5F7 . #x576F)	;CJK UNIFIED IDEOGRAPH
                                (#xC5F8 . #x7812)	;CJK UNIFIED IDEOGRAPH
                                (#xC5F9 . #x9739)	;CJK UNIFIED IDEOGRAPH
                                (#xC5FA . #x6279)	;CJK UNIFIED IDEOGRAPH
                                (#xC5FB . #x62AB)	;CJK UNIFIED IDEOGRAPH
                                (#xC5FC . #x5288)	;CJK UNIFIED IDEOGRAPH
                                (#xC5FD . #x7435)	;CJK UNIFIED IDEOGRAPH
                                (#xC5FE . #x6BD7)	;CJK UNIFIED IDEOGRAPH
                                (#xC640 . #x826A)	;CJK UNIFIED IDEOGRAPH
                                (#xC641 . #x826B)	;CJK UNIFIED IDEOGRAPH
                                (#xC642 . #x826C)	;CJK UNIFIED IDEOGRAPH
                                (#xC643 . #x826D)	;CJK UNIFIED IDEOGRAPH
                                (#xC644 . #x8271)	;CJK UNIFIED IDEOGRAPH
                                (#xC645 . #x8275)	;CJK UNIFIED IDEOGRAPH
                                (#xC646 . #x8276)	;CJK UNIFIED IDEOGRAPH
                                (#xC647 . #x8277)	;CJK UNIFIED IDEOGRAPH
                                (#xC648 . #x8278)	;CJK UNIFIED IDEOGRAPH
                                (#xC649 . #x827B)	;CJK UNIFIED IDEOGRAPH
                                (#xC64A . #x827C)	;CJK UNIFIED IDEOGRAPH
                                (#xC64B . #x8280)	;CJK UNIFIED IDEOGRAPH
                                (#xC64C . #x8281)	;CJK UNIFIED IDEOGRAPH
                                (#xC64D . #x8283)	;CJK UNIFIED IDEOGRAPH
                                (#xC64E . #x8285)	;CJK UNIFIED IDEOGRAPH
                                (#xC64F . #x8286)	;CJK UNIFIED IDEOGRAPH
                                (#xC650 . #x8287)	;CJK UNIFIED IDEOGRAPH
                                (#xC651 . #x8289)	;CJK UNIFIED IDEOGRAPH
                                (#xC652 . #x828C)	;CJK UNIFIED IDEOGRAPH
                                (#xC653 . #x8290)	;CJK UNIFIED IDEOGRAPH
                                (#xC654 . #x8293)	;CJK UNIFIED IDEOGRAPH
                                (#xC655 . #x8294)	;CJK UNIFIED IDEOGRAPH
                                (#xC656 . #x8295)	;CJK UNIFIED IDEOGRAPH
                                (#xC657 . #x8296)	;CJK UNIFIED IDEOGRAPH
                                (#xC658 . #x829A)	;CJK UNIFIED IDEOGRAPH
                                (#xC659 . #x829B)	;CJK UNIFIED IDEOGRAPH
                                (#xC65A . #x829E)	;CJK UNIFIED IDEOGRAPH
                                (#xC65B . #x82A0)	;CJK UNIFIED IDEOGRAPH
                                (#xC65C . #x82A2)	;CJK UNIFIED IDEOGRAPH
                                (#xC65D . #x82A3)	;CJK UNIFIED IDEOGRAPH
                                (#xC65E . #x82A7)	;CJK UNIFIED IDEOGRAPH
                                (#xC65F . #x82B2)	;CJK UNIFIED IDEOGRAPH
                                (#xC660 . #x82B5)	;CJK UNIFIED IDEOGRAPH
                                (#xC661 . #x82B6)	;CJK UNIFIED IDEOGRAPH
                                (#xC662 . #x82BA)	;CJK UNIFIED IDEOGRAPH
                                (#xC663 . #x82BB)	;CJK UNIFIED IDEOGRAPH
                                (#xC664 . #x82BC)	;CJK UNIFIED IDEOGRAPH
                                (#xC665 . #x82BF)	;CJK UNIFIED IDEOGRAPH
                                (#xC666 . #x82C0)	;CJK UNIFIED IDEOGRAPH
                                (#xC667 . #x82C2)	;CJK UNIFIED IDEOGRAPH
                                (#xC668 . #x82C3)	;CJK UNIFIED IDEOGRAPH
                                (#xC669 . #x82C5)	;CJK UNIFIED IDEOGRAPH
                                (#xC66A . #x82C6)	;CJK UNIFIED IDEOGRAPH
                                (#xC66B . #x82C9)	;CJK UNIFIED IDEOGRAPH
                                (#xC66C . #x82D0)	;CJK UNIFIED IDEOGRAPH
                                (#xC66D . #x82D6)	;CJK UNIFIED IDEOGRAPH
                                (#xC66E . #x82D9)	;CJK UNIFIED IDEOGRAPH
                                (#xC66F . #x82DA)	;CJK UNIFIED IDEOGRAPH
                                (#xC670 . #x82DD)	;CJK UNIFIED IDEOGRAPH
                                (#xC671 . #x82E2)	;CJK UNIFIED IDEOGRAPH
                                (#xC672 . #x82E7)	;CJK UNIFIED IDEOGRAPH
                                (#xC673 . #x82E8)	;CJK UNIFIED IDEOGRAPH
                                (#xC674 . #x82E9)	;CJK UNIFIED IDEOGRAPH
                                (#xC675 . #x82EA)	;CJK UNIFIED IDEOGRAPH
                                (#xC676 . #x82EC)	;CJK UNIFIED IDEOGRAPH
                                (#xC677 . #x82ED)	;CJK UNIFIED IDEOGRAPH
                                (#xC678 . #x82EE)	;CJK UNIFIED IDEOGRAPH
                                (#xC679 . #x82F0)	;CJK UNIFIED IDEOGRAPH
                                (#xC67A . #x82F2)	;CJK UNIFIED IDEOGRAPH
                                (#xC67B . #x82F3)	;CJK UNIFIED IDEOGRAPH
                                (#xC67C . #x82F5)	;CJK UNIFIED IDEOGRAPH
                                (#xC67D . #x82F6)	;CJK UNIFIED IDEOGRAPH
                                (#xC67E . #x82F8)	;CJK UNIFIED IDEOGRAPH
                                (#xC680 . #x82FA)	;CJK UNIFIED IDEOGRAPH
                                (#xC681 . #x82FC)	;CJK UNIFIED IDEOGRAPH
                                (#xC682 . #x82FD)	;CJK UNIFIED IDEOGRAPH
                                (#xC683 . #x82FE)	;CJK UNIFIED IDEOGRAPH
                                (#xC684 . #x82FF)	;CJK UNIFIED IDEOGRAPH
                                (#xC685 . #x8300)	;CJK UNIFIED IDEOGRAPH
                                (#xC686 . #x830A)	;CJK UNIFIED IDEOGRAPH
                                (#xC687 . #x830B)	;CJK UNIFIED IDEOGRAPH
                                (#xC688 . #x830D)	;CJK UNIFIED IDEOGRAPH
                                (#xC689 . #x8310)	;CJK UNIFIED IDEOGRAPH
                                (#xC68A . #x8312)	;CJK UNIFIED IDEOGRAPH
                                (#xC68B . #x8313)	;CJK UNIFIED IDEOGRAPH
                                (#xC68C . #x8316)	;CJK UNIFIED IDEOGRAPH
                                (#xC68D . #x8318)	;CJK UNIFIED IDEOGRAPH
                                (#xC68E . #x8319)	;CJK UNIFIED IDEOGRAPH
                                (#xC68F . #x831D)	;CJK UNIFIED IDEOGRAPH
                                (#xC690 . #x831E)	;CJK UNIFIED IDEOGRAPH
                                (#xC691 . #x831F)	;CJK UNIFIED IDEOGRAPH
                                (#xC692 . #x8320)	;CJK UNIFIED IDEOGRAPH
                                (#xC693 . #x8321)	;CJK UNIFIED IDEOGRAPH
                                (#xC694 . #x8322)	;CJK UNIFIED IDEOGRAPH
                                (#xC695 . #x8323)	;CJK UNIFIED IDEOGRAPH
                                (#xC696 . #x8324)	;CJK UNIFIED IDEOGRAPH
                                (#xC697 . #x8325)	;CJK UNIFIED IDEOGRAPH
                                (#xC698 . #x8326)	;CJK UNIFIED IDEOGRAPH
                                (#xC699 . #x8329)	;CJK UNIFIED IDEOGRAPH
                                (#xC69A . #x832A)	;CJK UNIFIED IDEOGRAPH
                                (#xC69B . #x832E)	;CJK UNIFIED IDEOGRAPH
                                (#xC69C . #x8330)	;CJK UNIFIED IDEOGRAPH
                                (#xC69D . #x8332)	;CJK UNIFIED IDEOGRAPH
                                (#xC69E . #x8337)	;CJK UNIFIED IDEOGRAPH
                                (#xC69F . #x833B)	;CJK UNIFIED IDEOGRAPH
                                (#xC6A0 . #x833D)	;CJK UNIFIED IDEOGRAPH
                                (#xC6A1 . #x5564)	;CJK UNIFIED IDEOGRAPH
                                (#xC6A2 . #x813E)	;CJK UNIFIED IDEOGRAPH
                                (#xC6A3 . #x75B2)	;CJK UNIFIED IDEOGRAPH
                                (#xC6A4 . #x76AE)	;CJK UNIFIED IDEOGRAPH
                                (#xC6A5 . #x5339)	;CJK UNIFIED IDEOGRAPH
                                (#xC6A6 . #x75DE)	;CJK UNIFIED IDEOGRAPH
                                (#xC6A7 . #x50FB)	;CJK UNIFIED IDEOGRAPH
                                (#xC6A8 . #x5C41)	;CJK UNIFIED IDEOGRAPH
                                (#xC6A9 . #x8B6C)	;CJK UNIFIED IDEOGRAPH
                                (#xC6AA . #x7BC7)	;CJK UNIFIED IDEOGRAPH
                                (#xC6AB . #x504F)	;CJK UNIFIED IDEOGRAPH
                                (#xC6AC . #x7247)	;CJK UNIFIED IDEOGRAPH
                                (#xC6AD . #x9A97)	;CJK UNIFIED IDEOGRAPH
                                (#xC6AE . #x98D8)	;CJK UNIFIED IDEOGRAPH
                                (#xC6AF . #x6F02)	;CJK UNIFIED IDEOGRAPH
                                (#xC6B0 . #x74E2)	;CJK UNIFIED IDEOGRAPH
                                (#xC6B1 . #x7968)	;CJK UNIFIED IDEOGRAPH
                                (#xC6B2 . #x6487)	;CJK UNIFIED IDEOGRAPH
                                (#xC6B3 . #x77A5)	;CJK UNIFIED IDEOGRAPH
                                (#xC6B4 . #x62FC)	;CJK UNIFIED IDEOGRAPH
                                (#xC6B5 . #x9891)	;CJK UNIFIED IDEOGRAPH
                                (#xC6B6 . #x8D2B)	;CJK UNIFIED IDEOGRAPH
                                (#xC6B7 . #x54C1)	;CJK UNIFIED IDEOGRAPH
                                (#xC6B8 . #x8058)	;CJK UNIFIED IDEOGRAPH
                                (#xC6B9 . #x4E52)	;CJK UNIFIED IDEOGRAPH
                                (#xC6BA . #x576A)	;CJK UNIFIED IDEOGRAPH
                                (#xC6BB . #x82F9)	;CJK UNIFIED IDEOGRAPH
                                (#xC6BC . #x840D)	;CJK UNIFIED IDEOGRAPH
                                (#xC6BD . #x5E73)	;CJK UNIFIED IDEOGRAPH
                                (#xC6BE . #x51ED)	;CJK UNIFIED IDEOGRAPH
                                (#xC6BF . #x74F6)	;CJK UNIFIED IDEOGRAPH
                                (#xC6C0 . #x8BC4)	;CJK UNIFIED IDEOGRAPH
                                (#xC6C1 . #x5C4F)	;CJK UNIFIED IDEOGRAPH
                                (#xC6C2 . #x5761)	;CJK UNIFIED IDEOGRAPH
                                (#xC6C3 . #x6CFC)	;CJK UNIFIED IDEOGRAPH
                                (#xC6C4 . #x9887)	;CJK UNIFIED IDEOGRAPH
                                (#xC6C5 . #x5A46)	;CJK UNIFIED IDEOGRAPH
                                (#xC6C6 . #x7834)	;CJK UNIFIED IDEOGRAPH
                                (#xC6C7 . #x9B44)	;CJK UNIFIED IDEOGRAPH
                                (#xC6C8 . #x8FEB)	;CJK UNIFIED IDEOGRAPH
                                (#xC6C9 . #x7C95)	;CJK UNIFIED IDEOGRAPH
                                (#xC6CA . #x5256)	;CJK UNIFIED IDEOGRAPH
                                (#xC6CB . #x6251)	;CJK UNIFIED IDEOGRAPH
                                (#xC6CC . #x94FA)	;CJK UNIFIED IDEOGRAPH
                                (#xC6CD . #x4EC6)	;CJK UNIFIED IDEOGRAPH
                                (#xC6CE . #x8386)	;CJK UNIFIED IDEOGRAPH
                                (#xC6CF . #x8461)	;CJK UNIFIED IDEOGRAPH
                                (#xC6D0 . #x83E9)	;CJK UNIFIED IDEOGRAPH
                                (#xC6D1 . #x84B2)	;CJK UNIFIED IDEOGRAPH
                                (#xC6D2 . #x57D4)	;CJK UNIFIED IDEOGRAPH
                                (#xC6D3 . #x6734)	;CJK UNIFIED IDEOGRAPH
                                (#xC6D4 . #x5703)	;CJK UNIFIED IDEOGRAPH
                                (#xC6D5 . #x666E)	;CJK UNIFIED IDEOGRAPH
                                (#xC6D6 . #x6D66)	;CJK UNIFIED IDEOGRAPH
                                (#xC6D7 . #x8C31)	;CJK UNIFIED IDEOGRAPH
                                (#xC6D8 . #x66DD)	;CJK UNIFIED IDEOGRAPH
                                (#xC6D9 . #x7011)	;CJK UNIFIED IDEOGRAPH
                                (#xC6DA . #x671F)	;CJK UNIFIED IDEOGRAPH
                                (#xC6DB . #x6B3A)	;CJK UNIFIED IDEOGRAPH
                                (#xC6DC . #x6816)	;CJK UNIFIED IDEOGRAPH
                                (#xC6DD . #x621A)	;CJK UNIFIED IDEOGRAPH
                                (#xC6DE . #x59BB)	;CJK UNIFIED IDEOGRAPH
                                (#xC6DF . #x4E03)	;CJK UNIFIED IDEOGRAPH
                                (#xC6E0 . #x51C4)	;CJK UNIFIED IDEOGRAPH
                                (#xC6E1 . #x6F06)	;CJK UNIFIED IDEOGRAPH
                                (#xC6E2 . #x67D2)	;CJK UNIFIED IDEOGRAPH
                                (#xC6E3 . #x6C8F)	;CJK UNIFIED IDEOGRAPH
                                (#xC6E4 . #x5176)	;CJK UNIFIED IDEOGRAPH
                                (#xC6E5 . #x68CB)	;CJK UNIFIED IDEOGRAPH
                                (#xC6E6 . #x5947)	;CJK UNIFIED IDEOGRAPH
                                (#xC6E7 . #x6B67)	;CJK UNIFIED IDEOGRAPH
                                (#xC6E8 . #x7566)	;CJK UNIFIED IDEOGRAPH
                                (#xC6E9 . #x5D0E)	;CJK UNIFIED IDEOGRAPH
                                (#xC6EA . #x8110)	;CJK UNIFIED IDEOGRAPH
                                (#xC6EB . #x9F50)	;CJK UNIFIED IDEOGRAPH
                                (#xC6EC . #x65D7)	;CJK UNIFIED IDEOGRAPH
                                (#xC6ED . #x7948)	;CJK UNIFIED IDEOGRAPH
                                (#xC6EE . #x7941)	;CJK UNIFIED IDEOGRAPH
                                (#xC6EF . #x9A91)	;CJK UNIFIED IDEOGRAPH
                                (#xC6F0 . #x8D77)	;CJK UNIFIED IDEOGRAPH
                                (#xC6F1 . #x5C82)	;CJK UNIFIED IDEOGRAPH
                                (#xC6F2 . #x4E5E)	;CJK UNIFIED IDEOGRAPH
                                (#xC6F3 . #x4F01)	;CJK UNIFIED IDEOGRAPH
                                (#xC6F4 . #x542F)	;CJK UNIFIED IDEOGRAPH
                                (#xC6F5 . #x5951)	;CJK UNIFIED IDEOGRAPH
                                (#xC6F6 . #x780C)	;CJK UNIFIED IDEOGRAPH
                                (#xC6F7 . #x5668)	;CJK UNIFIED IDEOGRAPH
                                (#xC6F8 . #x6C14)	;CJK UNIFIED IDEOGRAPH
                                (#xC6F9 . #x8FC4)	;CJK UNIFIED IDEOGRAPH
                                (#xC6FA . #x5F03)	;CJK UNIFIED IDEOGRAPH
                                (#xC6FB . #x6C7D)	;CJK UNIFIED IDEOGRAPH
                                (#xC6FC . #x6CE3)	;CJK UNIFIED IDEOGRAPH
                                (#xC6FD . #x8BAB)	;CJK UNIFIED IDEOGRAPH
                                (#xC6FE . #x6390)	;CJK UNIFIED IDEOGRAPH
                                (#xC740 . #x833E)	;CJK UNIFIED IDEOGRAPH
                                (#xC741 . #x833F)	;CJK UNIFIED IDEOGRAPH
                                (#xC742 . #x8341)	;CJK UNIFIED IDEOGRAPH
                                (#xC743 . #x8342)	;CJK UNIFIED IDEOGRAPH
                                (#xC744 . #x8344)	;CJK UNIFIED IDEOGRAPH
                                (#xC745 . #x8345)	;CJK UNIFIED IDEOGRAPH
                                (#xC746 . #x8348)	;CJK UNIFIED IDEOGRAPH
                                (#xC747 . #x834A)	;CJK UNIFIED IDEOGRAPH
                                (#xC748 . #x834B)	;CJK UNIFIED IDEOGRAPH
                                (#xC749 . #x834C)	;CJK UNIFIED IDEOGRAPH
                                (#xC74A . #x834D)	;CJK UNIFIED IDEOGRAPH
                                (#xC74B . #x834E)	;CJK UNIFIED IDEOGRAPH
                                (#xC74C . #x8353)	;CJK UNIFIED IDEOGRAPH
                                (#xC74D . #x8355)	;CJK UNIFIED IDEOGRAPH
                                (#xC74E . #x8356)	;CJK UNIFIED IDEOGRAPH
                                (#xC74F . #x8357)	;CJK UNIFIED IDEOGRAPH
                                (#xC750 . #x8358)	;CJK UNIFIED IDEOGRAPH
                                (#xC751 . #x8359)	;CJK UNIFIED IDEOGRAPH
                                (#xC752 . #x835D)	;CJK UNIFIED IDEOGRAPH
                                (#xC753 . #x8362)	;CJK UNIFIED IDEOGRAPH
                                (#xC754 . #x8370)	;CJK UNIFIED IDEOGRAPH
                                (#xC755 . #x8371)	;CJK UNIFIED IDEOGRAPH
                                (#xC756 . #x8372)	;CJK UNIFIED IDEOGRAPH
                                (#xC757 . #x8373)	;CJK UNIFIED IDEOGRAPH
                                (#xC758 . #x8374)	;CJK UNIFIED IDEOGRAPH
                                (#xC759 . #x8375)	;CJK UNIFIED IDEOGRAPH
                                (#xC75A . #x8376)	;CJK UNIFIED IDEOGRAPH
                                (#xC75B . #x8379)	;CJK UNIFIED IDEOGRAPH
                                (#xC75C . #x837A)	;CJK UNIFIED IDEOGRAPH
                                (#xC75D . #x837E)	;CJK UNIFIED IDEOGRAPH
                                (#xC75E . #x837F)	;CJK UNIFIED IDEOGRAPH
                                (#xC75F . #x8380)	;CJK UNIFIED IDEOGRAPH
                                (#xC760 . #x8381)	;CJK UNIFIED IDEOGRAPH
                                (#xC761 . #x8382)	;CJK UNIFIED IDEOGRAPH
                                (#xC762 . #x8383)	;CJK UNIFIED IDEOGRAPH
                                (#xC763 . #x8384)	;CJK UNIFIED IDEOGRAPH
                                (#xC764 . #x8387)	;CJK UNIFIED IDEOGRAPH
                                (#xC765 . #x8388)	;CJK UNIFIED IDEOGRAPH
                                (#xC766 . #x838A)	;CJK UNIFIED IDEOGRAPH
                                (#xC767 . #x838B)	;CJK UNIFIED IDEOGRAPH
                                (#xC768 . #x838C)	;CJK UNIFIED IDEOGRAPH
                                (#xC769 . #x838D)	;CJK UNIFIED IDEOGRAPH
                                (#xC76A . #x838F)	;CJK UNIFIED IDEOGRAPH
                                (#xC76B . #x8390)	;CJK UNIFIED IDEOGRAPH
                                (#xC76C . #x8391)	;CJK UNIFIED IDEOGRAPH
                                (#xC76D . #x8394)	;CJK UNIFIED IDEOGRAPH
                                (#xC76E . #x8395)	;CJK UNIFIED IDEOGRAPH
                                (#xC76F . #x8396)	;CJK UNIFIED IDEOGRAPH
                                (#xC770 . #x8397)	;CJK UNIFIED IDEOGRAPH
                                (#xC771 . #x8399)	;CJK UNIFIED IDEOGRAPH
                                (#xC772 . #x839A)	;CJK UNIFIED IDEOGRAPH
                                (#xC773 . #x839D)	;CJK UNIFIED IDEOGRAPH
                                (#xC774 . #x839F)	;CJK UNIFIED IDEOGRAPH
                                (#xC775 . #x83A1)	;CJK UNIFIED IDEOGRAPH
                                (#xC776 . #x83A2)	;CJK UNIFIED IDEOGRAPH
                                (#xC777 . #x83A3)	;CJK UNIFIED IDEOGRAPH
                                (#xC778 . #x83A4)	;CJK UNIFIED IDEOGRAPH
                                (#xC779 . #x83A5)	;CJK UNIFIED IDEOGRAPH
                                (#xC77A . #x83A6)	;CJK UNIFIED IDEOGRAPH
                                (#xC77B . #x83A7)	;CJK UNIFIED IDEOGRAPH
                                (#xC77C . #x83AC)	;CJK UNIFIED IDEOGRAPH
                                (#xC77D . #x83AD)	;CJK UNIFIED IDEOGRAPH
                                (#xC77E . #x83AE)	;CJK UNIFIED IDEOGRAPH
                                (#xC780 . #x83AF)	;CJK UNIFIED IDEOGRAPH
                                (#xC781 . #x83B5)	;CJK UNIFIED IDEOGRAPH
                                (#xC782 . #x83BB)	;CJK UNIFIED IDEOGRAPH
                                (#xC783 . #x83BE)	;CJK UNIFIED IDEOGRAPH
                                (#xC784 . #x83BF)	;CJK UNIFIED IDEOGRAPH
                                (#xC785 . #x83C2)	;CJK UNIFIED IDEOGRAPH
                                (#xC786 . #x83C3)	;CJK UNIFIED IDEOGRAPH
                                (#xC787 . #x83C4)	;CJK UNIFIED IDEOGRAPH
                                (#xC788 . #x83C6)	;CJK UNIFIED IDEOGRAPH
                                (#xC789 . #x83C8)	;CJK UNIFIED IDEOGRAPH
                                (#xC78A . #x83C9)	;CJK UNIFIED IDEOGRAPH
                                (#xC78B . #x83CB)	;CJK UNIFIED IDEOGRAPH
                                (#xC78C . #x83CD)	;CJK UNIFIED IDEOGRAPH
                                (#xC78D . #x83CE)	;CJK UNIFIED IDEOGRAPH
                                (#xC78E . #x83D0)	;CJK UNIFIED IDEOGRAPH
                                (#xC78F . #x83D1)	;CJK UNIFIED IDEOGRAPH
                                (#xC790 . #x83D2)	;CJK UNIFIED IDEOGRAPH
                                (#xC791 . #x83D3)	;CJK UNIFIED IDEOGRAPH
                                (#xC792 . #x83D5)	;CJK UNIFIED IDEOGRAPH
                                (#xC793 . #x83D7)	;CJK UNIFIED IDEOGRAPH
                                (#xC794 . #x83D9)	;CJK UNIFIED IDEOGRAPH
                                (#xC795 . #x83DA)	;CJK UNIFIED IDEOGRAPH
                                (#xC796 . #x83DB)	;CJK UNIFIED IDEOGRAPH
                                (#xC797 . #x83DE)	;CJK UNIFIED IDEOGRAPH
                                (#xC798 . #x83E2)	;CJK UNIFIED IDEOGRAPH
                                (#xC799 . #x83E3)	;CJK UNIFIED IDEOGRAPH
                                (#xC79A . #x83E4)	;CJK UNIFIED IDEOGRAPH
                                (#xC79B . #x83E6)	;CJK UNIFIED IDEOGRAPH
                                (#xC79C . #x83E7)	;CJK UNIFIED IDEOGRAPH
                                (#xC79D . #x83E8)	;CJK UNIFIED IDEOGRAPH
                                (#xC79E . #x83EB)	;CJK UNIFIED IDEOGRAPH
                                (#xC79F . #x83EC)	;CJK UNIFIED IDEOGRAPH
                                (#xC7A0 . #x83ED)	;CJK UNIFIED IDEOGRAPH
                                (#xC7A1 . #x6070)	;CJK UNIFIED IDEOGRAPH
                                (#xC7A2 . #x6D3D)	;CJK UNIFIED IDEOGRAPH
                                (#xC7A3 . #x7275)	;CJK UNIFIED IDEOGRAPH
                                (#xC7A4 . #x6266)	;CJK UNIFIED IDEOGRAPH
                                (#xC7A5 . #x948E)	;CJK UNIFIED IDEOGRAPH
                                (#xC7A6 . #x94C5)	;CJK UNIFIED IDEOGRAPH
                                (#xC7A7 . #x5343)	;CJK UNIFIED IDEOGRAPH
                                (#xC7A8 . #x8FC1)	;CJK UNIFIED IDEOGRAPH
                                (#xC7A9 . #x7B7E)	;CJK UNIFIED IDEOGRAPH
                                (#xC7AA . #x4EDF)	;CJK UNIFIED IDEOGRAPH
                                (#xC7AB . #x8C26)	;CJK UNIFIED IDEOGRAPH
                                (#xC7AC . #x4E7E)	;CJK UNIFIED IDEOGRAPH
                                (#xC7AD . #x9ED4)	;CJK UNIFIED IDEOGRAPH
                                (#xC7AE . #x94B1)	;CJK UNIFIED IDEOGRAPH
                                (#xC7AF . #x94B3)	;CJK UNIFIED IDEOGRAPH
                                (#xC7B0 . #x524D)	;CJK UNIFIED IDEOGRAPH
                                (#xC7B1 . #x6F5C)	;CJK UNIFIED IDEOGRAPH
                                (#xC7B2 . #x9063)	;CJK UNIFIED IDEOGRAPH
                                (#xC7B3 . #x6D45)	;CJK UNIFIED IDEOGRAPH
                                (#xC7B4 . #x8C34)	;CJK UNIFIED IDEOGRAPH
                                (#xC7B5 . #x5811)	;CJK UNIFIED IDEOGRAPH
                                (#xC7B6 . #x5D4C)	;CJK UNIFIED IDEOGRAPH
                                (#xC7B7 . #x6B20)	;CJK UNIFIED IDEOGRAPH
                                (#xC7B8 . #x6B49)	;CJK UNIFIED IDEOGRAPH
                                (#xC7B9 . #x67AA)	;CJK UNIFIED IDEOGRAPH
                                (#xC7BA . #x545B)	;CJK UNIFIED IDEOGRAPH
                                (#xC7BB . #x8154)	;CJK UNIFIED IDEOGRAPH
                                (#xC7BC . #x7F8C)	;CJK UNIFIED IDEOGRAPH
                                (#xC7BD . #x5899)	;CJK UNIFIED IDEOGRAPH
                                (#xC7BE . #x8537)	;CJK UNIFIED IDEOGRAPH
                                (#xC7BF . #x5F3A)	;CJK UNIFIED IDEOGRAPH
                                (#xC7C0 . #x62A2)	;CJK UNIFIED IDEOGRAPH
                                (#xC7C1 . #x6A47)	;CJK UNIFIED IDEOGRAPH
                                (#xC7C2 . #x9539)	;CJK UNIFIED IDEOGRAPH
                                (#xC7C3 . #x6572)	;CJK UNIFIED IDEOGRAPH
                                (#xC7C4 . #x6084)	;CJK UNIFIED IDEOGRAPH
                                (#xC7C5 . #x6865)	;CJK UNIFIED IDEOGRAPH
                                (#xC7C6 . #x77A7)	;CJK UNIFIED IDEOGRAPH
                                (#xC7C7 . #x4E54)	;CJK UNIFIED IDEOGRAPH
                                (#xC7C8 . #x4FA8)	;CJK UNIFIED IDEOGRAPH
                                (#xC7C9 . #x5DE7)	;CJK UNIFIED IDEOGRAPH
                                (#xC7CA . #x9798)	;CJK UNIFIED IDEOGRAPH
                                (#xC7CB . #x64AC)	;CJK UNIFIED IDEOGRAPH
                                (#xC7CC . #x7FD8)	;CJK UNIFIED IDEOGRAPH
                                (#xC7CD . #x5CED)	;CJK UNIFIED IDEOGRAPH
                                (#xC7CE . #x4FCF)	;CJK UNIFIED IDEOGRAPH
                                (#xC7CF . #x7A8D)	;CJK UNIFIED IDEOGRAPH
                                (#xC7D0 . #x5207)	;CJK UNIFIED IDEOGRAPH
                                (#xC7D1 . #x8304)	;CJK UNIFIED IDEOGRAPH
                                (#xC7D2 . #x4E14)	;CJK UNIFIED IDEOGRAPH
                                (#xC7D3 . #x602F)	;CJK UNIFIED IDEOGRAPH
                                (#xC7D4 . #x7A83)	;CJK UNIFIED IDEOGRAPH
                                (#xC7D5 . #x94A6)	;CJK UNIFIED IDEOGRAPH
                                (#xC7D6 . #x4FB5)	;CJK UNIFIED IDEOGRAPH
                                (#xC7D7 . #x4EB2)	;CJK UNIFIED IDEOGRAPH
                                (#xC7D8 . #x79E6)	;CJK UNIFIED IDEOGRAPH
                                (#xC7D9 . #x7434)	;CJK UNIFIED IDEOGRAPH
                                (#xC7DA . #x52E4)	;CJK UNIFIED IDEOGRAPH
                                (#xC7DB . #x82B9)	;CJK UNIFIED IDEOGRAPH
                                (#xC7DC . #x64D2)	;CJK UNIFIED IDEOGRAPH
                                (#xC7DD . #x79BD)	;CJK UNIFIED IDEOGRAPH
                                (#xC7DE . #x5BDD)	;CJK UNIFIED IDEOGRAPH
                                (#xC7DF . #x6C81)	;CJK UNIFIED IDEOGRAPH
                                (#xC7E0 . #x9752)	;CJK UNIFIED IDEOGRAPH
                                (#xC7E1 . #x8F7B)	;CJK UNIFIED IDEOGRAPH
                                (#xC7E2 . #x6C22)	;CJK UNIFIED IDEOGRAPH
                                (#xC7E3 . #x503E)	;CJK UNIFIED IDEOGRAPH
                                (#xC7E4 . #x537F)	;CJK UNIFIED IDEOGRAPH
                                (#xC7E5 . #x6E05)	;CJK UNIFIED IDEOGRAPH
                                (#xC7E6 . #x64CE)	;CJK UNIFIED IDEOGRAPH
                                (#xC7E7 . #x6674)	;CJK UNIFIED IDEOGRAPH
                                (#xC7E8 . #x6C30)	;CJK UNIFIED IDEOGRAPH
                                (#xC7E9 . #x60C5)	;CJK UNIFIED IDEOGRAPH
                                (#xC7EA . #x9877)	;CJK UNIFIED IDEOGRAPH
                                (#xC7EB . #x8BF7)	;CJK UNIFIED IDEOGRAPH
                                (#xC7EC . #x5E86)	;CJK UNIFIED IDEOGRAPH
                                (#xC7ED . #x743C)	;CJK UNIFIED IDEOGRAPH
                                (#xC7EE . #x7A77)	;CJK UNIFIED IDEOGRAPH
                                (#xC7EF . #x79CB)	;CJK UNIFIED IDEOGRAPH
                                (#xC7F0 . #x4E18)	;CJK UNIFIED IDEOGRAPH
                                (#xC7F1 . #x90B1)	;CJK UNIFIED IDEOGRAPH
                                (#xC7F2 . #x7403)	;CJK UNIFIED IDEOGRAPH
                                (#xC7F3 . #x6C42)	;CJK UNIFIED IDEOGRAPH
                                (#xC7F4 . #x56DA)	;CJK UNIFIED IDEOGRAPH
                                (#xC7F5 . #x914B)	;CJK UNIFIED IDEOGRAPH
                                (#xC7F6 . #x6CC5)	;CJK UNIFIED IDEOGRAPH
                                (#xC7F7 . #x8D8B)	;CJK UNIFIED IDEOGRAPH
                                (#xC7F8 . #x533A)	;CJK UNIFIED IDEOGRAPH
                                (#xC7F9 . #x86C6)	;CJK UNIFIED IDEOGRAPH
                                (#xC7FA . #x66F2)	;CJK UNIFIED IDEOGRAPH
                                (#xC7FB . #x8EAF)	;CJK UNIFIED IDEOGRAPH
                                (#xC7FC . #x5C48)	;CJK UNIFIED IDEOGRAPH
                                (#xC7FD . #x9A71)	;CJK UNIFIED IDEOGRAPH
                                (#xC7FE . #x6E20)	;CJK UNIFIED IDEOGRAPH
                                (#xC840 . #x83EE)	;CJK UNIFIED IDEOGRAPH
                                (#xC841 . #x83EF)	;CJK UNIFIED IDEOGRAPH
                                (#xC842 . #x83F3)	;CJK UNIFIED IDEOGRAPH
                                (#xC843 . #x83F4)	;CJK UNIFIED IDEOGRAPH
                                (#xC844 . #x83F5)	;CJK UNIFIED IDEOGRAPH
                                (#xC845 . #x83F6)	;CJK UNIFIED IDEOGRAPH
                                (#xC846 . #x83F7)	;CJK UNIFIED IDEOGRAPH
                                (#xC847 . #x83FA)	;CJK UNIFIED IDEOGRAPH
                                (#xC848 . #x83FB)	;CJK UNIFIED IDEOGRAPH
                                (#xC849 . #x83FC)	;CJK UNIFIED IDEOGRAPH
                                (#xC84A . #x83FE)	;CJK UNIFIED IDEOGRAPH
                                (#xC84B . #x83FF)	;CJK UNIFIED IDEOGRAPH
                                (#xC84C . #x8400)	;CJK UNIFIED IDEOGRAPH
                                (#xC84D . #x8402)	;CJK UNIFIED IDEOGRAPH
                                (#xC84E . #x8405)	;CJK UNIFIED IDEOGRAPH
                                (#xC84F . #x8407)	;CJK UNIFIED IDEOGRAPH
                                (#xC850 . #x8408)	;CJK UNIFIED IDEOGRAPH
                                (#xC851 . #x8409)	;CJK UNIFIED IDEOGRAPH
                                (#xC852 . #x840A)	;CJK UNIFIED IDEOGRAPH
                                (#xC853 . #x8410)	;CJK UNIFIED IDEOGRAPH
                                (#xC854 . #x8412)	;CJK UNIFIED IDEOGRAPH
                                (#xC855 . #x8413)	;CJK UNIFIED IDEOGRAPH
                                (#xC856 . #x8414)	;CJK UNIFIED IDEOGRAPH
                                (#xC857 . #x8415)	;CJK UNIFIED IDEOGRAPH
                                (#xC858 . #x8416)	;CJK UNIFIED IDEOGRAPH
                                (#xC859 . #x8417)	;CJK UNIFIED IDEOGRAPH
                                (#xC85A . #x8419)	;CJK UNIFIED IDEOGRAPH
                                (#xC85B . #x841A)	;CJK UNIFIED IDEOGRAPH
                                (#xC85C . #x841B)	;CJK UNIFIED IDEOGRAPH
                                (#xC85D . #x841E)	;CJK UNIFIED IDEOGRAPH
                                (#xC85E . #x841F)	;CJK UNIFIED IDEOGRAPH
                                (#xC85F . #x8420)	;CJK UNIFIED IDEOGRAPH
                                (#xC860 . #x8421)	;CJK UNIFIED IDEOGRAPH
                                (#xC861 . #x8422)	;CJK UNIFIED IDEOGRAPH
                                (#xC862 . #x8423)	;CJK UNIFIED IDEOGRAPH
                                (#xC863 . #x8429)	;CJK UNIFIED IDEOGRAPH
                                (#xC864 . #x842A)	;CJK UNIFIED IDEOGRAPH
                                (#xC865 . #x842B)	;CJK UNIFIED IDEOGRAPH
                                (#xC866 . #x842C)	;CJK UNIFIED IDEOGRAPH
                                (#xC867 . #x842D)	;CJK UNIFIED IDEOGRAPH
                                (#xC868 . #x842E)	;CJK UNIFIED IDEOGRAPH
                                (#xC869 . #x842F)	;CJK UNIFIED IDEOGRAPH
                                (#xC86A . #x8430)	;CJK UNIFIED IDEOGRAPH
                                (#xC86B . #x8432)	;CJK UNIFIED IDEOGRAPH
                                (#xC86C . #x8433)	;CJK UNIFIED IDEOGRAPH
                                (#xC86D . #x8434)	;CJK UNIFIED IDEOGRAPH
                                (#xC86E . #x8435)	;CJK UNIFIED IDEOGRAPH
                                (#xC86F . #x8436)	;CJK UNIFIED IDEOGRAPH
                                (#xC870 . #x8437)	;CJK UNIFIED IDEOGRAPH
                                (#xC871 . #x8439)	;CJK UNIFIED IDEOGRAPH
                                (#xC872 . #x843A)	;CJK UNIFIED IDEOGRAPH
                                (#xC873 . #x843B)	;CJK UNIFIED IDEOGRAPH
                                (#xC874 . #x843E)	;CJK UNIFIED IDEOGRAPH
                                (#xC875 . #x843F)	;CJK UNIFIED IDEOGRAPH
                                (#xC876 . #x8440)	;CJK UNIFIED IDEOGRAPH
                                (#xC877 . #x8441)	;CJK UNIFIED IDEOGRAPH
                                (#xC878 . #x8442)	;CJK UNIFIED IDEOGRAPH
                                (#xC879 . #x8443)	;CJK UNIFIED IDEOGRAPH
                                (#xC87A . #x8444)	;CJK UNIFIED IDEOGRAPH
                                (#xC87B . #x8445)	;CJK UNIFIED IDEOGRAPH
                                (#xC87C . #x8447)	;CJK UNIFIED IDEOGRAPH
                                (#xC87D . #x8448)	;CJK UNIFIED IDEOGRAPH
                                (#xC87E . #x8449)	;CJK UNIFIED IDEOGRAPH
                                (#xC880 . #x844A)	;CJK UNIFIED IDEOGRAPH
                                (#xC881 . #x844B)	;CJK UNIFIED IDEOGRAPH
                                (#xC882 . #x844C)	;CJK UNIFIED IDEOGRAPH
                                (#xC883 . #x844D)	;CJK UNIFIED IDEOGRAPH
                                (#xC884 . #x844E)	;CJK UNIFIED IDEOGRAPH
                                (#xC885 . #x844F)	;CJK UNIFIED IDEOGRAPH
                                (#xC886 . #x8450)	;CJK UNIFIED IDEOGRAPH
                                (#xC887 . #x8452)	;CJK UNIFIED IDEOGRAPH
                                (#xC888 . #x8453)	;CJK UNIFIED IDEOGRAPH
                                (#xC889 . #x8454)	;CJK UNIFIED IDEOGRAPH
                                (#xC88A . #x8455)	;CJK UNIFIED IDEOGRAPH
                                (#xC88B . #x8456)	;CJK UNIFIED IDEOGRAPH
                                (#xC88C . #x8458)	;CJK UNIFIED IDEOGRAPH
                                (#xC88D . #x845D)	;CJK UNIFIED IDEOGRAPH
                                (#xC88E . #x845E)	;CJK UNIFIED IDEOGRAPH
                                (#xC88F . #x845F)	;CJK UNIFIED IDEOGRAPH
                                (#xC890 . #x8460)	;CJK UNIFIED IDEOGRAPH
                                (#xC891 . #x8462)	;CJK UNIFIED IDEOGRAPH
                                (#xC892 . #x8464)	;CJK UNIFIED IDEOGRAPH
                                (#xC893 . #x8465)	;CJK UNIFIED IDEOGRAPH
                                (#xC894 . #x8466)	;CJK UNIFIED IDEOGRAPH
                                (#xC895 . #x8467)	;CJK UNIFIED IDEOGRAPH
                                (#xC896 . #x8468)	;CJK UNIFIED IDEOGRAPH
                                (#xC897 . #x846A)	;CJK UNIFIED IDEOGRAPH
                                (#xC898 . #x846E)	;CJK UNIFIED IDEOGRAPH
                                (#xC899 . #x846F)	;CJK UNIFIED IDEOGRAPH
                                (#xC89A . #x8470)	;CJK UNIFIED IDEOGRAPH
                                (#xC89B . #x8472)	;CJK UNIFIED IDEOGRAPH
                                (#xC89C . #x8474)	;CJK UNIFIED IDEOGRAPH
                                (#xC89D . #x8477)	;CJK UNIFIED IDEOGRAPH
                                (#xC89E . #x8479)	;CJK UNIFIED IDEOGRAPH
                                (#xC89F . #x847B)	;CJK UNIFIED IDEOGRAPH
                                (#xC8A0 . #x847C)	;CJK UNIFIED IDEOGRAPH
                                (#xC8A1 . #x53D6)	;CJK UNIFIED IDEOGRAPH
                                (#xC8A2 . #x5A36)	;CJK UNIFIED IDEOGRAPH
                                (#xC8A3 . #x9F8B)	;CJK UNIFIED IDEOGRAPH
                                (#xC8A4 . #x8DA3)	;CJK UNIFIED IDEOGRAPH
                                (#xC8A5 . #x53BB)	;CJK UNIFIED IDEOGRAPH
                                (#xC8A6 . #x5708)	;CJK UNIFIED IDEOGRAPH
                                (#xC8A7 . #x98A7)	;CJK UNIFIED IDEOGRAPH
                                (#xC8A8 . #x6743)	;CJK UNIFIED IDEOGRAPH
                                (#xC8A9 . #x919B)	;CJK UNIFIED IDEOGRAPH
                                (#xC8AA . #x6CC9)	;CJK UNIFIED IDEOGRAPH
                                (#xC8AB . #x5168)	;CJK UNIFIED IDEOGRAPH
                                (#xC8AC . #x75CA)	;CJK UNIFIED IDEOGRAPH
                                (#xC8AD . #x62F3)	;CJK UNIFIED IDEOGRAPH
                                (#xC8AE . #x72AC)	;CJK UNIFIED IDEOGRAPH
                                (#xC8AF . #x5238)	;CJK UNIFIED IDEOGRAPH
                                (#xC8B0 . #x529D)	;CJK UNIFIED IDEOGRAPH
                                (#xC8B1 . #x7F3A)	;CJK UNIFIED IDEOGRAPH
                                (#xC8B2 . #x7094)	;CJK UNIFIED IDEOGRAPH
                                (#xC8B3 . #x7638)	;CJK UNIFIED IDEOGRAPH
                                (#xC8B4 . #x5374)	;CJK UNIFIED IDEOGRAPH
                                (#xC8B5 . #x9E4A)	;CJK UNIFIED IDEOGRAPH
                                (#xC8B6 . #x69B7)	;CJK UNIFIED IDEOGRAPH
                                (#xC8B7 . #x786E)	;CJK UNIFIED IDEOGRAPH
                                (#xC8B8 . #x96C0)	;CJK UNIFIED IDEOGRAPH
                                (#xC8B9 . #x88D9)	;CJK UNIFIED IDEOGRAPH
                                (#xC8BA . #x7FA4)	;CJK UNIFIED IDEOGRAPH
                                (#xC8BB . #x7136)	;CJK UNIFIED IDEOGRAPH
                                (#xC8BC . #x71C3)	;CJK UNIFIED IDEOGRAPH
                                (#xC8BD . #x5189)	;CJK UNIFIED IDEOGRAPH
                                (#xC8BE . #x67D3)	;CJK UNIFIED IDEOGRAPH
                                (#xC8BF . #x74E4)	;CJK UNIFIED IDEOGRAPH
                                (#xC8C0 . #x58E4)	;CJK UNIFIED IDEOGRAPH
                                (#xC8C1 . #x6518)	;CJK UNIFIED IDEOGRAPH
                                (#xC8C2 . #x56B7)	;CJK UNIFIED IDEOGRAPH
                                (#xC8C3 . #x8BA9)	;CJK UNIFIED IDEOGRAPH
                                (#xC8C4 . #x9976)	;CJK UNIFIED IDEOGRAPH
                                (#xC8C5 . #x6270)	;CJK UNIFIED IDEOGRAPH
                                (#xC8C6 . #x7ED5)	;CJK UNIFIED IDEOGRAPH
                                (#xC8C7 . #x60F9)	;CJK UNIFIED IDEOGRAPH
                                (#xC8C8 . #x70ED)	;CJK UNIFIED IDEOGRAPH
                                (#xC8C9 . #x58EC)	;CJK UNIFIED IDEOGRAPH
                                (#xC8CA . #x4EC1)	;CJK UNIFIED IDEOGRAPH
                                (#xC8CB . #x4EBA)	;CJK UNIFIED IDEOGRAPH
                                (#xC8CC . #x5FCD)	;CJK UNIFIED IDEOGRAPH
                                (#xC8CD . #x97E7)	;CJK UNIFIED IDEOGRAPH
                                (#xC8CE . #x4EFB)	;CJK UNIFIED IDEOGRAPH
                                (#xC8CF . #x8BA4)	;CJK UNIFIED IDEOGRAPH
                                (#xC8D0 . #x5203)	;CJK UNIFIED IDEOGRAPH
                                (#xC8D1 . #x598A)	;CJK UNIFIED IDEOGRAPH
                                (#xC8D2 . #x7EAB)	;CJK UNIFIED IDEOGRAPH
                                (#xC8D3 . #x6254)	;CJK UNIFIED IDEOGRAPH
                                (#xC8D4 . #x4ECD)	;CJK UNIFIED IDEOGRAPH
                                (#xC8D5 . #x65E5)	;CJK UNIFIED IDEOGRAPH
                                (#xC8D6 . #x620E)	;CJK UNIFIED IDEOGRAPH
                                (#xC8D7 . #x8338)	;CJK UNIFIED IDEOGRAPH
                                (#xC8D8 . #x84C9)	;CJK UNIFIED IDEOGRAPH
                                (#xC8D9 . #x8363)	;CJK UNIFIED IDEOGRAPH
                                (#xC8DA . #x878D)	;CJK UNIFIED IDEOGRAPH
                                (#xC8DB . #x7194)	;CJK UNIFIED IDEOGRAPH
                                (#xC8DC . #x6EB6)	;CJK UNIFIED IDEOGRAPH
                                (#xC8DD . #x5BB9)	;CJK UNIFIED IDEOGRAPH
                                (#xC8DE . #x7ED2)	;CJK UNIFIED IDEOGRAPH
                                (#xC8DF . #x5197)	;CJK UNIFIED IDEOGRAPH
                                (#xC8E0 . #x63C9)	;CJK UNIFIED IDEOGRAPH
                                (#xC8E1 . #x67D4)	;CJK UNIFIED IDEOGRAPH
                                (#xC8E2 . #x8089)	;CJK UNIFIED IDEOGRAPH
                                (#xC8E3 . #x8339)	;CJK UNIFIED IDEOGRAPH
                                (#xC8E4 . #x8815)	;CJK UNIFIED IDEOGRAPH
                                (#xC8E5 . #x5112)	;CJK UNIFIED IDEOGRAPH
                                (#xC8E6 . #x5B7A)	;CJK UNIFIED IDEOGRAPH
                                (#xC8E7 . #x5982)	;CJK UNIFIED IDEOGRAPH
                                (#xC8E8 . #x8FB1)	;CJK UNIFIED IDEOGRAPH
                                (#xC8E9 . #x4E73)	;CJK UNIFIED IDEOGRAPH
                                (#xC8EA . #x6C5D)	;CJK UNIFIED IDEOGRAPH
                                (#xC8EB . #x5165)	;CJK UNIFIED IDEOGRAPH
                                (#xC8EC . #x8925)	;CJK UNIFIED IDEOGRAPH
                                (#xC8ED . #x8F6F)	;CJK UNIFIED IDEOGRAPH
                                (#xC8EE . #x962E)	;CJK UNIFIED IDEOGRAPH
                                (#xC8EF . #x854A)	;CJK UNIFIED IDEOGRAPH
                                (#xC8F0 . #x745E)	;CJK UNIFIED IDEOGRAPH
                                (#xC8F1 . #x9510)	;CJK UNIFIED IDEOGRAPH
                                (#xC8F2 . #x95F0)	;CJK UNIFIED IDEOGRAPH
                                (#xC8F3 . #x6DA6)	;CJK UNIFIED IDEOGRAPH
                                (#xC8F4 . #x82E5)	;CJK UNIFIED IDEOGRAPH
                                (#xC8F5 . #x5F31)	;CJK UNIFIED IDEOGRAPH
                                (#xC8F6 . #x6492)	;CJK UNIFIED IDEOGRAPH
                                (#xC8F7 . #x6D12)	;CJK UNIFIED IDEOGRAPH
                                (#xC8F8 . #x8428)	;CJK UNIFIED IDEOGRAPH
                                (#xC8F9 . #x816E)	;CJK UNIFIED IDEOGRAPH
                                (#xC8FA . #x9CC3)	;CJK UNIFIED IDEOGRAPH
                                (#xC8FB . #x585E)	;CJK UNIFIED IDEOGRAPH
                                (#xC8FC . #x8D5B)	;CJK UNIFIED IDEOGRAPH
                                (#xC8FD . #x4E09)	;CJK UNIFIED IDEOGRAPH
                                (#xC8FE . #x53C1)	;CJK UNIFIED IDEOGRAPH
                                (#xC940 . #x847D)	;CJK UNIFIED IDEOGRAPH
                                (#xC941 . #x847E)	;CJK UNIFIED IDEOGRAPH
                                (#xC942 . #x847F)	;CJK UNIFIED IDEOGRAPH
                                (#xC943 . #x8480)	;CJK UNIFIED IDEOGRAPH
                                (#xC944 . #x8481)	;CJK UNIFIED IDEOGRAPH
                                (#xC945 . #x8483)	;CJK UNIFIED IDEOGRAPH
                                (#xC946 . #x8484)	;CJK UNIFIED IDEOGRAPH
                                (#xC947 . #x8485)	;CJK UNIFIED IDEOGRAPH
                                (#xC948 . #x8486)	;CJK UNIFIED IDEOGRAPH
                                (#xC949 . #x848A)	;CJK UNIFIED IDEOGRAPH
                                (#xC94A . #x848D)	;CJK UNIFIED IDEOGRAPH
                                (#xC94B . #x848F)	;CJK UNIFIED IDEOGRAPH
                                (#xC94C . #x8490)	;CJK UNIFIED IDEOGRAPH
                                (#xC94D . #x8491)	;CJK UNIFIED IDEOGRAPH
                                (#xC94E . #x8492)	;CJK UNIFIED IDEOGRAPH
                                (#xC94F . #x8493)	;CJK UNIFIED IDEOGRAPH
                                (#xC950 . #x8494)	;CJK UNIFIED IDEOGRAPH
                                (#xC951 . #x8495)	;CJK UNIFIED IDEOGRAPH
                                (#xC952 . #x8496)	;CJK UNIFIED IDEOGRAPH
                                (#xC953 . #x8498)	;CJK UNIFIED IDEOGRAPH
                                (#xC954 . #x849A)	;CJK UNIFIED IDEOGRAPH
                                (#xC955 . #x849B)	;CJK UNIFIED IDEOGRAPH
                                (#xC956 . #x849D)	;CJK UNIFIED IDEOGRAPH
                                (#xC957 . #x849E)	;CJK UNIFIED IDEOGRAPH
                                (#xC958 . #x849F)	;CJK UNIFIED IDEOGRAPH
                                (#xC959 . #x84A0)	;CJK UNIFIED IDEOGRAPH
                                (#xC95A . #x84A2)	;CJK UNIFIED IDEOGRAPH
                                (#xC95B . #x84A3)	;CJK UNIFIED IDEOGRAPH
                                (#xC95C . #x84A4)	;CJK UNIFIED IDEOGRAPH
                                (#xC95D . #x84A5)	;CJK UNIFIED IDEOGRAPH
                                (#xC95E . #x84A6)	;CJK UNIFIED IDEOGRAPH
                                (#xC95F . #x84A7)	;CJK UNIFIED IDEOGRAPH
                                (#xC960 . #x84A8)	;CJK UNIFIED IDEOGRAPH
                                (#xC961 . #x84A9)	;CJK UNIFIED IDEOGRAPH
                                (#xC962 . #x84AA)	;CJK UNIFIED IDEOGRAPH
                                (#xC963 . #x84AB)	;CJK UNIFIED IDEOGRAPH
                                (#xC964 . #x84AC)	;CJK UNIFIED IDEOGRAPH
                                (#xC965 . #x84AD)	;CJK UNIFIED IDEOGRAPH
                                (#xC966 . #x84AE)	;CJK UNIFIED IDEOGRAPH
                                (#xC967 . #x84B0)	;CJK UNIFIED IDEOGRAPH
                                (#xC968 . #x84B1)	;CJK UNIFIED IDEOGRAPH
                                (#xC969 . #x84B3)	;CJK UNIFIED IDEOGRAPH
                                (#xC96A . #x84B5)	;CJK UNIFIED IDEOGRAPH
                                (#xC96B . #x84B6)	;CJK UNIFIED IDEOGRAPH
                                (#xC96C . #x84B7)	;CJK UNIFIED IDEOGRAPH
                                (#xC96D . #x84BB)	;CJK UNIFIED IDEOGRAPH
                                (#xC96E . #x84BC)	;CJK UNIFIED IDEOGRAPH
                                (#xC96F . #x84BE)	;CJK UNIFIED IDEOGRAPH
                                (#xC970 . #x84C0)	;CJK UNIFIED IDEOGRAPH
                                (#xC971 . #x84C2)	;CJK UNIFIED IDEOGRAPH
                                (#xC972 . #x84C3)	;CJK UNIFIED IDEOGRAPH
                                (#xC973 . #x84C5)	;CJK UNIFIED IDEOGRAPH
                                (#xC974 . #x84C6)	;CJK UNIFIED IDEOGRAPH
                                (#xC975 . #x84C7)	;CJK UNIFIED IDEOGRAPH
                                (#xC976 . #x84C8)	;CJK UNIFIED IDEOGRAPH
                                (#xC977 . #x84CB)	;CJK UNIFIED IDEOGRAPH
                                (#xC978 . #x84CC)	;CJK UNIFIED IDEOGRAPH
                                (#xC979 . #x84CE)	;CJK UNIFIED IDEOGRAPH
                                (#xC97A . #x84CF)	;CJK UNIFIED IDEOGRAPH
                                (#xC97B . #x84D2)	;CJK UNIFIED IDEOGRAPH
                                (#xC97C . #x84D4)	;CJK UNIFIED IDEOGRAPH
                                (#xC97D . #x84D5)	;CJK UNIFIED IDEOGRAPH
                                (#xC97E . #x84D7)	;CJK UNIFIED IDEOGRAPH
                                (#xC980 . #x84D8)	;CJK UNIFIED IDEOGRAPH
                                (#xC981 . #x84D9)	;CJK UNIFIED IDEOGRAPH
                                (#xC982 . #x84DA)	;CJK UNIFIED IDEOGRAPH
                                (#xC983 . #x84DB)	;CJK UNIFIED IDEOGRAPH
                                (#xC984 . #x84DC)	;CJK UNIFIED IDEOGRAPH
                                (#xC985 . #x84DE)	;CJK UNIFIED IDEOGRAPH
                                (#xC986 . #x84E1)	;CJK UNIFIED IDEOGRAPH
                                (#xC987 . #x84E2)	;CJK UNIFIED IDEOGRAPH
                                (#xC988 . #x84E4)	;CJK UNIFIED IDEOGRAPH
                                (#xC989 . #x84E7)	;CJK UNIFIED IDEOGRAPH
                                (#xC98A . #x84E8)	;CJK UNIFIED IDEOGRAPH
                                (#xC98B . #x84E9)	;CJK UNIFIED IDEOGRAPH
                                (#xC98C . #x84EA)	;CJK UNIFIED IDEOGRAPH
                                (#xC98D . #x84EB)	;CJK UNIFIED IDEOGRAPH
                                (#xC98E . #x84ED)	;CJK UNIFIED IDEOGRAPH
                                (#xC98F . #x84EE)	;CJK UNIFIED IDEOGRAPH
                                (#xC990 . #x84EF)	;CJK UNIFIED IDEOGRAPH
                                (#xC991 . #x84F1)	;CJK UNIFIED IDEOGRAPH
                                (#xC992 . #x84F2)	;CJK UNIFIED IDEOGRAPH
                                (#xC993 . #x84F3)	;CJK UNIFIED IDEOGRAPH
                                (#xC994 . #x84F4)	;CJK UNIFIED IDEOGRAPH
                                (#xC995 . #x84F5)	;CJK UNIFIED IDEOGRAPH
                                (#xC996 . #x84F6)	;CJK UNIFIED IDEOGRAPH
                                (#xC997 . #x84F7)	;CJK UNIFIED IDEOGRAPH
                                (#xC998 . #x84F8)	;CJK UNIFIED IDEOGRAPH
                                (#xC999 . #x84F9)	;CJK UNIFIED IDEOGRAPH
                                (#xC99A . #x84FA)	;CJK UNIFIED IDEOGRAPH
                                (#xC99B . #x84FB)	;CJK UNIFIED IDEOGRAPH
                                (#xC99C . #x84FD)	;CJK UNIFIED IDEOGRAPH
                                (#xC99D . #x84FE)	;CJK UNIFIED IDEOGRAPH
                                (#xC99E . #x8500)	;CJK UNIFIED IDEOGRAPH
                                (#xC99F . #x8501)	;CJK UNIFIED IDEOGRAPH
                                (#xC9A0 . #x8502)	;CJK UNIFIED IDEOGRAPH
                                (#xC9A1 . #x4F1E)	;CJK UNIFIED IDEOGRAPH
                                (#xC9A2 . #x6563)	;CJK UNIFIED IDEOGRAPH
                                (#xC9A3 . #x6851)	;CJK UNIFIED IDEOGRAPH
                                (#xC9A4 . #x55D3)	;CJK UNIFIED IDEOGRAPH
                                (#xC9A5 . #x4E27)	;CJK UNIFIED IDEOGRAPH
                                (#xC9A6 . #x6414)	;CJK UNIFIED IDEOGRAPH
                                (#xC9A7 . #x9A9A)	;CJK UNIFIED IDEOGRAPH
                                (#xC9A8 . #x626B)	;CJK UNIFIED IDEOGRAPH
                                (#xC9A9 . #x5AC2)	;CJK UNIFIED IDEOGRAPH
                                (#xC9AA . #x745F)	;CJK UNIFIED IDEOGRAPH
                                (#xC9AB . #x8272)	;CJK UNIFIED IDEOGRAPH
                                (#xC9AC . #x6DA9)	;CJK UNIFIED IDEOGRAPH
                                (#xC9AD . #x68EE)	;CJK UNIFIED IDEOGRAPH
                                (#xC9AE . #x50E7)	;CJK UNIFIED IDEOGRAPH
                                (#xC9AF . #x838E)	;CJK UNIFIED IDEOGRAPH
                                (#xC9B0 . #x7802)	;CJK UNIFIED IDEOGRAPH
                                (#xC9B1 . #x6740)	;CJK UNIFIED IDEOGRAPH
                                (#xC9B2 . #x5239)	;CJK UNIFIED IDEOGRAPH
                                (#xC9B3 . #x6C99)	;CJK UNIFIED IDEOGRAPH
                                (#xC9B4 . #x7EB1)	;CJK UNIFIED IDEOGRAPH
                                (#xC9B5 . #x50BB)	;CJK UNIFIED IDEOGRAPH
                                (#xC9B6 . #x5565)	;CJK UNIFIED IDEOGRAPH
                                (#xC9B7 . #x715E)	;CJK UNIFIED IDEOGRAPH
                                (#xC9B8 . #x7B5B)	;CJK UNIFIED IDEOGRAPH
                                (#xC9B9 . #x6652)	;CJK UNIFIED IDEOGRAPH
                                (#xC9BA . #x73CA)	;CJK UNIFIED IDEOGRAPH
                                (#xC9BB . #x82EB)	;CJK UNIFIED IDEOGRAPH
                                (#xC9BC . #x6749)	;CJK UNIFIED IDEOGRAPH
                                (#xC9BD . #x5C71)	;CJK UNIFIED IDEOGRAPH
                                (#xC9BE . #x5220)	;CJK UNIFIED IDEOGRAPH
                                (#xC9BF . #x717D)	;CJK UNIFIED IDEOGRAPH
                                (#xC9C0 . #x886B)	;CJK UNIFIED IDEOGRAPH
                                (#xC9C1 . #x95EA)	;CJK UNIFIED IDEOGRAPH
                                (#xC9C2 . #x9655)	;CJK UNIFIED IDEOGRAPH
                                (#xC9C3 . #x64C5)	;CJK UNIFIED IDEOGRAPH
                                (#xC9C4 . #x8D61)	;CJK UNIFIED IDEOGRAPH
                                (#xC9C5 . #x81B3)	;CJK UNIFIED IDEOGRAPH
                                (#xC9C6 . #x5584)	;CJK UNIFIED IDEOGRAPH
                                (#xC9C7 . #x6C55)	;CJK UNIFIED IDEOGRAPH
                                (#xC9C8 . #x6247)	;CJK UNIFIED IDEOGRAPH
                                (#xC9C9 . #x7F2E)	;CJK UNIFIED IDEOGRAPH
                                (#xC9CA . #x5892)	;CJK UNIFIED IDEOGRAPH
                                (#xC9CB . #x4F24)	;CJK UNIFIED IDEOGRAPH
                                (#xC9CC . #x5546)	;CJK UNIFIED IDEOGRAPH
                                (#xC9CD . #x8D4F)	;CJK UNIFIED IDEOGRAPH
                                (#xC9CE . #x664C)	;CJK UNIFIED IDEOGRAPH
                                (#xC9CF . #x4E0A)	;CJK UNIFIED IDEOGRAPH
                                (#xC9D0 . #x5C1A)	;CJK UNIFIED IDEOGRAPH
                                (#xC9D1 . #x88F3)	;CJK UNIFIED IDEOGRAPH
                                (#xC9D2 . #x68A2)	;CJK UNIFIED IDEOGRAPH
                                (#xC9D3 . #x634E)	;CJK UNIFIED IDEOGRAPH
                                (#xC9D4 . #x7A0D)	;CJK UNIFIED IDEOGRAPH
                                (#xC9D5 . #x70E7)	;CJK UNIFIED IDEOGRAPH
                                (#xC9D6 . #x828D)	;CJK UNIFIED IDEOGRAPH
                                (#xC9D7 . #x52FA)	;CJK UNIFIED IDEOGRAPH
                                (#xC9D8 . #x97F6)	;CJK UNIFIED IDEOGRAPH
                                (#xC9D9 . #x5C11)	;CJK UNIFIED IDEOGRAPH
                                (#xC9DA . #x54E8)	;CJK UNIFIED IDEOGRAPH
                                (#xC9DB . #x90B5)	;CJK UNIFIED IDEOGRAPH
                                (#xC9DC . #x7ECD)	;CJK UNIFIED IDEOGRAPH
                                (#xC9DD . #x5962)	;CJK UNIFIED IDEOGRAPH
                                (#xC9DE . #x8D4A)	;CJK UNIFIED IDEOGRAPH
                                (#xC9DF . #x86C7)	;CJK UNIFIED IDEOGRAPH
                                (#xC9E0 . #x820C)	;CJK UNIFIED IDEOGRAPH
                                (#xC9E1 . #x820D)	;CJK UNIFIED IDEOGRAPH
                                (#xC9E2 . #x8D66)	;CJK UNIFIED IDEOGRAPH
                                (#xC9E3 . #x6444)	;CJK UNIFIED IDEOGRAPH
                                (#xC9E4 . #x5C04)	;CJK UNIFIED IDEOGRAPH
                                (#xC9E5 . #x6151)	;CJK UNIFIED IDEOGRAPH
                                (#xC9E6 . #x6D89)	;CJK UNIFIED IDEOGRAPH
                                (#xC9E7 . #x793E)	;CJK UNIFIED IDEOGRAPH
                                (#xC9E8 . #x8BBE)	;CJK UNIFIED IDEOGRAPH
                                (#xC9E9 . #x7837)	;CJK UNIFIED IDEOGRAPH
                                (#xC9EA . #x7533)	;CJK UNIFIED IDEOGRAPH
                                (#xC9EB . #x547B)	;CJK UNIFIED IDEOGRAPH
                                (#xC9EC . #x4F38)	;CJK UNIFIED IDEOGRAPH
                                (#xC9ED . #x8EAB)	;CJK UNIFIED IDEOGRAPH
                                (#xC9EE . #x6DF1)	;CJK UNIFIED IDEOGRAPH
                                (#xC9EF . #x5A20)	;CJK UNIFIED IDEOGRAPH
                                (#xC9F0 . #x7EC5)	;CJK UNIFIED IDEOGRAPH
                                (#xC9F1 . #x795E)	;CJK UNIFIED IDEOGRAPH
                                (#xC9F2 . #x6C88)	;CJK UNIFIED IDEOGRAPH
                                (#xC9F3 . #x5BA1)	;CJK UNIFIED IDEOGRAPH
                                (#xC9F4 . #x5A76)	;CJK UNIFIED IDEOGRAPH
                                (#xC9F5 . #x751A)	;CJK UNIFIED IDEOGRAPH
                                (#xC9F6 . #x80BE)	;CJK UNIFIED IDEOGRAPH
                                (#xC9F7 . #x614E)	;CJK UNIFIED IDEOGRAPH
                                (#xC9F8 . #x6E17)	;CJK UNIFIED IDEOGRAPH
                                (#xC9F9 . #x58F0)	;CJK UNIFIED IDEOGRAPH
                                (#xC9FA . #x751F)	;CJK UNIFIED IDEOGRAPH
                                (#xC9FB . #x7525)	;CJK UNIFIED IDEOGRAPH
                                (#xC9FC . #x7272)	;CJK UNIFIED IDEOGRAPH
                                (#xC9FD . #x5347)	;CJK UNIFIED IDEOGRAPH
                                (#xC9FE . #x7EF3)	;CJK UNIFIED IDEOGRAPH
                                (#xCA40 . #x8503)	;CJK UNIFIED IDEOGRAPH
                                (#xCA41 . #x8504)	;CJK UNIFIED IDEOGRAPH
                                (#xCA42 . #x8505)	;CJK UNIFIED IDEOGRAPH
                                (#xCA43 . #x8506)	;CJK UNIFIED IDEOGRAPH
                                (#xCA44 . #x8507)	;CJK UNIFIED IDEOGRAPH
                                (#xCA45 . #x8508)	;CJK UNIFIED IDEOGRAPH
                                (#xCA46 . #x8509)	;CJK UNIFIED IDEOGRAPH
                                (#xCA47 . #x850A)	;CJK UNIFIED IDEOGRAPH
                                (#xCA48 . #x850B)	;CJK UNIFIED IDEOGRAPH
                                (#xCA49 . #x850D)	;CJK UNIFIED IDEOGRAPH
                                (#xCA4A . #x850E)	;CJK UNIFIED IDEOGRAPH
                                (#xCA4B . #x850F)	;CJK UNIFIED IDEOGRAPH
                                (#xCA4C . #x8510)	;CJK UNIFIED IDEOGRAPH
                                (#xCA4D . #x8512)	;CJK UNIFIED IDEOGRAPH
                                (#xCA4E . #x8514)	;CJK UNIFIED IDEOGRAPH
                                (#xCA4F . #x8515)	;CJK UNIFIED IDEOGRAPH
                                (#xCA50 . #x8516)	;CJK UNIFIED IDEOGRAPH
                                (#xCA51 . #x8518)	;CJK UNIFIED IDEOGRAPH
                                (#xCA52 . #x8519)	;CJK UNIFIED IDEOGRAPH
                                (#xCA53 . #x851B)	;CJK UNIFIED IDEOGRAPH
                                (#xCA54 . #x851C)	;CJK UNIFIED IDEOGRAPH
                                (#xCA55 . #x851D)	;CJK UNIFIED IDEOGRAPH
                                (#xCA56 . #x851E)	;CJK UNIFIED IDEOGRAPH
                                (#xCA57 . #x8520)	;CJK UNIFIED IDEOGRAPH
                                (#xCA58 . #x8522)	;CJK UNIFIED IDEOGRAPH
                                (#xCA59 . #x8523)	;CJK UNIFIED IDEOGRAPH
                                (#xCA5A . #x8524)	;CJK UNIFIED IDEOGRAPH
                                (#xCA5B . #x8525)	;CJK UNIFIED IDEOGRAPH
                                (#xCA5C . #x8526)	;CJK UNIFIED IDEOGRAPH
                                (#xCA5D . #x8527)	;CJK UNIFIED IDEOGRAPH
                                (#xCA5E . #x8528)	;CJK UNIFIED IDEOGRAPH
                                (#xCA5F . #x8529)	;CJK UNIFIED IDEOGRAPH
                                (#xCA60 . #x852A)	;CJK UNIFIED IDEOGRAPH
                                (#xCA61 . #x852D)	;CJK UNIFIED IDEOGRAPH
                                (#xCA62 . #x852E)	;CJK UNIFIED IDEOGRAPH
                                (#xCA63 . #x852F)	;CJK UNIFIED IDEOGRAPH
                                (#xCA64 . #x8530)	;CJK UNIFIED IDEOGRAPH
                                (#xCA65 . #x8531)	;CJK UNIFIED IDEOGRAPH
                                (#xCA66 . #x8532)	;CJK UNIFIED IDEOGRAPH
                                (#xCA67 . #x8533)	;CJK UNIFIED IDEOGRAPH
                                (#xCA68 . #x8534)	;CJK UNIFIED IDEOGRAPH
                                (#xCA69 . #x8535)	;CJK UNIFIED IDEOGRAPH
                                (#xCA6A . #x8536)	;CJK UNIFIED IDEOGRAPH
                                (#xCA6B . #x853E)	;CJK UNIFIED IDEOGRAPH
                                (#xCA6C . #x853F)	;CJK UNIFIED IDEOGRAPH
                                (#xCA6D . #x8540)	;CJK UNIFIED IDEOGRAPH
                                (#xCA6E . #x8541)	;CJK UNIFIED IDEOGRAPH
                                (#xCA6F . #x8542)	;CJK UNIFIED IDEOGRAPH
                                (#xCA70 . #x8544)	;CJK UNIFIED IDEOGRAPH
                                (#xCA71 . #x8545)	;CJK UNIFIED IDEOGRAPH
                                (#xCA72 . #x8546)	;CJK UNIFIED IDEOGRAPH
                                (#xCA73 . #x8547)	;CJK UNIFIED IDEOGRAPH
                                (#xCA74 . #x854B)	;CJK UNIFIED IDEOGRAPH
                                (#xCA75 . #x854C)	;CJK UNIFIED IDEOGRAPH
                                (#xCA76 . #x854D)	;CJK UNIFIED IDEOGRAPH
                                (#xCA77 . #x854E)	;CJK UNIFIED IDEOGRAPH
                                (#xCA78 . #x854F)	;CJK UNIFIED IDEOGRAPH
                                (#xCA79 . #x8550)	;CJK UNIFIED IDEOGRAPH
                                (#xCA7A . #x8551)	;CJK UNIFIED IDEOGRAPH
                                (#xCA7B . #x8552)	;CJK UNIFIED IDEOGRAPH
                                (#xCA7C . #x8553)	;CJK UNIFIED IDEOGRAPH
                                (#xCA7D . #x8554)	;CJK UNIFIED IDEOGRAPH
                                (#xCA7E . #x8555)	;CJK UNIFIED IDEOGRAPH
                                (#xCA80 . #x8557)	;CJK UNIFIED IDEOGRAPH
                                (#xCA81 . #x8558)	;CJK UNIFIED IDEOGRAPH
                                (#xCA82 . #x855A)	;CJK UNIFIED IDEOGRAPH
                                (#xCA83 . #x855B)	;CJK UNIFIED IDEOGRAPH
                                (#xCA84 . #x855C)	;CJK UNIFIED IDEOGRAPH
                                (#xCA85 . #x855D)	;CJK UNIFIED IDEOGRAPH
                                (#xCA86 . #x855F)	;CJK UNIFIED IDEOGRAPH
                                (#xCA87 . #x8560)	;CJK UNIFIED IDEOGRAPH
                                (#xCA88 . #x8561)	;CJK UNIFIED IDEOGRAPH
                                (#xCA89 . #x8562)	;CJK UNIFIED IDEOGRAPH
                                (#xCA8A . #x8563)	;CJK UNIFIED IDEOGRAPH
                                (#xCA8B . #x8565)	;CJK UNIFIED IDEOGRAPH
                                (#xCA8C . #x8566)	;CJK UNIFIED IDEOGRAPH
                                (#xCA8D . #x8567)	;CJK UNIFIED IDEOGRAPH
                                (#xCA8E . #x8569)	;CJK UNIFIED IDEOGRAPH
                                (#xCA8F . #x856A)	;CJK UNIFIED IDEOGRAPH
                                (#xCA90 . #x856B)	;CJK UNIFIED IDEOGRAPH
                                (#xCA91 . #x856C)	;CJK UNIFIED IDEOGRAPH
                                (#xCA92 . #x856D)	;CJK UNIFIED IDEOGRAPH
                                (#xCA93 . #x856E)	;CJK UNIFIED IDEOGRAPH
                                (#xCA94 . #x856F)	;CJK UNIFIED IDEOGRAPH
                                (#xCA95 . #x8570)	;CJK UNIFIED IDEOGRAPH
                                (#xCA96 . #x8571)	;CJK UNIFIED IDEOGRAPH
                                (#xCA97 . #x8573)	;CJK UNIFIED IDEOGRAPH
                                (#xCA98 . #x8575)	;CJK UNIFIED IDEOGRAPH
                                (#xCA99 . #x8576)	;CJK UNIFIED IDEOGRAPH
                                (#xCA9A . #x8577)	;CJK UNIFIED IDEOGRAPH
                                (#xCA9B . #x8578)	;CJK UNIFIED IDEOGRAPH
                                (#xCA9C . #x857C)	;CJK UNIFIED IDEOGRAPH
                                (#xCA9D . #x857D)	;CJK UNIFIED IDEOGRAPH
                                (#xCA9E . #x857F)	;CJK UNIFIED IDEOGRAPH
                                (#xCA9F . #x8580)	;CJK UNIFIED IDEOGRAPH
                                (#xCAA0 . #x8581)	;CJK UNIFIED IDEOGRAPH
                                (#xCAA1 . #x7701)	;CJK UNIFIED IDEOGRAPH
                                (#xCAA2 . #x76DB)	;CJK UNIFIED IDEOGRAPH
                                (#xCAA3 . #x5269)	;CJK UNIFIED IDEOGRAPH
                                (#xCAA4 . #x80DC)	;CJK UNIFIED IDEOGRAPH
                                (#xCAA5 . #x5723)	;CJK UNIFIED IDEOGRAPH
                                (#xCAA6 . #x5E08)	;CJK UNIFIED IDEOGRAPH
                                (#xCAA7 . #x5931)	;CJK UNIFIED IDEOGRAPH
                                (#xCAA8 . #x72EE)	;CJK UNIFIED IDEOGRAPH
                                (#xCAA9 . #x65BD)	;CJK UNIFIED IDEOGRAPH
                                (#xCAAA . #x6E7F)	;CJK UNIFIED IDEOGRAPH
                                (#xCAAB . #x8BD7)	;CJK UNIFIED IDEOGRAPH
                                (#xCAAC . #x5C38)	;CJK UNIFIED IDEOGRAPH
                                (#xCAAD . #x8671)	;CJK UNIFIED IDEOGRAPH
                                (#xCAAE . #x5341)	;CJK UNIFIED IDEOGRAPH
                                (#xCAAF . #x77F3)	;CJK UNIFIED IDEOGRAPH
                                (#xCAB0 . #x62FE)	;CJK UNIFIED IDEOGRAPH
                                (#xCAB1 . #x65F6)	;CJK UNIFIED IDEOGRAPH
                                (#xCAB2 . #x4EC0)	;CJK UNIFIED IDEOGRAPH
                                (#xCAB3 . #x98DF)	;CJK UNIFIED IDEOGRAPH
                                (#xCAB4 . #x8680)	;CJK UNIFIED IDEOGRAPH
                                (#xCAB5 . #x5B9E)	;CJK UNIFIED IDEOGRAPH
                                (#xCAB6 . #x8BC6)	;CJK UNIFIED IDEOGRAPH
                                (#xCAB7 . #x53F2)	;CJK UNIFIED IDEOGRAPH
                                (#xCAB8 . #x77E2)	;CJK UNIFIED IDEOGRAPH
                                (#xCAB9 . #x4F7F)	;CJK UNIFIED IDEOGRAPH
                                (#xCABA . #x5C4E)	;CJK UNIFIED IDEOGRAPH
                                (#xCABB . #x9A76)	;CJK UNIFIED IDEOGRAPH
                                (#xCABC . #x59CB)	;CJK UNIFIED IDEOGRAPH
                                (#xCABD . #x5F0F)	;CJK UNIFIED IDEOGRAPH
                                (#xCABE . #x793A)	;CJK UNIFIED IDEOGRAPH
                                (#xCABF . #x58EB)	;CJK UNIFIED IDEOGRAPH
                                (#xCAC0 . #x4E16)	;CJK UNIFIED IDEOGRAPH
                                (#xCAC1 . #x67FF)	;CJK UNIFIED IDEOGRAPH
                                (#xCAC2 . #x4E8B)	;CJK UNIFIED IDEOGRAPH
                                (#xCAC3 . #x62ED)	;CJK UNIFIED IDEOGRAPH
                                (#xCAC4 . #x8A93)	;CJK UNIFIED IDEOGRAPH
                                (#xCAC5 . #x901D)	;CJK UNIFIED IDEOGRAPH
                                (#xCAC6 . #x52BF)	;CJK UNIFIED IDEOGRAPH
                                (#xCAC7 . #x662F)	;CJK UNIFIED IDEOGRAPH
                                (#xCAC8 . #x55DC)	;CJK UNIFIED IDEOGRAPH
                                (#xCAC9 . #x566C)	;CJK UNIFIED IDEOGRAPH
                                (#xCACA . #x9002)	;CJK UNIFIED IDEOGRAPH
                                (#xCACB . #x4ED5)	;CJK UNIFIED IDEOGRAPH
                                (#xCACC . #x4F8D)	;CJK UNIFIED IDEOGRAPH
                                (#xCACD . #x91CA)	;CJK UNIFIED IDEOGRAPH
                                (#xCACE . #x9970)	;CJK UNIFIED IDEOGRAPH
                                (#xCACF . #x6C0F)	;CJK UNIFIED IDEOGRAPH
                                (#xCAD0 . #x5E02)	;CJK UNIFIED IDEOGRAPH
                                (#xCAD1 . #x6043)	;CJK UNIFIED IDEOGRAPH
                                (#xCAD2 . #x5BA4)	;CJK UNIFIED IDEOGRAPH
                                (#xCAD3 . #x89C6)	;CJK UNIFIED IDEOGRAPH
                                (#xCAD4 . #x8BD5)	;CJK UNIFIED IDEOGRAPH
                                (#xCAD5 . #x6536)	;CJK UNIFIED IDEOGRAPH
                                (#xCAD6 . #x624B)	;CJK UNIFIED IDEOGRAPH
                                (#xCAD7 . #x9996)	;CJK UNIFIED IDEOGRAPH
                                (#xCAD8 . #x5B88)	;CJK UNIFIED IDEOGRAPH
                                (#xCAD9 . #x5BFF)	;CJK UNIFIED IDEOGRAPH
                                (#xCADA . #x6388)	;CJK UNIFIED IDEOGRAPH
                                (#xCADB . #x552E)	;CJK UNIFIED IDEOGRAPH
                                (#xCADC . #x53D7)	;CJK UNIFIED IDEOGRAPH
                                (#xCADD . #x7626)	;CJK UNIFIED IDEOGRAPH
                                (#xCADE . #x517D)	;CJK UNIFIED IDEOGRAPH
                                (#xCADF . #x852C)	;CJK UNIFIED IDEOGRAPH
                                (#xCAE0 . #x67A2)	;CJK UNIFIED IDEOGRAPH
                                (#xCAE1 . #x68B3)	;CJK UNIFIED IDEOGRAPH
                                (#xCAE2 . #x6B8A)	;CJK UNIFIED IDEOGRAPH
                                (#xCAE3 . #x6292)	;CJK UNIFIED IDEOGRAPH
                                (#xCAE4 . #x8F93)	;CJK UNIFIED IDEOGRAPH
                                (#xCAE5 . #x53D4)	;CJK UNIFIED IDEOGRAPH
                                (#xCAE6 . #x8212)	;CJK UNIFIED IDEOGRAPH
                                (#xCAE7 . #x6DD1)	;CJK UNIFIED IDEOGRAPH
                                (#xCAE8 . #x758F)	;CJK UNIFIED IDEOGRAPH
                                (#xCAE9 . #x4E66)	;CJK UNIFIED IDEOGRAPH
                                (#xCAEA . #x8D4E)	;CJK UNIFIED IDEOGRAPH
                                (#xCAEB . #x5B70)	;CJK UNIFIED IDEOGRAPH
                                (#xCAEC . #x719F)	;CJK UNIFIED IDEOGRAPH
                                (#xCAED . #x85AF)	;CJK UNIFIED IDEOGRAPH
                                (#xCAEE . #x6691)	;CJK UNIFIED IDEOGRAPH
                                (#xCAEF . #x66D9)	;CJK UNIFIED IDEOGRAPH
                                (#xCAF0 . #x7F72)	;CJK UNIFIED IDEOGRAPH
                                (#xCAF1 . #x8700)	;CJK UNIFIED IDEOGRAPH
                                (#xCAF2 . #x9ECD)	;CJK UNIFIED IDEOGRAPH
                                (#xCAF3 . #x9F20)	;CJK UNIFIED IDEOGRAPH
                                (#xCAF4 . #x5C5E)	;CJK UNIFIED IDEOGRAPH
                                (#xCAF5 . #x672F)	;CJK UNIFIED IDEOGRAPH
                                (#xCAF6 . #x8FF0)	;CJK UNIFIED IDEOGRAPH
                                (#xCAF7 . #x6811)	;CJK UNIFIED IDEOGRAPH
                                (#xCAF8 . #x675F)	;CJK UNIFIED IDEOGRAPH
                                (#xCAF9 . #x620D)	;CJK UNIFIED IDEOGRAPH
                                (#xCAFA . #x7AD6)	;CJK UNIFIED IDEOGRAPH
                                (#xCAFB . #x5885)	;CJK UNIFIED IDEOGRAPH
                                (#xCAFC . #x5EB6)	;CJK UNIFIED IDEOGRAPH
                                (#xCAFD . #x6570)	;CJK UNIFIED IDEOGRAPH
                                (#xCAFE . #x6F31)	;CJK UNIFIED IDEOGRAPH
                                (#xCB40 . #x8582)	;CJK UNIFIED IDEOGRAPH
                                (#xCB41 . #x8583)	;CJK UNIFIED IDEOGRAPH
                                (#xCB42 . #x8586)	;CJK UNIFIED IDEOGRAPH
                                (#xCB43 . #x8588)	;CJK UNIFIED IDEOGRAPH
                                (#xCB44 . #x8589)	;CJK UNIFIED IDEOGRAPH
                                (#xCB45 . #x858A)	;CJK UNIFIED IDEOGRAPH
                                (#xCB46 . #x858B)	;CJK UNIFIED IDEOGRAPH
                                (#xCB47 . #x858C)	;CJK UNIFIED IDEOGRAPH
                                (#xCB48 . #x858D)	;CJK UNIFIED IDEOGRAPH
                                (#xCB49 . #x858E)	;CJK UNIFIED IDEOGRAPH
                                (#xCB4A . #x8590)	;CJK UNIFIED IDEOGRAPH
                                (#xCB4B . #x8591)	;CJK UNIFIED IDEOGRAPH
                                (#xCB4C . #x8592)	;CJK UNIFIED IDEOGRAPH
                                (#xCB4D . #x8593)	;CJK UNIFIED IDEOGRAPH
                                (#xCB4E . #x8594)	;CJK UNIFIED IDEOGRAPH
                                (#xCB4F . #x8595)	;CJK UNIFIED IDEOGRAPH
                                (#xCB50 . #x8596)	;CJK UNIFIED IDEOGRAPH
                                (#xCB51 . #x8597)	;CJK UNIFIED IDEOGRAPH
                                (#xCB52 . #x8598)	;CJK UNIFIED IDEOGRAPH
                                (#xCB53 . #x8599)	;CJK UNIFIED IDEOGRAPH
                                (#xCB54 . #x859A)	;CJK UNIFIED IDEOGRAPH
                                (#xCB55 . #x859D)	;CJK UNIFIED IDEOGRAPH
                                (#xCB56 . #x859E)	;CJK UNIFIED IDEOGRAPH
                                (#xCB57 . #x859F)	;CJK UNIFIED IDEOGRAPH
                                (#xCB58 . #x85A0)	;CJK UNIFIED IDEOGRAPH
                                (#xCB59 . #x85A1)	;CJK UNIFIED IDEOGRAPH
                                (#xCB5A . #x85A2)	;CJK UNIFIED IDEOGRAPH
                                (#xCB5B . #x85A3)	;CJK UNIFIED IDEOGRAPH
                                (#xCB5C . #x85A5)	;CJK UNIFIED IDEOGRAPH
                                (#xCB5D . #x85A6)	;CJK UNIFIED IDEOGRAPH
                                (#xCB5E . #x85A7)	;CJK UNIFIED IDEOGRAPH
                                (#xCB5F . #x85A9)	;CJK UNIFIED IDEOGRAPH
                                (#xCB60 . #x85AB)	;CJK UNIFIED IDEOGRAPH
                                (#xCB61 . #x85AC)	;CJK UNIFIED IDEOGRAPH
                                (#xCB62 . #x85AD)	;CJK UNIFIED IDEOGRAPH
                                (#xCB63 . #x85B1)	;CJK UNIFIED IDEOGRAPH
                                (#xCB64 . #x85B2)	;CJK UNIFIED IDEOGRAPH
                                (#xCB65 . #x85B3)	;CJK UNIFIED IDEOGRAPH
                                (#xCB66 . #x85B4)	;CJK UNIFIED IDEOGRAPH
                                (#xCB67 . #x85B5)	;CJK UNIFIED IDEOGRAPH
                                (#xCB68 . #x85B6)	;CJK UNIFIED IDEOGRAPH
                                (#xCB69 . #x85B8)	;CJK UNIFIED IDEOGRAPH
                                (#xCB6A . #x85BA)	;CJK UNIFIED IDEOGRAPH
                                (#xCB6B . #x85BB)	;CJK UNIFIED IDEOGRAPH
                                (#xCB6C . #x85BC)	;CJK UNIFIED IDEOGRAPH
                                (#xCB6D . #x85BD)	;CJK UNIFIED IDEOGRAPH
                                (#xCB6E . #x85BE)	;CJK UNIFIED IDEOGRAPH
                                (#xCB6F . #x85BF)	;CJK UNIFIED IDEOGRAPH
                                (#xCB70 . #x85C0)	;CJK UNIFIED IDEOGRAPH
                                (#xCB71 . #x85C2)	;CJK UNIFIED IDEOGRAPH
                                (#xCB72 . #x85C3)	;CJK UNIFIED IDEOGRAPH
                                (#xCB73 . #x85C4)	;CJK UNIFIED IDEOGRAPH
                                (#xCB74 . #x85C5)	;CJK UNIFIED IDEOGRAPH
                                (#xCB75 . #x85C6)	;CJK UNIFIED IDEOGRAPH
                                (#xCB76 . #x85C7)	;CJK UNIFIED IDEOGRAPH
                                (#xCB77 . #x85C8)	;CJK UNIFIED IDEOGRAPH
                                (#xCB78 . #x85CA)	;CJK UNIFIED IDEOGRAPH
                                (#xCB79 . #x85CB)	;CJK UNIFIED IDEOGRAPH
                                (#xCB7A . #x85CC)	;CJK UNIFIED IDEOGRAPH
                                (#xCB7B . #x85CD)	;CJK UNIFIED IDEOGRAPH
                                (#xCB7C . #x85CE)	;CJK UNIFIED IDEOGRAPH
                                (#xCB7D . #x85D1)	;CJK UNIFIED IDEOGRAPH
                                (#xCB7E . #x85D2)	;CJK UNIFIED IDEOGRAPH
                                (#xCB80 . #x85D4)	;CJK UNIFIED IDEOGRAPH
                                (#xCB81 . #x85D6)	;CJK UNIFIED IDEOGRAPH
                                (#xCB82 . #x85D7)	;CJK UNIFIED IDEOGRAPH
                                (#xCB83 . #x85D8)	;CJK UNIFIED IDEOGRAPH
                                (#xCB84 . #x85D9)	;CJK UNIFIED IDEOGRAPH
                                (#xCB85 . #x85DA)	;CJK UNIFIED IDEOGRAPH
                                (#xCB86 . #x85DB)	;CJK UNIFIED IDEOGRAPH
                                (#xCB87 . #x85DD)	;CJK UNIFIED IDEOGRAPH
                                (#xCB88 . #x85DE)	;CJK UNIFIED IDEOGRAPH
                                (#xCB89 . #x85DF)	;CJK UNIFIED IDEOGRAPH
                                (#xCB8A . #x85E0)	;CJK UNIFIED IDEOGRAPH
                                (#xCB8B . #x85E1)	;CJK UNIFIED IDEOGRAPH
                                (#xCB8C . #x85E2)	;CJK UNIFIED IDEOGRAPH
                                (#xCB8D . #x85E3)	;CJK UNIFIED IDEOGRAPH
                                (#xCB8E . #x85E5)	;CJK UNIFIED IDEOGRAPH
                                (#xCB8F . #x85E6)	;CJK UNIFIED IDEOGRAPH
                                (#xCB90 . #x85E7)	;CJK UNIFIED IDEOGRAPH
                                (#xCB91 . #x85E8)	;CJK UNIFIED IDEOGRAPH
                                (#xCB92 . #x85EA)	;CJK UNIFIED IDEOGRAPH
                                (#xCB93 . #x85EB)	;CJK UNIFIED IDEOGRAPH
                                (#xCB94 . #x85EC)	;CJK UNIFIED IDEOGRAPH
                                (#xCB95 . #x85ED)	;CJK UNIFIED IDEOGRAPH
                                (#xCB96 . #x85EE)	;CJK UNIFIED IDEOGRAPH
                                (#xCB97 . #x85EF)	;CJK UNIFIED IDEOGRAPH
                                (#xCB98 . #x85F0)	;CJK UNIFIED IDEOGRAPH
                                (#xCB99 . #x85F1)	;CJK UNIFIED IDEOGRAPH
                                (#xCB9A . #x85F2)	;CJK UNIFIED IDEOGRAPH
                                (#xCB9B . #x85F3)	;CJK UNIFIED IDEOGRAPH
                                (#xCB9C . #x85F4)	;CJK UNIFIED IDEOGRAPH
                                (#xCB9D . #x85F5)	;CJK UNIFIED IDEOGRAPH
                                (#xCB9E . #x85F6)	;CJK UNIFIED IDEOGRAPH
                                (#xCB9F . #x85F7)	;CJK UNIFIED IDEOGRAPH
                                (#xCBA0 . #x85F8)	;CJK UNIFIED IDEOGRAPH
                                (#xCBA1 . #x6055)	;CJK UNIFIED IDEOGRAPH
                                (#xCBA2 . #x5237)	;CJK UNIFIED IDEOGRAPH
                                (#xCBA3 . #x800D)	;CJK UNIFIED IDEOGRAPH
                                (#xCBA4 . #x6454)	;CJK UNIFIED IDEOGRAPH
                                (#xCBA5 . #x8870)	;CJK UNIFIED IDEOGRAPH
                                (#xCBA6 . #x7529)	;CJK UNIFIED IDEOGRAPH
                                (#xCBA7 . #x5E05)	;CJK UNIFIED IDEOGRAPH
                                (#xCBA8 . #x6813)	;CJK UNIFIED IDEOGRAPH
                                (#xCBA9 . #x62F4)	;CJK UNIFIED IDEOGRAPH
                                (#xCBAA . #x971C)	;CJK UNIFIED IDEOGRAPH
                                (#xCBAB . #x53CC)	;CJK UNIFIED IDEOGRAPH
                                (#xCBAC . #x723D)	;CJK UNIFIED IDEOGRAPH
                                (#xCBAD . #x8C01)	;CJK UNIFIED IDEOGRAPH
                                (#xCBAE . #x6C34)	;CJK UNIFIED IDEOGRAPH
                                (#xCBAF . #x7761)	;CJK UNIFIED IDEOGRAPH
                                (#xCBB0 . #x7A0E)	;CJK UNIFIED IDEOGRAPH
                                (#xCBB1 . #x542E)	;CJK UNIFIED IDEOGRAPH
                                (#xCBB2 . #x77AC)	;CJK UNIFIED IDEOGRAPH
                                (#xCBB3 . #x987A)	;CJK UNIFIED IDEOGRAPH
                                (#xCBB4 . #x821C)	;CJK UNIFIED IDEOGRAPH
                                (#xCBB5 . #x8BF4)	;CJK UNIFIED IDEOGRAPH
                                (#xCBB6 . #x7855)	;CJK UNIFIED IDEOGRAPH
                                (#xCBB7 . #x6714)	;CJK UNIFIED IDEOGRAPH
                                (#xCBB8 . #x70C1)	;CJK UNIFIED IDEOGRAPH
                                (#xCBB9 . #x65AF)	;CJK UNIFIED IDEOGRAPH
                                (#xCBBA . #x6495)	;CJK UNIFIED IDEOGRAPH
                                (#xCBBB . #x5636)	;CJK UNIFIED IDEOGRAPH
                                (#xCBBC . #x601D)	;CJK UNIFIED IDEOGRAPH
                                (#xCBBD . #x79C1)	;CJK UNIFIED IDEOGRAPH
                                (#xCBBE . #x53F8)	;CJK UNIFIED IDEOGRAPH
                                (#xCBBF . #x4E1D)	;CJK UNIFIED IDEOGRAPH
                                (#xCBC0 . #x6B7B)	;CJK UNIFIED IDEOGRAPH
                                (#xCBC1 . #x8086)	;CJK UNIFIED IDEOGRAPH
                                (#xCBC2 . #x5BFA)	;CJK UNIFIED IDEOGRAPH
                                (#xCBC3 . #x55E3)	;CJK UNIFIED IDEOGRAPH
                                (#xCBC4 . #x56DB)	;CJK UNIFIED IDEOGRAPH
                                (#xCBC5 . #x4F3A)	;CJK UNIFIED IDEOGRAPH
                                (#xCBC6 . #x4F3C)	;CJK UNIFIED IDEOGRAPH
                                (#xCBC7 . #x9972)	;CJK UNIFIED IDEOGRAPH
                                (#xCBC8 . #x5DF3)	;CJK UNIFIED IDEOGRAPH
                                (#xCBC9 . #x677E)	;CJK UNIFIED IDEOGRAPH
                                (#xCBCA . #x8038)	;CJK UNIFIED IDEOGRAPH
                                (#xCBCB . #x6002)	;CJK UNIFIED IDEOGRAPH
                                (#xCBCC . #x9882)	;CJK UNIFIED IDEOGRAPH
                                (#xCBCD . #x9001)	;CJK UNIFIED IDEOGRAPH
                                (#xCBCE . #x5B8B)	;CJK UNIFIED IDEOGRAPH
                                (#xCBCF . #x8BBC)	;CJK UNIFIED IDEOGRAPH
                                (#xCBD0 . #x8BF5)	;CJK UNIFIED IDEOGRAPH
                                (#xCBD1 . #x641C)	;CJK UNIFIED IDEOGRAPH
                                (#xCBD2 . #x8258)	;CJK UNIFIED IDEOGRAPH
                                (#xCBD3 . #x64DE)	;CJK UNIFIED IDEOGRAPH
                                (#xCBD4 . #x55FD)	;CJK UNIFIED IDEOGRAPH
                                (#xCBD5 . #x82CF)	;CJK UNIFIED IDEOGRAPH
                                (#xCBD6 . #x9165)	;CJK UNIFIED IDEOGRAPH
                                (#xCBD7 . #x4FD7)	;CJK UNIFIED IDEOGRAPH
                                (#xCBD8 . #x7D20)	;CJK UNIFIED IDEOGRAPH
                                (#xCBD9 . #x901F)	;CJK UNIFIED IDEOGRAPH
                                (#xCBDA . #x7C9F)	;CJK UNIFIED IDEOGRAPH
                                (#xCBDB . #x50F3)	;CJK UNIFIED IDEOGRAPH
                                (#xCBDC . #x5851)	;CJK UNIFIED IDEOGRAPH
                                (#xCBDD . #x6EAF)	;CJK UNIFIED IDEOGRAPH
                                (#xCBDE . #x5BBF)	;CJK UNIFIED IDEOGRAPH
                                (#xCBDF . #x8BC9)	;CJK UNIFIED IDEOGRAPH
                                (#xCBE0 . #x8083)	;CJK UNIFIED IDEOGRAPH
                                (#xCBE1 . #x9178)	;CJK UNIFIED IDEOGRAPH
                                (#xCBE2 . #x849C)	;CJK UNIFIED IDEOGRAPH
                                (#xCBE3 . #x7B97)	;CJK UNIFIED IDEOGRAPH
                                (#xCBE4 . #x867D)	;CJK UNIFIED IDEOGRAPH
                                (#xCBE5 . #x968B)	;CJK UNIFIED IDEOGRAPH
                                (#xCBE6 . #x968F)	;CJK UNIFIED IDEOGRAPH
                                (#xCBE7 . #x7EE5)	;CJK UNIFIED IDEOGRAPH
                                (#xCBE8 . #x9AD3)	;CJK UNIFIED IDEOGRAPH
                                (#xCBE9 . #x788E)	;CJK UNIFIED IDEOGRAPH
                                (#xCBEA . #x5C81)	;CJK UNIFIED IDEOGRAPH
                                (#xCBEB . #x7A57)	;CJK UNIFIED IDEOGRAPH
                                (#xCBEC . #x9042)	;CJK UNIFIED IDEOGRAPH
                                (#xCBED . #x96A7)	;CJK UNIFIED IDEOGRAPH
                                (#xCBEE . #x795F)	;CJK UNIFIED IDEOGRAPH
                                (#xCBEF . #x5B59)	;CJK UNIFIED IDEOGRAPH
                                (#xCBF0 . #x635F)	;CJK UNIFIED IDEOGRAPH
                                (#xCBF1 . #x7B0B)	;CJK UNIFIED IDEOGRAPH
                                (#xCBF2 . #x84D1)	;CJK UNIFIED IDEOGRAPH
                                (#xCBF3 . #x68AD)	;CJK UNIFIED IDEOGRAPH
                                (#xCBF4 . #x5506)	;CJK UNIFIED IDEOGRAPH
                                (#xCBF5 . #x7F29)	;CJK UNIFIED IDEOGRAPH
                                (#xCBF6 . #x7410)	;CJK UNIFIED IDEOGRAPH
                                (#xCBF7 . #x7D22)	;CJK UNIFIED IDEOGRAPH
                                (#xCBF8 . #x9501)	;CJK UNIFIED IDEOGRAPH
                                (#xCBF9 . #x6240)	;CJK UNIFIED IDEOGRAPH
                                (#xCBFA . #x584C)	;CJK UNIFIED IDEOGRAPH
                                (#xCBFB . #x4ED6)	;CJK UNIFIED IDEOGRAPH
                                (#xCBFC . #x5B83)	;CJK UNIFIED IDEOGRAPH
                                (#xCBFD . #x5979)	;CJK UNIFIED IDEOGRAPH
                                (#xCBFE . #x5854)	;CJK UNIFIED IDEOGRAPH
                                (#xCC40 . #x85F9)	;CJK UNIFIED IDEOGRAPH
                                (#xCC41 . #x85FA)	;CJK UNIFIED IDEOGRAPH
                                (#xCC42 . #x85FC)	;CJK UNIFIED IDEOGRAPH
                                (#xCC43 . #x85FD)	;CJK UNIFIED IDEOGRAPH
                                (#xCC44 . #x85FE)	;CJK UNIFIED IDEOGRAPH
                                (#xCC45 . #x8600)	;CJK UNIFIED IDEOGRAPH
                                (#xCC46 . #x8601)	;CJK UNIFIED IDEOGRAPH
                                (#xCC47 . #x8602)	;CJK UNIFIED IDEOGRAPH
                                (#xCC48 . #x8603)	;CJK UNIFIED IDEOGRAPH
                                (#xCC49 . #x8604)	;CJK UNIFIED IDEOGRAPH
                                (#xCC4A . #x8606)	;CJK UNIFIED IDEOGRAPH
                                (#xCC4B . #x8607)	;CJK UNIFIED IDEOGRAPH
                                (#xCC4C . #x8608)	;CJK UNIFIED IDEOGRAPH
                                (#xCC4D . #x8609)	;CJK UNIFIED IDEOGRAPH
                                (#xCC4E . #x860A)	;CJK UNIFIED IDEOGRAPH
                                (#xCC4F . #x860B)	;CJK UNIFIED IDEOGRAPH
                                (#xCC50 . #x860C)	;CJK UNIFIED IDEOGRAPH
                                (#xCC51 . #x860D)	;CJK UNIFIED IDEOGRAPH
                                (#xCC52 . #x860E)	;CJK UNIFIED IDEOGRAPH
                                (#xCC53 . #x860F)	;CJK UNIFIED IDEOGRAPH
                                (#xCC54 . #x8610)	;CJK UNIFIED IDEOGRAPH
                                (#xCC55 . #x8612)	;CJK UNIFIED IDEOGRAPH
                                (#xCC56 . #x8613)	;CJK UNIFIED IDEOGRAPH
                                (#xCC57 . #x8614)	;CJK UNIFIED IDEOGRAPH
                                (#xCC58 . #x8615)	;CJK UNIFIED IDEOGRAPH
                                (#xCC59 . #x8617)	;CJK UNIFIED IDEOGRAPH
                                (#xCC5A . #x8618)	;CJK UNIFIED IDEOGRAPH
                                (#xCC5B . #x8619)	;CJK UNIFIED IDEOGRAPH
                                (#xCC5C . #x861A)	;CJK UNIFIED IDEOGRAPH
                                (#xCC5D . #x861B)	;CJK UNIFIED IDEOGRAPH
                                (#xCC5E . #x861C)	;CJK UNIFIED IDEOGRAPH
                                (#xCC5F . #x861D)	;CJK UNIFIED IDEOGRAPH
                                (#xCC60 . #x861E)	;CJK UNIFIED IDEOGRAPH
                                (#xCC61 . #x861F)	;CJK UNIFIED IDEOGRAPH
                                (#xCC62 . #x8620)	;CJK UNIFIED IDEOGRAPH
                                (#xCC63 . #x8621)	;CJK UNIFIED IDEOGRAPH
                                (#xCC64 . #x8622)	;CJK UNIFIED IDEOGRAPH
                                (#xCC65 . #x8623)	;CJK UNIFIED IDEOGRAPH
                                (#xCC66 . #x8624)	;CJK UNIFIED IDEOGRAPH
                                (#xCC67 . #x8625)	;CJK UNIFIED IDEOGRAPH
                                (#xCC68 . #x8626)	;CJK UNIFIED IDEOGRAPH
                                (#xCC69 . #x8628)	;CJK UNIFIED IDEOGRAPH
                                (#xCC6A . #x862A)	;CJK UNIFIED IDEOGRAPH
                                (#xCC6B . #x862B)	;CJK UNIFIED IDEOGRAPH
                                (#xCC6C . #x862C)	;CJK UNIFIED IDEOGRAPH
                                (#xCC6D . #x862D)	;CJK UNIFIED IDEOGRAPH
                                (#xCC6E . #x862E)	;CJK UNIFIED IDEOGRAPH
                                (#xCC6F . #x862F)	;CJK UNIFIED IDEOGRAPH
                                (#xCC70 . #x8630)	;CJK UNIFIED IDEOGRAPH
                                (#xCC71 . #x8631)	;CJK UNIFIED IDEOGRAPH
                                (#xCC72 . #x8632)	;CJK UNIFIED IDEOGRAPH
                                (#xCC73 . #x8633)	;CJK UNIFIED IDEOGRAPH
                                (#xCC74 . #x8634)	;CJK UNIFIED IDEOGRAPH
                                (#xCC75 . #x8635)	;CJK UNIFIED IDEOGRAPH
                                (#xCC76 . #x8636)	;CJK UNIFIED IDEOGRAPH
                                (#xCC77 . #x8637)	;CJK UNIFIED IDEOGRAPH
                                (#xCC78 . #x8639)	;CJK UNIFIED IDEOGRAPH
                                (#xCC79 . #x863A)	;CJK UNIFIED IDEOGRAPH
                                (#xCC7A . #x863B)	;CJK UNIFIED IDEOGRAPH
                                (#xCC7B . #x863D)	;CJK UNIFIED IDEOGRAPH
                                (#xCC7C . #x863E)	;CJK UNIFIED IDEOGRAPH
                                (#xCC7D . #x863F)	;CJK UNIFIED IDEOGRAPH
                                (#xCC7E . #x8640)	;CJK UNIFIED IDEOGRAPH
                                (#xCC80 . #x8641)	;CJK UNIFIED IDEOGRAPH
                                (#xCC81 . #x8642)	;CJK UNIFIED IDEOGRAPH
                                (#xCC82 . #x8643)	;CJK UNIFIED IDEOGRAPH
                                (#xCC83 . #x8644)	;CJK UNIFIED IDEOGRAPH
                                (#xCC84 . #x8645)	;CJK UNIFIED IDEOGRAPH
                                (#xCC85 . #x8646)	;CJK UNIFIED IDEOGRAPH
                                (#xCC86 . #x8647)	;CJK UNIFIED IDEOGRAPH
                                (#xCC87 . #x8648)	;CJK UNIFIED IDEOGRAPH
                                (#xCC88 . #x8649)	;CJK UNIFIED IDEOGRAPH
                                (#xCC89 . #x864A)	;CJK UNIFIED IDEOGRAPH
                                (#xCC8A . #x864B)	;CJK UNIFIED IDEOGRAPH
                                (#xCC8B . #x864C)	;CJK UNIFIED IDEOGRAPH
                                (#xCC8C . #x8652)	;CJK UNIFIED IDEOGRAPH
                                (#xCC8D . #x8653)	;CJK UNIFIED IDEOGRAPH
                                (#xCC8E . #x8655)	;CJK UNIFIED IDEOGRAPH
                                (#xCC8F . #x8656)	;CJK UNIFIED IDEOGRAPH
                                (#xCC90 . #x8657)	;CJK UNIFIED IDEOGRAPH
                                (#xCC91 . #x8658)	;CJK UNIFIED IDEOGRAPH
                                (#xCC92 . #x8659)	;CJK UNIFIED IDEOGRAPH
                                (#xCC93 . #x865B)	;CJK UNIFIED IDEOGRAPH
                                (#xCC94 . #x865C)	;CJK UNIFIED IDEOGRAPH
                                (#xCC95 . #x865D)	;CJK UNIFIED IDEOGRAPH
                                (#xCC96 . #x865F)	;CJK UNIFIED IDEOGRAPH
                                (#xCC97 . #x8660)	;CJK UNIFIED IDEOGRAPH
                                (#xCC98 . #x8661)	;CJK UNIFIED IDEOGRAPH
                                (#xCC99 . #x8663)	;CJK UNIFIED IDEOGRAPH
                                (#xCC9A . #x8664)	;CJK UNIFIED IDEOGRAPH
                                (#xCC9B . #x8665)	;CJK UNIFIED IDEOGRAPH
                                (#xCC9C . #x8666)	;CJK UNIFIED IDEOGRAPH
                                (#xCC9D . #x8667)	;CJK UNIFIED IDEOGRAPH
                                (#xCC9E . #x8668)	;CJK UNIFIED IDEOGRAPH
                                (#xCC9F . #x8669)	;CJK UNIFIED IDEOGRAPH
                                (#xCCA0 . #x866A)	;CJK UNIFIED IDEOGRAPH
                                (#xCCA1 . #x736D)	;CJK UNIFIED IDEOGRAPH
                                (#xCCA2 . #x631E)	;CJK UNIFIED IDEOGRAPH
                                (#xCCA3 . #x8E4B)	;CJK UNIFIED IDEOGRAPH
                                (#xCCA4 . #x8E0F)	;CJK UNIFIED IDEOGRAPH
                                (#xCCA5 . #x80CE)	;CJK UNIFIED IDEOGRAPH
                                (#xCCA6 . #x82D4)	;CJK UNIFIED IDEOGRAPH
                                (#xCCA7 . #x62AC)	;CJK UNIFIED IDEOGRAPH
                                (#xCCA8 . #x53F0)	;CJK UNIFIED IDEOGRAPH
                                (#xCCA9 . #x6CF0)	;CJK UNIFIED IDEOGRAPH
                                (#xCCAA . #x915E)	;CJK UNIFIED IDEOGRAPH
                                (#xCCAB . #x592A)	;CJK UNIFIED IDEOGRAPH
                                (#xCCAC . #x6001)	;CJK UNIFIED IDEOGRAPH
                                (#xCCAD . #x6C70)	;CJK UNIFIED IDEOGRAPH
                                (#xCCAE . #x574D)	;CJK UNIFIED IDEOGRAPH
                                (#xCCAF . #x644A)	;CJK UNIFIED IDEOGRAPH
                                (#xCCB0 . #x8D2A)	;CJK UNIFIED IDEOGRAPH
                                (#xCCB1 . #x762B)	;CJK UNIFIED IDEOGRAPH
                                (#xCCB2 . #x6EE9)	;CJK UNIFIED IDEOGRAPH
                                (#xCCB3 . #x575B)	;CJK UNIFIED IDEOGRAPH
                                (#xCCB4 . #x6A80)	;CJK UNIFIED IDEOGRAPH
                                (#xCCB5 . #x75F0)	;CJK UNIFIED IDEOGRAPH
                                (#xCCB6 . #x6F6D)	;CJK UNIFIED IDEOGRAPH
                                (#xCCB7 . #x8C2D)	;CJK UNIFIED IDEOGRAPH
                                (#xCCB8 . #x8C08)	;CJK UNIFIED IDEOGRAPH
                                (#xCCB9 . #x5766)	;CJK UNIFIED IDEOGRAPH
                                (#xCCBA . #x6BEF)	;CJK UNIFIED IDEOGRAPH
                                (#xCCBB . #x8892)	;CJK UNIFIED IDEOGRAPH
                                (#xCCBC . #x78B3)	;CJK UNIFIED IDEOGRAPH
                                (#xCCBD . #x63A2)	;CJK UNIFIED IDEOGRAPH
                                (#xCCBE . #x53F9)	;CJK UNIFIED IDEOGRAPH
                                (#xCCBF . #x70AD)	;CJK UNIFIED IDEOGRAPH
                                (#xCCC0 . #x6C64)	;CJK UNIFIED IDEOGRAPH
                                (#xCCC1 . #x5858)	;CJK UNIFIED IDEOGRAPH
                                (#xCCC2 . #x642A)	;CJK UNIFIED IDEOGRAPH
                                (#xCCC3 . #x5802)	;CJK UNIFIED IDEOGRAPH
                                (#xCCC4 . #x68E0)	;CJK UNIFIED IDEOGRAPH
                                (#xCCC5 . #x819B)	;CJK UNIFIED IDEOGRAPH
                                (#xCCC6 . #x5510)	;CJK UNIFIED IDEOGRAPH
                                (#xCCC7 . #x7CD6)	;CJK UNIFIED IDEOGRAPH
                                (#xCCC8 . #x5018)	;CJK UNIFIED IDEOGRAPH
                                (#xCCC9 . #x8EBA)	;CJK UNIFIED IDEOGRAPH
                                (#xCCCA . #x6DCC)	;CJK UNIFIED IDEOGRAPH
                                (#xCCCB . #x8D9F)	;CJK UNIFIED IDEOGRAPH
                                (#xCCCC . #x70EB)	;CJK UNIFIED IDEOGRAPH
                                (#xCCCD . #x638F)	;CJK UNIFIED IDEOGRAPH
                                (#xCCCE . #x6D9B)	;CJK UNIFIED IDEOGRAPH
                                (#xCCCF . #x6ED4)	;CJK UNIFIED IDEOGRAPH
                                (#xCCD0 . #x7EE6)	;CJK UNIFIED IDEOGRAPH
                                (#xCCD1 . #x8404)	;CJK UNIFIED IDEOGRAPH
                                (#xCCD2 . #x6843)	;CJK UNIFIED IDEOGRAPH
                                (#xCCD3 . #x9003)	;CJK UNIFIED IDEOGRAPH
                                (#xCCD4 . #x6DD8)	;CJK UNIFIED IDEOGRAPH
                                (#xCCD5 . #x9676)	;CJK UNIFIED IDEOGRAPH
                                (#xCCD6 . #x8BA8)	;CJK UNIFIED IDEOGRAPH
                                (#xCCD7 . #x5957)	;CJK UNIFIED IDEOGRAPH
                                (#xCCD8 . #x7279)	;CJK UNIFIED IDEOGRAPH
                                (#xCCD9 . #x85E4)	;CJK UNIFIED IDEOGRAPH
                                (#xCCDA . #x817E)	;CJK UNIFIED IDEOGRAPH
                                (#xCCDB . #x75BC)	;CJK UNIFIED IDEOGRAPH
                                (#xCCDC . #x8A8A)	;CJK UNIFIED IDEOGRAPH
                                (#xCCDD . #x68AF)	;CJK UNIFIED IDEOGRAPH
                                (#xCCDE . #x5254)	;CJK UNIFIED IDEOGRAPH
                                (#xCCDF . #x8E22)	;CJK UNIFIED IDEOGRAPH
                                (#xCCE0 . #x9511)	;CJK UNIFIED IDEOGRAPH
                                (#xCCE1 . #x63D0)	;CJK UNIFIED IDEOGRAPH
                                (#xCCE2 . #x9898)	;CJK UNIFIED IDEOGRAPH
                                (#xCCE3 . #x8E44)	;CJK UNIFIED IDEOGRAPH
                                (#xCCE4 . #x557C)	;CJK UNIFIED IDEOGRAPH
                                (#xCCE5 . #x4F53)	;CJK UNIFIED IDEOGRAPH
                                (#xCCE6 . #x66FF)	;CJK UNIFIED IDEOGRAPH
                                (#xCCE7 . #x568F)	;CJK UNIFIED IDEOGRAPH
                                (#xCCE8 . #x60D5)	;CJK UNIFIED IDEOGRAPH
                                (#xCCE9 . #x6D95)	;CJK UNIFIED IDEOGRAPH
                                (#xCCEA . #x5243)	;CJK UNIFIED IDEOGRAPH
                                (#xCCEB . #x5C49)	;CJK UNIFIED IDEOGRAPH
                                (#xCCEC . #x5929)	;CJK UNIFIED IDEOGRAPH
                                (#xCCED . #x6DFB)	;CJK UNIFIED IDEOGRAPH
                                (#xCCEE . #x586B)	;CJK UNIFIED IDEOGRAPH
                                (#xCCEF . #x7530)	;CJK UNIFIED IDEOGRAPH
                                (#xCCF0 . #x751C)	;CJK UNIFIED IDEOGRAPH
                                (#xCCF1 . #x606C)	;CJK UNIFIED IDEOGRAPH
                                (#xCCF2 . #x8214)	;CJK UNIFIED IDEOGRAPH
                                (#xCCF3 . #x8146)	;CJK UNIFIED IDEOGRAPH
                                (#xCCF4 . #x6311)	;CJK UNIFIED IDEOGRAPH
                                (#xCCF5 . #x6761)	;CJK UNIFIED IDEOGRAPH
                                (#xCCF6 . #x8FE2)	;CJK UNIFIED IDEOGRAPH
                                (#xCCF7 . #x773A)	;CJK UNIFIED IDEOGRAPH
                                (#xCCF8 . #x8DF3)	;CJK UNIFIED IDEOGRAPH
                                (#xCCF9 . #x8D34)	;CJK UNIFIED IDEOGRAPH
                                (#xCCFA . #x94C1)	;CJK UNIFIED IDEOGRAPH
                                (#xCCFB . #x5E16)	;CJK UNIFIED IDEOGRAPH
                                (#xCCFC . #x5385)	;CJK UNIFIED IDEOGRAPH
                                (#xCCFD . #x542C)	;CJK UNIFIED IDEOGRAPH
                                (#xCCFE . #x70C3)	;CJK UNIFIED IDEOGRAPH
                                (#xCD40 . #x866D)	;CJK UNIFIED IDEOGRAPH
                                (#xCD41 . #x866F)	;CJK UNIFIED IDEOGRAPH
                                (#xCD42 . #x8670)	;CJK UNIFIED IDEOGRAPH
                                (#xCD43 . #x8672)	;CJK UNIFIED IDEOGRAPH
                                (#xCD44 . #x8673)	;CJK UNIFIED IDEOGRAPH
                                (#xCD45 . #x8674)	;CJK UNIFIED IDEOGRAPH
                                (#xCD46 . #x8675)	;CJK UNIFIED IDEOGRAPH
                                (#xCD47 . #x8676)	;CJK UNIFIED IDEOGRAPH
                                (#xCD48 . #x8677)	;CJK UNIFIED IDEOGRAPH
                                (#xCD49 . #x8678)	;CJK UNIFIED IDEOGRAPH
                                (#xCD4A . #x8683)	;CJK UNIFIED IDEOGRAPH
                                (#xCD4B . #x8684)	;CJK UNIFIED IDEOGRAPH
                                (#xCD4C . #x8685)	;CJK UNIFIED IDEOGRAPH
                                (#xCD4D . #x8686)	;CJK UNIFIED IDEOGRAPH
                                (#xCD4E . #x8687)	;CJK UNIFIED IDEOGRAPH
                                (#xCD4F . #x8688)	;CJK UNIFIED IDEOGRAPH
                                (#xCD50 . #x8689)	;CJK UNIFIED IDEOGRAPH
                                (#xCD51 . #x868E)	;CJK UNIFIED IDEOGRAPH
                                (#xCD52 . #x868F)	;CJK UNIFIED IDEOGRAPH
                                (#xCD53 . #x8690)	;CJK UNIFIED IDEOGRAPH
                                (#xCD54 . #x8691)	;CJK UNIFIED IDEOGRAPH
                                (#xCD55 . #x8692)	;CJK UNIFIED IDEOGRAPH
                                (#xCD56 . #x8694)	;CJK UNIFIED IDEOGRAPH
                                (#xCD57 . #x8696)	;CJK UNIFIED IDEOGRAPH
                                (#xCD58 . #x8697)	;CJK UNIFIED IDEOGRAPH
                                (#xCD59 . #x8698)	;CJK UNIFIED IDEOGRAPH
                                (#xCD5A . #x8699)	;CJK UNIFIED IDEOGRAPH
                                (#xCD5B . #x869A)	;CJK UNIFIED IDEOGRAPH
                                (#xCD5C . #x869B)	;CJK UNIFIED IDEOGRAPH
                                (#xCD5D . #x869E)	;CJK UNIFIED IDEOGRAPH
                                (#xCD5E . #x869F)	;CJK UNIFIED IDEOGRAPH
                                (#xCD5F . #x86A0)	;CJK UNIFIED IDEOGRAPH
                                (#xCD60 . #x86A1)	;CJK UNIFIED IDEOGRAPH
                                (#xCD61 . #x86A2)	;CJK UNIFIED IDEOGRAPH
                                (#xCD62 . #x86A5)	;CJK UNIFIED IDEOGRAPH
                                (#xCD63 . #x86A6)	;CJK UNIFIED IDEOGRAPH
                                (#xCD64 . #x86AB)	;CJK UNIFIED IDEOGRAPH
                                (#xCD65 . #x86AD)	;CJK UNIFIED IDEOGRAPH
                                (#xCD66 . #x86AE)	;CJK UNIFIED IDEOGRAPH
                                (#xCD67 . #x86B2)	;CJK UNIFIED IDEOGRAPH
                                (#xCD68 . #x86B3)	;CJK UNIFIED IDEOGRAPH
                                (#xCD69 . #x86B7)	;CJK UNIFIED IDEOGRAPH
                                (#xCD6A . #x86B8)	;CJK UNIFIED IDEOGRAPH
                                (#xCD6B . #x86B9)	;CJK UNIFIED IDEOGRAPH
                                (#xCD6C . #x86BB)	;CJK UNIFIED IDEOGRAPH
                                (#xCD6D . #x86BC)	;CJK UNIFIED IDEOGRAPH
                                (#xCD6E . #x86BD)	;CJK UNIFIED IDEOGRAPH
                                (#xCD6F . #x86BE)	;CJK UNIFIED IDEOGRAPH
                                (#xCD70 . #x86BF)	;CJK UNIFIED IDEOGRAPH
                                (#xCD71 . #x86C1)	;CJK UNIFIED IDEOGRAPH
                                (#xCD72 . #x86C2)	;CJK UNIFIED IDEOGRAPH
                                (#xCD73 . #x86C3)	;CJK UNIFIED IDEOGRAPH
                                (#xCD74 . #x86C5)	;CJK UNIFIED IDEOGRAPH
                                (#xCD75 . #x86C8)	;CJK UNIFIED IDEOGRAPH
                                (#xCD76 . #x86CC)	;CJK UNIFIED IDEOGRAPH
                                (#xCD77 . #x86CD)	;CJK UNIFIED IDEOGRAPH
                                (#xCD78 . #x86D2)	;CJK UNIFIED IDEOGRAPH
                                (#xCD79 . #x86D3)	;CJK UNIFIED IDEOGRAPH
                                (#xCD7A . #x86D5)	;CJK UNIFIED IDEOGRAPH
                                (#xCD7B . #x86D6)	;CJK UNIFIED IDEOGRAPH
                                (#xCD7C . #x86D7)	;CJK UNIFIED IDEOGRAPH
                                (#xCD7D . #x86DA)	;CJK UNIFIED IDEOGRAPH
                                (#xCD7E . #x86DC)	;CJK UNIFIED IDEOGRAPH
                                (#xCD80 . #x86DD)	;CJK UNIFIED IDEOGRAPH
                                (#xCD81 . #x86E0)	;CJK UNIFIED IDEOGRAPH
                                (#xCD82 . #x86E1)	;CJK UNIFIED IDEOGRAPH
                                (#xCD83 . #x86E2)	;CJK UNIFIED IDEOGRAPH
                                (#xCD84 . #x86E3)	;CJK UNIFIED IDEOGRAPH
                                (#xCD85 . #x86E5)	;CJK UNIFIED IDEOGRAPH
                                (#xCD86 . #x86E6)	;CJK UNIFIED IDEOGRAPH
                                (#xCD87 . #x86E7)	;CJK UNIFIED IDEOGRAPH
                                (#xCD88 . #x86E8)	;CJK UNIFIED IDEOGRAPH
                                (#xCD89 . #x86EA)	;CJK UNIFIED IDEOGRAPH
                                (#xCD8A . #x86EB)	;CJK UNIFIED IDEOGRAPH
                                (#xCD8B . #x86EC)	;CJK UNIFIED IDEOGRAPH
                                (#xCD8C . #x86EF)	;CJK UNIFIED IDEOGRAPH
                                (#xCD8D . #x86F5)	;CJK UNIFIED IDEOGRAPH
                                (#xCD8E . #x86F6)	;CJK UNIFIED IDEOGRAPH
                                (#xCD8F . #x86F7)	;CJK UNIFIED IDEOGRAPH
                                (#xCD90 . #x86FA)	;CJK UNIFIED IDEOGRAPH
                                (#xCD91 . #x86FB)	;CJK UNIFIED IDEOGRAPH
                                (#xCD92 . #x86FC)	;CJK UNIFIED IDEOGRAPH
                                (#xCD93 . #x86FD)	;CJK UNIFIED IDEOGRAPH
                                (#xCD94 . #x86FF)	;CJK UNIFIED IDEOGRAPH
                                (#xCD95 . #x8701)	;CJK UNIFIED IDEOGRAPH
                                (#xCD96 . #x8704)	;CJK UNIFIED IDEOGRAPH
                                (#xCD97 . #x8705)	;CJK UNIFIED IDEOGRAPH
                                (#xCD98 . #x8706)	;CJK UNIFIED IDEOGRAPH
                                (#xCD99 . #x870B)	;CJK UNIFIED IDEOGRAPH
                                (#xCD9A . #x870C)	;CJK UNIFIED IDEOGRAPH
                                (#xCD9B . #x870E)	;CJK UNIFIED IDEOGRAPH
                                (#xCD9C . #x870F)	;CJK UNIFIED IDEOGRAPH
                                (#xCD9D . #x8710)	;CJK UNIFIED IDEOGRAPH
                                (#xCD9E . #x8711)	;CJK UNIFIED IDEOGRAPH
                                (#xCD9F . #x8714)	;CJK UNIFIED IDEOGRAPH
                                (#xCDA0 . #x8716)	;CJK UNIFIED IDEOGRAPH
                                (#xCDA1 . #x6C40)	;CJK UNIFIED IDEOGRAPH
                                (#xCDA2 . #x5EF7)	;CJK UNIFIED IDEOGRAPH
                                (#xCDA3 . #x505C)	;CJK UNIFIED IDEOGRAPH
                                (#xCDA4 . #x4EAD)	;CJK UNIFIED IDEOGRAPH
                                (#xCDA5 . #x5EAD)	;CJK UNIFIED IDEOGRAPH
                                (#xCDA6 . #x633A)	;CJK UNIFIED IDEOGRAPH
                                (#xCDA7 . #x8247)	;CJK UNIFIED IDEOGRAPH
                                (#xCDA8 . #x901A)	;CJK UNIFIED IDEOGRAPH
                                (#xCDA9 . #x6850)	;CJK UNIFIED IDEOGRAPH
                                (#xCDAA . #x916E)	;CJK UNIFIED IDEOGRAPH
                                (#xCDAB . #x77B3)	;CJK UNIFIED IDEOGRAPH
                                (#xCDAC . #x540C)	;CJK UNIFIED IDEOGRAPH
                                (#xCDAD . #x94DC)	;CJK UNIFIED IDEOGRAPH
                                (#xCDAE . #x5F64)	;CJK UNIFIED IDEOGRAPH
                                (#xCDAF . #x7AE5)	;CJK UNIFIED IDEOGRAPH
                                (#xCDB0 . #x6876)	;CJK UNIFIED IDEOGRAPH
                                (#xCDB1 . #x6345)	;CJK UNIFIED IDEOGRAPH
                                (#xCDB2 . #x7B52)	;CJK UNIFIED IDEOGRAPH
                                (#xCDB3 . #x7EDF)	;CJK UNIFIED IDEOGRAPH
                                (#xCDB4 . #x75DB)	;CJK UNIFIED IDEOGRAPH
                                (#xCDB5 . #x5077)	;CJK UNIFIED IDEOGRAPH
                                (#xCDB6 . #x6295)	;CJK UNIFIED IDEOGRAPH
                                (#xCDB7 . #x5934)	;CJK UNIFIED IDEOGRAPH
                                (#xCDB8 . #x900F)	;CJK UNIFIED IDEOGRAPH
                                (#xCDB9 . #x51F8)	;CJK UNIFIED IDEOGRAPH
                                (#xCDBA . #x79C3)	;CJK UNIFIED IDEOGRAPH
                                (#xCDBB . #x7A81)	;CJK UNIFIED IDEOGRAPH
                                (#xCDBC . #x56FE)	;CJK UNIFIED IDEOGRAPH
                                (#xCDBD . #x5F92)	;CJK UNIFIED IDEOGRAPH
                                (#xCDBE . #x9014)	;CJK UNIFIED IDEOGRAPH
                                (#xCDBF . #x6D82)	;CJK UNIFIED IDEOGRAPH
                                (#xCDC0 . #x5C60)	;CJK UNIFIED IDEOGRAPH
                                (#xCDC1 . #x571F)	;CJK UNIFIED IDEOGRAPH
                                (#xCDC2 . #x5410)	;CJK UNIFIED IDEOGRAPH
                                (#xCDC3 . #x5154)	;CJK UNIFIED IDEOGRAPH
                                (#xCDC4 . #x6E4D)	;CJK UNIFIED IDEOGRAPH
                                (#xCDC5 . #x56E2)	;CJK UNIFIED IDEOGRAPH
                                (#xCDC6 . #x63A8)	;CJK UNIFIED IDEOGRAPH
                                (#xCDC7 . #x9893)	;CJK UNIFIED IDEOGRAPH
                                (#xCDC8 . #x817F)	;CJK UNIFIED IDEOGRAPH
                                (#xCDC9 . #x8715)	;CJK UNIFIED IDEOGRAPH
                                (#xCDCA . #x892A)	;CJK UNIFIED IDEOGRAPH
                                (#xCDCB . #x9000)	;CJK UNIFIED IDEOGRAPH
                                (#xCDCC . #x541E)	;CJK UNIFIED IDEOGRAPH
                                (#xCDCD . #x5C6F)	;CJK UNIFIED IDEOGRAPH
                                (#xCDCE . #x81C0)	;CJK UNIFIED IDEOGRAPH
                                (#xCDCF . #x62D6)	;CJK UNIFIED IDEOGRAPH
                                (#xCDD0 . #x6258)	;CJK UNIFIED IDEOGRAPH
                                (#xCDD1 . #x8131)	;CJK UNIFIED IDEOGRAPH
                                (#xCDD2 . #x9E35)	;CJK UNIFIED IDEOGRAPH
                                (#xCDD3 . #x9640)	;CJK UNIFIED IDEOGRAPH
                                (#xCDD4 . #x9A6E)	;CJK UNIFIED IDEOGRAPH
                                (#xCDD5 . #x9A7C)	;CJK UNIFIED IDEOGRAPH
                                (#xCDD6 . #x692D)	;CJK UNIFIED IDEOGRAPH
                                (#xCDD7 . #x59A5)	;CJK UNIFIED IDEOGRAPH
                                (#xCDD8 . #x62D3)	;CJK UNIFIED IDEOGRAPH
                                (#xCDD9 . #x553E)	;CJK UNIFIED IDEOGRAPH
                                (#xCDDA . #x6316)	;CJK UNIFIED IDEOGRAPH
                                (#xCDDB . #x54C7)	;CJK UNIFIED IDEOGRAPH
                                (#xCDDC . #x86D9)	;CJK UNIFIED IDEOGRAPH
                                (#xCDDD . #x6D3C)	;CJK UNIFIED IDEOGRAPH
                                (#xCDDE . #x5A03)	;CJK UNIFIED IDEOGRAPH
                                (#xCDDF . #x74E6)	;CJK UNIFIED IDEOGRAPH
                                (#xCDE0 . #x889C)	;CJK UNIFIED IDEOGRAPH
                                (#xCDE1 . #x6B6A)	;CJK UNIFIED IDEOGRAPH
                                (#xCDE2 . #x5916)	;CJK UNIFIED IDEOGRAPH
                                (#xCDE3 . #x8C4C)	;CJK UNIFIED IDEOGRAPH
                                (#xCDE4 . #x5F2F)	;CJK UNIFIED IDEOGRAPH
                                (#xCDE5 . #x6E7E)	;CJK UNIFIED IDEOGRAPH
                                (#xCDE6 . #x73A9)	;CJK UNIFIED IDEOGRAPH
                                (#xCDE7 . #x987D)	;CJK UNIFIED IDEOGRAPH
                                (#xCDE8 . #x4E38)	;CJK UNIFIED IDEOGRAPH
                                (#xCDE9 . #x70F7)	;CJK UNIFIED IDEOGRAPH
                                (#xCDEA . #x5B8C)	;CJK UNIFIED IDEOGRAPH
                                (#xCDEB . #x7897)	;CJK UNIFIED IDEOGRAPH
                                (#xCDEC . #x633D)	;CJK UNIFIED IDEOGRAPH
                                (#xCDED . #x665A)	;CJK UNIFIED IDEOGRAPH
                                (#xCDEE . #x7696)	;CJK UNIFIED IDEOGRAPH
                                (#xCDEF . #x60CB)	;CJK UNIFIED IDEOGRAPH
                                (#xCDF0 . #x5B9B)	;CJK UNIFIED IDEOGRAPH
                                (#xCDF1 . #x5A49)	;CJK UNIFIED IDEOGRAPH
                                (#xCDF2 . #x4E07)	;CJK UNIFIED IDEOGRAPH
                                (#xCDF3 . #x8155)	;CJK UNIFIED IDEOGRAPH
                                (#xCDF4 . #x6C6A)	;CJK UNIFIED IDEOGRAPH
                                (#xCDF5 . #x738B)	;CJK UNIFIED IDEOGRAPH
                                (#xCDF6 . #x4EA1)	;CJK UNIFIED IDEOGRAPH
                                (#xCDF7 . #x6789)	;CJK UNIFIED IDEOGRAPH
                                (#xCDF8 . #x7F51)	;CJK UNIFIED IDEOGRAPH
                                (#xCDF9 . #x5F80)	;CJK UNIFIED IDEOGRAPH
                                (#xCDFA . #x65FA)	;CJK UNIFIED IDEOGRAPH
                                (#xCDFB . #x671B)	;CJK UNIFIED IDEOGRAPH
                                (#xCDFC . #x5FD8)	;CJK UNIFIED IDEOGRAPH
                                (#xCDFD . #x5984)	;CJK UNIFIED IDEOGRAPH
                                (#xCDFE . #x5A01)	;CJK UNIFIED IDEOGRAPH
                                (#xCE40 . #x8719)	;CJK UNIFIED IDEOGRAPH
                                (#xCE41 . #x871B)	;CJK UNIFIED IDEOGRAPH
                                (#xCE42 . #x871D)	;CJK UNIFIED IDEOGRAPH
                                (#xCE43 . #x871F)	;CJK UNIFIED IDEOGRAPH
                                (#xCE44 . #x8720)	;CJK UNIFIED IDEOGRAPH
                                (#xCE45 . #x8724)	;CJK UNIFIED IDEOGRAPH
                                (#xCE46 . #x8726)	;CJK UNIFIED IDEOGRAPH
                                (#xCE47 . #x8727)	;CJK UNIFIED IDEOGRAPH
                                (#xCE48 . #x8728)	;CJK UNIFIED IDEOGRAPH
                                (#xCE49 . #x872A)	;CJK UNIFIED IDEOGRAPH
                                (#xCE4A . #x872B)	;CJK UNIFIED IDEOGRAPH
                                (#xCE4B . #x872C)	;CJK UNIFIED IDEOGRAPH
                                (#xCE4C . #x872D)	;CJK UNIFIED IDEOGRAPH
                                (#xCE4D . #x872F)	;CJK UNIFIED IDEOGRAPH
                                (#xCE4E . #x8730)	;CJK UNIFIED IDEOGRAPH
                                (#xCE4F . #x8732)	;CJK UNIFIED IDEOGRAPH
                                (#xCE50 . #x8733)	;CJK UNIFIED IDEOGRAPH
                                (#xCE51 . #x8735)	;CJK UNIFIED IDEOGRAPH
                                (#xCE52 . #x8736)	;CJK UNIFIED IDEOGRAPH
                                (#xCE53 . #x8738)	;CJK UNIFIED IDEOGRAPH
                                (#xCE54 . #x8739)	;CJK UNIFIED IDEOGRAPH
                                (#xCE55 . #x873A)	;CJK UNIFIED IDEOGRAPH
                                (#xCE56 . #x873C)	;CJK UNIFIED IDEOGRAPH
                                (#xCE57 . #x873D)	;CJK UNIFIED IDEOGRAPH
                                (#xCE58 . #x8740)	;CJK UNIFIED IDEOGRAPH
                                (#xCE59 . #x8741)	;CJK UNIFIED IDEOGRAPH
                                (#xCE5A . #x8742)	;CJK UNIFIED IDEOGRAPH
                                (#xCE5B . #x8743)	;CJK UNIFIED IDEOGRAPH
                                (#xCE5C . #x8744)	;CJK UNIFIED IDEOGRAPH
                                (#xCE5D . #x8745)	;CJK UNIFIED IDEOGRAPH
                                (#xCE5E . #x8746)	;CJK UNIFIED IDEOGRAPH
                                (#xCE5F . #x874A)	;CJK UNIFIED IDEOGRAPH
                                (#xCE60 . #x874B)	;CJK UNIFIED IDEOGRAPH
                                (#xCE61 . #x874D)	;CJK UNIFIED IDEOGRAPH
                                (#xCE62 . #x874F)	;CJK UNIFIED IDEOGRAPH
                                (#xCE63 . #x8750)	;CJK UNIFIED IDEOGRAPH
                                (#xCE64 . #x8751)	;CJK UNIFIED IDEOGRAPH
                                (#xCE65 . #x8752)	;CJK UNIFIED IDEOGRAPH
                                (#xCE66 . #x8754)	;CJK UNIFIED IDEOGRAPH
                                (#xCE67 . #x8755)	;CJK UNIFIED IDEOGRAPH
                                (#xCE68 . #x8756)	;CJK UNIFIED IDEOGRAPH
                                (#xCE69 . #x8758)	;CJK UNIFIED IDEOGRAPH
                                (#xCE6A . #x875A)	;CJK UNIFIED IDEOGRAPH
                                (#xCE6B . #x875B)	;CJK UNIFIED IDEOGRAPH
                                (#xCE6C . #x875C)	;CJK UNIFIED IDEOGRAPH
                                (#xCE6D . #x875D)	;CJK UNIFIED IDEOGRAPH
                                (#xCE6E . #x875E)	;CJK UNIFIED IDEOGRAPH
                                (#xCE6F . #x875F)	;CJK UNIFIED IDEOGRAPH
                                (#xCE70 . #x8761)	;CJK UNIFIED IDEOGRAPH
                                (#xCE71 . #x8762)	;CJK UNIFIED IDEOGRAPH
                                (#xCE72 . #x8766)	;CJK UNIFIED IDEOGRAPH
                                (#xCE73 . #x8767)	;CJK UNIFIED IDEOGRAPH
                                (#xCE74 . #x8768)	;CJK UNIFIED IDEOGRAPH
                                (#xCE75 . #x8769)	;CJK UNIFIED IDEOGRAPH
                                (#xCE76 . #x876A)	;CJK UNIFIED IDEOGRAPH
                                (#xCE77 . #x876B)	;CJK UNIFIED IDEOGRAPH
                                (#xCE78 . #x876C)	;CJK UNIFIED IDEOGRAPH
                                (#xCE79 . #x876D)	;CJK UNIFIED IDEOGRAPH
                                (#xCE7A . #x876F)	;CJK UNIFIED IDEOGRAPH
                                (#xCE7B . #x8771)	;CJK UNIFIED IDEOGRAPH
                                (#xCE7C . #x8772)	;CJK UNIFIED IDEOGRAPH
                                (#xCE7D . #x8773)	;CJK UNIFIED IDEOGRAPH
                                (#xCE7E . #x8775)	;CJK UNIFIED IDEOGRAPH
                                (#xCE80 . #x8777)	;CJK UNIFIED IDEOGRAPH
                                (#xCE81 . #x8778)	;CJK UNIFIED IDEOGRAPH
                                (#xCE82 . #x8779)	;CJK UNIFIED IDEOGRAPH
                                (#xCE83 . #x877A)	;CJK UNIFIED IDEOGRAPH
                                (#xCE84 . #x877F)	;CJK UNIFIED IDEOGRAPH
                                (#xCE85 . #x8780)	;CJK UNIFIED IDEOGRAPH
                                (#xCE86 . #x8781)	;CJK UNIFIED IDEOGRAPH
                                (#xCE87 . #x8784)	;CJK UNIFIED IDEOGRAPH
                                (#xCE88 . #x8786)	;CJK UNIFIED IDEOGRAPH
                                (#xCE89 . #x8787)	;CJK UNIFIED IDEOGRAPH
                                (#xCE8A . #x8789)	;CJK UNIFIED IDEOGRAPH
                                (#xCE8B . #x878A)	;CJK UNIFIED IDEOGRAPH
                                (#xCE8C . #x878C)	;CJK UNIFIED IDEOGRAPH
                                (#xCE8D . #x878E)	;CJK UNIFIED IDEOGRAPH
                                (#xCE8E . #x878F)	;CJK UNIFIED IDEOGRAPH
                                (#xCE8F . #x8790)	;CJK UNIFIED IDEOGRAPH
                                (#xCE90 . #x8791)	;CJK UNIFIED IDEOGRAPH
                                (#xCE91 . #x8792)	;CJK UNIFIED IDEOGRAPH
                                (#xCE92 . #x8794)	;CJK UNIFIED IDEOGRAPH
                                (#xCE93 . #x8795)	;CJK UNIFIED IDEOGRAPH
                                (#xCE94 . #x8796)	;CJK UNIFIED IDEOGRAPH
                                (#xCE95 . #x8798)	;CJK UNIFIED IDEOGRAPH
                                (#xCE96 . #x8799)	;CJK UNIFIED IDEOGRAPH
                                (#xCE97 . #x879A)	;CJK UNIFIED IDEOGRAPH
                                (#xCE98 . #x879B)	;CJK UNIFIED IDEOGRAPH
                                (#xCE99 . #x879C)	;CJK UNIFIED IDEOGRAPH
                                (#xCE9A . #x879D)	;CJK UNIFIED IDEOGRAPH
                                (#xCE9B . #x879E)	;CJK UNIFIED IDEOGRAPH
                                (#xCE9C . #x87A0)	;CJK UNIFIED IDEOGRAPH
                                (#xCE9D . #x87A1)	;CJK UNIFIED IDEOGRAPH
                                (#xCE9E . #x87A2)	;CJK UNIFIED IDEOGRAPH
                                (#xCE9F . #x87A3)	;CJK UNIFIED IDEOGRAPH
                                (#xCEA0 . #x87A4)	;CJK UNIFIED IDEOGRAPH
                                (#xCEA1 . #x5DCD)	;CJK UNIFIED IDEOGRAPH
                                (#xCEA2 . #x5FAE)	;CJK UNIFIED IDEOGRAPH
                                (#xCEA3 . #x5371)	;CJK UNIFIED IDEOGRAPH
                                (#xCEA4 . #x97E6)	;CJK UNIFIED IDEOGRAPH
                                (#xCEA5 . #x8FDD)	;CJK UNIFIED IDEOGRAPH
                                (#xCEA6 . #x6845)	;CJK UNIFIED IDEOGRAPH
                                (#xCEA7 . #x56F4)	;CJK UNIFIED IDEOGRAPH
                                (#xCEA8 . #x552F)	;CJK UNIFIED IDEOGRAPH
                                (#xCEA9 . #x60DF)	;CJK UNIFIED IDEOGRAPH
                                (#xCEAA . #x4E3A)	;CJK UNIFIED IDEOGRAPH
                                (#xCEAB . #x6F4D)	;CJK UNIFIED IDEOGRAPH
                                (#xCEAC . #x7EF4)	;CJK UNIFIED IDEOGRAPH
                                (#xCEAD . #x82C7)	;CJK UNIFIED IDEOGRAPH
                                (#xCEAE . #x840E)	;CJK UNIFIED IDEOGRAPH
                                (#xCEAF . #x59D4)	;CJK UNIFIED IDEOGRAPH
                                (#xCEB0 . #x4F1F)	;CJK UNIFIED IDEOGRAPH
                                (#xCEB1 . #x4F2A)	;CJK UNIFIED IDEOGRAPH
                                (#xCEB2 . #x5C3E)	;CJK UNIFIED IDEOGRAPH
                                (#xCEB3 . #x7EAC)	;CJK UNIFIED IDEOGRAPH
                                (#xCEB4 . #x672A)	;CJK UNIFIED IDEOGRAPH
                                (#xCEB5 . #x851A)	;CJK UNIFIED IDEOGRAPH
                                (#xCEB6 . #x5473)	;CJK UNIFIED IDEOGRAPH
                                (#xCEB7 . #x754F)	;CJK UNIFIED IDEOGRAPH
                                (#xCEB8 . #x80C3)	;CJK UNIFIED IDEOGRAPH
                                (#xCEB9 . #x5582)	;CJK UNIFIED IDEOGRAPH
                                (#xCEBA . #x9B4F)	;CJK UNIFIED IDEOGRAPH
                                (#xCEBB . #x4F4D)	;CJK UNIFIED IDEOGRAPH
                                (#xCEBC . #x6E2D)	;CJK UNIFIED IDEOGRAPH
                                (#xCEBD . #x8C13)	;CJK UNIFIED IDEOGRAPH
                                (#xCEBE . #x5C09)	;CJK UNIFIED IDEOGRAPH
                                (#xCEBF . #x6170)	;CJK UNIFIED IDEOGRAPH
                                (#xCEC0 . #x536B)	;CJK UNIFIED IDEOGRAPH
                                (#xCEC1 . #x761F)	;CJK UNIFIED IDEOGRAPH
                                (#xCEC2 . #x6E29)	;CJK UNIFIED IDEOGRAPH
                                (#xCEC3 . #x868A)	;CJK UNIFIED IDEOGRAPH
                                (#xCEC4 . #x6587)	;CJK UNIFIED IDEOGRAPH
                                (#xCEC5 . #x95FB)	;CJK UNIFIED IDEOGRAPH
                                (#xCEC6 . #x7EB9)	;CJK UNIFIED IDEOGRAPH
                                (#xCEC7 . #x543B)	;CJK UNIFIED IDEOGRAPH
                                (#xCEC8 . #x7A33)	;CJK UNIFIED IDEOGRAPH
                                (#xCEC9 . #x7D0A)	;CJK UNIFIED IDEOGRAPH
                                (#xCECA . #x95EE)	;CJK UNIFIED IDEOGRAPH
                                (#xCECB . #x55E1)	;CJK UNIFIED IDEOGRAPH
                                (#xCECC . #x7FC1)	;CJK UNIFIED IDEOGRAPH
                                (#xCECD . #x74EE)	;CJK UNIFIED IDEOGRAPH
                                (#xCECE . #x631D)	;CJK UNIFIED IDEOGRAPH
                                (#xCECF . #x8717)	;CJK UNIFIED IDEOGRAPH
                                (#xCED0 . #x6DA1)	;CJK UNIFIED IDEOGRAPH
                                (#xCED1 . #x7A9D)	;CJK UNIFIED IDEOGRAPH
                                (#xCED2 . #x6211)	;CJK UNIFIED IDEOGRAPH
                                (#xCED3 . #x65A1)	;CJK UNIFIED IDEOGRAPH
                                (#xCED4 . #x5367)	;CJK UNIFIED IDEOGRAPH
                                (#xCED5 . #x63E1)	;CJK UNIFIED IDEOGRAPH
                                (#xCED6 . #x6C83)	;CJK UNIFIED IDEOGRAPH
                                (#xCED7 . #x5DEB)	;CJK UNIFIED IDEOGRAPH
                                (#xCED8 . #x545C)	;CJK UNIFIED IDEOGRAPH
                                (#xCED9 . #x94A8)	;CJK UNIFIED IDEOGRAPH
                                (#xCEDA . #x4E4C)	;CJK UNIFIED IDEOGRAPH
                                (#xCEDB . #x6C61)	;CJK UNIFIED IDEOGRAPH
                                (#xCEDC . #x8BEC)	;CJK UNIFIED IDEOGRAPH
                                (#xCEDD . #x5C4B)	;CJK UNIFIED IDEOGRAPH
                                (#xCEDE . #x65E0)	;CJK UNIFIED IDEOGRAPH
                                (#xCEDF . #x829C)	;CJK UNIFIED IDEOGRAPH
                                (#xCEE0 . #x68A7)	;CJK UNIFIED IDEOGRAPH
                                (#xCEE1 . #x543E)	;CJK UNIFIED IDEOGRAPH
                                (#xCEE2 . #x5434)	;CJK UNIFIED IDEOGRAPH
                                (#xCEE3 . #x6BCB)	;CJK UNIFIED IDEOGRAPH
                                (#xCEE4 . #x6B66)	;CJK UNIFIED IDEOGRAPH
                                (#xCEE5 . #x4E94)	;CJK UNIFIED IDEOGRAPH
                                (#xCEE6 . #x6342)	;CJK UNIFIED IDEOGRAPH
                                (#xCEE7 . #x5348)	;CJK UNIFIED IDEOGRAPH
                                (#xCEE8 . #x821E)	;CJK UNIFIED IDEOGRAPH
                                (#xCEE9 . #x4F0D)	;CJK UNIFIED IDEOGRAPH
                                (#xCEEA . #x4FAE)	;CJK UNIFIED IDEOGRAPH
                                (#xCEEB . #x575E)	;CJK UNIFIED IDEOGRAPH
                                (#xCEEC . #x620A)	;CJK UNIFIED IDEOGRAPH
                                (#xCEED . #x96FE)	;CJK UNIFIED IDEOGRAPH
                                (#xCEEE . #x6664)	;CJK UNIFIED IDEOGRAPH
                                (#xCEEF . #x7269)	;CJK UNIFIED IDEOGRAPH
                                (#xCEF0 . #x52FF)	;CJK UNIFIED IDEOGRAPH
                                (#xCEF1 . #x52A1)	;CJK UNIFIED IDEOGRAPH
                                (#xCEF2 . #x609F)	;CJK UNIFIED IDEOGRAPH
                                (#xCEF3 . #x8BEF)	;CJK UNIFIED IDEOGRAPH
                                (#xCEF4 . #x6614)	;CJK UNIFIED IDEOGRAPH
                                (#xCEF5 . #x7199)	;CJK UNIFIED IDEOGRAPH
                                (#xCEF6 . #x6790)	;CJK UNIFIED IDEOGRAPH
                                (#xCEF7 . #x897F)	;CJK UNIFIED IDEOGRAPH
                                (#xCEF8 . #x7852)	;CJK UNIFIED IDEOGRAPH
                                (#xCEF9 . #x77FD)	;CJK UNIFIED IDEOGRAPH
                                (#xCEFA . #x6670)	;CJK UNIFIED IDEOGRAPH
                                (#xCEFB . #x563B)	;CJK UNIFIED IDEOGRAPH
                                (#xCEFC . #x5438)	;CJK UNIFIED IDEOGRAPH
                                (#xCEFD . #x9521)	;CJK UNIFIED IDEOGRAPH
                                (#xCEFE . #x727A)	;CJK UNIFIED IDEOGRAPH
                                (#xCF40 . #x87A5)	;CJK UNIFIED IDEOGRAPH
                                (#xCF41 . #x87A6)	;CJK UNIFIED IDEOGRAPH
                                (#xCF42 . #x87A7)	;CJK UNIFIED IDEOGRAPH
                                (#xCF43 . #x87A9)	;CJK UNIFIED IDEOGRAPH
                                (#xCF44 . #x87AA)	;CJK UNIFIED IDEOGRAPH
                                (#xCF45 . #x87AE)	;CJK UNIFIED IDEOGRAPH
                                (#xCF46 . #x87B0)	;CJK UNIFIED IDEOGRAPH
                                (#xCF47 . #x87B1)	;CJK UNIFIED IDEOGRAPH
                                (#xCF48 . #x87B2)	;CJK UNIFIED IDEOGRAPH
                                (#xCF49 . #x87B4)	;CJK UNIFIED IDEOGRAPH
                                (#xCF4A . #x87B6)	;CJK UNIFIED IDEOGRAPH
                                (#xCF4B . #x87B7)	;CJK UNIFIED IDEOGRAPH
                                (#xCF4C . #x87B8)	;CJK UNIFIED IDEOGRAPH
                                (#xCF4D . #x87B9)	;CJK UNIFIED IDEOGRAPH
                                (#xCF4E . #x87BB)	;CJK UNIFIED IDEOGRAPH
                                (#xCF4F . #x87BC)	;CJK UNIFIED IDEOGRAPH
                                (#xCF50 . #x87BE)	;CJK UNIFIED IDEOGRAPH
                                (#xCF51 . #x87BF)	;CJK UNIFIED IDEOGRAPH
                                (#xCF52 . #x87C1)	;CJK UNIFIED IDEOGRAPH
                                (#xCF53 . #x87C2)	;CJK UNIFIED IDEOGRAPH
                                (#xCF54 . #x87C3)	;CJK UNIFIED IDEOGRAPH
                                (#xCF55 . #x87C4)	;CJK UNIFIED IDEOGRAPH
                                (#xCF56 . #x87C5)	;CJK UNIFIED IDEOGRAPH
                                (#xCF57 . #x87C7)	;CJK UNIFIED IDEOGRAPH
                                (#xCF58 . #x87C8)	;CJK UNIFIED IDEOGRAPH
                                (#xCF59 . #x87C9)	;CJK UNIFIED IDEOGRAPH
                                (#xCF5A . #x87CC)	;CJK UNIFIED IDEOGRAPH
                                (#xCF5B . #x87CD)	;CJK UNIFIED IDEOGRAPH
                                (#xCF5C . #x87CE)	;CJK UNIFIED IDEOGRAPH
                                (#xCF5D . #x87CF)	;CJK UNIFIED IDEOGRAPH
                                (#xCF5E . #x87D0)	;CJK UNIFIED IDEOGRAPH
                                (#xCF5F . #x87D4)	;CJK UNIFIED IDEOGRAPH
                                (#xCF60 . #x87D5)	;CJK UNIFIED IDEOGRAPH
                                (#xCF61 . #x87D6)	;CJK UNIFIED IDEOGRAPH
                                (#xCF62 . #x87D7)	;CJK UNIFIED IDEOGRAPH
                                (#xCF63 . #x87D8)	;CJK UNIFIED IDEOGRAPH
                                (#xCF64 . #x87D9)	;CJK UNIFIED IDEOGRAPH
                                (#xCF65 . #x87DA)	;CJK UNIFIED IDEOGRAPH
                                (#xCF66 . #x87DC)	;CJK UNIFIED IDEOGRAPH
                                (#xCF67 . #x87DD)	;CJK UNIFIED IDEOGRAPH
                                (#xCF68 . #x87DE)	;CJK UNIFIED IDEOGRAPH
                                (#xCF69 . #x87DF)	;CJK UNIFIED IDEOGRAPH
                                (#xCF6A . #x87E1)	;CJK UNIFIED IDEOGRAPH
                                (#xCF6B . #x87E2)	;CJK UNIFIED IDEOGRAPH
                                (#xCF6C . #x87E3)	;CJK UNIFIED IDEOGRAPH
                                (#xCF6D . #x87E4)	;CJK UNIFIED IDEOGRAPH
                                (#xCF6E . #x87E6)	;CJK UNIFIED IDEOGRAPH
                                (#xCF6F . #x87E7)	;CJK UNIFIED IDEOGRAPH
                                (#xCF70 . #x87E8)	;CJK UNIFIED IDEOGRAPH
                                (#xCF71 . #x87E9)	;CJK UNIFIED IDEOGRAPH
                                (#xCF72 . #x87EB)	;CJK UNIFIED IDEOGRAPH
                                (#xCF73 . #x87EC)	;CJK UNIFIED IDEOGRAPH
                                (#xCF74 . #x87ED)	;CJK UNIFIED IDEOGRAPH
                                (#xCF75 . #x87EF)	;CJK UNIFIED IDEOGRAPH
                                (#xCF76 . #x87F0)	;CJK UNIFIED IDEOGRAPH
                                (#xCF77 . #x87F1)	;CJK UNIFIED IDEOGRAPH
                                (#xCF78 . #x87F2)	;CJK UNIFIED IDEOGRAPH
                                (#xCF79 . #x87F3)	;CJK UNIFIED IDEOGRAPH
                                (#xCF7A . #x87F4)	;CJK UNIFIED IDEOGRAPH
                                (#xCF7B . #x87F5)	;CJK UNIFIED IDEOGRAPH
                                (#xCF7C . #x87F6)	;CJK UNIFIED IDEOGRAPH
                                (#xCF7D . #x87F7)	;CJK UNIFIED IDEOGRAPH
                                (#xCF7E . #x87F8)	;CJK UNIFIED IDEOGRAPH
                                (#xCF80 . #x87FA)	;CJK UNIFIED IDEOGRAPH
                                (#xCF81 . #x87FB)	;CJK UNIFIED IDEOGRAPH
                                (#xCF82 . #x87FC)	;CJK UNIFIED IDEOGRAPH
                                (#xCF83 . #x87FD)	;CJK UNIFIED IDEOGRAPH
                                (#xCF84 . #x87FF)	;CJK UNIFIED IDEOGRAPH
                                (#xCF85 . #x8800)	;CJK UNIFIED IDEOGRAPH
                                (#xCF86 . #x8801)	;CJK UNIFIED IDEOGRAPH
                                (#xCF87 . #x8802)	;CJK UNIFIED IDEOGRAPH
                                (#xCF88 . #x8804)	;CJK UNIFIED IDEOGRAPH
                                (#xCF89 . #x8805)	;CJK UNIFIED IDEOGRAPH
                                (#xCF8A . #x8806)	;CJK UNIFIED IDEOGRAPH
                                (#xCF8B . #x8807)	;CJK UNIFIED IDEOGRAPH
                                (#xCF8C . #x8808)	;CJK UNIFIED IDEOGRAPH
                                (#xCF8D . #x8809)	;CJK UNIFIED IDEOGRAPH
                                (#xCF8E . #x880B)	;CJK UNIFIED IDEOGRAPH
                                (#xCF8F . #x880C)	;CJK UNIFIED IDEOGRAPH
                                (#xCF90 . #x880D)	;CJK UNIFIED IDEOGRAPH
                                (#xCF91 . #x880E)	;CJK UNIFIED IDEOGRAPH
                                (#xCF92 . #x880F)	;CJK UNIFIED IDEOGRAPH
                                (#xCF93 . #x8810)	;CJK UNIFIED IDEOGRAPH
                                (#xCF94 . #x8811)	;CJK UNIFIED IDEOGRAPH
                                (#xCF95 . #x8812)	;CJK UNIFIED IDEOGRAPH
                                (#xCF96 . #x8814)	;CJK UNIFIED IDEOGRAPH
                                (#xCF97 . #x8817)	;CJK UNIFIED IDEOGRAPH
                                (#xCF98 . #x8818)	;CJK UNIFIED IDEOGRAPH
                                (#xCF99 . #x8819)	;CJK UNIFIED IDEOGRAPH
                                (#xCF9A . #x881A)	;CJK UNIFIED IDEOGRAPH
                                (#xCF9B . #x881C)	;CJK UNIFIED IDEOGRAPH
                                (#xCF9C . #x881D)	;CJK UNIFIED IDEOGRAPH
                                (#xCF9D . #x881E)	;CJK UNIFIED IDEOGRAPH
                                (#xCF9E . #x881F)	;CJK UNIFIED IDEOGRAPH
                                (#xCF9F . #x8820)	;CJK UNIFIED IDEOGRAPH
                                (#xCFA0 . #x8823)	;CJK UNIFIED IDEOGRAPH
                                (#xCFA1 . #x7A00)	;CJK UNIFIED IDEOGRAPH
                                (#xCFA2 . #x606F)	;CJK UNIFIED IDEOGRAPH
                                (#xCFA3 . #x5E0C)	;CJK UNIFIED IDEOGRAPH
                                (#xCFA4 . #x6089)	;CJK UNIFIED IDEOGRAPH
                                (#xCFA5 . #x819D)	;CJK UNIFIED IDEOGRAPH
                                (#xCFA6 . #x5915)	;CJK UNIFIED IDEOGRAPH
                                (#xCFA7 . #x60DC)	;CJK UNIFIED IDEOGRAPH
                                (#xCFA8 . #x7184)	;CJK UNIFIED IDEOGRAPH
                                (#xCFA9 . #x70EF)	;CJK UNIFIED IDEOGRAPH
                                (#xCFAA . #x6EAA)	;CJK UNIFIED IDEOGRAPH
                                (#xCFAB . #x6C50)	;CJK UNIFIED IDEOGRAPH
                                (#xCFAC . #x7280)	;CJK UNIFIED IDEOGRAPH
                                (#xCFAD . #x6A84)	;CJK UNIFIED IDEOGRAPH
                                (#xCFAE . #x88AD)	;CJK UNIFIED IDEOGRAPH
                                (#xCFAF . #x5E2D)	;CJK UNIFIED IDEOGRAPH
                                (#xCFB0 . #x4E60)	;CJK UNIFIED IDEOGRAPH
                                (#xCFB1 . #x5AB3)	;CJK UNIFIED IDEOGRAPH
                                (#xCFB2 . #x559C)	;CJK UNIFIED IDEOGRAPH
                                (#xCFB3 . #x94E3)	;CJK UNIFIED IDEOGRAPH
                                (#xCFB4 . #x6D17)	;CJK UNIFIED IDEOGRAPH
                                (#xCFB5 . #x7CFB)	;CJK UNIFIED IDEOGRAPH
                                (#xCFB6 . #x9699)	;CJK UNIFIED IDEOGRAPH
                                (#xCFB7 . #x620F)	;CJK UNIFIED IDEOGRAPH
                                (#xCFB8 . #x7EC6)	;CJK UNIFIED IDEOGRAPH
                                (#xCFB9 . #x778E)	;CJK UNIFIED IDEOGRAPH
                                (#xCFBA . #x867E)	;CJK UNIFIED IDEOGRAPH
                                (#xCFBB . #x5323)	;CJK UNIFIED IDEOGRAPH
                                (#xCFBC . #x971E)	;CJK UNIFIED IDEOGRAPH
                                (#xCFBD . #x8F96)	;CJK UNIFIED IDEOGRAPH
                                (#xCFBE . #x6687)	;CJK UNIFIED IDEOGRAPH
                                (#xCFBF . #x5CE1)	;CJK UNIFIED IDEOGRAPH
                                (#xCFC0 . #x4FA0)	;CJK UNIFIED IDEOGRAPH
                                (#xCFC1 . #x72ED)	;CJK UNIFIED IDEOGRAPH
                                (#xCFC2 . #x4E0B)	;CJK UNIFIED IDEOGRAPH
                                (#xCFC3 . #x53A6)	;CJK UNIFIED IDEOGRAPH
                                (#xCFC4 . #x590F)	;CJK UNIFIED IDEOGRAPH
                                (#xCFC5 . #x5413)	;CJK UNIFIED IDEOGRAPH
                                (#xCFC6 . #x6380)	;CJK UNIFIED IDEOGRAPH
                                (#xCFC7 . #x9528)	;CJK UNIFIED IDEOGRAPH
                                (#xCFC8 . #x5148)	;CJK UNIFIED IDEOGRAPH
                                (#xCFC9 . #x4ED9)	;CJK UNIFIED IDEOGRAPH
                                (#xCFCA . #x9C9C)	;CJK UNIFIED IDEOGRAPH
                                (#xCFCB . #x7EA4)	;CJK UNIFIED IDEOGRAPH
                                (#xCFCC . #x54B8)	;CJK UNIFIED IDEOGRAPH
                                (#xCFCD . #x8D24)	;CJK UNIFIED IDEOGRAPH
                                (#xCFCE . #x8854)	;CJK UNIFIED IDEOGRAPH
                                (#xCFCF . #x8237)	;CJK UNIFIED IDEOGRAPH
                                (#xCFD0 . #x95F2)	;CJK UNIFIED IDEOGRAPH
                                (#xCFD1 . #x6D8E)	;CJK UNIFIED IDEOGRAPH
                                (#xCFD2 . #x5F26)	;CJK UNIFIED IDEOGRAPH
                                (#xCFD3 . #x5ACC)	;CJK UNIFIED IDEOGRAPH
                                (#xCFD4 . #x663E)	;CJK UNIFIED IDEOGRAPH
                                (#xCFD5 . #x9669)	;CJK UNIFIED IDEOGRAPH
                                (#xCFD6 . #x73B0)	;CJK UNIFIED IDEOGRAPH
                                (#xCFD7 . #x732E)	;CJK UNIFIED IDEOGRAPH
                                (#xCFD8 . #x53BF)	;CJK UNIFIED IDEOGRAPH
                                (#xCFD9 . #x817A)	;CJK UNIFIED IDEOGRAPH
                                (#xCFDA . #x9985)	;CJK UNIFIED IDEOGRAPH
                                (#xCFDB . #x7FA1)	;CJK UNIFIED IDEOGRAPH
                                (#xCFDC . #x5BAA)	;CJK UNIFIED IDEOGRAPH
                                (#xCFDD . #x9677)	;CJK UNIFIED IDEOGRAPH
                                (#xCFDE . #x9650)	;CJK UNIFIED IDEOGRAPH
                                (#xCFDF . #x7EBF)	;CJK UNIFIED IDEOGRAPH
                                (#xCFE0 . #x76F8)	;CJK UNIFIED IDEOGRAPH
                                (#xCFE1 . #x53A2)	;CJK UNIFIED IDEOGRAPH
                                (#xCFE2 . #x9576)	;CJK UNIFIED IDEOGRAPH
                                (#xCFE3 . #x9999)	;CJK UNIFIED IDEOGRAPH
                                (#xCFE4 . #x7BB1)	;CJK UNIFIED IDEOGRAPH
                                (#xCFE5 . #x8944)	;CJK UNIFIED IDEOGRAPH
                                (#xCFE6 . #x6E58)	;CJK UNIFIED IDEOGRAPH
                                (#xCFE7 . #x4E61)	;CJK UNIFIED IDEOGRAPH
                                (#xCFE8 . #x7FD4)	;CJK UNIFIED IDEOGRAPH
                                (#xCFE9 . #x7965)	;CJK UNIFIED IDEOGRAPH
                                (#xCFEA . #x8BE6)	;CJK UNIFIED IDEOGRAPH
                                (#xCFEB . #x60F3)	;CJK UNIFIED IDEOGRAPH
                                (#xCFEC . #x54CD)	;CJK UNIFIED IDEOGRAPH
                                (#xCFED . #x4EAB)	;CJK UNIFIED IDEOGRAPH
                                (#xCFEE . #x9879)	;CJK UNIFIED IDEOGRAPH
                                (#xCFEF . #x5DF7)	;CJK UNIFIED IDEOGRAPH
                                (#xCFF0 . #x6A61)	;CJK UNIFIED IDEOGRAPH
                                (#xCFF1 . #x50CF)	;CJK UNIFIED IDEOGRAPH
                                (#xCFF2 . #x5411)	;CJK UNIFIED IDEOGRAPH
                                (#xCFF3 . #x8C61)	;CJK UNIFIED IDEOGRAPH
                                (#xCFF4 . #x8427)	;CJK UNIFIED IDEOGRAPH
                                (#xCFF5 . #x785D)	;CJK UNIFIED IDEOGRAPH
                                (#xCFF6 . #x9704)	;CJK UNIFIED IDEOGRAPH
                                (#xCFF7 . #x524A)	;CJK UNIFIED IDEOGRAPH
                                (#xCFF8 . #x54EE)	;CJK UNIFIED IDEOGRAPH
                                (#xCFF9 . #x56A3)	;CJK UNIFIED IDEOGRAPH
                                (#xCFFA . #x9500)	;CJK UNIFIED IDEOGRAPH
                                (#xCFFB . #x6D88)	;CJK UNIFIED IDEOGRAPH
                                (#xCFFC . #x5BB5)	;CJK UNIFIED IDEOGRAPH
                                (#xCFFD . #x6DC6)	;CJK UNIFIED IDEOGRAPH
                                (#xCFFE . #x6653)	;CJK UNIFIED IDEOGRAPH
                                (#xD040 . #x8824)	;CJK UNIFIED IDEOGRAPH
                                (#xD041 . #x8825)	;CJK UNIFIED IDEOGRAPH
                                (#xD042 . #x8826)	;CJK UNIFIED IDEOGRAPH
                                (#xD043 . #x8827)	;CJK UNIFIED IDEOGRAPH
                                (#xD044 . #x8828)	;CJK UNIFIED IDEOGRAPH
                                (#xD045 . #x8829)	;CJK UNIFIED IDEOGRAPH
                                (#xD046 . #x882A)	;CJK UNIFIED IDEOGRAPH
                                (#xD047 . #x882B)	;CJK UNIFIED IDEOGRAPH
                                (#xD048 . #x882C)	;CJK UNIFIED IDEOGRAPH
                                (#xD049 . #x882D)	;CJK UNIFIED IDEOGRAPH
                                (#xD04A . #x882E)	;CJK UNIFIED IDEOGRAPH
                                (#xD04B . #x882F)	;CJK UNIFIED IDEOGRAPH
                                (#xD04C . #x8830)	;CJK UNIFIED IDEOGRAPH
                                (#xD04D . #x8831)	;CJK UNIFIED IDEOGRAPH
                                (#xD04E . #x8833)	;CJK UNIFIED IDEOGRAPH
                                (#xD04F . #x8834)	;CJK UNIFIED IDEOGRAPH
                                (#xD050 . #x8835)	;CJK UNIFIED IDEOGRAPH
                                (#xD051 . #x8836)	;CJK UNIFIED IDEOGRAPH
                                (#xD052 . #x8837)	;CJK UNIFIED IDEOGRAPH
                                (#xD053 . #x8838)	;CJK UNIFIED IDEOGRAPH
                                (#xD054 . #x883A)	;CJK UNIFIED IDEOGRAPH
                                (#xD055 . #x883B)	;CJK UNIFIED IDEOGRAPH
                                (#xD056 . #x883D)	;CJK UNIFIED IDEOGRAPH
                                (#xD057 . #x883E)	;CJK UNIFIED IDEOGRAPH
                                (#xD058 . #x883F)	;CJK UNIFIED IDEOGRAPH
                                (#xD059 . #x8841)	;CJK UNIFIED IDEOGRAPH
                                (#xD05A . #x8842)	;CJK UNIFIED IDEOGRAPH
                                (#xD05B . #x8843)	;CJK UNIFIED IDEOGRAPH
                                (#xD05C . #x8846)	;CJK UNIFIED IDEOGRAPH
                                (#xD05D . #x8847)	;CJK UNIFIED IDEOGRAPH
                                (#xD05E . #x8848)	;CJK UNIFIED IDEOGRAPH
                                (#xD05F . #x8849)	;CJK UNIFIED IDEOGRAPH
                                (#xD060 . #x884A)	;CJK UNIFIED IDEOGRAPH
                                (#xD061 . #x884B)	;CJK UNIFIED IDEOGRAPH
                                (#xD062 . #x884E)	;CJK UNIFIED IDEOGRAPH
                                (#xD063 . #x884F)	;CJK UNIFIED IDEOGRAPH
                                (#xD064 . #x8850)	;CJK UNIFIED IDEOGRAPH
                                (#xD065 . #x8851)	;CJK UNIFIED IDEOGRAPH
                                (#xD066 . #x8852)	;CJK UNIFIED IDEOGRAPH
                                (#xD067 . #x8853)	;CJK UNIFIED IDEOGRAPH
                                (#xD068 . #x8855)	;CJK UNIFIED IDEOGRAPH
                                (#xD069 . #x8856)	;CJK UNIFIED IDEOGRAPH
                                (#xD06A . #x8858)	;CJK UNIFIED IDEOGRAPH
                                (#xD06B . #x885A)	;CJK UNIFIED IDEOGRAPH
                                (#xD06C . #x885B)	;CJK UNIFIED IDEOGRAPH
                                (#xD06D . #x885C)	;CJK UNIFIED IDEOGRAPH
                                (#xD06E . #x885D)	;CJK UNIFIED IDEOGRAPH
                                (#xD06F . #x885E)	;CJK UNIFIED IDEOGRAPH
                                (#xD070 . #x885F)	;CJK UNIFIED IDEOGRAPH
                                (#xD071 . #x8860)	;CJK UNIFIED IDEOGRAPH
                                (#xD072 . #x8866)	;CJK UNIFIED IDEOGRAPH
                                (#xD073 . #x8867)	;CJK UNIFIED IDEOGRAPH
                                (#xD074 . #x886A)	;CJK UNIFIED IDEOGRAPH
                                (#xD075 . #x886D)	;CJK UNIFIED IDEOGRAPH
                                (#xD076 . #x886F)	;CJK UNIFIED IDEOGRAPH
                                (#xD077 . #x8871)	;CJK UNIFIED IDEOGRAPH
                                (#xD078 . #x8873)	;CJK UNIFIED IDEOGRAPH
                                (#xD079 . #x8874)	;CJK UNIFIED IDEOGRAPH
                                (#xD07A . #x8875)	;CJK UNIFIED IDEOGRAPH
                                (#xD07B . #x8876)	;CJK UNIFIED IDEOGRAPH
                                (#xD07C . #x8878)	;CJK UNIFIED IDEOGRAPH
                                (#xD07D . #x8879)	;CJK UNIFIED IDEOGRAPH
                                (#xD07E . #x887A)	;CJK UNIFIED IDEOGRAPH
                                (#xD080 . #x887B)	;CJK UNIFIED IDEOGRAPH
                                (#xD081 . #x887C)	;CJK UNIFIED IDEOGRAPH
                                (#xD082 . #x8880)	;CJK UNIFIED IDEOGRAPH
                                (#xD083 . #x8883)	;CJK UNIFIED IDEOGRAPH
                                (#xD084 . #x8886)	;CJK UNIFIED IDEOGRAPH
                                (#xD085 . #x8887)	;CJK UNIFIED IDEOGRAPH
                                (#xD086 . #x8889)	;CJK UNIFIED IDEOGRAPH
                                (#xD087 . #x888A)	;CJK UNIFIED IDEOGRAPH
                                (#xD088 . #x888C)	;CJK UNIFIED IDEOGRAPH
                                (#xD089 . #x888E)	;CJK UNIFIED IDEOGRAPH
                                (#xD08A . #x888F)	;CJK UNIFIED IDEOGRAPH
                                (#xD08B . #x8890)	;CJK UNIFIED IDEOGRAPH
                                (#xD08C . #x8891)	;CJK UNIFIED IDEOGRAPH
                                (#xD08D . #x8893)	;CJK UNIFIED IDEOGRAPH
                                (#xD08E . #x8894)	;CJK UNIFIED IDEOGRAPH
                                (#xD08F . #x8895)	;CJK UNIFIED IDEOGRAPH
                                (#xD090 . #x8897)	;CJK UNIFIED IDEOGRAPH
                                (#xD091 . #x8898)	;CJK UNIFIED IDEOGRAPH
                                (#xD092 . #x8899)	;CJK UNIFIED IDEOGRAPH
                                (#xD093 . #x889A)	;CJK UNIFIED IDEOGRAPH
                                (#xD094 . #x889B)	;CJK UNIFIED IDEOGRAPH
                                (#xD095 . #x889D)	;CJK UNIFIED IDEOGRAPH
                                (#xD096 . #x889E)	;CJK UNIFIED IDEOGRAPH
                                (#xD097 . #x889F)	;CJK UNIFIED IDEOGRAPH
                                (#xD098 . #x88A0)	;CJK UNIFIED IDEOGRAPH
                                (#xD099 . #x88A1)	;CJK UNIFIED IDEOGRAPH
                                (#xD09A . #x88A3)	;CJK UNIFIED IDEOGRAPH
                                (#xD09B . #x88A5)	;CJK UNIFIED IDEOGRAPH
                                (#xD09C . #x88A6)	;CJK UNIFIED IDEOGRAPH
                                (#xD09D . #x88A7)	;CJK UNIFIED IDEOGRAPH
                                (#xD09E . #x88A8)	;CJK UNIFIED IDEOGRAPH
                                (#xD09F . #x88A9)	;CJK UNIFIED IDEOGRAPH
                                (#xD0A0 . #x88AA)	;CJK UNIFIED IDEOGRAPH
                                (#xD0A1 . #x5C0F)	;CJK UNIFIED IDEOGRAPH
                                (#xD0A2 . #x5B5D)	;CJK UNIFIED IDEOGRAPH
                                (#xD0A3 . #x6821)	;CJK UNIFIED IDEOGRAPH
                                (#xD0A4 . #x8096)	;CJK UNIFIED IDEOGRAPH
                                (#xD0A5 . #x5578)	;CJK UNIFIED IDEOGRAPH
                                (#xD0A6 . #x7B11)	;CJK UNIFIED IDEOGRAPH
                                (#xD0A7 . #x6548)	;CJK UNIFIED IDEOGRAPH
                                (#xD0A8 . #x6954)	;CJK UNIFIED IDEOGRAPH
                                (#xD0A9 . #x4E9B)	;CJK UNIFIED IDEOGRAPH
                                (#xD0AA . #x6B47)	;CJK UNIFIED IDEOGRAPH
                                (#xD0AB . #x874E)	;CJK UNIFIED IDEOGRAPH
                                (#xD0AC . #x978B)	;CJK UNIFIED IDEOGRAPH
                                (#xD0AD . #x534F)	;CJK UNIFIED IDEOGRAPH
                                (#xD0AE . #x631F)	;CJK UNIFIED IDEOGRAPH
                                (#xD0AF . #x643A)	;CJK UNIFIED IDEOGRAPH
                                (#xD0B0 . #x90AA)	;CJK UNIFIED IDEOGRAPH
                                (#xD0B1 . #x659C)	;CJK UNIFIED IDEOGRAPH
                                (#xD0B2 . #x80C1)	;CJK UNIFIED IDEOGRAPH
                                (#xD0B3 . #x8C10)	;CJK UNIFIED IDEOGRAPH
                                (#xD0B4 . #x5199)	;CJK UNIFIED IDEOGRAPH
                                (#xD0B5 . #x68B0)	;CJK UNIFIED IDEOGRAPH
                                (#xD0B6 . #x5378)	;CJK UNIFIED IDEOGRAPH
                                (#xD0B7 . #x87F9)	;CJK UNIFIED IDEOGRAPH
                                (#xD0B8 . #x61C8)	;CJK UNIFIED IDEOGRAPH
                                (#xD0B9 . #x6CC4)	;CJK UNIFIED IDEOGRAPH
                                (#xD0BA . #x6CFB)	;CJK UNIFIED IDEOGRAPH
                                (#xD0BB . #x8C22)	;CJK UNIFIED IDEOGRAPH
                                (#xD0BC . #x5C51)	;CJK UNIFIED IDEOGRAPH
                                (#xD0BD . #x85AA)	;CJK UNIFIED IDEOGRAPH
                                (#xD0BE . #x82AF)	;CJK UNIFIED IDEOGRAPH
                                (#xD0BF . #x950C)	;CJK UNIFIED IDEOGRAPH
                                (#xD0C0 . #x6B23)	;CJK UNIFIED IDEOGRAPH
                                (#xD0C1 . #x8F9B)	;CJK UNIFIED IDEOGRAPH
                                (#xD0C2 . #x65B0)	;CJK UNIFIED IDEOGRAPH
                                (#xD0C3 . #x5FFB)	;CJK UNIFIED IDEOGRAPH
                                (#xD0C4 . #x5FC3)	;CJK UNIFIED IDEOGRAPH
                                (#xD0C5 . #x4FE1)	;CJK UNIFIED IDEOGRAPH
                                (#xD0C6 . #x8845)	;CJK UNIFIED IDEOGRAPH
                                (#xD0C7 . #x661F)	;CJK UNIFIED IDEOGRAPH
                                (#xD0C8 . #x8165)	;CJK UNIFIED IDEOGRAPH
                                (#xD0C9 . #x7329)	;CJK UNIFIED IDEOGRAPH
                                (#xD0CA . #x60FA)	;CJK UNIFIED IDEOGRAPH
                                (#xD0CB . #x5174)	;CJK UNIFIED IDEOGRAPH
                                (#xD0CC . #x5211)	;CJK UNIFIED IDEOGRAPH
                                (#xD0CD . #x578B)	;CJK UNIFIED IDEOGRAPH
                                (#xD0CE . #x5F62)	;CJK UNIFIED IDEOGRAPH
                                (#xD0CF . #x90A2)	;CJK UNIFIED IDEOGRAPH
                                (#xD0D0 . #x884C)	;CJK UNIFIED IDEOGRAPH
                                (#xD0D1 . #x9192)	;CJK UNIFIED IDEOGRAPH
                                (#xD0D2 . #x5E78)	;CJK UNIFIED IDEOGRAPH
                                (#xD0D3 . #x674F)	;CJK UNIFIED IDEOGRAPH
                                (#xD0D4 . #x6027)	;CJK UNIFIED IDEOGRAPH
                                (#xD0D5 . #x59D3)	;CJK UNIFIED IDEOGRAPH
                                (#xD0D6 . #x5144)	;CJK UNIFIED IDEOGRAPH
                                (#xD0D7 . #x51F6)	;CJK UNIFIED IDEOGRAPH
                                (#xD0D8 . #x80F8)	;CJK UNIFIED IDEOGRAPH
                                (#xD0D9 . #x5308)	;CJK UNIFIED IDEOGRAPH
                                (#xD0DA . #x6C79)	;CJK UNIFIED IDEOGRAPH
                                (#xD0DB . #x96C4)	;CJK UNIFIED IDEOGRAPH
                                (#xD0DC . #x718A)	;CJK UNIFIED IDEOGRAPH
                                (#xD0DD . #x4F11)	;CJK UNIFIED IDEOGRAPH
                                (#xD0DE . #x4FEE)	;CJK UNIFIED IDEOGRAPH
                                (#xD0DF . #x7F9E)	;CJK UNIFIED IDEOGRAPH
                                (#xD0E0 . #x673D)	;CJK UNIFIED IDEOGRAPH
                                (#xD0E1 . #x55C5)	;CJK UNIFIED IDEOGRAPH
                                (#xD0E2 . #x9508)	;CJK UNIFIED IDEOGRAPH
                                (#xD0E3 . #x79C0)	;CJK UNIFIED IDEOGRAPH
                                (#xD0E4 . #x8896)	;CJK UNIFIED IDEOGRAPH
                                (#xD0E5 . #x7EE3)	;CJK UNIFIED IDEOGRAPH
                                (#xD0E6 . #x589F)	;CJK UNIFIED IDEOGRAPH
                                (#xD0E7 . #x620C)	;CJK UNIFIED IDEOGRAPH
                                (#xD0E8 . #x9700)	;CJK UNIFIED IDEOGRAPH
                                (#xD0E9 . #x865A)	;CJK UNIFIED IDEOGRAPH
                                (#xD0EA . #x5618)	;CJK UNIFIED IDEOGRAPH
                                (#xD0EB . #x987B)	;CJK UNIFIED IDEOGRAPH
                                (#xD0EC . #x5F90)	;CJK UNIFIED IDEOGRAPH
                                (#xD0ED . #x8BB8)	;CJK UNIFIED IDEOGRAPH
                                (#xD0EE . #x84C4)	;CJK UNIFIED IDEOGRAPH
                                (#xD0EF . #x9157)	;CJK UNIFIED IDEOGRAPH
                                (#xD0F0 . #x53D9)	;CJK UNIFIED IDEOGRAPH
                                (#xD0F1 . #x65ED)	;CJK UNIFIED IDEOGRAPH
                                (#xD0F2 . #x5E8F)	;CJK UNIFIED IDEOGRAPH
                                (#xD0F3 . #x755C)	;CJK UNIFIED IDEOGRAPH
                                (#xD0F4 . #x6064)	;CJK UNIFIED IDEOGRAPH
                                (#xD0F5 . #x7D6E)	;CJK UNIFIED IDEOGRAPH
                                (#xD0F6 . #x5A7F)	;CJK UNIFIED IDEOGRAPH
                                (#xD0F7 . #x7EEA)	;CJK UNIFIED IDEOGRAPH
                                (#xD0F8 . #x7EED)	;CJK UNIFIED IDEOGRAPH
                                (#xD0F9 . #x8F69)	;CJK UNIFIED IDEOGRAPH
                                (#xD0FA . #x55A7)	;CJK UNIFIED IDEOGRAPH
                                (#xD0FB . #x5BA3)	;CJK UNIFIED IDEOGRAPH
                                (#xD0FC . #x60AC)	;CJK UNIFIED IDEOGRAPH
                                (#xD0FD . #x65CB)	;CJK UNIFIED IDEOGRAPH
                                (#xD0FE . #x7384)	;CJK UNIFIED IDEOGRAPH
                                (#xD140 . #x88AC)	;CJK UNIFIED IDEOGRAPH
                                (#xD141 . #x88AE)	;CJK UNIFIED IDEOGRAPH
                                (#xD142 . #x88AF)	;CJK UNIFIED IDEOGRAPH
                                (#xD143 . #x88B0)	;CJK UNIFIED IDEOGRAPH
                                (#xD144 . #x88B2)	;CJK UNIFIED IDEOGRAPH
                                (#xD145 . #x88B3)	;CJK UNIFIED IDEOGRAPH
                                (#xD146 . #x88B4)	;CJK UNIFIED IDEOGRAPH
                                (#xD147 . #x88B5)	;CJK UNIFIED IDEOGRAPH
                                (#xD148 . #x88B6)	;CJK UNIFIED IDEOGRAPH
                                (#xD149 . #x88B8)	;CJK UNIFIED IDEOGRAPH
                                (#xD14A . #x88B9)	;CJK UNIFIED IDEOGRAPH
                                (#xD14B . #x88BA)	;CJK UNIFIED IDEOGRAPH
                                (#xD14C . #x88BB)	;CJK UNIFIED IDEOGRAPH
                                (#xD14D . #x88BD)	;CJK UNIFIED IDEOGRAPH
                                (#xD14E . #x88BE)	;CJK UNIFIED IDEOGRAPH
                                (#xD14F . #x88BF)	;CJK UNIFIED IDEOGRAPH
                                (#xD150 . #x88C0)	;CJK UNIFIED IDEOGRAPH
                                (#xD151 . #x88C3)	;CJK UNIFIED IDEOGRAPH
                                (#xD152 . #x88C4)	;CJK UNIFIED IDEOGRAPH
                                (#xD153 . #x88C7)	;CJK UNIFIED IDEOGRAPH
                                (#xD154 . #x88C8)	;CJK UNIFIED IDEOGRAPH
                                (#xD155 . #x88CA)	;CJK UNIFIED IDEOGRAPH
                                (#xD156 . #x88CB)	;CJK UNIFIED IDEOGRAPH
                                (#xD157 . #x88CC)	;CJK UNIFIED IDEOGRAPH
                                (#xD158 . #x88CD)	;CJK UNIFIED IDEOGRAPH
                                (#xD159 . #x88CF)	;CJK UNIFIED IDEOGRAPH
                                (#xD15A . #x88D0)	;CJK UNIFIED IDEOGRAPH
                                (#xD15B . #x88D1)	;CJK UNIFIED IDEOGRAPH
                                (#xD15C . #x88D3)	;CJK UNIFIED IDEOGRAPH
                                (#xD15D . #x88D6)	;CJK UNIFIED IDEOGRAPH
                                (#xD15E . #x88D7)	;CJK UNIFIED IDEOGRAPH
                                (#xD15F . #x88DA)	;CJK UNIFIED IDEOGRAPH
                                (#xD160 . #x88DB)	;CJK UNIFIED IDEOGRAPH
                                (#xD161 . #x88DC)	;CJK UNIFIED IDEOGRAPH
                                (#xD162 . #x88DD)	;CJK UNIFIED IDEOGRAPH
                                (#xD163 . #x88DE)	;CJK UNIFIED IDEOGRAPH
                                (#xD164 . #x88E0)	;CJK UNIFIED IDEOGRAPH
                                (#xD165 . #x88E1)	;CJK UNIFIED IDEOGRAPH
                                (#xD166 . #x88E6)	;CJK UNIFIED IDEOGRAPH
                                (#xD167 . #x88E7)	;CJK UNIFIED IDEOGRAPH
                                (#xD168 . #x88E9)	;CJK UNIFIED IDEOGRAPH
                                (#xD169 . #x88EA)	;CJK UNIFIED IDEOGRAPH
                                (#xD16A . #x88EB)	;CJK UNIFIED IDEOGRAPH
                                (#xD16B . #x88EC)	;CJK UNIFIED IDEOGRAPH
                                (#xD16C . #x88ED)	;CJK UNIFIED IDEOGRAPH
                                (#xD16D . #x88EE)	;CJK UNIFIED IDEOGRAPH
                                (#xD16E . #x88EF)	;CJK UNIFIED IDEOGRAPH
                                (#xD16F . #x88F2)	;CJK UNIFIED IDEOGRAPH
                                (#xD170 . #x88F5)	;CJK UNIFIED IDEOGRAPH
                                (#xD171 . #x88F6)	;CJK UNIFIED IDEOGRAPH
                                (#xD172 . #x88F7)	;CJK UNIFIED IDEOGRAPH
                                (#xD173 . #x88FA)	;CJK UNIFIED IDEOGRAPH
                                (#xD174 . #x88FB)	;CJK UNIFIED IDEOGRAPH
                                (#xD175 . #x88FD)	;CJK UNIFIED IDEOGRAPH
                                (#xD176 . #x88FF)	;CJK UNIFIED IDEOGRAPH
                                (#xD177 . #x8900)	;CJK UNIFIED IDEOGRAPH
                                (#xD178 . #x8901)	;CJK UNIFIED IDEOGRAPH
                                (#xD179 . #x8903)	;CJK UNIFIED IDEOGRAPH
                                (#xD17A . #x8904)	;CJK UNIFIED IDEOGRAPH
                                (#xD17B . #x8905)	;CJK UNIFIED IDEOGRAPH
                                (#xD17C . #x8906)	;CJK UNIFIED IDEOGRAPH
                                (#xD17D . #x8907)	;CJK UNIFIED IDEOGRAPH
                                (#xD17E . #x8908)	;CJK UNIFIED IDEOGRAPH
                                (#xD180 . #x8909)	;CJK UNIFIED IDEOGRAPH
                                (#xD181 . #x890B)	;CJK UNIFIED IDEOGRAPH
                                (#xD182 . #x890C)	;CJK UNIFIED IDEOGRAPH
                                (#xD183 . #x890D)	;CJK UNIFIED IDEOGRAPH
                                (#xD184 . #x890E)	;CJK UNIFIED IDEOGRAPH
                                (#xD185 . #x890F)	;CJK UNIFIED IDEOGRAPH
                                (#xD186 . #x8911)	;CJK UNIFIED IDEOGRAPH
                                (#xD187 . #x8914)	;CJK UNIFIED IDEOGRAPH
                                (#xD188 . #x8915)	;CJK UNIFIED IDEOGRAPH
                                (#xD189 . #x8916)	;CJK UNIFIED IDEOGRAPH
                                (#xD18A . #x8917)	;CJK UNIFIED IDEOGRAPH
                                (#xD18B . #x8918)	;CJK UNIFIED IDEOGRAPH
                                (#xD18C . #x891C)	;CJK UNIFIED IDEOGRAPH
                                (#xD18D . #x891D)	;CJK UNIFIED IDEOGRAPH
                                (#xD18E . #x891E)	;CJK UNIFIED IDEOGRAPH
                                (#xD18F . #x891F)	;CJK UNIFIED IDEOGRAPH
                                (#xD190 . #x8920)	;CJK UNIFIED IDEOGRAPH
                                (#xD191 . #x8922)	;CJK UNIFIED IDEOGRAPH
                                (#xD192 . #x8923)	;CJK UNIFIED IDEOGRAPH
                                (#xD193 . #x8924)	;CJK UNIFIED IDEOGRAPH
                                (#xD194 . #x8926)	;CJK UNIFIED IDEOGRAPH
                                (#xD195 . #x8927)	;CJK UNIFIED IDEOGRAPH
                                (#xD196 . #x8928)	;CJK UNIFIED IDEOGRAPH
                                (#xD197 . #x8929)	;CJK UNIFIED IDEOGRAPH
                                (#xD198 . #x892C)	;CJK UNIFIED IDEOGRAPH
                                (#xD199 . #x892D)	;CJK UNIFIED IDEOGRAPH
                                (#xD19A . #x892E)	;CJK UNIFIED IDEOGRAPH
                                (#xD19B . #x892F)	;CJK UNIFIED IDEOGRAPH
                                (#xD19C . #x8931)	;CJK UNIFIED IDEOGRAPH
                                (#xD19D . #x8932)	;CJK UNIFIED IDEOGRAPH
                                (#xD19E . #x8933)	;CJK UNIFIED IDEOGRAPH
                                (#xD19F . #x8935)	;CJK UNIFIED IDEOGRAPH
                                (#xD1A0 . #x8937)	;CJK UNIFIED IDEOGRAPH
                                (#xD1A1 . #x9009)	;CJK UNIFIED IDEOGRAPH
                                (#xD1A2 . #x7663)	;CJK UNIFIED IDEOGRAPH
                                (#xD1A3 . #x7729)	;CJK UNIFIED IDEOGRAPH
                                (#xD1A4 . #x7EDA)	;CJK UNIFIED IDEOGRAPH
                                (#xD1A5 . #x9774)	;CJK UNIFIED IDEOGRAPH
                                (#xD1A6 . #x859B)	;CJK UNIFIED IDEOGRAPH
                                (#xD1A7 . #x5B66)	;CJK UNIFIED IDEOGRAPH
                                (#xD1A8 . #x7A74)	;CJK UNIFIED IDEOGRAPH
                                (#xD1A9 . #x96EA)	;CJK UNIFIED IDEOGRAPH
                                (#xD1AA . #x8840)	;CJK UNIFIED IDEOGRAPH
                                (#xD1AB . #x52CB)	;CJK UNIFIED IDEOGRAPH
                                (#xD1AC . #x718F)	;CJK UNIFIED IDEOGRAPH
                                (#xD1AD . #x5FAA)	;CJK UNIFIED IDEOGRAPH
                                (#xD1AE . #x65EC)	;CJK UNIFIED IDEOGRAPH
                                (#xD1AF . #x8BE2)	;CJK UNIFIED IDEOGRAPH
                                (#xD1B0 . #x5BFB)	;CJK UNIFIED IDEOGRAPH
                                (#xD1B1 . #x9A6F)	;CJK UNIFIED IDEOGRAPH
                                (#xD1B2 . #x5DE1)	;CJK UNIFIED IDEOGRAPH
                                (#xD1B3 . #x6B89)	;CJK UNIFIED IDEOGRAPH
                                (#xD1B4 . #x6C5B)	;CJK UNIFIED IDEOGRAPH
                                (#xD1B5 . #x8BAD)	;CJK UNIFIED IDEOGRAPH
                                (#xD1B6 . #x8BAF)	;CJK UNIFIED IDEOGRAPH
                                (#xD1B7 . #x900A)	;CJK UNIFIED IDEOGRAPH
                                (#xD1B8 . #x8FC5)	;CJK UNIFIED IDEOGRAPH
                                (#xD1B9 . #x538B)	;CJK UNIFIED IDEOGRAPH
                                (#xD1BA . #x62BC)	;CJK UNIFIED IDEOGRAPH
                                (#xD1BB . #x9E26)	;CJK UNIFIED IDEOGRAPH
                                (#xD1BC . #x9E2D)	;CJK UNIFIED IDEOGRAPH
                                (#xD1BD . #x5440)	;CJK UNIFIED IDEOGRAPH
                                (#xD1BE . #x4E2B)	;CJK UNIFIED IDEOGRAPH
                                (#xD1BF . #x82BD)	;CJK UNIFIED IDEOGRAPH
                                (#xD1C0 . #x7259)	;CJK UNIFIED IDEOGRAPH
                                (#xD1C1 . #x869C)	;CJK UNIFIED IDEOGRAPH
                                (#xD1C2 . #x5D16)	;CJK UNIFIED IDEOGRAPH
                                (#xD1C3 . #x8859)	;CJK UNIFIED IDEOGRAPH
                                (#xD1C4 . #x6DAF)	;CJK UNIFIED IDEOGRAPH
                                (#xD1C5 . #x96C5)	;CJK UNIFIED IDEOGRAPH
                                (#xD1C6 . #x54D1)	;CJK UNIFIED IDEOGRAPH
                                (#xD1C7 . #x4E9A)	;CJK UNIFIED IDEOGRAPH
                                (#xD1C8 . #x8BB6)	;CJK UNIFIED IDEOGRAPH
                                (#xD1C9 . #x7109)	;CJK UNIFIED IDEOGRAPH
                                (#xD1CA . #x54BD)	;CJK UNIFIED IDEOGRAPH
                                (#xD1CB . #x9609)	;CJK UNIFIED IDEOGRAPH
                                (#xD1CC . #x70DF)	;CJK UNIFIED IDEOGRAPH
                                (#xD1CD . #x6DF9)	;CJK UNIFIED IDEOGRAPH
                                (#xD1CE . #x76D0)	;CJK UNIFIED IDEOGRAPH
                                (#xD1CF . #x4E25)	;CJK UNIFIED IDEOGRAPH
                                (#xD1D0 . #x7814)	;CJK UNIFIED IDEOGRAPH
                                (#xD1D1 . #x8712)	;CJK UNIFIED IDEOGRAPH
                                (#xD1D2 . #x5CA9)	;CJK UNIFIED IDEOGRAPH
                                (#xD1D3 . #x5EF6)	;CJK UNIFIED IDEOGRAPH
                                (#xD1D4 . #x8A00)	;CJK UNIFIED IDEOGRAPH
                                (#xD1D5 . #x989C)	;CJK UNIFIED IDEOGRAPH
                                (#xD1D6 . #x960E)	;CJK UNIFIED IDEOGRAPH
                                (#xD1D7 . #x708E)	;CJK UNIFIED IDEOGRAPH
                                (#xD1D8 . #x6CBF)	;CJK UNIFIED IDEOGRAPH
                                (#xD1D9 . #x5944)	;CJK UNIFIED IDEOGRAPH
                                (#xD1DA . #x63A9)	;CJK UNIFIED IDEOGRAPH
                                (#xD1DB . #x773C)	;CJK UNIFIED IDEOGRAPH
                                (#xD1DC . #x884D)	;CJK UNIFIED IDEOGRAPH
                                (#xD1DD . #x6F14)	;CJK UNIFIED IDEOGRAPH
                                (#xD1DE . #x8273)	;CJK UNIFIED IDEOGRAPH
                                (#xD1DF . #x5830)	;CJK UNIFIED IDEOGRAPH
                                (#xD1E0 . #x71D5)	;CJK UNIFIED IDEOGRAPH
                                (#xD1E1 . #x538C)	;CJK UNIFIED IDEOGRAPH
                                (#xD1E2 . #x781A)	;CJK UNIFIED IDEOGRAPH
                                (#xD1E3 . #x96C1)	;CJK UNIFIED IDEOGRAPH
                                (#xD1E4 . #x5501)	;CJK UNIFIED IDEOGRAPH
                                (#xD1E5 . #x5F66)	;CJK UNIFIED IDEOGRAPH
                                (#xD1E6 . #x7130)	;CJK UNIFIED IDEOGRAPH
                                (#xD1E7 . #x5BB4)	;CJK UNIFIED IDEOGRAPH
                                (#xD1E8 . #x8C1A)	;CJK UNIFIED IDEOGRAPH
                                (#xD1E9 . #x9A8C)	;CJK UNIFIED IDEOGRAPH
                                (#xD1EA . #x6B83)	;CJK UNIFIED IDEOGRAPH
                                (#xD1EB . #x592E)	;CJK UNIFIED IDEOGRAPH
                                (#xD1EC . #x9E2F)	;CJK UNIFIED IDEOGRAPH
                                (#xD1ED . #x79E7)	;CJK UNIFIED IDEOGRAPH
                                (#xD1EE . #x6768)	;CJK UNIFIED IDEOGRAPH
                                (#xD1EF . #x626C)	;CJK UNIFIED IDEOGRAPH
                                (#xD1F0 . #x4F6F)	;CJK UNIFIED IDEOGRAPH
                                (#xD1F1 . #x75A1)	;CJK UNIFIED IDEOGRAPH
                                (#xD1F2 . #x7F8A)	;CJK UNIFIED IDEOGRAPH
                                (#xD1F3 . #x6D0B)	;CJK UNIFIED IDEOGRAPH
                                (#xD1F4 . #x9633)	;CJK UNIFIED IDEOGRAPH
                                (#xD1F5 . #x6C27)	;CJK UNIFIED IDEOGRAPH
                                (#xD1F6 . #x4EF0)	;CJK UNIFIED IDEOGRAPH
                                (#xD1F7 . #x75D2)	;CJK UNIFIED IDEOGRAPH
                                (#xD1F8 . #x517B)	;CJK UNIFIED IDEOGRAPH
                                (#xD1F9 . #x6837)	;CJK UNIFIED IDEOGRAPH
                                (#xD1FA . #x6F3E)	;CJK UNIFIED IDEOGRAPH
                                (#xD1FB . #x9080)	;CJK UNIFIED IDEOGRAPH
                                (#xD1FC . #x8170)	;CJK UNIFIED IDEOGRAPH
                                (#xD1FD . #x5996)	;CJK UNIFIED IDEOGRAPH
                                (#xD1FE . #x7476)	;CJK UNIFIED IDEOGRAPH
                                (#xD240 . #x8938)	;CJK UNIFIED IDEOGRAPH
                                (#xD241 . #x8939)	;CJK UNIFIED IDEOGRAPH
                                (#xD242 . #x893A)	;CJK UNIFIED IDEOGRAPH
                                (#xD243 . #x893B)	;CJK UNIFIED IDEOGRAPH
                                (#xD244 . #x893C)	;CJK UNIFIED IDEOGRAPH
                                (#xD245 . #x893D)	;CJK UNIFIED IDEOGRAPH
                                (#xD246 . #x893E)	;CJK UNIFIED IDEOGRAPH
                                (#xD247 . #x893F)	;CJK UNIFIED IDEOGRAPH
                                (#xD248 . #x8940)	;CJK UNIFIED IDEOGRAPH
                                (#xD249 . #x8942)	;CJK UNIFIED IDEOGRAPH
                                (#xD24A . #x8943)	;CJK UNIFIED IDEOGRAPH
                                (#xD24B . #x8945)	;CJK UNIFIED IDEOGRAPH
                                (#xD24C . #x8946)	;CJK UNIFIED IDEOGRAPH
                                (#xD24D . #x8947)	;CJK UNIFIED IDEOGRAPH
                                (#xD24E . #x8948)	;CJK UNIFIED IDEOGRAPH
                                (#xD24F . #x8949)	;CJK UNIFIED IDEOGRAPH
                                (#xD250 . #x894A)	;CJK UNIFIED IDEOGRAPH
                                (#xD251 . #x894B)	;CJK UNIFIED IDEOGRAPH
                                (#xD252 . #x894C)	;CJK UNIFIED IDEOGRAPH
                                (#xD253 . #x894D)	;CJK UNIFIED IDEOGRAPH
                                (#xD254 . #x894E)	;CJK UNIFIED IDEOGRAPH
                                (#xD255 . #x894F)	;CJK UNIFIED IDEOGRAPH
                                (#xD256 . #x8950)	;CJK UNIFIED IDEOGRAPH
                                (#xD257 . #x8951)	;CJK UNIFIED IDEOGRAPH
                                (#xD258 . #x8952)	;CJK UNIFIED IDEOGRAPH
                                (#xD259 . #x8953)	;CJK UNIFIED IDEOGRAPH
                                (#xD25A . #x8954)	;CJK UNIFIED IDEOGRAPH
                                (#xD25B . #x8955)	;CJK UNIFIED IDEOGRAPH
                                (#xD25C . #x8956)	;CJK UNIFIED IDEOGRAPH
                                (#xD25D . #x8957)	;CJK UNIFIED IDEOGRAPH
                                (#xD25E . #x8958)	;CJK UNIFIED IDEOGRAPH
                                (#xD25F . #x8959)	;CJK UNIFIED IDEOGRAPH
                                (#xD260 . #x895A)	;CJK UNIFIED IDEOGRAPH
                                (#xD261 . #x895B)	;CJK UNIFIED IDEOGRAPH
                                (#xD262 . #x895C)	;CJK UNIFIED IDEOGRAPH
                                (#xD263 . #x895D)	;CJK UNIFIED IDEOGRAPH
                                (#xD264 . #x8960)	;CJK UNIFIED IDEOGRAPH
                                (#xD265 . #x8961)	;CJK UNIFIED IDEOGRAPH
                                (#xD266 . #x8962)	;CJK UNIFIED IDEOGRAPH
                                (#xD267 . #x8963)	;CJK UNIFIED IDEOGRAPH
                                (#xD268 . #x8964)	;CJK UNIFIED IDEOGRAPH
                                (#xD269 . #x8965)	;CJK UNIFIED IDEOGRAPH
                                (#xD26A . #x8967)	;CJK UNIFIED IDEOGRAPH
                                (#xD26B . #x8968)	;CJK UNIFIED IDEOGRAPH
                                (#xD26C . #x8969)	;CJK UNIFIED IDEOGRAPH
                                (#xD26D . #x896A)	;CJK UNIFIED IDEOGRAPH
                                (#xD26E . #x896B)	;CJK UNIFIED IDEOGRAPH
                                (#xD26F . #x896C)	;CJK UNIFIED IDEOGRAPH
                                (#xD270 . #x896D)	;CJK UNIFIED IDEOGRAPH
                                (#xD271 . #x896E)	;CJK UNIFIED IDEOGRAPH
                                (#xD272 . #x896F)	;CJK UNIFIED IDEOGRAPH
                                (#xD273 . #x8970)	;CJK UNIFIED IDEOGRAPH
                                (#xD274 . #x8971)	;CJK UNIFIED IDEOGRAPH
                                (#xD275 . #x8972)	;CJK UNIFIED IDEOGRAPH
                                (#xD276 . #x8973)	;CJK UNIFIED IDEOGRAPH
                                (#xD277 . #x8974)	;CJK UNIFIED IDEOGRAPH
                                (#xD278 . #x8975)	;CJK UNIFIED IDEOGRAPH
                                (#xD279 . #x8976)	;CJK UNIFIED IDEOGRAPH
                                (#xD27A . #x8977)	;CJK UNIFIED IDEOGRAPH
                                (#xD27B . #x8978)	;CJK UNIFIED IDEOGRAPH
                                (#xD27C . #x8979)	;CJK UNIFIED IDEOGRAPH
                                (#xD27D . #x897A)	;CJK UNIFIED IDEOGRAPH
                                (#xD27E . #x897C)	;CJK UNIFIED IDEOGRAPH
                                (#xD280 . #x897D)	;CJK UNIFIED IDEOGRAPH
                                (#xD281 . #x897E)	;CJK UNIFIED IDEOGRAPH
                                (#xD282 . #x8980)	;CJK UNIFIED IDEOGRAPH
                                (#xD283 . #x8982)	;CJK UNIFIED IDEOGRAPH
                                (#xD284 . #x8984)	;CJK UNIFIED IDEOGRAPH
                                (#xD285 . #x8985)	;CJK UNIFIED IDEOGRAPH
                                (#xD286 . #x8987)	;CJK UNIFIED IDEOGRAPH
                                (#xD287 . #x8988)	;CJK UNIFIED IDEOGRAPH
                                (#xD288 . #x8989)	;CJK UNIFIED IDEOGRAPH
                                (#xD289 . #x898A)	;CJK UNIFIED IDEOGRAPH
                                (#xD28A . #x898B)	;CJK UNIFIED IDEOGRAPH
                                (#xD28B . #x898C)	;CJK UNIFIED IDEOGRAPH
                                (#xD28C . #x898D)	;CJK UNIFIED IDEOGRAPH
                                (#xD28D . #x898E)	;CJK UNIFIED IDEOGRAPH
                                (#xD28E . #x898F)	;CJK UNIFIED IDEOGRAPH
                                (#xD28F . #x8990)	;CJK UNIFIED IDEOGRAPH
                                (#xD290 . #x8991)	;CJK UNIFIED IDEOGRAPH
                                (#xD291 . #x8992)	;CJK UNIFIED IDEOGRAPH
                                (#xD292 . #x8993)	;CJK UNIFIED IDEOGRAPH
                                (#xD293 . #x8994)	;CJK UNIFIED IDEOGRAPH
                                (#xD294 . #x8995)	;CJK UNIFIED IDEOGRAPH
                                (#xD295 . #x8996)	;CJK UNIFIED IDEOGRAPH
                                (#xD296 . #x8997)	;CJK UNIFIED IDEOGRAPH
                                (#xD297 . #x8998)	;CJK UNIFIED IDEOGRAPH
                                (#xD298 . #x8999)	;CJK UNIFIED IDEOGRAPH
                                (#xD299 . #x899A)	;CJK UNIFIED IDEOGRAPH
                                (#xD29A . #x899B)	;CJK UNIFIED IDEOGRAPH
                                (#xD29B . #x899C)	;CJK UNIFIED IDEOGRAPH
                                (#xD29C . #x899D)	;CJK UNIFIED IDEOGRAPH
                                (#xD29D . #x899E)	;CJK UNIFIED IDEOGRAPH
                                (#xD29E . #x899F)	;CJK UNIFIED IDEOGRAPH
                                (#xD29F . #x89A0)	;CJK UNIFIED IDEOGRAPH
                                (#xD2A0 . #x89A1)	;CJK UNIFIED IDEOGRAPH
                                (#xD2A1 . #x6447)	;CJK UNIFIED IDEOGRAPH
                                (#xD2A2 . #x5C27)	;CJK UNIFIED IDEOGRAPH
                                (#xD2A3 . #x9065)	;CJK UNIFIED IDEOGRAPH
                                (#xD2A4 . #x7A91)	;CJK UNIFIED IDEOGRAPH
                                (#xD2A5 . #x8C23)	;CJK UNIFIED IDEOGRAPH
                                (#xD2A6 . #x59DA)	;CJK UNIFIED IDEOGRAPH
                                (#xD2A7 . #x54AC)	;CJK UNIFIED IDEOGRAPH
                                (#xD2A8 . #x8200)	;CJK UNIFIED IDEOGRAPH
                                (#xD2A9 . #x836F)	;CJK UNIFIED IDEOGRAPH
                                (#xD2AA . #x8981)	;CJK UNIFIED IDEOGRAPH
                                (#xD2AB . #x8000)	;CJK UNIFIED IDEOGRAPH
                                (#xD2AC . #x6930)	;CJK UNIFIED IDEOGRAPH
                                (#xD2AD . #x564E)	;CJK UNIFIED IDEOGRAPH
                                (#xD2AE . #x8036)	;CJK UNIFIED IDEOGRAPH
                                (#xD2AF . #x7237)	;CJK UNIFIED IDEOGRAPH
                                (#xD2B0 . #x91CE)	;CJK UNIFIED IDEOGRAPH
                                (#xD2B1 . #x51B6)	;CJK UNIFIED IDEOGRAPH
                                (#xD2B2 . #x4E5F)	;CJK UNIFIED IDEOGRAPH
                                (#xD2B3 . #x9875)	;CJK UNIFIED IDEOGRAPH
                                (#xD2B4 . #x6396)	;CJK UNIFIED IDEOGRAPH
                                (#xD2B5 . #x4E1A)	;CJK UNIFIED IDEOGRAPH
                                (#xD2B6 . #x53F6)	;CJK UNIFIED IDEOGRAPH
                                (#xD2B7 . #x66F3)	;CJK UNIFIED IDEOGRAPH
                                (#xD2B8 . #x814B)	;CJK UNIFIED IDEOGRAPH
                                (#xD2B9 . #x591C)	;CJK UNIFIED IDEOGRAPH
                                (#xD2BA . #x6DB2)	;CJK UNIFIED IDEOGRAPH
                                (#xD2BB . #x4E00)	;CJK UNIFIED IDEOGRAPH
                                (#xD2BC . #x58F9)	;CJK UNIFIED IDEOGRAPH
                                (#xD2BD . #x533B)	;CJK UNIFIED IDEOGRAPH
                                (#xD2BE . #x63D6)	;CJK UNIFIED IDEOGRAPH
                                (#xD2BF . #x94F1)	;CJK UNIFIED IDEOGRAPH
                                (#xD2C0 . #x4F9D)	;CJK UNIFIED IDEOGRAPH
                                (#xD2C1 . #x4F0A)	;CJK UNIFIED IDEOGRAPH
                                (#xD2C2 . #x8863)	;CJK UNIFIED IDEOGRAPH
                                (#xD2C3 . #x9890)	;CJK UNIFIED IDEOGRAPH
                                (#xD2C4 . #x5937)	;CJK UNIFIED IDEOGRAPH
                                (#xD2C5 . #x9057)	;CJK UNIFIED IDEOGRAPH
                                (#xD2C6 . #x79FB)	;CJK UNIFIED IDEOGRAPH
                                (#xD2C7 . #x4EEA)	;CJK UNIFIED IDEOGRAPH
                                (#xD2C8 . #x80F0)	;CJK UNIFIED IDEOGRAPH
                                (#xD2C9 . #x7591)	;CJK UNIFIED IDEOGRAPH
                                (#xD2CA . #x6C82)	;CJK UNIFIED IDEOGRAPH
                                (#xD2CB . #x5B9C)	;CJK UNIFIED IDEOGRAPH
                                (#xD2CC . #x59E8)	;CJK UNIFIED IDEOGRAPH
                                (#xD2CD . #x5F5D)	;CJK UNIFIED IDEOGRAPH
                                (#xD2CE . #x6905)	;CJK UNIFIED IDEOGRAPH
                                (#xD2CF . #x8681)	;CJK UNIFIED IDEOGRAPH
                                (#xD2D0 . #x501A)	;CJK UNIFIED IDEOGRAPH
                                (#xD2D1 . #x5DF2)	;CJK UNIFIED IDEOGRAPH
                                (#xD2D2 . #x4E59)	;CJK UNIFIED IDEOGRAPH
                                (#xD2D3 . #x77E3)	;CJK UNIFIED IDEOGRAPH
                                (#xD2D4 . #x4EE5)	;CJK UNIFIED IDEOGRAPH
                                (#xD2D5 . #x827A)	;CJK UNIFIED IDEOGRAPH
                                (#xD2D6 . #x6291)	;CJK UNIFIED IDEOGRAPH
                                (#xD2D7 . #x6613)	;CJK UNIFIED IDEOGRAPH
                                (#xD2D8 . #x9091)	;CJK UNIFIED IDEOGRAPH
                                (#xD2D9 . #x5C79)	;CJK UNIFIED IDEOGRAPH
                                (#xD2DA . #x4EBF)	;CJK UNIFIED IDEOGRAPH
                                (#xD2DB . #x5F79)	;CJK UNIFIED IDEOGRAPH
                                (#xD2DC . #x81C6)	;CJK UNIFIED IDEOGRAPH
                                (#xD2DD . #x9038)	;CJK UNIFIED IDEOGRAPH
                                (#xD2DE . #x8084)	;CJK UNIFIED IDEOGRAPH
                                (#xD2DF . #x75AB)	;CJK UNIFIED IDEOGRAPH
                                (#xD2E0 . #x4EA6)	;CJK UNIFIED IDEOGRAPH
                                (#xD2E1 . #x88D4)	;CJK UNIFIED IDEOGRAPH
                                (#xD2E2 . #x610F)	;CJK UNIFIED IDEOGRAPH
                                (#xD2E3 . #x6BC5)	;CJK UNIFIED IDEOGRAPH
                                (#xD2E4 . #x5FC6)	;CJK UNIFIED IDEOGRAPH
                                (#xD2E5 . #x4E49)	;CJK UNIFIED IDEOGRAPH
                                (#xD2E6 . #x76CA)	;CJK UNIFIED IDEOGRAPH
                                (#xD2E7 . #x6EA2)	;CJK UNIFIED IDEOGRAPH
                                (#xD2E8 . #x8BE3)	;CJK UNIFIED IDEOGRAPH
                                (#xD2E9 . #x8BAE)	;CJK UNIFIED IDEOGRAPH
                                (#xD2EA . #x8C0A)	;CJK UNIFIED IDEOGRAPH
                                (#xD2EB . #x8BD1)	;CJK UNIFIED IDEOGRAPH
                                (#xD2EC . #x5F02)	;CJK UNIFIED IDEOGRAPH
                                (#xD2ED . #x7FFC)	;CJK UNIFIED IDEOGRAPH
                                (#xD2EE . #x7FCC)	;CJK UNIFIED IDEOGRAPH
                                (#xD2EF . #x7ECE)	;CJK UNIFIED IDEOGRAPH
                                (#xD2F0 . #x8335)	;CJK UNIFIED IDEOGRAPH
                                (#xD2F1 . #x836B)	;CJK UNIFIED IDEOGRAPH
                                (#xD2F2 . #x56E0)	;CJK UNIFIED IDEOGRAPH
                                (#xD2F3 . #x6BB7)	;CJK UNIFIED IDEOGRAPH
                                (#xD2F4 . #x97F3)	;CJK UNIFIED IDEOGRAPH
                                (#xD2F5 . #x9634)	;CJK UNIFIED IDEOGRAPH
                                (#xD2F6 . #x59FB)	;CJK UNIFIED IDEOGRAPH
                                (#xD2F7 . #x541F)	;CJK UNIFIED IDEOGRAPH
                                (#xD2F8 . #x94F6)	;CJK UNIFIED IDEOGRAPH
                                (#xD2F9 . #x6DEB)	;CJK UNIFIED IDEOGRAPH
                                (#xD2FA . #x5BC5)	;CJK UNIFIED IDEOGRAPH
                                (#xD2FB . #x996E)	;CJK UNIFIED IDEOGRAPH
                                (#xD2FC . #x5C39)	;CJK UNIFIED IDEOGRAPH
                                (#xD2FD . #x5F15)	;CJK UNIFIED IDEOGRAPH
                                (#xD2FE . #x9690)	;CJK UNIFIED IDEOGRAPH
                                (#xD340 . #x89A2)	;CJK UNIFIED IDEOGRAPH
                                (#xD341 . #x89A3)	;CJK UNIFIED IDEOGRAPH
                                (#xD342 . #x89A4)	;CJK UNIFIED IDEOGRAPH
                                (#xD343 . #x89A5)	;CJK UNIFIED IDEOGRAPH
                                (#xD344 . #x89A6)	;CJK UNIFIED IDEOGRAPH
                                (#xD345 . #x89A7)	;CJK UNIFIED IDEOGRAPH
                                (#xD346 . #x89A8)	;CJK UNIFIED IDEOGRAPH
                                (#xD347 . #x89A9)	;CJK UNIFIED IDEOGRAPH
                                (#xD348 . #x89AA)	;CJK UNIFIED IDEOGRAPH
                                (#xD349 . #x89AB)	;CJK UNIFIED IDEOGRAPH
                                (#xD34A . #x89AC)	;CJK UNIFIED IDEOGRAPH
                                (#xD34B . #x89AD)	;CJK UNIFIED IDEOGRAPH
                                (#xD34C . #x89AE)	;CJK UNIFIED IDEOGRAPH
                                (#xD34D . #x89AF)	;CJK UNIFIED IDEOGRAPH
                                (#xD34E . #x89B0)	;CJK UNIFIED IDEOGRAPH
                                (#xD34F . #x89B1)	;CJK UNIFIED IDEOGRAPH
                                (#xD350 . #x89B2)	;CJK UNIFIED IDEOGRAPH
                                (#xD351 . #x89B3)	;CJK UNIFIED IDEOGRAPH
                                (#xD352 . #x89B4)	;CJK UNIFIED IDEOGRAPH
                                (#xD353 . #x89B5)	;CJK UNIFIED IDEOGRAPH
                                (#xD354 . #x89B6)	;CJK UNIFIED IDEOGRAPH
                                (#xD355 . #x89B7)	;CJK UNIFIED IDEOGRAPH
                                (#xD356 . #x89B8)	;CJK UNIFIED IDEOGRAPH
                                (#xD357 . #x89B9)	;CJK UNIFIED IDEOGRAPH
                                (#xD358 . #x89BA)	;CJK UNIFIED IDEOGRAPH
                                (#xD359 . #x89BB)	;CJK UNIFIED IDEOGRAPH
                                (#xD35A . #x89BC)	;CJK UNIFIED IDEOGRAPH
                                (#xD35B . #x89BD)	;CJK UNIFIED IDEOGRAPH
                                (#xD35C . #x89BE)	;CJK UNIFIED IDEOGRAPH
                                (#xD35D . #x89BF)	;CJK UNIFIED IDEOGRAPH
                                (#xD35E . #x89C0)	;CJK UNIFIED IDEOGRAPH
                                (#xD35F . #x89C3)	;CJK UNIFIED IDEOGRAPH
                                (#xD360 . #x89CD)	;CJK UNIFIED IDEOGRAPH
                                (#xD361 . #x89D3)	;CJK UNIFIED IDEOGRAPH
                                (#xD362 . #x89D4)	;CJK UNIFIED IDEOGRAPH
                                (#xD363 . #x89D5)	;CJK UNIFIED IDEOGRAPH
                                (#xD364 . #x89D7)	;CJK UNIFIED IDEOGRAPH
                                (#xD365 . #x89D8)	;CJK UNIFIED IDEOGRAPH
                                (#xD366 . #x89D9)	;CJK UNIFIED IDEOGRAPH
                                (#xD367 . #x89DB)	;CJK UNIFIED IDEOGRAPH
                                (#xD368 . #x89DD)	;CJK UNIFIED IDEOGRAPH
                                (#xD369 . #x89DF)	;CJK UNIFIED IDEOGRAPH
                                (#xD36A . #x89E0)	;CJK UNIFIED IDEOGRAPH
                                (#xD36B . #x89E1)	;CJK UNIFIED IDEOGRAPH
                                (#xD36C . #x89E2)	;CJK UNIFIED IDEOGRAPH
                                (#xD36D . #x89E4)	;CJK UNIFIED IDEOGRAPH
                                (#xD36E . #x89E7)	;CJK UNIFIED IDEOGRAPH
                                (#xD36F . #x89E8)	;CJK UNIFIED IDEOGRAPH
                                (#xD370 . #x89E9)	;CJK UNIFIED IDEOGRAPH
                                (#xD371 . #x89EA)	;CJK UNIFIED IDEOGRAPH
                                (#xD372 . #x89EC)	;CJK UNIFIED IDEOGRAPH
                                (#xD373 . #x89ED)	;CJK UNIFIED IDEOGRAPH
                                (#xD374 . #x89EE)	;CJK UNIFIED IDEOGRAPH
                                (#xD375 . #x89F0)	;CJK UNIFIED IDEOGRAPH
                                (#xD376 . #x89F1)	;CJK UNIFIED IDEOGRAPH
                                (#xD377 . #x89F2)	;CJK UNIFIED IDEOGRAPH
                                (#xD378 . #x89F4)	;CJK UNIFIED IDEOGRAPH
                                (#xD379 . #x89F5)	;CJK UNIFIED IDEOGRAPH
                                (#xD37A . #x89F6)	;CJK UNIFIED IDEOGRAPH
                                (#xD37B . #x89F7)	;CJK UNIFIED IDEOGRAPH
                                (#xD37C . #x89F8)	;CJK UNIFIED IDEOGRAPH
                                (#xD37D . #x89F9)	;CJK UNIFIED IDEOGRAPH
                                (#xD37E . #x89FA)	;CJK UNIFIED IDEOGRAPH
                                (#xD380 . #x89FB)	;CJK UNIFIED IDEOGRAPH
                                (#xD381 . #x89FC)	;CJK UNIFIED IDEOGRAPH
                                (#xD382 . #x89FD)	;CJK UNIFIED IDEOGRAPH
                                (#xD383 . #x89FE)	;CJK UNIFIED IDEOGRAPH
                                (#xD384 . #x89FF)	;CJK UNIFIED IDEOGRAPH
                                (#xD385 . #x8A01)	;CJK UNIFIED IDEOGRAPH
                                (#xD386 . #x8A02)	;CJK UNIFIED IDEOGRAPH
                                (#xD387 . #x8A03)	;CJK UNIFIED IDEOGRAPH
                                (#xD388 . #x8A04)	;CJK UNIFIED IDEOGRAPH
                                (#xD389 . #x8A05)	;CJK UNIFIED IDEOGRAPH
                                (#xD38A . #x8A06)	;CJK UNIFIED IDEOGRAPH
                                (#xD38B . #x8A08)	;CJK UNIFIED IDEOGRAPH
                                (#xD38C . #x8A09)	;CJK UNIFIED IDEOGRAPH
                                (#xD38D . #x8A0A)	;CJK UNIFIED IDEOGRAPH
                                (#xD38E . #x8A0B)	;CJK UNIFIED IDEOGRAPH
                                (#xD38F . #x8A0C)	;CJK UNIFIED IDEOGRAPH
                                (#xD390 . #x8A0D)	;CJK UNIFIED IDEOGRAPH
                                (#xD391 . #x8A0E)	;CJK UNIFIED IDEOGRAPH
                                (#xD392 . #x8A0F)	;CJK UNIFIED IDEOGRAPH
                                (#xD393 . #x8A10)	;CJK UNIFIED IDEOGRAPH
                                (#xD394 . #x8A11)	;CJK UNIFIED IDEOGRAPH
                                (#xD395 . #x8A12)	;CJK UNIFIED IDEOGRAPH
                                (#xD396 . #x8A13)	;CJK UNIFIED IDEOGRAPH
                                (#xD397 . #x8A14)	;CJK UNIFIED IDEOGRAPH
                                (#xD398 . #x8A15)	;CJK UNIFIED IDEOGRAPH
                                (#xD399 . #x8A16)	;CJK UNIFIED IDEOGRAPH
                                (#xD39A . #x8A17)	;CJK UNIFIED IDEOGRAPH
                                (#xD39B . #x8A18)	;CJK UNIFIED IDEOGRAPH
                                (#xD39C . #x8A19)	;CJK UNIFIED IDEOGRAPH
                                (#xD39D . #x8A1A)	;CJK UNIFIED IDEOGRAPH
                                (#xD39E . #x8A1B)	;CJK UNIFIED IDEOGRAPH
                                (#xD39F . #x8A1C)	;CJK UNIFIED IDEOGRAPH
                                (#xD3A0 . #x8A1D)	;CJK UNIFIED IDEOGRAPH
                                (#xD3A1 . #x5370)	;CJK UNIFIED IDEOGRAPH
                                (#xD3A2 . #x82F1)	;CJK UNIFIED IDEOGRAPH
                                (#xD3A3 . #x6A31)	;CJK UNIFIED IDEOGRAPH
                                (#xD3A4 . #x5A74)	;CJK UNIFIED IDEOGRAPH
                                (#xD3A5 . #x9E70)	;CJK UNIFIED IDEOGRAPH
                                (#xD3A6 . #x5E94)	;CJK UNIFIED IDEOGRAPH
                                (#xD3A7 . #x7F28)	;CJK UNIFIED IDEOGRAPH
                                (#xD3A8 . #x83B9)	;CJK UNIFIED IDEOGRAPH
                                (#xD3A9 . #x8424)	;CJK UNIFIED IDEOGRAPH
                                (#xD3AA . #x8425)	;CJK UNIFIED IDEOGRAPH
                                (#xD3AB . #x8367)	;CJK UNIFIED IDEOGRAPH
                                (#xD3AC . #x8747)	;CJK UNIFIED IDEOGRAPH
                                (#xD3AD . #x8FCE)	;CJK UNIFIED IDEOGRAPH
                                (#xD3AE . #x8D62)	;CJK UNIFIED IDEOGRAPH
                                (#xD3AF . #x76C8)	;CJK UNIFIED IDEOGRAPH
                                (#xD3B0 . #x5F71)	;CJK UNIFIED IDEOGRAPH
                                (#xD3B1 . #x9896)	;CJK UNIFIED IDEOGRAPH
                                (#xD3B2 . #x786C)	;CJK UNIFIED IDEOGRAPH
                                (#xD3B3 . #x6620)	;CJK UNIFIED IDEOGRAPH
                                (#xD3B4 . #x54DF)	;CJK UNIFIED IDEOGRAPH
                                (#xD3B5 . #x62E5)	;CJK UNIFIED IDEOGRAPH
                                (#xD3B6 . #x4F63)	;CJK UNIFIED IDEOGRAPH
                                (#xD3B7 . #x81C3)	;CJK UNIFIED IDEOGRAPH
                                (#xD3B8 . #x75C8)	;CJK UNIFIED IDEOGRAPH
                                (#xD3B9 . #x5EB8)	;CJK UNIFIED IDEOGRAPH
                                (#xD3BA . #x96CD)	;CJK UNIFIED IDEOGRAPH
                                (#xD3BB . #x8E0A)	;CJK UNIFIED IDEOGRAPH
                                (#xD3BC . #x86F9)	;CJK UNIFIED IDEOGRAPH
                                (#xD3BD . #x548F)	;CJK UNIFIED IDEOGRAPH
                                (#xD3BE . #x6CF3)	;CJK UNIFIED IDEOGRAPH
                                (#xD3BF . #x6D8C)	;CJK UNIFIED IDEOGRAPH
                                (#xD3C0 . #x6C38)	;CJK UNIFIED IDEOGRAPH
                                (#xD3C1 . #x607F)	;CJK UNIFIED IDEOGRAPH
                                (#xD3C2 . #x52C7)	;CJK UNIFIED IDEOGRAPH
                                (#xD3C3 . #x7528)	;CJK UNIFIED IDEOGRAPH
                                (#xD3C4 . #x5E7D)	;CJK UNIFIED IDEOGRAPH
                                (#xD3C5 . #x4F18)	;CJK UNIFIED IDEOGRAPH
                                (#xD3C6 . #x60A0)	;CJK UNIFIED IDEOGRAPH
                                (#xD3C7 . #x5FE7)	;CJK UNIFIED IDEOGRAPH
                                (#xD3C8 . #x5C24)	;CJK UNIFIED IDEOGRAPH
                                (#xD3C9 . #x7531)	;CJK UNIFIED IDEOGRAPH
                                (#xD3CA . #x90AE)	;CJK UNIFIED IDEOGRAPH
                                (#xD3CB . #x94C0)	;CJK UNIFIED IDEOGRAPH
                                (#xD3CC . #x72B9)	;CJK UNIFIED IDEOGRAPH
                                (#xD3CD . #x6CB9)	;CJK UNIFIED IDEOGRAPH
                                (#xD3CE . #x6E38)	;CJK UNIFIED IDEOGRAPH
                                (#xD3CF . #x9149)	;CJK UNIFIED IDEOGRAPH
                                (#xD3D0 . #x6709)	;CJK UNIFIED IDEOGRAPH
                                (#xD3D1 . #x53CB)	;CJK UNIFIED IDEOGRAPH
                                (#xD3D2 . #x53F3)	;CJK UNIFIED IDEOGRAPH
                                (#xD3D3 . #x4F51)	;CJK UNIFIED IDEOGRAPH
                                (#xD3D4 . #x91C9)	;CJK UNIFIED IDEOGRAPH
                                (#xD3D5 . #x8BF1)	;CJK UNIFIED IDEOGRAPH
                                (#xD3D6 . #x53C8)	;CJK UNIFIED IDEOGRAPH
                                (#xD3D7 . #x5E7C)	;CJK UNIFIED IDEOGRAPH
                                (#xD3D8 . #x8FC2)	;CJK UNIFIED IDEOGRAPH
                                (#xD3D9 . #x6DE4)	;CJK UNIFIED IDEOGRAPH
                                (#xD3DA . #x4E8E)	;CJK UNIFIED IDEOGRAPH
                                (#xD3DB . #x76C2)	;CJK UNIFIED IDEOGRAPH
                                (#xD3DC . #x6986)	;CJK UNIFIED IDEOGRAPH
                                (#xD3DD . #x865E)	;CJK UNIFIED IDEOGRAPH
                                (#xD3DE . #x611A)	;CJK UNIFIED IDEOGRAPH
                                (#xD3DF . #x8206)	;CJK UNIFIED IDEOGRAPH
                                (#xD3E0 . #x4F59)	;CJK UNIFIED IDEOGRAPH
                                (#xD3E1 . #x4FDE)	;CJK UNIFIED IDEOGRAPH
                                (#xD3E2 . #x903E)	;CJK UNIFIED IDEOGRAPH
                                (#xD3E3 . #x9C7C)	;CJK UNIFIED IDEOGRAPH
                                (#xD3E4 . #x6109)	;CJK UNIFIED IDEOGRAPH
                                (#xD3E5 . #x6E1D)	;CJK UNIFIED IDEOGRAPH
                                (#xD3E6 . #x6E14)	;CJK UNIFIED IDEOGRAPH
                                (#xD3E7 . #x9685)	;CJK UNIFIED IDEOGRAPH
                                (#xD3E8 . #x4E88)	;CJK UNIFIED IDEOGRAPH
                                (#xD3E9 . #x5A31)	;CJK UNIFIED IDEOGRAPH
                                (#xD3EA . #x96E8)	;CJK UNIFIED IDEOGRAPH
                                (#xD3EB . #x4E0E)	;CJK UNIFIED IDEOGRAPH
                                (#xD3EC . #x5C7F)	;CJK UNIFIED IDEOGRAPH
                                (#xD3ED . #x79B9)	;CJK UNIFIED IDEOGRAPH
                                (#xD3EE . #x5B87)	;CJK UNIFIED IDEOGRAPH
                                (#xD3EF . #x8BED)	;CJK UNIFIED IDEOGRAPH
                                (#xD3F0 . #x7FBD)	;CJK UNIFIED IDEOGRAPH
                                (#xD3F1 . #x7389)	;CJK UNIFIED IDEOGRAPH
                                (#xD3F2 . #x57DF)	;CJK UNIFIED IDEOGRAPH
                                (#xD3F3 . #x828B)	;CJK UNIFIED IDEOGRAPH
                                (#xD3F4 . #x90C1)	;CJK UNIFIED IDEOGRAPH
                                (#xD3F5 . #x5401)	;CJK UNIFIED IDEOGRAPH
                                (#xD3F6 . #x9047)	;CJK UNIFIED IDEOGRAPH
                                (#xD3F7 . #x55BB)	;CJK UNIFIED IDEOGRAPH
                                (#xD3F8 . #x5CEA)	;CJK UNIFIED IDEOGRAPH
                                (#xD3F9 . #x5FA1)	;CJK UNIFIED IDEOGRAPH
                                (#xD3FA . #x6108)	;CJK UNIFIED IDEOGRAPH
                                (#xD3FB . #x6B32)	;CJK UNIFIED IDEOGRAPH
                                (#xD3FC . #x72F1)	;CJK UNIFIED IDEOGRAPH
                                (#xD3FD . #x80B2)	;CJK UNIFIED IDEOGRAPH
                                (#xD3FE . #x8A89)	;CJK UNIFIED IDEOGRAPH
                                (#xD440 . #x8A1E)	;CJK UNIFIED IDEOGRAPH
                                (#xD441 . #x8A1F)	;CJK UNIFIED IDEOGRAPH
                                (#xD442 . #x8A20)	;CJK UNIFIED IDEOGRAPH
                                (#xD443 . #x8A21)	;CJK UNIFIED IDEOGRAPH
                                (#xD444 . #x8A22)	;CJK UNIFIED IDEOGRAPH
                                (#xD445 . #x8A23)	;CJK UNIFIED IDEOGRAPH
                                (#xD446 . #x8A24)	;CJK UNIFIED IDEOGRAPH
                                (#xD447 . #x8A25)	;CJK UNIFIED IDEOGRAPH
                                (#xD448 . #x8A26)	;CJK UNIFIED IDEOGRAPH
                                (#xD449 . #x8A27)	;CJK UNIFIED IDEOGRAPH
                                (#xD44A . #x8A28)	;CJK UNIFIED IDEOGRAPH
                                (#xD44B . #x8A29)	;CJK UNIFIED IDEOGRAPH
                                (#xD44C . #x8A2A)	;CJK UNIFIED IDEOGRAPH
                                (#xD44D . #x8A2B)	;CJK UNIFIED IDEOGRAPH
                                (#xD44E . #x8A2C)	;CJK UNIFIED IDEOGRAPH
                                (#xD44F . #x8A2D)	;CJK UNIFIED IDEOGRAPH
                                (#xD450 . #x8A2E)	;CJK UNIFIED IDEOGRAPH
                                (#xD451 . #x8A2F)	;CJK UNIFIED IDEOGRAPH
                                (#xD452 . #x8A30)	;CJK UNIFIED IDEOGRAPH
                                (#xD453 . #x8A31)	;CJK UNIFIED IDEOGRAPH
                                (#xD454 . #x8A32)	;CJK UNIFIED IDEOGRAPH
                                (#xD455 . #x8A33)	;CJK UNIFIED IDEOGRAPH
                                (#xD456 . #x8A34)	;CJK UNIFIED IDEOGRAPH
                                (#xD457 . #x8A35)	;CJK UNIFIED IDEOGRAPH
                                (#xD458 . #x8A36)	;CJK UNIFIED IDEOGRAPH
                                (#xD459 . #x8A37)	;CJK UNIFIED IDEOGRAPH
                                (#xD45A . #x8A38)	;CJK UNIFIED IDEOGRAPH
                                (#xD45B . #x8A39)	;CJK UNIFIED IDEOGRAPH
                                (#xD45C . #x8A3A)	;CJK UNIFIED IDEOGRAPH
                                (#xD45D . #x8A3B)	;CJK UNIFIED IDEOGRAPH
                                (#xD45E . #x8A3C)	;CJK UNIFIED IDEOGRAPH
                                (#xD45F . #x8A3D)	;CJK UNIFIED IDEOGRAPH
                                (#xD460 . #x8A3F)	;CJK UNIFIED IDEOGRAPH
                                (#xD461 . #x8A40)	;CJK UNIFIED IDEOGRAPH
                                (#xD462 . #x8A41)	;CJK UNIFIED IDEOGRAPH
                                (#xD463 . #x8A42)	;CJK UNIFIED IDEOGRAPH
                                (#xD464 . #x8A43)	;CJK UNIFIED IDEOGRAPH
                                (#xD465 . #x8A44)	;CJK UNIFIED IDEOGRAPH
                                (#xD466 . #x8A45)	;CJK UNIFIED IDEOGRAPH
                                (#xD467 . #x8A46)	;CJK UNIFIED IDEOGRAPH
                                (#xD468 . #x8A47)	;CJK UNIFIED IDEOGRAPH
                                (#xD469 . #x8A49)	;CJK UNIFIED IDEOGRAPH
                                (#xD46A . #x8A4A)	;CJK UNIFIED IDEOGRAPH
                                (#xD46B . #x8A4B)	;CJK UNIFIED IDEOGRAPH
                                (#xD46C . #x8A4C)	;CJK UNIFIED IDEOGRAPH
                                (#xD46D . #x8A4D)	;CJK UNIFIED IDEOGRAPH
                                (#xD46E . #x8A4E)	;CJK UNIFIED IDEOGRAPH
                                (#xD46F . #x8A4F)	;CJK UNIFIED IDEOGRAPH
                                (#xD470 . #x8A50)	;CJK UNIFIED IDEOGRAPH
                                (#xD471 . #x8A51)	;CJK UNIFIED IDEOGRAPH
                                (#xD472 . #x8A52)	;CJK UNIFIED IDEOGRAPH
                                (#xD473 . #x8A53)	;CJK UNIFIED IDEOGRAPH
                                (#xD474 . #x8A54)	;CJK UNIFIED IDEOGRAPH
                                (#xD475 . #x8A55)	;CJK UNIFIED IDEOGRAPH
                                (#xD476 . #x8A56)	;CJK UNIFIED IDEOGRAPH
                                (#xD477 . #x8A57)	;CJK UNIFIED IDEOGRAPH
                                (#xD478 . #x8A58)	;CJK UNIFIED IDEOGRAPH
                                (#xD479 . #x8A59)	;CJK UNIFIED IDEOGRAPH
                                (#xD47A . #x8A5A)	;CJK UNIFIED IDEOGRAPH
                                (#xD47B . #x8A5B)	;CJK UNIFIED IDEOGRAPH
                                (#xD47C . #x8A5C)	;CJK UNIFIED IDEOGRAPH
                                (#xD47D . #x8A5D)	;CJK UNIFIED IDEOGRAPH
                                (#xD47E . #x8A5E)	;CJK UNIFIED IDEOGRAPH
                                (#xD480 . #x8A5F)	;CJK UNIFIED IDEOGRAPH
                                (#xD481 . #x8A60)	;CJK UNIFIED IDEOGRAPH
                                (#xD482 . #x8A61)	;CJK UNIFIED IDEOGRAPH
                                (#xD483 . #x8A62)	;CJK UNIFIED IDEOGRAPH
                                (#xD484 . #x8A63)	;CJK UNIFIED IDEOGRAPH
                                (#xD485 . #x8A64)	;CJK UNIFIED IDEOGRAPH
                                (#xD486 . #x8A65)	;CJK UNIFIED IDEOGRAPH
                                (#xD487 . #x8A66)	;CJK UNIFIED IDEOGRAPH
                                (#xD488 . #x8A67)	;CJK UNIFIED IDEOGRAPH
                                (#xD489 . #x8A68)	;CJK UNIFIED IDEOGRAPH
                                (#xD48A . #x8A69)	;CJK UNIFIED IDEOGRAPH
                                (#xD48B . #x8A6A)	;CJK UNIFIED IDEOGRAPH
                                (#xD48C . #x8A6B)	;CJK UNIFIED IDEOGRAPH
                                (#xD48D . #x8A6C)	;CJK UNIFIED IDEOGRAPH
                                (#xD48E . #x8A6D)	;CJK UNIFIED IDEOGRAPH
                                (#xD48F . #x8A6E)	;CJK UNIFIED IDEOGRAPH
                                (#xD490 . #x8A6F)	;CJK UNIFIED IDEOGRAPH
                                (#xD491 . #x8A70)	;CJK UNIFIED IDEOGRAPH
                                (#xD492 . #x8A71)	;CJK UNIFIED IDEOGRAPH
                                (#xD493 . #x8A72)	;CJK UNIFIED IDEOGRAPH
                                (#xD494 . #x8A73)	;CJK UNIFIED IDEOGRAPH
                                (#xD495 . #x8A74)	;CJK UNIFIED IDEOGRAPH
                                (#xD496 . #x8A75)	;CJK UNIFIED IDEOGRAPH
                                (#xD497 . #x8A76)	;CJK UNIFIED IDEOGRAPH
                                (#xD498 . #x8A77)	;CJK UNIFIED IDEOGRAPH
                                (#xD499 . #x8A78)	;CJK UNIFIED IDEOGRAPH
                                (#xD49A . #x8A7A)	;CJK UNIFIED IDEOGRAPH
                                (#xD49B . #x8A7B)	;CJK UNIFIED IDEOGRAPH
                                (#xD49C . #x8A7C)	;CJK UNIFIED IDEOGRAPH
                                (#xD49D . #x8A7D)	;CJK UNIFIED IDEOGRAPH
                                (#xD49E . #x8A7E)	;CJK UNIFIED IDEOGRAPH
                                (#xD49F . #x8A7F)	;CJK UNIFIED IDEOGRAPH
                                (#xD4A0 . #x8A80)	;CJK UNIFIED IDEOGRAPH
                                (#xD4A1 . #x6D74)	;CJK UNIFIED IDEOGRAPH
                                (#xD4A2 . #x5BD3)	;CJK UNIFIED IDEOGRAPH
                                (#xD4A3 . #x88D5)	;CJK UNIFIED IDEOGRAPH
                                (#xD4A4 . #x9884)	;CJK UNIFIED IDEOGRAPH
                                (#xD4A5 . #x8C6B)	;CJK UNIFIED IDEOGRAPH
                                (#xD4A6 . #x9A6D)	;CJK UNIFIED IDEOGRAPH
                                (#xD4A7 . #x9E33)	;CJK UNIFIED IDEOGRAPH
                                (#xD4A8 . #x6E0A)	;CJK UNIFIED IDEOGRAPH
                                (#xD4A9 . #x51A4)	;CJK UNIFIED IDEOGRAPH
                                (#xD4AA . #x5143)	;CJK UNIFIED IDEOGRAPH
                                (#xD4AB . #x57A3)	;CJK UNIFIED IDEOGRAPH
                                (#xD4AC . #x8881)	;CJK UNIFIED IDEOGRAPH
                                (#xD4AD . #x539F)	;CJK UNIFIED IDEOGRAPH
                                (#xD4AE . #x63F4)	;CJK UNIFIED IDEOGRAPH
                                (#xD4AF . #x8F95)	;CJK UNIFIED IDEOGRAPH
                                (#xD4B0 . #x56ED)	;CJK UNIFIED IDEOGRAPH
                                (#xD4B1 . #x5458)	;CJK UNIFIED IDEOGRAPH
                                (#xD4B2 . #x5706)	;CJK UNIFIED IDEOGRAPH
                                (#xD4B3 . #x733F)	;CJK UNIFIED IDEOGRAPH
                                (#xD4B4 . #x6E90)	;CJK UNIFIED IDEOGRAPH
                                (#xD4B5 . #x7F18)	;CJK UNIFIED IDEOGRAPH
                                (#xD4B6 . #x8FDC)	;CJK UNIFIED IDEOGRAPH
                                (#xD4B7 . #x82D1)	;CJK UNIFIED IDEOGRAPH
                                (#xD4B8 . #x613F)	;CJK UNIFIED IDEOGRAPH
                                (#xD4B9 . #x6028)	;CJK UNIFIED IDEOGRAPH
                                (#xD4BA . #x9662)	;CJK UNIFIED IDEOGRAPH
                                (#xD4BB . #x66F0)	;CJK UNIFIED IDEOGRAPH
                                (#xD4BC . #x7EA6)	;CJK UNIFIED IDEOGRAPH
                                (#xD4BD . #x8D8A)	;CJK UNIFIED IDEOGRAPH
                                (#xD4BE . #x8DC3)	;CJK UNIFIED IDEOGRAPH
                                (#xD4BF . #x94A5)	;CJK UNIFIED IDEOGRAPH
                                (#xD4C0 . #x5CB3)	;CJK UNIFIED IDEOGRAPH
                                (#xD4C1 . #x7CA4)	;CJK UNIFIED IDEOGRAPH
                                (#xD4C2 . #x6708)	;CJK UNIFIED IDEOGRAPH
                                (#xD4C3 . #x60A6)	;CJK UNIFIED IDEOGRAPH
                                (#xD4C4 . #x9605)	;CJK UNIFIED IDEOGRAPH
                                (#xD4C5 . #x8018)	;CJK UNIFIED IDEOGRAPH
                                (#xD4C6 . #x4E91)	;CJK UNIFIED IDEOGRAPH
                                (#xD4C7 . #x90E7)	;CJK UNIFIED IDEOGRAPH
                                (#xD4C8 . #x5300)	;CJK UNIFIED IDEOGRAPH
                                (#xD4C9 . #x9668)	;CJK UNIFIED IDEOGRAPH
                                (#xD4CA . #x5141)	;CJK UNIFIED IDEOGRAPH
                                (#xD4CB . #x8FD0)	;CJK UNIFIED IDEOGRAPH
                                (#xD4CC . #x8574)	;CJK UNIFIED IDEOGRAPH
                                (#xD4CD . #x915D)	;CJK UNIFIED IDEOGRAPH
                                (#xD4CE . #x6655)	;CJK UNIFIED IDEOGRAPH
                                (#xD4CF . #x97F5)	;CJK UNIFIED IDEOGRAPH
                                (#xD4D0 . #x5B55)	;CJK UNIFIED IDEOGRAPH
                                (#xD4D1 . #x531D)	;CJK UNIFIED IDEOGRAPH
                                (#xD4D2 . #x7838)	;CJK UNIFIED IDEOGRAPH
                                (#xD4D3 . #x6742)	;CJK UNIFIED IDEOGRAPH
                                (#xD4D4 . #x683D)	;CJK UNIFIED IDEOGRAPH
                                (#xD4D5 . #x54C9)	;CJK UNIFIED IDEOGRAPH
                                (#xD4D6 . #x707E)	;CJK UNIFIED IDEOGRAPH
                                (#xD4D7 . #x5BB0)	;CJK UNIFIED IDEOGRAPH
                                (#xD4D8 . #x8F7D)	;CJK UNIFIED IDEOGRAPH
                                (#xD4D9 . #x518D)	;CJK UNIFIED IDEOGRAPH
                                (#xD4DA . #x5728)	;CJK UNIFIED IDEOGRAPH
                                (#xD4DB . #x54B1)	;CJK UNIFIED IDEOGRAPH
                                (#xD4DC . #x6512)	;CJK UNIFIED IDEOGRAPH
                                (#xD4DD . #x6682)	;CJK UNIFIED IDEOGRAPH
                                (#xD4DE . #x8D5E)	;CJK UNIFIED IDEOGRAPH
                                (#xD4DF . #x8D43)	;CJK UNIFIED IDEOGRAPH
                                (#xD4E0 . #x810F)	;CJK UNIFIED IDEOGRAPH
                                (#xD4E1 . #x846C)	;CJK UNIFIED IDEOGRAPH
                                (#xD4E2 . #x906D)	;CJK UNIFIED IDEOGRAPH
                                (#xD4E3 . #x7CDF)	;CJK UNIFIED IDEOGRAPH
                                (#xD4E4 . #x51FF)	;CJK UNIFIED IDEOGRAPH
                                (#xD4E5 . #x85FB)	;CJK UNIFIED IDEOGRAPH
                                (#xD4E6 . #x67A3)	;CJK UNIFIED IDEOGRAPH
                                (#xD4E7 . #x65E9)	;CJK UNIFIED IDEOGRAPH
                                (#xD4E8 . #x6FA1)	;CJK UNIFIED IDEOGRAPH
                                (#xD4E9 . #x86A4)	;CJK UNIFIED IDEOGRAPH
                                (#xD4EA . #x8E81)	;CJK UNIFIED IDEOGRAPH
                                (#xD4EB . #x566A)	;CJK UNIFIED IDEOGRAPH
                                (#xD4EC . #x9020)	;CJK UNIFIED IDEOGRAPH
                                (#xD4ED . #x7682)	;CJK UNIFIED IDEOGRAPH
                                (#xD4EE . #x7076)	;CJK UNIFIED IDEOGRAPH
                                (#xD4EF . #x71E5)	;CJK UNIFIED IDEOGRAPH
                                (#xD4F0 . #x8D23)	;CJK UNIFIED IDEOGRAPH
                                (#xD4F1 . #x62E9)	;CJK UNIFIED IDEOGRAPH
                                (#xD4F2 . #x5219)	;CJK UNIFIED IDEOGRAPH
                                (#xD4F3 . #x6CFD)	;CJK UNIFIED IDEOGRAPH
                                (#xD4F4 . #x8D3C)	;CJK UNIFIED IDEOGRAPH
                                (#xD4F5 . #x600E)	;CJK UNIFIED IDEOGRAPH
                                (#xD4F6 . #x589E)	;CJK UNIFIED IDEOGRAPH
                                (#xD4F7 . #x618E)	;CJK UNIFIED IDEOGRAPH
                                (#xD4F8 . #x66FE)	;CJK UNIFIED IDEOGRAPH
                                (#xD4F9 . #x8D60)	;CJK UNIFIED IDEOGRAPH
                                (#xD4FA . #x624E)	;CJK UNIFIED IDEOGRAPH
                                (#xD4FB . #x55B3)	;CJK UNIFIED IDEOGRAPH
                                (#xD4FC . #x6E23)	;CJK UNIFIED IDEOGRAPH
                                (#xD4FD . #x672D)	;CJK UNIFIED IDEOGRAPH
                                (#xD4FE . #x8F67)	;CJK UNIFIED IDEOGRAPH
                                (#xD540 . #x8A81)	;CJK UNIFIED IDEOGRAPH
                                (#xD541 . #x8A82)	;CJK UNIFIED IDEOGRAPH
                                (#xD542 . #x8A83)	;CJK UNIFIED IDEOGRAPH
                                (#xD543 . #x8A84)	;CJK UNIFIED IDEOGRAPH
                                (#xD544 . #x8A85)	;CJK UNIFIED IDEOGRAPH
                                (#xD545 . #x8A86)	;CJK UNIFIED IDEOGRAPH
                                (#xD546 . #x8A87)	;CJK UNIFIED IDEOGRAPH
                                (#xD547 . #x8A88)	;CJK UNIFIED IDEOGRAPH
                                (#xD548 . #x8A8B)	;CJK UNIFIED IDEOGRAPH
                                (#xD549 . #x8A8C)	;CJK UNIFIED IDEOGRAPH
                                (#xD54A . #x8A8D)	;CJK UNIFIED IDEOGRAPH
                                (#xD54B . #x8A8E)	;CJK UNIFIED IDEOGRAPH
                                (#xD54C . #x8A8F)	;CJK UNIFIED IDEOGRAPH
                                (#xD54D . #x8A90)	;CJK UNIFIED IDEOGRAPH
                                (#xD54E . #x8A91)	;CJK UNIFIED IDEOGRAPH
                                (#xD54F . #x8A92)	;CJK UNIFIED IDEOGRAPH
                                (#xD550 . #x8A94)	;CJK UNIFIED IDEOGRAPH
                                (#xD551 . #x8A95)	;CJK UNIFIED IDEOGRAPH
                                (#xD552 . #x8A96)	;CJK UNIFIED IDEOGRAPH
                                (#xD553 . #x8A97)	;CJK UNIFIED IDEOGRAPH
                                (#xD554 . #x8A98)	;CJK UNIFIED IDEOGRAPH
                                (#xD555 . #x8A99)	;CJK UNIFIED IDEOGRAPH
                                (#xD556 . #x8A9A)	;CJK UNIFIED IDEOGRAPH
                                (#xD557 . #x8A9B)	;CJK UNIFIED IDEOGRAPH
                                (#xD558 . #x8A9C)	;CJK UNIFIED IDEOGRAPH
                                (#xD559 . #x8A9D)	;CJK UNIFIED IDEOGRAPH
                                (#xD55A . #x8A9E)	;CJK UNIFIED IDEOGRAPH
                                (#xD55B . #x8A9F)	;CJK UNIFIED IDEOGRAPH
                                (#xD55C . #x8AA0)	;CJK UNIFIED IDEOGRAPH
                                (#xD55D . #x8AA1)	;CJK UNIFIED IDEOGRAPH
                                (#xD55E . #x8AA2)	;CJK UNIFIED IDEOGRAPH
                                (#xD55F . #x8AA3)	;CJK UNIFIED IDEOGRAPH
                                (#xD560 . #x8AA4)	;CJK UNIFIED IDEOGRAPH
                                (#xD561 . #x8AA5)	;CJK UNIFIED IDEOGRAPH
                                (#xD562 . #x8AA6)	;CJK UNIFIED IDEOGRAPH
                                (#xD563 . #x8AA7)	;CJK UNIFIED IDEOGRAPH
                                (#xD564 . #x8AA8)	;CJK UNIFIED IDEOGRAPH
                                (#xD565 . #x8AA9)	;CJK UNIFIED IDEOGRAPH
                                (#xD566 . #x8AAA)	;CJK UNIFIED IDEOGRAPH
                                (#xD567 . #x8AAB)	;CJK UNIFIED IDEOGRAPH
                                (#xD568 . #x8AAC)	;CJK UNIFIED IDEOGRAPH
                                (#xD569 . #x8AAD)	;CJK UNIFIED IDEOGRAPH
                                (#xD56A . #x8AAE)	;CJK UNIFIED IDEOGRAPH
                                (#xD56B . #x8AAF)	;CJK UNIFIED IDEOGRAPH
                                (#xD56C . #x8AB0)	;CJK UNIFIED IDEOGRAPH
                                (#xD56D . #x8AB1)	;CJK UNIFIED IDEOGRAPH
                                (#xD56E . #x8AB2)	;CJK UNIFIED IDEOGRAPH
                                (#xD56F . #x8AB3)	;CJK UNIFIED IDEOGRAPH
                                (#xD570 . #x8AB4)	;CJK UNIFIED IDEOGRAPH
                                (#xD571 . #x8AB5)	;CJK UNIFIED IDEOGRAPH
                                (#xD572 . #x8AB6)	;CJK UNIFIED IDEOGRAPH
                                (#xD573 . #x8AB7)	;CJK UNIFIED IDEOGRAPH
                                (#xD574 . #x8AB8)	;CJK UNIFIED IDEOGRAPH
                                (#xD575 . #x8AB9)	;CJK UNIFIED IDEOGRAPH
                                (#xD576 . #x8ABA)	;CJK UNIFIED IDEOGRAPH
                                (#xD577 . #x8ABB)	;CJK UNIFIED IDEOGRAPH
                                (#xD578 . #x8ABC)	;CJK UNIFIED IDEOGRAPH
                                (#xD579 . #x8ABD)	;CJK UNIFIED IDEOGRAPH
                                (#xD57A . #x8ABE)	;CJK UNIFIED IDEOGRAPH
                                (#xD57B . #x8ABF)	;CJK UNIFIED IDEOGRAPH
                                (#xD57C . #x8AC0)	;CJK UNIFIED IDEOGRAPH
                                (#xD57D . #x8AC1)	;CJK UNIFIED IDEOGRAPH
                                (#xD57E . #x8AC2)	;CJK UNIFIED IDEOGRAPH
                                (#xD580 . #x8AC3)	;CJK UNIFIED IDEOGRAPH
                                (#xD581 . #x8AC4)	;CJK UNIFIED IDEOGRAPH
                                (#xD582 . #x8AC5)	;CJK UNIFIED IDEOGRAPH
                                (#xD583 . #x8AC6)	;CJK UNIFIED IDEOGRAPH
                                (#xD584 . #x8AC7)	;CJK UNIFIED IDEOGRAPH
                                (#xD585 . #x8AC8)	;CJK UNIFIED IDEOGRAPH
                                (#xD586 . #x8AC9)	;CJK UNIFIED IDEOGRAPH
                                (#xD587 . #x8ACA)	;CJK UNIFIED IDEOGRAPH
                                (#xD588 . #x8ACB)	;CJK UNIFIED IDEOGRAPH
                                (#xD589 . #x8ACC)	;CJK UNIFIED IDEOGRAPH
                                (#xD58A . #x8ACD)	;CJK UNIFIED IDEOGRAPH
                                (#xD58B . #x8ACE)	;CJK UNIFIED IDEOGRAPH
                                (#xD58C . #x8ACF)	;CJK UNIFIED IDEOGRAPH
                                (#xD58D . #x8AD0)	;CJK UNIFIED IDEOGRAPH
                                (#xD58E . #x8AD1)	;CJK UNIFIED IDEOGRAPH
                                (#xD58F . #x8AD2)	;CJK UNIFIED IDEOGRAPH
                                (#xD590 . #x8AD3)	;CJK UNIFIED IDEOGRAPH
                                (#xD591 . #x8AD4)	;CJK UNIFIED IDEOGRAPH
                                (#xD592 . #x8AD5)	;CJK UNIFIED IDEOGRAPH
                                (#xD593 . #x8AD6)	;CJK UNIFIED IDEOGRAPH
                                (#xD594 . #x8AD7)	;CJK UNIFIED IDEOGRAPH
                                (#xD595 . #x8AD8)	;CJK UNIFIED IDEOGRAPH
                                (#xD596 . #x8AD9)	;CJK UNIFIED IDEOGRAPH
                                (#xD597 . #x8ADA)	;CJK UNIFIED IDEOGRAPH
                                (#xD598 . #x8ADB)	;CJK UNIFIED IDEOGRAPH
                                (#xD599 . #x8ADC)	;CJK UNIFIED IDEOGRAPH
                                (#xD59A . #x8ADD)	;CJK UNIFIED IDEOGRAPH
                                (#xD59B . #x8ADE)	;CJK UNIFIED IDEOGRAPH
                                (#xD59C . #x8ADF)	;CJK UNIFIED IDEOGRAPH
                                (#xD59D . #x8AE0)	;CJK UNIFIED IDEOGRAPH
                                (#xD59E . #x8AE1)	;CJK UNIFIED IDEOGRAPH
                                (#xD59F . #x8AE2)	;CJK UNIFIED IDEOGRAPH
                                (#xD5A0 . #x8AE3)	;CJK UNIFIED IDEOGRAPH
                                (#xD5A1 . #x94E1)	;CJK UNIFIED IDEOGRAPH
                                (#xD5A2 . #x95F8)	;CJK UNIFIED IDEOGRAPH
                                (#xD5A3 . #x7728)	;CJK UNIFIED IDEOGRAPH
                                (#xD5A4 . #x6805)	;CJK UNIFIED IDEOGRAPH
                                (#xD5A5 . #x69A8)	;CJK UNIFIED IDEOGRAPH
                                (#xD5A6 . #x548B)	;CJK UNIFIED IDEOGRAPH
                                (#xD5A7 . #x4E4D)	;CJK UNIFIED IDEOGRAPH
                                (#xD5A8 . #x70B8)	;CJK UNIFIED IDEOGRAPH
                                (#xD5A9 . #x8BC8)	;CJK UNIFIED IDEOGRAPH
                                (#xD5AA . #x6458)	;CJK UNIFIED IDEOGRAPH
                                (#xD5AB . #x658B)	;CJK UNIFIED IDEOGRAPH
                                (#xD5AC . #x5B85)	;CJK UNIFIED IDEOGRAPH
                                (#xD5AD . #x7A84)	;CJK UNIFIED IDEOGRAPH
                                (#xD5AE . #x503A)	;CJK UNIFIED IDEOGRAPH
                                (#xD5AF . #x5BE8)	;CJK UNIFIED IDEOGRAPH
                                (#xD5B0 . #x77BB)	;CJK UNIFIED IDEOGRAPH
                                (#xD5B1 . #x6BE1)	;CJK UNIFIED IDEOGRAPH
                                (#xD5B2 . #x8A79)	;CJK UNIFIED IDEOGRAPH
                                (#xD5B3 . #x7C98)	;CJK UNIFIED IDEOGRAPH
                                (#xD5B4 . #x6CBE)	;CJK UNIFIED IDEOGRAPH
                                (#xD5B5 . #x76CF)	;CJK UNIFIED IDEOGRAPH
                                (#xD5B6 . #x65A9)	;CJK UNIFIED IDEOGRAPH
                                (#xD5B7 . #x8F97)	;CJK UNIFIED IDEOGRAPH
                                (#xD5B8 . #x5D2D)	;CJK UNIFIED IDEOGRAPH
                                (#xD5B9 . #x5C55)	;CJK UNIFIED IDEOGRAPH
                                (#xD5BA . #x8638)	;CJK UNIFIED IDEOGRAPH
                                (#xD5BB . #x6808)	;CJK UNIFIED IDEOGRAPH
                                (#xD5BC . #x5360)	;CJK UNIFIED IDEOGRAPH
                                (#xD5BD . #x6218)	;CJK UNIFIED IDEOGRAPH
                                (#xD5BE . #x7AD9)	;CJK UNIFIED IDEOGRAPH
                                (#xD5BF . #x6E5B)	;CJK UNIFIED IDEOGRAPH
                                (#xD5C0 . #x7EFD)	;CJK UNIFIED IDEOGRAPH
                                (#xD5C1 . #x6A1F)	;CJK UNIFIED IDEOGRAPH
                                (#xD5C2 . #x7AE0)	;CJK UNIFIED IDEOGRAPH
                                (#xD5C3 . #x5F70)	;CJK UNIFIED IDEOGRAPH
                                (#xD5C4 . #x6F33)	;CJK UNIFIED IDEOGRAPH
                                (#xD5C5 . #x5F20)	;CJK UNIFIED IDEOGRAPH
                                (#xD5C6 . #x638C)	;CJK UNIFIED IDEOGRAPH
                                (#xD5C7 . #x6DA8)	;CJK UNIFIED IDEOGRAPH
                                (#xD5C8 . #x6756)	;CJK UNIFIED IDEOGRAPH
                                (#xD5C9 . #x4E08)	;CJK UNIFIED IDEOGRAPH
                                (#xD5CA . #x5E10)	;CJK UNIFIED IDEOGRAPH
                                (#xD5CB . #x8D26)	;CJK UNIFIED IDEOGRAPH
                                (#xD5CC . #x4ED7)	;CJK UNIFIED IDEOGRAPH
                                (#xD5CD . #x80C0)	;CJK UNIFIED IDEOGRAPH
                                (#xD5CE . #x7634)	;CJK UNIFIED IDEOGRAPH
                                (#xD5CF . #x969C)	;CJK UNIFIED IDEOGRAPH
                                (#xD5D0 . #x62DB)	;CJK UNIFIED IDEOGRAPH
                                (#xD5D1 . #x662D)	;CJK UNIFIED IDEOGRAPH
                                (#xD5D2 . #x627E)	;CJK UNIFIED IDEOGRAPH
                                (#xD5D3 . #x6CBC)	;CJK UNIFIED IDEOGRAPH
                                (#xD5D4 . #x8D75)	;CJK UNIFIED IDEOGRAPH
                                (#xD5D5 . #x7167)	;CJK UNIFIED IDEOGRAPH
                                (#xD5D6 . #x7F69)	;CJK UNIFIED IDEOGRAPH
                                (#xD5D7 . #x5146)	;CJK UNIFIED IDEOGRAPH
                                (#xD5D8 . #x8087)	;CJK UNIFIED IDEOGRAPH
                                (#xD5D9 . #x53EC)	;CJK UNIFIED IDEOGRAPH
                                (#xD5DA . #x906E)	;CJK UNIFIED IDEOGRAPH
                                (#xD5DB . #x6298)	;CJK UNIFIED IDEOGRAPH
                                (#xD5DC . #x54F2)	;CJK UNIFIED IDEOGRAPH
                                (#xD5DD . #x86F0)	;CJK UNIFIED IDEOGRAPH
                                (#xD5DE . #x8F99)	;CJK UNIFIED IDEOGRAPH
                                (#xD5DF . #x8005)	;CJK UNIFIED IDEOGRAPH
                                (#xD5E0 . #x9517)	;CJK UNIFIED IDEOGRAPH
                                (#xD5E1 . #x8517)	;CJK UNIFIED IDEOGRAPH
                                (#xD5E2 . #x8FD9)	;CJK UNIFIED IDEOGRAPH
                                (#xD5E3 . #x6D59)	;CJK UNIFIED IDEOGRAPH
                                (#xD5E4 . #x73CD)	;CJK UNIFIED IDEOGRAPH
                                (#xD5E5 . #x659F)	;CJK UNIFIED IDEOGRAPH
                                (#xD5E6 . #x771F)	;CJK UNIFIED IDEOGRAPH
                                (#xD5E7 . #x7504)	;CJK UNIFIED IDEOGRAPH
                                (#xD5E8 . #x7827)	;CJK UNIFIED IDEOGRAPH
                                (#xD5E9 . #x81FB)	;CJK UNIFIED IDEOGRAPH
                                (#xD5EA . #x8D1E)	;CJK UNIFIED IDEOGRAPH
                                (#xD5EB . #x9488)	;CJK UNIFIED IDEOGRAPH
                                (#xD5EC . #x4FA6)	;CJK UNIFIED IDEOGRAPH
                                (#xD5ED . #x6795)	;CJK UNIFIED IDEOGRAPH
                                (#xD5EE . #x75B9)	;CJK UNIFIED IDEOGRAPH
                                (#xD5EF . #x8BCA)	;CJK UNIFIED IDEOGRAPH
                                (#xD5F0 . #x9707)	;CJK UNIFIED IDEOGRAPH
                                (#xD5F1 . #x632F)	;CJK UNIFIED IDEOGRAPH
                                (#xD5F2 . #x9547)	;CJK UNIFIED IDEOGRAPH
                                (#xD5F3 . #x9635)	;CJK UNIFIED IDEOGRAPH
                                (#xD5F4 . #x84B8)	;CJK UNIFIED IDEOGRAPH
                                (#xD5F5 . #x6323)	;CJK UNIFIED IDEOGRAPH
                                (#xD5F6 . #x7741)	;CJK UNIFIED IDEOGRAPH
                                (#xD5F7 . #x5F81)	;CJK UNIFIED IDEOGRAPH
                                (#xD5F8 . #x72F0)	;CJK UNIFIED IDEOGRAPH
                                (#xD5F9 . #x4E89)	;CJK UNIFIED IDEOGRAPH
                                (#xD5FA . #x6014)	;CJK UNIFIED IDEOGRAPH
                                (#xD5FB . #x6574)	;CJK UNIFIED IDEOGRAPH
                                (#xD5FC . #x62EF)	;CJK UNIFIED IDEOGRAPH
                                (#xD5FD . #x6B63)	;CJK UNIFIED IDEOGRAPH
                                (#xD5FE . #x653F)	;CJK UNIFIED IDEOGRAPH
                                (#xD640 . #x8AE4)	;CJK UNIFIED IDEOGRAPH
                                (#xD641 . #x8AE5)	;CJK UNIFIED IDEOGRAPH
                                (#xD642 . #x8AE6)	;CJK UNIFIED IDEOGRAPH
                                (#xD643 . #x8AE7)	;CJK UNIFIED IDEOGRAPH
                                (#xD644 . #x8AE8)	;CJK UNIFIED IDEOGRAPH
                                (#xD645 . #x8AE9)	;CJK UNIFIED IDEOGRAPH
                                (#xD646 . #x8AEA)	;CJK UNIFIED IDEOGRAPH
                                (#xD647 . #x8AEB)	;CJK UNIFIED IDEOGRAPH
                                (#xD648 . #x8AEC)	;CJK UNIFIED IDEOGRAPH
                                (#xD649 . #x8AED)	;CJK UNIFIED IDEOGRAPH
                                (#xD64A . #x8AEE)	;CJK UNIFIED IDEOGRAPH
                                (#xD64B . #x8AEF)	;CJK UNIFIED IDEOGRAPH
                                (#xD64C . #x8AF0)	;CJK UNIFIED IDEOGRAPH
                                (#xD64D . #x8AF1)	;CJK UNIFIED IDEOGRAPH
                                (#xD64E . #x8AF2)	;CJK UNIFIED IDEOGRAPH
                                (#xD64F . #x8AF3)	;CJK UNIFIED IDEOGRAPH
                                (#xD650 . #x8AF4)	;CJK UNIFIED IDEOGRAPH
                                (#xD651 . #x8AF5)	;CJK UNIFIED IDEOGRAPH
                                (#xD652 . #x8AF6)	;CJK UNIFIED IDEOGRAPH
                                (#xD653 . #x8AF7)	;CJK UNIFIED IDEOGRAPH
                                (#xD654 . #x8AF8)	;CJK UNIFIED IDEOGRAPH
                                (#xD655 . #x8AF9)	;CJK UNIFIED IDEOGRAPH
                                (#xD656 . #x8AFA)	;CJK UNIFIED IDEOGRAPH
                                (#xD657 . #x8AFB)	;CJK UNIFIED IDEOGRAPH
                                (#xD658 . #x8AFC)	;CJK UNIFIED IDEOGRAPH
                                (#xD659 . #x8AFD)	;CJK UNIFIED IDEOGRAPH
                                (#xD65A . #x8AFE)	;CJK UNIFIED IDEOGRAPH
                                (#xD65B . #x8AFF)	;CJK UNIFIED IDEOGRAPH
                                (#xD65C . #x8B00)	;CJK UNIFIED IDEOGRAPH
                                (#xD65D . #x8B01)	;CJK UNIFIED IDEOGRAPH
                                (#xD65E . #x8B02)	;CJK UNIFIED IDEOGRAPH
                                (#xD65F . #x8B03)	;CJK UNIFIED IDEOGRAPH
                                (#xD660 . #x8B04)	;CJK UNIFIED IDEOGRAPH
                                (#xD661 . #x8B05)	;CJK UNIFIED IDEOGRAPH
                                (#xD662 . #x8B06)	;CJK UNIFIED IDEOGRAPH
                                (#xD663 . #x8B08)	;CJK UNIFIED IDEOGRAPH
                                (#xD664 . #x8B09)	;CJK UNIFIED IDEOGRAPH
                                (#xD665 . #x8B0A)	;CJK UNIFIED IDEOGRAPH
                                (#xD666 . #x8B0B)	;CJK UNIFIED IDEOGRAPH
                                (#xD667 . #x8B0C)	;CJK UNIFIED IDEOGRAPH
                                (#xD668 . #x8B0D)	;CJK UNIFIED IDEOGRAPH
                                (#xD669 . #x8B0E)	;CJK UNIFIED IDEOGRAPH
                                (#xD66A . #x8B0F)	;CJK UNIFIED IDEOGRAPH
                                (#xD66B . #x8B10)	;CJK UNIFIED IDEOGRAPH
                                (#xD66C . #x8B11)	;CJK UNIFIED IDEOGRAPH
                                (#xD66D . #x8B12)	;CJK UNIFIED IDEOGRAPH
                                (#xD66E . #x8B13)	;CJK UNIFIED IDEOGRAPH
                                (#xD66F . #x8B14)	;CJK UNIFIED IDEOGRAPH
                                (#xD670 . #x8B15)	;CJK UNIFIED IDEOGRAPH
                                (#xD671 . #x8B16)	;CJK UNIFIED IDEOGRAPH
                                (#xD672 . #x8B17)	;CJK UNIFIED IDEOGRAPH
                                (#xD673 . #x8B18)	;CJK UNIFIED IDEOGRAPH
                                (#xD674 . #x8B19)	;CJK UNIFIED IDEOGRAPH
                                (#xD675 . #x8B1A)	;CJK UNIFIED IDEOGRAPH
                                (#xD676 . #x8B1B)	;CJK UNIFIED IDEOGRAPH
                                (#xD677 . #x8B1C)	;CJK UNIFIED IDEOGRAPH
                                (#xD678 . #x8B1D)	;CJK UNIFIED IDEOGRAPH
                                (#xD679 . #x8B1E)	;CJK UNIFIED IDEOGRAPH
                                (#xD67A . #x8B1F)	;CJK UNIFIED IDEOGRAPH
                                (#xD67B . #x8B20)	;CJK UNIFIED IDEOGRAPH
                                (#xD67C . #x8B21)	;CJK UNIFIED IDEOGRAPH
                                (#xD67D . #x8B22)	;CJK UNIFIED IDEOGRAPH
                                (#xD67E . #x8B23)	;CJK UNIFIED IDEOGRAPH
                                (#xD680 . #x8B24)	;CJK UNIFIED IDEOGRAPH
                                (#xD681 . #x8B25)	;CJK UNIFIED IDEOGRAPH
                                (#xD682 . #x8B27)	;CJK UNIFIED IDEOGRAPH
                                (#xD683 . #x8B28)	;CJK UNIFIED IDEOGRAPH
                                (#xD684 . #x8B29)	;CJK UNIFIED IDEOGRAPH
                                (#xD685 . #x8B2A)	;CJK UNIFIED IDEOGRAPH
                                (#xD686 . #x8B2B)	;CJK UNIFIED IDEOGRAPH
                                (#xD687 . #x8B2C)	;CJK UNIFIED IDEOGRAPH
                                (#xD688 . #x8B2D)	;CJK UNIFIED IDEOGRAPH
                                (#xD689 . #x8B2E)	;CJK UNIFIED IDEOGRAPH
                                (#xD68A . #x8B2F)	;CJK UNIFIED IDEOGRAPH
                                (#xD68B . #x8B30)	;CJK UNIFIED IDEOGRAPH
                                (#xD68C . #x8B31)	;CJK UNIFIED IDEOGRAPH
                                (#xD68D . #x8B32)	;CJK UNIFIED IDEOGRAPH
                                (#xD68E . #x8B33)	;CJK UNIFIED IDEOGRAPH
                                (#xD68F . #x8B34)	;CJK UNIFIED IDEOGRAPH
                                (#xD690 . #x8B35)	;CJK UNIFIED IDEOGRAPH
                                (#xD691 . #x8B36)	;CJK UNIFIED IDEOGRAPH
                                (#xD692 . #x8B37)	;CJK UNIFIED IDEOGRAPH
                                (#xD693 . #x8B38)	;CJK UNIFIED IDEOGRAPH
                                (#xD694 . #x8B39)	;CJK UNIFIED IDEOGRAPH
                                (#xD695 . #x8B3A)	;CJK UNIFIED IDEOGRAPH
                                (#xD696 . #x8B3B)	;CJK UNIFIED IDEOGRAPH
                                (#xD697 . #x8B3C)	;CJK UNIFIED IDEOGRAPH
                                (#xD698 . #x8B3D)	;CJK UNIFIED IDEOGRAPH
                                (#xD699 . #x8B3E)	;CJK UNIFIED IDEOGRAPH
                                (#xD69A . #x8B3F)	;CJK UNIFIED IDEOGRAPH
                                (#xD69B . #x8B40)	;CJK UNIFIED IDEOGRAPH
                                (#xD69C . #x8B41)	;CJK UNIFIED IDEOGRAPH
                                (#xD69D . #x8B42)	;CJK UNIFIED IDEOGRAPH
                                (#xD69E . #x8B43)	;CJK UNIFIED IDEOGRAPH
                                (#xD69F . #x8B44)	;CJK UNIFIED IDEOGRAPH
                                (#xD6A0 . #x8B45)	;CJK UNIFIED IDEOGRAPH
                                (#xD6A1 . #x5E27)	;CJK UNIFIED IDEOGRAPH
                                (#xD6A2 . #x75C7)	;CJK UNIFIED IDEOGRAPH
                                (#xD6A3 . #x90D1)	;CJK UNIFIED IDEOGRAPH
                                (#xD6A4 . #x8BC1)	;CJK UNIFIED IDEOGRAPH
                                (#xD6A5 . #x829D)	;CJK UNIFIED IDEOGRAPH
                                (#xD6A6 . #x679D)	;CJK UNIFIED IDEOGRAPH
                                (#xD6A7 . #x652F)	;CJK UNIFIED IDEOGRAPH
                                (#xD6A8 . #x5431)	;CJK UNIFIED IDEOGRAPH
                                (#xD6A9 . #x8718)	;CJK UNIFIED IDEOGRAPH
                                (#xD6AA . #x77E5)	;CJK UNIFIED IDEOGRAPH
                                (#xD6AB . #x80A2)	;CJK UNIFIED IDEOGRAPH
                                (#xD6AC . #x8102)	;CJK UNIFIED IDEOGRAPH
                                (#xD6AD . #x6C41)	;CJK UNIFIED IDEOGRAPH
                                (#xD6AE . #x4E4B)	;CJK UNIFIED IDEOGRAPH
                                (#xD6AF . #x7EC7)	;CJK UNIFIED IDEOGRAPH
                                (#xD6B0 . #x804C)	;CJK UNIFIED IDEOGRAPH
                                (#xD6B1 . #x76F4)	;CJK UNIFIED IDEOGRAPH
                                (#xD6B2 . #x690D)	;CJK UNIFIED IDEOGRAPH
                                (#xD6B3 . #x6B96)	;CJK UNIFIED IDEOGRAPH
                                (#xD6B4 . #x6267)	;CJK UNIFIED IDEOGRAPH
                                (#xD6B5 . #x503C)	;CJK UNIFIED IDEOGRAPH
                                (#xD6B6 . #x4F84)	;CJK UNIFIED IDEOGRAPH
                                (#xD6B7 . #x5740)	;CJK UNIFIED IDEOGRAPH
                                (#xD6B8 . #x6307)	;CJK UNIFIED IDEOGRAPH
                                (#xD6B9 . #x6B62)	;CJK UNIFIED IDEOGRAPH
                                (#xD6BA . #x8DBE)	;CJK UNIFIED IDEOGRAPH
                                (#xD6BB . #x53EA)	;CJK UNIFIED IDEOGRAPH
                                (#xD6BC . #x65E8)	;CJK UNIFIED IDEOGRAPH
                                (#xD6BD . #x7EB8)	;CJK UNIFIED IDEOGRAPH
                                (#xD6BE . #x5FD7)	;CJK UNIFIED IDEOGRAPH
                                (#xD6BF . #x631A)	;CJK UNIFIED IDEOGRAPH
                                (#xD6C0 . #x63B7)	;CJK UNIFIED IDEOGRAPH
                                (#xD6C1 . #x81F3)	;CJK UNIFIED IDEOGRAPH
                                (#xD6C2 . #x81F4)	;CJK UNIFIED IDEOGRAPH
                                (#xD6C3 . #x7F6E)	;CJK UNIFIED IDEOGRAPH
                                (#xD6C4 . #x5E1C)	;CJK UNIFIED IDEOGRAPH
                                (#xD6C5 . #x5CD9)	;CJK UNIFIED IDEOGRAPH
                                (#xD6C6 . #x5236)	;CJK UNIFIED IDEOGRAPH
                                (#xD6C7 . #x667A)	;CJK UNIFIED IDEOGRAPH
                                (#xD6C8 . #x79E9)	;CJK UNIFIED IDEOGRAPH
                                (#xD6C9 . #x7A1A)	;CJK UNIFIED IDEOGRAPH
                                (#xD6CA . #x8D28)	;CJK UNIFIED IDEOGRAPH
                                (#xD6CB . #x7099)	;CJK UNIFIED IDEOGRAPH
                                (#xD6CC . #x75D4)	;CJK UNIFIED IDEOGRAPH
                                (#xD6CD . #x6EDE)	;CJK UNIFIED IDEOGRAPH
                                (#xD6CE . #x6CBB)	;CJK UNIFIED IDEOGRAPH
                                (#xD6CF . #x7A92)	;CJK UNIFIED IDEOGRAPH
                                (#xD6D0 . #x4E2D)	;CJK UNIFIED IDEOGRAPH
                                (#xD6D1 . #x76C5)	;CJK UNIFIED IDEOGRAPH
                                (#xD6D2 . #x5FE0)	;CJK UNIFIED IDEOGRAPH
                                (#xD6D3 . #x949F)	;CJK UNIFIED IDEOGRAPH
                                (#xD6D4 . #x8877)	;CJK UNIFIED IDEOGRAPH
                                (#xD6D5 . #x7EC8)	;CJK UNIFIED IDEOGRAPH
                                (#xD6D6 . #x79CD)	;CJK UNIFIED IDEOGRAPH
                                (#xD6D7 . #x80BF)	;CJK UNIFIED IDEOGRAPH
                                (#xD6D8 . #x91CD)	;CJK UNIFIED IDEOGRAPH
                                (#xD6D9 . #x4EF2)	;CJK UNIFIED IDEOGRAPH
                                (#xD6DA . #x4F17)	;CJK UNIFIED IDEOGRAPH
                                (#xD6DB . #x821F)	;CJK UNIFIED IDEOGRAPH
                                (#xD6DC . #x5468)	;CJK UNIFIED IDEOGRAPH
                                (#xD6DD . #x5DDE)	;CJK UNIFIED IDEOGRAPH
                                (#xD6DE . #x6D32)	;CJK UNIFIED IDEOGRAPH
                                (#xD6DF . #x8BCC)	;CJK UNIFIED IDEOGRAPH
                                (#xD6E0 . #x7CA5)	;CJK UNIFIED IDEOGRAPH
                                (#xD6E1 . #x8F74)	;CJK UNIFIED IDEOGRAPH
                                (#xD6E2 . #x8098)	;CJK UNIFIED IDEOGRAPH
                                (#xD6E3 . #x5E1A)	;CJK UNIFIED IDEOGRAPH
                                (#xD6E4 . #x5492)	;CJK UNIFIED IDEOGRAPH
                                (#xD6E5 . #x76B1)	;CJK UNIFIED IDEOGRAPH
                                (#xD6E6 . #x5B99)	;CJK UNIFIED IDEOGRAPH
                                (#xD6E7 . #x663C)	;CJK UNIFIED IDEOGRAPH
                                (#xD6E8 . #x9AA4)	;CJK UNIFIED IDEOGRAPH
                                (#xD6E9 . #x73E0)	;CJK UNIFIED IDEOGRAPH
                                (#xD6EA . #x682A)	;CJK UNIFIED IDEOGRAPH
                                (#xD6EB . #x86DB)	;CJK UNIFIED IDEOGRAPH
                                (#xD6EC . #x6731)	;CJK UNIFIED IDEOGRAPH
                                (#xD6ED . #x732A)	;CJK UNIFIED IDEOGRAPH
                                (#xD6EE . #x8BF8)	;CJK UNIFIED IDEOGRAPH
                                (#xD6EF . #x8BDB)	;CJK UNIFIED IDEOGRAPH
                                (#xD6F0 . #x9010)	;CJK UNIFIED IDEOGRAPH
                                (#xD6F1 . #x7AF9)	;CJK UNIFIED IDEOGRAPH
                                (#xD6F2 . #x70DB)	;CJK UNIFIED IDEOGRAPH
                                (#xD6F3 . #x716E)	;CJK UNIFIED IDEOGRAPH
                                (#xD6F4 . #x62C4)	;CJK UNIFIED IDEOGRAPH
                                (#xD6F5 . #x77A9)	;CJK UNIFIED IDEOGRAPH
                                (#xD6F6 . #x5631)	;CJK UNIFIED IDEOGRAPH
                                (#xD6F7 . #x4E3B)	;CJK UNIFIED IDEOGRAPH
                                (#xD6F8 . #x8457)	;CJK UNIFIED IDEOGRAPH
                                (#xD6F9 . #x67F1)	;CJK UNIFIED IDEOGRAPH
                                (#xD6FA . #x52A9)	;CJK UNIFIED IDEOGRAPH
                                (#xD6FB . #x86C0)	;CJK UNIFIED IDEOGRAPH
                                (#xD6FC . #x8D2E)	;CJK UNIFIED IDEOGRAPH
                                (#xD6FD . #x94F8)	;CJK UNIFIED IDEOGRAPH
                                (#xD6FE . #x7B51)	;CJK UNIFIED IDEOGRAPH
                                (#xD740 . #x8B46)	;CJK UNIFIED IDEOGRAPH
                                (#xD741 . #x8B47)	;CJK UNIFIED IDEOGRAPH
                                (#xD742 . #x8B48)	;CJK UNIFIED IDEOGRAPH
                                (#xD743 . #x8B49)	;CJK UNIFIED IDEOGRAPH
                                (#xD744 . #x8B4A)	;CJK UNIFIED IDEOGRAPH
                                (#xD745 . #x8B4B)	;CJK UNIFIED IDEOGRAPH
                                (#xD746 . #x8B4C)	;CJK UNIFIED IDEOGRAPH
                                (#xD747 . #x8B4D)	;CJK UNIFIED IDEOGRAPH
                                (#xD748 . #x8B4E)	;CJK UNIFIED IDEOGRAPH
                                (#xD749 . #x8B4F)	;CJK UNIFIED IDEOGRAPH
                                (#xD74A . #x8B50)	;CJK UNIFIED IDEOGRAPH
                                (#xD74B . #x8B51)	;CJK UNIFIED IDEOGRAPH
                                (#xD74C . #x8B52)	;CJK UNIFIED IDEOGRAPH
                                (#xD74D . #x8B53)	;CJK UNIFIED IDEOGRAPH
                                (#xD74E . #x8B54)	;CJK UNIFIED IDEOGRAPH
                                (#xD74F . #x8B55)	;CJK UNIFIED IDEOGRAPH
                                (#xD750 . #x8B56)	;CJK UNIFIED IDEOGRAPH
                                (#xD751 . #x8B57)	;CJK UNIFIED IDEOGRAPH
                                (#xD752 . #x8B58)	;CJK UNIFIED IDEOGRAPH
                                (#xD753 . #x8B59)	;CJK UNIFIED IDEOGRAPH
                                (#xD754 . #x8B5A)	;CJK UNIFIED IDEOGRAPH
                                (#xD755 . #x8B5B)	;CJK UNIFIED IDEOGRAPH
                                (#xD756 . #x8B5C)	;CJK UNIFIED IDEOGRAPH
                                (#xD757 . #x8B5D)	;CJK UNIFIED IDEOGRAPH
                                (#xD758 . #x8B5E)	;CJK UNIFIED IDEOGRAPH
                                (#xD759 . #x8B5F)	;CJK UNIFIED IDEOGRAPH
                                (#xD75A . #x8B60)	;CJK UNIFIED IDEOGRAPH
                                (#xD75B . #x8B61)	;CJK UNIFIED IDEOGRAPH
                                (#xD75C . #x8B62)	;CJK UNIFIED IDEOGRAPH
                                (#xD75D . #x8B63)	;CJK UNIFIED IDEOGRAPH
                                (#xD75E . #x8B64)	;CJK UNIFIED IDEOGRAPH
                                (#xD75F . #x8B65)	;CJK UNIFIED IDEOGRAPH
                                (#xD760 . #x8B67)	;CJK UNIFIED IDEOGRAPH
                                (#xD761 . #x8B68)	;CJK UNIFIED IDEOGRAPH
                                (#xD762 . #x8B69)	;CJK UNIFIED IDEOGRAPH
                                (#xD763 . #x8B6A)	;CJK UNIFIED IDEOGRAPH
                                (#xD764 . #x8B6B)	;CJK UNIFIED IDEOGRAPH
                                (#xD765 . #x8B6D)	;CJK UNIFIED IDEOGRAPH
                                (#xD766 . #x8B6E)	;CJK UNIFIED IDEOGRAPH
                                (#xD767 . #x8B6F)	;CJK UNIFIED IDEOGRAPH
                                (#xD768 . #x8B70)	;CJK UNIFIED IDEOGRAPH
                                (#xD769 . #x8B71)	;CJK UNIFIED IDEOGRAPH
                                (#xD76A . #x8B72)	;CJK UNIFIED IDEOGRAPH
                                (#xD76B . #x8B73)	;CJK UNIFIED IDEOGRAPH
                                (#xD76C . #x8B74)	;CJK UNIFIED IDEOGRAPH
                                (#xD76D . #x8B75)	;CJK UNIFIED IDEOGRAPH
                                (#xD76E . #x8B76)	;CJK UNIFIED IDEOGRAPH
                                (#xD76F . #x8B77)	;CJK UNIFIED IDEOGRAPH
                                (#xD770 . #x8B78)	;CJK UNIFIED IDEOGRAPH
                                (#xD771 . #x8B79)	;CJK UNIFIED IDEOGRAPH
                                (#xD772 . #x8B7A)	;CJK UNIFIED IDEOGRAPH
                                (#xD773 . #x8B7B)	;CJK UNIFIED IDEOGRAPH
                                (#xD774 . #x8B7C)	;CJK UNIFIED IDEOGRAPH
                                (#xD775 . #x8B7D)	;CJK UNIFIED IDEOGRAPH
                                (#xD776 . #x8B7E)	;CJK UNIFIED IDEOGRAPH
                                (#xD777 . #x8B7F)	;CJK UNIFIED IDEOGRAPH
                                (#xD778 . #x8B80)	;CJK UNIFIED IDEOGRAPH
                                (#xD779 . #x8B81)	;CJK UNIFIED IDEOGRAPH
                                (#xD77A . #x8B82)	;CJK UNIFIED IDEOGRAPH
                                (#xD77B . #x8B83)	;CJK UNIFIED IDEOGRAPH
                                (#xD77C . #x8B84)	;CJK UNIFIED IDEOGRAPH
                                (#xD77D . #x8B85)	;CJK UNIFIED IDEOGRAPH
                                (#xD77E . #x8B86)	;CJK UNIFIED IDEOGRAPH
                                (#xD780 . #x8B87)	;CJK UNIFIED IDEOGRAPH
                                (#xD781 . #x8B88)	;CJK UNIFIED IDEOGRAPH
                                (#xD782 . #x8B89)	;CJK UNIFIED IDEOGRAPH
                                (#xD783 . #x8B8A)	;CJK UNIFIED IDEOGRAPH
                                (#xD784 . #x8B8B)	;CJK UNIFIED IDEOGRAPH
                                (#xD785 . #x8B8C)	;CJK UNIFIED IDEOGRAPH
                                (#xD786 . #x8B8D)	;CJK UNIFIED IDEOGRAPH
                                (#xD787 . #x8B8E)	;CJK UNIFIED IDEOGRAPH
                                (#xD788 . #x8B8F)	;CJK UNIFIED IDEOGRAPH
                                (#xD789 . #x8B90)	;CJK UNIFIED IDEOGRAPH
                                (#xD78A . #x8B91)	;CJK UNIFIED IDEOGRAPH
                                (#xD78B . #x8B92)	;CJK UNIFIED IDEOGRAPH
                                (#xD78C . #x8B93)	;CJK UNIFIED IDEOGRAPH
                                (#xD78D . #x8B94)	;CJK UNIFIED IDEOGRAPH
                                (#xD78E . #x8B95)	;CJK UNIFIED IDEOGRAPH
                                (#xD78F . #x8B96)	;CJK UNIFIED IDEOGRAPH
                                (#xD790 . #x8B97)	;CJK UNIFIED IDEOGRAPH
                                (#xD791 . #x8B98)	;CJK UNIFIED IDEOGRAPH
                                (#xD792 . #x8B99)	;CJK UNIFIED IDEOGRAPH
                                (#xD793 . #x8B9A)	;CJK UNIFIED IDEOGRAPH
                                (#xD794 . #x8B9B)	;CJK UNIFIED IDEOGRAPH
                                (#xD795 . #x8B9C)	;CJK UNIFIED IDEOGRAPH
                                (#xD796 . #x8B9D)	;CJK UNIFIED IDEOGRAPH
                                (#xD797 . #x8B9E)	;CJK UNIFIED IDEOGRAPH
                                (#xD798 . #x8B9F)	;CJK UNIFIED IDEOGRAPH
                                (#xD799 . #x8BAC)	;CJK UNIFIED IDEOGRAPH
                                (#xD79A . #x8BB1)	;CJK UNIFIED IDEOGRAPH
                                (#xD79B . #x8BBB)	;CJK UNIFIED IDEOGRAPH
                                (#xD79C . #x8BC7)	;CJK UNIFIED IDEOGRAPH
                                (#xD79D . #x8BD0)	;CJK UNIFIED IDEOGRAPH
                                (#xD79E . #x8BEA)	;CJK UNIFIED IDEOGRAPH
                                (#xD79F . #x8C09)	;CJK UNIFIED IDEOGRAPH
                                (#xD7A0 . #x8C1E)	;CJK UNIFIED IDEOGRAPH
                                (#xD7A1 . #x4F4F)	;CJK UNIFIED IDEOGRAPH
                                (#xD7A2 . #x6CE8)	;CJK UNIFIED IDEOGRAPH
                                (#xD7A3 . #x795D)	;CJK UNIFIED IDEOGRAPH
                                (#xD7A4 . #x9A7B)	;CJK UNIFIED IDEOGRAPH
                                (#xD7A5 . #x6293)	;CJK UNIFIED IDEOGRAPH
                                (#xD7A6 . #x722A)	;CJK UNIFIED IDEOGRAPH
                                (#xD7A7 . #x62FD)	;CJK UNIFIED IDEOGRAPH
                                (#xD7A8 . #x4E13)	;CJK UNIFIED IDEOGRAPH
                                (#xD7A9 . #x7816)	;CJK UNIFIED IDEOGRAPH
                                (#xD7AA . #x8F6C)	;CJK UNIFIED IDEOGRAPH
                                (#xD7AB . #x64B0)	;CJK UNIFIED IDEOGRAPH
                                (#xD7AC . #x8D5A)	;CJK UNIFIED IDEOGRAPH
                                (#xD7AD . #x7BC6)	;CJK UNIFIED IDEOGRAPH
                                (#xD7AE . #x6869)	;CJK UNIFIED IDEOGRAPH
                                (#xD7AF . #x5E84)	;CJK UNIFIED IDEOGRAPH
                                (#xD7B0 . #x88C5)	;CJK UNIFIED IDEOGRAPH
                                (#xD7B1 . #x5986)	;CJK UNIFIED IDEOGRAPH
                                (#xD7B2 . #x649E)	;CJK UNIFIED IDEOGRAPH
                                (#xD7B3 . #x58EE)	;CJK UNIFIED IDEOGRAPH
                                (#xD7B4 . #x72B6)	;CJK UNIFIED IDEOGRAPH
                                (#xD7B5 . #x690E)	;CJK UNIFIED IDEOGRAPH
                                (#xD7B6 . #x9525)	;CJK UNIFIED IDEOGRAPH
                                (#xD7B7 . #x8FFD)	;CJK UNIFIED IDEOGRAPH
                                (#xD7B8 . #x8D58)	;CJK UNIFIED IDEOGRAPH
                                (#xD7B9 . #x5760)	;CJK UNIFIED IDEOGRAPH
                                (#xD7BA . #x7F00)	;CJK UNIFIED IDEOGRAPH
                                (#xD7BB . #x8C06)	;CJK UNIFIED IDEOGRAPH
                                (#xD7BC . #x51C6)	;CJK UNIFIED IDEOGRAPH
                                (#xD7BD . #x6349)	;CJK UNIFIED IDEOGRAPH
                                (#xD7BE . #x62D9)	;CJK UNIFIED IDEOGRAPH
                                (#xD7BF . #x5353)	;CJK UNIFIED IDEOGRAPH
                                (#xD7C0 . #x684C)	;CJK UNIFIED IDEOGRAPH
                                (#xD7C1 . #x7422)	;CJK UNIFIED IDEOGRAPH
                                (#xD7C2 . #x8301)	;CJK UNIFIED IDEOGRAPH
                                (#xD7C3 . #x914C)	;CJK UNIFIED IDEOGRAPH
                                (#xD7C4 . #x5544)	;CJK UNIFIED IDEOGRAPH
                                (#xD7C5 . #x7740)	;CJK UNIFIED IDEOGRAPH
                                (#xD7C6 . #x707C)	;CJK UNIFIED IDEOGRAPH
                                (#xD7C7 . #x6D4A)	;CJK UNIFIED IDEOGRAPH
                                (#xD7C8 . #x5179)	;CJK UNIFIED IDEOGRAPH
                                (#xD7C9 . #x54A8)	;CJK UNIFIED IDEOGRAPH
                                (#xD7CA . #x8D44)	;CJK UNIFIED IDEOGRAPH
                                (#xD7CB . #x59FF)	;CJK UNIFIED IDEOGRAPH
                                (#xD7CC . #x6ECB)	;CJK UNIFIED IDEOGRAPH
                                (#xD7CD . #x6DC4)	;CJK UNIFIED IDEOGRAPH
                                (#xD7CE . #x5B5C)	;CJK UNIFIED IDEOGRAPH
                                (#xD7CF . #x7D2B)	;CJK UNIFIED IDEOGRAPH
                                (#xD7D0 . #x4ED4)	;CJK UNIFIED IDEOGRAPH
                                (#xD7D1 . #x7C7D)	;CJK UNIFIED IDEOGRAPH
                                (#xD7D2 . #x6ED3)	;CJK UNIFIED IDEOGRAPH
                                (#xD7D3 . #x5B50)	;CJK UNIFIED IDEOGRAPH
                                (#xD7D4 . #x81EA)	;CJK UNIFIED IDEOGRAPH
                                (#xD7D5 . #x6E0D)	;CJK UNIFIED IDEOGRAPH
                                (#xD7D6 . #x5B57)	;CJK UNIFIED IDEOGRAPH
                                (#xD7D7 . #x9B03)	;CJK UNIFIED IDEOGRAPH
                                (#xD7D8 . #x68D5)	;CJK UNIFIED IDEOGRAPH
                                (#xD7D9 . #x8E2A)	;CJK UNIFIED IDEOGRAPH
                                (#xD7DA . #x5B97)	;CJK UNIFIED IDEOGRAPH
                                (#xD7DB . #x7EFC)	;CJK UNIFIED IDEOGRAPH
                                (#xD7DC . #x603B)	;CJK UNIFIED IDEOGRAPH
                                (#xD7DD . #x7EB5)	;CJK UNIFIED IDEOGRAPH
                                (#xD7DE . #x90B9)	;CJK UNIFIED IDEOGRAPH
                                (#xD7DF . #x8D70)	;CJK UNIFIED IDEOGRAPH
                                (#xD7E0 . #x594F)	;CJK UNIFIED IDEOGRAPH
                                (#xD7E1 . #x63CD)	;CJK UNIFIED IDEOGRAPH
                                (#xD7E2 . #x79DF)	;CJK UNIFIED IDEOGRAPH
                                (#xD7E3 . #x8DB3)	;CJK UNIFIED IDEOGRAPH
                                (#xD7E4 . #x5352)	;CJK UNIFIED IDEOGRAPH
                                (#xD7E5 . #x65CF)	;CJK UNIFIED IDEOGRAPH
                                (#xD7E6 . #x7956)	;CJK UNIFIED IDEOGRAPH
                                (#xD7E7 . #x8BC5)	;CJK UNIFIED IDEOGRAPH
                                (#xD7E8 . #x963B)	;CJK UNIFIED IDEOGRAPH
                                (#xD7E9 . #x7EC4)	;CJK UNIFIED IDEOGRAPH
                                (#xD7EA . #x94BB)	;CJK UNIFIED IDEOGRAPH
                                (#xD7EB . #x7E82)	;CJK UNIFIED IDEOGRAPH
                                (#xD7EC . #x5634)	;CJK UNIFIED IDEOGRAPH
                                (#xD7ED . #x9189)	;CJK UNIFIED IDEOGRAPH
                                (#xD7EE . #x6700)	;CJK UNIFIED IDEOGRAPH
                                (#xD7EF . #x7F6A)	;CJK UNIFIED IDEOGRAPH
                                (#xD7F0 . #x5C0A)	;CJK UNIFIED IDEOGRAPH
                                (#xD7F1 . #x9075)	;CJK UNIFIED IDEOGRAPH
                                (#xD7F2 . #x6628)	;CJK UNIFIED IDEOGRAPH
                                (#xD7F3 . #x5DE6)	;CJK UNIFIED IDEOGRAPH
                                (#xD7F4 . #x4F50)	;CJK UNIFIED IDEOGRAPH
                                (#xD7F5 . #x67DE)	;CJK UNIFIED IDEOGRAPH
                                (#xD7F6 . #x505A)	;CJK UNIFIED IDEOGRAPH
                                (#xD7F7 . #x4F5C)	;CJK UNIFIED IDEOGRAPH
                                (#xD7F8 . #x5750)	;CJK UNIFIED IDEOGRAPH
                                (#xD7F9 . #x5EA7)	;CJK UNIFIED IDEOGRAPH
                                (#xD840 . #x8C38)	;CJK UNIFIED IDEOGRAPH
                                (#xD841 . #x8C39)	;CJK UNIFIED IDEOGRAPH
                                (#xD842 . #x8C3A)	;CJK UNIFIED IDEOGRAPH
                                (#xD843 . #x8C3B)	;CJK UNIFIED IDEOGRAPH
                                (#xD844 . #x8C3C)	;CJK UNIFIED IDEOGRAPH
                                (#xD845 . #x8C3D)	;CJK UNIFIED IDEOGRAPH
                                (#xD846 . #x8C3E)	;CJK UNIFIED IDEOGRAPH
                                (#xD847 . #x8C3F)	;CJK UNIFIED IDEOGRAPH
                                (#xD848 . #x8C40)	;CJK UNIFIED IDEOGRAPH
                                (#xD849 . #x8C42)	;CJK UNIFIED IDEOGRAPH
                                (#xD84A . #x8C43)	;CJK UNIFIED IDEOGRAPH
                                (#xD84B . #x8C44)	;CJK UNIFIED IDEOGRAPH
                                (#xD84C . #x8C45)	;CJK UNIFIED IDEOGRAPH
                                (#xD84D . #x8C48)	;CJK UNIFIED IDEOGRAPH
                                (#xD84E . #x8C4A)	;CJK UNIFIED IDEOGRAPH
                                (#xD84F . #x8C4B)	;CJK UNIFIED IDEOGRAPH
                                (#xD850 . #x8C4D)	;CJK UNIFIED IDEOGRAPH
                                (#xD851 . #x8C4E)	;CJK UNIFIED IDEOGRAPH
                                (#xD852 . #x8C4F)	;CJK UNIFIED IDEOGRAPH
                                (#xD853 . #x8C50)	;CJK UNIFIED IDEOGRAPH
                                (#xD854 . #x8C51)	;CJK UNIFIED IDEOGRAPH
                                (#xD855 . #x8C52)	;CJK UNIFIED IDEOGRAPH
                                (#xD856 . #x8C53)	;CJK UNIFIED IDEOGRAPH
                                (#xD857 . #x8C54)	;CJK UNIFIED IDEOGRAPH
                                (#xD858 . #x8C56)	;CJK UNIFIED IDEOGRAPH
                                (#xD859 . #x8C57)	;CJK UNIFIED IDEOGRAPH
                                (#xD85A . #x8C58)	;CJK UNIFIED IDEOGRAPH
                                (#xD85B . #x8C59)	;CJK UNIFIED IDEOGRAPH
                                (#xD85C . #x8C5B)	;CJK UNIFIED IDEOGRAPH
                                (#xD85D . #x8C5C)	;CJK UNIFIED IDEOGRAPH
                                (#xD85E . #x8C5D)	;CJK UNIFIED IDEOGRAPH
                                (#xD85F . #x8C5E)	;CJK UNIFIED IDEOGRAPH
                                (#xD860 . #x8C5F)	;CJK UNIFIED IDEOGRAPH
                                (#xD861 . #x8C60)	;CJK UNIFIED IDEOGRAPH
                                (#xD862 . #x8C63)	;CJK UNIFIED IDEOGRAPH
                                (#xD863 . #x8C64)	;CJK UNIFIED IDEOGRAPH
                                (#xD864 . #x8C65)	;CJK UNIFIED IDEOGRAPH
                                (#xD865 . #x8C66)	;CJK UNIFIED IDEOGRAPH
                                (#xD866 . #x8C67)	;CJK UNIFIED IDEOGRAPH
                                (#xD867 . #x8C68)	;CJK UNIFIED IDEOGRAPH
                                (#xD868 . #x8C69)	;CJK UNIFIED IDEOGRAPH
                                (#xD869 . #x8C6C)	;CJK UNIFIED IDEOGRAPH
                                (#xD86A . #x8C6D)	;CJK UNIFIED IDEOGRAPH
                                (#xD86B . #x8C6E)	;CJK UNIFIED IDEOGRAPH
                                (#xD86C . #x8C6F)	;CJK UNIFIED IDEOGRAPH
                                (#xD86D . #x8C70)	;CJK UNIFIED IDEOGRAPH
                                (#xD86E . #x8C71)	;CJK UNIFIED IDEOGRAPH
                                (#xD86F . #x8C72)	;CJK UNIFIED IDEOGRAPH
                                (#xD870 . #x8C74)	;CJK UNIFIED IDEOGRAPH
                                (#xD871 . #x8C75)	;CJK UNIFIED IDEOGRAPH
                                (#xD872 . #x8C76)	;CJK UNIFIED IDEOGRAPH
                                (#xD873 . #x8C77)	;CJK UNIFIED IDEOGRAPH
                                (#xD874 . #x8C7B)	;CJK UNIFIED IDEOGRAPH
                                (#xD875 . #x8C7C)	;CJK UNIFIED IDEOGRAPH
                                (#xD876 . #x8C7D)	;CJK UNIFIED IDEOGRAPH
                                (#xD877 . #x8C7E)	;CJK UNIFIED IDEOGRAPH
                                (#xD878 . #x8C7F)	;CJK UNIFIED IDEOGRAPH
                                (#xD879 . #x8C80)	;CJK UNIFIED IDEOGRAPH
                                (#xD87A . #x8C81)	;CJK UNIFIED IDEOGRAPH
                                (#xD87B . #x8C83)	;CJK UNIFIED IDEOGRAPH
                                (#xD87C . #x8C84)	;CJK UNIFIED IDEOGRAPH
                                (#xD87D . #x8C86)	;CJK UNIFIED IDEOGRAPH
                                (#xD87E . #x8C87)	;CJK UNIFIED IDEOGRAPH
                                (#xD880 . #x8C88)	;CJK UNIFIED IDEOGRAPH
                                (#xD881 . #x8C8B)	;CJK UNIFIED IDEOGRAPH
                                (#xD882 . #x8C8D)	;CJK UNIFIED IDEOGRAPH
                                (#xD883 . #x8C8E)	;CJK UNIFIED IDEOGRAPH
                                (#xD884 . #x8C8F)	;CJK UNIFIED IDEOGRAPH
                                (#xD885 . #x8C90)	;CJK UNIFIED IDEOGRAPH
                                (#xD886 . #x8C91)	;CJK UNIFIED IDEOGRAPH
                                (#xD887 . #x8C92)	;CJK UNIFIED IDEOGRAPH
                                (#xD888 . #x8C93)	;CJK UNIFIED IDEOGRAPH
                                (#xD889 . #x8C95)	;CJK UNIFIED IDEOGRAPH
                                (#xD88A . #x8C96)	;CJK UNIFIED IDEOGRAPH
                                (#xD88B . #x8C97)	;CJK UNIFIED IDEOGRAPH
                                (#xD88C . #x8C99)	;CJK UNIFIED IDEOGRAPH
                                (#xD88D . #x8C9A)	;CJK UNIFIED IDEOGRAPH
                                (#xD88E . #x8C9B)	;CJK UNIFIED IDEOGRAPH
                                (#xD88F . #x8C9C)	;CJK UNIFIED IDEOGRAPH
                                (#xD890 . #x8C9D)	;CJK UNIFIED IDEOGRAPH
                                (#xD891 . #x8C9E)	;CJK UNIFIED IDEOGRAPH
                                (#xD892 . #x8C9F)	;CJK UNIFIED IDEOGRAPH
                                (#xD893 . #x8CA0)	;CJK UNIFIED IDEOGRAPH
                                (#xD894 . #x8CA1)	;CJK UNIFIED IDEOGRAPH
                                (#xD895 . #x8CA2)	;CJK UNIFIED IDEOGRAPH
                                (#xD896 . #x8CA3)	;CJK UNIFIED IDEOGRAPH
                                (#xD897 . #x8CA4)	;CJK UNIFIED IDEOGRAPH
                                (#xD898 . #x8CA5)	;CJK UNIFIED IDEOGRAPH
                                (#xD899 . #x8CA6)	;CJK UNIFIED IDEOGRAPH
                                (#xD89A . #x8CA7)	;CJK UNIFIED IDEOGRAPH
                                (#xD89B . #x8CA8)	;CJK UNIFIED IDEOGRAPH
                                (#xD89C . #x8CA9)	;CJK UNIFIED IDEOGRAPH
                                (#xD89D . #x8CAA)	;CJK UNIFIED IDEOGRAPH
                                (#xD89E . #x8CAB)	;CJK UNIFIED IDEOGRAPH
                                (#xD89F . #x8CAC)	;CJK UNIFIED IDEOGRAPH
                                (#xD8A0 . #x8CAD)	;CJK UNIFIED IDEOGRAPH
                                (#xD8A1 . #x4E8D)	;CJK UNIFIED IDEOGRAPH
                                (#xD8A2 . #x4E0C)	;CJK UNIFIED IDEOGRAPH
                                (#xD8A3 . #x5140)	;CJK UNIFIED IDEOGRAPH
                                (#xD8A4 . #x4E10)	;CJK UNIFIED IDEOGRAPH
                                (#xD8A5 . #x5EFF)	;CJK UNIFIED IDEOGRAPH
                                (#xD8A6 . #x5345)	;CJK UNIFIED IDEOGRAPH
                                (#xD8A7 . #x4E15)	;CJK UNIFIED IDEOGRAPH
                                (#xD8A8 . #x4E98)	;CJK UNIFIED IDEOGRAPH
                                (#xD8A9 . #x4E1E)	;CJK UNIFIED IDEOGRAPH
                                (#xD8AA . #x9B32)	;CJK UNIFIED IDEOGRAPH
                                (#xD8AB . #x5B6C)	;CJK UNIFIED IDEOGRAPH
                                (#xD8AC . #x5669)	;CJK UNIFIED IDEOGRAPH
                                (#xD8AD . #x4E28)	;CJK UNIFIED IDEOGRAPH
                                (#xD8AE . #x79BA)	;CJK UNIFIED IDEOGRAPH
                                (#xD8AF . #x4E3F)	;CJK UNIFIED IDEOGRAPH
                                (#xD8B0 . #x5315)	;CJK UNIFIED IDEOGRAPH
                                (#xD8B1 . #x4E47)	;CJK UNIFIED IDEOGRAPH
                                (#xD8B2 . #x592D)	;CJK UNIFIED IDEOGRAPH
                                (#xD8B3 . #x723B)	;CJK UNIFIED IDEOGRAPH
                                (#xD8B4 . #x536E)	;CJK UNIFIED IDEOGRAPH
                                (#xD8B5 . #x6C10)	;CJK UNIFIED IDEOGRAPH
                                (#xD8B6 . #x56DF)	;CJK UNIFIED IDEOGRAPH
                                (#xD8B7 . #x80E4)	;CJK UNIFIED IDEOGRAPH
                                (#xD8B8 . #x9997)	;CJK UNIFIED IDEOGRAPH
                                (#xD8B9 . #x6BD3)	;CJK UNIFIED IDEOGRAPH
                                (#xD8BA . #x777E)	;CJK UNIFIED IDEOGRAPH
                                (#xD8BB . #x9F17)	;CJK UNIFIED IDEOGRAPH
                                (#xD8BC . #x4E36)	;CJK UNIFIED IDEOGRAPH
                                (#xD8BD . #x4E9F)	;CJK UNIFIED IDEOGRAPH
                                (#xD8BE . #x9F10)	;CJK UNIFIED IDEOGRAPH
                                (#xD8BF . #x4E5C)	;CJK UNIFIED IDEOGRAPH
                                (#xD8C0 . #x4E69)	;CJK UNIFIED IDEOGRAPH
                                (#xD8C1 . #x4E93)	;CJK UNIFIED IDEOGRAPH
                                (#xD8C2 . #x8288)	;CJK UNIFIED IDEOGRAPH
                                (#xD8C3 . #x5B5B)	;CJK UNIFIED IDEOGRAPH
                                (#xD8C4 . #x556C)	;CJK UNIFIED IDEOGRAPH
                                (#xD8C5 . #x560F)	;CJK UNIFIED IDEOGRAPH
                                (#xD8C6 . #x4EC4)	;CJK UNIFIED IDEOGRAPH
                                (#xD8C7 . #x538D)	;CJK UNIFIED IDEOGRAPH
                                (#xD8C8 . #x539D)	;CJK UNIFIED IDEOGRAPH
                                (#xD8C9 . #x53A3)	;CJK UNIFIED IDEOGRAPH
                                (#xD8CA . #x53A5)	;CJK UNIFIED IDEOGRAPH
                                (#xD8CB . #x53AE)	;CJK UNIFIED IDEOGRAPH
                                (#xD8CC . #x9765)	;CJK UNIFIED IDEOGRAPH
                                (#xD8CD . #x8D5D)	;CJK UNIFIED IDEOGRAPH
                                (#xD8CE . #x531A)	;CJK UNIFIED IDEOGRAPH
                                (#xD8CF . #x53F5)	;CJK UNIFIED IDEOGRAPH
                                (#xD8D0 . #x5326)	;CJK UNIFIED IDEOGRAPH
                                (#xD8D1 . #x532E)	;CJK UNIFIED IDEOGRAPH
                                (#xD8D2 . #x533E)	;CJK UNIFIED IDEOGRAPH
                                (#xD8D3 . #x8D5C)	;CJK UNIFIED IDEOGRAPH
                                (#xD8D4 . #x5366)	;CJK UNIFIED IDEOGRAPH
                                (#xD8D5 . #x5363)	;CJK UNIFIED IDEOGRAPH
                                (#xD8D6 . #x5202)	;CJK UNIFIED IDEOGRAPH
                                (#xD8D7 . #x5208)	;CJK UNIFIED IDEOGRAPH
                                (#xD8D8 . #x520E)	;CJK UNIFIED IDEOGRAPH
                                (#xD8D9 . #x522D)	;CJK UNIFIED IDEOGRAPH
                                (#xD8DA . #x5233)	;CJK UNIFIED IDEOGRAPH
                                (#xD8DB . #x523F)	;CJK UNIFIED IDEOGRAPH
                                (#xD8DC . #x5240)	;CJK UNIFIED IDEOGRAPH
                                (#xD8DD . #x524C)	;CJK UNIFIED IDEOGRAPH
                                (#xD8DE . #x525E)	;CJK UNIFIED IDEOGRAPH
                                (#xD8DF . #x5261)	;CJK UNIFIED IDEOGRAPH
                                (#xD8E0 . #x525C)	;CJK UNIFIED IDEOGRAPH
                                (#xD8E1 . #x84AF)	;CJK UNIFIED IDEOGRAPH
                                (#xD8E2 . #x527D)	;CJK UNIFIED IDEOGRAPH
                                (#xD8E3 . #x5282)	;CJK UNIFIED IDEOGRAPH
                                (#xD8E4 . #x5281)	;CJK UNIFIED IDEOGRAPH
                                (#xD8E5 . #x5290)	;CJK UNIFIED IDEOGRAPH
                                (#xD8E6 . #x5293)	;CJK UNIFIED IDEOGRAPH
                                (#xD8E7 . #x5182)	;CJK UNIFIED IDEOGRAPH
                                (#xD8E8 . #x7F54)	;CJK UNIFIED IDEOGRAPH
                                (#xD8E9 . #x4EBB)	;CJK UNIFIED IDEOGRAPH
                                (#xD8EA . #x4EC3)	;CJK UNIFIED IDEOGRAPH
                                (#xD8EB . #x4EC9)	;CJK UNIFIED IDEOGRAPH
                                (#xD8EC . #x4EC2)	;CJK UNIFIED IDEOGRAPH
                                (#xD8ED . #x4EE8)	;CJK UNIFIED IDEOGRAPH
                                (#xD8EE . #x4EE1)	;CJK UNIFIED IDEOGRAPH
                                (#xD8EF . #x4EEB)	;CJK UNIFIED IDEOGRAPH
                                (#xD8F0 . #x4EDE)	;CJK UNIFIED IDEOGRAPH
                                (#xD8F1 . #x4F1B)	;CJK UNIFIED IDEOGRAPH
                                (#xD8F2 . #x4EF3)	;CJK UNIFIED IDEOGRAPH
                                (#xD8F3 . #x4F22)	;CJK UNIFIED IDEOGRAPH
                                (#xD8F4 . #x4F64)	;CJK UNIFIED IDEOGRAPH
                                (#xD8F5 . #x4EF5)	;CJK UNIFIED IDEOGRAPH
                                (#xD8F6 . #x4F25)	;CJK UNIFIED IDEOGRAPH
                                (#xD8F7 . #x4F27)	;CJK UNIFIED IDEOGRAPH
                                (#xD8F8 . #x4F09)	;CJK UNIFIED IDEOGRAPH
                                (#xD8F9 . #x4F2B)	;CJK UNIFIED IDEOGRAPH
                                (#xD8FA . #x4F5E)	;CJK UNIFIED IDEOGRAPH
                                (#xD8FB . #x4F67)	;CJK UNIFIED IDEOGRAPH
                                (#xD8FC . #x6538)	;CJK UNIFIED IDEOGRAPH
                                (#xD8FD . #x4F5A)	;CJK UNIFIED IDEOGRAPH
                                (#xD8FE . #x4F5D)	;CJK UNIFIED IDEOGRAPH
                                (#xD940 . #x8CAE)	;CJK UNIFIED IDEOGRAPH
                                (#xD941 . #x8CAF)	;CJK UNIFIED IDEOGRAPH
                                (#xD942 . #x8CB0)	;CJK UNIFIED IDEOGRAPH
                                (#xD943 . #x8CB1)	;CJK UNIFIED IDEOGRAPH
                                (#xD944 . #x8CB2)	;CJK UNIFIED IDEOGRAPH
                                (#xD945 . #x8CB3)	;CJK UNIFIED IDEOGRAPH
                                (#xD946 . #x8CB4)	;CJK UNIFIED IDEOGRAPH
                                (#xD947 . #x8CB5)	;CJK UNIFIED IDEOGRAPH
                                (#xD948 . #x8CB6)	;CJK UNIFIED IDEOGRAPH
                                (#xD949 . #x8CB7)	;CJK UNIFIED IDEOGRAPH
                                (#xD94A . #x8CB8)	;CJK UNIFIED IDEOGRAPH
                                (#xD94B . #x8CB9)	;CJK UNIFIED IDEOGRAPH
                                (#xD94C . #x8CBA)	;CJK UNIFIED IDEOGRAPH
                                (#xD94D . #x8CBB)	;CJK UNIFIED IDEOGRAPH
                                (#xD94E . #x8CBC)	;CJK UNIFIED IDEOGRAPH
                                (#xD94F . #x8CBD)	;CJK UNIFIED IDEOGRAPH
                                (#xD950 . #x8CBE)	;CJK UNIFIED IDEOGRAPH
                                (#xD951 . #x8CBF)	;CJK UNIFIED IDEOGRAPH
                                (#xD952 . #x8CC0)	;CJK UNIFIED IDEOGRAPH
                                (#xD953 . #x8CC1)	;CJK UNIFIED IDEOGRAPH
                                (#xD954 . #x8CC2)	;CJK UNIFIED IDEOGRAPH
                                (#xD955 . #x8CC3)	;CJK UNIFIED IDEOGRAPH
                                (#xD956 . #x8CC4)	;CJK UNIFIED IDEOGRAPH
                                (#xD957 . #x8CC5)	;CJK UNIFIED IDEOGRAPH
                                (#xD958 . #x8CC6)	;CJK UNIFIED IDEOGRAPH
                                (#xD959 . #x8CC7)	;CJK UNIFIED IDEOGRAPH
                                (#xD95A . #x8CC8)	;CJK UNIFIED IDEOGRAPH
                                (#xD95B . #x8CC9)	;CJK UNIFIED IDEOGRAPH
                                (#xD95C . #x8CCA)	;CJK UNIFIED IDEOGRAPH
                                (#xD95D . #x8CCB)	;CJK UNIFIED IDEOGRAPH
                                (#xD95E . #x8CCC)	;CJK UNIFIED IDEOGRAPH
                                (#xD95F . #x8CCD)	;CJK UNIFIED IDEOGRAPH
                                (#xD960 . #x8CCE)	;CJK UNIFIED IDEOGRAPH
                                (#xD961 . #x8CCF)	;CJK UNIFIED IDEOGRAPH
                                (#xD962 . #x8CD0)	;CJK UNIFIED IDEOGRAPH
                                (#xD963 . #x8CD1)	;CJK UNIFIED IDEOGRAPH
                                (#xD964 . #x8CD2)	;CJK UNIFIED IDEOGRAPH
                                (#xD965 . #x8CD3)	;CJK UNIFIED IDEOGRAPH
                                (#xD966 . #x8CD4)	;CJK UNIFIED IDEOGRAPH
                                (#xD967 . #x8CD5)	;CJK UNIFIED IDEOGRAPH
                                (#xD968 . #x8CD6)	;CJK UNIFIED IDEOGRAPH
                                (#xD969 . #x8CD7)	;CJK UNIFIED IDEOGRAPH
                                (#xD96A . #x8CD8)	;CJK UNIFIED IDEOGRAPH
                                (#xD96B . #x8CD9)	;CJK UNIFIED IDEOGRAPH
                                (#xD96C . #x8CDA)	;CJK UNIFIED IDEOGRAPH
                                (#xD96D . #x8CDB)	;CJK UNIFIED IDEOGRAPH
                                (#xD96E . #x8CDC)	;CJK UNIFIED IDEOGRAPH
                                (#xD96F . #x8CDD)	;CJK UNIFIED IDEOGRAPH
                                (#xD970 . #x8CDE)	;CJK UNIFIED IDEOGRAPH
                                (#xD971 . #x8CDF)	;CJK UNIFIED IDEOGRAPH
                                (#xD972 . #x8CE0)	;CJK UNIFIED IDEOGRAPH
                                (#xD973 . #x8CE1)	;CJK UNIFIED IDEOGRAPH
                                (#xD974 . #x8CE2)	;CJK UNIFIED IDEOGRAPH
                                (#xD975 . #x8CE3)	;CJK UNIFIED IDEOGRAPH
                                (#xD976 . #x8CE4)	;CJK UNIFIED IDEOGRAPH
                                (#xD977 . #x8CE5)	;CJK UNIFIED IDEOGRAPH
                                (#xD978 . #x8CE6)	;CJK UNIFIED IDEOGRAPH
                                (#xD979 . #x8CE7)	;CJK UNIFIED IDEOGRAPH
                                (#xD97A . #x8CE8)	;CJK UNIFIED IDEOGRAPH
                                (#xD97B . #x8CE9)	;CJK UNIFIED IDEOGRAPH
                                (#xD97C . #x8CEA)	;CJK UNIFIED IDEOGRAPH
                                (#xD97D . #x8CEB)	;CJK UNIFIED IDEOGRAPH
                                (#xD97E . #x8CEC)	;CJK UNIFIED IDEOGRAPH
                                (#xD980 . #x8CED)	;CJK UNIFIED IDEOGRAPH
                                (#xD981 . #x8CEE)	;CJK UNIFIED IDEOGRAPH
                                (#xD982 . #x8CEF)	;CJK UNIFIED IDEOGRAPH
                                (#xD983 . #x8CF0)	;CJK UNIFIED IDEOGRAPH
                                (#xD984 . #x8CF1)	;CJK UNIFIED IDEOGRAPH
                                (#xD985 . #x8CF2)	;CJK UNIFIED IDEOGRAPH
                                (#xD986 . #x8CF3)	;CJK UNIFIED IDEOGRAPH
                                (#xD987 . #x8CF4)	;CJK UNIFIED IDEOGRAPH
                                (#xD988 . #x8CF5)	;CJK UNIFIED IDEOGRAPH
                                (#xD989 . #x8CF6)	;CJK UNIFIED IDEOGRAPH
                                (#xD98A . #x8CF7)	;CJK UNIFIED IDEOGRAPH
                                (#xD98B . #x8CF8)	;CJK UNIFIED IDEOGRAPH
                                (#xD98C . #x8CF9)	;CJK UNIFIED IDEOGRAPH
                                (#xD98D . #x8CFA)	;CJK UNIFIED IDEOGRAPH
                                (#xD98E . #x8CFB)	;CJK UNIFIED IDEOGRAPH
                                (#xD98F . #x8CFC)	;CJK UNIFIED IDEOGRAPH
                                (#xD990 . #x8CFD)	;CJK UNIFIED IDEOGRAPH
                                (#xD991 . #x8CFE)	;CJK UNIFIED IDEOGRAPH
                                (#xD992 . #x8CFF)	;CJK UNIFIED IDEOGRAPH
                                (#xD993 . #x8D00)	;CJK UNIFIED IDEOGRAPH
                                (#xD994 . #x8D01)	;CJK UNIFIED IDEOGRAPH
                                (#xD995 . #x8D02)	;CJK UNIFIED IDEOGRAPH
                                (#xD996 . #x8D03)	;CJK UNIFIED IDEOGRAPH
                                (#xD997 . #x8D04)	;CJK UNIFIED IDEOGRAPH
                                (#xD998 . #x8D05)	;CJK UNIFIED IDEOGRAPH
                                (#xD999 . #x8D06)	;CJK UNIFIED IDEOGRAPH
                                (#xD99A . #x8D07)	;CJK UNIFIED IDEOGRAPH
                                (#xD99B . #x8D08)	;CJK UNIFIED IDEOGRAPH
                                (#xD99C . #x8D09)	;CJK UNIFIED IDEOGRAPH
                                (#xD99D . #x8D0A)	;CJK UNIFIED IDEOGRAPH
                                (#xD99E . #x8D0B)	;CJK UNIFIED IDEOGRAPH
                                (#xD99F . #x8D0C)	;CJK UNIFIED IDEOGRAPH
                                (#xD9A0 . #x8D0D)	;CJK UNIFIED IDEOGRAPH
                                (#xD9A1 . #x4F5F)	;CJK UNIFIED IDEOGRAPH
                                (#xD9A2 . #x4F57)	;CJK UNIFIED IDEOGRAPH
                                (#xD9A3 . #x4F32)	;CJK UNIFIED IDEOGRAPH
                                (#xD9A4 . #x4F3D)	;CJK UNIFIED IDEOGRAPH
                                (#xD9A5 . #x4F76)	;CJK UNIFIED IDEOGRAPH
                                (#xD9A6 . #x4F74)	;CJK UNIFIED IDEOGRAPH
                                (#xD9A7 . #x4F91)	;CJK UNIFIED IDEOGRAPH
                                (#xD9A8 . #x4F89)	;CJK UNIFIED IDEOGRAPH
                                (#xD9A9 . #x4F83)	;CJK UNIFIED IDEOGRAPH
                                (#xD9AA . #x4F8F)	;CJK UNIFIED IDEOGRAPH
                                (#xD9AB . #x4F7E)	;CJK UNIFIED IDEOGRAPH
                                (#xD9AC . #x4F7B)	;CJK UNIFIED IDEOGRAPH
                                (#xD9AD . #x4FAA)	;CJK UNIFIED IDEOGRAPH
                                (#xD9AE . #x4F7C)	;CJK UNIFIED IDEOGRAPH
                                (#xD9AF . #x4FAC)	;CJK UNIFIED IDEOGRAPH
                                (#xD9B0 . #x4F94)	;CJK UNIFIED IDEOGRAPH
                                (#xD9B1 . #x4FE6)	;CJK UNIFIED IDEOGRAPH
                                (#xD9B2 . #x4FE8)	;CJK UNIFIED IDEOGRAPH
                                (#xD9B3 . #x4FEA)	;CJK UNIFIED IDEOGRAPH
                                (#xD9B4 . #x4FC5)	;CJK UNIFIED IDEOGRAPH
                                (#xD9B5 . #x4FDA)	;CJK UNIFIED IDEOGRAPH
                                (#xD9B6 . #x4FE3)	;CJK UNIFIED IDEOGRAPH
                                (#xD9B7 . #x4FDC)	;CJK UNIFIED IDEOGRAPH
                                (#xD9B8 . #x4FD1)	;CJK UNIFIED IDEOGRAPH
                                (#xD9B9 . #x4FDF)	;CJK UNIFIED IDEOGRAPH
                                (#xD9BA . #x4FF8)	;CJK UNIFIED IDEOGRAPH
                                (#xD9BB . #x5029)	;CJK UNIFIED IDEOGRAPH
                                (#xD9BC . #x504C)	;CJK UNIFIED IDEOGRAPH
                                (#xD9BD . #x4FF3)	;CJK UNIFIED IDEOGRAPH
                                (#xD9BE . #x502C)	;CJK UNIFIED IDEOGRAPH
                                (#xD9BF . #x500F)	;CJK UNIFIED IDEOGRAPH
                                (#xD9C0 . #x502E)	;CJK UNIFIED IDEOGRAPH
                                (#xD9C1 . #x502D)	;CJK UNIFIED IDEOGRAPH
                                (#xD9C2 . #x4FFE)	;CJK UNIFIED IDEOGRAPH
                                (#xD9C3 . #x501C)	;CJK UNIFIED IDEOGRAPH
                                (#xD9C4 . #x500C)	;CJK UNIFIED IDEOGRAPH
                                (#xD9C5 . #x5025)	;CJK UNIFIED IDEOGRAPH
                                (#xD9C6 . #x5028)	;CJK UNIFIED IDEOGRAPH
                                (#xD9C7 . #x507E)	;CJK UNIFIED IDEOGRAPH
                                (#xD9C8 . #x5043)	;CJK UNIFIED IDEOGRAPH
                                (#xD9C9 . #x5055)	;CJK UNIFIED IDEOGRAPH
                                (#xD9CA . #x5048)	;CJK UNIFIED IDEOGRAPH
                                (#xD9CB . #x504E)	;CJK UNIFIED IDEOGRAPH
                                (#xD9CC . #x506C)	;CJK UNIFIED IDEOGRAPH
                                (#xD9CD . #x507B)	;CJK UNIFIED IDEOGRAPH
                                (#xD9CE . #x50A5)	;CJK UNIFIED IDEOGRAPH
                                (#xD9CF . #x50A7)	;CJK UNIFIED IDEOGRAPH
                                (#xD9D0 . #x50A9)	;CJK UNIFIED IDEOGRAPH
                                (#xD9D1 . #x50BA)	;CJK UNIFIED IDEOGRAPH
                                (#xD9D2 . #x50D6)	;CJK UNIFIED IDEOGRAPH
                                (#xD9D3 . #x5106)	;CJK UNIFIED IDEOGRAPH
                                (#xD9D4 . #x50ED)	;CJK UNIFIED IDEOGRAPH
                                (#xD9D5 . #x50EC)	;CJK UNIFIED IDEOGRAPH
                                (#xD9D6 . #x50E6)	;CJK UNIFIED IDEOGRAPH
                                (#xD9D7 . #x50EE)	;CJK UNIFIED IDEOGRAPH
                                (#xD9D8 . #x5107)	;CJK UNIFIED IDEOGRAPH
                                (#xD9D9 . #x510B)	;CJK UNIFIED IDEOGRAPH
                                (#xD9DA . #x4EDD)	;CJK UNIFIED IDEOGRAPH
                                (#xD9DB . #x6C3D)	;CJK UNIFIED IDEOGRAPH
                                (#xD9DC . #x4F58)	;CJK UNIFIED IDEOGRAPH
                                (#xD9DD . #x4F65)	;CJK UNIFIED IDEOGRAPH
                                (#xD9DE . #x4FCE)	;CJK UNIFIED IDEOGRAPH
                                (#xD9DF . #x9FA0)	;CJK UNIFIED IDEOGRAPH
                                (#xD9E0 . #x6C46)	;CJK UNIFIED IDEOGRAPH
                                (#xD9E1 . #x7C74)	;CJK UNIFIED IDEOGRAPH
                                (#xD9E2 . #x516E)	;CJK UNIFIED IDEOGRAPH
                                (#xD9E3 . #x5DFD)	;CJK UNIFIED IDEOGRAPH
                                (#xD9E4 . #x9EC9)	;CJK UNIFIED IDEOGRAPH
                                (#xD9E5 . #x9998)	;CJK UNIFIED IDEOGRAPH
                                (#xD9E6 . #x5181)	;CJK UNIFIED IDEOGRAPH
                                (#xD9E7 . #x5914)	;CJK UNIFIED IDEOGRAPH
                                (#xD9E8 . #x52F9)	;CJK UNIFIED IDEOGRAPH
                                (#xD9E9 . #x530D)	;CJK UNIFIED IDEOGRAPH
                                (#xD9EA . #x8A07)	;CJK UNIFIED IDEOGRAPH
                                (#xD9EB . #x5310)	;CJK UNIFIED IDEOGRAPH
                                (#xD9EC . #x51EB)	;CJK UNIFIED IDEOGRAPH
                                (#xD9ED . #x5919)	;CJK UNIFIED IDEOGRAPH
                                (#xD9EE . #x5155)	;CJK UNIFIED IDEOGRAPH
                                (#xD9EF . #x4EA0)	;CJK UNIFIED IDEOGRAPH
                                (#xD9F0 . #x5156)	;CJK UNIFIED IDEOGRAPH
                                (#xD9F1 . #x4EB3)	;CJK UNIFIED IDEOGRAPH
                                (#xD9F2 . #x886E)	;CJK UNIFIED IDEOGRAPH
                                (#xD9F3 . #x88A4)	;CJK UNIFIED IDEOGRAPH
                                (#xD9F4 . #x4EB5)	;CJK UNIFIED IDEOGRAPH
                                (#xD9F5 . #x8114)	;CJK UNIFIED IDEOGRAPH
                                (#xD9F6 . #x88D2)	;CJK UNIFIED IDEOGRAPH
                                (#xD9F7 . #x7980)	;CJK UNIFIED IDEOGRAPH
                                (#xD9F8 . #x5B34)	;CJK UNIFIED IDEOGRAPH
                                (#xD9F9 . #x8803)	;CJK UNIFIED IDEOGRAPH
                                (#xD9FA . #x7FB8)	;CJK UNIFIED IDEOGRAPH
                                (#xD9FB . #x51AB)	;CJK UNIFIED IDEOGRAPH
                                (#xD9FC . #x51B1)	;CJK UNIFIED IDEOGRAPH
                                (#xD9FD . #x51BD)	;CJK UNIFIED IDEOGRAPH
                                (#xD9FE . #x51BC)	;CJK UNIFIED IDEOGRAPH
                                (#xDA40 . #x8D0E)	;CJK UNIFIED IDEOGRAPH
                                (#xDA41 . #x8D0F)	;CJK UNIFIED IDEOGRAPH
                                (#xDA42 . #x8D10)	;CJK UNIFIED IDEOGRAPH
                                (#xDA43 . #x8D11)	;CJK UNIFIED IDEOGRAPH
                                (#xDA44 . #x8D12)	;CJK UNIFIED IDEOGRAPH
                                (#xDA45 . #x8D13)	;CJK UNIFIED IDEOGRAPH
                                (#xDA46 . #x8D14)	;CJK UNIFIED IDEOGRAPH
                                (#xDA47 . #x8D15)	;CJK UNIFIED IDEOGRAPH
                                (#xDA48 . #x8D16)	;CJK UNIFIED IDEOGRAPH
                                (#xDA49 . #x8D17)	;CJK UNIFIED IDEOGRAPH
                                (#xDA4A . #x8D18)	;CJK UNIFIED IDEOGRAPH
                                (#xDA4B . #x8D19)	;CJK UNIFIED IDEOGRAPH
                                (#xDA4C . #x8D1A)	;CJK UNIFIED IDEOGRAPH
                                (#xDA4D . #x8D1B)	;CJK UNIFIED IDEOGRAPH
                                (#xDA4E . #x8D1C)	;CJK UNIFIED IDEOGRAPH
                                (#xDA4F . #x8D20)	;CJK UNIFIED IDEOGRAPH
                                (#xDA50 . #x8D51)	;CJK UNIFIED IDEOGRAPH
                                (#xDA51 . #x8D52)	;CJK UNIFIED IDEOGRAPH
                                (#xDA52 . #x8D57)	;CJK UNIFIED IDEOGRAPH
                                (#xDA53 . #x8D5F)	;CJK UNIFIED IDEOGRAPH
                                (#xDA54 . #x8D65)	;CJK UNIFIED IDEOGRAPH
                                (#xDA55 . #x8D68)	;CJK UNIFIED IDEOGRAPH
                                (#xDA56 . #x8D69)	;CJK UNIFIED IDEOGRAPH
                                (#xDA57 . #x8D6A)	;CJK UNIFIED IDEOGRAPH
                                (#xDA58 . #x8D6C)	;CJK UNIFIED IDEOGRAPH
                                (#xDA59 . #x8D6E)	;CJK UNIFIED IDEOGRAPH
                                (#xDA5A . #x8D6F)	;CJK UNIFIED IDEOGRAPH
                                (#xDA5B . #x8D71)	;CJK UNIFIED IDEOGRAPH
                                (#xDA5C . #x8D72)	;CJK UNIFIED IDEOGRAPH
                                (#xDA5D . #x8D78)	;CJK UNIFIED IDEOGRAPH
                                (#xDA5E . #x8D79)	;CJK UNIFIED IDEOGRAPH
                                (#xDA5F . #x8D7A)	;CJK UNIFIED IDEOGRAPH
                                (#xDA60 . #x8D7B)	;CJK UNIFIED IDEOGRAPH
                                (#xDA61 . #x8D7C)	;CJK UNIFIED IDEOGRAPH
                                (#xDA62 . #x8D7D)	;CJK UNIFIED IDEOGRAPH
                                (#xDA63 . #x8D7E)	;CJK UNIFIED IDEOGRAPH
                                (#xDA64 . #x8D7F)	;CJK UNIFIED IDEOGRAPH
                                (#xDA65 . #x8D80)	;CJK UNIFIED IDEOGRAPH
                                (#xDA66 . #x8D82)	;CJK UNIFIED IDEOGRAPH
                                (#xDA67 . #x8D83)	;CJK UNIFIED IDEOGRAPH
                                (#xDA68 . #x8D86)	;CJK UNIFIED IDEOGRAPH
                                (#xDA69 . #x8D87)	;CJK UNIFIED IDEOGRAPH
                                (#xDA6A . #x8D88)	;CJK UNIFIED IDEOGRAPH
                                (#xDA6B . #x8D89)	;CJK UNIFIED IDEOGRAPH
                                (#xDA6C . #x8D8C)	;CJK UNIFIED IDEOGRAPH
                                (#xDA6D . #x8D8D)	;CJK UNIFIED IDEOGRAPH
                                (#xDA6E . #x8D8E)	;CJK UNIFIED IDEOGRAPH
                                (#xDA6F . #x8D8F)	;CJK UNIFIED IDEOGRAPH
                                (#xDA70 . #x8D90)	;CJK UNIFIED IDEOGRAPH
                                (#xDA71 . #x8D92)	;CJK UNIFIED IDEOGRAPH
                                (#xDA72 . #x8D93)	;CJK UNIFIED IDEOGRAPH
                                (#xDA73 . #x8D95)	;CJK UNIFIED IDEOGRAPH
                                (#xDA74 . #x8D96)	;CJK UNIFIED IDEOGRAPH
                                (#xDA75 . #x8D97)	;CJK UNIFIED IDEOGRAPH
                                (#xDA76 . #x8D98)	;CJK UNIFIED IDEOGRAPH
                                (#xDA77 . #x8D99)	;CJK UNIFIED IDEOGRAPH
                                (#xDA78 . #x8D9A)	;CJK UNIFIED IDEOGRAPH
                                (#xDA79 . #x8D9B)	;CJK UNIFIED IDEOGRAPH
                                (#xDA7A . #x8D9C)	;CJK UNIFIED IDEOGRAPH
                                (#xDA7B . #x8D9D)	;CJK UNIFIED IDEOGRAPH
                                (#xDA7C . #x8D9E)	;CJK UNIFIED IDEOGRAPH
                                (#xDA7D . #x8DA0)	;CJK UNIFIED IDEOGRAPH
                                (#xDA7E . #x8DA1)	;CJK UNIFIED IDEOGRAPH
                                (#xDA80 . #x8DA2)	;CJK UNIFIED IDEOGRAPH
                                (#xDA81 . #x8DA4)	;CJK UNIFIED IDEOGRAPH
                                (#xDA82 . #x8DA5)	;CJK UNIFIED IDEOGRAPH
                                (#xDA83 . #x8DA6)	;CJK UNIFIED IDEOGRAPH
                                (#xDA84 . #x8DA7)	;CJK UNIFIED IDEOGRAPH
                                (#xDA85 . #x8DA8)	;CJK UNIFIED IDEOGRAPH
                                (#xDA86 . #x8DA9)	;CJK UNIFIED IDEOGRAPH
                                (#xDA87 . #x8DAA)	;CJK UNIFIED IDEOGRAPH
                                (#xDA88 . #x8DAB)	;CJK UNIFIED IDEOGRAPH
                                (#xDA89 . #x8DAC)	;CJK UNIFIED IDEOGRAPH
                                (#xDA8A . #x8DAD)	;CJK UNIFIED IDEOGRAPH
                                (#xDA8B . #x8DAE)	;CJK UNIFIED IDEOGRAPH
                                (#xDA8C . #x8DAF)	;CJK UNIFIED IDEOGRAPH
                                (#xDA8D . #x8DB0)	;CJK UNIFIED IDEOGRAPH
                                (#xDA8E . #x8DB2)	;CJK UNIFIED IDEOGRAPH
                                (#xDA8F . #x8DB6)	;CJK UNIFIED IDEOGRAPH
                                (#xDA90 . #x8DB7)	;CJK UNIFIED IDEOGRAPH
                                (#xDA91 . #x8DB9)	;CJK UNIFIED IDEOGRAPH
                                (#xDA92 . #x8DBB)	;CJK UNIFIED IDEOGRAPH
                                (#xDA93 . #x8DBD)	;CJK UNIFIED IDEOGRAPH
                                (#xDA94 . #x8DC0)	;CJK UNIFIED IDEOGRAPH
                                (#xDA95 . #x8DC1)	;CJK UNIFIED IDEOGRAPH
                                (#xDA96 . #x8DC2)	;CJK UNIFIED IDEOGRAPH
                                (#xDA97 . #x8DC5)	;CJK UNIFIED IDEOGRAPH
                                (#xDA98 . #x8DC7)	;CJK UNIFIED IDEOGRAPH
                                (#xDA99 . #x8DC8)	;CJK UNIFIED IDEOGRAPH
                                (#xDA9A . #x8DC9)	;CJK UNIFIED IDEOGRAPH
                                (#xDA9B . #x8DCA)	;CJK UNIFIED IDEOGRAPH
                                (#xDA9C . #x8DCD)	;CJK UNIFIED IDEOGRAPH
                                (#xDA9D . #x8DD0)	;CJK UNIFIED IDEOGRAPH
                                (#xDA9E . #x8DD2)	;CJK UNIFIED IDEOGRAPH
                                (#xDA9F . #x8DD3)	;CJK UNIFIED IDEOGRAPH
                                (#xDAA0 . #x8DD4)	;CJK UNIFIED IDEOGRAPH
                                (#xDAA1 . #x51C7)	;CJK UNIFIED IDEOGRAPH
                                (#xDAA2 . #x5196)	;CJK UNIFIED IDEOGRAPH
                                (#xDAA3 . #x51A2)	;CJK UNIFIED IDEOGRAPH
                                (#xDAA4 . #x51A5)	;CJK UNIFIED IDEOGRAPH
                                (#xDAA5 . #x8BA0)	;CJK UNIFIED IDEOGRAPH
                                (#xDAA6 . #x8BA6)	;CJK UNIFIED IDEOGRAPH
                                (#xDAA7 . #x8BA7)	;CJK UNIFIED IDEOGRAPH
                                (#xDAA8 . #x8BAA)	;CJK UNIFIED IDEOGRAPH
                                (#xDAA9 . #x8BB4)	;CJK UNIFIED IDEOGRAPH
                                (#xDAAA . #x8BB5)	;CJK UNIFIED IDEOGRAPH
                                (#xDAAB . #x8BB7)	;CJK UNIFIED IDEOGRAPH
                                (#xDAAC . #x8BC2)	;CJK UNIFIED IDEOGRAPH
                                (#xDAAD . #x8BC3)	;CJK UNIFIED IDEOGRAPH
                                (#xDAAE . #x8BCB)	;CJK UNIFIED IDEOGRAPH
                                (#xDAAF . #x8BCF)	;CJK UNIFIED IDEOGRAPH
                                (#xDAB0 . #x8BCE)	;CJK UNIFIED IDEOGRAPH
                                (#xDAB1 . #x8BD2)	;CJK UNIFIED IDEOGRAPH
                                (#xDAB2 . #x8BD3)	;CJK UNIFIED IDEOGRAPH
                                (#xDAB3 . #x8BD4)	;CJK UNIFIED IDEOGRAPH
                                (#xDAB4 . #x8BD6)	;CJK UNIFIED IDEOGRAPH
                                (#xDAB5 . #x8BD8)	;CJK UNIFIED IDEOGRAPH
                                (#xDAB6 . #x8BD9)	;CJK UNIFIED IDEOGRAPH
                                (#xDAB7 . #x8BDC)	;CJK UNIFIED IDEOGRAPH
                                (#xDAB8 . #x8BDF)	;CJK UNIFIED IDEOGRAPH
                                (#xDAB9 . #x8BE0)	;CJK UNIFIED IDEOGRAPH
                                (#xDABA . #x8BE4)	;CJK UNIFIED IDEOGRAPH
                                (#xDABB . #x8BE8)	;CJK UNIFIED IDEOGRAPH
                                (#xDABC . #x8BE9)	;CJK UNIFIED IDEOGRAPH
                                (#xDABD . #x8BEE)	;CJK UNIFIED IDEOGRAPH
                                (#xDABE . #x8BF0)	;CJK UNIFIED IDEOGRAPH
                                (#xDABF . #x8BF3)	;CJK UNIFIED IDEOGRAPH
                                (#xDAC0 . #x8BF6)	;CJK UNIFIED IDEOGRAPH
                                (#xDAC1 . #x8BF9)	;CJK UNIFIED IDEOGRAPH
                                (#xDAC2 . #x8BFC)	;CJK UNIFIED IDEOGRAPH
                                (#xDAC3 . #x8BFF)	;CJK UNIFIED IDEOGRAPH
                                (#xDAC4 . #x8C00)	;CJK UNIFIED IDEOGRAPH
                                (#xDAC5 . #x8C02)	;CJK UNIFIED IDEOGRAPH
                                (#xDAC6 . #x8C04)	;CJK UNIFIED IDEOGRAPH
                                (#xDAC7 . #x8C07)	;CJK UNIFIED IDEOGRAPH
                                (#xDAC8 . #x8C0C)	;CJK UNIFIED IDEOGRAPH
                                (#xDAC9 . #x8C0F)	;CJK UNIFIED IDEOGRAPH
                                (#xDACA . #x8C11)	;CJK UNIFIED IDEOGRAPH
                                (#xDACB . #x8C12)	;CJK UNIFIED IDEOGRAPH
                                (#xDACC . #x8C14)	;CJK UNIFIED IDEOGRAPH
                                (#xDACD . #x8C15)	;CJK UNIFIED IDEOGRAPH
                                (#xDACE . #x8C16)	;CJK UNIFIED IDEOGRAPH
                                (#xDACF . #x8C19)	;CJK UNIFIED IDEOGRAPH
                                (#xDAD0 . #x8C1B)	;CJK UNIFIED IDEOGRAPH
                                (#xDAD1 . #x8C18)	;CJK UNIFIED IDEOGRAPH
                                (#xDAD2 . #x8C1D)	;CJK UNIFIED IDEOGRAPH
                                (#xDAD3 . #x8C1F)	;CJK UNIFIED IDEOGRAPH
                                (#xDAD4 . #x8C20)	;CJK UNIFIED IDEOGRAPH
                                (#xDAD5 . #x8C21)	;CJK UNIFIED IDEOGRAPH
                                (#xDAD6 . #x8C25)	;CJK UNIFIED IDEOGRAPH
                                (#xDAD7 . #x8C27)	;CJK UNIFIED IDEOGRAPH
                                (#xDAD8 . #x8C2A)	;CJK UNIFIED IDEOGRAPH
                                (#xDAD9 . #x8C2B)	;CJK UNIFIED IDEOGRAPH
                                (#xDADA . #x8C2E)	;CJK UNIFIED IDEOGRAPH
                                (#xDADB . #x8C2F)	;CJK UNIFIED IDEOGRAPH
                                (#xDADC . #x8C32)	;CJK UNIFIED IDEOGRAPH
                                (#xDADD . #x8C33)	;CJK UNIFIED IDEOGRAPH
                                (#xDADE . #x8C35)	;CJK UNIFIED IDEOGRAPH
                                (#xDADF . #x8C36)	;CJK UNIFIED IDEOGRAPH
                                (#xDAE0 . #x5369)	;CJK UNIFIED IDEOGRAPH
                                (#xDAE1 . #x537A)	;CJK UNIFIED IDEOGRAPH
                                (#xDAE2 . #x961D)	;CJK UNIFIED IDEOGRAPH
                                (#xDAE3 . #x9622)	;CJK UNIFIED IDEOGRAPH
                                (#xDAE4 . #x9621)	;CJK UNIFIED IDEOGRAPH
                                (#xDAE5 . #x9631)	;CJK UNIFIED IDEOGRAPH
                                (#xDAE6 . #x962A)	;CJK UNIFIED IDEOGRAPH
                                (#xDAE7 . #x963D)	;CJK UNIFIED IDEOGRAPH
                                (#xDAE8 . #x963C)	;CJK UNIFIED IDEOGRAPH
                                (#xDAE9 . #x9642)	;CJK UNIFIED IDEOGRAPH
                                (#xDAEA . #x9649)	;CJK UNIFIED IDEOGRAPH
                                (#xDAEB . #x9654)	;CJK UNIFIED IDEOGRAPH
                                (#xDAEC . #x965F)	;CJK UNIFIED IDEOGRAPH
                                (#xDAED . #x9667)	;CJK UNIFIED IDEOGRAPH
                                (#xDAEE . #x966C)	;CJK UNIFIED IDEOGRAPH
                                (#xDAEF . #x9672)	;CJK UNIFIED IDEOGRAPH
                                (#xDAF0 . #x9674)	;CJK UNIFIED IDEOGRAPH
                                (#xDAF1 . #x9688)	;CJK UNIFIED IDEOGRAPH
                                (#xDAF2 . #x968D)	;CJK UNIFIED IDEOGRAPH
                                (#xDAF3 . #x9697)	;CJK UNIFIED IDEOGRAPH
                                (#xDAF4 . #x96B0)	;CJK UNIFIED IDEOGRAPH
                                (#xDAF5 . #x9097)	;CJK UNIFIED IDEOGRAPH
                                (#xDAF6 . #x909B)	;CJK UNIFIED IDEOGRAPH
                                (#xDAF7 . #x909D)	;CJK UNIFIED IDEOGRAPH
                                (#xDAF8 . #x9099)	;CJK UNIFIED IDEOGRAPH
                                (#xDAF9 . #x90AC)	;CJK UNIFIED IDEOGRAPH
                                (#xDAFA . #x90A1)	;CJK UNIFIED IDEOGRAPH
                                (#xDAFB . #x90B4)	;CJK UNIFIED IDEOGRAPH
                                (#xDAFC . #x90B3)	;CJK UNIFIED IDEOGRAPH
                                (#xDAFD . #x90B6)	;CJK UNIFIED IDEOGRAPH
                                (#xDAFE . #x90BA)	;CJK UNIFIED IDEOGRAPH
                                (#xDB40 . #x8DD5)	;CJK UNIFIED IDEOGRAPH
                                (#xDB41 . #x8DD8)	;CJK UNIFIED IDEOGRAPH
                                (#xDB42 . #x8DD9)	;CJK UNIFIED IDEOGRAPH
                                (#xDB43 . #x8DDC)	;CJK UNIFIED IDEOGRAPH
                                (#xDB44 . #x8DE0)	;CJK UNIFIED IDEOGRAPH
                                (#xDB45 . #x8DE1)	;CJK UNIFIED IDEOGRAPH
                                (#xDB46 . #x8DE2)	;CJK UNIFIED IDEOGRAPH
                                (#xDB47 . #x8DE5)	;CJK UNIFIED IDEOGRAPH
                                (#xDB48 . #x8DE6)	;CJK UNIFIED IDEOGRAPH
                                (#xDB49 . #x8DE7)	;CJK UNIFIED IDEOGRAPH
                                (#xDB4A . #x8DE9)	;CJK UNIFIED IDEOGRAPH
                                (#xDB4B . #x8DED)	;CJK UNIFIED IDEOGRAPH
                                (#xDB4C . #x8DEE)	;CJK UNIFIED IDEOGRAPH
                                (#xDB4D . #x8DF0)	;CJK UNIFIED IDEOGRAPH
                                (#xDB4E . #x8DF1)	;CJK UNIFIED IDEOGRAPH
                                (#xDB4F . #x8DF2)	;CJK UNIFIED IDEOGRAPH
                                (#xDB50 . #x8DF4)	;CJK UNIFIED IDEOGRAPH
                                (#xDB51 . #x8DF6)	;CJK UNIFIED IDEOGRAPH
                                (#xDB52 . #x8DFC)	;CJK UNIFIED IDEOGRAPH
                                (#xDB53 . #x8DFE)	;CJK UNIFIED IDEOGRAPH
                                (#xDB54 . #x8DFF)	;CJK UNIFIED IDEOGRAPH
                                (#xDB55 . #x8E00)	;CJK UNIFIED IDEOGRAPH
                                (#xDB56 . #x8E01)	;CJK UNIFIED IDEOGRAPH
                                (#xDB57 . #x8E02)	;CJK UNIFIED IDEOGRAPH
                                (#xDB58 . #x8E03)	;CJK UNIFIED IDEOGRAPH
                                (#xDB59 . #x8E04)	;CJK UNIFIED IDEOGRAPH
                                (#xDB5A . #x8E06)	;CJK UNIFIED IDEOGRAPH
                                (#xDB5B . #x8E07)	;CJK UNIFIED IDEOGRAPH
                                (#xDB5C . #x8E08)	;CJK UNIFIED IDEOGRAPH
                                (#xDB5D . #x8E0B)	;CJK UNIFIED IDEOGRAPH
                                (#xDB5E . #x8E0D)	;CJK UNIFIED IDEOGRAPH
                                (#xDB5F . #x8E0E)	;CJK UNIFIED IDEOGRAPH
                                (#xDB60 . #x8E10)	;CJK UNIFIED IDEOGRAPH
                                (#xDB61 . #x8E11)	;CJK UNIFIED IDEOGRAPH
                                (#xDB62 . #x8E12)	;CJK UNIFIED IDEOGRAPH
                                (#xDB63 . #x8E13)	;CJK UNIFIED IDEOGRAPH
                                (#xDB64 . #x8E15)	;CJK UNIFIED IDEOGRAPH
                                (#xDB65 . #x8E16)	;CJK UNIFIED IDEOGRAPH
                                (#xDB66 . #x8E17)	;CJK UNIFIED IDEOGRAPH
                                (#xDB67 . #x8E18)	;CJK UNIFIED IDEOGRAPH
                                (#xDB68 . #x8E19)	;CJK UNIFIED IDEOGRAPH
                                (#xDB69 . #x8E1A)	;CJK UNIFIED IDEOGRAPH
                                (#xDB6A . #x8E1B)	;CJK UNIFIED IDEOGRAPH
                                (#xDB6B . #x8E1C)	;CJK UNIFIED IDEOGRAPH
                                (#xDB6C . #x8E20)	;CJK UNIFIED IDEOGRAPH
                                (#xDB6D . #x8E21)	;CJK UNIFIED IDEOGRAPH
                                (#xDB6E . #x8E24)	;CJK UNIFIED IDEOGRAPH
                                (#xDB6F . #x8E25)	;CJK UNIFIED IDEOGRAPH
                                (#xDB70 . #x8E26)	;CJK UNIFIED IDEOGRAPH
                                (#xDB71 . #x8E27)	;CJK UNIFIED IDEOGRAPH
                                (#xDB72 . #x8E28)	;CJK UNIFIED IDEOGRAPH
                                (#xDB73 . #x8E2B)	;CJK UNIFIED IDEOGRAPH
                                (#xDB74 . #x8E2D)	;CJK UNIFIED IDEOGRAPH
                                (#xDB75 . #x8E30)	;CJK UNIFIED IDEOGRAPH
                                (#xDB76 . #x8E32)	;CJK UNIFIED IDEOGRAPH
                                (#xDB77 . #x8E33)	;CJK UNIFIED IDEOGRAPH
                                (#xDB78 . #x8E34)	;CJK UNIFIED IDEOGRAPH
                                (#xDB79 . #x8E36)	;CJK UNIFIED IDEOGRAPH
                                (#xDB7A . #x8E37)	;CJK UNIFIED IDEOGRAPH
                                (#xDB7B . #x8E38)	;CJK UNIFIED IDEOGRAPH
                                (#xDB7C . #x8E3B)	;CJK UNIFIED IDEOGRAPH
                                (#xDB7D . #x8E3C)	;CJK UNIFIED IDEOGRAPH
                                (#xDB7E . #x8E3E)	;CJK UNIFIED IDEOGRAPH
                                (#xDB80 . #x8E3F)	;CJK UNIFIED IDEOGRAPH
                                (#xDB81 . #x8E43)	;CJK UNIFIED IDEOGRAPH
                                (#xDB82 . #x8E45)	;CJK UNIFIED IDEOGRAPH
                                (#xDB83 . #x8E46)	;CJK UNIFIED IDEOGRAPH
                                (#xDB84 . #x8E4C)	;CJK UNIFIED IDEOGRAPH
                                (#xDB85 . #x8E4D)	;CJK UNIFIED IDEOGRAPH
                                (#xDB86 . #x8E4E)	;CJK UNIFIED IDEOGRAPH
                                (#xDB87 . #x8E4F)	;CJK UNIFIED IDEOGRAPH
                                (#xDB88 . #x8E50)	;CJK UNIFIED IDEOGRAPH
                                (#xDB89 . #x8E53)	;CJK UNIFIED IDEOGRAPH
                                (#xDB8A . #x8E54)	;CJK UNIFIED IDEOGRAPH
                                (#xDB8B . #x8E55)	;CJK UNIFIED IDEOGRAPH
                                (#xDB8C . #x8E56)	;CJK UNIFIED IDEOGRAPH
                                (#xDB8D . #x8E57)	;CJK UNIFIED IDEOGRAPH
                                (#xDB8E . #x8E58)	;CJK UNIFIED IDEOGRAPH
                                (#xDB8F . #x8E5A)	;CJK UNIFIED IDEOGRAPH
                                (#xDB90 . #x8E5B)	;CJK UNIFIED IDEOGRAPH
                                (#xDB91 . #x8E5C)	;CJK UNIFIED IDEOGRAPH
                                (#xDB92 . #x8E5D)	;CJK UNIFIED IDEOGRAPH
                                (#xDB93 . #x8E5E)	;CJK UNIFIED IDEOGRAPH
                                (#xDB94 . #x8E5F)	;CJK UNIFIED IDEOGRAPH
                                (#xDB95 . #x8E60)	;CJK UNIFIED IDEOGRAPH
                                (#xDB96 . #x8E61)	;CJK UNIFIED IDEOGRAPH
                                (#xDB97 . #x8E62)	;CJK UNIFIED IDEOGRAPH
                                (#xDB98 . #x8E63)	;CJK UNIFIED IDEOGRAPH
                                (#xDB99 . #x8E64)	;CJK UNIFIED IDEOGRAPH
                                (#xDB9A . #x8E65)	;CJK UNIFIED IDEOGRAPH
                                (#xDB9B . #x8E67)	;CJK UNIFIED IDEOGRAPH
                                (#xDB9C . #x8E68)	;CJK UNIFIED IDEOGRAPH
                                (#xDB9D . #x8E6A)	;CJK UNIFIED IDEOGRAPH
                                (#xDB9E . #x8E6B)	;CJK UNIFIED IDEOGRAPH
                                (#xDB9F . #x8E6E)	;CJK UNIFIED IDEOGRAPH
                                (#xDBA0 . #x8E71)	;CJK UNIFIED IDEOGRAPH
                                (#xDBA1 . #x90B8)	;CJK UNIFIED IDEOGRAPH
                                (#xDBA2 . #x90B0)	;CJK UNIFIED IDEOGRAPH
                                (#xDBA3 . #x90CF)	;CJK UNIFIED IDEOGRAPH
                                (#xDBA4 . #x90C5)	;CJK UNIFIED IDEOGRAPH
                                (#xDBA5 . #x90BE)	;CJK UNIFIED IDEOGRAPH
                                (#xDBA6 . #x90D0)	;CJK UNIFIED IDEOGRAPH
                                (#xDBA7 . #x90C4)	;CJK UNIFIED IDEOGRAPH
                                (#xDBA8 . #x90C7)	;CJK UNIFIED IDEOGRAPH
                                (#xDBA9 . #x90D3)	;CJK UNIFIED IDEOGRAPH
                                (#xDBAA . #x90E6)	;CJK UNIFIED IDEOGRAPH
                                (#xDBAB . #x90E2)	;CJK UNIFIED IDEOGRAPH
                                (#xDBAC . #x90DC)	;CJK UNIFIED IDEOGRAPH
                                (#xDBAD . #x90D7)	;CJK UNIFIED IDEOGRAPH
                                (#xDBAE . #x90DB)	;CJK UNIFIED IDEOGRAPH
                                (#xDBAF . #x90EB)	;CJK UNIFIED IDEOGRAPH
                                (#xDBB0 . #x90EF)	;CJK UNIFIED IDEOGRAPH
                                (#xDBB1 . #x90FE)	;CJK UNIFIED IDEOGRAPH
                                (#xDBB2 . #x9104)	;CJK UNIFIED IDEOGRAPH
                                (#xDBB3 . #x9122)	;CJK UNIFIED IDEOGRAPH
                                (#xDBB4 . #x911E)	;CJK UNIFIED IDEOGRAPH
                                (#xDBB5 . #x9123)	;CJK UNIFIED IDEOGRAPH
                                (#xDBB6 . #x9131)	;CJK UNIFIED IDEOGRAPH
                                (#xDBB7 . #x912F)	;CJK UNIFIED IDEOGRAPH
                                (#xDBB8 . #x9139)	;CJK UNIFIED IDEOGRAPH
                                (#xDBB9 . #x9143)	;CJK UNIFIED IDEOGRAPH
                                (#xDBBA . #x9146)	;CJK UNIFIED IDEOGRAPH
                                (#xDBBB . #x520D)	;CJK UNIFIED IDEOGRAPH
                                (#xDBBC . #x5942)	;CJK UNIFIED IDEOGRAPH
                                (#xDBBD . #x52A2)	;CJK UNIFIED IDEOGRAPH
                                (#xDBBE . #x52AC)	;CJK UNIFIED IDEOGRAPH
                                (#xDBBF . #x52AD)	;CJK UNIFIED IDEOGRAPH
                                (#xDBC0 . #x52BE)	;CJK UNIFIED IDEOGRAPH
                                (#xDBC1 . #x54FF)	;CJK UNIFIED IDEOGRAPH
                                (#xDBC2 . #x52D0)	;CJK UNIFIED IDEOGRAPH
                                (#xDBC3 . #x52D6)	;CJK UNIFIED IDEOGRAPH
                                (#xDBC4 . #x52F0)	;CJK UNIFIED IDEOGRAPH
                                (#xDBC5 . #x53DF)	;CJK UNIFIED IDEOGRAPH
                                (#xDBC6 . #x71EE)	;CJK UNIFIED IDEOGRAPH
                                (#xDBC7 . #x77CD)	;CJK UNIFIED IDEOGRAPH
                                (#xDBC8 . #x5EF4)	;CJK UNIFIED IDEOGRAPH
                                (#xDBC9 . #x51F5)	;CJK UNIFIED IDEOGRAPH
                                (#xDBCA . #x51FC)	;CJK UNIFIED IDEOGRAPH
                                (#xDBCB . #x9B2F)	;CJK UNIFIED IDEOGRAPH
                                (#xDBCC . #x53B6)	;CJK UNIFIED IDEOGRAPH
                                (#xDBCD . #x5F01)	;CJK UNIFIED IDEOGRAPH
                                (#xDBCE . #x755A)	;CJK UNIFIED IDEOGRAPH
                                (#xDBCF . #x5DEF)	;CJK UNIFIED IDEOGRAPH
                                (#xDBD0 . #x574C)	;CJK UNIFIED IDEOGRAPH
                                (#xDBD1 . #x57A9)	;CJK UNIFIED IDEOGRAPH
                                (#xDBD2 . #x57A1)	;CJK UNIFIED IDEOGRAPH
                                (#xDBD3 . #x587E)	;CJK UNIFIED IDEOGRAPH
                                (#xDBD4 . #x58BC)	;CJK UNIFIED IDEOGRAPH
                                (#xDBD5 . #x58C5)	;CJK UNIFIED IDEOGRAPH
                                (#xDBD6 . #x58D1)	;CJK UNIFIED IDEOGRAPH
                                (#xDBD7 . #x5729)	;CJK UNIFIED IDEOGRAPH
                                (#xDBD8 . #x572C)	;CJK UNIFIED IDEOGRAPH
                                (#xDBD9 . #x572A)	;CJK UNIFIED IDEOGRAPH
                                (#xDBDA . #x5733)	;CJK UNIFIED IDEOGRAPH
                                (#xDBDB . #x5739)	;CJK UNIFIED IDEOGRAPH
                                (#xDBDC . #x572E)	;CJK UNIFIED IDEOGRAPH
                                (#xDBDD . #x572F)	;CJK UNIFIED IDEOGRAPH
                                (#xDBDE . #x575C)	;CJK UNIFIED IDEOGRAPH
                                (#xDBDF . #x573B)	;CJK UNIFIED IDEOGRAPH
                                (#xDBE0 . #x5742)	;CJK UNIFIED IDEOGRAPH
                                (#xDBE1 . #x5769)	;CJK UNIFIED IDEOGRAPH
                                (#xDBE2 . #x5785)	;CJK UNIFIED IDEOGRAPH
                                (#xDBE3 . #x576B)	;CJK UNIFIED IDEOGRAPH
                                (#xDBE4 . #x5786)	;CJK UNIFIED IDEOGRAPH
                                (#xDBE5 . #x577C)	;CJK UNIFIED IDEOGRAPH
                                (#xDBE6 . #x577B)	;CJK UNIFIED IDEOGRAPH
                                (#xDBE7 . #x5768)	;CJK UNIFIED IDEOGRAPH
                                (#xDBE8 . #x576D)	;CJK UNIFIED IDEOGRAPH
                                (#xDBE9 . #x5776)	;CJK UNIFIED IDEOGRAPH
                                (#xDBEA . #x5773)	;CJK UNIFIED IDEOGRAPH
                                (#xDBEB . #x57AD)	;CJK UNIFIED IDEOGRAPH
                                (#xDBEC . #x57A4)	;CJK UNIFIED IDEOGRAPH
                                (#xDBED . #x578C)	;CJK UNIFIED IDEOGRAPH
                                (#xDBEE . #x57B2)	;CJK UNIFIED IDEOGRAPH
                                (#xDBEF . #x57CF)	;CJK UNIFIED IDEOGRAPH
                                (#xDBF0 . #x57A7)	;CJK UNIFIED IDEOGRAPH
                                (#xDBF1 . #x57B4)	;CJK UNIFIED IDEOGRAPH
                                (#xDBF2 . #x5793)	;CJK UNIFIED IDEOGRAPH
                                (#xDBF3 . #x57A0)	;CJK UNIFIED IDEOGRAPH
                                (#xDBF4 . #x57D5)	;CJK UNIFIED IDEOGRAPH
                                (#xDBF5 . #x57D8)	;CJK UNIFIED IDEOGRAPH
                                (#xDBF6 . #x57DA)	;CJK UNIFIED IDEOGRAPH
                                (#xDBF7 . #x57D9)	;CJK UNIFIED IDEOGRAPH
                                (#xDBF8 . #x57D2)	;CJK UNIFIED IDEOGRAPH
                                (#xDBF9 . #x57B8)	;CJK UNIFIED IDEOGRAPH
                                (#xDBFA . #x57F4)	;CJK UNIFIED IDEOGRAPH
                                (#xDBFB . #x57EF)	;CJK UNIFIED IDEOGRAPH
                                (#xDBFC . #x57F8)	;CJK UNIFIED IDEOGRAPH
                                (#xDBFD . #x57E4)	;CJK UNIFIED IDEOGRAPH
                                (#xDBFE . #x57DD)	;CJK UNIFIED IDEOGRAPH
                                (#xDC40 . #x8E73)	;CJK UNIFIED IDEOGRAPH
                                (#xDC41 . #x8E75)	;CJK UNIFIED IDEOGRAPH
                                (#xDC42 . #x8E77)	;CJK UNIFIED IDEOGRAPH
                                (#xDC43 . #x8E78)	;CJK UNIFIED IDEOGRAPH
                                (#xDC44 . #x8E79)	;CJK UNIFIED IDEOGRAPH
                                (#xDC45 . #x8E7A)	;CJK UNIFIED IDEOGRAPH
                                (#xDC46 . #x8E7B)	;CJK UNIFIED IDEOGRAPH
                                (#xDC47 . #x8E7D)	;CJK UNIFIED IDEOGRAPH
                                (#xDC48 . #x8E7E)	;CJK UNIFIED IDEOGRAPH
                                (#xDC49 . #x8E80)	;CJK UNIFIED IDEOGRAPH
                                (#xDC4A . #x8E82)	;CJK UNIFIED IDEOGRAPH
                                (#xDC4B . #x8E83)	;CJK UNIFIED IDEOGRAPH
                                (#xDC4C . #x8E84)	;CJK UNIFIED IDEOGRAPH
                                (#xDC4D . #x8E86)	;CJK UNIFIED IDEOGRAPH
                                (#xDC4E . #x8E88)	;CJK UNIFIED IDEOGRAPH
                                (#xDC4F . #x8E89)	;CJK UNIFIED IDEOGRAPH
                                (#xDC50 . #x8E8A)	;CJK UNIFIED IDEOGRAPH
                                (#xDC51 . #x8E8B)	;CJK UNIFIED IDEOGRAPH
                                (#xDC52 . #x8E8C)	;CJK UNIFIED IDEOGRAPH
                                (#xDC53 . #x8E8D)	;CJK UNIFIED IDEOGRAPH
                                (#xDC54 . #x8E8E)	;CJK UNIFIED IDEOGRAPH
                                (#xDC55 . #x8E91)	;CJK UNIFIED IDEOGRAPH
                                (#xDC56 . #x8E92)	;CJK UNIFIED IDEOGRAPH
                                (#xDC57 . #x8E93)	;CJK UNIFIED IDEOGRAPH
                                (#xDC58 . #x8E95)	;CJK UNIFIED IDEOGRAPH
                                (#xDC59 . #x8E96)	;CJK UNIFIED IDEOGRAPH
                                (#xDC5A . #x8E97)	;CJK UNIFIED IDEOGRAPH
                                (#xDC5B . #x8E98)	;CJK UNIFIED IDEOGRAPH
                                (#xDC5C . #x8E99)	;CJK UNIFIED IDEOGRAPH
                                (#xDC5D . #x8E9A)	;CJK UNIFIED IDEOGRAPH
                                (#xDC5E . #x8E9B)	;CJK UNIFIED IDEOGRAPH
                                (#xDC5F . #x8E9D)	;CJK UNIFIED IDEOGRAPH
                                (#xDC60 . #x8E9F)	;CJK UNIFIED IDEOGRAPH
                                (#xDC61 . #x8EA0)	;CJK UNIFIED IDEOGRAPH
                                (#xDC62 . #x8EA1)	;CJK UNIFIED IDEOGRAPH
                                (#xDC63 . #x8EA2)	;CJK UNIFIED IDEOGRAPH
                                (#xDC64 . #x8EA3)	;CJK UNIFIED IDEOGRAPH
                                (#xDC65 . #x8EA4)	;CJK UNIFIED IDEOGRAPH
                                (#xDC66 . #x8EA5)	;CJK UNIFIED IDEOGRAPH
                                (#xDC67 . #x8EA6)	;CJK UNIFIED IDEOGRAPH
                                (#xDC68 . #x8EA7)	;CJK UNIFIED IDEOGRAPH
                                (#xDC69 . #x8EA8)	;CJK UNIFIED IDEOGRAPH
                                (#xDC6A . #x8EA9)	;CJK UNIFIED IDEOGRAPH
                                (#xDC6B . #x8EAA)	;CJK UNIFIED IDEOGRAPH
                                (#xDC6C . #x8EAD)	;CJK UNIFIED IDEOGRAPH
                                (#xDC6D . #x8EAE)	;CJK UNIFIED IDEOGRAPH
                                (#xDC6E . #x8EB0)	;CJK UNIFIED IDEOGRAPH
                                (#xDC6F . #x8EB1)	;CJK UNIFIED IDEOGRAPH
                                (#xDC70 . #x8EB3)	;CJK UNIFIED IDEOGRAPH
                                (#xDC71 . #x8EB4)	;CJK UNIFIED IDEOGRAPH
                                (#xDC72 . #x8EB5)	;CJK UNIFIED IDEOGRAPH
                                (#xDC73 . #x8EB6)	;CJK UNIFIED IDEOGRAPH
                                (#xDC74 . #x8EB7)	;CJK UNIFIED IDEOGRAPH
                                (#xDC75 . #x8EB8)	;CJK UNIFIED IDEOGRAPH
                                (#xDC76 . #x8EB9)	;CJK UNIFIED IDEOGRAPH
                                (#xDC77 . #x8EBB)	;CJK UNIFIED IDEOGRAPH
                                (#xDC78 . #x8EBC)	;CJK UNIFIED IDEOGRAPH
                                (#xDC79 . #x8EBD)	;CJK UNIFIED IDEOGRAPH
                                (#xDC7A . #x8EBE)	;CJK UNIFIED IDEOGRAPH
                                (#xDC7B . #x8EBF)	;CJK UNIFIED IDEOGRAPH
                                (#xDC7C . #x8EC0)	;CJK UNIFIED IDEOGRAPH
                                (#xDC7D . #x8EC1)	;CJK UNIFIED IDEOGRAPH
                                (#xDC7E . #x8EC2)	;CJK UNIFIED IDEOGRAPH
                                (#xDC80 . #x8EC3)	;CJK UNIFIED IDEOGRAPH
                                (#xDC81 . #x8EC4)	;CJK UNIFIED IDEOGRAPH
                                (#xDC82 . #x8EC5)	;CJK UNIFIED IDEOGRAPH
                                (#xDC83 . #x8EC6)	;CJK UNIFIED IDEOGRAPH
                                (#xDC84 . #x8EC7)	;CJK UNIFIED IDEOGRAPH
                                (#xDC85 . #x8EC8)	;CJK UNIFIED IDEOGRAPH
                                (#xDC86 . #x8EC9)	;CJK UNIFIED IDEOGRAPH
                                (#xDC87 . #x8ECA)	;CJK UNIFIED IDEOGRAPH
                                (#xDC88 . #x8ECB)	;CJK UNIFIED IDEOGRAPH
                                (#xDC89 . #x8ECC)	;CJK UNIFIED IDEOGRAPH
                                (#xDC8A . #x8ECD)	;CJK UNIFIED IDEOGRAPH
                                (#xDC8B . #x8ECF)	;CJK UNIFIED IDEOGRAPH
                                (#xDC8C . #x8ED0)	;CJK UNIFIED IDEOGRAPH
                                (#xDC8D . #x8ED1)	;CJK UNIFIED IDEOGRAPH
                                (#xDC8E . #x8ED2)	;CJK UNIFIED IDEOGRAPH
                                (#xDC8F . #x8ED3)	;CJK UNIFIED IDEOGRAPH
                                (#xDC90 . #x8ED4)	;CJK UNIFIED IDEOGRAPH
                                (#xDC91 . #x8ED5)	;CJK UNIFIED IDEOGRAPH
                                (#xDC92 . #x8ED6)	;CJK UNIFIED IDEOGRAPH
                                (#xDC93 . #x8ED7)	;CJK UNIFIED IDEOGRAPH
                                (#xDC94 . #x8ED8)	;CJK UNIFIED IDEOGRAPH
                                (#xDC95 . #x8ED9)	;CJK UNIFIED IDEOGRAPH
                                (#xDC96 . #x8EDA)	;CJK UNIFIED IDEOGRAPH
                                (#xDC97 . #x8EDB)	;CJK UNIFIED IDEOGRAPH
                                (#xDC98 . #x8EDC)	;CJK UNIFIED IDEOGRAPH
                                (#xDC99 . #x8EDD)	;CJK UNIFIED IDEOGRAPH
                                (#xDC9A . #x8EDE)	;CJK UNIFIED IDEOGRAPH
                                (#xDC9B . #x8EDF)	;CJK UNIFIED IDEOGRAPH
                                (#xDC9C . #x8EE0)	;CJK UNIFIED IDEOGRAPH
                                (#xDC9D . #x8EE1)	;CJK UNIFIED IDEOGRAPH
                                (#xDC9E . #x8EE2)	;CJK UNIFIED IDEOGRAPH
                                (#xDC9F . #x8EE3)	;CJK UNIFIED IDEOGRAPH
                                (#xDCA0 . #x8EE4)	;CJK UNIFIED IDEOGRAPH
                                (#xDCA1 . #x580B)	;CJK UNIFIED IDEOGRAPH
                                (#xDCA2 . #x580D)	;CJK UNIFIED IDEOGRAPH
                                (#xDCA3 . #x57FD)	;CJK UNIFIED IDEOGRAPH
                                (#xDCA4 . #x57ED)	;CJK UNIFIED IDEOGRAPH
                                (#xDCA5 . #x5800)	;CJK UNIFIED IDEOGRAPH
                                (#xDCA6 . #x581E)	;CJK UNIFIED IDEOGRAPH
                                (#xDCA7 . #x5819)	;CJK UNIFIED IDEOGRAPH
                                (#xDCA8 . #x5844)	;CJK UNIFIED IDEOGRAPH
                                (#xDCA9 . #x5820)	;CJK UNIFIED IDEOGRAPH
                                (#xDCAA . #x5865)	;CJK UNIFIED IDEOGRAPH
                                (#xDCAB . #x586C)	;CJK UNIFIED IDEOGRAPH
                                (#xDCAC . #x5881)	;CJK UNIFIED IDEOGRAPH
                                (#xDCAD . #x5889)	;CJK UNIFIED IDEOGRAPH
                                (#xDCAE . #x589A)	;CJK UNIFIED IDEOGRAPH
                                (#xDCAF . #x5880)	;CJK UNIFIED IDEOGRAPH
                                (#xDCB0 . #x99A8)	;CJK UNIFIED IDEOGRAPH
                                (#xDCB1 . #x9F19)	;CJK UNIFIED IDEOGRAPH
                                (#xDCB2 . #x61FF)	;CJK UNIFIED IDEOGRAPH
                                (#xDCB3 . #x8279)	;CJK UNIFIED IDEOGRAPH
                                (#xDCB4 . #x827D)	;CJK UNIFIED IDEOGRAPH
                                (#xDCB5 . #x827F)	;CJK UNIFIED IDEOGRAPH
                                (#xDCB6 . #x828F)	;CJK UNIFIED IDEOGRAPH
                                (#xDCB7 . #x828A)	;CJK UNIFIED IDEOGRAPH
                                (#xDCB8 . #x82A8)	;CJK UNIFIED IDEOGRAPH
                                (#xDCB9 . #x8284)	;CJK UNIFIED IDEOGRAPH
                                (#xDCBA . #x828E)	;CJK UNIFIED IDEOGRAPH
                                (#xDCBB . #x8291)	;CJK UNIFIED IDEOGRAPH
                                (#xDCBC . #x8297)	;CJK UNIFIED IDEOGRAPH
                                (#xDCBD . #x8299)	;CJK UNIFIED IDEOGRAPH
                                (#xDCBE . #x82AB)	;CJK UNIFIED IDEOGRAPH
                                (#xDCBF . #x82B8)	;CJK UNIFIED IDEOGRAPH
                                (#xDCC0 . #x82BE)	;CJK UNIFIED IDEOGRAPH
                                (#xDCC1 . #x82B0)	;CJK UNIFIED IDEOGRAPH
                                (#xDCC2 . #x82C8)	;CJK UNIFIED IDEOGRAPH
                                (#xDCC3 . #x82CA)	;CJK UNIFIED IDEOGRAPH
                                (#xDCC4 . #x82E3)	;CJK UNIFIED IDEOGRAPH
                                (#xDCC5 . #x8298)	;CJK UNIFIED IDEOGRAPH
                                (#xDCC6 . #x82B7)	;CJK UNIFIED IDEOGRAPH
                                (#xDCC7 . #x82AE)	;CJK UNIFIED IDEOGRAPH
                                (#xDCC8 . #x82CB)	;CJK UNIFIED IDEOGRAPH
                                (#xDCC9 . #x82CC)	;CJK UNIFIED IDEOGRAPH
                                (#xDCCA . #x82C1)	;CJK UNIFIED IDEOGRAPH
                                (#xDCCB . #x82A9)	;CJK UNIFIED IDEOGRAPH
                                (#xDCCC . #x82B4)	;CJK UNIFIED IDEOGRAPH
                                (#xDCCD . #x82A1)	;CJK UNIFIED IDEOGRAPH
                                (#xDCCE . #x82AA)	;CJK UNIFIED IDEOGRAPH
                                (#xDCCF . #x829F)	;CJK UNIFIED IDEOGRAPH
                                (#xDCD0 . #x82C4)	;CJK UNIFIED IDEOGRAPH
                                (#xDCD1 . #x82CE)	;CJK UNIFIED IDEOGRAPH
                                (#xDCD2 . #x82A4)	;CJK UNIFIED IDEOGRAPH
                                (#xDCD3 . #x82E1)	;CJK UNIFIED IDEOGRAPH
                                (#xDCD4 . #x8309)	;CJK UNIFIED IDEOGRAPH
                                (#xDCD5 . #x82F7)	;CJK UNIFIED IDEOGRAPH
                                (#xDCD6 . #x82E4)	;CJK UNIFIED IDEOGRAPH
                                (#xDCD7 . #x830F)	;CJK UNIFIED IDEOGRAPH
                                (#xDCD8 . #x8307)	;CJK UNIFIED IDEOGRAPH
                                (#xDCD9 . #x82DC)	;CJK UNIFIED IDEOGRAPH
                                (#xDCDA . #x82F4)	;CJK UNIFIED IDEOGRAPH
                                (#xDCDB . #x82D2)	;CJK UNIFIED IDEOGRAPH
                                (#xDCDC . #x82D8)	;CJK UNIFIED IDEOGRAPH
                                (#xDCDD . #x830C)	;CJK UNIFIED IDEOGRAPH
                                (#xDCDE . #x82FB)	;CJK UNIFIED IDEOGRAPH
                                (#xDCDF . #x82D3)	;CJK UNIFIED IDEOGRAPH
                                (#xDCE0 . #x8311)	;CJK UNIFIED IDEOGRAPH
                                (#xDCE1 . #x831A)	;CJK UNIFIED IDEOGRAPH
                                (#xDCE2 . #x8306)	;CJK UNIFIED IDEOGRAPH
                                (#xDCE3 . #x8314)	;CJK UNIFIED IDEOGRAPH
                                (#xDCE4 . #x8315)	;CJK UNIFIED IDEOGRAPH
                                (#xDCE5 . #x82E0)	;CJK UNIFIED IDEOGRAPH
                                (#xDCE6 . #x82D5)	;CJK UNIFIED IDEOGRAPH
                                (#xDCE7 . #x831C)	;CJK UNIFIED IDEOGRAPH
                                (#xDCE8 . #x8351)	;CJK UNIFIED IDEOGRAPH
                                (#xDCE9 . #x835B)	;CJK UNIFIED IDEOGRAPH
                                (#xDCEA . #x835C)	;CJK UNIFIED IDEOGRAPH
                                (#xDCEB . #x8308)	;CJK UNIFIED IDEOGRAPH
                                (#xDCEC . #x8392)	;CJK UNIFIED IDEOGRAPH
                                (#xDCED . #x833C)	;CJK UNIFIED IDEOGRAPH
                                (#xDCEE . #x8334)	;CJK UNIFIED IDEOGRAPH
                                (#xDCEF . #x8331)	;CJK UNIFIED IDEOGRAPH
                                (#xDCF0 . #x839B)	;CJK UNIFIED IDEOGRAPH
                                (#xDCF1 . #x835E)	;CJK UNIFIED IDEOGRAPH
                                (#xDCF2 . #x832F)	;CJK UNIFIED IDEOGRAPH
                                (#xDCF3 . #x834F)	;CJK UNIFIED IDEOGRAPH
                                (#xDCF4 . #x8347)	;CJK UNIFIED IDEOGRAPH
                                (#xDCF5 . #x8343)	;CJK UNIFIED IDEOGRAPH
                                (#xDCF6 . #x835F)	;CJK UNIFIED IDEOGRAPH
                                (#xDCF7 . #x8340)	;CJK UNIFIED IDEOGRAPH
                                (#xDCF8 . #x8317)	;CJK UNIFIED IDEOGRAPH
                                (#xDCF9 . #x8360)	;CJK UNIFIED IDEOGRAPH
                                (#xDCFA . #x832D)	;CJK UNIFIED IDEOGRAPH
                                (#xDCFB . #x833A)	;CJK UNIFIED IDEOGRAPH
                                (#xDCFC . #x8333)	;CJK UNIFIED IDEOGRAPH
                                (#xDCFD . #x8366)	;CJK UNIFIED IDEOGRAPH
                                (#xDCFE . #x8365)	;CJK UNIFIED IDEOGRAPH
                                (#xDD40 . #x8EE5)	;CJK UNIFIED IDEOGRAPH
                                (#xDD41 . #x8EE6)	;CJK UNIFIED IDEOGRAPH
                                (#xDD42 . #x8EE7)	;CJK UNIFIED IDEOGRAPH
                                (#xDD43 . #x8EE8)	;CJK UNIFIED IDEOGRAPH
                                (#xDD44 . #x8EE9)	;CJK UNIFIED IDEOGRAPH
                                (#xDD45 . #x8EEA)	;CJK UNIFIED IDEOGRAPH
                                (#xDD46 . #x8EEB)	;CJK UNIFIED IDEOGRAPH
                                (#xDD47 . #x8EEC)	;CJK UNIFIED IDEOGRAPH
                                (#xDD48 . #x8EED)	;CJK UNIFIED IDEOGRAPH
                                (#xDD49 . #x8EEE)	;CJK UNIFIED IDEOGRAPH
                                (#xDD4A . #x8EEF)	;CJK UNIFIED IDEOGRAPH
                                (#xDD4B . #x8EF0)	;CJK UNIFIED IDEOGRAPH
                                (#xDD4C . #x8EF1)	;CJK UNIFIED IDEOGRAPH
                                (#xDD4D . #x8EF2)	;CJK UNIFIED IDEOGRAPH
                                (#xDD4E . #x8EF3)	;CJK UNIFIED IDEOGRAPH
                                (#xDD4F . #x8EF4)	;CJK UNIFIED IDEOGRAPH
                                (#xDD50 . #x8EF5)	;CJK UNIFIED IDEOGRAPH
                                (#xDD51 . #x8EF6)	;CJK UNIFIED IDEOGRAPH
                                (#xDD52 . #x8EF7)	;CJK UNIFIED IDEOGRAPH
                                (#xDD53 . #x8EF8)	;CJK UNIFIED IDEOGRAPH
                                (#xDD54 . #x8EF9)	;CJK UNIFIED IDEOGRAPH
                                (#xDD55 . #x8EFA)	;CJK UNIFIED IDEOGRAPH
                                (#xDD56 . #x8EFB)	;CJK UNIFIED IDEOGRAPH
                                (#xDD57 . #x8EFC)	;CJK UNIFIED IDEOGRAPH
                                (#xDD58 . #x8EFD)	;CJK UNIFIED IDEOGRAPH
                                (#xDD59 . #x8EFE)	;CJK UNIFIED IDEOGRAPH
                                (#xDD5A . #x8EFF)	;CJK UNIFIED IDEOGRAPH
                                (#xDD5B . #x8F00)	;CJK UNIFIED IDEOGRAPH
                                (#xDD5C . #x8F01)	;CJK UNIFIED IDEOGRAPH
                                (#xDD5D . #x8F02)	;CJK UNIFIED IDEOGRAPH
                                (#xDD5E . #x8F03)	;CJK UNIFIED IDEOGRAPH
                                (#xDD5F . #x8F04)	;CJK UNIFIED IDEOGRAPH
                                (#xDD60 . #x8F05)	;CJK UNIFIED IDEOGRAPH
                                (#xDD61 . #x8F06)	;CJK UNIFIED IDEOGRAPH
                                (#xDD62 . #x8F07)	;CJK UNIFIED IDEOGRAPH
                                (#xDD63 . #x8F08)	;CJK UNIFIED IDEOGRAPH
                                (#xDD64 . #x8F09)	;CJK UNIFIED IDEOGRAPH
                                (#xDD65 . #x8F0A)	;CJK UNIFIED IDEOGRAPH
                                (#xDD66 . #x8F0B)	;CJK UNIFIED IDEOGRAPH
                                (#xDD67 . #x8F0C)	;CJK UNIFIED IDEOGRAPH
                                (#xDD68 . #x8F0D)	;CJK UNIFIED IDEOGRAPH
                                (#xDD69 . #x8F0E)	;CJK UNIFIED IDEOGRAPH
                                (#xDD6A . #x8F0F)	;CJK UNIFIED IDEOGRAPH
                                (#xDD6B . #x8F10)	;CJK UNIFIED IDEOGRAPH
                                (#xDD6C . #x8F11)	;CJK UNIFIED IDEOGRAPH
                                (#xDD6D . #x8F12)	;CJK UNIFIED IDEOGRAPH
                                (#xDD6E . #x8F13)	;CJK UNIFIED IDEOGRAPH
                                (#xDD6F . #x8F14)	;CJK UNIFIED IDEOGRAPH
                                (#xDD70 . #x8F15)	;CJK UNIFIED IDEOGRAPH
                                (#xDD71 . #x8F16)	;CJK UNIFIED IDEOGRAPH
                                (#xDD72 . #x8F17)	;CJK UNIFIED IDEOGRAPH
                                (#xDD73 . #x8F18)	;CJK UNIFIED IDEOGRAPH
                                (#xDD74 . #x8F19)	;CJK UNIFIED IDEOGRAPH
                                (#xDD75 . #x8F1A)	;CJK UNIFIED IDEOGRAPH
                                (#xDD76 . #x8F1B)	;CJK UNIFIED IDEOGRAPH
                                (#xDD77 . #x8F1C)	;CJK UNIFIED IDEOGRAPH
                                (#xDD78 . #x8F1D)	;CJK UNIFIED IDEOGRAPH
                                (#xDD79 . #x8F1E)	;CJK UNIFIED IDEOGRAPH
                                (#xDD7A . #x8F1F)	;CJK UNIFIED IDEOGRAPH
                                (#xDD7B . #x8F20)	;CJK UNIFIED IDEOGRAPH
                                (#xDD7C . #x8F21)	;CJK UNIFIED IDEOGRAPH
                                (#xDD7D . #x8F22)	;CJK UNIFIED IDEOGRAPH
                                (#xDD7E . #x8F23)	;CJK UNIFIED IDEOGRAPH
                                (#xDD80 . #x8F24)	;CJK UNIFIED IDEOGRAPH
                                (#xDD81 . #x8F25)	;CJK UNIFIED IDEOGRAPH
                                (#xDD82 . #x8F26)	;CJK UNIFIED IDEOGRAPH
                                (#xDD83 . #x8F27)	;CJK UNIFIED IDEOGRAPH
                                (#xDD84 . #x8F28)	;CJK UNIFIED IDEOGRAPH
                                (#xDD85 . #x8F29)	;CJK UNIFIED IDEOGRAPH
                                (#xDD86 . #x8F2A)	;CJK UNIFIED IDEOGRAPH
                                (#xDD87 . #x8F2B)	;CJK UNIFIED IDEOGRAPH
                                (#xDD88 . #x8F2C)	;CJK UNIFIED IDEOGRAPH
                                (#xDD89 . #x8F2D)	;CJK UNIFIED IDEOGRAPH
                                (#xDD8A . #x8F2E)	;CJK UNIFIED IDEOGRAPH
                                (#xDD8B . #x8F2F)	;CJK UNIFIED IDEOGRAPH
                                (#xDD8C . #x8F30)	;CJK UNIFIED IDEOGRAPH
                                (#xDD8D . #x8F31)	;CJK UNIFIED IDEOGRAPH
                                (#xDD8E . #x8F32)	;CJK UNIFIED IDEOGRAPH
                                (#xDD8F . #x8F33)	;CJK UNIFIED IDEOGRAPH
                                (#xDD90 . #x8F34)	;CJK UNIFIED IDEOGRAPH
                                (#xDD91 . #x8F35)	;CJK UNIFIED IDEOGRAPH
                                (#xDD92 . #x8F36)	;CJK UNIFIED IDEOGRAPH
                                (#xDD93 . #x8F37)	;CJK UNIFIED IDEOGRAPH
                                (#xDD94 . #x8F38)	;CJK UNIFIED IDEOGRAPH
                                (#xDD95 . #x8F39)	;CJK UNIFIED IDEOGRAPH
                                (#xDD96 . #x8F3A)	;CJK UNIFIED IDEOGRAPH
                                (#xDD97 . #x8F3B)	;CJK UNIFIED IDEOGRAPH
                                (#xDD98 . #x8F3C)	;CJK UNIFIED IDEOGRAPH
                                (#xDD99 . #x8F3D)	;CJK UNIFIED IDEOGRAPH
                                (#xDD9A . #x8F3E)	;CJK UNIFIED IDEOGRAPH
                                (#xDD9B . #x8F3F)	;CJK UNIFIED IDEOGRAPH
                                (#xDD9C . #x8F40)	;CJK UNIFIED IDEOGRAPH
                                (#xDD9D . #x8F41)	;CJK UNIFIED IDEOGRAPH
                                (#xDD9E . #x8F42)	;CJK UNIFIED IDEOGRAPH
                                (#xDD9F . #x8F43)	;CJK UNIFIED IDEOGRAPH
                                (#xDDA0 . #x8F44)	;CJK UNIFIED IDEOGRAPH
                                (#xDDA1 . #x8368)	;CJK UNIFIED IDEOGRAPH
                                (#xDDA2 . #x831B)	;CJK UNIFIED IDEOGRAPH
                                (#xDDA3 . #x8369)	;CJK UNIFIED IDEOGRAPH
                                (#xDDA4 . #x836C)	;CJK UNIFIED IDEOGRAPH
                                (#xDDA5 . #x836A)	;CJK UNIFIED IDEOGRAPH
                                (#xDDA6 . #x836D)	;CJK UNIFIED IDEOGRAPH
                                (#xDDA7 . #x836E)	;CJK UNIFIED IDEOGRAPH
                                (#xDDA8 . #x83B0)	;CJK UNIFIED IDEOGRAPH
                                (#xDDA9 . #x8378)	;CJK UNIFIED IDEOGRAPH
                                (#xDDAA . #x83B3)	;CJK UNIFIED IDEOGRAPH
                                (#xDDAB . #x83B4)	;CJK UNIFIED IDEOGRAPH
                                (#xDDAC . #x83A0)	;CJK UNIFIED IDEOGRAPH
                                (#xDDAD . #x83AA)	;CJK UNIFIED IDEOGRAPH
                                (#xDDAE . #x8393)	;CJK UNIFIED IDEOGRAPH
                                (#xDDAF . #x839C)	;CJK UNIFIED IDEOGRAPH
                                (#xDDB0 . #x8385)	;CJK UNIFIED IDEOGRAPH
                                (#xDDB1 . #x837C)	;CJK UNIFIED IDEOGRAPH
                                (#xDDB2 . #x83B6)	;CJK UNIFIED IDEOGRAPH
                                (#xDDB3 . #x83A9)	;CJK UNIFIED IDEOGRAPH
                                (#xDDB4 . #x837D)	;CJK UNIFIED IDEOGRAPH
                                (#xDDB5 . #x83B8)	;CJK UNIFIED IDEOGRAPH
                                (#xDDB6 . #x837B)	;CJK UNIFIED IDEOGRAPH
                                (#xDDB7 . #x8398)	;CJK UNIFIED IDEOGRAPH
                                (#xDDB8 . #x839E)	;CJK UNIFIED IDEOGRAPH
                                (#xDDB9 . #x83A8)	;CJK UNIFIED IDEOGRAPH
                                (#xDDBA . #x83BA)	;CJK UNIFIED IDEOGRAPH
                                (#xDDBB . #x83BC)	;CJK UNIFIED IDEOGRAPH
                                (#xDDBC . #x83C1)	;CJK UNIFIED IDEOGRAPH
                                (#xDDBD . #x8401)	;CJK UNIFIED IDEOGRAPH
                                (#xDDBE . #x83E5)	;CJK UNIFIED IDEOGRAPH
                                (#xDDBF . #x83D8)	;CJK UNIFIED IDEOGRAPH
                                (#xDDC0 . #x5807)	;CJK UNIFIED IDEOGRAPH
                                (#xDDC1 . #x8418)	;CJK UNIFIED IDEOGRAPH
                                (#xDDC2 . #x840B)	;CJK UNIFIED IDEOGRAPH
                                (#xDDC3 . #x83DD)	;CJK UNIFIED IDEOGRAPH
                                (#xDDC4 . #x83FD)	;CJK UNIFIED IDEOGRAPH
                                (#xDDC5 . #x83D6)	;CJK UNIFIED IDEOGRAPH
                                (#xDDC6 . #x841C)	;CJK UNIFIED IDEOGRAPH
                                (#xDDC7 . #x8438)	;CJK UNIFIED IDEOGRAPH
                                (#xDDC8 . #x8411)	;CJK UNIFIED IDEOGRAPH
                                (#xDDC9 . #x8406)	;CJK UNIFIED IDEOGRAPH
                                (#xDDCA . #x83D4)	;CJK UNIFIED IDEOGRAPH
                                (#xDDCB . #x83DF)	;CJK UNIFIED IDEOGRAPH
                                (#xDDCC . #x840F)	;CJK UNIFIED IDEOGRAPH
                                (#xDDCD . #x8403)	;CJK UNIFIED IDEOGRAPH
                                (#xDDCE . #x83F8)	;CJK UNIFIED IDEOGRAPH
                                (#xDDCF . #x83F9)	;CJK UNIFIED IDEOGRAPH
                                (#xDDD0 . #x83EA)	;CJK UNIFIED IDEOGRAPH
                                (#xDDD1 . #x83C5)	;CJK UNIFIED IDEOGRAPH
                                (#xDDD2 . #x83C0)	;CJK UNIFIED IDEOGRAPH
                                (#xDDD3 . #x8426)	;CJK UNIFIED IDEOGRAPH
                                (#xDDD4 . #x83F0)	;CJK UNIFIED IDEOGRAPH
                                (#xDDD5 . #x83E1)	;CJK UNIFIED IDEOGRAPH
                                (#xDDD6 . #x845C)	;CJK UNIFIED IDEOGRAPH
                                (#xDDD7 . #x8451)	;CJK UNIFIED IDEOGRAPH
                                (#xDDD8 . #x845A)	;CJK UNIFIED IDEOGRAPH
                                (#xDDD9 . #x8459)	;CJK UNIFIED IDEOGRAPH
                                (#xDDDA . #x8473)	;CJK UNIFIED IDEOGRAPH
                                (#xDDDB . #x8487)	;CJK UNIFIED IDEOGRAPH
                                (#xDDDC . #x8488)	;CJK UNIFIED IDEOGRAPH
                                (#xDDDD . #x847A)	;CJK UNIFIED IDEOGRAPH
                                (#xDDDE . #x8489)	;CJK UNIFIED IDEOGRAPH
                                (#xDDDF . #x8478)	;CJK UNIFIED IDEOGRAPH
                                (#xDDE0 . #x843C)	;CJK UNIFIED IDEOGRAPH
                                (#xDDE1 . #x8446)	;CJK UNIFIED IDEOGRAPH
                                (#xDDE2 . #x8469)	;CJK UNIFIED IDEOGRAPH
                                (#xDDE3 . #x8476)	;CJK UNIFIED IDEOGRAPH
                                (#xDDE4 . #x848C)	;CJK UNIFIED IDEOGRAPH
                                (#xDDE5 . #x848E)	;CJK UNIFIED IDEOGRAPH
                                (#xDDE6 . #x8431)	;CJK UNIFIED IDEOGRAPH
                                (#xDDE7 . #x846D)	;CJK UNIFIED IDEOGRAPH
                                (#xDDE8 . #x84C1)	;CJK UNIFIED IDEOGRAPH
                                (#xDDE9 . #x84CD)	;CJK UNIFIED IDEOGRAPH
                                (#xDDEA . #x84D0)	;CJK UNIFIED IDEOGRAPH
                                (#xDDEB . #x84E6)	;CJK UNIFIED IDEOGRAPH
                                (#xDDEC . #x84BD)	;CJK UNIFIED IDEOGRAPH
                                (#xDDED . #x84D3)	;CJK UNIFIED IDEOGRAPH
                                (#xDDEE . #x84CA)	;CJK UNIFIED IDEOGRAPH
                                (#xDDEF . #x84BF)	;CJK UNIFIED IDEOGRAPH
                                (#xDDF0 . #x84BA)	;CJK UNIFIED IDEOGRAPH
                                (#xDDF1 . #x84E0)	;CJK UNIFIED IDEOGRAPH
                                (#xDDF2 . #x84A1)	;CJK UNIFIED IDEOGRAPH
                                (#xDDF3 . #x84B9)	;CJK UNIFIED IDEOGRAPH
                                (#xDDF4 . #x84B4)	;CJK UNIFIED IDEOGRAPH
                                (#xDDF5 . #x8497)	;CJK UNIFIED IDEOGRAPH
                                (#xDDF6 . #x84E5)	;CJK UNIFIED IDEOGRAPH
                                (#xDDF7 . #x84E3)	;CJK UNIFIED IDEOGRAPH
                                (#xDDF8 . #x850C)	;CJK UNIFIED IDEOGRAPH
                                (#xDDF9 . #x750D)	;CJK UNIFIED IDEOGRAPH
                                (#xDDFA . #x8538)	;CJK UNIFIED IDEOGRAPH
                                (#xDDFB . #x84F0)	;CJK UNIFIED IDEOGRAPH
                                (#xDDFC . #x8539)	;CJK UNIFIED IDEOGRAPH
                                (#xDDFD . #x851F)	;CJK UNIFIED IDEOGRAPH
                                (#xDDFE . #x853A)	;CJK UNIFIED IDEOGRAPH
                                (#xDE40 . #x8F45)	;CJK UNIFIED IDEOGRAPH
                                (#xDE41 . #x8F46)	;CJK UNIFIED IDEOGRAPH
                                (#xDE42 . #x8F47)	;CJK UNIFIED IDEOGRAPH
                                (#xDE43 . #x8F48)	;CJK UNIFIED IDEOGRAPH
                                (#xDE44 . #x8F49)	;CJK UNIFIED IDEOGRAPH
                                (#xDE45 . #x8F4A)	;CJK UNIFIED IDEOGRAPH
                                (#xDE46 . #x8F4B)	;CJK UNIFIED IDEOGRAPH
                                (#xDE47 . #x8F4C)	;CJK UNIFIED IDEOGRAPH
                                (#xDE48 . #x8F4D)	;CJK UNIFIED IDEOGRAPH
                                (#xDE49 . #x8F4E)	;CJK UNIFIED IDEOGRAPH
                                (#xDE4A . #x8F4F)	;CJK UNIFIED IDEOGRAPH
                                (#xDE4B . #x8F50)	;CJK UNIFIED IDEOGRAPH
                                (#xDE4C . #x8F51)	;CJK UNIFIED IDEOGRAPH
                                (#xDE4D . #x8F52)	;CJK UNIFIED IDEOGRAPH
                                (#xDE4E . #x8F53)	;CJK UNIFIED IDEOGRAPH
                                (#xDE4F . #x8F54)	;CJK UNIFIED IDEOGRAPH
                                (#xDE50 . #x8F55)	;CJK UNIFIED IDEOGRAPH
                                (#xDE51 . #x8F56)	;CJK UNIFIED IDEOGRAPH
                                (#xDE52 . #x8F57)	;CJK UNIFIED IDEOGRAPH
                                (#xDE53 . #x8F58)	;CJK UNIFIED IDEOGRAPH
                                (#xDE54 . #x8F59)	;CJK UNIFIED IDEOGRAPH
                                (#xDE55 . #x8F5A)	;CJK UNIFIED IDEOGRAPH
                                (#xDE56 . #x8F5B)	;CJK UNIFIED IDEOGRAPH
                                (#xDE57 . #x8F5C)	;CJK UNIFIED IDEOGRAPH
                                (#xDE58 . #x8F5D)	;CJK UNIFIED IDEOGRAPH
                                (#xDE59 . #x8F5E)	;CJK UNIFIED IDEOGRAPH
                                (#xDE5A . #x8F5F)	;CJK UNIFIED IDEOGRAPH
                                (#xDE5B . #x8F60)	;CJK UNIFIED IDEOGRAPH
                                (#xDE5C . #x8F61)	;CJK UNIFIED IDEOGRAPH
                                (#xDE5D . #x8F62)	;CJK UNIFIED IDEOGRAPH
                                (#xDE5E . #x8F63)	;CJK UNIFIED IDEOGRAPH
                                (#xDE5F . #x8F64)	;CJK UNIFIED IDEOGRAPH
                                (#xDE60 . #x8F65)	;CJK UNIFIED IDEOGRAPH
                                (#xDE61 . #x8F6A)	;CJK UNIFIED IDEOGRAPH
                                (#xDE62 . #x8F80)	;CJK UNIFIED IDEOGRAPH
                                (#xDE63 . #x8F8C)	;CJK UNIFIED IDEOGRAPH
                                (#xDE64 . #x8F92)	;CJK UNIFIED IDEOGRAPH
                                (#xDE65 . #x8F9D)	;CJK UNIFIED IDEOGRAPH
                                (#xDE66 . #x8FA0)	;CJK UNIFIED IDEOGRAPH
                                (#xDE67 . #x8FA1)	;CJK UNIFIED IDEOGRAPH
                                (#xDE68 . #x8FA2)	;CJK UNIFIED IDEOGRAPH
                                (#xDE69 . #x8FA4)	;CJK UNIFIED IDEOGRAPH
                                (#xDE6A . #x8FA5)	;CJK UNIFIED IDEOGRAPH
                                (#xDE6B . #x8FA6)	;CJK UNIFIED IDEOGRAPH
                                (#xDE6C . #x8FA7)	;CJK UNIFIED IDEOGRAPH
                                (#xDE6D . #x8FAA)	;CJK UNIFIED IDEOGRAPH
                                (#xDE6E . #x8FAC)	;CJK UNIFIED IDEOGRAPH
                                (#xDE6F . #x8FAD)	;CJK UNIFIED IDEOGRAPH
                                (#xDE70 . #x8FAE)	;CJK UNIFIED IDEOGRAPH
                                (#xDE71 . #x8FAF)	;CJK UNIFIED IDEOGRAPH
                                (#xDE72 . #x8FB2)	;CJK UNIFIED IDEOGRAPH
                                (#xDE73 . #x8FB3)	;CJK UNIFIED IDEOGRAPH
                                (#xDE74 . #x8FB4)	;CJK UNIFIED IDEOGRAPH
                                (#xDE75 . #x8FB5)	;CJK UNIFIED IDEOGRAPH
                                (#xDE76 . #x8FB7)	;CJK UNIFIED IDEOGRAPH
                                (#xDE77 . #x8FB8)	;CJK UNIFIED IDEOGRAPH
                                (#xDE78 . #x8FBA)	;CJK UNIFIED IDEOGRAPH
                                (#xDE79 . #x8FBB)	;CJK UNIFIED IDEOGRAPH
                                (#xDE7A . #x8FBC)	;CJK UNIFIED IDEOGRAPH
                                (#xDE7B . #x8FBF)	;CJK UNIFIED IDEOGRAPH
                                (#xDE7C . #x8FC0)	;CJK UNIFIED IDEOGRAPH
                                (#xDE7D . #x8FC3)	;CJK UNIFIED IDEOGRAPH
                                (#xDE7E . #x8FC6)	;CJK UNIFIED IDEOGRAPH
                                (#xDE80 . #x8FC9)	;CJK UNIFIED IDEOGRAPH
                                (#xDE81 . #x8FCA)	;CJK UNIFIED IDEOGRAPH
                                (#xDE82 . #x8FCB)	;CJK UNIFIED IDEOGRAPH
                                (#xDE83 . #x8FCC)	;CJK UNIFIED IDEOGRAPH
                                (#xDE84 . #x8FCD)	;CJK UNIFIED IDEOGRAPH
                                (#xDE85 . #x8FCF)	;CJK UNIFIED IDEOGRAPH
                                (#xDE86 . #x8FD2)	;CJK UNIFIED IDEOGRAPH
                                (#xDE87 . #x8FD6)	;CJK UNIFIED IDEOGRAPH
                                (#xDE88 . #x8FD7)	;CJK UNIFIED IDEOGRAPH
                                (#xDE89 . #x8FDA)	;CJK UNIFIED IDEOGRAPH
                                (#xDE8A . #x8FE0)	;CJK UNIFIED IDEOGRAPH
                                (#xDE8B . #x8FE1)	;CJK UNIFIED IDEOGRAPH
                                (#xDE8C . #x8FE3)	;CJK UNIFIED IDEOGRAPH
                                (#xDE8D . #x8FE7)	;CJK UNIFIED IDEOGRAPH
                                (#xDE8E . #x8FEC)	;CJK UNIFIED IDEOGRAPH
                                (#xDE8F . #x8FEF)	;CJK UNIFIED IDEOGRAPH
                                (#xDE90 . #x8FF1)	;CJK UNIFIED IDEOGRAPH
                                (#xDE91 . #x8FF2)	;CJK UNIFIED IDEOGRAPH
                                (#xDE92 . #x8FF4)	;CJK UNIFIED IDEOGRAPH
                                (#xDE93 . #x8FF5)	;CJK UNIFIED IDEOGRAPH
                                (#xDE94 . #x8FF6)	;CJK UNIFIED IDEOGRAPH
                                (#xDE95 . #x8FFA)	;CJK UNIFIED IDEOGRAPH
                                (#xDE96 . #x8FFB)	;CJK UNIFIED IDEOGRAPH
                                (#xDE97 . #x8FFC)	;CJK UNIFIED IDEOGRAPH
                                (#xDE98 . #x8FFE)	;CJK UNIFIED IDEOGRAPH
                                (#xDE99 . #x8FFF)	;CJK UNIFIED IDEOGRAPH
                                (#xDE9A . #x9007)	;CJK UNIFIED IDEOGRAPH
                                (#xDE9B . #x9008)	;CJK UNIFIED IDEOGRAPH
                                (#xDE9C . #x900C)	;CJK UNIFIED IDEOGRAPH
                                (#xDE9D . #x900E)	;CJK UNIFIED IDEOGRAPH
                                (#xDE9E . #x9013)	;CJK UNIFIED IDEOGRAPH
                                (#xDE9F . #x9015)	;CJK UNIFIED IDEOGRAPH
                                (#xDEA0 . #x9018)	;CJK UNIFIED IDEOGRAPH
                                (#xDEA1 . #x8556)	;CJK UNIFIED IDEOGRAPH
                                (#xDEA2 . #x853B)	;CJK UNIFIED IDEOGRAPH
                                (#xDEA3 . #x84FF)	;CJK UNIFIED IDEOGRAPH
                                (#xDEA4 . #x84FC)	;CJK UNIFIED IDEOGRAPH
                                (#xDEA5 . #x8559)	;CJK UNIFIED IDEOGRAPH
                                (#xDEA6 . #x8548)	;CJK UNIFIED IDEOGRAPH
                                (#xDEA7 . #x8568)	;CJK UNIFIED IDEOGRAPH
                                (#xDEA8 . #x8564)	;CJK UNIFIED IDEOGRAPH
                                (#xDEA9 . #x855E)	;CJK UNIFIED IDEOGRAPH
                                (#xDEAA . #x857A)	;CJK UNIFIED IDEOGRAPH
                                (#xDEAB . #x77A2)	;CJK UNIFIED IDEOGRAPH
                                (#xDEAC . #x8543)	;CJK UNIFIED IDEOGRAPH
                                (#xDEAD . #x8572)	;CJK UNIFIED IDEOGRAPH
                                (#xDEAE . #x857B)	;CJK UNIFIED IDEOGRAPH
                                (#xDEAF . #x85A4)	;CJK UNIFIED IDEOGRAPH
                                (#xDEB0 . #x85A8)	;CJK UNIFIED IDEOGRAPH
                                (#xDEB1 . #x8587)	;CJK UNIFIED IDEOGRAPH
                                (#xDEB2 . #x858F)	;CJK UNIFIED IDEOGRAPH
                                (#xDEB3 . #x8579)	;CJK UNIFIED IDEOGRAPH
                                (#xDEB4 . #x85AE)	;CJK UNIFIED IDEOGRAPH
                                (#xDEB5 . #x859C)	;CJK UNIFIED IDEOGRAPH
                                (#xDEB6 . #x8585)	;CJK UNIFIED IDEOGRAPH
                                (#xDEB7 . #x85B9)	;CJK UNIFIED IDEOGRAPH
                                (#xDEB8 . #x85B7)	;CJK UNIFIED IDEOGRAPH
                                (#xDEB9 . #x85B0)	;CJK UNIFIED IDEOGRAPH
                                (#xDEBA . #x85D3)	;CJK UNIFIED IDEOGRAPH
                                (#xDEBB . #x85C1)	;CJK UNIFIED IDEOGRAPH
                                (#xDEBC . #x85DC)	;CJK UNIFIED IDEOGRAPH
                                (#xDEBD . #x85FF)	;CJK UNIFIED IDEOGRAPH
                                (#xDEBE . #x8627)	;CJK UNIFIED IDEOGRAPH
                                (#xDEBF . #x8605)	;CJK UNIFIED IDEOGRAPH
                                (#xDEC0 . #x8629)	;CJK UNIFIED IDEOGRAPH
                                (#xDEC1 . #x8616)	;CJK UNIFIED IDEOGRAPH
                                (#xDEC2 . #x863C)	;CJK UNIFIED IDEOGRAPH
                                (#xDEC3 . #x5EFE)	;CJK UNIFIED IDEOGRAPH
                                (#xDEC4 . #x5F08)	;CJK UNIFIED IDEOGRAPH
                                (#xDEC5 . #x593C)	;CJK UNIFIED IDEOGRAPH
                                (#xDEC6 . #x5941)	;CJK UNIFIED IDEOGRAPH
                                (#xDEC7 . #x8037)	;CJK UNIFIED IDEOGRAPH
                                (#xDEC8 . #x5955)	;CJK UNIFIED IDEOGRAPH
                                (#xDEC9 . #x595A)	;CJK UNIFIED IDEOGRAPH
                                (#xDECA . #x5958)	;CJK UNIFIED IDEOGRAPH
                                (#xDECB . #x530F)	;CJK UNIFIED IDEOGRAPH
                                (#xDECC . #x5C22)	;CJK UNIFIED IDEOGRAPH
                                (#xDECD . #x5C25)	;CJK UNIFIED IDEOGRAPH
                                (#xDECE . #x5C2C)	;CJK UNIFIED IDEOGRAPH
                                (#xDECF . #x5C34)	;CJK UNIFIED IDEOGRAPH
                                (#xDED0 . #x624C)	;CJK UNIFIED IDEOGRAPH
                                (#xDED1 . #x626A)	;CJK UNIFIED IDEOGRAPH
                                (#xDED2 . #x629F)	;CJK UNIFIED IDEOGRAPH
                                (#xDED3 . #x62BB)	;CJK UNIFIED IDEOGRAPH
                                (#xDED4 . #x62CA)	;CJK UNIFIED IDEOGRAPH
                                (#xDED5 . #x62DA)	;CJK UNIFIED IDEOGRAPH
                                (#xDED6 . #x62D7)	;CJK UNIFIED IDEOGRAPH
                                (#xDED7 . #x62EE)	;CJK UNIFIED IDEOGRAPH
                                (#xDED8 . #x6322)	;CJK UNIFIED IDEOGRAPH
                                (#xDED9 . #x62F6)	;CJK UNIFIED IDEOGRAPH
                                (#xDEDA . #x6339)	;CJK UNIFIED IDEOGRAPH
                                (#xDEDB . #x634B)	;CJK UNIFIED IDEOGRAPH
                                (#xDEDC . #x6343)	;CJK UNIFIED IDEOGRAPH
                                (#xDEDD . #x63AD)	;CJK UNIFIED IDEOGRAPH
                                (#xDEDE . #x63F6)	;CJK UNIFIED IDEOGRAPH
                                (#xDEDF . #x6371)	;CJK UNIFIED IDEOGRAPH
                                (#xDEE0 . #x637A)	;CJK UNIFIED IDEOGRAPH
                                (#xDEE1 . #x638E)	;CJK UNIFIED IDEOGRAPH
                                (#xDEE2 . #x63B4)	;CJK UNIFIED IDEOGRAPH
                                (#xDEE3 . #x636D)	;CJK UNIFIED IDEOGRAPH
                                (#xDEE4 . #x63AC)	;CJK UNIFIED IDEOGRAPH
                                (#xDEE5 . #x638A)	;CJK UNIFIED IDEOGRAPH
                                (#xDEE6 . #x6369)	;CJK UNIFIED IDEOGRAPH
                                (#xDEE7 . #x63AE)	;CJK UNIFIED IDEOGRAPH
                                (#xDEE8 . #x63BC)	;CJK UNIFIED IDEOGRAPH
                                (#xDEE9 . #x63F2)	;CJK UNIFIED IDEOGRAPH
                                (#xDEEA . #x63F8)	;CJK UNIFIED IDEOGRAPH
                                (#xDEEB . #x63E0)	;CJK UNIFIED IDEOGRAPH
                                (#xDEEC . #x63FF)	;CJK UNIFIED IDEOGRAPH
                                (#xDEED . #x63C4)	;CJK UNIFIED IDEOGRAPH
                                (#xDEEE . #x63DE)	;CJK UNIFIED IDEOGRAPH
                                (#xDEEF . #x63CE)	;CJK UNIFIED IDEOGRAPH
                                (#xDEF0 . #x6452)	;CJK UNIFIED IDEOGRAPH
                                (#xDEF1 . #x63C6)	;CJK UNIFIED IDEOGRAPH
                                (#xDEF2 . #x63BE)	;CJK UNIFIED IDEOGRAPH
                                (#xDEF3 . #x6445)	;CJK UNIFIED IDEOGRAPH
                                (#xDEF4 . #x6441)	;CJK UNIFIED IDEOGRAPH
                                (#xDEF5 . #x640B)	;CJK UNIFIED IDEOGRAPH
                                (#xDEF6 . #x641B)	;CJK UNIFIED IDEOGRAPH
                                (#xDEF7 . #x6420)	;CJK UNIFIED IDEOGRAPH
                                (#xDEF8 . #x640C)	;CJK UNIFIED IDEOGRAPH
                                (#xDEF9 . #x6426)	;CJK UNIFIED IDEOGRAPH
                                (#xDEFA . #x6421)	;CJK UNIFIED IDEOGRAPH
                                (#xDEFB . #x645E)	;CJK UNIFIED IDEOGRAPH
                                (#xDEFC . #x6484)	;CJK UNIFIED IDEOGRAPH
                                (#xDEFD . #x646D)	;CJK UNIFIED IDEOGRAPH
                                (#xDEFE . #x6496)	;CJK UNIFIED IDEOGRAPH
                                (#xDF40 . #x9019)	;CJK UNIFIED IDEOGRAPH
                                (#xDF41 . #x901C)	;CJK UNIFIED IDEOGRAPH
                                (#xDF42 . #x9023)	;CJK UNIFIED IDEOGRAPH
                                (#xDF43 . #x9024)	;CJK UNIFIED IDEOGRAPH
                                (#xDF44 . #x9025)	;CJK UNIFIED IDEOGRAPH
                                (#xDF45 . #x9027)	;CJK UNIFIED IDEOGRAPH
                                (#xDF46 . #x9028)	;CJK UNIFIED IDEOGRAPH
                                (#xDF47 . #x9029)	;CJK UNIFIED IDEOGRAPH
                                (#xDF48 . #x902A)	;CJK UNIFIED IDEOGRAPH
                                (#xDF49 . #x902B)	;CJK UNIFIED IDEOGRAPH
                                (#xDF4A . #x902C)	;CJK UNIFIED IDEOGRAPH
                                (#xDF4B . #x9030)	;CJK UNIFIED IDEOGRAPH
                                (#xDF4C . #x9031)	;CJK UNIFIED IDEOGRAPH
                                (#xDF4D . #x9032)	;CJK UNIFIED IDEOGRAPH
                                (#xDF4E . #x9033)	;CJK UNIFIED IDEOGRAPH
                                (#xDF4F . #x9034)	;CJK UNIFIED IDEOGRAPH
                                (#xDF50 . #x9037)	;CJK UNIFIED IDEOGRAPH
                                (#xDF51 . #x9039)	;CJK UNIFIED IDEOGRAPH
                                (#xDF52 . #x903A)	;CJK UNIFIED IDEOGRAPH
                                (#xDF53 . #x903D)	;CJK UNIFIED IDEOGRAPH
                                (#xDF54 . #x903F)	;CJK UNIFIED IDEOGRAPH
                                (#xDF55 . #x9040)	;CJK UNIFIED IDEOGRAPH
                                (#xDF56 . #x9043)	;CJK UNIFIED IDEOGRAPH
                                (#xDF57 . #x9045)	;CJK UNIFIED IDEOGRAPH
                                (#xDF58 . #x9046)	;CJK UNIFIED IDEOGRAPH
                                (#xDF59 . #x9048)	;CJK UNIFIED IDEOGRAPH
                                (#xDF5A . #x9049)	;CJK UNIFIED IDEOGRAPH
                                (#xDF5B . #x904A)	;CJK UNIFIED IDEOGRAPH
                                (#xDF5C . #x904B)	;CJK UNIFIED IDEOGRAPH
                                (#xDF5D . #x904C)	;CJK UNIFIED IDEOGRAPH
                                (#xDF5E . #x904E)	;CJK UNIFIED IDEOGRAPH
                                (#xDF5F . #x9054)	;CJK UNIFIED IDEOGRAPH
                                (#xDF60 . #x9055)	;CJK UNIFIED IDEOGRAPH
                                (#xDF61 . #x9056)	;CJK UNIFIED IDEOGRAPH
                                (#xDF62 . #x9059)	;CJK UNIFIED IDEOGRAPH
                                (#xDF63 . #x905A)	;CJK UNIFIED IDEOGRAPH
                                (#xDF64 . #x905C)	;CJK UNIFIED IDEOGRAPH
                                (#xDF65 . #x905D)	;CJK UNIFIED IDEOGRAPH
                                (#xDF66 . #x905E)	;CJK UNIFIED IDEOGRAPH
                                (#xDF67 . #x905F)	;CJK UNIFIED IDEOGRAPH
                                (#xDF68 . #x9060)	;CJK UNIFIED IDEOGRAPH
                                (#xDF69 . #x9061)	;CJK UNIFIED IDEOGRAPH
                                (#xDF6A . #x9064)	;CJK UNIFIED IDEOGRAPH
                                (#xDF6B . #x9066)	;CJK UNIFIED IDEOGRAPH
                                (#xDF6C . #x9067)	;CJK UNIFIED IDEOGRAPH
                                (#xDF6D . #x9069)	;CJK UNIFIED IDEOGRAPH
                                (#xDF6E . #x906A)	;CJK UNIFIED IDEOGRAPH
                                (#xDF6F . #x906B)	;CJK UNIFIED IDEOGRAPH
                                (#xDF70 . #x906C)	;CJK UNIFIED IDEOGRAPH
                                (#xDF71 . #x906F)	;CJK UNIFIED IDEOGRAPH
                                (#xDF72 . #x9070)	;CJK UNIFIED IDEOGRAPH
                                (#xDF73 . #x9071)	;CJK UNIFIED IDEOGRAPH
                                (#xDF74 . #x9072)	;CJK UNIFIED IDEOGRAPH
                                (#xDF75 . #x9073)	;CJK UNIFIED IDEOGRAPH
                                (#xDF76 . #x9076)	;CJK UNIFIED IDEOGRAPH
                                (#xDF77 . #x9077)	;CJK UNIFIED IDEOGRAPH
                                (#xDF78 . #x9078)	;CJK UNIFIED IDEOGRAPH
                                (#xDF79 . #x9079)	;CJK UNIFIED IDEOGRAPH
                                (#xDF7A . #x907A)	;CJK UNIFIED IDEOGRAPH
                                (#xDF7B . #x907B)	;CJK UNIFIED IDEOGRAPH
                                (#xDF7C . #x907C)	;CJK UNIFIED IDEOGRAPH
                                (#xDF7D . #x907E)	;CJK UNIFIED IDEOGRAPH
                                (#xDF7E . #x9081)	;CJK UNIFIED IDEOGRAPH
                                (#xDF80 . #x9084)	;CJK UNIFIED IDEOGRAPH
                                (#xDF81 . #x9085)	;CJK UNIFIED IDEOGRAPH
                                (#xDF82 . #x9086)	;CJK UNIFIED IDEOGRAPH
                                (#xDF83 . #x9087)	;CJK UNIFIED IDEOGRAPH
                                (#xDF84 . #x9089)	;CJK UNIFIED IDEOGRAPH
                                (#xDF85 . #x908A)	;CJK UNIFIED IDEOGRAPH
                                (#xDF86 . #x908C)	;CJK UNIFIED IDEOGRAPH
                                (#xDF87 . #x908D)	;CJK UNIFIED IDEOGRAPH
                                (#xDF88 . #x908E)	;CJK UNIFIED IDEOGRAPH
                                (#xDF89 . #x908F)	;CJK UNIFIED IDEOGRAPH
                                (#xDF8A . #x9090)	;CJK UNIFIED IDEOGRAPH
                                (#xDF8B . #x9092)	;CJK UNIFIED IDEOGRAPH
                                (#xDF8C . #x9094)	;CJK UNIFIED IDEOGRAPH
                                (#xDF8D . #x9096)	;CJK UNIFIED IDEOGRAPH
                                (#xDF8E . #x9098)	;CJK UNIFIED IDEOGRAPH
                                (#xDF8F . #x909A)	;CJK UNIFIED IDEOGRAPH
                                (#xDF90 . #x909C)	;CJK UNIFIED IDEOGRAPH
                                (#xDF91 . #x909E)	;CJK UNIFIED IDEOGRAPH
                                (#xDF92 . #x909F)	;CJK UNIFIED IDEOGRAPH
                                (#xDF93 . #x90A0)	;CJK UNIFIED IDEOGRAPH
                                (#xDF94 . #x90A4)	;CJK UNIFIED IDEOGRAPH
                                (#xDF95 . #x90A5)	;CJK UNIFIED IDEOGRAPH
                                (#xDF96 . #x90A7)	;CJK UNIFIED IDEOGRAPH
                                (#xDF97 . #x90A8)	;CJK UNIFIED IDEOGRAPH
                                (#xDF98 . #x90A9)	;CJK UNIFIED IDEOGRAPH
                                (#xDF99 . #x90AB)	;CJK UNIFIED IDEOGRAPH
                                (#xDF9A . #x90AD)	;CJK UNIFIED IDEOGRAPH
                                (#xDF9B . #x90B2)	;CJK UNIFIED IDEOGRAPH
                                (#xDF9C . #x90B7)	;CJK UNIFIED IDEOGRAPH
                                (#xDF9D . #x90BC)	;CJK UNIFIED IDEOGRAPH
                                (#xDF9E . #x90BD)	;CJK UNIFIED IDEOGRAPH
                                (#xDF9F . #x90BF)	;CJK UNIFIED IDEOGRAPH
                                (#xDFA0 . #x90C0)	;CJK UNIFIED IDEOGRAPH
                                (#xDFA1 . #x647A)	;CJK UNIFIED IDEOGRAPH
                                (#xDFA2 . #x64B7)	;CJK UNIFIED IDEOGRAPH
                                (#xDFA3 . #x64B8)	;CJK UNIFIED IDEOGRAPH
                                (#xDFA4 . #x6499)	;CJK UNIFIED IDEOGRAPH
                                (#xDFA5 . #x64BA)	;CJK UNIFIED IDEOGRAPH
                                (#xDFA6 . #x64C0)	;CJK UNIFIED IDEOGRAPH
                                (#xDFA7 . #x64D0)	;CJK UNIFIED IDEOGRAPH
                                (#xDFA8 . #x64D7)	;CJK UNIFIED IDEOGRAPH
                                (#xDFA9 . #x64E4)	;CJK UNIFIED IDEOGRAPH
                                (#xDFAA . #x64E2)	;CJK UNIFIED IDEOGRAPH
                                (#xDFAB . #x6509)	;CJK UNIFIED IDEOGRAPH
                                (#xDFAC . #x6525)	;CJK UNIFIED IDEOGRAPH
                                (#xDFAD . #x652E)	;CJK UNIFIED IDEOGRAPH
                                (#xDFAE . #x5F0B)	;CJK UNIFIED IDEOGRAPH
                                (#xDFAF . #x5FD2)	;CJK UNIFIED IDEOGRAPH
                                (#xDFB0 . #x7519)	;CJK UNIFIED IDEOGRAPH
                                (#xDFB1 . #x5F11)	;CJK UNIFIED IDEOGRAPH
                                (#xDFB2 . #x535F)	;CJK UNIFIED IDEOGRAPH
                                (#xDFB3 . #x53F1)	;CJK UNIFIED IDEOGRAPH
                                (#xDFB4 . #x53FD)	;CJK UNIFIED IDEOGRAPH
                                (#xDFB5 . #x53E9)	;CJK UNIFIED IDEOGRAPH
                                (#xDFB6 . #x53E8)	;CJK UNIFIED IDEOGRAPH
                                (#xDFB7 . #x53FB)	;CJK UNIFIED IDEOGRAPH
                                (#xDFB8 . #x5412)	;CJK UNIFIED IDEOGRAPH
                                (#xDFB9 . #x5416)	;CJK UNIFIED IDEOGRAPH
                                (#xDFBA . #x5406)	;CJK UNIFIED IDEOGRAPH
                                (#xDFBB . #x544B)	;CJK UNIFIED IDEOGRAPH
                                (#xDFBC . #x5452)	;CJK UNIFIED IDEOGRAPH
                                (#xDFBD . #x5453)	;CJK UNIFIED IDEOGRAPH
                                (#xDFBE . #x5454)	;CJK UNIFIED IDEOGRAPH
                                (#xDFBF . #x5456)	;CJK UNIFIED IDEOGRAPH
                                (#xDFC0 . #x5443)	;CJK UNIFIED IDEOGRAPH
                                (#xDFC1 . #x5421)	;CJK UNIFIED IDEOGRAPH
                                (#xDFC2 . #x5457)	;CJK UNIFIED IDEOGRAPH
                                (#xDFC3 . #x5459)	;CJK UNIFIED IDEOGRAPH
                                (#xDFC4 . #x5423)	;CJK UNIFIED IDEOGRAPH
                                (#xDFC5 . #x5432)	;CJK UNIFIED IDEOGRAPH
                                (#xDFC6 . #x5482)	;CJK UNIFIED IDEOGRAPH
                                (#xDFC7 . #x5494)	;CJK UNIFIED IDEOGRAPH
                                (#xDFC8 . #x5477)	;CJK UNIFIED IDEOGRAPH
                                (#xDFC9 . #x5471)	;CJK UNIFIED IDEOGRAPH
                                (#xDFCA . #x5464)	;CJK UNIFIED IDEOGRAPH
                                (#xDFCB . #x549A)	;CJK UNIFIED IDEOGRAPH
                                (#xDFCC . #x549B)	;CJK UNIFIED IDEOGRAPH
                                (#xDFCD . #x5484)	;CJK UNIFIED IDEOGRAPH
                                (#xDFCE . #x5476)	;CJK UNIFIED IDEOGRAPH
                                (#xDFCF . #x5466)	;CJK UNIFIED IDEOGRAPH
                                (#xDFD0 . #x549D)	;CJK UNIFIED IDEOGRAPH
                                (#xDFD1 . #x54D0)	;CJK UNIFIED IDEOGRAPH
                                (#xDFD2 . #x54AD)	;CJK UNIFIED IDEOGRAPH
                                (#xDFD3 . #x54C2)	;CJK UNIFIED IDEOGRAPH
                                (#xDFD4 . #x54B4)	;CJK UNIFIED IDEOGRAPH
                                (#xDFD5 . #x54D2)	;CJK UNIFIED IDEOGRAPH
                                (#xDFD6 . #x54A7)	;CJK UNIFIED IDEOGRAPH
                                (#xDFD7 . #x54A6)	;CJK UNIFIED IDEOGRAPH
                                (#xDFD8 . #x54D3)	;CJK UNIFIED IDEOGRAPH
                                (#xDFD9 . #x54D4)	;CJK UNIFIED IDEOGRAPH
                                (#xDFDA . #x5472)	;CJK UNIFIED IDEOGRAPH
                                (#xDFDB . #x54A3)	;CJK UNIFIED IDEOGRAPH
                                (#xDFDC . #x54D5)	;CJK UNIFIED IDEOGRAPH
                                (#xDFDD . #x54BB)	;CJK UNIFIED IDEOGRAPH
                                (#xDFDE . #x54BF)	;CJK UNIFIED IDEOGRAPH
                                (#xDFDF . #x54CC)	;CJK UNIFIED IDEOGRAPH
                                (#xDFE0 . #x54D9)	;CJK UNIFIED IDEOGRAPH
                                (#xDFE1 . #x54DA)	;CJK UNIFIED IDEOGRAPH
                                (#xDFE2 . #x54DC)	;CJK UNIFIED IDEOGRAPH
                                (#xDFE3 . #x54A9)	;CJK UNIFIED IDEOGRAPH
                                (#xDFE4 . #x54AA)	;CJK UNIFIED IDEOGRAPH
                                (#xDFE5 . #x54A4)	;CJK UNIFIED IDEOGRAPH
                                (#xDFE6 . #x54DD)	;CJK UNIFIED IDEOGRAPH
                                (#xDFE7 . #x54CF)	;CJK UNIFIED IDEOGRAPH
                                (#xDFE8 . #x54DE)	;CJK UNIFIED IDEOGRAPH
                                (#xDFE9 . #x551B)	;CJK UNIFIED IDEOGRAPH
                                (#xDFEA . #x54E7)	;CJK UNIFIED IDEOGRAPH
                                (#xDFEB . #x5520)	;CJK UNIFIED IDEOGRAPH
                                (#xDFEC . #x54FD)	;CJK UNIFIED IDEOGRAPH
                                (#xDFED . #x5514)	;CJK UNIFIED IDEOGRAPH
                                (#xDFEE . #x54F3)	;CJK UNIFIED IDEOGRAPH
                                (#xDFEF . #x5522)	;CJK UNIFIED IDEOGRAPH
                                (#xDFF0 . #x5523)	;CJK UNIFIED IDEOGRAPH
                                (#xDFF1 . #x550F)	;CJK UNIFIED IDEOGRAPH
                                (#xDFF2 . #x5511)	;CJK UNIFIED IDEOGRAPH
                                (#xDFF3 . #x5527)	;CJK UNIFIED IDEOGRAPH
                                (#xDFF4 . #x552A)	;CJK UNIFIED IDEOGRAPH
                                (#xDFF5 . #x5567)	;CJK UNIFIED IDEOGRAPH
                                (#xDFF6 . #x558F)	;CJK UNIFIED IDEOGRAPH
                                (#xDFF7 . #x55B5)	;CJK UNIFIED IDEOGRAPH
                                (#xDFF8 . #x5549)	;CJK UNIFIED IDEOGRAPH
                                (#xDFF9 . #x556D)	;CJK UNIFIED IDEOGRAPH
                                (#xDFFA . #x5541)	;CJK UNIFIED IDEOGRAPH
                                (#xDFFB . #x5555)	;CJK UNIFIED IDEOGRAPH
                                (#xDFFC . #x553F)	;CJK UNIFIED IDEOGRAPH
                                (#xDFFD . #x5550)	;CJK UNIFIED IDEOGRAPH
                                (#xDFFE . #x553C)	;CJK UNIFIED IDEOGRAPH
                                (#xE040 . #x90C2)	;CJK UNIFIED IDEOGRAPH
                                (#xE041 . #x90C3)	;CJK UNIFIED IDEOGRAPH
                                (#xE042 . #x90C6)	;CJK UNIFIED IDEOGRAPH
                                (#xE043 . #x90C8)	;CJK UNIFIED IDEOGRAPH
                                (#xE044 . #x90C9)	;CJK UNIFIED IDEOGRAPH
                                (#xE045 . #x90CB)	;CJK UNIFIED IDEOGRAPH
                                (#xE046 . #x90CC)	;CJK UNIFIED IDEOGRAPH
                                (#xE047 . #x90CD)	;CJK UNIFIED IDEOGRAPH
                                (#xE048 . #x90D2)	;CJK UNIFIED IDEOGRAPH
                                (#xE049 . #x90D4)	;CJK UNIFIED IDEOGRAPH
                                (#xE04A . #x90D5)	;CJK UNIFIED IDEOGRAPH
                                (#xE04B . #x90D6)	;CJK UNIFIED IDEOGRAPH
                                (#xE04C . #x90D8)	;CJK UNIFIED IDEOGRAPH
                                (#xE04D . #x90D9)	;CJK UNIFIED IDEOGRAPH
                                (#xE04E . #x90DA)	;CJK UNIFIED IDEOGRAPH
                                (#xE04F . #x90DE)	;CJK UNIFIED IDEOGRAPH
                                (#xE050 . #x90DF)	;CJK UNIFIED IDEOGRAPH
                                (#xE051 . #x90E0)	;CJK UNIFIED IDEOGRAPH
                                (#xE052 . #x90E3)	;CJK UNIFIED IDEOGRAPH
                                (#xE053 . #x90E4)	;CJK UNIFIED IDEOGRAPH
                                (#xE054 . #x90E5)	;CJK UNIFIED IDEOGRAPH
                                (#xE055 . #x90E9)	;CJK UNIFIED IDEOGRAPH
                                (#xE056 . #x90EA)	;CJK UNIFIED IDEOGRAPH
                                (#xE057 . #x90EC)	;CJK UNIFIED IDEOGRAPH
                                (#xE058 . #x90EE)	;CJK UNIFIED IDEOGRAPH
                                (#xE059 . #x90F0)	;CJK UNIFIED IDEOGRAPH
                                (#xE05A . #x90F1)	;CJK UNIFIED IDEOGRAPH
                                (#xE05B . #x90F2)	;CJK UNIFIED IDEOGRAPH
                                (#xE05C . #x90F3)	;CJK UNIFIED IDEOGRAPH
                                (#xE05D . #x90F5)	;CJK UNIFIED IDEOGRAPH
                                (#xE05E . #x90F6)	;CJK UNIFIED IDEOGRAPH
                                (#xE05F . #x90F7)	;CJK UNIFIED IDEOGRAPH
                                (#xE060 . #x90F9)	;CJK UNIFIED IDEOGRAPH
                                (#xE061 . #x90FA)	;CJK UNIFIED IDEOGRAPH
                                (#xE062 . #x90FB)	;CJK UNIFIED IDEOGRAPH
                                (#xE063 . #x90FC)	;CJK UNIFIED IDEOGRAPH
                                (#xE064 . #x90FF)	;CJK UNIFIED IDEOGRAPH
                                (#xE065 . #x9100)	;CJK UNIFIED IDEOGRAPH
                                (#xE066 . #x9101)	;CJK UNIFIED IDEOGRAPH
                                (#xE067 . #x9103)	;CJK UNIFIED IDEOGRAPH
                                (#xE068 . #x9105)	;CJK UNIFIED IDEOGRAPH
                                (#xE069 . #x9106)	;CJK UNIFIED IDEOGRAPH
                                (#xE06A . #x9107)	;CJK UNIFIED IDEOGRAPH
                                (#xE06B . #x9108)	;CJK UNIFIED IDEOGRAPH
                                (#xE06C . #x9109)	;CJK UNIFIED IDEOGRAPH
                                (#xE06D . #x910A)	;CJK UNIFIED IDEOGRAPH
                                (#xE06E . #x910B)	;CJK UNIFIED IDEOGRAPH
                                (#xE06F . #x910C)	;CJK UNIFIED IDEOGRAPH
                                (#xE070 . #x910D)	;CJK UNIFIED IDEOGRAPH
                                (#xE071 . #x910E)	;CJK UNIFIED IDEOGRAPH
                                (#xE072 . #x910F)	;CJK UNIFIED IDEOGRAPH
                                (#xE073 . #x9110)	;CJK UNIFIED IDEOGRAPH
                                (#xE074 . #x9111)	;CJK UNIFIED IDEOGRAPH
                                (#xE075 . #x9112)	;CJK UNIFIED IDEOGRAPH
                                (#xE076 . #x9113)	;CJK UNIFIED IDEOGRAPH
                                (#xE077 . #x9114)	;CJK UNIFIED IDEOGRAPH
                                (#xE078 . #x9115)	;CJK UNIFIED IDEOGRAPH
                                (#xE079 . #x9116)	;CJK UNIFIED IDEOGRAPH
                                (#xE07A . #x9117)	;CJK UNIFIED IDEOGRAPH
                                (#xE07B . #x9118)	;CJK UNIFIED IDEOGRAPH
                                (#xE07C . #x911A)	;CJK UNIFIED IDEOGRAPH
                                (#xE07D . #x911B)	;CJK UNIFIED IDEOGRAPH
                                (#xE07E . #x911C)	;CJK UNIFIED IDEOGRAPH
                                (#xE080 . #x911D)	;CJK UNIFIED IDEOGRAPH
                                (#xE081 . #x911F)	;CJK UNIFIED IDEOGRAPH
                                (#xE082 . #x9120)	;CJK UNIFIED IDEOGRAPH
                                (#xE083 . #x9121)	;CJK UNIFIED IDEOGRAPH
                                (#xE084 . #x9124)	;CJK UNIFIED IDEOGRAPH
                                (#xE085 . #x9125)	;CJK UNIFIED IDEOGRAPH
                                (#xE086 . #x9126)	;CJK UNIFIED IDEOGRAPH
                                (#xE087 . #x9127)	;CJK UNIFIED IDEOGRAPH
                                (#xE088 . #x9128)	;CJK UNIFIED IDEOGRAPH
                                (#xE089 . #x9129)	;CJK UNIFIED IDEOGRAPH
                                (#xE08A . #x912A)	;CJK UNIFIED IDEOGRAPH
                                (#xE08B . #x912B)	;CJK UNIFIED IDEOGRAPH
                                (#xE08C . #x912C)	;CJK UNIFIED IDEOGRAPH
                                (#xE08D . #x912D)	;CJK UNIFIED IDEOGRAPH
                                (#xE08E . #x912E)	;CJK UNIFIED IDEOGRAPH
                                (#xE08F . #x9130)	;CJK UNIFIED IDEOGRAPH
                                (#xE090 . #x9132)	;CJK UNIFIED IDEOGRAPH
                                (#xE091 . #x9133)	;CJK UNIFIED IDEOGRAPH
                                (#xE092 . #x9134)	;CJK UNIFIED IDEOGRAPH
                                (#xE093 . #x9135)	;CJK UNIFIED IDEOGRAPH
                                (#xE094 . #x9136)	;CJK UNIFIED IDEOGRAPH
                                (#xE095 . #x9137)	;CJK UNIFIED IDEOGRAPH
                                (#xE096 . #x9138)	;CJK UNIFIED IDEOGRAPH
                                (#xE097 . #x913A)	;CJK UNIFIED IDEOGRAPH
                                (#xE098 . #x913B)	;CJK UNIFIED IDEOGRAPH
                                (#xE099 . #x913C)	;CJK UNIFIED IDEOGRAPH
                                (#xE09A . #x913D)	;CJK UNIFIED IDEOGRAPH
                                (#xE09B . #x913E)	;CJK UNIFIED IDEOGRAPH
                                (#xE09C . #x913F)	;CJK UNIFIED IDEOGRAPH
                                (#xE09D . #x9140)	;CJK UNIFIED IDEOGRAPH
                                (#xE09E . #x9141)	;CJK UNIFIED IDEOGRAPH
                                (#xE09F . #x9142)	;CJK UNIFIED IDEOGRAPH
                                (#xE0A0 . #x9144)	;CJK UNIFIED IDEOGRAPH
                                (#xE0A1 . #x5537)	;CJK UNIFIED IDEOGRAPH
                                (#xE0A2 . #x5556)	;CJK UNIFIED IDEOGRAPH
                                (#xE0A3 . #x5575)	;CJK UNIFIED IDEOGRAPH
                                (#xE0A4 . #x5576)	;CJK UNIFIED IDEOGRAPH
                                (#xE0A5 . #x5577)	;CJK UNIFIED IDEOGRAPH
                                (#xE0A6 . #x5533)	;CJK UNIFIED IDEOGRAPH
                                (#xE0A7 . #x5530)	;CJK UNIFIED IDEOGRAPH
                                (#xE0A8 . #x555C)	;CJK UNIFIED IDEOGRAPH
                                (#xE0A9 . #x558B)	;CJK UNIFIED IDEOGRAPH
                                (#xE0AA . #x55D2)	;CJK UNIFIED IDEOGRAPH
                                (#xE0AB . #x5583)	;CJK UNIFIED IDEOGRAPH
                                (#xE0AC . #x55B1)	;CJK UNIFIED IDEOGRAPH
                                (#xE0AD . #x55B9)	;CJK UNIFIED IDEOGRAPH
                                (#xE0AE . #x5588)	;CJK UNIFIED IDEOGRAPH
                                (#xE0AF . #x5581)	;CJK UNIFIED IDEOGRAPH
                                (#xE0B0 . #x559F)	;CJK UNIFIED IDEOGRAPH
                                (#xE0B1 . #x557E)	;CJK UNIFIED IDEOGRAPH
                                (#xE0B2 . #x55D6)	;CJK UNIFIED IDEOGRAPH
                                (#xE0B3 . #x5591)	;CJK UNIFIED IDEOGRAPH
                                (#xE0B4 . #x557B)	;CJK UNIFIED IDEOGRAPH
                                (#xE0B5 . #x55DF)	;CJK UNIFIED IDEOGRAPH
                                (#xE0B6 . #x55BD)	;CJK UNIFIED IDEOGRAPH
                                (#xE0B7 . #x55BE)	;CJK UNIFIED IDEOGRAPH
                                (#xE0B8 . #x5594)	;CJK UNIFIED IDEOGRAPH
                                (#xE0B9 . #x5599)	;CJK UNIFIED IDEOGRAPH
                                (#xE0BA . #x55EA)	;CJK UNIFIED IDEOGRAPH
                                (#xE0BB . #x55F7)	;CJK UNIFIED IDEOGRAPH
                                (#xE0BC . #x55C9)	;CJK UNIFIED IDEOGRAPH
                                (#xE0BD . #x561F)	;CJK UNIFIED IDEOGRAPH
                                (#xE0BE . #x55D1)	;CJK UNIFIED IDEOGRAPH
                                (#xE0BF . #x55EB)	;CJK UNIFIED IDEOGRAPH
                                (#xE0C0 . #x55EC)	;CJK UNIFIED IDEOGRAPH
                                (#xE0C1 . #x55D4)	;CJK UNIFIED IDEOGRAPH
                                (#xE0C2 . #x55E6)	;CJK UNIFIED IDEOGRAPH
                                (#xE0C3 . #x55DD)	;CJK UNIFIED IDEOGRAPH
                                (#xE0C4 . #x55C4)	;CJK UNIFIED IDEOGRAPH
                                (#xE0C5 . #x55EF)	;CJK UNIFIED IDEOGRAPH
                                (#xE0C6 . #x55E5)	;CJK UNIFIED IDEOGRAPH
                                (#xE0C7 . #x55F2)	;CJK UNIFIED IDEOGRAPH
                                (#xE0C8 . #x55F3)	;CJK UNIFIED IDEOGRAPH
                                (#xE0C9 . #x55CC)	;CJK UNIFIED IDEOGRAPH
                                (#xE0CA . #x55CD)	;CJK UNIFIED IDEOGRAPH
                                (#xE0CB . #x55E8)	;CJK UNIFIED IDEOGRAPH
                                (#xE0CC . #x55F5)	;CJK UNIFIED IDEOGRAPH
                                (#xE0CD . #x55E4)	;CJK UNIFIED IDEOGRAPH
                                (#xE0CE . #x8F94)	;CJK UNIFIED IDEOGRAPH
                                (#xE0CF . #x561E)	;CJK UNIFIED IDEOGRAPH
                                (#xE0D0 . #x5608)	;CJK UNIFIED IDEOGRAPH
                                (#xE0D1 . #x560C)	;CJK UNIFIED IDEOGRAPH
                                (#xE0D2 . #x5601)	;CJK UNIFIED IDEOGRAPH
                                (#xE0D3 . #x5624)	;CJK UNIFIED IDEOGRAPH
                                (#xE0D4 . #x5623)	;CJK UNIFIED IDEOGRAPH
                                (#xE0D5 . #x55FE)	;CJK UNIFIED IDEOGRAPH
                                (#xE0D6 . #x5600)	;CJK UNIFIED IDEOGRAPH
                                (#xE0D7 . #x5627)	;CJK UNIFIED IDEOGRAPH
                                (#xE0D8 . #x562D)	;CJK UNIFIED IDEOGRAPH
                                (#xE0D9 . #x5658)	;CJK UNIFIED IDEOGRAPH
                                (#xE0DA . #x5639)	;CJK UNIFIED IDEOGRAPH
                                (#xE0DB . #x5657)	;CJK UNIFIED IDEOGRAPH
                                (#xE0DC . #x562C)	;CJK UNIFIED IDEOGRAPH
                                (#xE0DD . #x564D)	;CJK UNIFIED IDEOGRAPH
                                (#xE0DE . #x5662)	;CJK UNIFIED IDEOGRAPH
                                (#xE0DF . #x5659)	;CJK UNIFIED IDEOGRAPH
                                (#xE0E0 . #x565C)	;CJK UNIFIED IDEOGRAPH
                                (#xE0E1 . #x564C)	;CJK UNIFIED IDEOGRAPH
                                (#xE0E2 . #x5654)	;CJK UNIFIED IDEOGRAPH
                                (#xE0E3 . #x5686)	;CJK UNIFIED IDEOGRAPH
                                (#xE0E4 . #x5664)	;CJK UNIFIED IDEOGRAPH
                                (#xE0E5 . #x5671)	;CJK UNIFIED IDEOGRAPH
                                (#xE0E6 . #x566B)	;CJK UNIFIED IDEOGRAPH
                                (#xE0E7 . #x567B)	;CJK UNIFIED IDEOGRAPH
                                (#xE0E8 . #x567C)	;CJK UNIFIED IDEOGRAPH
                                (#xE0E9 . #x5685)	;CJK UNIFIED IDEOGRAPH
                                (#xE0EA . #x5693)	;CJK UNIFIED IDEOGRAPH
                                (#xE0EB . #x56AF)	;CJK UNIFIED IDEOGRAPH
                                (#xE0EC . #x56D4)	;CJK UNIFIED IDEOGRAPH
                                (#xE0ED . #x56D7)	;CJK UNIFIED IDEOGRAPH
                                (#xE0EE . #x56DD)	;CJK UNIFIED IDEOGRAPH
                                (#xE0EF . #x56E1)	;CJK UNIFIED IDEOGRAPH
                                (#xE0F0 . #x56F5)	;CJK UNIFIED IDEOGRAPH
                                (#xE0F1 . #x56EB)	;CJK UNIFIED IDEOGRAPH
                                (#xE0F2 . #x56F9)	;CJK UNIFIED IDEOGRAPH
                                (#xE0F3 . #x56FF)	;CJK UNIFIED IDEOGRAPH
                                (#xE0F4 . #x5704)	;CJK UNIFIED IDEOGRAPH
                                (#xE0F5 . #x570A)	;CJK UNIFIED IDEOGRAPH
                                (#xE0F6 . #x5709)	;CJK UNIFIED IDEOGRAPH
                                (#xE0F7 . #x571C)	;CJK UNIFIED IDEOGRAPH
                                (#xE0F8 . #x5E0F)	;CJK UNIFIED IDEOGRAPH
                                (#xE0F9 . #x5E19)	;CJK UNIFIED IDEOGRAPH
                                (#xE0FA . #x5E14)	;CJK UNIFIED IDEOGRAPH
                                (#xE0FB . #x5E11)	;CJK UNIFIED IDEOGRAPH
                                (#xE0FC . #x5E31)	;CJK UNIFIED IDEOGRAPH
                                (#xE0FD . #x5E3B)	;CJK UNIFIED IDEOGRAPH
                                (#xE0FE . #x5E3C)	;CJK UNIFIED IDEOGRAPH
                                (#xE140 . #x9145)	;CJK UNIFIED IDEOGRAPH
                                (#xE141 . #x9147)	;CJK UNIFIED IDEOGRAPH
                                (#xE142 . #x9148)	;CJK UNIFIED IDEOGRAPH
                                (#xE143 . #x9151)	;CJK UNIFIED IDEOGRAPH
                                (#xE144 . #x9153)	;CJK UNIFIED IDEOGRAPH
                                (#xE145 . #x9154)	;CJK UNIFIED IDEOGRAPH
                                (#xE146 . #x9155)	;CJK UNIFIED IDEOGRAPH
                                (#xE147 . #x9156)	;CJK UNIFIED IDEOGRAPH
                                (#xE148 . #x9158)	;CJK UNIFIED IDEOGRAPH
                                (#xE149 . #x9159)	;CJK UNIFIED IDEOGRAPH
                                (#xE14A . #x915B)	;CJK UNIFIED IDEOGRAPH
                                (#xE14B . #x915C)	;CJK UNIFIED IDEOGRAPH
                                (#xE14C . #x915F)	;CJK UNIFIED IDEOGRAPH
                                (#xE14D . #x9160)	;CJK UNIFIED IDEOGRAPH
                                (#xE14E . #x9166)	;CJK UNIFIED IDEOGRAPH
                                (#xE14F . #x9167)	;CJK UNIFIED IDEOGRAPH
                                (#xE150 . #x9168)	;CJK UNIFIED IDEOGRAPH
                                (#xE151 . #x916B)	;CJK UNIFIED IDEOGRAPH
                                (#xE152 . #x916D)	;CJK UNIFIED IDEOGRAPH
                                (#xE153 . #x9173)	;CJK UNIFIED IDEOGRAPH
                                (#xE154 . #x917A)	;CJK UNIFIED IDEOGRAPH
                                (#xE155 . #x917B)	;CJK UNIFIED IDEOGRAPH
                                (#xE156 . #x917C)	;CJK UNIFIED IDEOGRAPH
                                (#xE157 . #x9180)	;CJK UNIFIED IDEOGRAPH
                                (#xE158 . #x9181)	;CJK UNIFIED IDEOGRAPH
                                (#xE159 . #x9182)	;CJK UNIFIED IDEOGRAPH
                                (#xE15A . #x9183)	;CJK UNIFIED IDEOGRAPH
                                (#xE15B . #x9184)	;CJK UNIFIED IDEOGRAPH
                                (#xE15C . #x9186)	;CJK UNIFIED IDEOGRAPH
                                (#xE15D . #x9188)	;CJK UNIFIED IDEOGRAPH
                                (#xE15E . #x918A)	;CJK UNIFIED IDEOGRAPH
                                (#xE15F . #x918E)	;CJK UNIFIED IDEOGRAPH
                                (#xE160 . #x918F)	;CJK UNIFIED IDEOGRAPH
                                (#xE161 . #x9193)	;CJK UNIFIED IDEOGRAPH
                                (#xE162 . #x9194)	;CJK UNIFIED IDEOGRAPH
                                (#xE163 . #x9195)	;CJK UNIFIED IDEOGRAPH
                                (#xE164 . #x9196)	;CJK UNIFIED IDEOGRAPH
                                (#xE165 . #x9197)	;CJK UNIFIED IDEOGRAPH
                                (#xE166 . #x9198)	;CJK UNIFIED IDEOGRAPH
                                (#xE167 . #x9199)	;CJK UNIFIED IDEOGRAPH
                                (#xE168 . #x919C)	;CJK UNIFIED IDEOGRAPH
                                (#xE169 . #x919D)	;CJK UNIFIED IDEOGRAPH
                                (#xE16A . #x919E)	;CJK UNIFIED IDEOGRAPH
                                (#xE16B . #x919F)	;CJK UNIFIED IDEOGRAPH
                                (#xE16C . #x91A0)	;CJK UNIFIED IDEOGRAPH
                                (#xE16D . #x91A1)	;CJK UNIFIED IDEOGRAPH
                                (#xE16E . #x91A4)	;CJK UNIFIED IDEOGRAPH
                                (#xE16F . #x91A5)	;CJK UNIFIED IDEOGRAPH
                                (#xE170 . #x91A6)	;CJK UNIFIED IDEOGRAPH
                                (#xE171 . #x91A7)	;CJK UNIFIED IDEOGRAPH
                                (#xE172 . #x91A8)	;CJK UNIFIED IDEOGRAPH
                                (#xE173 . #x91A9)	;CJK UNIFIED IDEOGRAPH
                                (#xE174 . #x91AB)	;CJK UNIFIED IDEOGRAPH
                                (#xE175 . #x91AC)	;CJK UNIFIED IDEOGRAPH
                                (#xE176 . #x91B0)	;CJK UNIFIED IDEOGRAPH
                                (#xE177 . #x91B1)	;CJK UNIFIED IDEOGRAPH
                                (#xE178 . #x91B2)	;CJK UNIFIED IDEOGRAPH
                                (#xE179 . #x91B3)	;CJK UNIFIED IDEOGRAPH
                                (#xE17A . #x91B6)	;CJK UNIFIED IDEOGRAPH
                                (#xE17B . #x91B7)	;CJK UNIFIED IDEOGRAPH
                                (#xE17C . #x91B8)	;CJK UNIFIED IDEOGRAPH
                                (#xE17D . #x91B9)	;CJK UNIFIED IDEOGRAPH
                                (#xE17E . #x91BB)	;CJK UNIFIED IDEOGRAPH
                                (#xE180 . #x91BC)	;CJK UNIFIED IDEOGRAPH
                                (#xE181 . #x91BD)	;CJK UNIFIED IDEOGRAPH
                                (#xE182 . #x91BE)	;CJK UNIFIED IDEOGRAPH
                                (#xE183 . #x91BF)	;CJK UNIFIED IDEOGRAPH
                                (#xE184 . #x91C0)	;CJK UNIFIED IDEOGRAPH
                                (#xE185 . #x91C1)	;CJK UNIFIED IDEOGRAPH
                                (#xE186 . #x91C2)	;CJK UNIFIED IDEOGRAPH
                                (#xE187 . #x91C3)	;CJK UNIFIED IDEOGRAPH
                                (#xE188 . #x91C4)	;CJK UNIFIED IDEOGRAPH
                                (#xE189 . #x91C5)	;CJK UNIFIED IDEOGRAPH
                                (#xE18A . #x91C6)	;CJK UNIFIED IDEOGRAPH
                                (#xE18B . #x91C8)	;CJK UNIFIED IDEOGRAPH
                                (#xE18C . #x91CB)	;CJK UNIFIED IDEOGRAPH
                                (#xE18D . #x91D0)	;CJK UNIFIED IDEOGRAPH
                                (#xE18E . #x91D2)	;CJK UNIFIED IDEOGRAPH
                                (#xE18F . #x91D3)	;CJK UNIFIED IDEOGRAPH
                                (#xE190 . #x91D4)	;CJK UNIFIED IDEOGRAPH
                                (#xE191 . #x91D5)	;CJK UNIFIED IDEOGRAPH
                                (#xE192 . #x91D6)	;CJK UNIFIED IDEOGRAPH
                                (#xE193 . #x91D7)	;CJK UNIFIED IDEOGRAPH
                                (#xE194 . #x91D8)	;CJK UNIFIED IDEOGRAPH
                                (#xE195 . #x91D9)	;CJK UNIFIED IDEOGRAPH
                                (#xE196 . #x91DA)	;CJK UNIFIED IDEOGRAPH
                                (#xE197 . #x91DB)	;CJK UNIFIED IDEOGRAPH
                                (#xE198 . #x91DD)	;CJK UNIFIED IDEOGRAPH
                                (#xE199 . #x91DE)	;CJK UNIFIED IDEOGRAPH
                                (#xE19A . #x91DF)	;CJK UNIFIED IDEOGRAPH
                                (#xE19B . #x91E0)	;CJK UNIFIED IDEOGRAPH
                                (#xE19C . #x91E1)	;CJK UNIFIED IDEOGRAPH
                                (#xE19D . #x91E2)	;CJK UNIFIED IDEOGRAPH
                                (#xE19E . #x91E3)	;CJK UNIFIED IDEOGRAPH
                                (#xE19F . #x91E4)	;CJK UNIFIED IDEOGRAPH
                                (#xE1A0 . #x91E5)	;CJK UNIFIED IDEOGRAPH
                                (#xE1A1 . #x5E37)	;CJK UNIFIED IDEOGRAPH
                                (#xE1A2 . #x5E44)	;CJK UNIFIED IDEOGRAPH
                                (#xE1A3 . #x5E54)	;CJK UNIFIED IDEOGRAPH
                                (#xE1A4 . #x5E5B)	;CJK UNIFIED IDEOGRAPH
                                (#xE1A5 . #x5E5E)	;CJK UNIFIED IDEOGRAPH
                                (#xE1A6 . #x5E61)	;CJK UNIFIED IDEOGRAPH
                                (#xE1A7 . #x5C8C)	;CJK UNIFIED IDEOGRAPH
                                (#xE1A8 . #x5C7A)	;CJK UNIFIED IDEOGRAPH
                                (#xE1A9 . #x5C8D)	;CJK UNIFIED IDEOGRAPH
                                (#xE1AA . #x5C90)	;CJK UNIFIED IDEOGRAPH
                                (#xE1AB . #x5C96)	;CJK UNIFIED IDEOGRAPH
                                (#xE1AC . #x5C88)	;CJK UNIFIED IDEOGRAPH
                                (#xE1AD . #x5C98)	;CJK UNIFIED IDEOGRAPH
                                (#xE1AE . #x5C99)	;CJK UNIFIED IDEOGRAPH
                                (#xE1AF . #x5C91)	;CJK UNIFIED IDEOGRAPH
                                (#xE1B0 . #x5C9A)	;CJK UNIFIED IDEOGRAPH
                                (#xE1B1 . #x5C9C)	;CJK UNIFIED IDEOGRAPH
                                (#xE1B2 . #x5CB5)	;CJK UNIFIED IDEOGRAPH
                                (#xE1B3 . #x5CA2)	;CJK UNIFIED IDEOGRAPH
                                (#xE1B4 . #x5CBD)	;CJK UNIFIED IDEOGRAPH
                                (#xE1B5 . #x5CAC)	;CJK UNIFIED IDEOGRAPH
                                (#xE1B6 . #x5CAB)	;CJK UNIFIED IDEOGRAPH
                                (#xE1B7 . #x5CB1)	;CJK UNIFIED IDEOGRAPH
                                (#xE1B8 . #x5CA3)	;CJK UNIFIED IDEOGRAPH
                                (#xE1B9 . #x5CC1)	;CJK UNIFIED IDEOGRAPH
                                (#xE1BA . #x5CB7)	;CJK UNIFIED IDEOGRAPH
                                (#xE1BB . #x5CC4)	;CJK UNIFIED IDEOGRAPH
                                (#xE1BC . #x5CD2)	;CJK UNIFIED IDEOGRAPH
                                (#xE1BD . #x5CE4)	;CJK UNIFIED IDEOGRAPH
                                (#xE1BE . #x5CCB)	;CJK UNIFIED IDEOGRAPH
                                (#xE1BF . #x5CE5)	;CJK UNIFIED IDEOGRAPH
                                (#xE1C0 . #x5D02)	;CJK UNIFIED IDEOGRAPH
                                (#xE1C1 . #x5D03)	;CJK UNIFIED IDEOGRAPH
                                (#xE1C2 . #x5D27)	;CJK UNIFIED IDEOGRAPH
                                (#xE1C3 . #x5D26)	;CJK UNIFIED IDEOGRAPH
                                (#xE1C4 . #x5D2E)	;CJK UNIFIED IDEOGRAPH
                                (#xE1C5 . #x5D24)	;CJK UNIFIED IDEOGRAPH
                                (#xE1C6 . #x5D1E)	;CJK UNIFIED IDEOGRAPH
                                (#xE1C7 . #x5D06)	;CJK UNIFIED IDEOGRAPH
                                (#xE1C8 . #x5D1B)	;CJK UNIFIED IDEOGRAPH
                                (#xE1C9 . #x5D58)	;CJK UNIFIED IDEOGRAPH
                                (#xE1CA . #x5D3E)	;CJK UNIFIED IDEOGRAPH
                                (#xE1CB . #x5D34)	;CJK UNIFIED IDEOGRAPH
                                (#xE1CC . #x5D3D)	;CJK UNIFIED IDEOGRAPH
                                (#xE1CD . #x5D6C)	;CJK UNIFIED IDEOGRAPH
                                (#xE1CE . #x5D5B)	;CJK UNIFIED IDEOGRAPH
                                (#xE1CF . #x5D6F)	;CJK UNIFIED IDEOGRAPH
                                (#xE1D0 . #x5D5D)	;CJK UNIFIED IDEOGRAPH
                                (#xE1D1 . #x5D6B)	;CJK UNIFIED IDEOGRAPH
                                (#xE1D2 . #x5D4B)	;CJK UNIFIED IDEOGRAPH
                                (#xE1D3 . #x5D4A)	;CJK UNIFIED IDEOGRAPH
                                (#xE1D4 . #x5D69)	;CJK UNIFIED IDEOGRAPH
                                (#xE1D5 . #x5D74)	;CJK UNIFIED IDEOGRAPH
                                (#xE1D6 . #x5D82)	;CJK UNIFIED IDEOGRAPH
                                (#xE1D7 . #x5D99)	;CJK UNIFIED IDEOGRAPH
                                (#xE1D8 . #x5D9D)	;CJK UNIFIED IDEOGRAPH
                                (#xE1D9 . #x8C73)	;CJK UNIFIED IDEOGRAPH
                                (#xE1DA . #x5DB7)	;CJK UNIFIED IDEOGRAPH
                                (#xE1DB . #x5DC5)	;CJK UNIFIED IDEOGRAPH
                                (#xE1DC . #x5F73)	;CJK UNIFIED IDEOGRAPH
                                (#xE1DD . #x5F77)	;CJK UNIFIED IDEOGRAPH
                                (#xE1DE . #x5F82)	;CJK UNIFIED IDEOGRAPH
                                (#xE1DF . #x5F87)	;CJK UNIFIED IDEOGRAPH
                                (#xE1E0 . #x5F89)	;CJK UNIFIED IDEOGRAPH
                                (#xE1E1 . #x5F8C)	;CJK UNIFIED IDEOGRAPH
                                (#xE1E2 . #x5F95)	;CJK UNIFIED IDEOGRAPH
                                (#xE1E3 . #x5F99)	;CJK UNIFIED IDEOGRAPH
                                (#xE1E4 . #x5F9C)	;CJK UNIFIED IDEOGRAPH
                                (#xE1E5 . #x5FA8)	;CJK UNIFIED IDEOGRAPH
                                (#xE1E6 . #x5FAD)	;CJK UNIFIED IDEOGRAPH
                                (#xE1E7 . #x5FB5)	;CJK UNIFIED IDEOGRAPH
                                (#xE1E8 . #x5FBC)	;CJK UNIFIED IDEOGRAPH
                                (#xE1E9 . #x8862)	;CJK UNIFIED IDEOGRAPH
                                (#xE1EA . #x5F61)	;CJK UNIFIED IDEOGRAPH
                                (#xE1EB . #x72AD)	;CJK UNIFIED IDEOGRAPH
                                (#xE1EC . #x72B0)	;CJK UNIFIED IDEOGRAPH
                                (#xE1ED . #x72B4)	;CJK UNIFIED IDEOGRAPH
                                (#xE1EE . #x72B7)	;CJK UNIFIED IDEOGRAPH
                                (#xE1EF . #x72B8)	;CJK UNIFIED IDEOGRAPH
                                (#xE1F0 . #x72C3)	;CJK UNIFIED IDEOGRAPH
                                (#xE1F1 . #x72C1)	;CJK UNIFIED IDEOGRAPH
                                (#xE1F2 . #x72CE)	;CJK UNIFIED IDEOGRAPH
                                (#xE1F3 . #x72CD)	;CJK UNIFIED IDEOGRAPH
                                (#xE1F4 . #x72D2)	;CJK UNIFIED IDEOGRAPH
                                (#xE1F5 . #x72E8)	;CJK UNIFIED IDEOGRAPH
                                (#xE1F6 . #x72EF)	;CJK UNIFIED IDEOGRAPH
                                (#xE1F7 . #x72E9)	;CJK UNIFIED IDEOGRAPH
                                (#xE1F8 . #x72F2)	;CJK UNIFIED IDEOGRAPH
                                (#xE1F9 . #x72F4)	;CJK UNIFIED IDEOGRAPH
                                (#xE1FA . #x72F7)	;CJK UNIFIED IDEOGRAPH
                                (#xE1FB . #x7301)	;CJK UNIFIED IDEOGRAPH
                                (#xE1FC . #x72F3)	;CJK UNIFIED IDEOGRAPH
                                (#xE1FD . #x7303)	;CJK UNIFIED IDEOGRAPH
                                (#xE1FE . #x72FA)	;CJK UNIFIED IDEOGRAPH
                                (#xE240 . #x91E6)	;CJK UNIFIED IDEOGRAPH
                                (#xE241 . #x91E7)	;CJK UNIFIED IDEOGRAPH
                                (#xE242 . #x91E8)	;CJK UNIFIED IDEOGRAPH
                                (#xE243 . #x91E9)	;CJK UNIFIED IDEOGRAPH
                                (#xE244 . #x91EA)	;CJK UNIFIED IDEOGRAPH
                                (#xE245 . #x91EB)	;CJK UNIFIED IDEOGRAPH
                                (#xE246 . #x91EC)	;CJK UNIFIED IDEOGRAPH
                                (#xE247 . #x91ED)	;CJK UNIFIED IDEOGRAPH
                                (#xE248 . #x91EE)	;CJK UNIFIED IDEOGRAPH
                                (#xE249 . #x91EF)	;CJK UNIFIED IDEOGRAPH
                                (#xE24A . #x91F0)	;CJK UNIFIED IDEOGRAPH
                                (#xE24B . #x91F1)	;CJK UNIFIED IDEOGRAPH
                                (#xE24C . #x91F2)	;CJK UNIFIED IDEOGRAPH
                                (#xE24D . #x91F3)	;CJK UNIFIED IDEOGRAPH
                                (#xE24E . #x91F4)	;CJK UNIFIED IDEOGRAPH
                                (#xE24F . #x91F5)	;CJK UNIFIED IDEOGRAPH
                                (#xE250 . #x91F6)	;CJK UNIFIED IDEOGRAPH
                                (#xE251 . #x91F7)	;CJK UNIFIED IDEOGRAPH
                                (#xE252 . #x91F8)	;CJK UNIFIED IDEOGRAPH
                                (#xE253 . #x91F9)	;CJK UNIFIED IDEOGRAPH
                                (#xE254 . #x91FA)	;CJK UNIFIED IDEOGRAPH
                                (#xE255 . #x91FB)	;CJK UNIFIED IDEOGRAPH
                                (#xE256 . #x91FC)	;CJK UNIFIED IDEOGRAPH
                                (#xE257 . #x91FD)	;CJK UNIFIED IDEOGRAPH
                                (#xE258 . #x91FE)	;CJK UNIFIED IDEOGRAPH
                                (#xE259 . #x91FF)	;CJK UNIFIED IDEOGRAPH
                                (#xE25A . #x9200)	;CJK UNIFIED IDEOGRAPH
                                (#xE25B . #x9201)	;CJK UNIFIED IDEOGRAPH
                                (#xE25C . #x9202)	;CJK UNIFIED IDEOGRAPH
                                (#xE25D . #x9203)	;CJK UNIFIED IDEOGRAPH
                                (#xE25E . #x9204)	;CJK UNIFIED IDEOGRAPH
                                (#xE25F . #x9205)	;CJK UNIFIED IDEOGRAPH
                                (#xE260 . #x9206)	;CJK UNIFIED IDEOGRAPH
                                (#xE261 . #x9207)	;CJK UNIFIED IDEOGRAPH
                                (#xE262 . #x9208)	;CJK UNIFIED IDEOGRAPH
                                (#xE263 . #x9209)	;CJK UNIFIED IDEOGRAPH
                                (#xE264 . #x920A)	;CJK UNIFIED IDEOGRAPH
                                (#xE265 . #x920B)	;CJK UNIFIED IDEOGRAPH
                                (#xE266 . #x920C)	;CJK UNIFIED IDEOGRAPH
                                (#xE267 . #x920D)	;CJK UNIFIED IDEOGRAPH
                                (#xE268 . #x920E)	;CJK UNIFIED IDEOGRAPH
                                (#xE269 . #x920F)	;CJK UNIFIED IDEOGRAPH
                                (#xE26A . #x9210)	;CJK UNIFIED IDEOGRAPH
                                (#xE26B . #x9211)	;CJK UNIFIED IDEOGRAPH
                                (#xE26C . #x9212)	;CJK UNIFIED IDEOGRAPH
                                (#xE26D . #x9213)	;CJK UNIFIED IDEOGRAPH
                                (#xE26E . #x9214)	;CJK UNIFIED IDEOGRAPH
                                (#xE26F . #x9215)	;CJK UNIFIED IDEOGRAPH
                                (#xE270 . #x9216)	;CJK UNIFIED IDEOGRAPH
                                (#xE271 . #x9217)	;CJK UNIFIED IDEOGRAPH
                                (#xE272 . #x9218)	;CJK UNIFIED IDEOGRAPH
                                (#xE273 . #x9219)	;CJK UNIFIED IDEOGRAPH
                                (#xE274 . #x921A)	;CJK UNIFIED IDEOGRAPH
                                (#xE275 . #x921B)	;CJK UNIFIED IDEOGRAPH
                                (#xE276 . #x921C)	;CJK UNIFIED IDEOGRAPH
                                (#xE277 . #x921D)	;CJK UNIFIED IDEOGRAPH
                                (#xE278 . #x921E)	;CJK UNIFIED IDEOGRAPH
                                (#xE279 . #x921F)	;CJK UNIFIED IDEOGRAPH
                                (#xE27A . #x9220)	;CJK UNIFIED IDEOGRAPH
                                (#xE27B . #x9221)	;CJK UNIFIED IDEOGRAPH
                                (#xE27C . #x9222)	;CJK UNIFIED IDEOGRAPH
                                (#xE27D . #x9223)	;CJK UNIFIED IDEOGRAPH
                                (#xE27E . #x9224)	;CJK UNIFIED IDEOGRAPH
                                (#xE280 . #x9225)	;CJK UNIFIED IDEOGRAPH
                                (#xE281 . #x9226)	;CJK UNIFIED IDEOGRAPH
                                (#xE282 . #x9227)	;CJK UNIFIED IDEOGRAPH
                                (#xE283 . #x9228)	;CJK UNIFIED IDEOGRAPH
                                (#xE284 . #x9229)	;CJK UNIFIED IDEOGRAPH
                                (#xE285 . #x922A)	;CJK UNIFIED IDEOGRAPH
                                (#xE286 . #x922B)	;CJK UNIFIED IDEOGRAPH
                                (#xE287 . #x922C)	;CJK UNIFIED IDEOGRAPH
                                (#xE288 . #x922D)	;CJK UNIFIED IDEOGRAPH
                                (#xE289 . #x922E)	;CJK UNIFIED IDEOGRAPH
                                (#xE28A . #x922F)	;CJK UNIFIED IDEOGRAPH
                                (#xE28B . #x9230)	;CJK UNIFIED IDEOGRAPH
                                (#xE28C . #x9231)	;CJK UNIFIED IDEOGRAPH
                                (#xE28D . #x9232)	;CJK UNIFIED IDEOGRAPH
                                (#xE28E . #x9233)	;CJK UNIFIED IDEOGRAPH
                                (#xE28F . #x9234)	;CJK UNIFIED IDEOGRAPH
                                (#xE290 . #x9235)	;CJK UNIFIED IDEOGRAPH
                                (#xE291 . #x9236)	;CJK UNIFIED IDEOGRAPH
                                (#xE292 . #x9237)	;CJK UNIFIED IDEOGRAPH
                                (#xE293 . #x9238)	;CJK UNIFIED IDEOGRAPH
                                (#xE294 . #x9239)	;CJK UNIFIED IDEOGRAPH
                                (#xE295 . #x923A)	;CJK UNIFIED IDEOGRAPH
                                (#xE296 . #x923B)	;CJK UNIFIED IDEOGRAPH
                                (#xE297 . #x923C)	;CJK UNIFIED IDEOGRAPH
                                (#xE298 . #x923D)	;CJK UNIFIED IDEOGRAPH
                                (#xE299 . #x923E)	;CJK UNIFIED IDEOGRAPH
                                (#xE29A . #x923F)	;CJK UNIFIED IDEOGRAPH
                                (#xE29B . #x9240)	;CJK UNIFIED IDEOGRAPH
                                (#xE29C . #x9241)	;CJK UNIFIED IDEOGRAPH
                                (#xE29D . #x9242)	;CJK UNIFIED IDEOGRAPH
                                (#xE29E . #x9243)	;CJK UNIFIED IDEOGRAPH
                                (#xE29F . #x9244)	;CJK UNIFIED IDEOGRAPH
                                (#xE2A0 . #x9245)	;CJK UNIFIED IDEOGRAPH
                                (#xE2A1 . #x72FB)	;CJK UNIFIED IDEOGRAPH
                                (#xE2A2 . #x7317)	;CJK UNIFIED IDEOGRAPH
                                (#xE2A3 . #x7313)	;CJK UNIFIED IDEOGRAPH
                                (#xE2A4 . #x7321)	;CJK UNIFIED IDEOGRAPH
                                (#xE2A5 . #x730A)	;CJK UNIFIED IDEOGRAPH
                                (#xE2A6 . #x731E)	;CJK UNIFIED IDEOGRAPH
                                (#xE2A7 . #x731D)	;CJK UNIFIED IDEOGRAPH
                                (#xE2A8 . #x7315)	;CJK UNIFIED IDEOGRAPH
                                (#xE2A9 . #x7322)	;CJK UNIFIED IDEOGRAPH
                                (#xE2AA . #x7339)	;CJK UNIFIED IDEOGRAPH
                                (#xE2AB . #x7325)	;CJK UNIFIED IDEOGRAPH
                                (#xE2AC . #x732C)	;CJK UNIFIED IDEOGRAPH
                                (#xE2AD . #x7338)	;CJK UNIFIED IDEOGRAPH
                                (#xE2AE . #x7331)	;CJK UNIFIED IDEOGRAPH
                                (#xE2AF . #x7350)	;CJK UNIFIED IDEOGRAPH
                                (#xE2B0 . #x734D)	;CJK UNIFIED IDEOGRAPH
                                (#xE2B1 . #x7357)	;CJK UNIFIED IDEOGRAPH
                                (#xE2B2 . #x7360)	;CJK UNIFIED IDEOGRAPH
                                (#xE2B3 . #x736C)	;CJK UNIFIED IDEOGRAPH
                                (#xE2B4 . #x736F)	;CJK UNIFIED IDEOGRAPH
                                (#xE2B5 . #x737E)	;CJK UNIFIED IDEOGRAPH
                                (#xE2B6 . #x821B)	;CJK UNIFIED IDEOGRAPH
                                (#xE2B7 . #x5925)	;CJK UNIFIED IDEOGRAPH
                                (#xE2B8 . #x98E7)	;CJK UNIFIED IDEOGRAPH
                                (#xE2B9 . #x5924)	;CJK UNIFIED IDEOGRAPH
                                (#xE2BA . #x5902)	;CJK UNIFIED IDEOGRAPH
                                (#xE2BB . #x9963)	;CJK UNIFIED IDEOGRAPH
                                (#xE2BC . #x9967)	;CJK UNIFIED IDEOGRAPH
                                (#xE2BD . #x9968)	;CJK UNIFIED IDEOGRAPH
                                (#xE2BE . #x9969)	;CJK UNIFIED IDEOGRAPH
                                (#xE2BF . #x996A)	;CJK UNIFIED IDEOGRAPH
                                (#xE2C0 . #x996B)	;CJK UNIFIED IDEOGRAPH
                                (#xE2C1 . #x996C)	;CJK UNIFIED IDEOGRAPH
                                (#xE2C2 . #x9974)	;CJK UNIFIED IDEOGRAPH
                                (#xE2C3 . #x9977)	;CJK UNIFIED IDEOGRAPH
                                (#xE2C4 . #x997D)	;CJK UNIFIED IDEOGRAPH
                                (#xE2C5 . #x9980)	;CJK UNIFIED IDEOGRAPH
                                (#xE2C6 . #x9984)	;CJK UNIFIED IDEOGRAPH
                                (#xE2C7 . #x9987)	;CJK UNIFIED IDEOGRAPH
                                (#xE2C8 . #x998A)	;CJK UNIFIED IDEOGRAPH
                                (#xE2C9 . #x998D)	;CJK UNIFIED IDEOGRAPH
                                (#xE2CA . #x9990)	;CJK UNIFIED IDEOGRAPH
                                (#xE2CB . #x9991)	;CJK UNIFIED IDEOGRAPH
                                (#xE2CC . #x9993)	;CJK UNIFIED IDEOGRAPH
                                (#xE2CD . #x9994)	;CJK UNIFIED IDEOGRAPH
                                (#xE2CE . #x9995)	;CJK UNIFIED IDEOGRAPH
                                (#xE2CF . #x5E80)	;CJK UNIFIED IDEOGRAPH
                                (#xE2D0 . #x5E91)	;CJK UNIFIED IDEOGRAPH
                                (#xE2D1 . #x5E8B)	;CJK UNIFIED IDEOGRAPH
                                (#xE2D2 . #x5E96)	;CJK UNIFIED IDEOGRAPH
                                (#xE2D3 . #x5EA5)	;CJK UNIFIED IDEOGRAPH
                                (#xE2D4 . #x5EA0)	;CJK UNIFIED IDEOGRAPH
                                (#xE2D5 . #x5EB9)	;CJK UNIFIED IDEOGRAPH
                                (#xE2D6 . #x5EB5)	;CJK UNIFIED IDEOGRAPH
                                (#xE2D7 . #x5EBE)	;CJK UNIFIED IDEOGRAPH
                                (#xE2D8 . #x5EB3)	;CJK UNIFIED IDEOGRAPH
                                (#xE2D9 . #x8D53)	;CJK UNIFIED IDEOGRAPH
                                (#xE2DA . #x5ED2)	;CJK UNIFIED IDEOGRAPH
                                (#xE2DB . #x5ED1)	;CJK UNIFIED IDEOGRAPH
                                (#xE2DC . #x5EDB)	;CJK UNIFIED IDEOGRAPH
                                (#xE2DD . #x5EE8)	;CJK UNIFIED IDEOGRAPH
                                (#xE2DE . #x5EEA)	;CJK UNIFIED IDEOGRAPH
                                (#xE2DF . #x81BA)	;CJK UNIFIED IDEOGRAPH
                                (#xE2E0 . #x5FC4)	;CJK UNIFIED IDEOGRAPH
                                (#xE2E1 . #x5FC9)	;CJK UNIFIED IDEOGRAPH
                                (#xE2E2 . #x5FD6)	;CJK UNIFIED IDEOGRAPH
                                (#xE2E3 . #x5FCF)	;CJK UNIFIED IDEOGRAPH
                                (#xE2E4 . #x6003)	;CJK UNIFIED IDEOGRAPH
                                (#xE2E5 . #x5FEE)	;CJK UNIFIED IDEOGRAPH
                                (#xE2E6 . #x6004)	;CJK UNIFIED IDEOGRAPH
                                (#xE2E7 . #x5FE1)	;CJK UNIFIED IDEOGRAPH
                                (#xE2E8 . #x5FE4)	;CJK UNIFIED IDEOGRAPH
                                (#xE2E9 . #x5FFE)	;CJK UNIFIED IDEOGRAPH
                                (#xE2EA . #x6005)	;CJK UNIFIED IDEOGRAPH
                                (#xE2EB . #x6006)	;CJK UNIFIED IDEOGRAPH
                                (#xE2EC . #x5FEA)	;CJK UNIFIED IDEOGRAPH
                                (#xE2ED . #x5FED)	;CJK UNIFIED IDEOGRAPH
                                (#xE2EE . #x5FF8)	;CJK UNIFIED IDEOGRAPH
                                (#xE2EF . #x6019)	;CJK UNIFIED IDEOGRAPH
                                (#xE2F0 . #x6035)	;CJK UNIFIED IDEOGRAPH
                                (#xE2F1 . #x6026)	;CJK UNIFIED IDEOGRAPH
                                (#xE2F2 . #x601B)	;CJK UNIFIED IDEOGRAPH
                                (#xE2F3 . #x600F)	;CJK UNIFIED IDEOGRAPH
                                (#xE2F4 . #x600D)	;CJK UNIFIED IDEOGRAPH
                                (#xE2F5 . #x6029)	;CJK UNIFIED IDEOGRAPH
                                (#xE2F6 . #x602B)	;CJK UNIFIED IDEOGRAPH
                                (#xE2F7 . #x600A)	;CJK UNIFIED IDEOGRAPH
                                (#xE2F8 . #x603F)	;CJK UNIFIED IDEOGRAPH
                                (#xE2F9 . #x6021)	;CJK UNIFIED IDEOGRAPH
                                (#xE2FA . #x6078)	;CJK UNIFIED IDEOGRAPH
                                (#xE2FB . #x6079)	;CJK UNIFIED IDEOGRAPH
                                (#xE2FC . #x607B)	;CJK UNIFIED IDEOGRAPH
                                (#xE2FD . #x607A)	;CJK UNIFIED IDEOGRAPH
                                (#xE2FE . #x6042)	;CJK UNIFIED IDEOGRAPH
                                (#xE340 . #x9246)	;CJK UNIFIED IDEOGRAPH
                                (#xE341 . #x9247)	;CJK UNIFIED IDEOGRAPH
                                (#xE342 . #x9248)	;CJK UNIFIED IDEOGRAPH
                                (#xE343 . #x9249)	;CJK UNIFIED IDEOGRAPH
                                (#xE344 . #x924A)	;CJK UNIFIED IDEOGRAPH
                                (#xE345 . #x924B)	;CJK UNIFIED IDEOGRAPH
                                (#xE346 . #x924C)	;CJK UNIFIED IDEOGRAPH
                                (#xE347 . #x924D)	;CJK UNIFIED IDEOGRAPH
                                (#xE348 . #x924E)	;CJK UNIFIED IDEOGRAPH
                                (#xE349 . #x924F)	;CJK UNIFIED IDEOGRAPH
                                (#xE34A . #x9250)	;CJK UNIFIED IDEOGRAPH
                                (#xE34B . #x9251)	;CJK UNIFIED IDEOGRAPH
                                (#xE34C . #x9252)	;CJK UNIFIED IDEOGRAPH
                                (#xE34D . #x9253)	;CJK UNIFIED IDEOGRAPH
                                (#xE34E . #x9254)	;CJK UNIFIED IDEOGRAPH
                                (#xE34F . #x9255)	;CJK UNIFIED IDEOGRAPH
                                (#xE350 . #x9256)	;CJK UNIFIED IDEOGRAPH
                                (#xE351 . #x9257)	;CJK UNIFIED IDEOGRAPH
                                (#xE352 . #x9258)	;CJK UNIFIED IDEOGRAPH
                                (#xE353 . #x9259)	;CJK UNIFIED IDEOGRAPH
                                (#xE354 . #x925A)	;CJK UNIFIED IDEOGRAPH
                                (#xE355 . #x925B)	;CJK UNIFIED IDEOGRAPH
                                (#xE356 . #x925C)	;CJK UNIFIED IDEOGRAPH
                                (#xE357 . #x925D)	;CJK UNIFIED IDEOGRAPH
                                (#xE358 . #x925E)	;CJK UNIFIED IDEOGRAPH
                                (#xE359 . #x925F)	;CJK UNIFIED IDEOGRAPH
                                (#xE35A . #x9260)	;CJK UNIFIED IDEOGRAPH
                                (#xE35B . #x9261)	;CJK UNIFIED IDEOGRAPH
                                (#xE35C . #x9262)	;CJK UNIFIED IDEOGRAPH
                                (#xE35D . #x9263)	;CJK UNIFIED IDEOGRAPH
                                (#xE35E . #x9264)	;CJK UNIFIED IDEOGRAPH
                                (#xE35F . #x9265)	;CJK UNIFIED IDEOGRAPH
                                (#xE360 . #x9266)	;CJK UNIFIED IDEOGRAPH
                                (#xE361 . #x9267)	;CJK UNIFIED IDEOGRAPH
                                (#xE362 . #x9268)	;CJK UNIFIED IDEOGRAPH
                                (#xE363 . #x9269)	;CJK UNIFIED IDEOGRAPH
                                (#xE364 . #x926A)	;CJK UNIFIED IDEOGRAPH
                                (#xE365 . #x926B)	;CJK UNIFIED IDEOGRAPH
                                (#xE366 . #x926C)	;CJK UNIFIED IDEOGRAPH
                                (#xE367 . #x926D)	;CJK UNIFIED IDEOGRAPH
                                (#xE368 . #x926E)	;CJK UNIFIED IDEOGRAPH
                                (#xE369 . #x926F)	;CJK UNIFIED IDEOGRAPH
                                (#xE36A . #x9270)	;CJK UNIFIED IDEOGRAPH
                                (#xE36B . #x9271)	;CJK UNIFIED IDEOGRAPH
                                (#xE36C . #x9272)	;CJK UNIFIED IDEOGRAPH
                                (#xE36D . #x9273)	;CJK UNIFIED IDEOGRAPH
                                (#xE36E . #x9275)	;CJK UNIFIED IDEOGRAPH
                                (#xE36F . #x9276)	;CJK UNIFIED IDEOGRAPH
                                (#xE370 . #x9277)	;CJK UNIFIED IDEOGRAPH
                                (#xE371 . #x9278)	;CJK UNIFIED IDEOGRAPH
                                (#xE372 . #x9279)	;CJK UNIFIED IDEOGRAPH
                                (#xE373 . #x927A)	;CJK UNIFIED IDEOGRAPH
                                (#xE374 . #x927B)	;CJK UNIFIED IDEOGRAPH
                                (#xE375 . #x927C)	;CJK UNIFIED IDEOGRAPH
                                (#xE376 . #x927D)	;CJK UNIFIED IDEOGRAPH
                                (#xE377 . #x927E)	;CJK UNIFIED IDEOGRAPH
                                (#xE378 . #x927F)	;CJK UNIFIED IDEOGRAPH
                                (#xE379 . #x9280)	;CJK UNIFIED IDEOGRAPH
                                (#xE37A . #x9281)	;CJK UNIFIED IDEOGRAPH
                                (#xE37B . #x9282)	;CJK UNIFIED IDEOGRAPH
                                (#xE37C . #x9283)	;CJK UNIFIED IDEOGRAPH
                                (#xE37D . #x9284)	;CJK UNIFIED IDEOGRAPH
                                (#xE37E . #x9285)	;CJK UNIFIED IDEOGRAPH
                                (#xE380 . #x9286)	;CJK UNIFIED IDEOGRAPH
                                (#xE381 . #x9287)	;CJK UNIFIED IDEOGRAPH
                                (#xE382 . #x9288)	;CJK UNIFIED IDEOGRAPH
                                (#xE383 . #x9289)	;CJK UNIFIED IDEOGRAPH
                                (#xE384 . #x928A)	;CJK UNIFIED IDEOGRAPH
                                (#xE385 . #x928B)	;CJK UNIFIED IDEOGRAPH
                                (#xE386 . #x928C)	;CJK UNIFIED IDEOGRAPH
                                (#xE387 . #x928D)	;CJK UNIFIED IDEOGRAPH
                                (#xE388 . #x928F)	;CJK UNIFIED IDEOGRAPH
                                (#xE389 . #x9290)	;CJK UNIFIED IDEOGRAPH
                                (#xE38A . #x9291)	;CJK UNIFIED IDEOGRAPH
                                (#xE38B . #x9292)	;CJK UNIFIED IDEOGRAPH
                                (#xE38C . #x9293)	;CJK UNIFIED IDEOGRAPH
                                (#xE38D . #x9294)	;CJK UNIFIED IDEOGRAPH
                                (#xE38E . #x9295)	;CJK UNIFIED IDEOGRAPH
                                (#xE38F . #x9296)	;CJK UNIFIED IDEOGRAPH
                                (#xE390 . #x9297)	;CJK UNIFIED IDEOGRAPH
                                (#xE391 . #x9298)	;CJK UNIFIED IDEOGRAPH
                                (#xE392 . #x9299)	;CJK UNIFIED IDEOGRAPH
                                (#xE393 . #x929A)	;CJK UNIFIED IDEOGRAPH
                                (#xE394 . #x929B)	;CJK UNIFIED IDEOGRAPH
                                (#xE395 . #x929C)	;CJK UNIFIED IDEOGRAPH
                                (#xE396 . #x929D)	;CJK UNIFIED IDEOGRAPH
                                (#xE397 . #x929E)	;CJK UNIFIED IDEOGRAPH
                                (#xE398 . #x929F)	;CJK UNIFIED IDEOGRAPH
                                (#xE399 . #x92A0)	;CJK UNIFIED IDEOGRAPH
                                (#xE39A . #x92A1)	;CJK UNIFIED IDEOGRAPH
                                (#xE39B . #x92A2)	;CJK UNIFIED IDEOGRAPH
                                (#xE39C . #x92A3)	;CJK UNIFIED IDEOGRAPH
                                (#xE39D . #x92A4)	;CJK UNIFIED IDEOGRAPH
                                (#xE39E . #x92A5)	;CJK UNIFIED IDEOGRAPH
                                (#xE39F . #x92A6)	;CJK UNIFIED IDEOGRAPH
                                (#xE3A0 . #x92A7)	;CJK UNIFIED IDEOGRAPH
                                (#xE3A1 . #x606A)	;CJK UNIFIED IDEOGRAPH
                                (#xE3A2 . #x607D)	;CJK UNIFIED IDEOGRAPH
                                (#xE3A3 . #x6096)	;CJK UNIFIED IDEOGRAPH
                                (#xE3A4 . #x609A)	;CJK UNIFIED IDEOGRAPH
                                (#xE3A5 . #x60AD)	;CJK UNIFIED IDEOGRAPH
                                (#xE3A6 . #x609D)	;CJK UNIFIED IDEOGRAPH
                                (#xE3A7 . #x6083)	;CJK UNIFIED IDEOGRAPH
                                (#xE3A8 . #x6092)	;CJK UNIFIED IDEOGRAPH
                                (#xE3A9 . #x608C)	;CJK UNIFIED IDEOGRAPH
                                (#xE3AA . #x609B)	;CJK UNIFIED IDEOGRAPH
                                (#xE3AB . #x60EC)	;CJK UNIFIED IDEOGRAPH
                                (#xE3AC . #x60BB)	;CJK UNIFIED IDEOGRAPH
                                (#xE3AD . #x60B1)	;CJK UNIFIED IDEOGRAPH
                                (#xE3AE . #x60DD)	;CJK UNIFIED IDEOGRAPH
                                (#xE3AF . #x60D8)	;CJK UNIFIED IDEOGRAPH
                                (#xE3B0 . #x60C6)	;CJK UNIFIED IDEOGRAPH
                                (#xE3B1 . #x60DA)	;CJK UNIFIED IDEOGRAPH
                                (#xE3B2 . #x60B4)	;CJK UNIFIED IDEOGRAPH
                                (#xE3B3 . #x6120)	;CJK UNIFIED IDEOGRAPH
                                (#xE3B4 . #x6126)	;CJK UNIFIED IDEOGRAPH
                                (#xE3B5 . #x6115)	;CJK UNIFIED IDEOGRAPH
                                (#xE3B6 . #x6123)	;CJK UNIFIED IDEOGRAPH
                                (#xE3B7 . #x60F4)	;CJK UNIFIED IDEOGRAPH
                                (#xE3B8 . #x6100)	;CJK UNIFIED IDEOGRAPH
                                (#xE3B9 . #x610E)	;CJK UNIFIED IDEOGRAPH
                                (#xE3BA . #x612B)	;CJK UNIFIED IDEOGRAPH
                                (#xE3BB . #x614A)	;CJK UNIFIED IDEOGRAPH
                                (#xE3BC . #x6175)	;CJK UNIFIED IDEOGRAPH
                                (#xE3BD . #x61AC)	;CJK UNIFIED IDEOGRAPH
                                (#xE3BE . #x6194)	;CJK UNIFIED IDEOGRAPH
                                (#xE3BF . #x61A7)	;CJK UNIFIED IDEOGRAPH
                                (#xE3C0 . #x61B7)	;CJK UNIFIED IDEOGRAPH
                                (#xE3C1 . #x61D4)	;CJK UNIFIED IDEOGRAPH
                                (#xE3C2 . #x61F5)	;CJK UNIFIED IDEOGRAPH
                                (#xE3C3 . #x5FDD)	;CJK UNIFIED IDEOGRAPH
                                (#xE3C4 . #x96B3)	;CJK UNIFIED IDEOGRAPH
                                (#xE3C5 . #x95E9)	;CJK UNIFIED IDEOGRAPH
                                (#xE3C6 . #x95EB)	;CJK UNIFIED IDEOGRAPH
                                (#xE3C7 . #x95F1)	;CJK UNIFIED IDEOGRAPH
                                (#xE3C8 . #x95F3)	;CJK UNIFIED IDEOGRAPH
                                (#xE3C9 . #x95F5)	;CJK UNIFIED IDEOGRAPH
                                (#xE3CA . #x95F6)	;CJK UNIFIED IDEOGRAPH
                                (#xE3CB . #x95FC)	;CJK UNIFIED IDEOGRAPH
                                (#xE3CC . #x95FE)	;CJK UNIFIED IDEOGRAPH
                                (#xE3CD . #x9603)	;CJK UNIFIED IDEOGRAPH
                                (#xE3CE . #x9604)	;CJK UNIFIED IDEOGRAPH
                                (#xE3CF . #x9606)	;CJK UNIFIED IDEOGRAPH
                                (#xE3D0 . #x9608)	;CJK UNIFIED IDEOGRAPH
                                (#xE3D1 . #x960A)	;CJK UNIFIED IDEOGRAPH
                                (#xE3D2 . #x960B)	;CJK UNIFIED IDEOGRAPH
                                (#xE3D3 . #x960C)	;CJK UNIFIED IDEOGRAPH
                                (#xE3D4 . #x960D)	;CJK UNIFIED IDEOGRAPH
                                (#xE3D5 . #x960F)	;CJK UNIFIED IDEOGRAPH
                                (#xE3D6 . #x9612)	;CJK UNIFIED IDEOGRAPH
                                (#xE3D7 . #x9615)	;CJK UNIFIED IDEOGRAPH
                                (#xE3D8 . #x9616)	;CJK UNIFIED IDEOGRAPH
                                (#xE3D9 . #x9617)	;CJK UNIFIED IDEOGRAPH
                                (#xE3DA . #x9619)	;CJK UNIFIED IDEOGRAPH
                                (#xE3DB . #x961A)	;CJK UNIFIED IDEOGRAPH
                                (#xE3DC . #x4E2C)	;CJK UNIFIED IDEOGRAPH
                                (#xE3DD . #x723F)	;CJK UNIFIED IDEOGRAPH
                                (#xE3DE . #x6215)	;CJK UNIFIED IDEOGRAPH
                                (#xE3DF . #x6C35)	;CJK UNIFIED IDEOGRAPH
                                (#xE3E0 . #x6C54)	;CJK UNIFIED IDEOGRAPH
                                (#xE3E1 . #x6C5C)	;CJK UNIFIED IDEOGRAPH
                                (#xE3E2 . #x6C4A)	;CJK UNIFIED IDEOGRAPH
                                (#xE3E3 . #x6CA3)	;CJK UNIFIED IDEOGRAPH
                                (#xE3E4 . #x6C85)	;CJK UNIFIED IDEOGRAPH
                                (#xE3E5 . #x6C90)	;CJK UNIFIED IDEOGRAPH
                                (#xE3E6 . #x6C94)	;CJK UNIFIED IDEOGRAPH
                                (#xE3E7 . #x6C8C)	;CJK UNIFIED IDEOGRAPH
                                (#xE3E8 . #x6C68)	;CJK UNIFIED IDEOGRAPH
                                (#xE3E9 . #x6C69)	;CJK UNIFIED IDEOGRAPH
                                (#xE3EA . #x6C74)	;CJK UNIFIED IDEOGRAPH
                                (#xE3EB . #x6C76)	;CJK UNIFIED IDEOGRAPH
                                (#xE3EC . #x6C86)	;CJK UNIFIED IDEOGRAPH
                                (#xE3ED . #x6CA9)	;CJK UNIFIED IDEOGRAPH
                                (#xE3EE . #x6CD0)	;CJK UNIFIED IDEOGRAPH
                                (#xE3EF . #x6CD4)	;CJK UNIFIED IDEOGRAPH
                                (#xE3F0 . #x6CAD)	;CJK UNIFIED IDEOGRAPH
                                (#xE3F1 . #x6CF7)	;CJK UNIFIED IDEOGRAPH
                                (#xE3F2 . #x6CF8)	;CJK UNIFIED IDEOGRAPH
                                (#xE3F3 . #x6CF1)	;CJK UNIFIED IDEOGRAPH
                                (#xE3F4 . #x6CD7)	;CJK UNIFIED IDEOGRAPH
                                (#xE3F5 . #x6CB2)	;CJK UNIFIED IDEOGRAPH
                                (#xE3F6 . #x6CE0)	;CJK UNIFIED IDEOGRAPH
                                (#xE3F7 . #x6CD6)	;CJK UNIFIED IDEOGRAPH
                                (#xE3F8 . #x6CFA)	;CJK UNIFIED IDEOGRAPH
                                (#xE3F9 . #x6CEB)	;CJK UNIFIED IDEOGRAPH
                                (#xE3FA . #x6CEE)	;CJK UNIFIED IDEOGRAPH
                                (#xE3FB . #x6CB1)	;CJK UNIFIED IDEOGRAPH
                                (#xE3FC . #x6CD3)	;CJK UNIFIED IDEOGRAPH
                                (#xE3FD . #x6CEF)	;CJK UNIFIED IDEOGRAPH
                                (#xE3FE . #x6CFE)	;CJK UNIFIED IDEOGRAPH
                                (#xE440 . #x92A8)	;CJK UNIFIED IDEOGRAPH
                                (#xE441 . #x92A9)	;CJK UNIFIED IDEOGRAPH
                                (#xE442 . #x92AA)	;CJK UNIFIED IDEOGRAPH
                                (#xE443 . #x92AB)	;CJK UNIFIED IDEOGRAPH
                                (#xE444 . #x92AC)	;CJK UNIFIED IDEOGRAPH
                                (#xE445 . #x92AD)	;CJK UNIFIED IDEOGRAPH
                                (#xE446 . #x92AF)	;CJK UNIFIED IDEOGRAPH
                                (#xE447 . #x92B0)	;CJK UNIFIED IDEOGRAPH
                                (#xE448 . #x92B1)	;CJK UNIFIED IDEOGRAPH
                                (#xE449 . #x92B2)	;CJK UNIFIED IDEOGRAPH
                                (#xE44A . #x92B3)	;CJK UNIFIED IDEOGRAPH
                                (#xE44B . #x92B4)	;CJK UNIFIED IDEOGRAPH
                                (#xE44C . #x92B5)	;CJK UNIFIED IDEOGRAPH
                                (#xE44D . #x92B6)	;CJK UNIFIED IDEOGRAPH
                                (#xE44E . #x92B7)	;CJK UNIFIED IDEOGRAPH
                                (#xE44F . #x92B8)	;CJK UNIFIED IDEOGRAPH
                                (#xE450 . #x92B9)	;CJK UNIFIED IDEOGRAPH
                                (#xE451 . #x92BA)	;CJK UNIFIED IDEOGRAPH
                                (#xE452 . #x92BB)	;CJK UNIFIED IDEOGRAPH
                                (#xE453 . #x92BC)	;CJK UNIFIED IDEOGRAPH
                                (#xE454 . #x92BD)	;CJK UNIFIED IDEOGRAPH
                                (#xE455 . #x92BE)	;CJK UNIFIED IDEOGRAPH
                                (#xE456 . #x92BF)	;CJK UNIFIED IDEOGRAPH
                                (#xE457 . #x92C0)	;CJK UNIFIED IDEOGRAPH
                                (#xE458 . #x92C1)	;CJK UNIFIED IDEOGRAPH
                                (#xE459 . #x92C2)	;CJK UNIFIED IDEOGRAPH
                                (#xE45A . #x92C3)	;CJK UNIFIED IDEOGRAPH
                                (#xE45B . #x92C4)	;CJK UNIFIED IDEOGRAPH
                                (#xE45C . #x92C5)	;CJK UNIFIED IDEOGRAPH
                                (#xE45D . #x92C6)	;CJK UNIFIED IDEOGRAPH
                                (#xE45E . #x92C7)	;CJK UNIFIED IDEOGRAPH
                                (#xE45F . #x92C9)	;CJK UNIFIED IDEOGRAPH
                                (#xE460 . #x92CA)	;CJK UNIFIED IDEOGRAPH
                                (#xE461 . #x92CB)	;CJK UNIFIED IDEOGRAPH
                                (#xE462 . #x92CC)	;CJK UNIFIED IDEOGRAPH
                                (#xE463 . #x92CD)	;CJK UNIFIED IDEOGRAPH
                                (#xE464 . #x92CE)	;CJK UNIFIED IDEOGRAPH
                                (#xE465 . #x92CF)	;CJK UNIFIED IDEOGRAPH
                                (#xE466 . #x92D0)	;CJK UNIFIED IDEOGRAPH
                                (#xE467 . #x92D1)	;CJK UNIFIED IDEOGRAPH
                                (#xE468 . #x92D2)	;CJK UNIFIED IDEOGRAPH
                                (#xE469 . #x92D3)	;CJK UNIFIED IDEOGRAPH
                                (#xE46A . #x92D4)	;CJK UNIFIED IDEOGRAPH
                                (#xE46B . #x92D5)	;CJK UNIFIED IDEOGRAPH
                                (#xE46C . #x92D6)	;CJK UNIFIED IDEOGRAPH
                                (#xE46D . #x92D7)	;CJK UNIFIED IDEOGRAPH
                                (#xE46E . #x92D8)	;CJK UNIFIED IDEOGRAPH
                                (#xE46F . #x92D9)	;CJK UNIFIED IDEOGRAPH
                                (#xE470 . #x92DA)	;CJK UNIFIED IDEOGRAPH
                                (#xE471 . #x92DB)	;CJK UNIFIED IDEOGRAPH
                                (#xE472 . #x92DC)	;CJK UNIFIED IDEOGRAPH
                                (#xE473 . #x92DD)	;CJK UNIFIED IDEOGRAPH
                                (#xE474 . #x92DE)	;CJK UNIFIED IDEOGRAPH
                                (#xE475 . #x92DF)	;CJK UNIFIED IDEOGRAPH
                                (#xE476 . #x92E0)	;CJK UNIFIED IDEOGRAPH
                                (#xE477 . #x92E1)	;CJK UNIFIED IDEOGRAPH
                                (#xE478 . #x92E2)	;CJK UNIFIED IDEOGRAPH
                                (#xE479 . #x92E3)	;CJK UNIFIED IDEOGRAPH
                                (#xE47A . #x92E4)	;CJK UNIFIED IDEOGRAPH
                                (#xE47B . #x92E5)	;CJK UNIFIED IDEOGRAPH
                                (#xE47C . #x92E6)	;CJK UNIFIED IDEOGRAPH
                                (#xE47D . #x92E7)	;CJK UNIFIED IDEOGRAPH
                                (#xE47E . #x92E8)	;CJK UNIFIED IDEOGRAPH
                                (#xE480 . #x92E9)	;CJK UNIFIED IDEOGRAPH
                                (#xE481 . #x92EA)	;CJK UNIFIED IDEOGRAPH
                                (#xE482 . #x92EB)	;CJK UNIFIED IDEOGRAPH
                                (#xE483 . #x92EC)	;CJK UNIFIED IDEOGRAPH
                                (#xE484 . #x92ED)	;CJK UNIFIED IDEOGRAPH
                                (#xE485 . #x92EE)	;CJK UNIFIED IDEOGRAPH
                                (#xE486 . #x92EF)	;CJK UNIFIED IDEOGRAPH
                                (#xE487 . #x92F0)	;CJK UNIFIED IDEOGRAPH
                                (#xE488 . #x92F1)	;CJK UNIFIED IDEOGRAPH
                                (#xE489 . #x92F2)	;CJK UNIFIED IDEOGRAPH
                                (#xE48A . #x92F3)	;CJK UNIFIED IDEOGRAPH
                                (#xE48B . #x92F4)	;CJK UNIFIED IDEOGRAPH
                                (#xE48C . #x92F5)	;CJK UNIFIED IDEOGRAPH
                                (#xE48D . #x92F6)	;CJK UNIFIED IDEOGRAPH
                                (#xE48E . #x92F7)	;CJK UNIFIED IDEOGRAPH
                                (#xE48F . #x92F8)	;CJK UNIFIED IDEOGRAPH
                                (#xE490 . #x92F9)	;CJK UNIFIED IDEOGRAPH
                                (#xE491 . #x92FA)	;CJK UNIFIED IDEOGRAPH
                                (#xE492 . #x92FB)	;CJK UNIFIED IDEOGRAPH
                                (#xE493 . #x92FC)	;CJK UNIFIED IDEOGRAPH
                                (#xE494 . #x92FD)	;CJK UNIFIED IDEOGRAPH
                                (#xE495 . #x92FE)	;CJK UNIFIED IDEOGRAPH
                                (#xE496 . #x92FF)	;CJK UNIFIED IDEOGRAPH
                                (#xE497 . #x9300)	;CJK UNIFIED IDEOGRAPH
                                (#xE498 . #x9301)	;CJK UNIFIED IDEOGRAPH
                                (#xE499 . #x9302)	;CJK UNIFIED IDEOGRAPH
                                (#xE49A . #x9303)	;CJK UNIFIED IDEOGRAPH
                                (#xE49B . #x9304)	;CJK UNIFIED IDEOGRAPH
                                (#xE49C . #x9305)	;CJK UNIFIED IDEOGRAPH
                                (#xE49D . #x9306)	;CJK UNIFIED IDEOGRAPH
                                (#xE49E . #x9307)	;CJK UNIFIED IDEOGRAPH
                                (#xE49F . #x9308)	;CJK UNIFIED IDEOGRAPH
                                (#xE4A0 . #x9309)	;CJK UNIFIED IDEOGRAPH
                                (#xE4A1 . #x6D39)	;CJK UNIFIED IDEOGRAPH
                                (#xE4A2 . #x6D27)	;CJK UNIFIED IDEOGRAPH
                                (#xE4A3 . #x6D0C)	;CJK UNIFIED IDEOGRAPH
                                (#xE4A4 . #x6D43)	;CJK UNIFIED IDEOGRAPH
                                (#xE4A5 . #x6D48)	;CJK UNIFIED IDEOGRAPH
                                (#xE4A6 . #x6D07)	;CJK UNIFIED IDEOGRAPH
                                (#xE4A7 . #x6D04)	;CJK UNIFIED IDEOGRAPH
                                (#xE4A8 . #x6D19)	;CJK UNIFIED IDEOGRAPH
                                (#xE4A9 . #x6D0E)	;CJK UNIFIED IDEOGRAPH
                                (#xE4AA . #x6D2B)	;CJK UNIFIED IDEOGRAPH
                                (#xE4AB . #x6D4D)	;CJK UNIFIED IDEOGRAPH
                                (#xE4AC . #x6D2E)	;CJK UNIFIED IDEOGRAPH
                                (#xE4AD . #x6D35)	;CJK UNIFIED IDEOGRAPH
                                (#xE4AE . #x6D1A)	;CJK UNIFIED IDEOGRAPH
                                (#xE4AF . #x6D4F)	;CJK UNIFIED IDEOGRAPH
                                (#xE4B0 . #x6D52)	;CJK UNIFIED IDEOGRAPH
                                (#xE4B1 . #x6D54)	;CJK UNIFIED IDEOGRAPH
                                (#xE4B2 . #x6D33)	;CJK UNIFIED IDEOGRAPH
                                (#xE4B3 . #x6D91)	;CJK UNIFIED IDEOGRAPH
                                (#xE4B4 . #x6D6F)	;CJK UNIFIED IDEOGRAPH
                                (#xE4B5 . #x6D9E)	;CJK UNIFIED IDEOGRAPH
                                (#xE4B6 . #x6DA0)	;CJK UNIFIED IDEOGRAPH
                                (#xE4B7 . #x6D5E)	;CJK UNIFIED IDEOGRAPH
                                (#xE4B8 . #x6D93)	;CJK UNIFIED IDEOGRAPH
                                (#xE4B9 . #x6D94)	;CJK UNIFIED IDEOGRAPH
                                (#xE4BA . #x6D5C)	;CJK UNIFIED IDEOGRAPH
                                (#xE4BB . #x6D60)	;CJK UNIFIED IDEOGRAPH
                                (#xE4BC . #x6D7C)	;CJK UNIFIED IDEOGRAPH
                                (#xE4BD . #x6D63)	;CJK UNIFIED IDEOGRAPH
                                (#xE4BE . #x6E1A)	;CJK UNIFIED IDEOGRAPH
                                (#xE4BF . #x6DC7)	;CJK UNIFIED IDEOGRAPH
                                (#xE4C0 . #x6DC5)	;CJK UNIFIED IDEOGRAPH
                                (#xE4C1 . #x6DDE)	;CJK UNIFIED IDEOGRAPH
                                (#xE4C2 . #x6E0E)	;CJK UNIFIED IDEOGRAPH
                                (#xE4C3 . #x6DBF)	;CJK UNIFIED IDEOGRAPH
                                (#xE4C4 . #x6DE0)	;CJK UNIFIED IDEOGRAPH
                                (#xE4C5 . #x6E11)	;CJK UNIFIED IDEOGRAPH
                                (#xE4C6 . #x6DE6)	;CJK UNIFIED IDEOGRAPH
                                (#xE4C7 . #x6DDD)	;CJK UNIFIED IDEOGRAPH
                                (#xE4C8 . #x6DD9)	;CJK UNIFIED IDEOGRAPH
                                (#xE4C9 . #x6E16)	;CJK UNIFIED IDEOGRAPH
                                (#xE4CA . #x6DAB)	;CJK UNIFIED IDEOGRAPH
                                (#xE4CB . #x6E0C)	;CJK UNIFIED IDEOGRAPH
                                (#xE4CC . #x6DAE)	;CJK UNIFIED IDEOGRAPH
                                (#xE4CD . #x6E2B)	;CJK UNIFIED IDEOGRAPH
                                (#xE4CE . #x6E6E)	;CJK UNIFIED IDEOGRAPH
                                (#xE4CF . #x6E4E)	;CJK UNIFIED IDEOGRAPH
                                (#xE4D0 . #x6E6B)	;CJK UNIFIED IDEOGRAPH
                                (#xE4D1 . #x6EB2)	;CJK UNIFIED IDEOGRAPH
                                (#xE4D2 . #x6E5F)	;CJK UNIFIED IDEOGRAPH
                                (#xE4D3 . #x6E86)	;CJK UNIFIED IDEOGRAPH
                                (#xE4D4 . #x6E53)	;CJK UNIFIED IDEOGRAPH
                                (#xE4D5 . #x6E54)	;CJK UNIFIED IDEOGRAPH
                                (#xE4D6 . #x6E32)	;CJK UNIFIED IDEOGRAPH
                                (#xE4D7 . #x6E25)	;CJK UNIFIED IDEOGRAPH
                                (#xE4D8 . #x6E44)	;CJK UNIFIED IDEOGRAPH
                                (#xE4D9 . #x6EDF)	;CJK UNIFIED IDEOGRAPH
                                (#xE4DA . #x6EB1)	;CJK UNIFIED IDEOGRAPH
                                (#xE4DB . #x6E98)	;CJK UNIFIED IDEOGRAPH
                                (#xE4DC . #x6EE0)	;CJK UNIFIED IDEOGRAPH
                                (#xE4DD . #x6F2D)	;CJK UNIFIED IDEOGRAPH
                                (#xE4DE . #x6EE2)	;CJK UNIFIED IDEOGRAPH
                                (#xE4DF . #x6EA5)	;CJK UNIFIED IDEOGRAPH
                                (#xE4E0 . #x6EA7)	;CJK UNIFIED IDEOGRAPH
                                (#xE4E1 . #x6EBD)	;CJK UNIFIED IDEOGRAPH
                                (#xE4E2 . #x6EBB)	;CJK UNIFIED IDEOGRAPH
                                (#xE4E3 . #x6EB7)	;CJK UNIFIED IDEOGRAPH
                                (#xE4E4 . #x6ED7)	;CJK UNIFIED IDEOGRAPH
                                (#xE4E5 . #x6EB4)	;CJK UNIFIED IDEOGRAPH
                                (#xE4E6 . #x6ECF)	;CJK UNIFIED IDEOGRAPH
                                (#xE4E7 . #x6E8F)	;CJK UNIFIED IDEOGRAPH
                                (#xE4E8 . #x6EC2)	;CJK UNIFIED IDEOGRAPH
                                (#xE4E9 . #x6E9F)	;CJK UNIFIED IDEOGRAPH
                                (#xE4EA . #x6F62)	;CJK UNIFIED IDEOGRAPH
                                (#xE4EB . #x6F46)	;CJK UNIFIED IDEOGRAPH
                                (#xE4EC . #x6F47)	;CJK UNIFIED IDEOGRAPH
                                (#xE4ED . #x6F24)	;CJK UNIFIED IDEOGRAPH
                                (#xE4EE . #x6F15)	;CJK UNIFIED IDEOGRAPH
                                (#xE4EF . #x6EF9)	;CJK UNIFIED IDEOGRAPH
                                (#xE4F0 . #x6F2F)	;CJK UNIFIED IDEOGRAPH
                                (#xE4F1 . #x6F36)	;CJK UNIFIED IDEOGRAPH
                                (#xE4F2 . #x6F4B)	;CJK UNIFIED IDEOGRAPH
                                (#xE4F3 . #x6F74)	;CJK UNIFIED IDEOGRAPH
                                (#xE4F4 . #x6F2A)	;CJK UNIFIED IDEOGRAPH
                                (#xE4F5 . #x6F09)	;CJK UNIFIED IDEOGRAPH
                                (#xE4F6 . #x6F29)	;CJK UNIFIED IDEOGRAPH
                                (#xE4F7 . #x6F89)	;CJK UNIFIED IDEOGRAPH
                                (#xE4F8 . #x6F8D)	;CJK UNIFIED IDEOGRAPH
                                (#xE4F9 . #x6F8C)	;CJK UNIFIED IDEOGRAPH
                                (#xE4FA . #x6F78)	;CJK UNIFIED IDEOGRAPH
                                (#xE4FB . #x6F72)	;CJK UNIFIED IDEOGRAPH
                                (#xE4FC . #x6F7C)	;CJK UNIFIED IDEOGRAPH
                                (#xE4FD . #x6F7A)	;CJK UNIFIED IDEOGRAPH
                                (#xE4FE . #x6FD1)	;CJK UNIFIED IDEOGRAPH
                                (#xE540 . #x930A)	;CJK UNIFIED IDEOGRAPH
                                (#xE541 . #x930B)	;CJK UNIFIED IDEOGRAPH
                                (#xE542 . #x930C)	;CJK UNIFIED IDEOGRAPH
                                (#xE543 . #x930D)	;CJK UNIFIED IDEOGRAPH
                                (#xE544 . #x930E)	;CJK UNIFIED IDEOGRAPH
                                (#xE545 . #x930F)	;CJK UNIFIED IDEOGRAPH
                                (#xE546 . #x9310)	;CJK UNIFIED IDEOGRAPH
                                (#xE547 . #x9311)	;CJK UNIFIED IDEOGRAPH
                                (#xE548 . #x9312)	;CJK UNIFIED IDEOGRAPH
                                (#xE549 . #x9313)	;CJK UNIFIED IDEOGRAPH
                                (#xE54A . #x9314)	;CJK UNIFIED IDEOGRAPH
                                (#xE54B . #x9315)	;CJK UNIFIED IDEOGRAPH
                                (#xE54C . #x9316)	;CJK UNIFIED IDEOGRAPH
                                (#xE54D . #x9317)	;CJK UNIFIED IDEOGRAPH
                                (#xE54E . #x9318)	;CJK UNIFIED IDEOGRAPH
                                (#xE54F . #x9319)	;CJK UNIFIED IDEOGRAPH
                                (#xE550 . #x931A)	;CJK UNIFIED IDEOGRAPH
                                (#xE551 . #x931B)	;CJK UNIFIED IDEOGRAPH
                                (#xE552 . #x931C)	;CJK UNIFIED IDEOGRAPH
                                (#xE553 . #x931D)	;CJK UNIFIED IDEOGRAPH
                                (#xE554 . #x931E)	;CJK UNIFIED IDEOGRAPH
                                (#xE555 . #x931F)	;CJK UNIFIED IDEOGRAPH
                                (#xE556 . #x9320)	;CJK UNIFIED IDEOGRAPH
                                (#xE557 . #x9321)	;CJK UNIFIED IDEOGRAPH
                                (#xE558 . #x9322)	;CJK UNIFIED IDEOGRAPH
                                (#xE559 . #x9323)	;CJK UNIFIED IDEOGRAPH
                                (#xE55A . #x9324)	;CJK UNIFIED IDEOGRAPH
                                (#xE55B . #x9325)	;CJK UNIFIED IDEOGRAPH
                                (#xE55C . #x9326)	;CJK UNIFIED IDEOGRAPH
                                (#xE55D . #x9327)	;CJK UNIFIED IDEOGRAPH
                                (#xE55E . #x9328)	;CJK UNIFIED IDEOGRAPH
                                (#xE55F . #x9329)	;CJK UNIFIED IDEOGRAPH
                                (#xE560 . #x932A)	;CJK UNIFIED IDEOGRAPH
                                (#xE561 . #x932B)	;CJK UNIFIED IDEOGRAPH
                                (#xE562 . #x932C)	;CJK UNIFIED IDEOGRAPH
                                (#xE563 . #x932D)	;CJK UNIFIED IDEOGRAPH
                                (#xE564 . #x932E)	;CJK UNIFIED IDEOGRAPH
                                (#xE565 . #x932F)	;CJK UNIFIED IDEOGRAPH
                                (#xE566 . #x9330)	;CJK UNIFIED IDEOGRAPH
                                (#xE567 . #x9331)	;CJK UNIFIED IDEOGRAPH
                                (#xE568 . #x9332)	;CJK UNIFIED IDEOGRAPH
                                (#xE569 . #x9333)	;CJK UNIFIED IDEOGRAPH
                                (#xE56A . #x9334)	;CJK UNIFIED IDEOGRAPH
                                (#xE56B . #x9335)	;CJK UNIFIED IDEOGRAPH
                                (#xE56C . #x9336)	;CJK UNIFIED IDEOGRAPH
                                (#xE56D . #x9337)	;CJK UNIFIED IDEOGRAPH
                                (#xE56E . #x9338)	;CJK UNIFIED IDEOGRAPH
                                (#xE56F . #x9339)	;CJK UNIFIED IDEOGRAPH
                                (#xE570 . #x933A)	;CJK UNIFIED IDEOGRAPH
                                (#xE571 . #x933B)	;CJK UNIFIED IDEOGRAPH
                                (#xE572 . #x933C)	;CJK UNIFIED IDEOGRAPH
                                (#xE573 . #x933D)	;CJK UNIFIED IDEOGRAPH
                                (#xE574 . #x933F)	;CJK UNIFIED IDEOGRAPH
                                (#xE575 . #x9340)	;CJK UNIFIED IDEOGRAPH
                                (#xE576 . #x9341)	;CJK UNIFIED IDEOGRAPH
                                (#xE577 . #x9342)	;CJK UNIFIED IDEOGRAPH
                                (#xE578 . #x9343)	;CJK UNIFIED IDEOGRAPH
                                (#xE579 . #x9344)	;CJK UNIFIED IDEOGRAPH
                                (#xE57A . #x9345)	;CJK UNIFIED IDEOGRAPH
                                (#xE57B . #x9346)	;CJK UNIFIED IDEOGRAPH
                                (#xE57C . #x9347)	;CJK UNIFIED IDEOGRAPH
                                (#xE57D . #x9348)	;CJK UNIFIED IDEOGRAPH
                                (#xE57E . #x9349)	;CJK UNIFIED IDEOGRAPH
                                (#xE580 . #x934A)	;CJK UNIFIED IDEOGRAPH
                                (#xE581 . #x934B)	;CJK UNIFIED IDEOGRAPH
                                (#xE582 . #x934C)	;CJK UNIFIED IDEOGRAPH
                                (#xE583 . #x934D)	;CJK UNIFIED IDEOGRAPH
                                (#xE584 . #x934E)	;CJK UNIFIED IDEOGRAPH
                                (#xE585 . #x934F)	;CJK UNIFIED IDEOGRAPH
                                (#xE586 . #x9350)	;CJK UNIFIED IDEOGRAPH
                                (#xE587 . #x9351)	;CJK UNIFIED IDEOGRAPH
                                (#xE588 . #x9352)	;CJK UNIFIED IDEOGRAPH
                                (#xE589 . #x9353)	;CJK UNIFIED IDEOGRAPH
                                (#xE58A . #x9354)	;CJK UNIFIED IDEOGRAPH
                                (#xE58B . #x9355)	;CJK UNIFIED IDEOGRAPH
                                (#xE58C . #x9356)	;CJK UNIFIED IDEOGRAPH
                                (#xE58D . #x9357)	;CJK UNIFIED IDEOGRAPH
                                (#xE58E . #x9358)	;CJK UNIFIED IDEOGRAPH
                                (#xE58F . #x9359)	;CJK UNIFIED IDEOGRAPH
                                (#xE590 . #x935A)	;CJK UNIFIED IDEOGRAPH
                                (#xE591 . #x935B)	;CJK UNIFIED IDEOGRAPH
                                (#xE592 . #x935C)	;CJK UNIFIED IDEOGRAPH
                                (#xE593 . #x935D)	;CJK UNIFIED IDEOGRAPH
                                (#xE594 . #x935E)	;CJK UNIFIED IDEOGRAPH
                                (#xE595 . #x935F)	;CJK UNIFIED IDEOGRAPH
                                (#xE596 . #x9360)	;CJK UNIFIED IDEOGRAPH
                                (#xE597 . #x9361)	;CJK UNIFIED IDEOGRAPH
                                (#xE598 . #x9362)	;CJK UNIFIED IDEOGRAPH
                                (#xE599 . #x9363)	;CJK UNIFIED IDEOGRAPH
                                (#xE59A . #x9364)	;CJK UNIFIED IDEOGRAPH
                                (#xE59B . #x9365)	;CJK UNIFIED IDEOGRAPH
                                (#xE59C . #x9366)	;CJK UNIFIED IDEOGRAPH
                                (#xE59D . #x9367)	;CJK UNIFIED IDEOGRAPH
                                (#xE59E . #x9368)	;CJK UNIFIED IDEOGRAPH
                                (#xE59F . #x9369)	;CJK UNIFIED IDEOGRAPH
                                (#xE5A0 . #x936B)	;CJK UNIFIED IDEOGRAPH
                                (#xE5A1 . #x6FC9)	;CJK UNIFIED IDEOGRAPH
                                (#xE5A2 . #x6FA7)	;CJK UNIFIED IDEOGRAPH
                                (#xE5A3 . #x6FB9)	;CJK UNIFIED IDEOGRAPH
                                (#xE5A4 . #x6FB6)	;CJK UNIFIED IDEOGRAPH
                                (#xE5A5 . #x6FC2)	;CJK UNIFIED IDEOGRAPH
                                (#xE5A6 . #x6FE1)	;CJK UNIFIED IDEOGRAPH
                                (#xE5A7 . #x6FEE)	;CJK UNIFIED IDEOGRAPH
                                (#xE5A8 . #x6FDE)	;CJK UNIFIED IDEOGRAPH
                                (#xE5A9 . #x6FE0)	;CJK UNIFIED IDEOGRAPH
                                (#xE5AA . #x6FEF)	;CJK UNIFIED IDEOGRAPH
                                (#xE5AB . #x701A)	;CJK UNIFIED IDEOGRAPH
                                (#xE5AC . #x7023)	;CJK UNIFIED IDEOGRAPH
                                (#xE5AD . #x701B)	;CJK UNIFIED IDEOGRAPH
                                (#xE5AE . #x7039)	;CJK UNIFIED IDEOGRAPH
                                (#xE5AF . #x7035)	;CJK UNIFIED IDEOGRAPH
                                (#xE5B0 . #x704F)	;CJK UNIFIED IDEOGRAPH
                                (#xE5B1 . #x705E)	;CJK UNIFIED IDEOGRAPH
                                (#xE5B2 . #x5B80)	;CJK UNIFIED IDEOGRAPH
                                (#xE5B3 . #x5B84)	;CJK UNIFIED IDEOGRAPH
                                (#xE5B4 . #x5B95)	;CJK UNIFIED IDEOGRAPH
                                (#xE5B5 . #x5B93)	;CJK UNIFIED IDEOGRAPH
                                (#xE5B6 . #x5BA5)	;CJK UNIFIED IDEOGRAPH
                                (#xE5B7 . #x5BB8)	;CJK UNIFIED IDEOGRAPH
                                (#xE5B8 . #x752F)	;CJK UNIFIED IDEOGRAPH
                                (#xE5B9 . #x9A9E)	;CJK UNIFIED IDEOGRAPH
                                (#xE5BA . #x6434)	;CJK UNIFIED IDEOGRAPH
                                (#xE5BB . #x5BE4)	;CJK UNIFIED IDEOGRAPH
                                (#xE5BC . #x5BEE)	;CJK UNIFIED IDEOGRAPH
                                (#xE5BD . #x8930)	;CJK UNIFIED IDEOGRAPH
                                (#xE5BE . #x5BF0)	;CJK UNIFIED IDEOGRAPH
                                (#xE5BF . #x8E47)	;CJK UNIFIED IDEOGRAPH
                                (#xE5C0 . #x8B07)	;CJK UNIFIED IDEOGRAPH
                                (#xE5C1 . #x8FB6)	;CJK UNIFIED IDEOGRAPH
                                (#xE5C2 . #x8FD3)	;CJK UNIFIED IDEOGRAPH
                                (#xE5C3 . #x8FD5)	;CJK UNIFIED IDEOGRAPH
                                (#xE5C4 . #x8FE5)	;CJK UNIFIED IDEOGRAPH
                                (#xE5C5 . #x8FEE)	;CJK UNIFIED IDEOGRAPH
                                (#xE5C6 . #x8FE4)	;CJK UNIFIED IDEOGRAPH
                                (#xE5C7 . #x8FE9)	;CJK UNIFIED IDEOGRAPH
                                (#xE5C8 . #x8FE6)	;CJK UNIFIED IDEOGRAPH
                                (#xE5C9 . #x8FF3)	;CJK UNIFIED IDEOGRAPH
                                (#xE5CA . #x8FE8)	;CJK UNIFIED IDEOGRAPH
                                (#xE5CB . #x9005)	;CJK UNIFIED IDEOGRAPH
                                (#xE5CC . #x9004)	;CJK UNIFIED IDEOGRAPH
                                (#xE5CD . #x900B)	;CJK UNIFIED IDEOGRAPH
                                (#xE5CE . #x9026)	;CJK UNIFIED IDEOGRAPH
                                (#xE5CF . #x9011)	;CJK UNIFIED IDEOGRAPH
                                (#xE5D0 . #x900D)	;CJK UNIFIED IDEOGRAPH
                                (#xE5D1 . #x9016)	;CJK UNIFIED IDEOGRAPH
                                (#xE5D2 . #x9021)	;CJK UNIFIED IDEOGRAPH
                                (#xE5D3 . #x9035)	;CJK UNIFIED IDEOGRAPH
                                (#xE5D4 . #x9036)	;CJK UNIFIED IDEOGRAPH
                                (#xE5D5 . #x902D)	;CJK UNIFIED IDEOGRAPH
                                (#xE5D6 . #x902F)	;CJK UNIFIED IDEOGRAPH
                                (#xE5D7 . #x9044)	;CJK UNIFIED IDEOGRAPH
                                (#xE5D8 . #x9051)	;CJK UNIFIED IDEOGRAPH
                                (#xE5D9 . #x9052)	;CJK UNIFIED IDEOGRAPH
                                (#xE5DA . #x9050)	;CJK UNIFIED IDEOGRAPH
                                (#xE5DB . #x9068)	;CJK UNIFIED IDEOGRAPH
                                (#xE5DC . #x9058)	;CJK UNIFIED IDEOGRAPH
                                (#xE5DD . #x9062)	;CJK UNIFIED IDEOGRAPH
                                (#xE5DE . #x905B)	;CJK UNIFIED IDEOGRAPH
                                (#xE5DF . #x66B9)	;CJK UNIFIED IDEOGRAPH
                                (#xE5E0 . #x9074)	;CJK UNIFIED IDEOGRAPH
                                (#xE5E1 . #x907D)	;CJK UNIFIED IDEOGRAPH
                                (#xE5E2 . #x9082)	;CJK UNIFIED IDEOGRAPH
                                (#xE5E3 . #x9088)	;CJK UNIFIED IDEOGRAPH
                                (#xE5E4 . #x9083)	;CJK UNIFIED IDEOGRAPH
                                (#xE5E5 . #x908B)	;CJK UNIFIED IDEOGRAPH
                                (#xE5E6 . #x5F50)	;CJK UNIFIED IDEOGRAPH
                                (#xE5E7 . #x5F57)	;CJK UNIFIED IDEOGRAPH
                                (#xE5E8 . #x5F56)	;CJK UNIFIED IDEOGRAPH
                                (#xE5E9 . #x5F58)	;CJK UNIFIED IDEOGRAPH
                                (#xE5EA . #x5C3B)	;CJK UNIFIED IDEOGRAPH
                                (#xE5EB . #x54AB)	;CJK UNIFIED IDEOGRAPH
                                (#xE5EC . #x5C50)	;CJK UNIFIED IDEOGRAPH
                                (#xE5ED . #x5C59)	;CJK UNIFIED IDEOGRAPH
                                (#xE5EE . #x5B71)	;CJK UNIFIED IDEOGRAPH
                                (#xE5EF . #x5C63)	;CJK UNIFIED IDEOGRAPH
                                (#xE5F0 . #x5C66)	;CJK UNIFIED IDEOGRAPH
                                (#xE5F1 . #x7FBC)	;CJK UNIFIED IDEOGRAPH
                                (#xE5F2 . #x5F2A)	;CJK UNIFIED IDEOGRAPH
                                (#xE5F3 . #x5F29)	;CJK UNIFIED IDEOGRAPH
                                (#xE5F4 . #x5F2D)	;CJK UNIFIED IDEOGRAPH
                                (#xE5F5 . #x8274)	;CJK UNIFIED IDEOGRAPH
                                (#xE5F6 . #x5F3C)	;CJK UNIFIED IDEOGRAPH
                                (#xE5F7 . #x9B3B)	;CJK UNIFIED IDEOGRAPH
                                (#xE5F8 . #x5C6E)	;CJK UNIFIED IDEOGRAPH
                                (#xE5F9 . #x5981)	;CJK UNIFIED IDEOGRAPH
                                (#xE5FA . #x5983)	;CJK UNIFIED IDEOGRAPH
                                (#xE5FB . #x598D)	;CJK UNIFIED IDEOGRAPH
                                (#xE5FC . #x59A9)	;CJK UNIFIED IDEOGRAPH
                                (#xE5FD . #x59AA)	;CJK UNIFIED IDEOGRAPH
                                (#xE5FE . #x59A3)	;CJK UNIFIED IDEOGRAPH
                                (#xE640 . #x936C)	;CJK UNIFIED IDEOGRAPH
                                (#xE641 . #x936D)	;CJK UNIFIED IDEOGRAPH
                                (#xE642 . #x936E)	;CJK UNIFIED IDEOGRAPH
                                (#xE643 . #x936F)	;CJK UNIFIED IDEOGRAPH
                                (#xE644 . #x9370)	;CJK UNIFIED IDEOGRAPH
                                (#xE645 . #x9371)	;CJK UNIFIED IDEOGRAPH
                                (#xE646 . #x9372)	;CJK UNIFIED IDEOGRAPH
                                (#xE647 . #x9373)	;CJK UNIFIED IDEOGRAPH
                                (#xE648 . #x9374)	;CJK UNIFIED IDEOGRAPH
                                (#xE649 . #x9375)	;CJK UNIFIED IDEOGRAPH
                                (#xE64A . #x9376)	;CJK UNIFIED IDEOGRAPH
                                (#xE64B . #x9377)	;CJK UNIFIED IDEOGRAPH
                                (#xE64C . #x9378)	;CJK UNIFIED IDEOGRAPH
                                (#xE64D . #x9379)	;CJK UNIFIED IDEOGRAPH
                                (#xE64E . #x937A)	;CJK UNIFIED IDEOGRAPH
                                (#xE64F . #x937B)	;CJK UNIFIED IDEOGRAPH
                                (#xE650 . #x937C)	;CJK UNIFIED IDEOGRAPH
                                (#xE651 . #x937D)	;CJK UNIFIED IDEOGRAPH
                                (#xE652 . #x937E)	;CJK UNIFIED IDEOGRAPH
                                (#xE653 . #x937F)	;CJK UNIFIED IDEOGRAPH
                                (#xE654 . #x9380)	;CJK UNIFIED IDEOGRAPH
                                (#xE655 . #x9381)	;CJK UNIFIED IDEOGRAPH
                                (#xE656 . #x9382)	;CJK UNIFIED IDEOGRAPH
                                (#xE657 . #x9383)	;CJK UNIFIED IDEOGRAPH
                                (#xE658 . #x9384)	;CJK UNIFIED IDEOGRAPH
                                (#xE659 . #x9385)	;CJK UNIFIED IDEOGRAPH
                                (#xE65A . #x9386)	;CJK UNIFIED IDEOGRAPH
                                (#xE65B . #x9387)	;CJK UNIFIED IDEOGRAPH
                                (#xE65C . #x9388)	;CJK UNIFIED IDEOGRAPH
                                (#xE65D . #x9389)	;CJK UNIFIED IDEOGRAPH
                                (#xE65E . #x938A)	;CJK UNIFIED IDEOGRAPH
                                (#xE65F . #x938B)	;CJK UNIFIED IDEOGRAPH
                                (#xE660 . #x938C)	;CJK UNIFIED IDEOGRAPH
                                (#xE661 . #x938D)	;CJK UNIFIED IDEOGRAPH
                                (#xE662 . #x938E)	;CJK UNIFIED IDEOGRAPH
                                (#xE663 . #x9390)	;CJK UNIFIED IDEOGRAPH
                                (#xE664 . #x9391)	;CJK UNIFIED IDEOGRAPH
                                (#xE665 . #x9392)	;CJK UNIFIED IDEOGRAPH
                                (#xE666 . #x9393)	;CJK UNIFIED IDEOGRAPH
                                (#xE667 . #x9394)	;CJK UNIFIED IDEOGRAPH
                                (#xE668 . #x9395)	;CJK UNIFIED IDEOGRAPH
                                (#xE669 . #x9396)	;CJK UNIFIED IDEOGRAPH
                                (#xE66A . #x9397)	;CJK UNIFIED IDEOGRAPH
                                (#xE66B . #x9398)	;CJK UNIFIED IDEOGRAPH
                                (#xE66C . #x9399)	;CJK UNIFIED IDEOGRAPH
                                (#xE66D . #x939A)	;CJK UNIFIED IDEOGRAPH
                                (#xE66E . #x939B)	;CJK UNIFIED IDEOGRAPH
                                (#xE66F . #x939C)	;CJK UNIFIED IDEOGRAPH
                                (#xE670 . #x939D)	;CJK UNIFIED IDEOGRAPH
                                (#xE671 . #x939E)	;CJK UNIFIED IDEOGRAPH
                                (#xE672 . #x939F)	;CJK UNIFIED IDEOGRAPH
                                (#xE673 . #x93A0)	;CJK UNIFIED IDEOGRAPH
                                (#xE674 . #x93A1)	;CJK UNIFIED IDEOGRAPH
                                (#xE675 . #x93A2)	;CJK UNIFIED IDEOGRAPH
                                (#xE676 . #x93A3)	;CJK UNIFIED IDEOGRAPH
                                (#xE677 . #x93A4)	;CJK UNIFIED IDEOGRAPH
                                (#xE678 . #x93A5)	;CJK UNIFIED IDEOGRAPH
                                (#xE679 . #x93A6)	;CJK UNIFIED IDEOGRAPH
                                (#xE67A . #x93A7)	;CJK UNIFIED IDEOGRAPH
                                (#xE67B . #x93A8)	;CJK UNIFIED IDEOGRAPH
                                (#xE67C . #x93A9)	;CJK UNIFIED IDEOGRAPH
                                (#xE67D . #x93AA)	;CJK UNIFIED IDEOGRAPH
                                (#xE67E . #x93AB)	;CJK UNIFIED IDEOGRAPH
                                (#xE680 . #x93AC)	;CJK UNIFIED IDEOGRAPH
                                (#xE681 . #x93AD)	;CJK UNIFIED IDEOGRAPH
                                (#xE682 . #x93AE)	;CJK UNIFIED IDEOGRAPH
                                (#xE683 . #x93AF)	;CJK UNIFIED IDEOGRAPH
                                (#xE684 . #x93B0)	;CJK UNIFIED IDEOGRAPH
                                (#xE685 . #x93B1)	;CJK UNIFIED IDEOGRAPH
                                (#xE686 . #x93B2)	;CJK UNIFIED IDEOGRAPH
                                (#xE687 . #x93B3)	;CJK UNIFIED IDEOGRAPH
                                (#xE688 . #x93B4)	;CJK UNIFIED IDEOGRAPH
                                (#xE689 . #x93B5)	;CJK UNIFIED IDEOGRAPH
                                (#xE68A . #x93B6)	;CJK UNIFIED IDEOGRAPH
                                (#xE68B . #x93B7)	;CJK UNIFIED IDEOGRAPH
                                (#xE68C . #x93B8)	;CJK UNIFIED IDEOGRAPH
                                (#xE68D . #x93B9)	;CJK UNIFIED IDEOGRAPH
                                (#xE68E . #x93BA)	;CJK UNIFIED IDEOGRAPH
                                (#xE68F . #x93BB)	;CJK UNIFIED IDEOGRAPH
                                (#xE690 . #x93BC)	;CJK UNIFIED IDEOGRAPH
                                (#xE691 . #x93BD)	;CJK UNIFIED IDEOGRAPH
                                (#xE692 . #x93BE)	;CJK UNIFIED IDEOGRAPH
                                (#xE693 . #x93BF)	;CJK UNIFIED IDEOGRAPH
                                (#xE694 . #x93C0)	;CJK UNIFIED IDEOGRAPH
                                (#xE695 . #x93C1)	;CJK UNIFIED IDEOGRAPH
                                (#xE696 . #x93C2)	;CJK UNIFIED IDEOGRAPH
                                (#xE697 . #x93C3)	;CJK UNIFIED IDEOGRAPH
                                (#xE698 . #x93C4)	;CJK UNIFIED IDEOGRAPH
                                (#xE699 . #x93C5)	;CJK UNIFIED IDEOGRAPH
                                (#xE69A . #x93C6)	;CJK UNIFIED IDEOGRAPH
                                (#xE69B . #x93C7)	;CJK UNIFIED IDEOGRAPH
                                (#xE69C . #x93C8)	;CJK UNIFIED IDEOGRAPH
                                (#xE69D . #x93C9)	;CJK UNIFIED IDEOGRAPH
                                (#xE69E . #x93CB)	;CJK UNIFIED IDEOGRAPH
                                (#xE69F . #x93CC)	;CJK UNIFIED IDEOGRAPH
                                (#xE6A0 . #x93CD)	;CJK UNIFIED IDEOGRAPH
                                (#xE6A1 . #x5997)	;CJK UNIFIED IDEOGRAPH
                                (#xE6A2 . #x59CA)	;CJK UNIFIED IDEOGRAPH
                                (#xE6A3 . #x59AB)	;CJK UNIFIED IDEOGRAPH
                                (#xE6A4 . #x599E)	;CJK UNIFIED IDEOGRAPH
                                (#xE6A5 . #x59A4)	;CJK UNIFIED IDEOGRAPH
                                (#xE6A6 . #x59D2)	;CJK UNIFIED IDEOGRAPH
                                (#xE6A7 . #x59B2)	;CJK UNIFIED IDEOGRAPH
                                (#xE6A8 . #x59AF)	;CJK UNIFIED IDEOGRAPH
                                (#xE6A9 . #x59D7)	;CJK UNIFIED IDEOGRAPH
                                (#xE6AA . #x59BE)	;CJK UNIFIED IDEOGRAPH
                                (#xE6AB . #x5A05)	;CJK UNIFIED IDEOGRAPH
                                (#xE6AC . #x5A06)	;CJK UNIFIED IDEOGRAPH
                                (#xE6AD . #x59DD)	;CJK UNIFIED IDEOGRAPH
                                (#xE6AE . #x5A08)	;CJK UNIFIED IDEOGRAPH
                                (#xE6AF . #x59E3)	;CJK UNIFIED IDEOGRAPH
                                (#xE6B0 . #x59D8)	;CJK UNIFIED IDEOGRAPH
                                (#xE6B1 . #x59F9)	;CJK UNIFIED IDEOGRAPH
                                (#xE6B2 . #x5A0C)	;CJK UNIFIED IDEOGRAPH
                                (#xE6B3 . #x5A09)	;CJK UNIFIED IDEOGRAPH
                                (#xE6B4 . #x5A32)	;CJK UNIFIED IDEOGRAPH
                                (#xE6B5 . #x5A34)	;CJK UNIFIED IDEOGRAPH
                                (#xE6B6 . #x5A11)	;CJK UNIFIED IDEOGRAPH
                                (#xE6B7 . #x5A23)	;CJK UNIFIED IDEOGRAPH
                                (#xE6B8 . #x5A13)	;CJK UNIFIED IDEOGRAPH
                                (#xE6B9 . #x5A40)	;CJK UNIFIED IDEOGRAPH
                                (#xE6BA . #x5A67)	;CJK UNIFIED IDEOGRAPH
                                (#xE6BB . #x5A4A)	;CJK UNIFIED IDEOGRAPH
                                (#xE6BC . #x5A55)	;CJK UNIFIED IDEOGRAPH
                                (#xE6BD . #x5A3C)	;CJK UNIFIED IDEOGRAPH
                                (#xE6BE . #x5A62)	;CJK UNIFIED IDEOGRAPH
                                (#xE6BF . #x5A75)	;CJK UNIFIED IDEOGRAPH
                                (#xE6C0 . #x80EC)	;CJK UNIFIED IDEOGRAPH
                                (#xE6C1 . #x5AAA)	;CJK UNIFIED IDEOGRAPH
                                (#xE6C2 . #x5A9B)	;CJK UNIFIED IDEOGRAPH
                                (#xE6C3 . #x5A77)	;CJK UNIFIED IDEOGRAPH
                                (#xE6C4 . #x5A7A)	;CJK UNIFIED IDEOGRAPH
                                (#xE6C5 . #x5ABE)	;CJK UNIFIED IDEOGRAPH
                                (#xE6C6 . #x5AEB)	;CJK UNIFIED IDEOGRAPH
                                (#xE6C7 . #x5AB2)	;CJK UNIFIED IDEOGRAPH
                                (#xE6C8 . #x5AD2)	;CJK UNIFIED IDEOGRAPH
                                (#xE6C9 . #x5AD4)	;CJK UNIFIED IDEOGRAPH
                                (#xE6CA . #x5AB8)	;CJK UNIFIED IDEOGRAPH
                                (#xE6CB . #x5AE0)	;CJK UNIFIED IDEOGRAPH
                                (#xE6CC . #x5AE3)	;CJK UNIFIED IDEOGRAPH
                                (#xE6CD . #x5AF1)	;CJK UNIFIED IDEOGRAPH
                                (#xE6CE . #x5AD6)	;CJK UNIFIED IDEOGRAPH
                                (#xE6CF . #x5AE6)	;CJK UNIFIED IDEOGRAPH
                                (#xE6D0 . #x5AD8)	;CJK UNIFIED IDEOGRAPH
                                (#xE6D1 . #x5ADC)	;CJK UNIFIED IDEOGRAPH
                                (#xE6D2 . #x5B09)	;CJK UNIFIED IDEOGRAPH
                                (#xE6D3 . #x5B17)	;CJK UNIFIED IDEOGRAPH
                                (#xE6D4 . #x5B16)	;CJK UNIFIED IDEOGRAPH
                                (#xE6D5 . #x5B32)	;CJK UNIFIED IDEOGRAPH
                                (#xE6D6 . #x5B37)	;CJK UNIFIED IDEOGRAPH
                                (#xE6D7 . #x5B40)	;CJK UNIFIED IDEOGRAPH
                                (#xE6D8 . #x5C15)	;CJK UNIFIED IDEOGRAPH
                                (#xE6D9 . #x5C1C)	;CJK UNIFIED IDEOGRAPH
                                (#xE6DA . #x5B5A)	;CJK UNIFIED IDEOGRAPH
                                (#xE6DB . #x5B65)	;CJK UNIFIED IDEOGRAPH
                                (#xE6DC . #x5B73)	;CJK UNIFIED IDEOGRAPH
                                (#xE6DD . #x5B51)	;CJK UNIFIED IDEOGRAPH
                                (#xE6DE . #x5B53)	;CJK UNIFIED IDEOGRAPH
                                (#xE6DF . #x5B62)	;CJK UNIFIED IDEOGRAPH
                                (#xE6E0 . #x9A75)	;CJK UNIFIED IDEOGRAPH
                                (#xE6E1 . #x9A77)	;CJK UNIFIED IDEOGRAPH
                                (#xE6E2 . #x9A78)	;CJK UNIFIED IDEOGRAPH
                                (#xE6E3 . #x9A7A)	;CJK UNIFIED IDEOGRAPH
                                (#xE6E4 . #x9A7F)	;CJK UNIFIED IDEOGRAPH
                                (#xE6E5 . #x9A7D)	;CJK UNIFIED IDEOGRAPH
                                (#xE6E6 . #x9A80)	;CJK UNIFIED IDEOGRAPH
                                (#xE6E7 . #x9A81)	;CJK UNIFIED IDEOGRAPH
                                (#xE6E8 . #x9A85)	;CJK UNIFIED IDEOGRAPH
                                (#xE6E9 . #x9A88)	;CJK UNIFIED IDEOGRAPH
                                (#xE6EA . #x9A8A)	;CJK UNIFIED IDEOGRAPH
                                (#xE6EB . #x9A90)	;CJK UNIFIED IDEOGRAPH
                                (#xE6EC . #x9A92)	;CJK UNIFIED IDEOGRAPH
                                (#xE6ED . #x9A93)	;CJK UNIFIED IDEOGRAPH
                                (#xE6EE . #x9A96)	;CJK UNIFIED IDEOGRAPH
                                (#xE6EF . #x9A98)	;CJK UNIFIED IDEOGRAPH
                                (#xE6F0 . #x9A9B)	;CJK UNIFIED IDEOGRAPH
                                (#xE6F1 . #x9A9C)	;CJK UNIFIED IDEOGRAPH
                                (#xE6F2 . #x9A9D)	;CJK UNIFIED IDEOGRAPH
                                (#xE6F3 . #x9A9F)	;CJK UNIFIED IDEOGRAPH
                                (#xE6F4 . #x9AA0)	;CJK UNIFIED IDEOGRAPH
                                (#xE6F5 . #x9AA2)	;CJK UNIFIED IDEOGRAPH
                                (#xE6F6 . #x9AA3)	;CJK UNIFIED IDEOGRAPH
                                (#xE6F7 . #x9AA5)	;CJK UNIFIED IDEOGRAPH
                                (#xE6F8 . #x9AA7)	;CJK UNIFIED IDEOGRAPH
                                (#xE6F9 . #x7E9F)	;CJK UNIFIED IDEOGRAPH
                                (#xE6FA . #x7EA1)	;CJK UNIFIED IDEOGRAPH
                                (#xE6FB . #x7EA3)	;CJK UNIFIED IDEOGRAPH
                                (#xE6FC . #x7EA5)	;CJK UNIFIED IDEOGRAPH
                                (#xE6FD . #x7EA8)	;CJK UNIFIED IDEOGRAPH
                                (#xE6FE . #x7EA9)	;CJK UNIFIED IDEOGRAPH
                                (#xE740 . #x93CE)	;CJK UNIFIED IDEOGRAPH
                                (#xE741 . #x93CF)	;CJK UNIFIED IDEOGRAPH
                                (#xE742 . #x93D0)	;CJK UNIFIED IDEOGRAPH
                                (#xE743 . #x93D1)	;CJK UNIFIED IDEOGRAPH
                                (#xE744 . #x93D2)	;CJK UNIFIED IDEOGRAPH
                                (#xE745 . #x93D3)	;CJK UNIFIED IDEOGRAPH
                                (#xE746 . #x93D4)	;CJK UNIFIED IDEOGRAPH
                                (#xE747 . #x93D5)	;CJK UNIFIED IDEOGRAPH
                                (#xE748 . #x93D7)	;CJK UNIFIED IDEOGRAPH
                                (#xE749 . #x93D8)	;CJK UNIFIED IDEOGRAPH
                                (#xE74A . #x93D9)	;CJK UNIFIED IDEOGRAPH
                                (#xE74B . #x93DA)	;CJK UNIFIED IDEOGRAPH
                                (#xE74C . #x93DB)	;CJK UNIFIED IDEOGRAPH
                                (#xE74D . #x93DC)	;CJK UNIFIED IDEOGRAPH
                                (#xE74E . #x93DD)	;CJK UNIFIED IDEOGRAPH
                                (#xE74F . #x93DE)	;CJK UNIFIED IDEOGRAPH
                                (#xE750 . #x93DF)	;CJK UNIFIED IDEOGRAPH
                                (#xE751 . #x93E0)	;CJK UNIFIED IDEOGRAPH
                                (#xE752 . #x93E1)	;CJK UNIFIED IDEOGRAPH
                                (#xE753 . #x93E2)	;CJK UNIFIED IDEOGRAPH
                                (#xE754 . #x93E3)	;CJK UNIFIED IDEOGRAPH
                                (#xE755 . #x93E4)	;CJK UNIFIED IDEOGRAPH
                                (#xE756 . #x93E5)	;CJK UNIFIED IDEOGRAPH
                                (#xE757 . #x93E6)	;CJK UNIFIED IDEOGRAPH
                                (#xE758 . #x93E7)	;CJK UNIFIED IDEOGRAPH
                                (#xE759 . #x93E8)	;CJK UNIFIED IDEOGRAPH
                                (#xE75A . #x93E9)	;CJK UNIFIED IDEOGRAPH
                                (#xE75B . #x93EA)	;CJK UNIFIED IDEOGRAPH
                                (#xE75C . #x93EB)	;CJK UNIFIED IDEOGRAPH
                                (#xE75D . #x93EC)	;CJK UNIFIED IDEOGRAPH
                                (#xE75E . #x93ED)	;CJK UNIFIED IDEOGRAPH
                                (#xE75F . #x93EE)	;CJK UNIFIED IDEOGRAPH
                                (#xE760 . #x93EF)	;CJK UNIFIED IDEOGRAPH
                                (#xE761 . #x93F0)	;CJK UNIFIED IDEOGRAPH
                                (#xE762 . #x93F1)	;CJK UNIFIED IDEOGRAPH
                                (#xE763 . #x93F2)	;CJK UNIFIED IDEOGRAPH
                                (#xE764 . #x93F3)	;CJK UNIFIED IDEOGRAPH
                                (#xE765 . #x93F4)	;CJK UNIFIED IDEOGRAPH
                                (#xE766 . #x93F5)	;CJK UNIFIED IDEOGRAPH
                                (#xE767 . #x93F6)	;CJK UNIFIED IDEOGRAPH
                                (#xE768 . #x93F7)	;CJK UNIFIED IDEOGRAPH
                                (#xE769 . #x93F8)	;CJK UNIFIED IDEOGRAPH
                                (#xE76A . #x93F9)	;CJK UNIFIED IDEOGRAPH
                                (#xE76B . #x93FA)	;CJK UNIFIED IDEOGRAPH
                                (#xE76C . #x93FB)	;CJK UNIFIED IDEOGRAPH
                                (#xE76D . #x93FC)	;CJK UNIFIED IDEOGRAPH
                                (#xE76E . #x93FD)	;CJK UNIFIED IDEOGRAPH
                                (#xE76F . #x93FE)	;CJK UNIFIED IDEOGRAPH
                                (#xE770 . #x93FF)	;CJK UNIFIED IDEOGRAPH
                                (#xE771 . #x9400)	;CJK UNIFIED IDEOGRAPH
                                (#xE772 . #x9401)	;CJK UNIFIED IDEOGRAPH
                                (#xE773 . #x9402)	;CJK UNIFIED IDEOGRAPH
                                (#xE774 . #x9403)	;CJK UNIFIED IDEOGRAPH
                                (#xE775 . #x9404)	;CJK UNIFIED IDEOGRAPH
                                (#xE776 . #x9405)	;CJK UNIFIED IDEOGRAPH
                                (#xE777 . #x9406)	;CJK UNIFIED IDEOGRAPH
                                (#xE778 . #x9407)	;CJK UNIFIED IDEOGRAPH
                                (#xE779 . #x9408)	;CJK UNIFIED IDEOGRAPH
                                (#xE77A . #x9409)	;CJK UNIFIED IDEOGRAPH
                                (#xE77B . #x940A)	;CJK UNIFIED IDEOGRAPH
                                (#xE77C . #x940B)	;CJK UNIFIED IDEOGRAPH
                                (#xE77D . #x940C)	;CJK UNIFIED IDEOGRAPH
                                (#xE77E . #x940D)	;CJK UNIFIED IDEOGRAPH
                                (#xE780 . #x940E)	;CJK UNIFIED IDEOGRAPH
                                (#xE781 . #x940F)	;CJK UNIFIED IDEOGRAPH
                                (#xE782 . #x9410)	;CJK UNIFIED IDEOGRAPH
                                (#xE783 . #x9411)	;CJK UNIFIED IDEOGRAPH
                                (#xE784 . #x9412)	;CJK UNIFIED IDEOGRAPH
                                (#xE785 . #x9413)	;CJK UNIFIED IDEOGRAPH
                                (#xE786 . #x9414)	;CJK UNIFIED IDEOGRAPH
                                (#xE787 . #x9415)	;CJK UNIFIED IDEOGRAPH
                                (#xE788 . #x9416)	;CJK UNIFIED IDEOGRAPH
                                (#xE789 . #x9417)	;CJK UNIFIED IDEOGRAPH
                                (#xE78A . #x9418)	;CJK UNIFIED IDEOGRAPH
                                (#xE78B . #x9419)	;CJK UNIFIED IDEOGRAPH
                                (#xE78C . #x941A)	;CJK UNIFIED IDEOGRAPH
                                (#xE78D . #x941B)	;CJK UNIFIED IDEOGRAPH
                                (#xE78E . #x941C)	;CJK UNIFIED IDEOGRAPH
                                (#xE78F . #x941D)	;CJK UNIFIED IDEOGRAPH
                                (#xE790 . #x941E)	;CJK UNIFIED IDEOGRAPH
                                (#xE791 . #x941F)	;CJK UNIFIED IDEOGRAPH
                                (#xE792 . #x9420)	;CJK UNIFIED IDEOGRAPH
                                (#xE793 . #x9421)	;CJK UNIFIED IDEOGRAPH
                                (#xE794 . #x9422)	;CJK UNIFIED IDEOGRAPH
                                (#xE795 . #x9423)	;CJK UNIFIED IDEOGRAPH
                                (#xE796 . #x9424)	;CJK UNIFIED IDEOGRAPH
                                (#xE797 . #x9425)	;CJK UNIFIED IDEOGRAPH
                                (#xE798 . #x9426)	;CJK UNIFIED IDEOGRAPH
                                (#xE799 . #x9427)	;CJK UNIFIED IDEOGRAPH
                                (#xE79A . #x9428)	;CJK UNIFIED IDEOGRAPH
                                (#xE79B . #x9429)	;CJK UNIFIED IDEOGRAPH
                                (#xE79C . #x942A)	;CJK UNIFIED IDEOGRAPH
                                (#xE79D . #x942B)	;CJK UNIFIED IDEOGRAPH
                                (#xE79E . #x942C)	;CJK UNIFIED IDEOGRAPH
                                (#xE79F . #x942D)	;CJK UNIFIED IDEOGRAPH
                                (#xE7A0 . #x942E)	;CJK UNIFIED IDEOGRAPH
                                (#xE7A1 . #x7EAD)	;CJK UNIFIED IDEOGRAPH
                                (#xE7A2 . #x7EB0)	;CJK UNIFIED IDEOGRAPH
                                (#xE7A3 . #x7EBE)	;CJK UNIFIED IDEOGRAPH
                                (#xE7A4 . #x7EC0)	;CJK UNIFIED IDEOGRAPH
                                (#xE7A5 . #x7EC1)	;CJK UNIFIED IDEOGRAPH
                                (#xE7A6 . #x7EC2)	;CJK UNIFIED IDEOGRAPH
                                (#xE7A7 . #x7EC9)	;CJK UNIFIED IDEOGRAPH
                                (#xE7A8 . #x7ECB)	;CJK UNIFIED IDEOGRAPH
                                (#xE7A9 . #x7ECC)	;CJK UNIFIED IDEOGRAPH
                                (#xE7AA . #x7ED0)	;CJK UNIFIED IDEOGRAPH
                                (#xE7AB . #x7ED4)	;CJK UNIFIED IDEOGRAPH
                                (#xE7AC . #x7ED7)	;CJK UNIFIED IDEOGRAPH
                                (#xE7AD . #x7EDB)	;CJK UNIFIED IDEOGRAPH
                                (#xE7AE . #x7EE0)	;CJK UNIFIED IDEOGRAPH
                                (#xE7AF . #x7EE1)	;CJK UNIFIED IDEOGRAPH
                                (#xE7B0 . #x7EE8)	;CJK UNIFIED IDEOGRAPH
                                (#xE7B1 . #x7EEB)	;CJK UNIFIED IDEOGRAPH
                                (#xE7B2 . #x7EEE)	;CJK UNIFIED IDEOGRAPH
                                (#xE7B3 . #x7EEF)	;CJK UNIFIED IDEOGRAPH
                                (#xE7B4 . #x7EF1)	;CJK UNIFIED IDEOGRAPH
                                (#xE7B5 . #x7EF2)	;CJK UNIFIED IDEOGRAPH
                                (#xE7B6 . #x7F0D)	;CJK UNIFIED IDEOGRAPH
                                (#xE7B7 . #x7EF6)	;CJK UNIFIED IDEOGRAPH
                                (#xE7B8 . #x7EFA)	;CJK UNIFIED IDEOGRAPH
                                (#xE7B9 . #x7EFB)	;CJK UNIFIED IDEOGRAPH
                                (#xE7BA . #x7EFE)	;CJK UNIFIED IDEOGRAPH
                                (#xE7BB . #x7F01)	;CJK UNIFIED IDEOGRAPH
                                (#xE7BC . #x7F02)	;CJK UNIFIED IDEOGRAPH
                                (#xE7BD . #x7F03)	;CJK UNIFIED IDEOGRAPH
                                (#xE7BE . #x7F07)	;CJK UNIFIED IDEOGRAPH
                                (#xE7BF . #x7F08)	;CJK UNIFIED IDEOGRAPH
                                (#xE7C0 . #x7F0B)	;CJK UNIFIED IDEOGRAPH
                                (#xE7C1 . #x7F0C)	;CJK UNIFIED IDEOGRAPH
                                (#xE7C2 . #x7F0F)	;CJK UNIFIED IDEOGRAPH
                                (#xE7C3 . #x7F11)	;CJK UNIFIED IDEOGRAPH
                                (#xE7C4 . #x7F12)	;CJK UNIFIED IDEOGRAPH
                                (#xE7C5 . #x7F17)	;CJK UNIFIED IDEOGRAPH
                                (#xE7C6 . #x7F19)	;CJK UNIFIED IDEOGRAPH
                                (#xE7C7 . #x7F1C)	;CJK UNIFIED IDEOGRAPH
                                (#xE7C8 . #x7F1B)	;CJK UNIFIED IDEOGRAPH
                                (#xE7C9 . #x7F1F)	;CJK UNIFIED IDEOGRAPH
                                (#xE7CA . #x7F21)	;CJK UNIFIED IDEOGRAPH
                                (#xE7CB . #x7F22)	;CJK UNIFIED IDEOGRAPH
                                (#xE7CC . #x7F23)	;CJK UNIFIED IDEOGRAPH
                                (#xE7CD . #x7F24)	;CJK UNIFIED IDEOGRAPH
                                (#xE7CE . #x7F25)	;CJK UNIFIED IDEOGRAPH
                                (#xE7CF . #x7F26)	;CJK UNIFIED IDEOGRAPH
                                (#xE7D0 . #x7F27)	;CJK UNIFIED IDEOGRAPH
                                (#xE7D1 . #x7F2A)	;CJK UNIFIED IDEOGRAPH
                                (#xE7D2 . #x7F2B)	;CJK UNIFIED IDEOGRAPH
                                (#xE7D3 . #x7F2C)	;CJK UNIFIED IDEOGRAPH
                                (#xE7D4 . #x7F2D)	;CJK UNIFIED IDEOGRAPH
                                (#xE7D5 . #x7F2F)	;CJK UNIFIED IDEOGRAPH
                                (#xE7D6 . #x7F30)	;CJK UNIFIED IDEOGRAPH
                                (#xE7D7 . #x7F31)	;CJK UNIFIED IDEOGRAPH
                                (#xE7D8 . #x7F32)	;CJK UNIFIED IDEOGRAPH
                                (#xE7D9 . #x7F33)	;CJK UNIFIED IDEOGRAPH
                                (#xE7DA . #x7F35)	;CJK UNIFIED IDEOGRAPH
                                (#xE7DB . #x5E7A)	;CJK UNIFIED IDEOGRAPH
                                (#xE7DC . #x757F)	;CJK UNIFIED IDEOGRAPH
                                (#xE7DD . #x5DDB)	;CJK UNIFIED IDEOGRAPH
                                (#xE7DE . #x753E)	;CJK UNIFIED IDEOGRAPH
                                (#xE7DF . #x9095)	;CJK UNIFIED IDEOGRAPH
                                (#xE7E0 . #x738E)	;CJK UNIFIED IDEOGRAPH
                                (#xE7E1 . #x7391)	;CJK UNIFIED IDEOGRAPH
                                (#xE7E2 . #x73AE)	;CJK UNIFIED IDEOGRAPH
                                (#xE7E3 . #x73A2)	;CJK UNIFIED IDEOGRAPH
                                (#xE7E4 . #x739F)	;CJK UNIFIED IDEOGRAPH
                                (#xE7E5 . #x73CF)	;CJK UNIFIED IDEOGRAPH
                                (#xE7E6 . #x73C2)	;CJK UNIFIED IDEOGRAPH
                                (#xE7E7 . #x73D1)	;CJK UNIFIED IDEOGRAPH
                                (#xE7E8 . #x73B7)	;CJK UNIFIED IDEOGRAPH
                                (#xE7E9 . #x73B3)	;CJK UNIFIED IDEOGRAPH
                                (#xE7EA . #x73C0)	;CJK UNIFIED IDEOGRAPH
                                (#xE7EB . #x73C9)	;CJK UNIFIED IDEOGRAPH
                                (#xE7EC . #x73C8)	;CJK UNIFIED IDEOGRAPH
                                (#xE7ED . #x73E5)	;CJK UNIFIED IDEOGRAPH
                                (#xE7EE . #x73D9)	;CJK UNIFIED IDEOGRAPH
                                (#xE7EF . #x987C)	;CJK UNIFIED IDEOGRAPH
                                (#xE7F0 . #x740A)	;CJK UNIFIED IDEOGRAPH
                                (#xE7F1 . #x73E9)	;CJK UNIFIED IDEOGRAPH
                                (#xE7F2 . #x73E7)	;CJK UNIFIED IDEOGRAPH
                                (#xE7F3 . #x73DE)	;CJK UNIFIED IDEOGRAPH
                                (#xE7F4 . #x73BA)	;CJK UNIFIED IDEOGRAPH
                                (#xE7F5 . #x73F2)	;CJK UNIFIED IDEOGRAPH
                                (#xE7F6 . #x740F)	;CJK UNIFIED IDEOGRAPH
                                (#xE7F7 . #x742A)	;CJK UNIFIED IDEOGRAPH
                                (#xE7F8 . #x745B)	;CJK UNIFIED IDEOGRAPH
                                (#xE7F9 . #x7426)	;CJK UNIFIED IDEOGRAPH
                                (#xE7FA . #x7425)	;CJK UNIFIED IDEOGRAPH
                                (#xE7FB . #x7428)	;CJK UNIFIED IDEOGRAPH
                                (#xE7FC . #x7430)	;CJK UNIFIED IDEOGRAPH
                                (#xE7FD . #x742E)	;CJK UNIFIED IDEOGRAPH
                                (#xE7FE . #x742C)	;CJK UNIFIED IDEOGRAPH
                                (#xE840 . #x942F)	;CJK UNIFIED IDEOGRAPH
                                (#xE841 . #x9430)	;CJK UNIFIED IDEOGRAPH
                                (#xE842 . #x9431)	;CJK UNIFIED IDEOGRAPH
                                (#xE843 . #x9432)	;CJK UNIFIED IDEOGRAPH
                                (#xE844 . #x9433)	;CJK UNIFIED IDEOGRAPH
                                (#xE845 . #x9434)	;CJK UNIFIED IDEOGRAPH
                                (#xE846 . #x9435)	;CJK UNIFIED IDEOGRAPH
                                (#xE847 . #x9436)	;CJK UNIFIED IDEOGRAPH
                                (#xE848 . #x9437)	;CJK UNIFIED IDEOGRAPH
                                (#xE849 . #x9438)	;CJK UNIFIED IDEOGRAPH
                                (#xE84A . #x9439)	;CJK UNIFIED IDEOGRAPH
                                (#xE84B . #x943A)	;CJK UNIFIED IDEOGRAPH
                                (#xE84C . #x943B)	;CJK UNIFIED IDEOGRAPH
                                (#xE84D . #x943C)	;CJK UNIFIED IDEOGRAPH
                                (#xE84E . #x943D)	;CJK UNIFIED IDEOGRAPH
                                (#xE84F . #x943F)	;CJK UNIFIED IDEOGRAPH
                                (#xE850 . #x9440)	;CJK UNIFIED IDEOGRAPH
                                (#xE851 . #x9441)	;CJK UNIFIED IDEOGRAPH
                                (#xE852 . #x9442)	;CJK UNIFIED IDEOGRAPH
                                (#xE853 . #x9443)	;CJK UNIFIED IDEOGRAPH
                                (#xE854 . #x9444)	;CJK UNIFIED IDEOGRAPH
                                (#xE855 . #x9445)	;CJK UNIFIED IDEOGRAPH
                                (#xE856 . #x9446)	;CJK UNIFIED IDEOGRAPH
                                (#xE857 . #x9447)	;CJK UNIFIED IDEOGRAPH
                                (#xE858 . #x9448)	;CJK UNIFIED IDEOGRAPH
                                (#xE859 . #x9449)	;CJK UNIFIED IDEOGRAPH
                                (#xE85A . #x944A)	;CJK UNIFIED IDEOGRAPH
                                (#xE85B . #x944B)	;CJK UNIFIED IDEOGRAPH
                                (#xE85C . #x944C)	;CJK UNIFIED IDEOGRAPH
                                (#xE85D . #x944D)	;CJK UNIFIED IDEOGRAPH
                                (#xE85E . #x944E)	;CJK UNIFIED IDEOGRAPH
                                (#xE85F . #x944F)	;CJK UNIFIED IDEOGRAPH
                                (#xE860 . #x9450)	;CJK UNIFIED IDEOGRAPH
                                (#xE861 . #x9451)	;CJK UNIFIED IDEOGRAPH
                                (#xE862 . #x9452)	;CJK UNIFIED IDEOGRAPH
                                (#xE863 . #x9453)	;CJK UNIFIED IDEOGRAPH
                                (#xE864 . #x9454)	;CJK UNIFIED IDEOGRAPH
                                (#xE865 . #x9455)	;CJK UNIFIED IDEOGRAPH
                                (#xE866 . #x9456)	;CJK UNIFIED IDEOGRAPH
                                (#xE867 . #x9457)	;CJK UNIFIED IDEOGRAPH
                                (#xE868 . #x9458)	;CJK UNIFIED IDEOGRAPH
                                (#xE869 . #x9459)	;CJK UNIFIED IDEOGRAPH
                                (#xE86A . #x945A)	;CJK UNIFIED IDEOGRAPH
                                (#xE86B . #x945B)	;CJK UNIFIED IDEOGRAPH
                                (#xE86C . #x945C)	;CJK UNIFIED IDEOGRAPH
                                (#xE86D . #x945D)	;CJK UNIFIED IDEOGRAPH
                                (#xE86E . #x945E)	;CJK UNIFIED IDEOGRAPH
                                (#xE86F . #x945F)	;CJK UNIFIED IDEOGRAPH
                                (#xE870 . #x9460)	;CJK UNIFIED IDEOGRAPH
                                (#xE871 . #x9461)	;CJK UNIFIED IDEOGRAPH
                                (#xE872 . #x9462)	;CJK UNIFIED IDEOGRAPH
                                (#xE873 . #x9463)	;CJK UNIFIED IDEOGRAPH
                                (#xE874 . #x9464)	;CJK UNIFIED IDEOGRAPH
                                (#xE875 . #x9465)	;CJK UNIFIED IDEOGRAPH
                                (#xE876 . #x9466)	;CJK UNIFIED IDEOGRAPH
                                (#xE877 . #x9467)	;CJK UNIFIED IDEOGRAPH
                                (#xE878 . #x9468)	;CJK UNIFIED IDEOGRAPH
                                (#xE879 . #x9469)	;CJK UNIFIED IDEOGRAPH
                                (#xE87A . #x946A)	;CJK UNIFIED IDEOGRAPH
                                (#xE87B . #x946C)	;CJK UNIFIED IDEOGRAPH
                                (#xE87C . #x946D)	;CJK UNIFIED IDEOGRAPH
                                (#xE87D . #x946E)	;CJK UNIFIED IDEOGRAPH
                                (#xE87E . #x946F)	;CJK UNIFIED IDEOGRAPH
                                (#xE880 . #x9470)	;CJK UNIFIED IDEOGRAPH
                                (#xE881 . #x9471)	;CJK UNIFIED IDEOGRAPH
                                (#xE882 . #x9472)	;CJK UNIFIED IDEOGRAPH
                                (#xE883 . #x9473)	;CJK UNIFIED IDEOGRAPH
                                (#xE884 . #x9474)	;CJK UNIFIED IDEOGRAPH
                                (#xE885 . #x9475)	;CJK UNIFIED IDEOGRAPH
                                (#xE886 . #x9476)	;CJK UNIFIED IDEOGRAPH
                                (#xE887 . #x9477)	;CJK UNIFIED IDEOGRAPH
                                (#xE888 . #x9478)	;CJK UNIFIED IDEOGRAPH
                                (#xE889 . #x9479)	;CJK UNIFIED IDEOGRAPH
                                (#xE88A . #x947A)	;CJK UNIFIED IDEOGRAPH
                                (#xE88B . #x947B)	;CJK UNIFIED IDEOGRAPH
                                (#xE88C . #x947C)	;CJK UNIFIED IDEOGRAPH
                                (#xE88D . #x947D)	;CJK UNIFIED IDEOGRAPH
                                (#xE88E . #x947E)	;CJK UNIFIED IDEOGRAPH
                                (#xE88F . #x947F)	;CJK UNIFIED IDEOGRAPH
                                (#xE890 . #x9480)	;CJK UNIFIED IDEOGRAPH
                                (#xE891 . #x9481)	;CJK UNIFIED IDEOGRAPH
                                (#xE892 . #x9482)	;CJK UNIFIED IDEOGRAPH
                                (#xE893 . #x9483)	;CJK UNIFIED IDEOGRAPH
                                (#xE894 . #x9484)	;CJK UNIFIED IDEOGRAPH
                                (#xE895 . #x9491)	;CJK UNIFIED IDEOGRAPH
                                (#xE896 . #x9496)	;CJK UNIFIED IDEOGRAPH
                                (#xE897 . #x9498)	;CJK UNIFIED IDEOGRAPH
                                (#xE898 . #x94C7)	;CJK UNIFIED IDEOGRAPH
                                (#xE899 . #x94CF)	;CJK UNIFIED IDEOGRAPH
                                (#xE89A . #x94D3)	;CJK UNIFIED IDEOGRAPH
                                (#xE89B . #x94D4)	;CJK UNIFIED IDEOGRAPH
                                (#xE89C . #x94DA)	;CJK UNIFIED IDEOGRAPH
                                (#xE89D . #x94E6)	;CJK UNIFIED IDEOGRAPH
                                (#xE89E . #x94FB)	;CJK UNIFIED IDEOGRAPH
                                (#xE89F . #x951C)	;CJK UNIFIED IDEOGRAPH
                                (#xE8A0 . #x9520)	;CJK UNIFIED IDEOGRAPH
                                (#xE8A1 . #x741B)	;CJK UNIFIED IDEOGRAPH
                                (#xE8A2 . #x741A)	;CJK UNIFIED IDEOGRAPH
                                (#xE8A3 . #x7441)	;CJK UNIFIED IDEOGRAPH
                                (#xE8A4 . #x745C)	;CJK UNIFIED IDEOGRAPH
                                (#xE8A5 . #x7457)	;CJK UNIFIED IDEOGRAPH
                                (#xE8A6 . #x7455)	;CJK UNIFIED IDEOGRAPH
                                (#xE8A7 . #x7459)	;CJK UNIFIED IDEOGRAPH
                                (#xE8A8 . #x7477)	;CJK UNIFIED IDEOGRAPH
                                (#xE8A9 . #x746D)	;CJK UNIFIED IDEOGRAPH
                                (#xE8AA . #x747E)	;CJK UNIFIED IDEOGRAPH
                                (#xE8AB . #x749C)	;CJK UNIFIED IDEOGRAPH
                                (#xE8AC . #x748E)	;CJK UNIFIED IDEOGRAPH
                                (#xE8AD . #x7480)	;CJK UNIFIED IDEOGRAPH
                                (#xE8AE . #x7481)	;CJK UNIFIED IDEOGRAPH
                                (#xE8AF . #x7487)	;CJK UNIFIED IDEOGRAPH
                                (#xE8B0 . #x748B)	;CJK UNIFIED IDEOGRAPH
                                (#xE8B1 . #x749E)	;CJK UNIFIED IDEOGRAPH
                                (#xE8B2 . #x74A8)	;CJK UNIFIED IDEOGRAPH
                                (#xE8B3 . #x74A9)	;CJK UNIFIED IDEOGRAPH
                                (#xE8B4 . #x7490)	;CJK UNIFIED IDEOGRAPH
                                (#xE8B5 . #x74A7)	;CJK UNIFIED IDEOGRAPH
                                (#xE8B6 . #x74D2)	;CJK UNIFIED IDEOGRAPH
                                (#xE8B7 . #x74BA)	;CJK UNIFIED IDEOGRAPH
                                (#xE8B8 . #x97EA)	;CJK UNIFIED IDEOGRAPH
                                (#xE8B9 . #x97EB)	;CJK UNIFIED IDEOGRAPH
                                (#xE8BA . #x97EC)	;CJK UNIFIED IDEOGRAPH
                                (#xE8BB . #x674C)	;CJK UNIFIED IDEOGRAPH
                                (#xE8BC . #x6753)	;CJK UNIFIED IDEOGRAPH
                                (#xE8BD . #x675E)	;CJK UNIFIED IDEOGRAPH
                                (#xE8BE . #x6748)	;CJK UNIFIED IDEOGRAPH
                                (#xE8BF . #x6769)	;CJK UNIFIED IDEOGRAPH
                                (#xE8C0 . #x67A5)	;CJK UNIFIED IDEOGRAPH
                                (#xE8C1 . #x6787)	;CJK UNIFIED IDEOGRAPH
                                (#xE8C2 . #x676A)	;CJK UNIFIED IDEOGRAPH
                                (#xE8C3 . #x6773)	;CJK UNIFIED IDEOGRAPH
                                (#xE8C4 . #x6798)	;CJK UNIFIED IDEOGRAPH
                                (#xE8C5 . #x67A7)	;CJK UNIFIED IDEOGRAPH
                                (#xE8C6 . #x6775)	;CJK UNIFIED IDEOGRAPH
                                (#xE8C7 . #x67A8)	;CJK UNIFIED IDEOGRAPH
                                (#xE8C8 . #x679E)	;CJK UNIFIED IDEOGRAPH
                                (#xE8C9 . #x67AD)	;CJK UNIFIED IDEOGRAPH
                                (#xE8CA . #x678B)	;CJK UNIFIED IDEOGRAPH
                                (#xE8CB . #x6777)	;CJK UNIFIED IDEOGRAPH
                                (#xE8CC . #x677C)	;CJK UNIFIED IDEOGRAPH
                                (#xE8CD . #x67F0)	;CJK UNIFIED IDEOGRAPH
                                (#xE8CE . #x6809)	;CJK UNIFIED IDEOGRAPH
                                (#xE8CF . #x67D8)	;CJK UNIFIED IDEOGRAPH
                                (#xE8D0 . #x680A)	;CJK UNIFIED IDEOGRAPH
                                (#xE8D1 . #x67E9)	;CJK UNIFIED IDEOGRAPH
                                (#xE8D2 . #x67B0)	;CJK UNIFIED IDEOGRAPH
                                (#xE8D3 . #x680C)	;CJK UNIFIED IDEOGRAPH
                                (#xE8D4 . #x67D9)	;CJK UNIFIED IDEOGRAPH
                                (#xE8D5 . #x67B5)	;CJK UNIFIED IDEOGRAPH
                                (#xE8D6 . #x67DA)	;CJK UNIFIED IDEOGRAPH
                                (#xE8D7 . #x67B3)	;CJK UNIFIED IDEOGRAPH
                                (#xE8D8 . #x67DD)	;CJK UNIFIED IDEOGRAPH
                                (#xE8D9 . #x6800)	;CJK UNIFIED IDEOGRAPH
                                (#xE8DA . #x67C3)	;CJK UNIFIED IDEOGRAPH
                                (#xE8DB . #x67B8)	;CJK UNIFIED IDEOGRAPH
                                (#xE8DC . #x67E2)	;CJK UNIFIED IDEOGRAPH
                                (#xE8DD . #x680E)	;CJK UNIFIED IDEOGRAPH
                                (#xE8DE . #x67C1)	;CJK UNIFIED IDEOGRAPH
                                (#xE8DF . #x67FD)	;CJK UNIFIED IDEOGRAPH
                                (#xE8E0 . #x6832)	;CJK UNIFIED IDEOGRAPH
                                (#xE8E1 . #x6833)	;CJK UNIFIED IDEOGRAPH
                                (#xE8E2 . #x6860)	;CJK UNIFIED IDEOGRAPH
                                (#xE8E3 . #x6861)	;CJK UNIFIED IDEOGRAPH
                                (#xE8E4 . #x684E)	;CJK UNIFIED IDEOGRAPH
                                (#xE8E5 . #x6862)	;CJK UNIFIED IDEOGRAPH
                                (#xE8E6 . #x6844)	;CJK UNIFIED IDEOGRAPH
                                (#xE8E7 . #x6864)	;CJK UNIFIED IDEOGRAPH
                                (#xE8E8 . #x6883)	;CJK UNIFIED IDEOGRAPH
                                (#xE8E9 . #x681D)	;CJK UNIFIED IDEOGRAPH
                                (#xE8EA . #x6855)	;CJK UNIFIED IDEOGRAPH
                                (#xE8EB . #x6866)	;CJK UNIFIED IDEOGRAPH
                                (#xE8EC . #x6841)	;CJK UNIFIED IDEOGRAPH
                                (#xE8ED . #x6867)	;CJK UNIFIED IDEOGRAPH
                                (#xE8EE . #x6840)	;CJK UNIFIED IDEOGRAPH
                                (#xE8EF . #x683E)	;CJK UNIFIED IDEOGRAPH
                                (#xE8F0 . #x684A)	;CJK UNIFIED IDEOGRAPH
                                (#xE8F1 . #x6849)	;CJK UNIFIED IDEOGRAPH
                                (#xE8F2 . #x6829)	;CJK UNIFIED IDEOGRAPH
                                (#xE8F3 . #x68B5)	;CJK UNIFIED IDEOGRAPH
                                (#xE8F4 . #x688F)	;CJK UNIFIED IDEOGRAPH
                                (#xE8F5 . #x6874)	;CJK UNIFIED IDEOGRAPH
                                (#xE8F6 . #x6877)	;CJK UNIFIED IDEOGRAPH
                                (#xE8F7 . #x6893)	;CJK UNIFIED IDEOGRAPH
                                (#xE8F8 . #x686B)	;CJK UNIFIED IDEOGRAPH
                                (#xE8F9 . #x68C2)	;CJK UNIFIED IDEOGRAPH
                                (#xE8FA . #x696E)	;CJK UNIFIED IDEOGRAPH
                                (#xE8FB . #x68FC)	;CJK UNIFIED IDEOGRAPH
                                (#xE8FC . #x691F)	;CJK UNIFIED IDEOGRAPH
                                (#xE8FD . #x6920)	;CJK UNIFIED IDEOGRAPH
                                (#xE8FE . #x68F9)	;CJK UNIFIED IDEOGRAPH
                                (#xE940 . #x9527)	;CJK UNIFIED IDEOGRAPH
                                (#xE941 . #x9533)	;CJK UNIFIED IDEOGRAPH
                                (#xE942 . #x953D)	;CJK UNIFIED IDEOGRAPH
                                (#xE943 . #x9543)	;CJK UNIFIED IDEOGRAPH
                                (#xE944 . #x9548)	;CJK UNIFIED IDEOGRAPH
                                (#xE945 . #x954B)	;CJK UNIFIED IDEOGRAPH
                                (#xE946 . #x9555)	;CJK UNIFIED IDEOGRAPH
                                (#xE947 . #x955A)	;CJK UNIFIED IDEOGRAPH
                                (#xE948 . #x9560)	;CJK UNIFIED IDEOGRAPH
                                (#xE949 . #x956E)	;CJK UNIFIED IDEOGRAPH
                                (#xE94A . #x9574)	;CJK UNIFIED IDEOGRAPH
                                (#xE94B . #x9575)	;CJK UNIFIED IDEOGRAPH
                                (#xE94C . #x9577)	;CJK UNIFIED IDEOGRAPH
                                (#xE94D . #x9578)	;CJK UNIFIED IDEOGRAPH
                                (#xE94E . #x9579)	;CJK UNIFIED IDEOGRAPH
                                (#xE94F . #x957A)	;CJK UNIFIED IDEOGRAPH
                                (#xE950 . #x957B)	;CJK UNIFIED IDEOGRAPH
                                (#xE951 . #x957C)	;CJK UNIFIED IDEOGRAPH
                                (#xE952 . #x957D)	;CJK UNIFIED IDEOGRAPH
                                (#xE953 . #x957E)	;CJK UNIFIED IDEOGRAPH
                                (#xE954 . #x9580)	;CJK UNIFIED IDEOGRAPH
                                (#xE955 . #x9581)	;CJK UNIFIED IDEOGRAPH
                                (#xE956 . #x9582)	;CJK UNIFIED IDEOGRAPH
                                (#xE957 . #x9583)	;CJK UNIFIED IDEOGRAPH
                                (#xE958 . #x9584)	;CJK UNIFIED IDEOGRAPH
                                (#xE959 . #x9585)	;CJK UNIFIED IDEOGRAPH
                                (#xE95A . #x9586)	;CJK UNIFIED IDEOGRAPH
                                (#xE95B . #x9587)	;CJK UNIFIED IDEOGRAPH
                                (#xE95C . #x9588)	;CJK UNIFIED IDEOGRAPH
                                (#xE95D . #x9589)	;CJK UNIFIED IDEOGRAPH
                                (#xE95E . #x958A)	;CJK UNIFIED IDEOGRAPH
                                (#xE95F . #x958B)	;CJK UNIFIED IDEOGRAPH
                                (#xE960 . #x958C)	;CJK UNIFIED IDEOGRAPH
                                (#xE961 . #x958D)	;CJK UNIFIED IDEOGRAPH
                                (#xE962 . #x958E)	;CJK UNIFIED IDEOGRAPH
                                (#xE963 . #x958F)	;CJK UNIFIED IDEOGRAPH
                                (#xE964 . #x9590)	;CJK UNIFIED IDEOGRAPH
                                (#xE965 . #x9591)	;CJK UNIFIED IDEOGRAPH
                                (#xE966 . #x9592)	;CJK UNIFIED IDEOGRAPH
                                (#xE967 . #x9593)	;CJK UNIFIED IDEOGRAPH
                                (#xE968 . #x9594)	;CJK UNIFIED IDEOGRAPH
                                (#xE969 . #x9595)	;CJK UNIFIED IDEOGRAPH
                                (#xE96A . #x9596)	;CJK UNIFIED IDEOGRAPH
                                (#xE96B . #x9597)	;CJK UNIFIED IDEOGRAPH
                                (#xE96C . #x9598)	;CJK UNIFIED IDEOGRAPH
                                (#xE96D . #x9599)	;CJK UNIFIED IDEOGRAPH
                                (#xE96E . #x959A)	;CJK UNIFIED IDEOGRAPH
                                (#xE96F . #x959B)	;CJK UNIFIED IDEOGRAPH
                                (#xE970 . #x959C)	;CJK UNIFIED IDEOGRAPH
                                (#xE971 . #x959D)	;CJK UNIFIED IDEOGRAPH
                                (#xE972 . #x959E)	;CJK UNIFIED IDEOGRAPH
                                (#xE973 . #x959F)	;CJK UNIFIED IDEOGRAPH
                                (#xE974 . #x95A0)	;CJK UNIFIED IDEOGRAPH
                                (#xE975 . #x95A1)	;CJK UNIFIED IDEOGRAPH
                                (#xE976 . #x95A2)	;CJK UNIFIED IDEOGRAPH
                                (#xE977 . #x95A3)	;CJK UNIFIED IDEOGRAPH
                                (#xE978 . #x95A4)	;CJK UNIFIED IDEOGRAPH
                                (#xE979 . #x95A5)	;CJK UNIFIED IDEOGRAPH
                                (#xE97A . #x95A6)	;CJK UNIFIED IDEOGRAPH
                                (#xE97B . #x95A7)	;CJK UNIFIED IDEOGRAPH
                                (#xE97C . #x95A8)	;CJK UNIFIED IDEOGRAPH
                                (#xE97D . #x95A9)	;CJK UNIFIED IDEOGRAPH
                                (#xE97E . #x95AA)	;CJK UNIFIED IDEOGRAPH
                                (#xE980 . #x95AB)	;CJK UNIFIED IDEOGRAPH
                                (#xE981 . #x95AC)	;CJK UNIFIED IDEOGRAPH
                                (#xE982 . #x95AD)	;CJK UNIFIED IDEOGRAPH
                                (#xE983 . #x95AE)	;CJK UNIFIED IDEOGRAPH
                                (#xE984 . #x95AF)	;CJK UNIFIED IDEOGRAPH
                                (#xE985 . #x95B0)	;CJK UNIFIED IDEOGRAPH
                                (#xE986 . #x95B1)	;CJK UNIFIED IDEOGRAPH
                                (#xE987 . #x95B2)	;CJK UNIFIED IDEOGRAPH
                                (#xE988 . #x95B3)	;CJK UNIFIED IDEOGRAPH
                                (#xE989 . #x95B4)	;CJK UNIFIED IDEOGRAPH
                                (#xE98A . #x95B5)	;CJK UNIFIED IDEOGRAPH
                                (#xE98B . #x95B6)	;CJK UNIFIED IDEOGRAPH
                                (#xE98C . #x95B7)	;CJK UNIFIED IDEOGRAPH
                                (#xE98D . #x95B8)	;CJK UNIFIED IDEOGRAPH
                                (#xE98E . #x95B9)	;CJK UNIFIED IDEOGRAPH
                                (#xE98F . #x95BA)	;CJK UNIFIED IDEOGRAPH
                                (#xE990 . #x95BB)	;CJK UNIFIED IDEOGRAPH
                                (#xE991 . #x95BC)	;CJK UNIFIED IDEOGRAPH
                                (#xE992 . #x95BD)	;CJK UNIFIED IDEOGRAPH
                                (#xE993 . #x95BE)	;CJK UNIFIED IDEOGRAPH
                                (#xE994 . #x95BF)	;CJK UNIFIED IDEOGRAPH
                                (#xE995 . #x95C0)	;CJK UNIFIED IDEOGRAPH
                                (#xE996 . #x95C1)	;CJK UNIFIED IDEOGRAPH
                                (#xE997 . #x95C2)	;CJK UNIFIED IDEOGRAPH
                                (#xE998 . #x95C3)	;CJK UNIFIED IDEOGRAPH
                                (#xE999 . #x95C4)	;CJK UNIFIED IDEOGRAPH
                                (#xE99A . #x95C5)	;CJK UNIFIED IDEOGRAPH
                                (#xE99B . #x95C6)	;CJK UNIFIED IDEOGRAPH
                                (#xE99C . #x95C7)	;CJK UNIFIED IDEOGRAPH
                                (#xE99D . #x95C8)	;CJK UNIFIED IDEOGRAPH
                                (#xE99E . #x95C9)	;CJK UNIFIED IDEOGRAPH
                                (#xE99F . #x95CA)	;CJK UNIFIED IDEOGRAPH
                                (#xE9A0 . #x95CB)	;CJK UNIFIED IDEOGRAPH
                                (#xE9A1 . #x6924)	;CJK UNIFIED IDEOGRAPH
                                (#xE9A2 . #x68F0)	;CJK UNIFIED IDEOGRAPH
                                (#xE9A3 . #x690B)	;CJK UNIFIED IDEOGRAPH
                                (#xE9A4 . #x6901)	;CJK UNIFIED IDEOGRAPH
                                (#xE9A5 . #x6957)	;CJK UNIFIED IDEOGRAPH
                                (#xE9A6 . #x68E3)	;CJK UNIFIED IDEOGRAPH
                                (#xE9A7 . #x6910)	;CJK UNIFIED IDEOGRAPH
                                (#xE9A8 . #x6971)	;CJK UNIFIED IDEOGRAPH
                                (#xE9A9 . #x6939)	;CJK UNIFIED IDEOGRAPH
                                (#xE9AA . #x6960)	;CJK UNIFIED IDEOGRAPH
                                (#xE9AB . #x6942)	;CJK UNIFIED IDEOGRAPH
                                (#xE9AC . #x695D)	;CJK UNIFIED IDEOGRAPH
                                (#xE9AD . #x6984)	;CJK UNIFIED IDEOGRAPH
                                (#xE9AE . #x696B)	;CJK UNIFIED IDEOGRAPH
                                (#xE9AF . #x6980)	;CJK UNIFIED IDEOGRAPH
                                (#xE9B0 . #x6998)	;CJK UNIFIED IDEOGRAPH
                                (#xE9B1 . #x6978)	;CJK UNIFIED IDEOGRAPH
                                (#xE9B2 . #x6934)	;CJK UNIFIED IDEOGRAPH
                                (#xE9B3 . #x69CC)	;CJK UNIFIED IDEOGRAPH
                                (#xE9B4 . #x6987)	;CJK UNIFIED IDEOGRAPH
                                (#xE9B5 . #x6988)	;CJK UNIFIED IDEOGRAPH
                                (#xE9B6 . #x69CE)	;CJK UNIFIED IDEOGRAPH
                                (#xE9B7 . #x6989)	;CJK UNIFIED IDEOGRAPH
                                (#xE9B8 . #x6966)	;CJK UNIFIED IDEOGRAPH
                                (#xE9B9 . #x6963)	;CJK UNIFIED IDEOGRAPH
                                (#xE9BA . #x6979)	;CJK UNIFIED IDEOGRAPH
                                (#xE9BB . #x699B)	;CJK UNIFIED IDEOGRAPH
                                (#xE9BC . #x69A7)	;CJK UNIFIED IDEOGRAPH
                                (#xE9BD . #x69BB)	;CJK UNIFIED IDEOGRAPH
                                (#xE9BE . #x69AB)	;CJK UNIFIED IDEOGRAPH
                                (#xE9BF . #x69AD)	;CJK UNIFIED IDEOGRAPH
                                (#xE9C0 . #x69D4)	;CJK UNIFIED IDEOGRAPH
                                (#xE9C1 . #x69B1)	;CJK UNIFIED IDEOGRAPH
                                (#xE9C2 . #x69C1)	;CJK UNIFIED IDEOGRAPH
                                (#xE9C3 . #x69CA)	;CJK UNIFIED IDEOGRAPH
                                (#xE9C4 . #x69DF)	;CJK UNIFIED IDEOGRAPH
                                (#xE9C5 . #x6995)	;CJK UNIFIED IDEOGRAPH
                                (#xE9C6 . #x69E0)	;CJK UNIFIED IDEOGRAPH
                                (#xE9C7 . #x698D)	;CJK UNIFIED IDEOGRAPH
                                (#xE9C8 . #x69FF)	;CJK UNIFIED IDEOGRAPH
                                (#xE9C9 . #x6A2F)	;CJK UNIFIED IDEOGRAPH
                                (#xE9CA . #x69ED)	;CJK UNIFIED IDEOGRAPH
                                (#xE9CB . #x6A17)	;CJK UNIFIED IDEOGRAPH
                                (#xE9CC . #x6A18)	;CJK UNIFIED IDEOGRAPH
                                (#xE9CD . #x6A65)	;CJK UNIFIED IDEOGRAPH
                                (#xE9CE . #x69F2)	;CJK UNIFIED IDEOGRAPH
                                (#xE9CF . #x6A44)	;CJK UNIFIED IDEOGRAPH
                                (#xE9D0 . #x6A3E)	;CJK UNIFIED IDEOGRAPH
                                (#xE9D1 . #x6AA0)	;CJK UNIFIED IDEOGRAPH
                                (#xE9D2 . #x6A50)	;CJK UNIFIED IDEOGRAPH
                                (#xE9D3 . #x6A5B)	;CJK UNIFIED IDEOGRAPH
                                (#xE9D4 . #x6A35)	;CJK UNIFIED IDEOGRAPH
                                (#xE9D5 . #x6A8E)	;CJK UNIFIED IDEOGRAPH
                                (#xE9D6 . #x6A79)	;CJK UNIFIED IDEOGRAPH
                                (#xE9D7 . #x6A3D)	;CJK UNIFIED IDEOGRAPH
                                (#xE9D8 . #x6A28)	;CJK UNIFIED IDEOGRAPH
                                (#xE9D9 . #x6A58)	;CJK UNIFIED IDEOGRAPH
                                (#xE9DA . #x6A7C)	;CJK UNIFIED IDEOGRAPH
                                (#xE9DB . #x6A91)	;CJK UNIFIED IDEOGRAPH
                                (#xE9DC . #x6A90)	;CJK UNIFIED IDEOGRAPH
                                (#xE9DD . #x6AA9)	;CJK UNIFIED IDEOGRAPH
                                (#xE9DE . #x6A97)	;CJK UNIFIED IDEOGRAPH
                                (#xE9DF . #x6AAB)	;CJK UNIFIED IDEOGRAPH
                                (#xE9E0 . #x7337)	;CJK UNIFIED IDEOGRAPH
                                (#xE9E1 . #x7352)	;CJK UNIFIED IDEOGRAPH
                                (#xE9E2 . #x6B81)	;CJK UNIFIED IDEOGRAPH
                                (#xE9E3 . #x6B82)	;CJK UNIFIED IDEOGRAPH
                                (#xE9E4 . #x6B87)	;CJK UNIFIED IDEOGRAPH
                                (#xE9E5 . #x6B84)	;CJK UNIFIED IDEOGRAPH
                                (#xE9E6 . #x6B92)	;CJK UNIFIED IDEOGRAPH
                                (#xE9E7 . #x6B93)	;CJK UNIFIED IDEOGRAPH
                                (#xE9E8 . #x6B8D)	;CJK UNIFIED IDEOGRAPH
                                (#xE9E9 . #x6B9A)	;CJK UNIFIED IDEOGRAPH
                                (#xE9EA . #x6B9B)	;CJK UNIFIED IDEOGRAPH
                                (#xE9EB . #x6BA1)	;CJK UNIFIED IDEOGRAPH
                                (#xE9EC . #x6BAA)	;CJK UNIFIED IDEOGRAPH
                                (#xE9ED . #x8F6B)	;CJK UNIFIED IDEOGRAPH
                                (#xE9EE . #x8F6D)	;CJK UNIFIED IDEOGRAPH
                                (#xE9EF . #x8F71)	;CJK UNIFIED IDEOGRAPH
                                (#xE9F0 . #x8F72)	;CJK UNIFIED IDEOGRAPH
                                (#xE9F1 . #x8F73)	;CJK UNIFIED IDEOGRAPH
                                (#xE9F2 . #x8F75)	;CJK UNIFIED IDEOGRAPH
                                (#xE9F3 . #x8F76)	;CJK UNIFIED IDEOGRAPH
                                (#xE9F4 . #x8F78)	;CJK UNIFIED IDEOGRAPH
                                (#xE9F5 . #x8F77)	;CJK UNIFIED IDEOGRAPH
                                (#xE9F6 . #x8F79)	;CJK UNIFIED IDEOGRAPH
                                (#xE9F7 . #x8F7A)	;CJK UNIFIED IDEOGRAPH
                                (#xE9F8 . #x8F7C)	;CJK UNIFIED IDEOGRAPH
                                (#xE9F9 . #x8F7E)	;CJK UNIFIED IDEOGRAPH
                                (#xE9FA . #x8F81)	;CJK UNIFIED IDEOGRAPH
                                (#xE9FB . #x8F82)	;CJK UNIFIED IDEOGRAPH
                                (#xE9FC . #x8F84)	;CJK UNIFIED IDEOGRAPH
                                (#xE9FD . #x8F87)	;CJK UNIFIED IDEOGRAPH
                                (#xE9FE . #x8F8B)	;CJK UNIFIED IDEOGRAPH
                                (#xEA40 . #x95CC)	;CJK UNIFIED IDEOGRAPH
                                (#xEA41 . #x95CD)	;CJK UNIFIED IDEOGRAPH
                                (#xEA42 . #x95CE)	;CJK UNIFIED IDEOGRAPH
                                (#xEA43 . #x95CF)	;CJK UNIFIED IDEOGRAPH
                                (#xEA44 . #x95D0)	;CJK UNIFIED IDEOGRAPH
                                (#xEA45 . #x95D1)	;CJK UNIFIED IDEOGRAPH
                                (#xEA46 . #x95D2)	;CJK UNIFIED IDEOGRAPH
                                (#xEA47 . #x95D3)	;CJK UNIFIED IDEOGRAPH
                                (#xEA48 . #x95D4)	;CJK UNIFIED IDEOGRAPH
                                (#xEA49 . #x95D5)	;CJK UNIFIED IDEOGRAPH
                                (#xEA4A . #x95D6)	;CJK UNIFIED IDEOGRAPH
                                (#xEA4B . #x95D7)	;CJK UNIFIED IDEOGRAPH
                                (#xEA4C . #x95D8)	;CJK UNIFIED IDEOGRAPH
                                (#xEA4D . #x95D9)	;CJK UNIFIED IDEOGRAPH
                                (#xEA4E . #x95DA)	;CJK UNIFIED IDEOGRAPH
                                (#xEA4F . #x95DB)	;CJK UNIFIED IDEOGRAPH
                                (#xEA50 . #x95DC)	;CJK UNIFIED IDEOGRAPH
                                (#xEA51 . #x95DD)	;CJK UNIFIED IDEOGRAPH
                                (#xEA52 . #x95DE)	;CJK UNIFIED IDEOGRAPH
                                (#xEA53 . #x95DF)	;CJK UNIFIED IDEOGRAPH
                                (#xEA54 . #x95E0)	;CJK UNIFIED IDEOGRAPH
                                (#xEA55 . #x95E1)	;CJK UNIFIED IDEOGRAPH
                                (#xEA56 . #x95E2)	;CJK UNIFIED IDEOGRAPH
                                (#xEA57 . #x95E3)	;CJK UNIFIED IDEOGRAPH
                                (#xEA58 . #x95E4)	;CJK UNIFIED IDEOGRAPH
                                (#xEA59 . #x95E5)	;CJK UNIFIED IDEOGRAPH
                                (#xEA5A . #x95E6)	;CJK UNIFIED IDEOGRAPH
                                (#xEA5B . #x95E7)	;CJK UNIFIED IDEOGRAPH
                                (#xEA5C . #x95EC)	;CJK UNIFIED IDEOGRAPH
                                (#xEA5D . #x95FF)	;CJK UNIFIED IDEOGRAPH
                                (#xEA5E . #x9607)	;CJK UNIFIED IDEOGRAPH
                                (#xEA5F . #x9613)	;CJK UNIFIED IDEOGRAPH
                                (#xEA60 . #x9618)	;CJK UNIFIED IDEOGRAPH
                                (#xEA61 . #x961B)	;CJK UNIFIED IDEOGRAPH
                                (#xEA62 . #x961E)	;CJK UNIFIED IDEOGRAPH
                                (#xEA63 . #x9620)	;CJK UNIFIED IDEOGRAPH
                                (#xEA64 . #x9623)	;CJK UNIFIED IDEOGRAPH
                                (#xEA65 . #x9624)	;CJK UNIFIED IDEOGRAPH
                                (#xEA66 . #x9625)	;CJK UNIFIED IDEOGRAPH
                                (#xEA67 . #x9626)	;CJK UNIFIED IDEOGRAPH
                                (#xEA68 . #x9627)	;CJK UNIFIED IDEOGRAPH
                                (#xEA69 . #x9628)	;CJK UNIFIED IDEOGRAPH
                                (#xEA6A . #x9629)	;CJK UNIFIED IDEOGRAPH
                                (#xEA6B . #x962B)	;CJK UNIFIED IDEOGRAPH
                                (#xEA6C . #x962C)	;CJK UNIFIED IDEOGRAPH
                                (#xEA6D . #x962D)	;CJK UNIFIED IDEOGRAPH
                                (#xEA6E . #x962F)	;CJK UNIFIED IDEOGRAPH
                                (#xEA6F . #x9630)	;CJK UNIFIED IDEOGRAPH
                                (#xEA70 . #x9637)	;CJK UNIFIED IDEOGRAPH
                                (#xEA71 . #x9638)	;CJK UNIFIED IDEOGRAPH
                                (#xEA72 . #x9639)	;CJK UNIFIED IDEOGRAPH
                                (#xEA73 . #x963A)	;CJK UNIFIED IDEOGRAPH
                                (#xEA74 . #x963E)	;CJK UNIFIED IDEOGRAPH
                                (#xEA75 . #x9641)	;CJK UNIFIED IDEOGRAPH
                                (#xEA76 . #x9643)	;CJK UNIFIED IDEOGRAPH
                                (#xEA77 . #x964A)	;CJK UNIFIED IDEOGRAPH
                                (#xEA78 . #x964E)	;CJK UNIFIED IDEOGRAPH
                                (#xEA79 . #x964F)	;CJK UNIFIED IDEOGRAPH
                                (#xEA7A . #x9651)	;CJK UNIFIED IDEOGRAPH
                                (#xEA7B . #x9652)	;CJK UNIFIED IDEOGRAPH
                                (#xEA7C . #x9653)	;CJK UNIFIED IDEOGRAPH
                                (#xEA7D . #x9656)	;CJK UNIFIED IDEOGRAPH
                                (#xEA7E . #x9657)	;CJK UNIFIED IDEOGRAPH
                                (#xEA80 . #x9658)	;CJK UNIFIED IDEOGRAPH
                                (#xEA81 . #x9659)	;CJK UNIFIED IDEOGRAPH
                                (#xEA82 . #x965A)	;CJK UNIFIED IDEOGRAPH
                                (#xEA83 . #x965C)	;CJK UNIFIED IDEOGRAPH
                                (#xEA84 . #x965D)	;CJK UNIFIED IDEOGRAPH
                                (#xEA85 . #x965E)	;CJK UNIFIED IDEOGRAPH
                                (#xEA86 . #x9660)	;CJK UNIFIED IDEOGRAPH
                                (#xEA87 . #x9663)	;CJK UNIFIED IDEOGRAPH
                                (#xEA88 . #x9665)	;CJK UNIFIED IDEOGRAPH
                                (#xEA89 . #x9666)	;CJK UNIFIED IDEOGRAPH
                                (#xEA8A . #x966B)	;CJK UNIFIED IDEOGRAPH
                                (#xEA8B . #x966D)	;CJK UNIFIED IDEOGRAPH
                                (#xEA8C . #x966E)	;CJK UNIFIED IDEOGRAPH
                                (#xEA8D . #x966F)	;CJK UNIFIED IDEOGRAPH
                                (#xEA8E . #x9670)	;CJK UNIFIED IDEOGRAPH
                                (#xEA8F . #x9671)	;CJK UNIFIED IDEOGRAPH
                                (#xEA90 . #x9673)	;CJK UNIFIED IDEOGRAPH
                                (#xEA91 . #x9678)	;CJK UNIFIED IDEOGRAPH
                                (#xEA92 . #x9679)	;CJK UNIFIED IDEOGRAPH
                                (#xEA93 . #x967A)	;CJK UNIFIED IDEOGRAPH
                                (#xEA94 . #x967B)	;CJK UNIFIED IDEOGRAPH
                                (#xEA95 . #x967C)	;CJK UNIFIED IDEOGRAPH
                                (#xEA96 . #x967D)	;CJK UNIFIED IDEOGRAPH
                                (#xEA97 . #x967E)	;CJK UNIFIED IDEOGRAPH
                                (#xEA98 . #x967F)	;CJK UNIFIED IDEOGRAPH
                                (#xEA99 . #x9680)	;CJK UNIFIED IDEOGRAPH
                                (#xEA9A . #x9681)	;CJK UNIFIED IDEOGRAPH
                                (#xEA9B . #x9682)	;CJK UNIFIED IDEOGRAPH
                                (#xEA9C . #x9683)	;CJK UNIFIED IDEOGRAPH
                                (#xEA9D . #x9684)	;CJK UNIFIED IDEOGRAPH
                                (#xEA9E . #x9687)	;CJK UNIFIED IDEOGRAPH
                                (#xEA9F . #x9689)	;CJK UNIFIED IDEOGRAPH
                                (#xEAA0 . #x968A)	;CJK UNIFIED IDEOGRAPH
                                (#xEAA1 . #x8F8D)	;CJK UNIFIED IDEOGRAPH
                                (#xEAA2 . #x8F8E)	;CJK UNIFIED IDEOGRAPH
                                (#xEAA3 . #x8F8F)	;CJK UNIFIED IDEOGRAPH
                                (#xEAA4 . #x8F98)	;CJK UNIFIED IDEOGRAPH
                                (#xEAA5 . #x8F9A)	;CJK UNIFIED IDEOGRAPH
                                (#xEAA6 . #x8ECE)	;CJK UNIFIED IDEOGRAPH
                                (#xEAA7 . #x620B)	;CJK UNIFIED IDEOGRAPH
                                (#xEAA8 . #x6217)	;CJK UNIFIED IDEOGRAPH
                                (#xEAA9 . #x621B)	;CJK UNIFIED IDEOGRAPH
                                (#xEAAA . #x621F)	;CJK UNIFIED IDEOGRAPH
                                (#xEAAB . #x6222)	;CJK UNIFIED IDEOGRAPH
                                (#xEAAC . #x6221)	;CJK UNIFIED IDEOGRAPH
                                (#xEAAD . #x6225)	;CJK UNIFIED IDEOGRAPH
                                (#xEAAE . #x6224)	;CJK UNIFIED IDEOGRAPH
                                (#xEAAF . #x622C)	;CJK UNIFIED IDEOGRAPH
                                (#xEAB0 . #x81E7)	;CJK UNIFIED IDEOGRAPH
                                (#xEAB1 . #x74EF)	;CJK UNIFIED IDEOGRAPH
                                (#xEAB2 . #x74F4)	;CJK UNIFIED IDEOGRAPH
                                (#xEAB3 . #x74FF)	;CJK UNIFIED IDEOGRAPH
                                (#xEAB4 . #x750F)	;CJK UNIFIED IDEOGRAPH
                                (#xEAB5 . #x7511)	;CJK UNIFIED IDEOGRAPH
                                (#xEAB6 . #x7513)	;CJK UNIFIED IDEOGRAPH
                                (#xEAB7 . #x6534)	;CJK UNIFIED IDEOGRAPH
                                (#xEAB8 . #x65EE)	;CJK UNIFIED IDEOGRAPH
                                (#xEAB9 . #x65EF)	;CJK UNIFIED IDEOGRAPH
                                (#xEABA . #x65F0)	;CJK UNIFIED IDEOGRAPH
                                (#xEABB . #x660A)	;CJK UNIFIED IDEOGRAPH
                                (#xEABC . #x6619)	;CJK UNIFIED IDEOGRAPH
                                (#xEABD . #x6772)	;CJK UNIFIED IDEOGRAPH
                                (#xEABE . #x6603)	;CJK UNIFIED IDEOGRAPH
                                (#xEABF . #x6615)	;CJK UNIFIED IDEOGRAPH
                                (#xEAC0 . #x6600)	;CJK UNIFIED IDEOGRAPH
                                (#xEAC1 . #x7085)	;CJK UNIFIED IDEOGRAPH
                                (#xEAC2 . #x66F7)	;CJK UNIFIED IDEOGRAPH
                                (#xEAC3 . #x661D)	;CJK UNIFIED IDEOGRAPH
                                (#xEAC4 . #x6634)	;CJK UNIFIED IDEOGRAPH
                                (#xEAC5 . #x6631)	;CJK UNIFIED IDEOGRAPH
                                (#xEAC6 . #x6636)	;CJK UNIFIED IDEOGRAPH
                                (#xEAC7 . #x6635)	;CJK UNIFIED IDEOGRAPH
                                (#xEAC8 . #x8006)	;CJK UNIFIED IDEOGRAPH
                                (#xEAC9 . #x665F)	;CJK UNIFIED IDEOGRAPH
                                (#xEACA . #x6654)	;CJK UNIFIED IDEOGRAPH
                                (#xEACB . #x6641)	;CJK UNIFIED IDEOGRAPH
                                (#xEACC . #x664F)	;CJK UNIFIED IDEOGRAPH
                                (#xEACD . #x6656)	;CJK UNIFIED IDEOGRAPH
                                (#xEACE . #x6661)	;CJK UNIFIED IDEOGRAPH
                                (#xEACF . #x6657)	;CJK UNIFIED IDEOGRAPH
                                (#xEAD0 . #x6677)	;CJK UNIFIED IDEOGRAPH
                                (#xEAD1 . #x6684)	;CJK UNIFIED IDEOGRAPH
                                (#xEAD2 . #x668C)	;CJK UNIFIED IDEOGRAPH
                                (#xEAD3 . #x66A7)	;CJK UNIFIED IDEOGRAPH
                                (#xEAD4 . #x669D)	;CJK UNIFIED IDEOGRAPH
                                (#xEAD5 . #x66BE)	;CJK UNIFIED IDEOGRAPH
                                (#xEAD6 . #x66DB)	;CJK UNIFIED IDEOGRAPH
                                (#xEAD7 . #x66DC)	;CJK UNIFIED IDEOGRAPH
                                (#xEAD8 . #x66E6)	;CJK UNIFIED IDEOGRAPH
                                (#xEAD9 . #x66E9)	;CJK UNIFIED IDEOGRAPH
                                (#xEADA . #x8D32)	;CJK UNIFIED IDEOGRAPH
                                (#xEADB . #x8D33)	;CJK UNIFIED IDEOGRAPH
                                (#xEADC . #x8D36)	;CJK UNIFIED IDEOGRAPH
                                (#xEADD . #x8D3B)	;CJK UNIFIED IDEOGRAPH
                                (#xEADE . #x8D3D)	;CJK UNIFIED IDEOGRAPH
                                (#xEADF . #x8D40)	;CJK UNIFIED IDEOGRAPH
                                (#xEAE0 . #x8D45)	;CJK UNIFIED IDEOGRAPH
                                (#xEAE1 . #x8D46)	;CJK UNIFIED IDEOGRAPH
                                (#xEAE2 . #x8D48)	;CJK UNIFIED IDEOGRAPH
                                (#xEAE3 . #x8D49)	;CJK UNIFIED IDEOGRAPH
                                (#xEAE4 . #x8D47)	;CJK UNIFIED IDEOGRAPH
                                (#xEAE5 . #x8D4D)	;CJK UNIFIED IDEOGRAPH
                                (#xEAE6 . #x8D55)	;CJK UNIFIED IDEOGRAPH
                                (#xEAE7 . #x8D59)	;CJK UNIFIED IDEOGRAPH
                                (#xEAE8 . #x89C7)	;CJK UNIFIED IDEOGRAPH
                                (#xEAE9 . #x89CA)	;CJK UNIFIED IDEOGRAPH
                                (#xEAEA . #x89CB)	;CJK UNIFIED IDEOGRAPH
                                (#xEAEB . #x89CC)	;CJK UNIFIED IDEOGRAPH
                                (#xEAEC . #x89CE)	;CJK UNIFIED IDEOGRAPH
                                (#xEAED . #x89CF)	;CJK UNIFIED IDEOGRAPH
                                (#xEAEE . #x89D0)	;CJK UNIFIED IDEOGRAPH
                                (#xEAEF . #x89D1)	;CJK UNIFIED IDEOGRAPH
                                (#xEAF0 . #x726E)	;CJK UNIFIED IDEOGRAPH
                                (#xEAF1 . #x729F)	;CJK UNIFIED IDEOGRAPH
                                (#xEAF2 . #x725D)	;CJK UNIFIED IDEOGRAPH
                                (#xEAF3 . #x7266)	;CJK UNIFIED IDEOGRAPH
                                (#xEAF4 . #x726F)	;CJK UNIFIED IDEOGRAPH
                                (#xEAF5 . #x727E)	;CJK UNIFIED IDEOGRAPH
                                (#xEAF6 . #x727F)	;CJK UNIFIED IDEOGRAPH
                                (#xEAF7 . #x7284)	;CJK UNIFIED IDEOGRAPH
                                (#xEAF8 . #x728B)	;CJK UNIFIED IDEOGRAPH
                                (#xEAF9 . #x728D)	;CJK UNIFIED IDEOGRAPH
                                (#xEAFA . #x728F)	;CJK UNIFIED IDEOGRAPH
                                (#xEAFB . #x7292)	;CJK UNIFIED IDEOGRAPH
                                (#xEAFC . #x6308)	;CJK UNIFIED IDEOGRAPH
                                (#xEAFD . #x6332)	;CJK UNIFIED IDEOGRAPH
                                (#xEAFE . #x63B0)	;CJK UNIFIED IDEOGRAPH
                                (#xEB40 . #x968C)	;CJK UNIFIED IDEOGRAPH
                                (#xEB41 . #x968E)	;CJK UNIFIED IDEOGRAPH
                                (#xEB42 . #x9691)	;CJK UNIFIED IDEOGRAPH
                                (#xEB43 . #x9692)	;CJK UNIFIED IDEOGRAPH
                                (#xEB44 . #x9693)	;CJK UNIFIED IDEOGRAPH
                                (#xEB45 . #x9695)	;CJK UNIFIED IDEOGRAPH
                                (#xEB46 . #x9696)	;CJK UNIFIED IDEOGRAPH
                                (#xEB47 . #x969A)	;CJK UNIFIED IDEOGRAPH
                                (#xEB48 . #x969B)	;CJK UNIFIED IDEOGRAPH
                                (#xEB49 . #x969D)	;CJK UNIFIED IDEOGRAPH
                                (#xEB4A . #x969E)	;CJK UNIFIED IDEOGRAPH
                                (#xEB4B . #x969F)	;CJK UNIFIED IDEOGRAPH
                                (#xEB4C . #x96A0)	;CJK UNIFIED IDEOGRAPH
                                (#xEB4D . #x96A1)	;CJK UNIFIED IDEOGRAPH
                                (#xEB4E . #x96A2)	;CJK UNIFIED IDEOGRAPH
                                (#xEB4F . #x96A3)	;CJK UNIFIED IDEOGRAPH
                                (#xEB50 . #x96A4)	;CJK UNIFIED IDEOGRAPH
                                (#xEB51 . #x96A5)	;CJK UNIFIED IDEOGRAPH
                                (#xEB52 . #x96A6)	;CJK UNIFIED IDEOGRAPH
                                (#xEB53 . #x96A8)	;CJK UNIFIED IDEOGRAPH
                                (#xEB54 . #x96A9)	;CJK UNIFIED IDEOGRAPH
                                (#xEB55 . #x96AA)	;CJK UNIFIED IDEOGRAPH
                                (#xEB56 . #x96AB)	;CJK UNIFIED IDEOGRAPH
                                (#xEB57 . #x96AC)	;CJK UNIFIED IDEOGRAPH
                                (#xEB58 . #x96AD)	;CJK UNIFIED IDEOGRAPH
                                (#xEB59 . #x96AE)	;CJK UNIFIED IDEOGRAPH
                                (#xEB5A . #x96AF)	;CJK UNIFIED IDEOGRAPH
                                (#xEB5B . #x96B1)	;CJK UNIFIED IDEOGRAPH
                                (#xEB5C . #x96B2)	;CJK UNIFIED IDEOGRAPH
                                (#xEB5D . #x96B4)	;CJK UNIFIED IDEOGRAPH
                                (#xEB5E . #x96B5)	;CJK UNIFIED IDEOGRAPH
                                (#xEB5F . #x96B7)	;CJK UNIFIED IDEOGRAPH
                                (#xEB60 . #x96B8)	;CJK UNIFIED IDEOGRAPH
                                (#xEB61 . #x96BA)	;CJK UNIFIED IDEOGRAPH
                                (#xEB62 . #x96BB)	;CJK UNIFIED IDEOGRAPH
                                (#xEB63 . #x96BF)	;CJK UNIFIED IDEOGRAPH
                                (#xEB64 . #x96C2)	;CJK UNIFIED IDEOGRAPH
                                (#xEB65 . #x96C3)	;CJK UNIFIED IDEOGRAPH
                                (#xEB66 . #x96C8)	;CJK UNIFIED IDEOGRAPH
                                (#xEB67 . #x96CA)	;CJK UNIFIED IDEOGRAPH
                                (#xEB68 . #x96CB)	;CJK UNIFIED IDEOGRAPH
                                (#xEB69 . #x96D0)	;CJK UNIFIED IDEOGRAPH
                                (#xEB6A . #x96D1)	;CJK UNIFIED IDEOGRAPH
                                (#xEB6B . #x96D3)	;CJK UNIFIED IDEOGRAPH
                                (#xEB6C . #x96D4)	;CJK UNIFIED IDEOGRAPH
                                (#xEB6D . #x96D6)	;CJK UNIFIED IDEOGRAPH
                                (#xEB6E . #x96D7)	;CJK UNIFIED IDEOGRAPH
                                (#xEB6F . #x96D8)	;CJK UNIFIED IDEOGRAPH
                                (#xEB70 . #x96D9)	;CJK UNIFIED IDEOGRAPH
                                (#xEB71 . #x96DA)	;CJK UNIFIED IDEOGRAPH
                                (#xEB72 . #x96DB)	;CJK UNIFIED IDEOGRAPH
                                (#xEB73 . #x96DC)	;CJK UNIFIED IDEOGRAPH
                                (#xEB74 . #x96DD)	;CJK UNIFIED IDEOGRAPH
                                (#xEB75 . #x96DE)	;CJK UNIFIED IDEOGRAPH
                                (#xEB76 . #x96DF)	;CJK UNIFIED IDEOGRAPH
                                (#xEB77 . #x96E1)	;CJK UNIFIED IDEOGRAPH
                                (#xEB78 . #x96E2)	;CJK UNIFIED IDEOGRAPH
                                (#xEB79 . #x96E3)	;CJK UNIFIED IDEOGRAPH
                                (#xEB7A . #x96E4)	;CJK UNIFIED IDEOGRAPH
                                (#xEB7B . #x96E5)	;CJK UNIFIED IDEOGRAPH
                                (#xEB7C . #x96E6)	;CJK UNIFIED IDEOGRAPH
                                (#xEB7D . #x96E7)	;CJK UNIFIED IDEOGRAPH
                                (#xEB7E . #x96EB)	;CJK UNIFIED IDEOGRAPH
                                (#xEB80 . #x96EC)	;CJK UNIFIED IDEOGRAPH
                                (#xEB81 . #x96ED)	;CJK UNIFIED IDEOGRAPH
                                (#xEB82 . #x96EE)	;CJK UNIFIED IDEOGRAPH
                                (#xEB83 . #x96F0)	;CJK UNIFIED IDEOGRAPH
                                (#xEB84 . #x96F1)	;CJK UNIFIED IDEOGRAPH
                                (#xEB85 . #x96F2)	;CJK UNIFIED IDEOGRAPH
                                (#xEB86 . #x96F4)	;CJK UNIFIED IDEOGRAPH
                                (#xEB87 . #x96F5)	;CJK UNIFIED IDEOGRAPH
                                (#xEB88 . #x96F8)	;CJK UNIFIED IDEOGRAPH
                                (#xEB89 . #x96FA)	;CJK UNIFIED IDEOGRAPH
                                (#xEB8A . #x96FB)	;CJK UNIFIED IDEOGRAPH
                                (#xEB8B . #x96FC)	;CJK UNIFIED IDEOGRAPH
                                (#xEB8C . #x96FD)	;CJK UNIFIED IDEOGRAPH
                                (#xEB8D . #x96FF)	;CJK UNIFIED IDEOGRAPH
                                (#xEB8E . #x9702)	;CJK UNIFIED IDEOGRAPH
                                (#xEB8F . #x9703)	;CJK UNIFIED IDEOGRAPH
                                (#xEB90 . #x9705)	;CJK UNIFIED IDEOGRAPH
                                (#xEB91 . #x970A)	;CJK UNIFIED IDEOGRAPH
                                (#xEB92 . #x970B)	;CJK UNIFIED IDEOGRAPH
                                (#xEB93 . #x970C)	;CJK UNIFIED IDEOGRAPH
                                (#xEB94 . #x9710)	;CJK UNIFIED IDEOGRAPH
                                (#xEB95 . #x9711)	;CJK UNIFIED IDEOGRAPH
                                (#xEB96 . #x9712)	;CJK UNIFIED IDEOGRAPH
                                (#xEB97 . #x9714)	;CJK UNIFIED IDEOGRAPH
                                (#xEB98 . #x9715)	;CJK UNIFIED IDEOGRAPH
                                (#xEB99 . #x9717)	;CJK UNIFIED IDEOGRAPH
                                (#xEB9A . #x9718)	;CJK UNIFIED IDEOGRAPH
                                (#xEB9B . #x9719)	;CJK UNIFIED IDEOGRAPH
                                (#xEB9C . #x971A)	;CJK UNIFIED IDEOGRAPH
                                (#xEB9D . #x971B)	;CJK UNIFIED IDEOGRAPH
                                (#xEB9E . #x971D)	;CJK UNIFIED IDEOGRAPH
                                (#xEB9F . #x971F)	;CJK UNIFIED IDEOGRAPH
                                (#xEBA0 . #x9720)	;CJK UNIFIED IDEOGRAPH
                                (#xEBA1 . #x643F)	;CJK UNIFIED IDEOGRAPH
                                (#xEBA2 . #x64D8)	;CJK UNIFIED IDEOGRAPH
                                (#xEBA3 . #x8004)	;CJK UNIFIED IDEOGRAPH
                                (#xEBA4 . #x6BEA)	;CJK UNIFIED IDEOGRAPH
                                (#xEBA5 . #x6BF3)	;CJK UNIFIED IDEOGRAPH
                                (#xEBA6 . #x6BFD)	;CJK UNIFIED IDEOGRAPH
                                (#xEBA7 . #x6BF5)	;CJK UNIFIED IDEOGRAPH
                                (#xEBA8 . #x6BF9)	;CJK UNIFIED IDEOGRAPH
                                (#xEBA9 . #x6C05)	;CJK UNIFIED IDEOGRAPH
                                (#xEBAA . #x6C07)	;CJK UNIFIED IDEOGRAPH
                                (#xEBAB . #x6C06)	;CJK UNIFIED IDEOGRAPH
                                (#xEBAC . #x6C0D)	;CJK UNIFIED IDEOGRAPH
                                (#xEBAD . #x6C15)	;CJK UNIFIED IDEOGRAPH
                                (#xEBAE . #x6C18)	;CJK UNIFIED IDEOGRAPH
                                (#xEBAF . #x6C19)	;CJK UNIFIED IDEOGRAPH
                                (#xEBB0 . #x6C1A)	;CJK UNIFIED IDEOGRAPH
                                (#xEBB1 . #x6C21)	;CJK UNIFIED IDEOGRAPH
                                (#xEBB2 . #x6C29)	;CJK UNIFIED IDEOGRAPH
                                (#xEBB3 . #x6C24)	;CJK UNIFIED IDEOGRAPH
                                (#xEBB4 . #x6C2A)	;CJK UNIFIED IDEOGRAPH
                                (#xEBB5 . #x6C32)	;CJK UNIFIED IDEOGRAPH
                                (#xEBB6 . #x6535)	;CJK UNIFIED IDEOGRAPH
                                (#xEBB7 . #x6555)	;CJK UNIFIED IDEOGRAPH
                                (#xEBB8 . #x656B)	;CJK UNIFIED IDEOGRAPH
                                (#xEBB9 . #x724D)	;CJK UNIFIED IDEOGRAPH
                                (#xEBBA . #x7252)	;CJK UNIFIED IDEOGRAPH
                                (#xEBBB . #x7256)	;CJK UNIFIED IDEOGRAPH
                                (#xEBBC . #x7230)	;CJK UNIFIED IDEOGRAPH
                                (#xEBBD . #x8662)	;CJK UNIFIED IDEOGRAPH
                                (#xEBBE . #x5216)	;CJK UNIFIED IDEOGRAPH
                                (#xEBBF . #x809F)	;CJK UNIFIED IDEOGRAPH
                                (#xEBC0 . #x809C)	;CJK UNIFIED IDEOGRAPH
                                (#xEBC1 . #x8093)	;CJK UNIFIED IDEOGRAPH
                                (#xEBC2 . #x80BC)	;CJK UNIFIED IDEOGRAPH
                                (#xEBC3 . #x670A)	;CJK UNIFIED IDEOGRAPH
                                (#xEBC4 . #x80BD)	;CJK UNIFIED IDEOGRAPH
                                (#xEBC5 . #x80B1)	;CJK UNIFIED IDEOGRAPH
                                (#xEBC6 . #x80AB)	;CJK UNIFIED IDEOGRAPH
                                (#xEBC7 . #x80AD)	;CJK UNIFIED IDEOGRAPH
                                (#xEBC8 . #x80B4)	;CJK UNIFIED IDEOGRAPH
                                (#xEBC9 . #x80B7)	;CJK UNIFIED IDEOGRAPH
                                (#xEBCA . #x80E7)	;CJK UNIFIED IDEOGRAPH
                                (#xEBCB . #x80E8)	;CJK UNIFIED IDEOGRAPH
                                (#xEBCC . #x80E9)	;CJK UNIFIED IDEOGRAPH
                                (#xEBCD . #x80EA)	;CJK UNIFIED IDEOGRAPH
                                (#xEBCE . #x80DB)	;CJK UNIFIED IDEOGRAPH
                                (#xEBCF . #x80C2)	;CJK UNIFIED IDEOGRAPH
                                (#xEBD0 . #x80C4)	;CJK UNIFIED IDEOGRAPH
                                (#xEBD1 . #x80D9)	;CJK UNIFIED IDEOGRAPH
                                (#xEBD2 . #x80CD)	;CJK UNIFIED IDEOGRAPH
                                (#xEBD3 . #x80D7)	;CJK UNIFIED IDEOGRAPH
                                (#xEBD4 . #x6710)	;CJK UNIFIED IDEOGRAPH
                                (#xEBD5 . #x80DD)	;CJK UNIFIED IDEOGRAPH
                                (#xEBD6 . #x80EB)	;CJK UNIFIED IDEOGRAPH
                                (#xEBD7 . #x80F1)	;CJK UNIFIED IDEOGRAPH
                                (#xEBD8 . #x80F4)	;CJK UNIFIED IDEOGRAPH
                                (#xEBD9 . #x80ED)	;CJK UNIFIED IDEOGRAPH
                                (#xEBDA . #x810D)	;CJK UNIFIED IDEOGRAPH
                                (#xEBDB . #x810E)	;CJK UNIFIED IDEOGRAPH
                                (#xEBDC . #x80F2)	;CJK UNIFIED IDEOGRAPH
                                (#xEBDD . #x80FC)	;CJK UNIFIED IDEOGRAPH
                                (#xEBDE . #x6715)	;CJK UNIFIED IDEOGRAPH
                                (#xEBDF . #x8112)	;CJK UNIFIED IDEOGRAPH
                                (#xEBE0 . #x8C5A)	;CJK UNIFIED IDEOGRAPH
                                (#xEBE1 . #x8136)	;CJK UNIFIED IDEOGRAPH
                                (#xEBE2 . #x811E)	;CJK UNIFIED IDEOGRAPH
                                (#xEBE3 . #x812C)	;CJK UNIFIED IDEOGRAPH
                                (#xEBE4 . #x8118)	;CJK UNIFIED IDEOGRAPH
                                (#xEBE5 . #x8132)	;CJK UNIFIED IDEOGRAPH
                                (#xEBE6 . #x8148)	;CJK UNIFIED IDEOGRAPH
                                (#xEBE7 . #x814C)	;CJK UNIFIED IDEOGRAPH
                                (#xEBE8 . #x8153)	;CJK UNIFIED IDEOGRAPH
                                (#xEBE9 . #x8174)	;CJK UNIFIED IDEOGRAPH
                                (#xEBEA . #x8159)	;CJK UNIFIED IDEOGRAPH
                                (#xEBEB . #x815A)	;CJK UNIFIED IDEOGRAPH
                                (#xEBEC . #x8171)	;CJK UNIFIED IDEOGRAPH
                                (#xEBED . #x8160)	;CJK UNIFIED IDEOGRAPH
                                (#xEBEE . #x8169)	;CJK UNIFIED IDEOGRAPH
                                (#xEBEF . #x817C)	;CJK UNIFIED IDEOGRAPH
                                (#xEBF0 . #x817D)	;CJK UNIFIED IDEOGRAPH
                                (#xEBF1 . #x816D)	;CJK UNIFIED IDEOGRAPH
                                (#xEBF2 . #x8167)	;CJK UNIFIED IDEOGRAPH
                                (#xEBF3 . #x584D)	;CJK UNIFIED IDEOGRAPH
                                (#xEBF4 . #x5AB5)	;CJK UNIFIED IDEOGRAPH
                                (#xEBF5 . #x8188)	;CJK UNIFIED IDEOGRAPH
                                (#xEBF6 . #x8182)	;CJK UNIFIED IDEOGRAPH
                                (#xEBF7 . #x8191)	;CJK UNIFIED IDEOGRAPH
                                (#xEBF8 . #x6ED5)	;CJK UNIFIED IDEOGRAPH
                                (#xEBF9 . #x81A3)	;CJK UNIFIED IDEOGRAPH
                                (#xEBFA . #x81AA)	;CJK UNIFIED IDEOGRAPH
                                (#xEBFB . #x81CC)	;CJK UNIFIED IDEOGRAPH
                                (#xEBFC . #x6726)	;CJK UNIFIED IDEOGRAPH
                                (#xEBFD . #x81CA)	;CJK UNIFIED IDEOGRAPH
                                (#xEBFE . #x81BB)	;CJK UNIFIED IDEOGRAPH
                                (#xEC40 . #x9721)	;CJK UNIFIED IDEOGRAPH
                                (#xEC41 . #x9722)	;CJK UNIFIED IDEOGRAPH
                                (#xEC42 . #x9723)	;CJK UNIFIED IDEOGRAPH
                                (#xEC43 . #x9724)	;CJK UNIFIED IDEOGRAPH
                                (#xEC44 . #x9725)	;CJK UNIFIED IDEOGRAPH
                                (#xEC45 . #x9726)	;CJK UNIFIED IDEOGRAPH
                                (#xEC46 . #x9727)	;CJK UNIFIED IDEOGRAPH
                                (#xEC47 . #x9728)	;CJK UNIFIED IDEOGRAPH
                                (#xEC48 . #x9729)	;CJK UNIFIED IDEOGRAPH
                                (#xEC49 . #x972B)	;CJK UNIFIED IDEOGRAPH
                                (#xEC4A . #x972C)	;CJK UNIFIED IDEOGRAPH
                                (#xEC4B . #x972E)	;CJK UNIFIED IDEOGRAPH
                                (#xEC4C . #x972F)	;CJK UNIFIED IDEOGRAPH
                                (#xEC4D . #x9731)	;CJK UNIFIED IDEOGRAPH
                                (#xEC4E . #x9733)	;CJK UNIFIED IDEOGRAPH
                                (#xEC4F . #x9734)	;CJK UNIFIED IDEOGRAPH
                                (#xEC50 . #x9735)	;CJK UNIFIED IDEOGRAPH
                                (#xEC51 . #x9736)	;CJK UNIFIED IDEOGRAPH
                                (#xEC52 . #x9737)	;CJK UNIFIED IDEOGRAPH
                                (#xEC53 . #x973A)	;CJK UNIFIED IDEOGRAPH
                                (#xEC54 . #x973B)	;CJK UNIFIED IDEOGRAPH
                                (#xEC55 . #x973C)	;CJK UNIFIED IDEOGRAPH
                                (#xEC56 . #x973D)	;CJK UNIFIED IDEOGRAPH
                                (#xEC57 . #x973F)	;CJK UNIFIED IDEOGRAPH
                                (#xEC58 . #x9740)	;CJK UNIFIED IDEOGRAPH
                                (#xEC59 . #x9741)	;CJK UNIFIED IDEOGRAPH
                                (#xEC5A . #x9742)	;CJK UNIFIED IDEOGRAPH
                                (#xEC5B . #x9743)	;CJK UNIFIED IDEOGRAPH
                                (#xEC5C . #x9744)	;CJK UNIFIED IDEOGRAPH
                                (#xEC5D . #x9745)	;CJK UNIFIED IDEOGRAPH
                                (#xEC5E . #x9746)	;CJK UNIFIED IDEOGRAPH
                                (#xEC5F . #x9747)	;CJK UNIFIED IDEOGRAPH
                                (#xEC60 . #x9748)	;CJK UNIFIED IDEOGRAPH
                                (#xEC61 . #x9749)	;CJK UNIFIED IDEOGRAPH
                                (#xEC62 . #x974A)	;CJK UNIFIED IDEOGRAPH
                                (#xEC63 . #x974B)	;CJK UNIFIED IDEOGRAPH
                                (#xEC64 . #x974C)	;CJK UNIFIED IDEOGRAPH
                                (#xEC65 . #x974D)	;CJK UNIFIED IDEOGRAPH
                                (#xEC66 . #x974E)	;CJK UNIFIED IDEOGRAPH
                                (#xEC67 . #x974F)	;CJK UNIFIED IDEOGRAPH
                                (#xEC68 . #x9750)	;CJK UNIFIED IDEOGRAPH
                                (#xEC69 . #x9751)	;CJK UNIFIED IDEOGRAPH
                                (#xEC6A . #x9754)	;CJK UNIFIED IDEOGRAPH
                                (#xEC6B . #x9755)	;CJK UNIFIED IDEOGRAPH
                                (#xEC6C . #x9757)	;CJK UNIFIED IDEOGRAPH
                                (#xEC6D . #x9758)	;CJK UNIFIED IDEOGRAPH
                                (#xEC6E . #x975A)	;CJK UNIFIED IDEOGRAPH
                                (#xEC6F . #x975C)	;CJK UNIFIED IDEOGRAPH
                                (#xEC70 . #x975D)	;CJK UNIFIED IDEOGRAPH
                                (#xEC71 . #x975F)	;CJK UNIFIED IDEOGRAPH
                                (#xEC72 . #x9763)	;CJK UNIFIED IDEOGRAPH
                                (#xEC73 . #x9764)	;CJK UNIFIED IDEOGRAPH
                                (#xEC74 . #x9766)	;CJK UNIFIED IDEOGRAPH
                                (#xEC75 . #x9767)	;CJK UNIFIED IDEOGRAPH
                                (#xEC76 . #x9768)	;CJK UNIFIED IDEOGRAPH
                                (#xEC77 . #x976A)	;CJK UNIFIED IDEOGRAPH
                                (#xEC78 . #x976B)	;CJK UNIFIED IDEOGRAPH
                                (#xEC79 . #x976C)	;CJK UNIFIED IDEOGRAPH
                                (#xEC7A . #x976D)	;CJK UNIFIED IDEOGRAPH
                                (#xEC7B . #x976E)	;CJK UNIFIED IDEOGRAPH
                                (#xEC7C . #x976F)	;CJK UNIFIED IDEOGRAPH
                                (#xEC7D . #x9770)	;CJK UNIFIED IDEOGRAPH
                                (#xEC7E . #x9771)	;CJK UNIFIED IDEOGRAPH
                                (#xEC80 . #x9772)	;CJK UNIFIED IDEOGRAPH
                                (#xEC81 . #x9775)	;CJK UNIFIED IDEOGRAPH
                                (#xEC82 . #x9777)	;CJK UNIFIED IDEOGRAPH
                                (#xEC83 . #x9778)	;CJK UNIFIED IDEOGRAPH
                                (#xEC84 . #x9779)	;CJK UNIFIED IDEOGRAPH
                                (#xEC85 . #x977A)	;CJK UNIFIED IDEOGRAPH
                                (#xEC86 . #x977B)	;CJK UNIFIED IDEOGRAPH
                                (#xEC87 . #x977D)	;CJK UNIFIED IDEOGRAPH
                                (#xEC88 . #x977E)	;CJK UNIFIED IDEOGRAPH
                                (#xEC89 . #x977F)	;CJK UNIFIED IDEOGRAPH
                                (#xEC8A . #x9780)	;CJK UNIFIED IDEOGRAPH
                                (#xEC8B . #x9781)	;CJK UNIFIED IDEOGRAPH
                                (#xEC8C . #x9782)	;CJK UNIFIED IDEOGRAPH
                                (#xEC8D . #x9783)	;CJK UNIFIED IDEOGRAPH
                                (#xEC8E . #x9784)	;CJK UNIFIED IDEOGRAPH
                                (#xEC8F . #x9786)	;CJK UNIFIED IDEOGRAPH
                                (#xEC90 . #x9787)	;CJK UNIFIED IDEOGRAPH
                                (#xEC91 . #x9788)	;CJK UNIFIED IDEOGRAPH
                                (#xEC92 . #x9789)	;CJK UNIFIED IDEOGRAPH
                                (#xEC93 . #x978A)	;CJK UNIFIED IDEOGRAPH
                                (#xEC94 . #x978C)	;CJK UNIFIED IDEOGRAPH
                                (#xEC95 . #x978E)	;CJK UNIFIED IDEOGRAPH
                                (#xEC96 . #x978F)	;CJK UNIFIED IDEOGRAPH
                                (#xEC97 . #x9790)	;CJK UNIFIED IDEOGRAPH
                                (#xEC98 . #x9793)	;CJK UNIFIED IDEOGRAPH
                                (#xEC99 . #x9795)	;CJK UNIFIED IDEOGRAPH
                                (#xEC9A . #x9796)	;CJK UNIFIED IDEOGRAPH
                                (#xEC9B . #x9797)	;CJK UNIFIED IDEOGRAPH
                                (#xEC9C . #x9799)	;CJK UNIFIED IDEOGRAPH
                                (#xEC9D . #x979A)	;CJK UNIFIED IDEOGRAPH
                                (#xEC9E . #x979B)	;CJK UNIFIED IDEOGRAPH
                                (#xEC9F . #x979C)	;CJK UNIFIED IDEOGRAPH
                                (#xECA0 . #x979D)	;CJK UNIFIED IDEOGRAPH
                                (#xECA1 . #x81C1)	;CJK UNIFIED IDEOGRAPH
                                (#xECA2 . #x81A6)	;CJK UNIFIED IDEOGRAPH
                                (#xECA3 . #x6B24)	;CJK UNIFIED IDEOGRAPH
                                (#xECA4 . #x6B37)	;CJK UNIFIED IDEOGRAPH
                                (#xECA5 . #x6B39)	;CJK UNIFIED IDEOGRAPH
                                (#xECA6 . #x6B43)	;CJK UNIFIED IDEOGRAPH
                                (#xECA7 . #x6B46)	;CJK UNIFIED IDEOGRAPH
                                (#xECA8 . #x6B59)	;CJK UNIFIED IDEOGRAPH
                                (#xECA9 . #x98D1)	;CJK UNIFIED IDEOGRAPH
                                (#xECAA . #x98D2)	;CJK UNIFIED IDEOGRAPH
                                (#xECAB . #x98D3)	;CJK UNIFIED IDEOGRAPH
                                (#xECAC . #x98D5)	;CJK UNIFIED IDEOGRAPH
                                (#xECAD . #x98D9)	;CJK UNIFIED IDEOGRAPH
                                (#xECAE . #x98DA)	;CJK UNIFIED IDEOGRAPH
                                (#xECAF . #x6BB3)	;CJK UNIFIED IDEOGRAPH
                                (#xECB0 . #x5F40)	;CJK UNIFIED IDEOGRAPH
                                (#xECB1 . #x6BC2)	;CJK UNIFIED IDEOGRAPH
                                (#xECB2 . #x89F3)	;CJK UNIFIED IDEOGRAPH
                                (#xECB3 . #x6590)	;CJK UNIFIED IDEOGRAPH
                                (#xECB4 . #x9F51)	;CJK UNIFIED IDEOGRAPH
                                (#xECB5 . #x6593)	;CJK UNIFIED IDEOGRAPH
                                (#xECB6 . #x65BC)	;CJK UNIFIED IDEOGRAPH
                                (#xECB7 . #x65C6)	;CJK UNIFIED IDEOGRAPH
                                (#xECB8 . #x65C4)	;CJK UNIFIED IDEOGRAPH
                                (#xECB9 . #x65C3)	;CJK UNIFIED IDEOGRAPH
                                (#xECBA . #x65CC)	;CJK UNIFIED IDEOGRAPH
                                (#xECBB . #x65CE)	;CJK UNIFIED IDEOGRAPH
                                (#xECBC . #x65D2)	;CJK UNIFIED IDEOGRAPH
                                (#xECBD . #x65D6)	;CJK UNIFIED IDEOGRAPH
                                (#xECBE . #x7080)	;CJK UNIFIED IDEOGRAPH
                                (#xECBF . #x709C)	;CJK UNIFIED IDEOGRAPH
                                (#xECC0 . #x7096)	;CJK UNIFIED IDEOGRAPH
                                (#xECC1 . #x709D)	;CJK UNIFIED IDEOGRAPH
                                (#xECC2 . #x70BB)	;CJK UNIFIED IDEOGRAPH
                                (#xECC3 . #x70C0)	;CJK UNIFIED IDEOGRAPH
                                (#xECC4 . #x70B7)	;CJK UNIFIED IDEOGRAPH
                                (#xECC5 . #x70AB)	;CJK UNIFIED IDEOGRAPH
                                (#xECC6 . #x70B1)	;CJK UNIFIED IDEOGRAPH
                                (#xECC7 . #x70E8)	;CJK UNIFIED IDEOGRAPH
                                (#xECC8 . #x70CA)	;CJK UNIFIED IDEOGRAPH
                                (#xECC9 . #x7110)	;CJK UNIFIED IDEOGRAPH
                                (#xECCA . #x7113)	;CJK UNIFIED IDEOGRAPH
                                (#xECCB . #x7116)	;CJK UNIFIED IDEOGRAPH
                                (#xECCC . #x712F)	;CJK UNIFIED IDEOGRAPH
                                (#xECCD . #x7131)	;CJK UNIFIED IDEOGRAPH
                                (#xECCE . #x7173)	;CJK UNIFIED IDEOGRAPH
                                (#xECCF . #x715C)	;CJK UNIFIED IDEOGRAPH
                                (#xECD0 . #x7168)	;CJK UNIFIED IDEOGRAPH
                                (#xECD1 . #x7145)	;CJK UNIFIED IDEOGRAPH
                                (#xECD2 . #x7172)	;CJK UNIFIED IDEOGRAPH
                                (#xECD3 . #x714A)	;CJK UNIFIED IDEOGRAPH
                                (#xECD4 . #x7178)	;CJK UNIFIED IDEOGRAPH
                                (#xECD5 . #x717A)	;CJK UNIFIED IDEOGRAPH
                                (#xECD6 . #x7198)	;CJK UNIFIED IDEOGRAPH
                                (#xECD7 . #x71B3)	;CJK UNIFIED IDEOGRAPH
                                (#xECD8 . #x71B5)	;CJK UNIFIED IDEOGRAPH
                                (#xECD9 . #x71A8)	;CJK UNIFIED IDEOGRAPH
                                (#xECDA . #x71A0)	;CJK UNIFIED IDEOGRAPH
                                (#xECDB . #x71E0)	;CJK UNIFIED IDEOGRAPH
                                (#xECDC . #x71D4)	;CJK UNIFIED IDEOGRAPH
                                (#xECDD . #x71E7)	;CJK UNIFIED IDEOGRAPH
                                (#xECDE . #x71F9)	;CJK UNIFIED IDEOGRAPH
                                (#xECDF . #x721D)	;CJK UNIFIED IDEOGRAPH
                                (#xECE0 . #x7228)	;CJK UNIFIED IDEOGRAPH
                                (#xECE1 . #x706C)	;CJK UNIFIED IDEOGRAPH
                                (#xECE2 . #x7118)	;CJK UNIFIED IDEOGRAPH
                                (#xECE3 . #x7166)	;CJK UNIFIED IDEOGRAPH
                                (#xECE4 . #x71B9)	;CJK UNIFIED IDEOGRAPH
                                (#xECE5 . #x623E)	;CJK UNIFIED IDEOGRAPH
                                (#xECE6 . #x623D)	;CJK UNIFIED IDEOGRAPH
                                (#xECE7 . #x6243)	;CJK UNIFIED IDEOGRAPH
                                (#xECE8 . #x6248)	;CJK UNIFIED IDEOGRAPH
                                (#xECE9 . #x6249)	;CJK UNIFIED IDEOGRAPH
                                (#xECEA . #x793B)	;CJK UNIFIED IDEOGRAPH
                                (#xECEB . #x7940)	;CJK UNIFIED IDEOGRAPH
                                (#xECEC . #x7946)	;CJK UNIFIED IDEOGRAPH
                                (#xECED . #x7949)	;CJK UNIFIED IDEOGRAPH
                                (#xECEE . #x795B)	;CJK UNIFIED IDEOGRAPH
                                (#xECEF . #x795C)	;CJK UNIFIED IDEOGRAPH
                                (#xECF0 . #x7953)	;CJK UNIFIED IDEOGRAPH
                                (#xECF1 . #x795A)	;CJK UNIFIED IDEOGRAPH
                                (#xECF2 . #x7962)	;CJK UNIFIED IDEOGRAPH
                                (#xECF3 . #x7957)	;CJK UNIFIED IDEOGRAPH
                                (#xECF4 . #x7960)	;CJK UNIFIED IDEOGRAPH
                                (#xECF5 . #x796F)	;CJK UNIFIED IDEOGRAPH
                                (#xECF6 . #x7967)	;CJK UNIFIED IDEOGRAPH
                                (#xECF7 . #x797A)	;CJK UNIFIED IDEOGRAPH
                                (#xECF8 . #x7985)	;CJK UNIFIED IDEOGRAPH
                                (#xECF9 . #x798A)	;CJK UNIFIED IDEOGRAPH
                                (#xECFA . #x799A)	;CJK UNIFIED IDEOGRAPH
                                (#xECFB . #x79A7)	;CJK UNIFIED IDEOGRAPH
                                (#xECFC . #x79B3)	;CJK UNIFIED IDEOGRAPH
                                (#xECFD . #x5FD1)	;CJK UNIFIED IDEOGRAPH
                                (#xECFE . #x5FD0)	;CJK UNIFIED IDEOGRAPH
                                (#xED40 . #x979E)	;CJK UNIFIED IDEOGRAPH
                                (#xED41 . #x979F)	;CJK UNIFIED IDEOGRAPH
                                (#xED42 . #x97A1)	;CJK UNIFIED IDEOGRAPH
                                (#xED43 . #x97A2)	;CJK UNIFIED IDEOGRAPH
                                (#xED44 . #x97A4)	;CJK UNIFIED IDEOGRAPH
                                (#xED45 . #x97A5)	;CJK UNIFIED IDEOGRAPH
                                (#xED46 . #x97A6)	;CJK UNIFIED IDEOGRAPH
                                (#xED47 . #x97A7)	;CJK UNIFIED IDEOGRAPH
                                (#xED48 . #x97A8)	;CJK UNIFIED IDEOGRAPH
                                (#xED49 . #x97A9)	;CJK UNIFIED IDEOGRAPH
                                (#xED4A . #x97AA)	;CJK UNIFIED IDEOGRAPH
                                (#xED4B . #x97AC)	;CJK UNIFIED IDEOGRAPH
                                (#xED4C . #x97AE)	;CJK UNIFIED IDEOGRAPH
                                (#xED4D . #x97B0)	;CJK UNIFIED IDEOGRAPH
                                (#xED4E . #x97B1)	;CJK UNIFIED IDEOGRAPH
                                (#xED4F . #x97B3)	;CJK UNIFIED IDEOGRAPH
                                (#xED50 . #x97B5)	;CJK UNIFIED IDEOGRAPH
                                (#xED51 . #x97B6)	;CJK UNIFIED IDEOGRAPH
                                (#xED52 . #x97B7)	;CJK UNIFIED IDEOGRAPH
                                (#xED53 . #x97B8)	;CJK UNIFIED IDEOGRAPH
                                (#xED54 . #x97B9)	;CJK UNIFIED IDEOGRAPH
                                (#xED55 . #x97BA)	;CJK UNIFIED IDEOGRAPH
                                (#xED56 . #x97BB)	;CJK UNIFIED IDEOGRAPH
                                (#xED57 . #x97BC)	;CJK UNIFIED IDEOGRAPH
                                (#xED58 . #x97BD)	;CJK UNIFIED IDEOGRAPH
                                (#xED59 . #x97BE)	;CJK UNIFIED IDEOGRAPH
                                (#xED5A . #x97BF)	;CJK UNIFIED IDEOGRAPH
                                (#xED5B . #x97C0)	;CJK UNIFIED IDEOGRAPH
                                (#xED5C . #x97C1)	;CJK UNIFIED IDEOGRAPH
                                (#xED5D . #x97C2)	;CJK UNIFIED IDEOGRAPH
                                (#xED5E . #x97C3)	;CJK UNIFIED IDEOGRAPH
                                (#xED5F . #x97C4)	;CJK UNIFIED IDEOGRAPH
                                (#xED60 . #x97C5)	;CJK UNIFIED IDEOGRAPH
                                (#xED61 . #x97C6)	;CJK UNIFIED IDEOGRAPH
                                (#xED62 . #x97C7)	;CJK UNIFIED IDEOGRAPH
                                (#xED63 . #x97C8)	;CJK UNIFIED IDEOGRAPH
                                (#xED64 . #x97C9)	;CJK UNIFIED IDEOGRAPH
                                (#xED65 . #x97CA)	;CJK UNIFIED IDEOGRAPH
                                (#xED66 . #x97CB)	;CJK UNIFIED IDEOGRAPH
                                (#xED67 . #x97CC)	;CJK UNIFIED IDEOGRAPH
                                (#xED68 . #x97CD)	;CJK UNIFIED IDEOGRAPH
                                (#xED69 . #x97CE)	;CJK UNIFIED IDEOGRAPH
                                (#xED6A . #x97CF)	;CJK UNIFIED IDEOGRAPH
                                (#xED6B . #x97D0)	;CJK UNIFIED IDEOGRAPH
                                (#xED6C . #x97D1)	;CJK UNIFIED IDEOGRAPH
                                (#xED6D . #x97D2)	;CJK UNIFIED IDEOGRAPH
                                (#xED6E . #x97D3)	;CJK UNIFIED IDEOGRAPH
                                (#xED6F . #x97D4)	;CJK UNIFIED IDEOGRAPH
                                (#xED70 . #x97D5)	;CJK UNIFIED IDEOGRAPH
                                (#xED71 . #x97D6)	;CJK UNIFIED IDEOGRAPH
                                (#xED72 . #x97D7)	;CJK UNIFIED IDEOGRAPH
                                (#xED73 . #x97D8)	;CJK UNIFIED IDEOGRAPH
                                (#xED74 . #x97D9)	;CJK UNIFIED IDEOGRAPH
                                (#xED75 . #x97DA)	;CJK UNIFIED IDEOGRAPH
                                (#xED76 . #x97DB)	;CJK UNIFIED IDEOGRAPH
                                (#xED77 . #x97DC)	;CJK UNIFIED IDEOGRAPH
                                (#xED78 . #x97DD)	;CJK UNIFIED IDEOGRAPH
                                (#xED79 . #x97DE)	;CJK UNIFIED IDEOGRAPH
                                (#xED7A . #x97DF)	;CJK UNIFIED IDEOGRAPH
                                (#xED7B . #x97E0)	;CJK UNIFIED IDEOGRAPH
                                (#xED7C . #x97E1)	;CJK UNIFIED IDEOGRAPH
                                (#xED7D . #x97E2)	;CJK UNIFIED IDEOGRAPH
                                (#xED7E . #x97E3)	;CJK UNIFIED IDEOGRAPH
                                (#xED80 . #x97E4)	;CJK UNIFIED IDEOGRAPH
                                (#xED81 . #x97E5)	;CJK UNIFIED IDEOGRAPH
                                (#xED82 . #x97E8)	;CJK UNIFIED IDEOGRAPH
                                (#xED83 . #x97EE)	;CJK UNIFIED IDEOGRAPH
                                (#xED84 . #x97EF)	;CJK UNIFIED IDEOGRAPH
                                (#xED85 . #x97F0)	;CJK UNIFIED IDEOGRAPH
                                (#xED86 . #x97F1)	;CJK UNIFIED IDEOGRAPH
                                (#xED87 . #x97F2)	;CJK UNIFIED IDEOGRAPH
                                (#xED88 . #x97F4)	;CJK UNIFIED IDEOGRAPH
                                (#xED89 . #x97F7)	;CJK UNIFIED IDEOGRAPH
                                (#xED8A . #x97F8)	;CJK UNIFIED IDEOGRAPH
                                (#xED8B . #x97F9)	;CJK UNIFIED IDEOGRAPH
                                (#xED8C . #x97FA)	;CJK UNIFIED IDEOGRAPH
                                (#xED8D . #x97FB)	;CJK UNIFIED IDEOGRAPH
                                (#xED8E . #x97FC)	;CJK UNIFIED IDEOGRAPH
                                (#xED8F . #x97FD)	;CJK UNIFIED IDEOGRAPH
                                (#xED90 . #x97FE)	;CJK UNIFIED IDEOGRAPH
                                (#xED91 . #x97FF)	;CJK UNIFIED IDEOGRAPH
                                (#xED92 . #x9800)	;CJK UNIFIED IDEOGRAPH
                                (#xED93 . #x9801)	;CJK UNIFIED IDEOGRAPH
                                (#xED94 . #x9802)	;CJK UNIFIED IDEOGRAPH
                                (#xED95 . #x9803)	;CJK UNIFIED IDEOGRAPH
                                (#xED96 . #x9804)	;CJK UNIFIED IDEOGRAPH
                                (#xED97 . #x9805)	;CJK UNIFIED IDEOGRAPH
                                (#xED98 . #x9806)	;CJK UNIFIED IDEOGRAPH
                                (#xED99 . #x9807)	;CJK UNIFIED IDEOGRAPH
                                (#xED9A . #x9808)	;CJK UNIFIED IDEOGRAPH
                                (#xED9B . #x9809)	;CJK UNIFIED IDEOGRAPH
                                (#xED9C . #x980A)	;CJK UNIFIED IDEOGRAPH
                                (#xED9D . #x980B)	;CJK UNIFIED IDEOGRAPH
                                (#xED9E . #x980C)	;CJK UNIFIED IDEOGRAPH
                                (#xED9F . #x980D)	;CJK UNIFIED IDEOGRAPH
                                (#xEDA0 . #x980E)	;CJK UNIFIED IDEOGRAPH
                                (#xEDA1 . #x603C)	;CJK UNIFIED IDEOGRAPH
                                (#xEDA2 . #x605D)	;CJK UNIFIED IDEOGRAPH
                                (#xEDA3 . #x605A)	;CJK UNIFIED IDEOGRAPH
                                (#xEDA4 . #x6067)	;CJK UNIFIED IDEOGRAPH
                                (#xEDA5 . #x6041)	;CJK UNIFIED IDEOGRAPH
                                (#xEDA6 . #x6059)	;CJK UNIFIED IDEOGRAPH
                                (#xEDA7 . #x6063)	;CJK UNIFIED IDEOGRAPH
                                (#xEDA8 . #x60AB)	;CJK UNIFIED IDEOGRAPH
                                (#xEDA9 . #x6106)	;CJK UNIFIED IDEOGRAPH
                                (#xEDAA . #x610D)	;CJK UNIFIED IDEOGRAPH
                                (#xEDAB . #x615D)	;CJK UNIFIED IDEOGRAPH
                                (#xEDAC . #x61A9)	;CJK UNIFIED IDEOGRAPH
                                (#xEDAD . #x619D)	;CJK UNIFIED IDEOGRAPH
                                (#xEDAE . #x61CB)	;CJK UNIFIED IDEOGRAPH
                                (#xEDAF . #x61D1)	;CJK UNIFIED IDEOGRAPH
                                (#xEDB0 . #x6206)	;CJK UNIFIED IDEOGRAPH
                                (#xEDB1 . #x8080)	;CJK UNIFIED IDEOGRAPH
                                (#xEDB2 . #x807F)	;CJK UNIFIED IDEOGRAPH
                                (#xEDB3 . #x6C93)	;CJK UNIFIED IDEOGRAPH
                                (#xEDB4 . #x6CF6)	;CJK UNIFIED IDEOGRAPH
                                (#xEDB5 . #x6DFC)	;CJK UNIFIED IDEOGRAPH
                                (#xEDB6 . #x77F6)	;CJK UNIFIED IDEOGRAPH
                                (#xEDB7 . #x77F8)	;CJK UNIFIED IDEOGRAPH
                                (#xEDB8 . #x7800)	;CJK UNIFIED IDEOGRAPH
                                (#xEDB9 . #x7809)	;CJK UNIFIED IDEOGRAPH
                                (#xEDBA . #x7817)	;CJK UNIFIED IDEOGRAPH
                                (#xEDBB . #x7818)	;CJK UNIFIED IDEOGRAPH
                                (#xEDBC . #x7811)	;CJK UNIFIED IDEOGRAPH
                                (#xEDBD . #x65AB)	;CJK UNIFIED IDEOGRAPH
                                (#xEDBE . #x782D)	;CJK UNIFIED IDEOGRAPH
                                (#xEDBF . #x781C)	;CJK UNIFIED IDEOGRAPH
                                (#xEDC0 . #x781D)	;CJK UNIFIED IDEOGRAPH
                                (#xEDC1 . #x7839)	;CJK UNIFIED IDEOGRAPH
                                (#xEDC2 . #x783A)	;CJK UNIFIED IDEOGRAPH
                                (#xEDC3 . #x783B)	;CJK UNIFIED IDEOGRAPH
                                (#xEDC4 . #x781F)	;CJK UNIFIED IDEOGRAPH
                                (#xEDC5 . #x783C)	;CJK UNIFIED IDEOGRAPH
                                (#xEDC6 . #x7825)	;CJK UNIFIED IDEOGRAPH
                                (#xEDC7 . #x782C)	;CJK UNIFIED IDEOGRAPH
                                (#xEDC8 . #x7823)	;CJK UNIFIED IDEOGRAPH
                                (#xEDC9 . #x7829)	;CJK UNIFIED IDEOGRAPH
                                (#xEDCA . #x784E)	;CJK UNIFIED IDEOGRAPH
                                (#xEDCB . #x786D)	;CJK UNIFIED IDEOGRAPH
                                (#xEDCC . #x7856)	;CJK UNIFIED IDEOGRAPH
                                (#xEDCD . #x7857)	;CJK UNIFIED IDEOGRAPH
                                (#xEDCE . #x7826)	;CJK UNIFIED IDEOGRAPH
                                (#xEDCF . #x7850)	;CJK UNIFIED IDEOGRAPH
                                (#xEDD0 . #x7847)	;CJK UNIFIED IDEOGRAPH
                                (#xEDD1 . #x784C)	;CJK UNIFIED IDEOGRAPH
                                (#xEDD2 . #x786A)	;CJK UNIFIED IDEOGRAPH
                                (#xEDD3 . #x789B)	;CJK UNIFIED IDEOGRAPH
                                (#xEDD4 . #x7893)	;CJK UNIFIED IDEOGRAPH
                                (#xEDD5 . #x789A)	;CJK UNIFIED IDEOGRAPH
                                (#xEDD6 . #x7887)	;CJK UNIFIED IDEOGRAPH
                                (#xEDD7 . #x789C)	;CJK UNIFIED IDEOGRAPH
                                (#xEDD8 . #x78A1)	;CJK UNIFIED IDEOGRAPH
                                (#xEDD9 . #x78A3)	;CJK UNIFIED IDEOGRAPH
                                (#xEDDA . #x78B2)	;CJK UNIFIED IDEOGRAPH
                                (#xEDDB . #x78B9)	;CJK UNIFIED IDEOGRAPH
                                (#xEDDC . #x78A5)	;CJK UNIFIED IDEOGRAPH
                                (#xEDDD . #x78D4)	;CJK UNIFIED IDEOGRAPH
                                (#xEDDE . #x78D9)	;CJK UNIFIED IDEOGRAPH
                                (#xEDDF . #x78C9)	;CJK UNIFIED IDEOGRAPH
                                (#xEDE0 . #x78EC)	;CJK UNIFIED IDEOGRAPH
                                (#xEDE1 . #x78F2)	;CJK UNIFIED IDEOGRAPH
                                (#xEDE2 . #x7905)	;CJK UNIFIED IDEOGRAPH
                                (#xEDE3 . #x78F4)	;CJK UNIFIED IDEOGRAPH
                                (#xEDE4 . #x7913)	;CJK UNIFIED IDEOGRAPH
                                (#xEDE5 . #x7924)	;CJK UNIFIED IDEOGRAPH
                                (#xEDE6 . #x791E)	;CJK UNIFIED IDEOGRAPH
                                (#xEDE7 . #x7934)	;CJK UNIFIED IDEOGRAPH
                                (#xEDE8 . #x9F9B)	;CJK UNIFIED IDEOGRAPH
                                (#xEDE9 . #x9EF9)	;CJK UNIFIED IDEOGRAPH
                                (#xEDEA . #x9EFB)	;CJK UNIFIED IDEOGRAPH
                                (#xEDEB . #x9EFC)	;CJK UNIFIED IDEOGRAPH
                                (#xEDEC . #x76F1)	;CJK UNIFIED IDEOGRAPH
                                (#xEDED . #x7704)	;CJK UNIFIED IDEOGRAPH
                                (#xEDEE . #x770D)	;CJK UNIFIED IDEOGRAPH
                                (#xEDEF . #x76F9)	;CJK UNIFIED IDEOGRAPH
                                (#xEDF0 . #x7707)	;CJK UNIFIED IDEOGRAPH
                                (#xEDF1 . #x7708)	;CJK UNIFIED IDEOGRAPH
                                (#xEDF2 . #x771A)	;CJK UNIFIED IDEOGRAPH
                                (#xEDF3 . #x7722)	;CJK UNIFIED IDEOGRAPH
                                (#xEDF4 . #x7719)	;CJK UNIFIED IDEOGRAPH
                                (#xEDF5 . #x772D)	;CJK UNIFIED IDEOGRAPH
                                (#xEDF6 . #x7726)	;CJK UNIFIED IDEOGRAPH
                                (#xEDF7 . #x7735)	;CJK UNIFIED IDEOGRAPH
                                (#xEDF8 . #x7738)	;CJK UNIFIED IDEOGRAPH
                                (#xEDF9 . #x7750)	;CJK UNIFIED IDEOGRAPH
                                (#xEDFA . #x7751)	;CJK UNIFIED IDEOGRAPH
                                (#xEDFB . #x7747)	;CJK UNIFIED IDEOGRAPH
                                (#xEDFC . #x7743)	;CJK UNIFIED IDEOGRAPH
                                (#xEDFD . #x775A)	;CJK UNIFIED IDEOGRAPH
                                (#xEDFE . #x7768)	;CJK UNIFIED IDEOGRAPH
                                (#xEE40 . #x980F)	;CJK UNIFIED IDEOGRAPH
                                (#xEE41 . #x9810)	;CJK UNIFIED IDEOGRAPH
                                (#xEE42 . #x9811)	;CJK UNIFIED IDEOGRAPH
                                (#xEE43 . #x9812)	;CJK UNIFIED IDEOGRAPH
                                (#xEE44 . #x9813)	;CJK UNIFIED IDEOGRAPH
                                (#xEE45 . #x9814)	;CJK UNIFIED IDEOGRAPH
                                (#xEE46 . #x9815)	;CJK UNIFIED IDEOGRAPH
                                (#xEE47 . #x9816)	;CJK UNIFIED IDEOGRAPH
                                (#xEE48 . #x9817)	;CJK UNIFIED IDEOGRAPH
                                (#xEE49 . #x9818)	;CJK UNIFIED IDEOGRAPH
                                (#xEE4A . #x9819)	;CJK UNIFIED IDEOGRAPH
                                (#xEE4B . #x981A)	;CJK UNIFIED IDEOGRAPH
                                (#xEE4C . #x981B)	;CJK UNIFIED IDEOGRAPH
                                (#xEE4D . #x981C)	;CJK UNIFIED IDEOGRAPH
                                (#xEE4E . #x981D)	;CJK UNIFIED IDEOGRAPH
                                (#xEE4F . #x981E)	;CJK UNIFIED IDEOGRAPH
                                (#xEE50 . #x981F)	;CJK UNIFIED IDEOGRAPH
                                (#xEE51 . #x9820)	;CJK UNIFIED IDEOGRAPH
                                (#xEE52 . #x9821)	;CJK UNIFIED IDEOGRAPH
                                (#xEE53 . #x9822)	;CJK UNIFIED IDEOGRAPH
                                (#xEE54 . #x9823)	;CJK UNIFIED IDEOGRAPH
                                (#xEE55 . #x9824)	;CJK UNIFIED IDEOGRAPH
                                (#xEE56 . #x9825)	;CJK UNIFIED IDEOGRAPH
                                (#xEE57 . #x9826)	;CJK UNIFIED IDEOGRAPH
                                (#xEE58 . #x9827)	;CJK UNIFIED IDEOGRAPH
                                (#xEE59 . #x9828)	;CJK UNIFIED IDEOGRAPH
                                (#xEE5A . #x9829)	;CJK UNIFIED IDEOGRAPH
                                (#xEE5B . #x982A)	;CJK UNIFIED IDEOGRAPH
                                (#xEE5C . #x982B)	;CJK UNIFIED IDEOGRAPH
                                (#xEE5D . #x982C)	;CJK UNIFIED IDEOGRAPH
                                (#xEE5E . #x982D)	;CJK UNIFIED IDEOGRAPH
                                (#xEE5F . #x982E)	;CJK UNIFIED IDEOGRAPH
                                (#xEE60 . #x982F)	;CJK UNIFIED IDEOGRAPH
                                (#xEE61 . #x9830)	;CJK UNIFIED IDEOGRAPH
                                (#xEE62 . #x9831)	;CJK UNIFIED IDEOGRAPH
                                (#xEE63 . #x9832)	;CJK UNIFIED IDEOGRAPH
                                (#xEE64 . #x9833)	;CJK UNIFIED IDEOGRAPH
                                (#xEE65 . #x9834)	;CJK UNIFIED IDEOGRAPH
                                (#xEE66 . #x9835)	;CJK UNIFIED IDEOGRAPH
                                (#xEE67 . #x9836)	;CJK UNIFIED IDEOGRAPH
                                (#xEE68 . #x9837)	;CJK UNIFIED IDEOGRAPH
                                (#xEE69 . #x9838)	;CJK UNIFIED IDEOGRAPH
                                (#xEE6A . #x9839)	;CJK UNIFIED IDEOGRAPH
                                (#xEE6B . #x983A)	;CJK UNIFIED IDEOGRAPH
                                (#xEE6C . #x983B)	;CJK UNIFIED IDEOGRAPH
                                (#xEE6D . #x983C)	;CJK UNIFIED IDEOGRAPH
                                (#xEE6E . #x983D)	;CJK UNIFIED IDEOGRAPH
                                (#xEE6F . #x983E)	;CJK UNIFIED IDEOGRAPH
                                (#xEE70 . #x983F)	;CJK UNIFIED IDEOGRAPH
                                (#xEE71 . #x9840)	;CJK UNIFIED IDEOGRAPH
                                (#xEE72 . #x9841)	;CJK UNIFIED IDEOGRAPH
                                (#xEE73 . #x9842)	;CJK UNIFIED IDEOGRAPH
                                (#xEE74 . #x9843)	;CJK UNIFIED IDEOGRAPH
                                (#xEE75 . #x9844)	;CJK UNIFIED IDEOGRAPH
                                (#xEE76 . #x9845)	;CJK UNIFIED IDEOGRAPH
                                (#xEE77 . #x9846)	;CJK UNIFIED IDEOGRAPH
                                (#xEE78 . #x9847)	;CJK UNIFIED IDEOGRAPH
                                (#xEE79 . #x9848)	;CJK UNIFIED IDEOGRAPH
                                (#xEE7A . #x9849)	;CJK UNIFIED IDEOGRAPH
                                (#xEE7B . #x984A)	;CJK UNIFIED IDEOGRAPH
                                (#xEE7C . #x984B)	;CJK UNIFIED IDEOGRAPH
                                (#xEE7D . #x984C)	;CJK UNIFIED IDEOGRAPH
                                (#xEE7E . #x984D)	;CJK UNIFIED IDEOGRAPH
                                (#xEE80 . #x984E)	;CJK UNIFIED IDEOGRAPH
                                (#xEE81 . #x984F)	;CJK UNIFIED IDEOGRAPH
                                (#xEE82 . #x9850)	;CJK UNIFIED IDEOGRAPH
                                (#xEE83 . #x9851)	;CJK UNIFIED IDEOGRAPH
                                (#xEE84 . #x9852)	;CJK UNIFIED IDEOGRAPH
                                (#xEE85 . #x9853)	;CJK UNIFIED IDEOGRAPH
                                (#xEE86 . #x9854)	;CJK UNIFIED IDEOGRAPH
                                (#xEE87 . #x9855)	;CJK UNIFIED IDEOGRAPH
                                (#xEE88 . #x9856)	;CJK UNIFIED IDEOGRAPH
                                (#xEE89 . #x9857)	;CJK UNIFIED IDEOGRAPH
                                (#xEE8A . #x9858)	;CJK UNIFIED IDEOGRAPH
                                (#xEE8B . #x9859)	;CJK UNIFIED IDEOGRAPH
                                (#xEE8C . #x985A)	;CJK UNIFIED IDEOGRAPH
                                (#xEE8D . #x985B)	;CJK UNIFIED IDEOGRAPH
                                (#xEE8E . #x985C)	;CJK UNIFIED IDEOGRAPH
                                (#xEE8F . #x985D)	;CJK UNIFIED IDEOGRAPH
                                (#xEE90 . #x985E)	;CJK UNIFIED IDEOGRAPH
                                (#xEE91 . #x985F)	;CJK UNIFIED IDEOGRAPH
                                (#xEE92 . #x9860)	;CJK UNIFIED IDEOGRAPH
                                (#xEE93 . #x9861)	;CJK UNIFIED IDEOGRAPH
                                (#xEE94 . #x9862)	;CJK UNIFIED IDEOGRAPH
                                (#xEE95 . #x9863)	;CJK UNIFIED IDEOGRAPH
                                (#xEE96 . #x9864)	;CJK UNIFIED IDEOGRAPH
                                (#xEE97 . #x9865)	;CJK UNIFIED IDEOGRAPH
                                (#xEE98 . #x9866)	;CJK UNIFIED IDEOGRAPH
                                (#xEE99 . #x9867)	;CJK UNIFIED IDEOGRAPH
                                (#xEE9A . #x9868)	;CJK UNIFIED IDEOGRAPH
                                (#xEE9B . #x9869)	;CJK UNIFIED IDEOGRAPH
                                (#xEE9C . #x986A)	;CJK UNIFIED IDEOGRAPH
                                (#xEE9D . #x986B)	;CJK UNIFIED IDEOGRAPH
                                (#xEE9E . #x986C)	;CJK UNIFIED IDEOGRAPH
                                (#xEE9F . #x986D)	;CJK UNIFIED IDEOGRAPH
                                (#xEEA0 . #x986E)	;CJK UNIFIED IDEOGRAPH
                                (#xEEA1 . #x7762)	;CJK UNIFIED IDEOGRAPH
                                (#xEEA2 . #x7765)	;CJK UNIFIED IDEOGRAPH
                                (#xEEA3 . #x777F)	;CJK UNIFIED IDEOGRAPH
                                (#xEEA4 . #x778D)	;CJK UNIFIED IDEOGRAPH
                                (#xEEA5 . #x777D)	;CJK UNIFIED IDEOGRAPH
                                (#xEEA6 . #x7780)	;CJK UNIFIED IDEOGRAPH
                                (#xEEA7 . #x778C)	;CJK UNIFIED IDEOGRAPH
                                (#xEEA8 . #x7791)	;CJK UNIFIED IDEOGRAPH
                                (#xEEA9 . #x779F)	;CJK UNIFIED IDEOGRAPH
                                (#xEEAA . #x77A0)	;CJK UNIFIED IDEOGRAPH
                                (#xEEAB . #x77B0)	;CJK UNIFIED IDEOGRAPH
                                (#xEEAC . #x77B5)	;CJK UNIFIED IDEOGRAPH
                                (#xEEAD . #x77BD)	;CJK UNIFIED IDEOGRAPH
                                (#xEEAE . #x753A)	;CJK UNIFIED IDEOGRAPH
                                (#xEEAF . #x7540)	;CJK UNIFIED IDEOGRAPH
                                (#xEEB0 . #x754E)	;CJK UNIFIED IDEOGRAPH
                                (#xEEB1 . #x754B)	;CJK UNIFIED IDEOGRAPH
                                (#xEEB2 . #x7548)	;CJK UNIFIED IDEOGRAPH
                                (#xEEB3 . #x755B)	;CJK UNIFIED IDEOGRAPH
                                (#xEEB4 . #x7572)	;CJK UNIFIED IDEOGRAPH
                                (#xEEB5 . #x7579)	;CJK UNIFIED IDEOGRAPH
                                (#xEEB6 . #x7583)	;CJK UNIFIED IDEOGRAPH
                                (#xEEB7 . #x7F58)	;CJK UNIFIED IDEOGRAPH
                                (#xEEB8 . #x7F61)	;CJK UNIFIED IDEOGRAPH
                                (#xEEB9 . #x7F5F)	;CJK UNIFIED IDEOGRAPH
                                (#xEEBA . #x8A48)	;CJK UNIFIED IDEOGRAPH
                                (#xEEBB . #x7F68)	;CJK UNIFIED IDEOGRAPH
                                (#xEEBC . #x7F74)	;CJK UNIFIED IDEOGRAPH
                                (#xEEBD . #x7F71)	;CJK UNIFIED IDEOGRAPH
                                (#xEEBE . #x7F79)	;CJK UNIFIED IDEOGRAPH
                                (#xEEBF . #x7F81)	;CJK UNIFIED IDEOGRAPH
                                (#xEEC0 . #x7F7E)	;CJK UNIFIED IDEOGRAPH
                                (#xEEC1 . #x76CD)	;CJK UNIFIED IDEOGRAPH
                                (#xEEC2 . #x76E5)	;CJK UNIFIED IDEOGRAPH
                                (#xEEC3 . #x8832)	;CJK UNIFIED IDEOGRAPH
                                (#xEEC4 . #x9485)	;CJK UNIFIED IDEOGRAPH
                                (#xEEC5 . #x9486)	;CJK UNIFIED IDEOGRAPH
                                (#xEEC6 . #x9487)	;CJK UNIFIED IDEOGRAPH
                                (#xEEC7 . #x948B)	;CJK UNIFIED IDEOGRAPH
                                (#xEEC8 . #x948A)	;CJK UNIFIED IDEOGRAPH
                                (#xEEC9 . #x948C)	;CJK UNIFIED IDEOGRAPH
                                (#xEECA . #x948D)	;CJK UNIFIED IDEOGRAPH
                                (#xEECB . #x948F)	;CJK UNIFIED IDEOGRAPH
                                (#xEECC . #x9490)	;CJK UNIFIED IDEOGRAPH
                                (#xEECD . #x9494)	;CJK UNIFIED IDEOGRAPH
                                (#xEECE . #x9497)	;CJK UNIFIED IDEOGRAPH
                                (#xEECF . #x9495)	;CJK UNIFIED IDEOGRAPH
                                (#xEED0 . #x949A)	;CJK UNIFIED IDEOGRAPH
                                (#xEED1 . #x949B)	;CJK UNIFIED IDEOGRAPH
                                (#xEED2 . #x949C)	;CJK UNIFIED IDEOGRAPH
                                (#xEED3 . #x94A3)	;CJK UNIFIED IDEOGRAPH
                                (#xEED4 . #x94A4)	;CJK UNIFIED IDEOGRAPH
                                (#xEED5 . #x94AB)	;CJK UNIFIED IDEOGRAPH
                                (#xEED6 . #x94AA)	;CJK UNIFIED IDEOGRAPH
                                (#xEED7 . #x94AD)	;CJK UNIFIED IDEOGRAPH
                                (#xEED8 . #x94AC)	;CJK UNIFIED IDEOGRAPH
                                (#xEED9 . #x94AF)	;CJK UNIFIED IDEOGRAPH
                                (#xEEDA . #x94B0)	;CJK UNIFIED IDEOGRAPH
                                (#xEEDB . #x94B2)	;CJK UNIFIED IDEOGRAPH
                                (#xEEDC . #x94B4)	;CJK UNIFIED IDEOGRAPH
                                (#xEEDD . #x94B6)	;CJK UNIFIED IDEOGRAPH
                                (#xEEDE . #x94B7)	;CJK UNIFIED IDEOGRAPH
                                (#xEEDF . #x94B8)	;CJK UNIFIED IDEOGRAPH
                                (#xEEE0 . #x94B9)	;CJK UNIFIED IDEOGRAPH
                                (#xEEE1 . #x94BA)	;CJK UNIFIED IDEOGRAPH
                                (#xEEE2 . #x94BC)	;CJK UNIFIED IDEOGRAPH
                                (#xEEE3 . #x94BD)	;CJK UNIFIED IDEOGRAPH
                                (#xEEE4 . #x94BF)	;CJK UNIFIED IDEOGRAPH
                                (#xEEE5 . #x94C4)	;CJK UNIFIED IDEOGRAPH
                                (#xEEE6 . #x94C8)	;CJK UNIFIED IDEOGRAPH
                                (#xEEE7 . #x94C9)	;CJK UNIFIED IDEOGRAPH
                                (#xEEE8 . #x94CA)	;CJK UNIFIED IDEOGRAPH
                                (#xEEE9 . #x94CB)	;CJK UNIFIED IDEOGRAPH
                                (#xEEEA . #x94CC)	;CJK UNIFIED IDEOGRAPH
                                (#xEEEB . #x94CD)	;CJK UNIFIED IDEOGRAPH
                                (#xEEEC . #x94CE)	;CJK UNIFIED IDEOGRAPH
                                (#xEEED . #x94D0)	;CJK UNIFIED IDEOGRAPH
                                (#xEEEE . #x94D1)	;CJK UNIFIED IDEOGRAPH
                                (#xEEEF . #x94D2)	;CJK UNIFIED IDEOGRAPH
                                (#xEEF0 . #x94D5)	;CJK UNIFIED IDEOGRAPH
                                (#xEEF1 . #x94D6)	;CJK UNIFIED IDEOGRAPH
                                (#xEEF2 . #x94D7)	;CJK UNIFIED IDEOGRAPH
                                (#xEEF3 . #x94D9)	;CJK UNIFIED IDEOGRAPH
                                (#xEEF4 . #x94D8)	;CJK UNIFIED IDEOGRAPH
                                (#xEEF5 . #x94DB)	;CJK UNIFIED IDEOGRAPH
                                (#xEEF6 . #x94DE)	;CJK UNIFIED IDEOGRAPH
                                (#xEEF7 . #x94DF)	;CJK UNIFIED IDEOGRAPH
                                (#xEEF8 . #x94E0)	;CJK UNIFIED IDEOGRAPH
                                (#xEEF9 . #x94E2)	;CJK UNIFIED IDEOGRAPH
                                (#xEEFA . #x94E4)	;CJK UNIFIED IDEOGRAPH
                                (#xEEFB . #x94E5)	;CJK UNIFIED IDEOGRAPH
                                (#xEEFC . #x94E7)	;CJK UNIFIED IDEOGRAPH
                                (#xEEFD . #x94E8)	;CJK UNIFIED IDEOGRAPH
                                (#xEEFE . #x94EA)	;CJK UNIFIED IDEOGRAPH
                                (#xEF40 . #x986F)	;CJK UNIFIED IDEOGRAPH
                                (#xEF41 . #x9870)	;CJK UNIFIED IDEOGRAPH
                                (#xEF42 . #x9871)	;CJK UNIFIED IDEOGRAPH
                                (#xEF43 . #x9872)	;CJK UNIFIED IDEOGRAPH
                                (#xEF44 . #x9873)	;CJK UNIFIED IDEOGRAPH
                                (#xEF45 . #x9874)	;CJK UNIFIED IDEOGRAPH
                                (#xEF46 . #x988B)	;CJK UNIFIED IDEOGRAPH
                                (#xEF47 . #x988E)	;CJK UNIFIED IDEOGRAPH
                                (#xEF48 . #x9892)	;CJK UNIFIED IDEOGRAPH
                                (#xEF49 . #x9895)	;CJK UNIFIED IDEOGRAPH
                                (#xEF4A . #x9899)	;CJK UNIFIED IDEOGRAPH
                                (#xEF4B . #x98A3)	;CJK UNIFIED IDEOGRAPH
                                (#xEF4C . #x98A8)	;CJK UNIFIED IDEOGRAPH
                                (#xEF4D . #x98A9)	;CJK UNIFIED IDEOGRAPH
                                (#xEF4E . #x98AA)	;CJK UNIFIED IDEOGRAPH
                                (#xEF4F . #x98AB)	;CJK UNIFIED IDEOGRAPH
                                (#xEF50 . #x98AC)	;CJK UNIFIED IDEOGRAPH
                                (#xEF51 . #x98AD)	;CJK UNIFIED IDEOGRAPH
                                (#xEF52 . #x98AE)	;CJK UNIFIED IDEOGRAPH
                                (#xEF53 . #x98AF)	;CJK UNIFIED IDEOGRAPH
                                (#xEF54 . #x98B0)	;CJK UNIFIED IDEOGRAPH
                                (#xEF55 . #x98B1)	;CJK UNIFIED IDEOGRAPH
                                (#xEF56 . #x98B2)	;CJK UNIFIED IDEOGRAPH
                                (#xEF57 . #x98B3)	;CJK UNIFIED IDEOGRAPH
                                (#xEF58 . #x98B4)	;CJK UNIFIED IDEOGRAPH
                                (#xEF59 . #x98B5)	;CJK UNIFIED IDEOGRAPH
                                (#xEF5A . #x98B6)	;CJK UNIFIED IDEOGRAPH
                                (#xEF5B . #x98B7)	;CJK UNIFIED IDEOGRAPH
                                (#xEF5C . #x98B8)	;CJK UNIFIED IDEOGRAPH
                                (#xEF5D . #x98B9)	;CJK UNIFIED IDEOGRAPH
                                (#xEF5E . #x98BA)	;CJK UNIFIED IDEOGRAPH
                                (#xEF5F . #x98BB)	;CJK UNIFIED IDEOGRAPH
                                (#xEF60 . #x98BC)	;CJK UNIFIED IDEOGRAPH
                                (#xEF61 . #x98BD)	;CJK UNIFIED IDEOGRAPH
                                (#xEF62 . #x98BE)	;CJK UNIFIED IDEOGRAPH
                                (#xEF63 . #x98BF)	;CJK UNIFIED IDEOGRAPH
                                (#xEF64 . #x98C0)	;CJK UNIFIED IDEOGRAPH
                                (#xEF65 . #x98C1)	;CJK UNIFIED IDEOGRAPH
                                (#xEF66 . #x98C2)	;CJK UNIFIED IDEOGRAPH
                                (#xEF67 . #x98C3)	;CJK UNIFIED IDEOGRAPH
                                (#xEF68 . #x98C4)	;CJK UNIFIED IDEOGRAPH
                                (#xEF69 . #x98C5)	;CJK UNIFIED IDEOGRAPH
                                (#xEF6A . #x98C6)	;CJK UNIFIED IDEOGRAPH
                                (#xEF6B . #x98C7)	;CJK UNIFIED IDEOGRAPH
                                (#xEF6C . #x98C8)	;CJK UNIFIED IDEOGRAPH
                                (#xEF6D . #x98C9)	;CJK UNIFIED IDEOGRAPH
                                (#xEF6E . #x98CA)	;CJK UNIFIED IDEOGRAPH
                                (#xEF6F . #x98CB)	;CJK UNIFIED IDEOGRAPH
                                (#xEF70 . #x98CC)	;CJK UNIFIED IDEOGRAPH
                                (#xEF71 . #x98CD)	;CJK UNIFIED IDEOGRAPH
                                (#xEF72 . #x98CF)	;CJK UNIFIED IDEOGRAPH
                                (#xEF73 . #x98D0)	;CJK UNIFIED IDEOGRAPH
                                (#xEF74 . #x98D4)	;CJK UNIFIED IDEOGRAPH
                                (#xEF75 . #x98D6)	;CJK UNIFIED IDEOGRAPH
                                (#xEF76 . #x98D7)	;CJK UNIFIED IDEOGRAPH
                                (#xEF77 . #x98DB)	;CJK UNIFIED IDEOGRAPH
                                (#xEF78 . #x98DC)	;CJK UNIFIED IDEOGRAPH
                                (#xEF79 . #x98DD)	;CJK UNIFIED IDEOGRAPH
                                (#xEF7A . #x98E0)	;CJK UNIFIED IDEOGRAPH
                                (#xEF7B . #x98E1)	;CJK UNIFIED IDEOGRAPH
                                (#xEF7C . #x98E2)	;CJK UNIFIED IDEOGRAPH
                                (#xEF7D . #x98E3)	;CJK UNIFIED IDEOGRAPH
                                (#xEF7E . #x98E4)	;CJK UNIFIED IDEOGRAPH
                                (#xEF80 . #x98E5)	;CJK UNIFIED IDEOGRAPH
                                (#xEF81 . #x98E6)	;CJK UNIFIED IDEOGRAPH
                                (#xEF82 . #x98E9)	;CJK UNIFIED IDEOGRAPH
                                (#xEF83 . #x98EA)	;CJK UNIFIED IDEOGRAPH
                                (#xEF84 . #x98EB)	;CJK UNIFIED IDEOGRAPH
                                (#xEF85 . #x98EC)	;CJK UNIFIED IDEOGRAPH
                                (#xEF86 . #x98ED)	;CJK UNIFIED IDEOGRAPH
                                (#xEF87 . #x98EE)	;CJK UNIFIED IDEOGRAPH
                                (#xEF88 . #x98EF)	;CJK UNIFIED IDEOGRAPH
                                (#xEF89 . #x98F0)	;CJK UNIFIED IDEOGRAPH
                                (#xEF8A . #x98F1)	;CJK UNIFIED IDEOGRAPH
                                (#xEF8B . #x98F2)	;CJK UNIFIED IDEOGRAPH
                                (#xEF8C . #x98F3)	;CJK UNIFIED IDEOGRAPH
                                (#xEF8D . #x98F4)	;CJK UNIFIED IDEOGRAPH
                                (#xEF8E . #x98F5)	;CJK UNIFIED IDEOGRAPH
                                (#xEF8F . #x98F6)	;CJK UNIFIED IDEOGRAPH
                                (#xEF90 . #x98F7)	;CJK UNIFIED IDEOGRAPH
                                (#xEF91 . #x98F8)	;CJK UNIFIED IDEOGRAPH
                                (#xEF92 . #x98F9)	;CJK UNIFIED IDEOGRAPH
                                (#xEF93 . #x98FA)	;CJK UNIFIED IDEOGRAPH
                                (#xEF94 . #x98FB)	;CJK UNIFIED IDEOGRAPH
                                (#xEF95 . #x98FC)	;CJK UNIFIED IDEOGRAPH
                                (#xEF96 . #x98FD)	;CJK UNIFIED IDEOGRAPH
                                (#xEF97 . #x98FE)	;CJK UNIFIED IDEOGRAPH
                                (#xEF98 . #x98FF)	;CJK UNIFIED IDEOGRAPH
                                (#xEF99 . #x9900)	;CJK UNIFIED IDEOGRAPH
                                (#xEF9A . #x9901)	;CJK UNIFIED IDEOGRAPH
                                (#xEF9B . #x9902)	;CJK UNIFIED IDEOGRAPH
                                (#xEF9C . #x9903)	;CJK UNIFIED IDEOGRAPH
                                (#xEF9D . #x9904)	;CJK UNIFIED IDEOGRAPH
                                (#xEF9E . #x9905)	;CJK UNIFIED IDEOGRAPH
                                (#xEF9F . #x9906)	;CJK UNIFIED IDEOGRAPH
                                (#xEFA0 . #x9907)	;CJK UNIFIED IDEOGRAPH
                                (#xEFA1 . #x94E9)	;CJK UNIFIED IDEOGRAPH
                                (#xEFA2 . #x94EB)	;CJK UNIFIED IDEOGRAPH
                                (#xEFA3 . #x94EE)	;CJK UNIFIED IDEOGRAPH
                                (#xEFA4 . #x94EF)	;CJK UNIFIED IDEOGRAPH
                                (#xEFA5 . #x94F3)	;CJK UNIFIED IDEOGRAPH
                                (#xEFA6 . #x94F4)	;CJK UNIFIED IDEOGRAPH
                                (#xEFA7 . #x94F5)	;CJK UNIFIED IDEOGRAPH
                                (#xEFA8 . #x94F7)	;CJK UNIFIED IDEOGRAPH
                                (#xEFA9 . #x94F9)	;CJK UNIFIED IDEOGRAPH
                                (#xEFAA . #x94FC)	;CJK UNIFIED IDEOGRAPH
                                (#xEFAB . #x94FD)	;CJK UNIFIED IDEOGRAPH
                                (#xEFAC . #x94FF)	;CJK UNIFIED IDEOGRAPH
                                (#xEFAD . #x9503)	;CJK UNIFIED IDEOGRAPH
                                (#xEFAE . #x9502)	;CJK UNIFIED IDEOGRAPH
                                (#xEFAF . #x9506)	;CJK UNIFIED IDEOGRAPH
                                (#xEFB0 . #x9507)	;CJK UNIFIED IDEOGRAPH
                                (#xEFB1 . #x9509)	;CJK UNIFIED IDEOGRAPH
                                (#xEFB2 . #x950A)	;CJK UNIFIED IDEOGRAPH
                                (#xEFB3 . #x950D)	;CJK UNIFIED IDEOGRAPH
                                (#xEFB4 . #x950E)	;CJK UNIFIED IDEOGRAPH
                                (#xEFB5 . #x950F)	;CJK UNIFIED IDEOGRAPH
                                (#xEFB6 . #x9512)	;CJK UNIFIED IDEOGRAPH
                                (#xEFB7 . #x9513)	;CJK UNIFIED IDEOGRAPH
                                (#xEFB8 . #x9514)	;CJK UNIFIED IDEOGRAPH
                                (#xEFB9 . #x9515)	;CJK UNIFIED IDEOGRAPH
                                (#xEFBA . #x9516)	;CJK UNIFIED IDEOGRAPH
                                (#xEFBB . #x9518)	;CJK UNIFIED IDEOGRAPH
                                (#xEFBC . #x951B)	;CJK UNIFIED IDEOGRAPH
                                (#xEFBD . #x951D)	;CJK UNIFIED IDEOGRAPH
                                (#xEFBE . #x951E)	;CJK UNIFIED IDEOGRAPH
                                (#xEFBF . #x951F)	;CJK UNIFIED IDEOGRAPH
                                (#xEFC0 . #x9522)	;CJK UNIFIED IDEOGRAPH
                                (#xEFC1 . #x952A)	;CJK UNIFIED IDEOGRAPH
                                (#xEFC2 . #x952B)	;CJK UNIFIED IDEOGRAPH
                                (#xEFC3 . #x9529)	;CJK UNIFIED IDEOGRAPH
                                (#xEFC4 . #x952C)	;CJK UNIFIED IDEOGRAPH
                                (#xEFC5 . #x9531)	;CJK UNIFIED IDEOGRAPH
                                (#xEFC6 . #x9532)	;CJK UNIFIED IDEOGRAPH
                                (#xEFC7 . #x9534)	;CJK UNIFIED IDEOGRAPH
                                (#xEFC8 . #x9536)	;CJK UNIFIED IDEOGRAPH
                                (#xEFC9 . #x9537)	;CJK UNIFIED IDEOGRAPH
                                (#xEFCA . #x9538)	;CJK UNIFIED IDEOGRAPH
                                (#xEFCB . #x953C)	;CJK UNIFIED IDEOGRAPH
                                (#xEFCC . #x953E)	;CJK UNIFIED IDEOGRAPH
                                (#xEFCD . #x953F)	;CJK UNIFIED IDEOGRAPH
                                (#xEFCE . #x9542)	;CJK UNIFIED IDEOGRAPH
                                (#xEFCF . #x9535)	;CJK UNIFIED IDEOGRAPH
                                (#xEFD0 . #x9544)	;CJK UNIFIED IDEOGRAPH
                                (#xEFD1 . #x9545)	;CJK UNIFIED IDEOGRAPH
                                (#xEFD2 . #x9546)	;CJK UNIFIED IDEOGRAPH
                                (#xEFD3 . #x9549)	;CJK UNIFIED IDEOGRAPH
                                (#xEFD4 . #x954C)	;CJK UNIFIED IDEOGRAPH
                                (#xEFD5 . #x954E)	;CJK UNIFIED IDEOGRAPH
                                (#xEFD6 . #x954F)	;CJK UNIFIED IDEOGRAPH
                                (#xEFD7 . #x9552)	;CJK UNIFIED IDEOGRAPH
                                (#xEFD8 . #x9553)	;CJK UNIFIED IDEOGRAPH
                                (#xEFD9 . #x9554)	;CJK UNIFIED IDEOGRAPH
                                (#xEFDA . #x9556)	;CJK UNIFIED IDEOGRAPH
                                (#xEFDB . #x9557)	;CJK UNIFIED IDEOGRAPH
                                (#xEFDC . #x9558)	;CJK UNIFIED IDEOGRAPH
                                (#xEFDD . #x9559)	;CJK UNIFIED IDEOGRAPH
                                (#xEFDE . #x955B)	;CJK UNIFIED IDEOGRAPH
                                (#xEFDF . #x955E)	;CJK UNIFIED IDEOGRAPH
                                (#xEFE0 . #x955F)	;CJK UNIFIED IDEOGRAPH
                                (#xEFE1 . #x955D)	;CJK UNIFIED IDEOGRAPH
                                (#xEFE2 . #x9561)	;CJK UNIFIED IDEOGRAPH
                                (#xEFE3 . #x9562)	;CJK UNIFIED IDEOGRAPH
                                (#xEFE4 . #x9564)	;CJK UNIFIED IDEOGRAPH
                                (#xEFE5 . #x9565)	;CJK UNIFIED IDEOGRAPH
                                (#xEFE6 . #x9566)	;CJK UNIFIED IDEOGRAPH
                                (#xEFE7 . #x9567)	;CJK UNIFIED IDEOGRAPH
                                (#xEFE8 . #x9568)	;CJK UNIFIED IDEOGRAPH
                                (#xEFE9 . #x9569)	;CJK UNIFIED IDEOGRAPH
                                (#xEFEA . #x956A)	;CJK UNIFIED IDEOGRAPH
                                (#xEFEB . #x956B)	;CJK UNIFIED IDEOGRAPH
                                (#xEFEC . #x956C)	;CJK UNIFIED IDEOGRAPH
                                (#xEFED . #x956F)	;CJK UNIFIED IDEOGRAPH
                                (#xEFEE . #x9571)	;CJK UNIFIED IDEOGRAPH
                                (#xEFEF . #x9572)	;CJK UNIFIED IDEOGRAPH
                                (#xEFF0 . #x9573)	;CJK UNIFIED IDEOGRAPH
                                (#xEFF1 . #x953A)	;CJK UNIFIED IDEOGRAPH
                                (#xEFF2 . #x77E7)	;CJK UNIFIED IDEOGRAPH
                                (#xEFF3 . #x77EC)	;CJK UNIFIED IDEOGRAPH
                                (#xEFF4 . #x96C9)	;CJK UNIFIED IDEOGRAPH
                                (#xEFF5 . #x79D5)	;CJK UNIFIED IDEOGRAPH
                                (#xEFF6 . #x79ED)	;CJK UNIFIED IDEOGRAPH
                                (#xEFF7 . #x79E3)	;CJK UNIFIED IDEOGRAPH
                                (#xEFF8 . #x79EB)	;CJK UNIFIED IDEOGRAPH
                                (#xEFF9 . #x7A06)	;CJK UNIFIED IDEOGRAPH
                                (#xEFFA . #x5D47)	;CJK UNIFIED IDEOGRAPH
                                (#xEFFB . #x7A03)	;CJK UNIFIED IDEOGRAPH
                                (#xEFFC . #x7A02)	;CJK UNIFIED IDEOGRAPH
                                (#xEFFD . #x7A1E)	;CJK UNIFIED IDEOGRAPH
                                (#xEFFE . #x7A14)	;CJK UNIFIED IDEOGRAPH
                                (#xF040 . #x9908)	;CJK UNIFIED IDEOGRAPH
                                (#xF041 . #x9909)	;CJK UNIFIED IDEOGRAPH
                                (#xF042 . #x990A)	;CJK UNIFIED IDEOGRAPH
                                (#xF043 . #x990B)	;CJK UNIFIED IDEOGRAPH
                                (#xF044 . #x990C)	;CJK UNIFIED IDEOGRAPH
                                (#xF045 . #x990E)	;CJK UNIFIED IDEOGRAPH
                                (#xF046 . #x990F)	;CJK UNIFIED IDEOGRAPH
                                (#xF047 . #x9911)	;CJK UNIFIED IDEOGRAPH
                                (#xF048 . #x9912)	;CJK UNIFIED IDEOGRAPH
                                (#xF049 . #x9913)	;CJK UNIFIED IDEOGRAPH
                                (#xF04A . #x9914)	;CJK UNIFIED IDEOGRAPH
                                (#xF04B . #x9915)	;CJK UNIFIED IDEOGRAPH
                                (#xF04C . #x9916)	;CJK UNIFIED IDEOGRAPH
                                (#xF04D . #x9917)	;CJK UNIFIED IDEOGRAPH
                                (#xF04E . #x9918)	;CJK UNIFIED IDEOGRAPH
                                (#xF04F . #x9919)	;CJK UNIFIED IDEOGRAPH
                                (#xF050 . #x991A)	;CJK UNIFIED IDEOGRAPH
                                (#xF051 . #x991B)	;CJK UNIFIED IDEOGRAPH
                                (#xF052 . #x991C)	;CJK UNIFIED IDEOGRAPH
                                (#xF053 . #x991D)	;CJK UNIFIED IDEOGRAPH
                                (#xF054 . #x991E)	;CJK UNIFIED IDEOGRAPH
                                (#xF055 . #x991F)	;CJK UNIFIED IDEOGRAPH
                                (#xF056 . #x9920)	;CJK UNIFIED IDEOGRAPH
                                (#xF057 . #x9921)	;CJK UNIFIED IDEOGRAPH
                                (#xF058 . #x9922)	;CJK UNIFIED IDEOGRAPH
                                (#xF059 . #x9923)	;CJK UNIFIED IDEOGRAPH
                                (#xF05A . #x9924)	;CJK UNIFIED IDEOGRAPH
                                (#xF05B . #x9925)	;CJK UNIFIED IDEOGRAPH
                                (#xF05C . #x9926)	;CJK UNIFIED IDEOGRAPH
                                (#xF05D . #x9927)	;CJK UNIFIED IDEOGRAPH
                                (#xF05E . #x9928)	;CJK UNIFIED IDEOGRAPH
                                (#xF05F . #x9929)	;CJK UNIFIED IDEOGRAPH
                                (#xF060 . #x992A)	;CJK UNIFIED IDEOGRAPH
                                (#xF061 . #x992B)	;CJK UNIFIED IDEOGRAPH
                                (#xF062 . #x992C)	;CJK UNIFIED IDEOGRAPH
                                (#xF063 . #x992D)	;CJK UNIFIED IDEOGRAPH
                                (#xF064 . #x992F)	;CJK UNIFIED IDEOGRAPH
                                (#xF065 . #x9930)	;CJK UNIFIED IDEOGRAPH
                                (#xF066 . #x9931)	;CJK UNIFIED IDEOGRAPH
                                (#xF067 . #x9932)	;CJK UNIFIED IDEOGRAPH
                                (#xF068 . #x9933)	;CJK UNIFIED IDEOGRAPH
                                (#xF069 . #x9934)	;CJK UNIFIED IDEOGRAPH
                                (#xF06A . #x9935)	;CJK UNIFIED IDEOGRAPH
                                (#xF06B . #x9936)	;CJK UNIFIED IDEOGRAPH
                                (#xF06C . #x9937)	;CJK UNIFIED IDEOGRAPH
                                (#xF06D . #x9938)	;CJK UNIFIED IDEOGRAPH
                                (#xF06E . #x9939)	;CJK UNIFIED IDEOGRAPH
                                (#xF06F . #x993A)	;CJK UNIFIED IDEOGRAPH
                                (#xF070 . #x993B)	;CJK UNIFIED IDEOGRAPH
                                (#xF071 . #x993C)	;CJK UNIFIED IDEOGRAPH
                                (#xF072 . #x993D)	;CJK UNIFIED IDEOGRAPH
                                (#xF073 . #x993E)	;CJK UNIFIED IDEOGRAPH
                                (#xF074 . #x993F)	;CJK UNIFIED IDEOGRAPH
                                (#xF075 . #x9940)	;CJK UNIFIED IDEOGRAPH
                                (#xF076 . #x9941)	;CJK UNIFIED IDEOGRAPH
                                (#xF077 . #x9942)	;CJK UNIFIED IDEOGRAPH
                                (#xF078 . #x9943)	;CJK UNIFIED IDEOGRAPH
                                (#xF079 . #x9944)	;CJK UNIFIED IDEOGRAPH
                                (#xF07A . #x9945)	;CJK UNIFIED IDEOGRAPH
                                (#xF07B . #x9946)	;CJK UNIFIED IDEOGRAPH
                                (#xF07C . #x9947)	;CJK UNIFIED IDEOGRAPH
                                (#xF07D . #x9948)	;CJK UNIFIED IDEOGRAPH
                                (#xF07E . #x9949)	;CJK UNIFIED IDEOGRAPH
                                (#xF080 . #x994A)	;CJK UNIFIED IDEOGRAPH
                                (#xF081 . #x994B)	;CJK UNIFIED IDEOGRAPH
                                (#xF082 . #x994C)	;CJK UNIFIED IDEOGRAPH
                                (#xF083 . #x994D)	;CJK UNIFIED IDEOGRAPH
                                (#xF084 . #x994E)	;CJK UNIFIED IDEOGRAPH
                                (#xF085 . #x994F)	;CJK UNIFIED IDEOGRAPH
                                (#xF086 . #x9950)	;CJK UNIFIED IDEOGRAPH
                                (#xF087 . #x9951)	;CJK UNIFIED IDEOGRAPH
                                (#xF088 . #x9952)	;CJK UNIFIED IDEOGRAPH
                                (#xF089 . #x9953)	;CJK UNIFIED IDEOGRAPH
                                (#xF08A . #x9956)	;CJK UNIFIED IDEOGRAPH
                                (#xF08B . #x9957)	;CJK UNIFIED IDEOGRAPH
                                (#xF08C . #x9958)	;CJK UNIFIED IDEOGRAPH
                                (#xF08D . #x9959)	;CJK UNIFIED IDEOGRAPH
                                (#xF08E . #x995A)	;CJK UNIFIED IDEOGRAPH
                                (#xF08F . #x995B)	;CJK UNIFIED IDEOGRAPH
                                (#xF090 . #x995C)	;CJK UNIFIED IDEOGRAPH
                                (#xF091 . #x995D)	;CJK UNIFIED IDEOGRAPH
                                (#xF092 . #x995E)	;CJK UNIFIED IDEOGRAPH
                                (#xF093 . #x995F)	;CJK UNIFIED IDEOGRAPH
                                (#xF094 . #x9960)	;CJK UNIFIED IDEOGRAPH
                                (#xF095 . #x9961)	;CJK UNIFIED IDEOGRAPH
                                (#xF096 . #x9962)	;CJK UNIFIED IDEOGRAPH
                                (#xF097 . #x9964)	;CJK UNIFIED IDEOGRAPH
                                (#xF098 . #x9966)	;CJK UNIFIED IDEOGRAPH
                                (#xF099 . #x9973)	;CJK UNIFIED IDEOGRAPH
                                (#xF09A . #x9978)	;CJK UNIFIED IDEOGRAPH
                                (#xF09B . #x9979)	;CJK UNIFIED IDEOGRAPH
                                (#xF09C . #x997B)	;CJK UNIFIED IDEOGRAPH
                                (#xF09D . #x997E)	;CJK UNIFIED IDEOGRAPH
                                (#xF09E . #x9982)	;CJK UNIFIED IDEOGRAPH
                                (#xF09F . #x9983)	;CJK UNIFIED IDEOGRAPH
                                (#xF0A0 . #x9989)	;CJK UNIFIED IDEOGRAPH
                                (#xF0A1 . #x7A39)	;CJK UNIFIED IDEOGRAPH
                                (#xF0A2 . #x7A37)	;CJK UNIFIED IDEOGRAPH
                                (#xF0A3 . #x7A51)	;CJK UNIFIED IDEOGRAPH
                                (#xF0A4 . #x9ECF)	;CJK UNIFIED IDEOGRAPH
                                (#xF0A5 . #x99A5)	;CJK UNIFIED IDEOGRAPH
                                (#xF0A6 . #x7A70)	;CJK UNIFIED IDEOGRAPH
                                (#xF0A7 . #x7688)	;CJK UNIFIED IDEOGRAPH
                                (#xF0A8 . #x768E)	;CJK UNIFIED IDEOGRAPH
                                (#xF0A9 . #x7693)	;CJK UNIFIED IDEOGRAPH
                                (#xF0AA . #x7699)	;CJK UNIFIED IDEOGRAPH
                                (#xF0AB . #x76A4)	;CJK UNIFIED IDEOGRAPH
                                (#xF0AC . #x74DE)	;CJK UNIFIED IDEOGRAPH
                                (#xF0AD . #x74E0)	;CJK UNIFIED IDEOGRAPH
                                (#xF0AE . #x752C)	;CJK UNIFIED IDEOGRAPH
                                (#xF0AF . #x9E20)	;CJK UNIFIED IDEOGRAPH
                                (#xF0B0 . #x9E22)	;CJK UNIFIED IDEOGRAPH
                                (#xF0B1 . #x9E28)	;CJK UNIFIED IDEOGRAPH
                                (#xF0B2 . #x9E29)	;CJK UNIFIED IDEOGRAPH
                                (#xF0B3 . #x9E2A)	;CJK UNIFIED IDEOGRAPH
                                (#xF0B4 . #x9E2B)	;CJK UNIFIED IDEOGRAPH
                                (#xF0B5 . #x9E2C)	;CJK UNIFIED IDEOGRAPH
                                (#xF0B6 . #x9E32)	;CJK UNIFIED IDEOGRAPH
                                (#xF0B7 . #x9E31)	;CJK UNIFIED IDEOGRAPH
                                (#xF0B8 . #x9E36)	;CJK UNIFIED IDEOGRAPH
                                (#xF0B9 . #x9E38)	;CJK UNIFIED IDEOGRAPH
                                (#xF0BA . #x9E37)	;CJK UNIFIED IDEOGRAPH
                                (#xF0BB . #x9E39)	;CJK UNIFIED IDEOGRAPH
                                (#xF0BC . #x9E3A)	;CJK UNIFIED IDEOGRAPH
                                (#xF0BD . #x9E3E)	;CJK UNIFIED IDEOGRAPH
                                (#xF0BE . #x9E41)	;CJK UNIFIED IDEOGRAPH
                                (#xF0BF . #x9E42)	;CJK UNIFIED IDEOGRAPH
                                (#xF0C0 . #x9E44)	;CJK UNIFIED IDEOGRAPH
                                (#xF0C1 . #x9E46)	;CJK UNIFIED IDEOGRAPH
                                (#xF0C2 . #x9E47)	;CJK UNIFIED IDEOGRAPH
                                (#xF0C3 . #x9E48)	;CJK UNIFIED IDEOGRAPH
                                (#xF0C4 . #x9E49)	;CJK UNIFIED IDEOGRAPH
                                (#xF0C5 . #x9E4B)	;CJK UNIFIED IDEOGRAPH
                                (#xF0C6 . #x9E4C)	;CJK UNIFIED IDEOGRAPH
                                (#xF0C7 . #x9E4E)	;CJK UNIFIED IDEOGRAPH
                                (#xF0C8 . #x9E51)	;CJK UNIFIED IDEOGRAPH
                                (#xF0C9 . #x9E55)	;CJK UNIFIED IDEOGRAPH
                                (#xF0CA . #x9E57)	;CJK UNIFIED IDEOGRAPH
                                (#xF0CB . #x9E5A)	;CJK UNIFIED IDEOGRAPH
                                (#xF0CC . #x9E5B)	;CJK UNIFIED IDEOGRAPH
                                (#xF0CD . #x9E5C)	;CJK UNIFIED IDEOGRAPH
                                (#xF0CE . #x9E5E)	;CJK UNIFIED IDEOGRAPH
                                (#xF0CF . #x9E63)	;CJK UNIFIED IDEOGRAPH
                                (#xF0D0 . #x9E66)	;CJK UNIFIED IDEOGRAPH
                                (#xF0D1 . #x9E67)	;CJK UNIFIED IDEOGRAPH
                                (#xF0D2 . #x9E68)	;CJK UNIFIED IDEOGRAPH
                                (#xF0D3 . #x9E69)	;CJK UNIFIED IDEOGRAPH
                                (#xF0D4 . #x9E6A)	;CJK UNIFIED IDEOGRAPH
                                (#xF0D5 . #x9E6B)	;CJK UNIFIED IDEOGRAPH
                                (#xF0D6 . #x9E6C)	;CJK UNIFIED IDEOGRAPH
                                (#xF0D7 . #x9E71)	;CJK UNIFIED IDEOGRAPH
                                (#xF0D8 . #x9E6D)	;CJK UNIFIED IDEOGRAPH
                                (#xF0D9 . #x9E73)	;CJK UNIFIED IDEOGRAPH
                                (#xF0DA . #x7592)	;CJK UNIFIED IDEOGRAPH
                                (#xF0DB . #x7594)	;CJK UNIFIED IDEOGRAPH
                                (#xF0DC . #x7596)	;CJK UNIFIED IDEOGRAPH
                                (#xF0DD . #x75A0)	;CJK UNIFIED IDEOGRAPH
                                (#xF0DE . #x759D)	;CJK UNIFIED IDEOGRAPH
                                (#xF0DF . #x75AC)	;CJK UNIFIED IDEOGRAPH
                                (#xF0E0 . #x75A3)	;CJK UNIFIED IDEOGRAPH
                                (#xF0E1 . #x75B3)	;CJK UNIFIED IDEOGRAPH
                                (#xF0E2 . #x75B4)	;CJK UNIFIED IDEOGRAPH
                                (#xF0E3 . #x75B8)	;CJK UNIFIED IDEOGRAPH
                                (#xF0E4 . #x75C4)	;CJK UNIFIED IDEOGRAPH
                                (#xF0E5 . #x75B1)	;CJK UNIFIED IDEOGRAPH
                                (#xF0E6 . #x75B0)	;CJK UNIFIED IDEOGRAPH
                                (#xF0E7 . #x75C3)	;CJK UNIFIED IDEOGRAPH
                                (#xF0E8 . #x75C2)	;CJK UNIFIED IDEOGRAPH
                                (#xF0E9 . #x75D6)	;CJK UNIFIED IDEOGRAPH
                                (#xF0EA . #x75CD)	;CJK UNIFIED IDEOGRAPH
                                (#xF0EB . #x75E3)	;CJK UNIFIED IDEOGRAPH
                                (#xF0EC . #x75E8)	;CJK UNIFIED IDEOGRAPH
                                (#xF0ED . #x75E6)	;CJK UNIFIED IDEOGRAPH
                                (#xF0EE . #x75E4)	;CJK UNIFIED IDEOGRAPH
                                (#xF0EF . #x75EB)	;CJK UNIFIED IDEOGRAPH
                                (#xF0F0 . #x75E7)	;CJK UNIFIED IDEOGRAPH
                                (#xF0F1 . #x7603)	;CJK UNIFIED IDEOGRAPH
                                (#xF0F2 . #x75F1)	;CJK UNIFIED IDEOGRAPH
                                (#xF0F3 . #x75FC)	;CJK UNIFIED IDEOGRAPH
                                (#xF0F4 . #x75FF)	;CJK UNIFIED IDEOGRAPH
                                (#xF0F5 . #x7610)	;CJK UNIFIED IDEOGRAPH
                                (#xF0F6 . #x7600)	;CJK UNIFIED IDEOGRAPH
                                (#xF0F7 . #x7605)	;CJK UNIFIED IDEOGRAPH
                                (#xF0F8 . #x760C)	;CJK UNIFIED IDEOGRAPH
                                (#xF0F9 . #x7617)	;CJK UNIFIED IDEOGRAPH
                                (#xF0FA . #x760A)	;CJK UNIFIED IDEOGRAPH
                                (#xF0FB . #x7625)	;CJK UNIFIED IDEOGRAPH
                                (#xF0FC . #x7618)	;CJK UNIFIED IDEOGRAPH
                                (#xF0FD . #x7615)	;CJK UNIFIED IDEOGRAPH
                                (#xF0FE . #x7619)	;CJK UNIFIED IDEOGRAPH
                                (#xF140 . #x998C)	;CJK UNIFIED IDEOGRAPH
                                (#xF141 . #x998E)	;CJK UNIFIED IDEOGRAPH
                                (#xF142 . #x999A)	;CJK UNIFIED IDEOGRAPH
                                (#xF143 . #x999B)	;CJK UNIFIED IDEOGRAPH
                                (#xF144 . #x999C)	;CJK UNIFIED IDEOGRAPH
                                (#xF145 . #x999D)	;CJK UNIFIED IDEOGRAPH
                                (#xF146 . #x999E)	;CJK UNIFIED IDEOGRAPH
                                (#xF147 . #x999F)	;CJK UNIFIED IDEOGRAPH
                                (#xF148 . #x99A0)	;CJK UNIFIED IDEOGRAPH
                                (#xF149 . #x99A1)	;CJK UNIFIED IDEOGRAPH
                                (#xF14A . #x99A2)	;CJK UNIFIED IDEOGRAPH
                                (#xF14B . #x99A3)	;CJK UNIFIED IDEOGRAPH
                                (#xF14C . #x99A4)	;CJK UNIFIED IDEOGRAPH
                                (#xF14D . #x99A6)	;CJK UNIFIED IDEOGRAPH
                                (#xF14E . #x99A7)	;CJK UNIFIED IDEOGRAPH
                                (#xF14F . #x99A9)	;CJK UNIFIED IDEOGRAPH
                                (#xF150 . #x99AA)	;CJK UNIFIED IDEOGRAPH
                                (#xF151 . #x99AB)	;CJK UNIFIED IDEOGRAPH
                                (#xF152 . #x99AC)	;CJK UNIFIED IDEOGRAPH
                                (#xF153 . #x99AD)	;CJK UNIFIED IDEOGRAPH
                                (#xF154 . #x99AE)	;CJK UNIFIED IDEOGRAPH
                                (#xF155 . #x99AF)	;CJK UNIFIED IDEOGRAPH
                                (#xF156 . #x99B0)	;CJK UNIFIED IDEOGRAPH
                                (#xF157 . #x99B1)	;CJK UNIFIED IDEOGRAPH
                                (#xF158 . #x99B2)	;CJK UNIFIED IDEOGRAPH
                                (#xF159 . #x99B3)	;CJK UNIFIED IDEOGRAPH
                                (#xF15A . #x99B4)	;CJK UNIFIED IDEOGRAPH
                                (#xF15B . #x99B5)	;CJK UNIFIED IDEOGRAPH
                                (#xF15C . #x99B6)	;CJK UNIFIED IDEOGRAPH
                                (#xF15D . #x99B7)	;CJK UNIFIED IDEOGRAPH
                                (#xF15E . #x99B8)	;CJK UNIFIED IDEOGRAPH
                                (#xF15F . #x99B9)	;CJK UNIFIED IDEOGRAPH
                                (#xF160 . #x99BA)	;CJK UNIFIED IDEOGRAPH
                                (#xF161 . #x99BB)	;CJK UNIFIED IDEOGRAPH
                                (#xF162 . #x99BC)	;CJK UNIFIED IDEOGRAPH
                                (#xF163 . #x99BD)	;CJK UNIFIED IDEOGRAPH
                                (#xF164 . #x99BE)	;CJK UNIFIED IDEOGRAPH
                                (#xF165 . #x99BF)	;CJK UNIFIED IDEOGRAPH
                                (#xF166 . #x99C0)	;CJK UNIFIED IDEOGRAPH
                                (#xF167 . #x99C1)	;CJK UNIFIED IDEOGRAPH
                                (#xF168 . #x99C2)	;CJK UNIFIED IDEOGRAPH
                                (#xF169 . #x99C3)	;CJK UNIFIED IDEOGRAPH
                                (#xF16A . #x99C4)	;CJK UNIFIED IDEOGRAPH
                                (#xF16B . #x99C5)	;CJK UNIFIED IDEOGRAPH
                                (#xF16C . #x99C6)	;CJK UNIFIED IDEOGRAPH
                                (#xF16D . #x99C7)	;CJK UNIFIED IDEOGRAPH
                                (#xF16E . #x99C8)	;CJK UNIFIED IDEOGRAPH
                                (#xF16F . #x99C9)	;CJK UNIFIED IDEOGRAPH
                                (#xF170 . #x99CA)	;CJK UNIFIED IDEOGRAPH
                                (#xF171 . #x99CB)	;CJK UNIFIED IDEOGRAPH
                                (#xF172 . #x99CC)	;CJK UNIFIED IDEOGRAPH
                                (#xF173 . #x99CD)	;CJK UNIFIED IDEOGRAPH
                                (#xF174 . #x99CE)	;CJK UNIFIED IDEOGRAPH
                                (#xF175 . #x99CF)	;CJK UNIFIED IDEOGRAPH
                                (#xF176 . #x99D0)	;CJK UNIFIED IDEOGRAPH
                                (#xF177 . #x99D1)	;CJK UNIFIED IDEOGRAPH
                                (#xF178 . #x99D2)	;CJK UNIFIED IDEOGRAPH
                                (#xF179 . #x99D3)	;CJK UNIFIED IDEOGRAPH
                                (#xF17A . #x99D4)	;CJK UNIFIED IDEOGRAPH
                                (#xF17B . #x99D5)	;CJK UNIFIED IDEOGRAPH
                                (#xF17C . #x99D6)	;CJK UNIFIED IDEOGRAPH
                                (#xF17D . #x99D7)	;CJK UNIFIED IDEOGRAPH
                                (#xF17E . #x99D8)	;CJK UNIFIED IDEOGRAPH
                                (#xF180 . #x99D9)	;CJK UNIFIED IDEOGRAPH
                                (#xF181 . #x99DA)	;CJK UNIFIED IDEOGRAPH
                                (#xF182 . #x99DB)	;CJK UNIFIED IDEOGRAPH
                                (#xF183 . #x99DC)	;CJK UNIFIED IDEOGRAPH
                                (#xF184 . #x99DD)	;CJK UNIFIED IDEOGRAPH
                                (#xF185 . #x99DE)	;CJK UNIFIED IDEOGRAPH
                                (#xF186 . #x99DF)	;CJK UNIFIED IDEOGRAPH
                                (#xF187 . #x99E0)	;CJK UNIFIED IDEOGRAPH
                                (#xF188 . #x99E1)	;CJK UNIFIED IDEOGRAPH
                                (#xF189 . #x99E2)	;CJK UNIFIED IDEOGRAPH
                                (#xF18A . #x99E3)	;CJK UNIFIED IDEOGRAPH
                                (#xF18B . #x99E4)	;CJK UNIFIED IDEOGRAPH
                                (#xF18C . #x99E5)	;CJK UNIFIED IDEOGRAPH
                                (#xF18D . #x99E6)	;CJK UNIFIED IDEOGRAPH
                                (#xF18E . #x99E7)	;CJK UNIFIED IDEOGRAPH
                                (#xF18F . #x99E8)	;CJK UNIFIED IDEOGRAPH
                                (#xF190 . #x99E9)	;CJK UNIFIED IDEOGRAPH
                                (#xF191 . #x99EA)	;CJK UNIFIED IDEOGRAPH
                                (#xF192 . #x99EB)	;CJK UNIFIED IDEOGRAPH
                                (#xF193 . #x99EC)	;CJK UNIFIED IDEOGRAPH
                                (#xF194 . #x99ED)	;CJK UNIFIED IDEOGRAPH
                                (#xF195 . #x99EE)	;CJK UNIFIED IDEOGRAPH
                                (#xF196 . #x99EF)	;CJK UNIFIED IDEOGRAPH
                                (#xF197 . #x99F0)	;CJK UNIFIED IDEOGRAPH
                                (#xF198 . #x99F1)	;CJK UNIFIED IDEOGRAPH
                                (#xF199 . #x99F2)	;CJK UNIFIED IDEOGRAPH
                                (#xF19A . #x99F3)	;CJK UNIFIED IDEOGRAPH
                                (#xF19B . #x99F4)	;CJK UNIFIED IDEOGRAPH
                                (#xF19C . #x99F5)	;CJK UNIFIED IDEOGRAPH
                                (#xF19D . #x99F6)	;CJK UNIFIED IDEOGRAPH
                                (#xF19E . #x99F7)	;CJK UNIFIED IDEOGRAPH
                                (#xF19F . #x99F8)	;CJK UNIFIED IDEOGRAPH
                                (#xF1A0 . #x99F9)	;CJK UNIFIED IDEOGRAPH
                                (#xF1A1 . #x761B)	;CJK UNIFIED IDEOGRAPH
                                (#xF1A2 . #x763C)	;CJK UNIFIED IDEOGRAPH
                                (#xF1A3 . #x7622)	;CJK UNIFIED IDEOGRAPH
                                (#xF1A4 . #x7620)	;CJK UNIFIED IDEOGRAPH
                                (#xF1A5 . #x7640)	;CJK UNIFIED IDEOGRAPH
                                (#xF1A6 . #x762D)	;CJK UNIFIED IDEOGRAPH
                                (#xF1A7 . #x7630)	;CJK UNIFIED IDEOGRAPH
                                (#xF1A8 . #x763F)	;CJK UNIFIED IDEOGRAPH
                                (#xF1A9 . #x7635)	;CJK UNIFIED IDEOGRAPH
                                (#xF1AA . #x7643)	;CJK UNIFIED IDEOGRAPH
                                (#xF1AB . #x763E)	;CJK UNIFIED IDEOGRAPH
                                (#xF1AC . #x7633)	;CJK UNIFIED IDEOGRAPH
                                (#xF1AD . #x764D)	;CJK UNIFIED IDEOGRAPH
                                (#xF1AE . #x765E)	;CJK UNIFIED IDEOGRAPH
                                (#xF1AF . #x7654)	;CJK UNIFIED IDEOGRAPH
                                (#xF1B0 . #x765C)	;CJK UNIFIED IDEOGRAPH
                                (#xF1B1 . #x7656)	;CJK UNIFIED IDEOGRAPH
                                (#xF1B2 . #x766B)	;CJK UNIFIED IDEOGRAPH
                                (#xF1B3 . #x766F)	;CJK UNIFIED IDEOGRAPH
                                (#xF1B4 . #x7FCA)	;CJK UNIFIED IDEOGRAPH
                                (#xF1B5 . #x7AE6)	;CJK UNIFIED IDEOGRAPH
                                (#xF1B6 . #x7A78)	;CJK UNIFIED IDEOGRAPH
                                (#xF1B7 . #x7A79)	;CJK UNIFIED IDEOGRAPH
                                (#xF1B8 . #x7A80)	;CJK UNIFIED IDEOGRAPH
                                (#xF1B9 . #x7A86)	;CJK UNIFIED IDEOGRAPH
                                (#xF1BA . #x7A88)	;CJK UNIFIED IDEOGRAPH
                                (#xF1BB . #x7A95)	;CJK UNIFIED IDEOGRAPH
                                (#xF1BC . #x7AA6)	;CJK UNIFIED IDEOGRAPH
                                (#xF1BD . #x7AA0)	;CJK UNIFIED IDEOGRAPH
                                (#xF1BE . #x7AAC)	;CJK UNIFIED IDEOGRAPH
                                (#xF1BF . #x7AA8)	;CJK UNIFIED IDEOGRAPH
                                (#xF1C0 . #x7AAD)	;CJK UNIFIED IDEOGRAPH
                                (#xF1C1 . #x7AB3)	;CJK UNIFIED IDEOGRAPH
                                (#xF1C2 . #x8864)	;CJK UNIFIED IDEOGRAPH
                                (#xF1C3 . #x8869)	;CJK UNIFIED IDEOGRAPH
                                (#xF1C4 . #x8872)	;CJK UNIFIED IDEOGRAPH
                                (#xF1C5 . #x887D)	;CJK UNIFIED IDEOGRAPH
                                (#xF1C6 . #x887F)	;CJK UNIFIED IDEOGRAPH
                                (#xF1C7 . #x8882)	;CJK UNIFIED IDEOGRAPH
                                (#xF1C8 . #x88A2)	;CJK UNIFIED IDEOGRAPH
                                (#xF1C9 . #x88C6)	;CJK UNIFIED IDEOGRAPH
                                (#xF1CA . #x88B7)	;CJK UNIFIED IDEOGRAPH
                                (#xF1CB . #x88BC)	;CJK UNIFIED IDEOGRAPH
                                (#xF1CC . #x88C9)	;CJK UNIFIED IDEOGRAPH
                                (#xF1CD . #x88E2)	;CJK UNIFIED IDEOGRAPH
                                (#xF1CE . #x88CE)	;CJK UNIFIED IDEOGRAPH
                                (#xF1CF . #x88E3)	;CJK UNIFIED IDEOGRAPH
                                (#xF1D0 . #x88E5)	;CJK UNIFIED IDEOGRAPH
                                (#xF1D1 . #x88F1)	;CJK UNIFIED IDEOGRAPH
                                (#xF1D2 . #x891A)	;CJK UNIFIED IDEOGRAPH
                                (#xF1D3 . #x88FC)	;CJK UNIFIED IDEOGRAPH
                                (#xF1D4 . #x88E8)	;CJK UNIFIED IDEOGRAPH
                                (#xF1D5 . #x88FE)	;CJK UNIFIED IDEOGRAPH
                                (#xF1D6 . #x88F0)	;CJK UNIFIED IDEOGRAPH
                                (#xF1D7 . #x8921)	;CJK UNIFIED IDEOGRAPH
                                (#xF1D8 . #x8919)	;CJK UNIFIED IDEOGRAPH
                                (#xF1D9 . #x8913)	;CJK UNIFIED IDEOGRAPH
                                (#xF1DA . #x891B)	;CJK UNIFIED IDEOGRAPH
                                (#xF1DB . #x890A)	;CJK UNIFIED IDEOGRAPH
                                (#xF1DC . #x8934)	;CJK UNIFIED IDEOGRAPH
                                (#xF1DD . #x892B)	;CJK UNIFIED IDEOGRAPH
                                (#xF1DE . #x8936)	;CJK UNIFIED IDEOGRAPH
                                (#xF1DF . #x8941)	;CJK UNIFIED IDEOGRAPH
                                (#xF1E0 . #x8966)	;CJK UNIFIED IDEOGRAPH
                                (#xF1E1 . #x897B)	;CJK UNIFIED IDEOGRAPH
                                (#xF1E2 . #x758B)	;CJK UNIFIED IDEOGRAPH
                                (#xF1E3 . #x80E5)	;CJK UNIFIED IDEOGRAPH
                                (#xF1E4 . #x76B2)	;CJK UNIFIED IDEOGRAPH
                                (#xF1E5 . #x76B4)	;CJK UNIFIED IDEOGRAPH
                                (#xF1E6 . #x77DC)	;CJK UNIFIED IDEOGRAPH
                                (#xF1E7 . #x8012)	;CJK UNIFIED IDEOGRAPH
                                (#xF1E8 . #x8014)	;CJK UNIFIED IDEOGRAPH
                                (#xF1E9 . #x8016)	;CJK UNIFIED IDEOGRAPH
                                (#xF1EA . #x801C)	;CJK UNIFIED IDEOGRAPH
                                (#xF1EB . #x8020)	;CJK UNIFIED IDEOGRAPH
                                (#xF1EC . #x8022)	;CJK UNIFIED IDEOGRAPH
                                (#xF1ED . #x8025)	;CJK UNIFIED IDEOGRAPH
                                (#xF1EE . #x8026)	;CJK UNIFIED IDEOGRAPH
                                (#xF1EF . #x8027)	;CJK UNIFIED IDEOGRAPH
                                (#xF1F0 . #x8029)	;CJK UNIFIED IDEOGRAPH
                                (#xF1F1 . #x8028)	;CJK UNIFIED IDEOGRAPH
                                (#xF1F2 . #x8031)	;CJK UNIFIED IDEOGRAPH
                                (#xF1F3 . #x800B)	;CJK UNIFIED IDEOGRAPH
                                (#xF1F4 . #x8035)	;CJK UNIFIED IDEOGRAPH
                                (#xF1F5 . #x8043)	;CJK UNIFIED IDEOGRAPH
                                (#xF1F6 . #x8046)	;CJK UNIFIED IDEOGRAPH
                                (#xF1F7 . #x804D)	;CJK UNIFIED IDEOGRAPH
                                (#xF1F8 . #x8052)	;CJK UNIFIED IDEOGRAPH
                                (#xF1F9 . #x8069)	;CJK UNIFIED IDEOGRAPH
                                (#xF1FA . #x8071)	;CJK UNIFIED IDEOGRAPH
                                (#xF1FB . #x8983)	;CJK UNIFIED IDEOGRAPH
                                (#xF1FC . #x9878)	;CJK UNIFIED IDEOGRAPH
                                (#xF1FD . #x9880)	;CJK UNIFIED IDEOGRAPH
                                (#xF1FE . #x9883)	;CJK UNIFIED IDEOGRAPH
                                (#xF240 . #x99FA)	;CJK UNIFIED IDEOGRAPH
                                (#xF241 . #x99FB)	;CJK UNIFIED IDEOGRAPH
                                (#xF242 . #x99FC)	;CJK UNIFIED IDEOGRAPH
                                (#xF243 . #x99FD)	;CJK UNIFIED IDEOGRAPH
                                (#xF244 . #x99FE)	;CJK UNIFIED IDEOGRAPH
                                (#xF245 . #x99FF)	;CJK UNIFIED IDEOGRAPH
                                (#xF246 . #x9A00)	;CJK UNIFIED IDEOGRAPH
                                (#xF247 . #x9A01)	;CJK UNIFIED IDEOGRAPH
                                (#xF248 . #x9A02)	;CJK UNIFIED IDEOGRAPH
                                (#xF249 . #x9A03)	;CJK UNIFIED IDEOGRAPH
                                (#xF24A . #x9A04)	;CJK UNIFIED IDEOGRAPH
                                (#xF24B . #x9A05)	;CJK UNIFIED IDEOGRAPH
                                (#xF24C . #x9A06)	;CJK UNIFIED IDEOGRAPH
                                (#xF24D . #x9A07)	;CJK UNIFIED IDEOGRAPH
                                (#xF24E . #x9A08)	;CJK UNIFIED IDEOGRAPH
                                (#xF24F . #x9A09)	;CJK UNIFIED IDEOGRAPH
                                (#xF250 . #x9A0A)	;CJK UNIFIED IDEOGRAPH
                                (#xF251 . #x9A0B)	;CJK UNIFIED IDEOGRAPH
                                (#xF252 . #x9A0C)	;CJK UNIFIED IDEOGRAPH
                                (#xF253 . #x9A0D)	;CJK UNIFIED IDEOGRAPH
                                (#xF254 . #x9A0E)	;CJK UNIFIED IDEOGRAPH
                                (#xF255 . #x9A0F)	;CJK UNIFIED IDEOGRAPH
                                (#xF256 . #x9A10)	;CJK UNIFIED IDEOGRAPH
                                (#xF257 . #x9A11)	;CJK UNIFIED IDEOGRAPH
                                (#xF258 . #x9A12)	;CJK UNIFIED IDEOGRAPH
                                (#xF259 . #x9A13)	;CJK UNIFIED IDEOGRAPH
                                (#xF25A . #x9A14)	;CJK UNIFIED IDEOGRAPH
                                (#xF25B . #x9A15)	;CJK UNIFIED IDEOGRAPH
                                (#xF25C . #x9A16)	;CJK UNIFIED IDEOGRAPH
                                (#xF25D . #x9A17)	;CJK UNIFIED IDEOGRAPH
                                (#xF25E . #x9A18)	;CJK UNIFIED IDEOGRAPH
                                (#xF25F . #x9A19)	;CJK UNIFIED IDEOGRAPH
                                (#xF260 . #x9A1A)	;CJK UNIFIED IDEOGRAPH
                                (#xF261 . #x9A1B)	;CJK UNIFIED IDEOGRAPH
                                (#xF262 . #x9A1C)	;CJK UNIFIED IDEOGRAPH
                                (#xF263 . #x9A1D)	;CJK UNIFIED IDEOGRAPH
                                (#xF264 . #x9A1E)	;CJK UNIFIED IDEOGRAPH
                                (#xF265 . #x9A1F)	;CJK UNIFIED IDEOGRAPH
                                (#xF266 . #x9A20)	;CJK UNIFIED IDEOGRAPH
                                (#xF267 . #x9A21)	;CJK UNIFIED IDEOGRAPH
                                (#xF268 . #x9A22)	;CJK UNIFIED IDEOGRAPH
                                (#xF269 . #x9A23)	;CJK UNIFIED IDEOGRAPH
                                (#xF26A . #x9A24)	;CJK UNIFIED IDEOGRAPH
                                (#xF26B . #x9A25)	;CJK UNIFIED IDEOGRAPH
                                (#xF26C . #x9A26)	;CJK UNIFIED IDEOGRAPH
                                (#xF26D . #x9A27)	;CJK UNIFIED IDEOGRAPH
                                (#xF26E . #x9A28)	;CJK UNIFIED IDEOGRAPH
                                (#xF26F . #x9A29)	;CJK UNIFIED IDEOGRAPH
                                (#xF270 . #x9A2A)	;CJK UNIFIED IDEOGRAPH
                                (#xF271 . #x9A2B)	;CJK UNIFIED IDEOGRAPH
                                (#xF272 . #x9A2C)	;CJK UNIFIED IDEOGRAPH
                                (#xF273 . #x9A2D)	;CJK UNIFIED IDEOGRAPH
                                (#xF274 . #x9A2E)	;CJK UNIFIED IDEOGRAPH
                                (#xF275 . #x9A2F)	;CJK UNIFIED IDEOGRAPH
                                (#xF276 . #x9A30)	;CJK UNIFIED IDEOGRAPH
                                (#xF277 . #x9A31)	;CJK UNIFIED IDEOGRAPH
                                (#xF278 . #x9A32)	;CJK UNIFIED IDEOGRAPH
                                (#xF279 . #x9A33)	;CJK UNIFIED IDEOGRAPH
                                (#xF27A . #x9A34)	;CJK UNIFIED IDEOGRAPH
                                (#xF27B . #x9A35)	;CJK UNIFIED IDEOGRAPH
                                (#xF27C . #x9A36)	;CJK UNIFIED IDEOGRAPH
                                (#xF27D . #x9A37)	;CJK UNIFIED IDEOGRAPH
                                (#xF27E . #x9A38)	;CJK UNIFIED IDEOGRAPH
                                (#xF280 . #x9A39)	;CJK UNIFIED IDEOGRAPH
                                (#xF281 . #x9A3A)	;CJK UNIFIED IDEOGRAPH
                                (#xF282 . #x9A3B)	;CJK UNIFIED IDEOGRAPH
                                (#xF283 . #x9A3C)	;CJK UNIFIED IDEOGRAPH
                                (#xF284 . #x9A3D)	;CJK UNIFIED IDEOGRAPH
                                (#xF285 . #x9A3E)	;CJK UNIFIED IDEOGRAPH
                                (#xF286 . #x9A3F)	;CJK UNIFIED IDEOGRAPH
                                (#xF287 . #x9A40)	;CJK UNIFIED IDEOGRAPH
                                (#xF288 . #x9A41)	;CJK UNIFIED IDEOGRAPH
                                (#xF289 . #x9A42)	;CJK UNIFIED IDEOGRAPH
                                (#xF28A . #x9A43)	;CJK UNIFIED IDEOGRAPH
                                (#xF28B . #x9A44)	;CJK UNIFIED IDEOGRAPH
                                (#xF28C . #x9A45)	;CJK UNIFIED IDEOGRAPH
                                (#xF28D . #x9A46)	;CJK UNIFIED IDEOGRAPH
                                (#xF28E . #x9A47)	;CJK UNIFIED IDEOGRAPH
                                (#xF28F . #x9A48)	;CJK UNIFIED IDEOGRAPH
                                (#xF290 . #x9A49)	;CJK UNIFIED IDEOGRAPH
                                (#xF291 . #x9A4A)	;CJK UNIFIED IDEOGRAPH
                                (#xF292 . #x9A4B)	;CJK UNIFIED IDEOGRAPH
                                (#xF293 . #x9A4C)	;CJK UNIFIED IDEOGRAPH
                                (#xF294 . #x9A4D)	;CJK UNIFIED IDEOGRAPH
                                (#xF295 . #x9A4E)	;CJK UNIFIED IDEOGRAPH
                                (#xF296 . #x9A4F)	;CJK UNIFIED IDEOGRAPH
                                (#xF297 . #x9A50)	;CJK UNIFIED IDEOGRAPH
                                (#xF298 . #x9A51)	;CJK UNIFIED IDEOGRAPH
                                (#xF299 . #x9A52)	;CJK UNIFIED IDEOGRAPH
                                (#xF29A . #x9A53)	;CJK UNIFIED IDEOGRAPH
                                (#xF29B . #x9A54)	;CJK UNIFIED IDEOGRAPH
                                (#xF29C . #x9A55)	;CJK UNIFIED IDEOGRAPH
                                (#xF29D . #x9A56)	;CJK UNIFIED IDEOGRAPH
                                (#xF29E . #x9A57)	;CJK UNIFIED IDEOGRAPH
                                (#xF29F . #x9A58)	;CJK UNIFIED IDEOGRAPH
                                (#xF2A0 . #x9A59)	;CJK UNIFIED IDEOGRAPH
                                (#xF2A1 . #x9889)	;CJK UNIFIED IDEOGRAPH
                                (#xF2A2 . #x988C)	;CJK UNIFIED IDEOGRAPH
                                (#xF2A3 . #x988D)	;CJK UNIFIED IDEOGRAPH
                                (#xF2A4 . #x988F)	;CJK UNIFIED IDEOGRAPH
                                (#xF2A5 . #x9894)	;CJK UNIFIED IDEOGRAPH
                                (#xF2A6 . #x989A)	;CJK UNIFIED IDEOGRAPH
                                (#xF2A7 . #x989B)	;CJK UNIFIED IDEOGRAPH
                                (#xF2A8 . #x989E)	;CJK UNIFIED IDEOGRAPH
                                (#xF2A9 . #x989F)	;CJK UNIFIED IDEOGRAPH
                                (#xF2AA . #x98A1)	;CJK UNIFIED IDEOGRAPH
                                (#xF2AB . #x98A2)	;CJK UNIFIED IDEOGRAPH
                                (#xF2AC . #x98A5)	;CJK UNIFIED IDEOGRAPH
                                (#xF2AD . #x98A6)	;CJK UNIFIED IDEOGRAPH
                                (#xF2AE . #x864D)	;CJK UNIFIED IDEOGRAPH
                                (#xF2AF . #x8654)	;CJK UNIFIED IDEOGRAPH
                                (#xF2B0 . #x866C)	;CJK UNIFIED IDEOGRAPH
                                (#xF2B1 . #x866E)	;CJK UNIFIED IDEOGRAPH
                                (#xF2B2 . #x867F)	;CJK UNIFIED IDEOGRAPH
                                (#xF2B3 . #x867A)	;CJK UNIFIED IDEOGRAPH
                                (#xF2B4 . #x867C)	;CJK UNIFIED IDEOGRAPH
                                (#xF2B5 . #x867B)	;CJK UNIFIED IDEOGRAPH
                                (#xF2B6 . #x86A8)	;CJK UNIFIED IDEOGRAPH
                                (#xF2B7 . #x868D)	;CJK UNIFIED IDEOGRAPH
                                (#xF2B8 . #x868B)	;CJK UNIFIED IDEOGRAPH
                                (#xF2B9 . #x86AC)	;CJK UNIFIED IDEOGRAPH
                                (#xF2BA . #x869D)	;CJK UNIFIED IDEOGRAPH
                                (#xF2BB . #x86A7)	;CJK UNIFIED IDEOGRAPH
                                (#xF2BC . #x86A3)	;CJK UNIFIED IDEOGRAPH
                                (#xF2BD . #x86AA)	;CJK UNIFIED IDEOGRAPH
                                (#xF2BE . #x8693)	;CJK UNIFIED IDEOGRAPH
                                (#xF2BF . #x86A9)	;CJK UNIFIED IDEOGRAPH
                                (#xF2C0 . #x86B6)	;CJK UNIFIED IDEOGRAPH
                                (#xF2C1 . #x86C4)	;CJK UNIFIED IDEOGRAPH
                                (#xF2C2 . #x86B5)	;CJK UNIFIED IDEOGRAPH
                                (#xF2C3 . #x86CE)	;CJK UNIFIED IDEOGRAPH
                                (#xF2C4 . #x86B0)	;CJK UNIFIED IDEOGRAPH
                                (#xF2C5 . #x86BA)	;CJK UNIFIED IDEOGRAPH
                                (#xF2C6 . #x86B1)	;CJK UNIFIED IDEOGRAPH
                                (#xF2C7 . #x86AF)	;CJK UNIFIED IDEOGRAPH
                                (#xF2C8 . #x86C9)	;CJK UNIFIED IDEOGRAPH
                                (#xF2C9 . #x86CF)	;CJK UNIFIED IDEOGRAPH
                                (#xF2CA . #x86B4)	;CJK UNIFIED IDEOGRAPH
                                (#xF2CB . #x86E9)	;CJK UNIFIED IDEOGRAPH
                                (#xF2CC . #x86F1)	;CJK UNIFIED IDEOGRAPH
                                (#xF2CD . #x86F2)	;CJK UNIFIED IDEOGRAPH
                                (#xF2CE . #x86ED)	;CJK UNIFIED IDEOGRAPH
                                (#xF2CF . #x86F3)	;CJK UNIFIED IDEOGRAPH
                                (#xF2D0 . #x86D0)	;CJK UNIFIED IDEOGRAPH
                                (#xF2D1 . #x8713)	;CJK UNIFIED IDEOGRAPH
                                (#xF2D2 . #x86DE)	;CJK UNIFIED IDEOGRAPH
                                (#xF2D3 . #x86F4)	;CJK UNIFIED IDEOGRAPH
                                (#xF2D4 . #x86DF)	;CJK UNIFIED IDEOGRAPH
                                (#xF2D5 . #x86D8)	;CJK UNIFIED IDEOGRAPH
                                (#xF2D6 . #x86D1)	;CJK UNIFIED IDEOGRAPH
                                (#xF2D7 . #x8703)	;CJK UNIFIED IDEOGRAPH
                                (#xF2D8 . #x8707)	;CJK UNIFIED IDEOGRAPH
                                (#xF2D9 . #x86F8)	;CJK UNIFIED IDEOGRAPH
                                (#xF2DA . #x8708)	;CJK UNIFIED IDEOGRAPH
                                (#xF2DB . #x870A)	;CJK UNIFIED IDEOGRAPH
                                (#xF2DC . #x870D)	;CJK UNIFIED IDEOGRAPH
                                (#xF2DD . #x8709)	;CJK UNIFIED IDEOGRAPH
                                (#xF2DE . #x8723)	;CJK UNIFIED IDEOGRAPH
                                (#xF2DF . #x873B)	;CJK UNIFIED IDEOGRAPH
                                (#xF2E0 . #x871E)	;CJK UNIFIED IDEOGRAPH
                                (#xF2E1 . #x8725)	;CJK UNIFIED IDEOGRAPH
                                (#xF2E2 . #x872E)	;CJK UNIFIED IDEOGRAPH
                                (#xF2E3 . #x871A)	;CJK UNIFIED IDEOGRAPH
                                (#xF2E4 . #x873E)	;CJK UNIFIED IDEOGRAPH
                                (#xF2E5 . #x8748)	;CJK UNIFIED IDEOGRAPH
                                (#xF2E6 . #x8734)	;CJK UNIFIED IDEOGRAPH
                                (#xF2E7 . #x8731)	;CJK UNIFIED IDEOGRAPH
                                (#xF2E8 . #x8729)	;CJK UNIFIED IDEOGRAPH
                                (#xF2E9 . #x8737)	;CJK UNIFIED IDEOGRAPH
                                (#xF2EA . #x873F)	;CJK UNIFIED IDEOGRAPH
                                (#xF2EB . #x8782)	;CJK UNIFIED IDEOGRAPH
                                (#xF2EC . #x8722)	;CJK UNIFIED IDEOGRAPH
                                (#xF2ED . #x877D)	;CJK UNIFIED IDEOGRAPH
                                (#xF2EE . #x877E)	;CJK UNIFIED IDEOGRAPH
                                (#xF2EF . #x877B)	;CJK UNIFIED IDEOGRAPH
                                (#xF2F0 . #x8760)	;CJK UNIFIED IDEOGRAPH
                                (#xF2F1 . #x8770)	;CJK UNIFIED IDEOGRAPH
                                (#xF2F2 . #x874C)	;CJK UNIFIED IDEOGRAPH
                                (#xF2F3 . #x876E)	;CJK UNIFIED IDEOGRAPH
                                (#xF2F4 . #x878B)	;CJK UNIFIED IDEOGRAPH
                                (#xF2F5 . #x8753)	;CJK UNIFIED IDEOGRAPH
                                (#xF2F6 . #x8763)	;CJK UNIFIED IDEOGRAPH
                                (#xF2F7 . #x877C)	;CJK UNIFIED IDEOGRAPH
                                (#xF2F8 . #x8764)	;CJK UNIFIED IDEOGRAPH
                                (#xF2F9 . #x8759)	;CJK UNIFIED IDEOGRAPH
                                (#xF2FA . #x8765)	;CJK UNIFIED IDEOGRAPH
                                (#xF2FB . #x8793)	;CJK UNIFIED IDEOGRAPH
                                (#xF2FC . #x87AF)	;CJK UNIFIED IDEOGRAPH
                                (#xF2FD . #x87A8)	;CJK UNIFIED IDEOGRAPH
                                (#xF2FE . #x87D2)	;CJK UNIFIED IDEOGRAPH
                                (#xF340 . #x9A5A)	;CJK UNIFIED IDEOGRAPH
                                (#xF341 . #x9A5B)	;CJK UNIFIED IDEOGRAPH
                                (#xF342 . #x9A5C)	;CJK UNIFIED IDEOGRAPH
                                (#xF343 . #x9A5D)	;CJK UNIFIED IDEOGRAPH
                                (#xF344 . #x9A5E)	;CJK UNIFIED IDEOGRAPH
                                (#xF345 . #x9A5F)	;CJK UNIFIED IDEOGRAPH
                                (#xF346 . #x9A60)	;CJK UNIFIED IDEOGRAPH
                                (#xF347 . #x9A61)	;CJK UNIFIED IDEOGRAPH
                                (#xF348 . #x9A62)	;CJK UNIFIED IDEOGRAPH
                                (#xF349 . #x9A63)	;CJK UNIFIED IDEOGRAPH
                                (#xF34A . #x9A64)	;CJK UNIFIED IDEOGRAPH
                                (#xF34B . #x9A65)	;CJK UNIFIED IDEOGRAPH
                                (#xF34C . #x9A66)	;CJK UNIFIED IDEOGRAPH
                                (#xF34D . #x9A67)	;CJK UNIFIED IDEOGRAPH
                                (#xF34E . #x9A68)	;CJK UNIFIED IDEOGRAPH
                                (#xF34F . #x9A69)	;CJK UNIFIED IDEOGRAPH
                                (#xF350 . #x9A6A)	;CJK UNIFIED IDEOGRAPH
                                (#xF351 . #x9A6B)	;CJK UNIFIED IDEOGRAPH
                                (#xF352 . #x9A72)	;CJK UNIFIED IDEOGRAPH
                                (#xF353 . #x9A83)	;CJK UNIFIED IDEOGRAPH
                                (#xF354 . #x9A89)	;CJK UNIFIED IDEOGRAPH
                                (#xF355 . #x9A8D)	;CJK UNIFIED IDEOGRAPH
                                (#xF356 . #x9A8E)	;CJK UNIFIED IDEOGRAPH
                                (#xF357 . #x9A94)	;CJK UNIFIED IDEOGRAPH
                                (#xF358 . #x9A95)	;CJK UNIFIED IDEOGRAPH
                                (#xF359 . #x9A99)	;CJK UNIFIED IDEOGRAPH
                                (#xF35A . #x9AA6)	;CJK UNIFIED IDEOGRAPH
                                (#xF35B . #x9AA9)	;CJK UNIFIED IDEOGRAPH
                                (#xF35C . #x9AAA)	;CJK UNIFIED IDEOGRAPH
                                (#xF35D . #x9AAB)	;CJK UNIFIED IDEOGRAPH
                                (#xF35E . #x9AAC)	;CJK UNIFIED IDEOGRAPH
                                (#xF35F . #x9AAD)	;CJK UNIFIED IDEOGRAPH
                                (#xF360 . #x9AAE)	;CJK UNIFIED IDEOGRAPH
                                (#xF361 . #x9AAF)	;CJK UNIFIED IDEOGRAPH
                                (#xF362 . #x9AB2)	;CJK UNIFIED IDEOGRAPH
                                (#xF363 . #x9AB3)	;CJK UNIFIED IDEOGRAPH
                                (#xF364 . #x9AB4)	;CJK UNIFIED IDEOGRAPH
                                (#xF365 . #x9AB5)	;CJK UNIFIED IDEOGRAPH
                                (#xF366 . #x9AB9)	;CJK UNIFIED IDEOGRAPH
                                (#xF367 . #x9ABB)	;CJK UNIFIED IDEOGRAPH
                                (#xF368 . #x9ABD)	;CJK UNIFIED IDEOGRAPH
                                (#xF369 . #x9ABE)	;CJK UNIFIED IDEOGRAPH
                                (#xF36A . #x9ABF)	;CJK UNIFIED IDEOGRAPH
                                (#xF36B . #x9AC3)	;CJK UNIFIED IDEOGRAPH
                                (#xF36C . #x9AC4)	;CJK UNIFIED IDEOGRAPH
                                (#xF36D . #x9AC6)	;CJK UNIFIED IDEOGRAPH
                                (#xF36E . #x9AC7)	;CJK UNIFIED IDEOGRAPH
                                (#xF36F . #x9AC8)	;CJK UNIFIED IDEOGRAPH
                                (#xF370 . #x9AC9)	;CJK UNIFIED IDEOGRAPH
                                (#xF371 . #x9ACA)	;CJK UNIFIED IDEOGRAPH
                                (#xF372 . #x9ACD)	;CJK UNIFIED IDEOGRAPH
                                (#xF373 . #x9ACE)	;CJK UNIFIED IDEOGRAPH
                                (#xF374 . #x9ACF)	;CJK UNIFIED IDEOGRAPH
                                (#xF375 . #x9AD0)	;CJK UNIFIED IDEOGRAPH
                                (#xF376 . #x9AD2)	;CJK UNIFIED IDEOGRAPH
                                (#xF377 . #x9AD4)	;CJK UNIFIED IDEOGRAPH
                                (#xF378 . #x9AD5)	;CJK UNIFIED IDEOGRAPH
                                (#xF379 . #x9AD6)	;CJK UNIFIED IDEOGRAPH
                                (#xF37A . #x9AD7)	;CJK UNIFIED IDEOGRAPH
                                (#xF37B . #x9AD9)	;CJK UNIFIED IDEOGRAPH
                                (#xF37C . #x9ADA)	;CJK UNIFIED IDEOGRAPH
                                (#xF37D . #x9ADB)	;CJK UNIFIED IDEOGRAPH
                                (#xF37E . #x9ADC)	;CJK UNIFIED IDEOGRAPH
                                (#xF380 . #x9ADD)	;CJK UNIFIED IDEOGRAPH
                                (#xF381 . #x9ADE)	;CJK UNIFIED IDEOGRAPH
                                (#xF382 . #x9AE0)	;CJK UNIFIED IDEOGRAPH
                                (#xF383 . #x9AE2)	;CJK UNIFIED IDEOGRAPH
                                (#xF384 . #x9AE3)	;CJK UNIFIED IDEOGRAPH
                                (#xF385 . #x9AE4)	;CJK UNIFIED IDEOGRAPH
                                (#xF386 . #x9AE5)	;CJK UNIFIED IDEOGRAPH
                                (#xF387 . #x9AE7)	;CJK UNIFIED IDEOGRAPH
                                (#xF388 . #x9AE8)	;CJK UNIFIED IDEOGRAPH
                                (#xF389 . #x9AE9)	;CJK UNIFIED IDEOGRAPH
                                (#xF38A . #x9AEA)	;CJK UNIFIED IDEOGRAPH
                                (#xF38B . #x9AEC)	;CJK UNIFIED IDEOGRAPH
                                (#xF38C . #x9AEE)	;CJK UNIFIED IDEOGRAPH
                                (#xF38D . #x9AF0)	;CJK UNIFIED IDEOGRAPH
                                (#xF38E . #x9AF1)	;CJK UNIFIED IDEOGRAPH
                                (#xF38F . #x9AF2)	;CJK UNIFIED IDEOGRAPH
                                (#xF390 . #x9AF3)	;CJK UNIFIED IDEOGRAPH
                                (#xF391 . #x9AF4)	;CJK UNIFIED IDEOGRAPH
                                (#xF392 . #x9AF5)	;CJK UNIFIED IDEOGRAPH
                                (#xF393 . #x9AF6)	;CJK UNIFIED IDEOGRAPH
                                (#xF394 . #x9AF7)	;CJK UNIFIED IDEOGRAPH
                                (#xF395 . #x9AF8)	;CJK UNIFIED IDEOGRAPH
                                (#xF396 . #x9AFA)	;CJK UNIFIED IDEOGRAPH
                                (#xF397 . #x9AFC)	;CJK UNIFIED IDEOGRAPH
                                (#xF398 . #x9AFD)	;CJK UNIFIED IDEOGRAPH
                                (#xF399 . #x9AFE)	;CJK UNIFIED IDEOGRAPH
                                (#xF39A . #x9AFF)	;CJK UNIFIED IDEOGRAPH
                                (#xF39B . #x9B00)	;CJK UNIFIED IDEOGRAPH
                                (#xF39C . #x9B01)	;CJK UNIFIED IDEOGRAPH
                                (#xF39D . #x9B02)	;CJK UNIFIED IDEOGRAPH
                                (#xF39E . #x9B04)	;CJK UNIFIED IDEOGRAPH
                                (#xF39F . #x9B05)	;CJK UNIFIED IDEOGRAPH
                                (#xF3A0 . #x9B06)	;CJK UNIFIED IDEOGRAPH
                                (#xF3A1 . #x87C6)	;CJK UNIFIED IDEOGRAPH
                                (#xF3A2 . #x8788)	;CJK UNIFIED IDEOGRAPH
                                (#xF3A3 . #x8785)	;CJK UNIFIED IDEOGRAPH
                                (#xF3A4 . #x87AD)	;CJK UNIFIED IDEOGRAPH
                                (#xF3A5 . #x8797)	;CJK UNIFIED IDEOGRAPH
                                (#xF3A6 . #x8783)	;CJK UNIFIED IDEOGRAPH
                                (#xF3A7 . #x87AB)	;CJK UNIFIED IDEOGRAPH
                                (#xF3A8 . #x87E5)	;CJK UNIFIED IDEOGRAPH
                                (#xF3A9 . #x87AC)	;CJK UNIFIED IDEOGRAPH
                                (#xF3AA . #x87B5)	;CJK UNIFIED IDEOGRAPH
                                (#xF3AB . #x87B3)	;CJK UNIFIED IDEOGRAPH
                                (#xF3AC . #x87CB)	;CJK UNIFIED IDEOGRAPH
                                (#xF3AD . #x87D3)	;CJK UNIFIED IDEOGRAPH
                                (#xF3AE . #x87BD)	;CJK UNIFIED IDEOGRAPH
                                (#xF3AF . #x87D1)	;CJK UNIFIED IDEOGRAPH
                                (#xF3B0 . #x87C0)	;CJK UNIFIED IDEOGRAPH
                                (#xF3B1 . #x87CA)	;CJK UNIFIED IDEOGRAPH
                                (#xF3B2 . #x87DB)	;CJK UNIFIED IDEOGRAPH
                                (#xF3B3 . #x87EA)	;CJK UNIFIED IDEOGRAPH
                                (#xF3B4 . #x87E0)	;CJK UNIFIED IDEOGRAPH
                                (#xF3B5 . #x87EE)	;CJK UNIFIED IDEOGRAPH
                                (#xF3B6 . #x8816)	;CJK UNIFIED IDEOGRAPH
                                (#xF3B7 . #x8813)	;CJK UNIFIED IDEOGRAPH
                                (#xF3B8 . #x87FE)	;CJK UNIFIED IDEOGRAPH
                                (#xF3B9 . #x880A)	;CJK UNIFIED IDEOGRAPH
                                (#xF3BA . #x881B)	;CJK UNIFIED IDEOGRAPH
                                (#xF3BB . #x8821)	;CJK UNIFIED IDEOGRAPH
                                (#xF3BC . #x8839)	;CJK UNIFIED IDEOGRAPH
                                (#xF3BD . #x883C)	;CJK UNIFIED IDEOGRAPH
                                (#xF3BE . #x7F36)	;CJK UNIFIED IDEOGRAPH
                                (#xF3BF . #x7F42)	;CJK UNIFIED IDEOGRAPH
                                (#xF3C0 . #x7F44)	;CJK UNIFIED IDEOGRAPH
                                (#xF3C1 . #x7F45)	;CJK UNIFIED IDEOGRAPH
                                (#xF3C2 . #x8210)	;CJK UNIFIED IDEOGRAPH
                                (#xF3C3 . #x7AFA)	;CJK UNIFIED IDEOGRAPH
                                (#xF3C4 . #x7AFD)	;CJK UNIFIED IDEOGRAPH
                                (#xF3C5 . #x7B08)	;CJK UNIFIED IDEOGRAPH
                                (#xF3C6 . #x7B03)	;CJK UNIFIED IDEOGRAPH
                                (#xF3C7 . #x7B04)	;CJK UNIFIED IDEOGRAPH
                                (#xF3C8 . #x7B15)	;CJK UNIFIED IDEOGRAPH
                                (#xF3C9 . #x7B0A)	;CJK UNIFIED IDEOGRAPH
                                (#xF3CA . #x7B2B)	;CJK UNIFIED IDEOGRAPH
                                (#xF3CB . #x7B0F)	;CJK UNIFIED IDEOGRAPH
                                (#xF3CC . #x7B47)	;CJK UNIFIED IDEOGRAPH
                                (#xF3CD . #x7B38)	;CJK UNIFIED IDEOGRAPH
                                (#xF3CE . #x7B2A)	;CJK UNIFIED IDEOGRAPH
                                (#xF3CF . #x7B19)	;CJK UNIFIED IDEOGRAPH
                                (#xF3D0 . #x7B2E)	;CJK UNIFIED IDEOGRAPH
                                (#xF3D1 . #x7B31)	;CJK UNIFIED IDEOGRAPH
                                (#xF3D2 . #x7B20)	;CJK UNIFIED IDEOGRAPH
                                (#xF3D3 . #x7B25)	;CJK UNIFIED IDEOGRAPH
                                (#xF3D4 . #x7B24)	;CJK UNIFIED IDEOGRAPH
                                (#xF3D5 . #x7B33)	;CJK UNIFIED IDEOGRAPH
                                (#xF3D6 . #x7B3E)	;CJK UNIFIED IDEOGRAPH
                                (#xF3D7 . #x7B1E)	;CJK UNIFIED IDEOGRAPH
                                (#xF3D8 . #x7B58)	;CJK UNIFIED IDEOGRAPH
                                (#xF3D9 . #x7B5A)	;CJK UNIFIED IDEOGRAPH
                                (#xF3DA . #x7B45)	;CJK UNIFIED IDEOGRAPH
                                (#xF3DB . #x7B75)	;CJK UNIFIED IDEOGRAPH
                                (#xF3DC . #x7B4C)	;CJK UNIFIED IDEOGRAPH
                                (#xF3DD . #x7B5D)	;CJK UNIFIED IDEOGRAPH
                                (#xF3DE . #x7B60)	;CJK UNIFIED IDEOGRAPH
                                (#xF3DF . #x7B6E)	;CJK UNIFIED IDEOGRAPH
                                (#xF3E0 . #x7B7B)	;CJK UNIFIED IDEOGRAPH
                                (#xF3E1 . #x7B62)	;CJK UNIFIED IDEOGRAPH
                                (#xF3E2 . #x7B72)	;CJK UNIFIED IDEOGRAPH
                                (#xF3E3 . #x7B71)	;CJK UNIFIED IDEOGRAPH
                                (#xF3E4 . #x7B90)	;CJK UNIFIED IDEOGRAPH
                                (#xF3E5 . #x7BA6)	;CJK UNIFIED IDEOGRAPH
                                (#xF3E6 . #x7BA7)	;CJK UNIFIED IDEOGRAPH
                                (#xF3E7 . #x7BB8)	;CJK UNIFIED IDEOGRAPH
                                (#xF3E8 . #x7BAC)	;CJK UNIFIED IDEOGRAPH
                                (#xF3E9 . #x7B9D)	;CJK UNIFIED IDEOGRAPH
                                (#xF3EA . #x7BA8)	;CJK UNIFIED IDEOGRAPH
                                (#xF3EB . #x7B85)	;CJK UNIFIED IDEOGRAPH
                                (#xF3EC . #x7BAA)	;CJK UNIFIED IDEOGRAPH
                                (#xF3ED . #x7B9C)	;CJK UNIFIED IDEOGRAPH
                                (#xF3EE . #x7BA2)	;CJK UNIFIED IDEOGRAPH
                                (#xF3EF . #x7BAB)	;CJK UNIFIED IDEOGRAPH
                                (#xF3F0 . #x7BB4)	;CJK UNIFIED IDEOGRAPH
                                (#xF3F1 . #x7BD1)	;CJK UNIFIED IDEOGRAPH
                                (#xF3F2 . #x7BC1)	;CJK UNIFIED IDEOGRAPH
                                (#xF3F3 . #x7BCC)	;CJK UNIFIED IDEOGRAPH
                                (#xF3F4 . #x7BDD)	;CJK UNIFIED IDEOGRAPH
                                (#xF3F5 . #x7BDA)	;CJK UNIFIED IDEOGRAPH
                                (#xF3F6 . #x7BE5)	;CJK UNIFIED IDEOGRAPH
                                (#xF3F7 . #x7BE6)	;CJK UNIFIED IDEOGRAPH
                                (#xF3F8 . #x7BEA)	;CJK UNIFIED IDEOGRAPH
                                (#xF3F9 . #x7C0C)	;CJK UNIFIED IDEOGRAPH
                                (#xF3FA . #x7BFE)	;CJK UNIFIED IDEOGRAPH
                                (#xF3FB . #x7BFC)	;CJK UNIFIED IDEOGRAPH
                                (#xF3FC . #x7C0F)	;CJK UNIFIED IDEOGRAPH
                                (#xF3FD . #x7C16)	;CJK UNIFIED IDEOGRAPH
                                (#xF3FE . #x7C0B)	;CJK UNIFIED IDEOGRAPH
                                (#xF440 . #x9B07)	;CJK UNIFIED IDEOGRAPH
                                (#xF441 . #x9B09)	;CJK UNIFIED IDEOGRAPH
                                (#xF442 . #x9B0A)	;CJK UNIFIED IDEOGRAPH
                                (#xF443 . #x9B0B)	;CJK UNIFIED IDEOGRAPH
                                (#xF444 . #x9B0C)	;CJK UNIFIED IDEOGRAPH
                                (#xF445 . #x9B0D)	;CJK UNIFIED IDEOGRAPH
                                (#xF446 . #x9B0E)	;CJK UNIFIED IDEOGRAPH
                                (#xF447 . #x9B10)	;CJK UNIFIED IDEOGRAPH
                                (#xF448 . #x9B11)	;CJK UNIFIED IDEOGRAPH
                                (#xF449 . #x9B12)	;CJK UNIFIED IDEOGRAPH
                                (#xF44A . #x9B14)	;CJK UNIFIED IDEOGRAPH
                                (#xF44B . #x9B15)	;CJK UNIFIED IDEOGRAPH
                                (#xF44C . #x9B16)	;CJK UNIFIED IDEOGRAPH
                                (#xF44D . #x9B17)	;CJK UNIFIED IDEOGRAPH
                                (#xF44E . #x9B18)	;CJK UNIFIED IDEOGRAPH
                                (#xF44F . #x9B19)	;CJK UNIFIED IDEOGRAPH
                                (#xF450 . #x9B1A)	;CJK UNIFIED IDEOGRAPH
                                (#xF451 . #x9B1B)	;CJK UNIFIED IDEOGRAPH
                                (#xF452 . #x9B1C)	;CJK UNIFIED IDEOGRAPH
                                (#xF453 . #x9B1D)	;CJK UNIFIED IDEOGRAPH
                                (#xF454 . #x9B1E)	;CJK UNIFIED IDEOGRAPH
                                (#xF455 . #x9B20)	;CJK UNIFIED IDEOGRAPH
                                (#xF456 . #x9B21)	;CJK UNIFIED IDEOGRAPH
                                (#xF457 . #x9B22)	;CJK UNIFIED IDEOGRAPH
                                (#xF458 . #x9B24)	;CJK UNIFIED IDEOGRAPH
                                (#xF459 . #x9B25)	;CJK UNIFIED IDEOGRAPH
                                (#xF45A . #x9B26)	;CJK UNIFIED IDEOGRAPH
                                (#xF45B . #x9B27)	;CJK UNIFIED IDEOGRAPH
                                (#xF45C . #x9B28)	;CJK UNIFIED IDEOGRAPH
                                (#xF45D . #x9B29)	;CJK UNIFIED IDEOGRAPH
                                (#xF45E . #x9B2A)	;CJK UNIFIED IDEOGRAPH
                                (#xF45F . #x9B2B)	;CJK UNIFIED IDEOGRAPH
                                (#xF460 . #x9B2C)	;CJK UNIFIED IDEOGRAPH
                                (#xF461 . #x9B2D)	;CJK UNIFIED IDEOGRAPH
                                (#xF462 . #x9B2E)	;CJK UNIFIED IDEOGRAPH
                                (#xF463 . #x9B30)	;CJK UNIFIED IDEOGRAPH
                                (#xF464 . #x9B31)	;CJK UNIFIED IDEOGRAPH
                                (#xF465 . #x9B33)	;CJK UNIFIED IDEOGRAPH
                                (#xF466 . #x9B34)	;CJK UNIFIED IDEOGRAPH
                                (#xF467 . #x9B35)	;CJK UNIFIED IDEOGRAPH
                                (#xF468 . #x9B36)	;CJK UNIFIED IDEOGRAPH
                                (#xF469 . #x9B37)	;CJK UNIFIED IDEOGRAPH
                                (#xF46A . #x9B38)	;CJK UNIFIED IDEOGRAPH
                                (#xF46B . #x9B39)	;CJK UNIFIED IDEOGRAPH
                                (#xF46C . #x9B3A)	;CJK UNIFIED IDEOGRAPH
                                (#xF46D . #x9B3D)	;CJK UNIFIED IDEOGRAPH
                                (#xF46E . #x9B3E)	;CJK UNIFIED IDEOGRAPH
                                (#xF46F . #x9B3F)	;CJK UNIFIED IDEOGRAPH
                                (#xF470 . #x9B40)	;CJK UNIFIED IDEOGRAPH
                                (#xF471 . #x9B46)	;CJK UNIFIED IDEOGRAPH
                                (#xF472 . #x9B4A)	;CJK UNIFIED IDEOGRAPH
                                (#xF473 . #x9B4B)	;CJK UNIFIED IDEOGRAPH
                                (#xF474 . #x9B4C)	;CJK UNIFIED IDEOGRAPH
                                (#xF475 . #x9B4E)	;CJK UNIFIED IDEOGRAPH
                                (#xF476 . #x9B50)	;CJK UNIFIED IDEOGRAPH
                                (#xF477 . #x9B52)	;CJK UNIFIED IDEOGRAPH
                                (#xF478 . #x9B53)	;CJK UNIFIED IDEOGRAPH
                                (#xF479 . #x9B55)	;CJK UNIFIED IDEOGRAPH
                                (#xF47A . #x9B56)	;CJK UNIFIED IDEOGRAPH
                                (#xF47B . #x9B57)	;CJK UNIFIED IDEOGRAPH
                                (#xF47C . #x9B58)	;CJK UNIFIED IDEOGRAPH
                                (#xF47D . #x9B59)	;CJK UNIFIED IDEOGRAPH
                                (#xF47E . #x9B5A)	;CJK UNIFIED IDEOGRAPH
                                (#xF480 . #x9B5B)	;CJK UNIFIED IDEOGRAPH
                                (#xF481 . #x9B5C)	;CJK UNIFIED IDEOGRAPH
                                (#xF482 . #x9B5D)	;CJK UNIFIED IDEOGRAPH
                                (#xF483 . #x9B5E)	;CJK UNIFIED IDEOGRAPH
                                (#xF484 . #x9B5F)	;CJK UNIFIED IDEOGRAPH
                                (#xF485 . #x9B60)	;CJK UNIFIED IDEOGRAPH
                                (#xF486 . #x9B61)	;CJK UNIFIED IDEOGRAPH
                                (#xF487 . #x9B62)	;CJK UNIFIED IDEOGRAPH
                                (#xF488 . #x9B63)	;CJK UNIFIED IDEOGRAPH
                                (#xF489 . #x9B64)	;CJK UNIFIED IDEOGRAPH
                                (#xF48A . #x9B65)	;CJK UNIFIED IDEOGRAPH
                                (#xF48B . #x9B66)	;CJK UNIFIED IDEOGRAPH
                                (#xF48C . #x9B67)	;CJK UNIFIED IDEOGRAPH
                                (#xF48D . #x9B68)	;CJK UNIFIED IDEOGRAPH
                                (#xF48E . #x9B69)	;CJK UNIFIED IDEOGRAPH
                                (#xF48F . #x9B6A)	;CJK UNIFIED IDEOGRAPH
                                (#xF490 . #x9B6B)	;CJK UNIFIED IDEOGRAPH
                                (#xF491 . #x9B6C)	;CJK UNIFIED IDEOGRAPH
                                (#xF492 . #x9B6D)	;CJK UNIFIED IDEOGRAPH
                                (#xF493 . #x9B6E)	;CJK UNIFIED IDEOGRAPH
                                (#xF494 . #x9B6F)	;CJK UNIFIED IDEOGRAPH
                                (#xF495 . #x9B70)	;CJK UNIFIED IDEOGRAPH
                                (#xF496 . #x9B71)	;CJK UNIFIED IDEOGRAPH
                                (#xF497 . #x9B72)	;CJK UNIFIED IDEOGRAPH
                                (#xF498 . #x9B73)	;CJK UNIFIED IDEOGRAPH
                                (#xF499 . #x9B74)	;CJK UNIFIED IDEOGRAPH
                                (#xF49A . #x9B75)	;CJK UNIFIED IDEOGRAPH
                                (#xF49B . #x9B76)	;CJK UNIFIED IDEOGRAPH
                                (#xF49C . #x9B77)	;CJK UNIFIED IDEOGRAPH
                                (#xF49D . #x9B78)	;CJK UNIFIED IDEOGRAPH
                                (#xF49E . #x9B79)	;CJK UNIFIED IDEOGRAPH
                                (#xF49F . #x9B7A)	;CJK UNIFIED IDEOGRAPH
                                (#xF4A0 . #x9B7B)	;CJK UNIFIED IDEOGRAPH
                                (#xF4A1 . #x7C1F)	;CJK UNIFIED IDEOGRAPH
                                (#xF4A2 . #x7C2A)	;CJK UNIFIED IDEOGRAPH
                                (#xF4A3 . #x7C26)	;CJK UNIFIED IDEOGRAPH
                                (#xF4A4 . #x7C38)	;CJK UNIFIED IDEOGRAPH
                                (#xF4A5 . #x7C41)	;CJK UNIFIED IDEOGRAPH
                                (#xF4A6 . #x7C40)	;CJK UNIFIED IDEOGRAPH
                                (#xF4A7 . #x81FE)	;CJK UNIFIED IDEOGRAPH
                                (#xF4A8 . #x8201)	;CJK UNIFIED IDEOGRAPH
                                (#xF4A9 . #x8202)	;CJK UNIFIED IDEOGRAPH
                                (#xF4AA . #x8204)	;CJK UNIFIED IDEOGRAPH
                                (#xF4AB . #x81EC)	;CJK UNIFIED IDEOGRAPH
                                (#xF4AC . #x8844)	;CJK UNIFIED IDEOGRAPH
                                (#xF4AD . #x8221)	;CJK UNIFIED IDEOGRAPH
                                (#xF4AE . #x8222)	;CJK UNIFIED IDEOGRAPH
                                (#xF4AF . #x8223)	;CJK UNIFIED IDEOGRAPH
                                (#xF4B0 . #x822D)	;CJK UNIFIED IDEOGRAPH
                                (#xF4B1 . #x822F)	;CJK UNIFIED IDEOGRAPH
                                (#xF4B2 . #x8228)	;CJK UNIFIED IDEOGRAPH
                                (#xF4B3 . #x822B)	;CJK UNIFIED IDEOGRAPH
                                (#xF4B4 . #x8238)	;CJK UNIFIED IDEOGRAPH
                                (#xF4B5 . #x823B)	;CJK UNIFIED IDEOGRAPH
                                (#xF4B6 . #x8233)	;CJK UNIFIED IDEOGRAPH
                                (#xF4B7 . #x8234)	;CJK UNIFIED IDEOGRAPH
                                (#xF4B8 . #x823E)	;CJK UNIFIED IDEOGRAPH
                                (#xF4B9 . #x8244)	;CJK UNIFIED IDEOGRAPH
                                (#xF4BA . #x8249)	;CJK UNIFIED IDEOGRAPH
                                (#xF4BB . #x824B)	;CJK UNIFIED IDEOGRAPH
                                (#xF4BC . #x824F)	;CJK UNIFIED IDEOGRAPH
                                (#xF4BD . #x825A)	;CJK UNIFIED IDEOGRAPH
                                (#xF4BE . #x825F)	;CJK UNIFIED IDEOGRAPH
                                (#xF4BF . #x8268)	;CJK UNIFIED IDEOGRAPH
                                (#xF4C0 . #x887E)	;CJK UNIFIED IDEOGRAPH
                                (#xF4C1 . #x8885)	;CJK UNIFIED IDEOGRAPH
                                (#xF4C2 . #x8888)	;CJK UNIFIED IDEOGRAPH
                                (#xF4C3 . #x88D8)	;CJK UNIFIED IDEOGRAPH
                                (#xF4C4 . #x88DF)	;CJK UNIFIED IDEOGRAPH
                                (#xF4C5 . #x895E)	;CJK UNIFIED IDEOGRAPH
                                (#xF4C6 . #x7F9D)	;CJK UNIFIED IDEOGRAPH
                                (#xF4C7 . #x7F9F)	;CJK UNIFIED IDEOGRAPH
                                (#xF4C8 . #x7FA7)	;CJK UNIFIED IDEOGRAPH
                                (#xF4C9 . #x7FAF)	;CJK UNIFIED IDEOGRAPH
                                (#xF4CA . #x7FB0)	;CJK UNIFIED IDEOGRAPH
                                (#xF4CB . #x7FB2)	;CJK UNIFIED IDEOGRAPH
                                (#xF4CC . #x7C7C)	;CJK UNIFIED IDEOGRAPH
                                (#xF4CD . #x6549)	;CJK UNIFIED IDEOGRAPH
                                (#xF4CE . #x7C91)	;CJK UNIFIED IDEOGRAPH
                                (#xF4CF . #x7C9D)	;CJK UNIFIED IDEOGRAPH
                                (#xF4D0 . #x7C9C)	;CJK UNIFIED IDEOGRAPH
                                (#xF4D1 . #x7C9E)	;CJK UNIFIED IDEOGRAPH
                                (#xF4D2 . #x7CA2)	;CJK UNIFIED IDEOGRAPH
                                (#xF4D3 . #x7CB2)	;CJK UNIFIED IDEOGRAPH
                                (#xF4D4 . #x7CBC)	;CJK UNIFIED IDEOGRAPH
                                (#xF4D5 . #x7CBD)	;CJK UNIFIED IDEOGRAPH
                                (#xF4D6 . #x7CC1)	;CJK UNIFIED IDEOGRAPH
                                (#xF4D7 . #x7CC7)	;CJK UNIFIED IDEOGRAPH
                                (#xF4D8 . #x7CCC)	;CJK UNIFIED IDEOGRAPH
                                (#xF4D9 . #x7CCD)	;CJK UNIFIED IDEOGRAPH
                                (#xF4DA . #x7CC8)	;CJK UNIFIED IDEOGRAPH
                                (#xF4DB . #x7CC5)	;CJK UNIFIED IDEOGRAPH
                                (#xF4DC . #x7CD7)	;CJK UNIFIED IDEOGRAPH
                                (#xF4DD . #x7CE8)	;CJK UNIFIED IDEOGRAPH
                                (#xF4DE . #x826E)	;CJK UNIFIED IDEOGRAPH
                                (#xF4DF . #x66A8)	;CJK UNIFIED IDEOGRAPH
                                (#xF4E0 . #x7FBF)	;CJK UNIFIED IDEOGRAPH
                                (#xF4E1 . #x7FCE)	;CJK UNIFIED IDEOGRAPH
                                (#xF4E2 . #x7FD5)	;CJK UNIFIED IDEOGRAPH
                                (#xF4E3 . #x7FE5)	;CJK UNIFIED IDEOGRAPH
                                (#xF4E4 . #x7FE1)	;CJK UNIFIED IDEOGRAPH
                                (#xF4E5 . #x7FE6)	;CJK UNIFIED IDEOGRAPH
                                (#xF4E6 . #x7FE9)	;CJK UNIFIED IDEOGRAPH
                                (#xF4E7 . #x7FEE)	;CJK UNIFIED IDEOGRAPH
                                (#xF4E8 . #x7FF3)	;CJK UNIFIED IDEOGRAPH
                                (#xF4E9 . #x7CF8)	;CJK UNIFIED IDEOGRAPH
                                (#xF4EA . #x7D77)	;CJK UNIFIED IDEOGRAPH
                                (#xF4EB . #x7DA6)	;CJK UNIFIED IDEOGRAPH
                                (#xF4EC . #x7DAE)	;CJK UNIFIED IDEOGRAPH
                                (#xF4ED . #x7E47)	;CJK UNIFIED IDEOGRAPH
                                (#xF4EE . #x7E9B)	;CJK UNIFIED IDEOGRAPH
                                (#xF4EF . #x9EB8)	;CJK UNIFIED IDEOGRAPH
                                (#xF4F0 . #x9EB4)	;CJK UNIFIED IDEOGRAPH
                                (#xF4F1 . #x8D73)	;CJK UNIFIED IDEOGRAPH
                                (#xF4F2 . #x8D84)	;CJK UNIFIED IDEOGRAPH
                                (#xF4F3 . #x8D94)	;CJK UNIFIED IDEOGRAPH
                                (#xF4F4 . #x8D91)	;CJK UNIFIED IDEOGRAPH
                                (#xF4F5 . #x8DB1)	;CJK UNIFIED IDEOGRAPH
                                (#xF4F6 . #x8D67)	;CJK UNIFIED IDEOGRAPH
                                (#xF4F7 . #x8D6D)	;CJK UNIFIED IDEOGRAPH
                                (#xF4F8 . #x8C47)	;CJK UNIFIED IDEOGRAPH
                                (#xF4F9 . #x8C49)	;CJK UNIFIED IDEOGRAPH
                                (#xF4FA . #x914A)	;CJK UNIFIED IDEOGRAPH
                                (#xF4FB . #x9150)	;CJK UNIFIED IDEOGRAPH
                                (#xF4FC . #x914E)	;CJK UNIFIED IDEOGRAPH
                                (#xF4FD . #x914F)	;CJK UNIFIED IDEOGRAPH
                                (#xF4FE . #x9164)	;CJK UNIFIED IDEOGRAPH
                                (#xF540 . #x9B7C)	;CJK UNIFIED IDEOGRAPH
                                (#xF541 . #x9B7D)	;CJK UNIFIED IDEOGRAPH
                                (#xF542 . #x9B7E)	;CJK UNIFIED IDEOGRAPH
                                (#xF543 . #x9B7F)	;CJK UNIFIED IDEOGRAPH
                                (#xF544 . #x9B80)	;CJK UNIFIED IDEOGRAPH
                                (#xF545 . #x9B81)	;CJK UNIFIED IDEOGRAPH
                                (#xF546 . #x9B82)	;CJK UNIFIED IDEOGRAPH
                                (#xF547 . #x9B83)	;CJK UNIFIED IDEOGRAPH
                                (#xF548 . #x9B84)	;CJK UNIFIED IDEOGRAPH
                                (#xF549 . #x9B85)	;CJK UNIFIED IDEOGRAPH
                                (#xF54A . #x9B86)	;CJK UNIFIED IDEOGRAPH
                                (#xF54B . #x9B87)	;CJK UNIFIED IDEOGRAPH
                                (#xF54C . #x9B88)	;CJK UNIFIED IDEOGRAPH
                                (#xF54D . #x9B89)	;CJK UNIFIED IDEOGRAPH
                                (#xF54E . #x9B8A)	;CJK UNIFIED IDEOGRAPH
                                (#xF54F . #x9B8B)	;CJK UNIFIED IDEOGRAPH
                                (#xF550 . #x9B8C)	;CJK UNIFIED IDEOGRAPH
                                (#xF551 . #x9B8D)	;CJK UNIFIED IDEOGRAPH
                                (#xF552 . #x9B8E)	;CJK UNIFIED IDEOGRAPH
                                (#xF553 . #x9B8F)	;CJK UNIFIED IDEOGRAPH
                                (#xF554 . #x9B90)	;CJK UNIFIED IDEOGRAPH
                                (#xF555 . #x9B91)	;CJK UNIFIED IDEOGRAPH
                                (#xF556 . #x9B92)	;CJK UNIFIED IDEOGRAPH
                                (#xF557 . #x9B93)	;CJK UNIFIED IDEOGRAPH
                                (#xF558 . #x9B94)	;CJK UNIFIED IDEOGRAPH
                                (#xF559 . #x9B95)	;CJK UNIFIED IDEOGRAPH
                                (#xF55A . #x9B96)	;CJK UNIFIED IDEOGRAPH
                                (#xF55B . #x9B97)	;CJK UNIFIED IDEOGRAPH
                                (#xF55C . #x9B98)	;CJK UNIFIED IDEOGRAPH
                                (#xF55D . #x9B99)	;CJK UNIFIED IDEOGRAPH
                                (#xF55E . #x9B9A)	;CJK UNIFIED IDEOGRAPH
                                (#xF55F . #x9B9B)	;CJK UNIFIED IDEOGRAPH
                                (#xF560 . #x9B9C)	;CJK UNIFIED IDEOGRAPH
                                (#xF561 . #x9B9D)	;CJK UNIFIED IDEOGRAPH
                                (#xF562 . #x9B9E)	;CJK UNIFIED IDEOGRAPH
                                (#xF563 . #x9B9F)	;CJK UNIFIED IDEOGRAPH
                                (#xF564 . #x9BA0)	;CJK UNIFIED IDEOGRAPH
                                (#xF565 . #x9BA1)	;CJK UNIFIED IDEOGRAPH
                                (#xF566 . #x9BA2)	;CJK UNIFIED IDEOGRAPH
                                (#xF567 . #x9BA3)	;CJK UNIFIED IDEOGRAPH
                                (#xF568 . #x9BA4)	;CJK UNIFIED IDEOGRAPH
                                (#xF569 . #x9BA5)	;CJK UNIFIED IDEOGRAPH
                                (#xF56A . #x9BA6)	;CJK UNIFIED IDEOGRAPH
                                (#xF56B . #x9BA7)	;CJK UNIFIED IDEOGRAPH
                                (#xF56C . #x9BA8)	;CJK UNIFIED IDEOGRAPH
                                (#xF56D . #x9BA9)	;CJK UNIFIED IDEOGRAPH
                                (#xF56E . #x9BAA)	;CJK UNIFIED IDEOGRAPH
                                (#xF56F . #x9BAB)	;CJK UNIFIED IDEOGRAPH
                                (#xF570 . #x9BAC)	;CJK UNIFIED IDEOGRAPH
                                (#xF571 . #x9BAD)	;CJK UNIFIED IDEOGRAPH
                                (#xF572 . #x9BAE)	;CJK UNIFIED IDEOGRAPH
                                (#xF573 . #x9BAF)	;CJK UNIFIED IDEOGRAPH
                                (#xF574 . #x9BB0)	;CJK UNIFIED IDEOGRAPH
                                (#xF575 . #x9BB1)	;CJK UNIFIED IDEOGRAPH
                                (#xF576 . #x9BB2)	;CJK UNIFIED IDEOGRAPH
                                (#xF577 . #x9BB3)	;CJK UNIFIED IDEOGRAPH
                                (#xF578 . #x9BB4)	;CJK UNIFIED IDEOGRAPH
                                (#xF579 . #x9BB5)	;CJK UNIFIED IDEOGRAPH
                                (#xF57A . #x9BB6)	;CJK UNIFIED IDEOGRAPH
                                (#xF57B . #x9BB7)	;CJK UNIFIED IDEOGRAPH
                                (#xF57C . #x9BB8)	;CJK UNIFIED IDEOGRAPH
                                (#xF57D . #x9BB9)	;CJK UNIFIED IDEOGRAPH
                                (#xF57E . #x9BBA)	;CJK UNIFIED IDEOGRAPH
                                (#xF580 . #x9BBB)	;CJK UNIFIED IDEOGRAPH
                                (#xF581 . #x9BBC)	;CJK UNIFIED IDEOGRAPH
                                (#xF582 . #x9BBD)	;CJK UNIFIED IDEOGRAPH
                                (#xF583 . #x9BBE)	;CJK UNIFIED IDEOGRAPH
                                (#xF584 . #x9BBF)	;CJK UNIFIED IDEOGRAPH
                                (#xF585 . #x9BC0)	;CJK UNIFIED IDEOGRAPH
                                (#xF586 . #x9BC1)	;CJK UNIFIED IDEOGRAPH
                                (#xF587 . #x9BC2)	;CJK UNIFIED IDEOGRAPH
                                (#xF588 . #x9BC3)	;CJK UNIFIED IDEOGRAPH
                                (#xF589 . #x9BC4)	;CJK UNIFIED IDEOGRAPH
                                (#xF58A . #x9BC5)	;CJK UNIFIED IDEOGRAPH
                                (#xF58B . #x9BC6)	;CJK UNIFIED IDEOGRAPH
                                (#xF58C . #x9BC7)	;CJK UNIFIED IDEOGRAPH
                                (#xF58D . #x9BC8)	;CJK UNIFIED IDEOGRAPH
                                (#xF58E . #x9BC9)	;CJK UNIFIED IDEOGRAPH
                                (#xF58F . #x9BCA)	;CJK UNIFIED IDEOGRAPH
                                (#xF590 . #x9BCB)	;CJK UNIFIED IDEOGRAPH
                                (#xF591 . #x9BCC)	;CJK UNIFIED IDEOGRAPH
                                (#xF592 . #x9BCD)	;CJK UNIFIED IDEOGRAPH
                                (#xF593 . #x9BCE)	;CJK UNIFIED IDEOGRAPH
                                (#xF594 . #x9BCF)	;CJK UNIFIED IDEOGRAPH
                                (#xF595 . #x9BD0)	;CJK UNIFIED IDEOGRAPH
                                (#xF596 . #x9BD1)	;CJK UNIFIED IDEOGRAPH
                                (#xF597 . #x9BD2)	;CJK UNIFIED IDEOGRAPH
                                (#xF598 . #x9BD3)	;CJK UNIFIED IDEOGRAPH
                                (#xF599 . #x9BD4)	;CJK UNIFIED IDEOGRAPH
                                (#xF59A . #x9BD5)	;CJK UNIFIED IDEOGRAPH
                                (#xF59B . #x9BD6)	;CJK UNIFIED IDEOGRAPH
                                (#xF59C . #x9BD7)	;CJK UNIFIED IDEOGRAPH
                                (#xF59D . #x9BD8)	;CJK UNIFIED IDEOGRAPH
                                (#xF59E . #x9BD9)	;CJK UNIFIED IDEOGRAPH
                                (#xF59F . #x9BDA)	;CJK UNIFIED IDEOGRAPH
                                (#xF5A0 . #x9BDB)	;CJK UNIFIED IDEOGRAPH
                                (#xF5A1 . #x9162)	;CJK UNIFIED IDEOGRAPH
                                (#xF5A2 . #x9161)	;CJK UNIFIED IDEOGRAPH
                                (#xF5A3 . #x9170)	;CJK UNIFIED IDEOGRAPH
                                (#xF5A4 . #x9169)	;CJK UNIFIED IDEOGRAPH
                                (#xF5A5 . #x916F)	;CJK UNIFIED IDEOGRAPH
                                (#xF5A6 . #x917D)	;CJK UNIFIED IDEOGRAPH
                                (#xF5A7 . #x917E)	;CJK UNIFIED IDEOGRAPH
                                (#xF5A8 . #x9172)	;CJK UNIFIED IDEOGRAPH
                                (#xF5A9 . #x9174)	;CJK UNIFIED IDEOGRAPH
                                (#xF5AA . #x9179)	;CJK UNIFIED IDEOGRAPH
                                (#xF5AB . #x918C)	;CJK UNIFIED IDEOGRAPH
                                (#xF5AC . #x9185)	;CJK UNIFIED IDEOGRAPH
                                (#xF5AD . #x9190)	;CJK UNIFIED IDEOGRAPH
                                (#xF5AE . #x918D)	;CJK UNIFIED IDEOGRAPH
                                (#xF5AF . #x9191)	;CJK UNIFIED IDEOGRAPH
                                (#xF5B0 . #x91A2)	;CJK UNIFIED IDEOGRAPH
                                (#xF5B1 . #x91A3)	;CJK UNIFIED IDEOGRAPH
                                (#xF5B2 . #x91AA)	;CJK UNIFIED IDEOGRAPH
                                (#xF5B3 . #x91AD)	;CJK UNIFIED IDEOGRAPH
                                (#xF5B4 . #x91AE)	;CJK UNIFIED IDEOGRAPH
                                (#xF5B5 . #x91AF)	;CJK UNIFIED IDEOGRAPH
                                (#xF5B6 . #x91B5)	;CJK UNIFIED IDEOGRAPH
                                (#xF5B7 . #x91B4)	;CJK UNIFIED IDEOGRAPH
                                (#xF5B8 . #x91BA)	;CJK UNIFIED IDEOGRAPH
                                (#xF5B9 . #x8C55)	;CJK UNIFIED IDEOGRAPH
                                (#xF5BA . #x9E7E)	;CJK UNIFIED IDEOGRAPH
                                (#xF5BB . #x8DB8)	;CJK UNIFIED IDEOGRAPH
                                (#xF5BC . #x8DEB)	;CJK UNIFIED IDEOGRAPH
                                (#xF5BD . #x8E05)	;CJK UNIFIED IDEOGRAPH
                                (#xF5BE . #x8E59)	;CJK UNIFIED IDEOGRAPH
                                (#xF5BF . #x8E69)	;CJK UNIFIED IDEOGRAPH
                                (#xF5C0 . #x8DB5)	;CJK UNIFIED IDEOGRAPH
                                (#xF5C1 . #x8DBF)	;CJK UNIFIED IDEOGRAPH
                                (#xF5C2 . #x8DBC)	;CJK UNIFIED IDEOGRAPH
                                (#xF5C3 . #x8DBA)	;CJK UNIFIED IDEOGRAPH
                                (#xF5C4 . #x8DC4)	;CJK UNIFIED IDEOGRAPH
                                (#xF5C5 . #x8DD6)	;CJK UNIFIED IDEOGRAPH
                                (#xF5C6 . #x8DD7)	;CJK UNIFIED IDEOGRAPH
                                (#xF5C7 . #x8DDA)	;CJK UNIFIED IDEOGRAPH
                                (#xF5C8 . #x8DDE)	;CJK UNIFIED IDEOGRAPH
                                (#xF5C9 . #x8DCE)	;CJK UNIFIED IDEOGRAPH
                                (#xF5CA . #x8DCF)	;CJK UNIFIED IDEOGRAPH
                                (#xF5CB . #x8DDB)	;CJK UNIFIED IDEOGRAPH
                                (#xF5CC . #x8DC6)	;CJK UNIFIED IDEOGRAPH
                                (#xF5CD . #x8DEC)	;CJK UNIFIED IDEOGRAPH
                                (#xF5CE . #x8DF7)	;CJK UNIFIED IDEOGRAPH
                                (#xF5CF . #x8DF8)	;CJK UNIFIED IDEOGRAPH
                                (#xF5D0 . #x8DE3)	;CJK UNIFIED IDEOGRAPH
                                (#xF5D1 . #x8DF9)	;CJK UNIFIED IDEOGRAPH
                                (#xF5D2 . #x8DFB)	;CJK UNIFIED IDEOGRAPH
                                (#xF5D3 . #x8DE4)	;CJK UNIFIED IDEOGRAPH
                                (#xF5D4 . #x8E09)	;CJK UNIFIED IDEOGRAPH
                                (#xF5D5 . #x8DFD)	;CJK UNIFIED IDEOGRAPH
                                (#xF5D6 . #x8E14)	;CJK UNIFIED IDEOGRAPH
                                (#xF5D7 . #x8E1D)	;CJK UNIFIED IDEOGRAPH
                                (#xF5D8 . #x8E1F)	;CJK UNIFIED IDEOGRAPH
                                (#xF5D9 . #x8E2C)	;CJK UNIFIED IDEOGRAPH
                                (#xF5DA . #x8E2E)	;CJK UNIFIED IDEOGRAPH
                                (#xF5DB . #x8E23)	;CJK UNIFIED IDEOGRAPH
                                (#xF5DC . #x8E2F)	;CJK UNIFIED IDEOGRAPH
                                (#xF5DD . #x8E3A)	;CJK UNIFIED IDEOGRAPH
                                (#xF5DE . #x8E40)	;CJK UNIFIED IDEOGRAPH
                                (#xF5DF . #x8E39)	;CJK UNIFIED IDEOGRAPH
                                (#xF5E0 . #x8E35)	;CJK UNIFIED IDEOGRAPH
                                (#xF5E1 . #x8E3D)	;CJK UNIFIED IDEOGRAPH
                                (#xF5E2 . #x8E31)	;CJK UNIFIED IDEOGRAPH
                                (#xF5E3 . #x8E49)	;CJK UNIFIED IDEOGRAPH
                                (#xF5E4 . #x8E41)	;CJK UNIFIED IDEOGRAPH
                                (#xF5E5 . #x8E42)	;CJK UNIFIED IDEOGRAPH
                                (#xF5E6 . #x8E51)	;CJK UNIFIED IDEOGRAPH
                                (#xF5E7 . #x8E52)	;CJK UNIFIED IDEOGRAPH
                                (#xF5E8 . #x8E4A)	;CJK UNIFIED IDEOGRAPH
                                (#xF5E9 . #x8E70)	;CJK UNIFIED IDEOGRAPH
                                (#xF5EA . #x8E76)	;CJK UNIFIED IDEOGRAPH
                                (#xF5EB . #x8E7C)	;CJK UNIFIED IDEOGRAPH
                                (#xF5EC . #x8E6F)	;CJK UNIFIED IDEOGRAPH
                                (#xF5ED . #x8E74)	;CJK UNIFIED IDEOGRAPH
                                (#xF5EE . #x8E85)	;CJK UNIFIED IDEOGRAPH
                                (#xF5EF . #x8E8F)	;CJK UNIFIED IDEOGRAPH
                                (#xF5F0 . #x8E94)	;CJK UNIFIED IDEOGRAPH
                                (#xF5F1 . #x8E90)	;CJK UNIFIED IDEOGRAPH
                                (#xF5F2 . #x8E9C)	;CJK UNIFIED IDEOGRAPH
                                (#xF5F3 . #x8E9E)	;CJK UNIFIED IDEOGRAPH
                                (#xF5F4 . #x8C78)	;CJK UNIFIED IDEOGRAPH
                                (#xF5F5 . #x8C82)	;CJK UNIFIED IDEOGRAPH
                                (#xF5F6 . #x8C8A)	;CJK UNIFIED IDEOGRAPH
                                (#xF5F7 . #x8C85)	;CJK UNIFIED IDEOGRAPH
                                (#xF5F8 . #x8C98)	;CJK UNIFIED IDEOGRAPH
                                (#xF5F9 . #x8C94)	;CJK UNIFIED IDEOGRAPH
                                (#xF5FA . #x659B)	;CJK UNIFIED IDEOGRAPH
                                (#xF5FB . #x89D6)	;CJK UNIFIED IDEOGRAPH
                                (#xF5FC . #x89DE)	;CJK UNIFIED IDEOGRAPH
                                (#xF5FD . #x89DA)	;CJK UNIFIED IDEOGRAPH
                                (#xF5FE . #x89DC)	;CJK UNIFIED IDEOGRAPH
                                (#xF640 . #x9BDC)	;CJK UNIFIED IDEOGRAPH
                                (#xF641 . #x9BDD)	;CJK UNIFIED IDEOGRAPH
                                (#xF642 . #x9BDE)	;CJK UNIFIED IDEOGRAPH
                                (#xF643 . #x9BDF)	;CJK UNIFIED IDEOGRAPH
                                (#xF644 . #x9BE0)	;CJK UNIFIED IDEOGRAPH
                                (#xF645 . #x9BE1)	;CJK UNIFIED IDEOGRAPH
                                (#xF646 . #x9BE2)	;CJK UNIFIED IDEOGRAPH
                                (#xF647 . #x9BE3)	;CJK UNIFIED IDEOGRAPH
                                (#xF648 . #x9BE4)	;CJK UNIFIED IDEOGRAPH
                                (#xF649 . #x9BE5)	;CJK UNIFIED IDEOGRAPH
                                (#xF64A . #x9BE6)	;CJK UNIFIED IDEOGRAPH
                                (#xF64B . #x9BE7)	;CJK UNIFIED IDEOGRAPH
                                (#xF64C . #x9BE8)	;CJK UNIFIED IDEOGRAPH
                                (#xF64D . #x9BE9)	;CJK UNIFIED IDEOGRAPH
                                (#xF64E . #x9BEA)	;CJK UNIFIED IDEOGRAPH
                                (#xF64F . #x9BEB)	;CJK UNIFIED IDEOGRAPH
                                (#xF650 . #x9BEC)	;CJK UNIFIED IDEOGRAPH
                                (#xF651 . #x9BED)	;CJK UNIFIED IDEOGRAPH
                                (#xF652 . #x9BEE)	;CJK UNIFIED IDEOGRAPH
                                (#xF653 . #x9BEF)	;CJK UNIFIED IDEOGRAPH
                                (#xF654 . #x9BF0)	;CJK UNIFIED IDEOGRAPH
                                (#xF655 . #x9BF1)	;CJK UNIFIED IDEOGRAPH
                                (#xF656 . #x9BF2)	;CJK UNIFIED IDEOGRAPH
                                (#xF657 . #x9BF3)	;CJK UNIFIED IDEOGRAPH
                                (#xF658 . #x9BF4)	;CJK UNIFIED IDEOGRAPH
                                (#xF659 . #x9BF5)	;CJK UNIFIED IDEOGRAPH
                                (#xF65A . #x9BF6)	;CJK UNIFIED IDEOGRAPH
                                (#xF65B . #x9BF7)	;CJK UNIFIED IDEOGRAPH
                                (#xF65C . #x9BF8)	;CJK UNIFIED IDEOGRAPH
                                (#xF65D . #x9BF9)	;CJK UNIFIED IDEOGRAPH
                                (#xF65E . #x9BFA)	;CJK UNIFIED IDEOGRAPH
                                (#xF65F . #x9BFB)	;CJK UNIFIED IDEOGRAPH
                                (#xF660 . #x9BFC)	;CJK UNIFIED IDEOGRAPH
                                (#xF661 . #x9BFD)	;CJK UNIFIED IDEOGRAPH
                                (#xF662 . #x9BFE)	;CJK UNIFIED IDEOGRAPH
                                (#xF663 . #x9BFF)	;CJK UNIFIED IDEOGRAPH
                                (#xF664 . #x9C00)	;CJK UNIFIED IDEOGRAPH
                                (#xF665 . #x9C01)	;CJK UNIFIED IDEOGRAPH
                                (#xF666 . #x9C02)	;CJK UNIFIED IDEOGRAPH
                                (#xF667 . #x9C03)	;CJK UNIFIED IDEOGRAPH
                                (#xF668 . #x9C04)	;CJK UNIFIED IDEOGRAPH
                                (#xF669 . #x9C05)	;CJK UNIFIED IDEOGRAPH
                                (#xF66A . #x9C06)	;CJK UNIFIED IDEOGRAPH
                                (#xF66B . #x9C07)	;CJK UNIFIED IDEOGRAPH
                                (#xF66C . #x9C08)	;CJK UNIFIED IDEOGRAPH
                                (#xF66D . #x9C09)	;CJK UNIFIED IDEOGRAPH
                                (#xF66E . #x9C0A)	;CJK UNIFIED IDEOGRAPH
                                (#xF66F . #x9C0B)	;CJK UNIFIED IDEOGRAPH
                                (#xF670 . #x9C0C)	;CJK UNIFIED IDEOGRAPH
                                (#xF671 . #x9C0D)	;CJK UNIFIED IDEOGRAPH
                                (#xF672 . #x9C0E)	;CJK UNIFIED IDEOGRAPH
                                (#xF673 . #x9C0F)	;CJK UNIFIED IDEOGRAPH
                                (#xF674 . #x9C10)	;CJK UNIFIED IDEOGRAPH
                                (#xF675 . #x9C11)	;CJK UNIFIED IDEOGRAPH
                                (#xF676 . #x9C12)	;CJK UNIFIED IDEOGRAPH
                                (#xF677 . #x9C13)	;CJK UNIFIED IDEOGRAPH
                                (#xF678 . #x9C14)	;CJK UNIFIED IDEOGRAPH
                                (#xF679 . #x9C15)	;CJK UNIFIED IDEOGRAPH
                                (#xF67A . #x9C16)	;CJK UNIFIED IDEOGRAPH
                                (#xF67B . #x9C17)	;CJK UNIFIED IDEOGRAPH
                                (#xF67C . #x9C18)	;CJK UNIFIED IDEOGRAPH
                                (#xF67D . #x9C19)	;CJK UNIFIED IDEOGRAPH
                                (#xF67E . #x9C1A)	;CJK UNIFIED IDEOGRAPH
                                (#xF680 . #x9C1B)	;CJK UNIFIED IDEOGRAPH
                                (#xF681 . #x9C1C)	;CJK UNIFIED IDEOGRAPH
                                (#xF682 . #x9C1D)	;CJK UNIFIED IDEOGRAPH
                                (#xF683 . #x9C1E)	;CJK UNIFIED IDEOGRAPH
                                (#xF684 . #x9C1F)	;CJK UNIFIED IDEOGRAPH
                                (#xF685 . #x9C20)	;CJK UNIFIED IDEOGRAPH
                                (#xF686 . #x9C21)	;CJK UNIFIED IDEOGRAPH
                                (#xF687 . #x9C22)	;CJK UNIFIED IDEOGRAPH
                                (#xF688 . #x9C23)	;CJK UNIFIED IDEOGRAPH
                                (#xF689 . #x9C24)	;CJK UNIFIED IDEOGRAPH
                                (#xF68A . #x9C25)	;CJK UNIFIED IDEOGRAPH
                                (#xF68B . #x9C26)	;CJK UNIFIED IDEOGRAPH
                                (#xF68C . #x9C27)	;CJK UNIFIED IDEOGRAPH
                                (#xF68D . #x9C28)	;CJK UNIFIED IDEOGRAPH
                                (#xF68E . #x9C29)	;CJK UNIFIED IDEOGRAPH
                                (#xF68F . #x9C2A)	;CJK UNIFIED IDEOGRAPH
                                (#xF690 . #x9C2B)	;CJK UNIFIED IDEOGRAPH
                                (#xF691 . #x9C2C)	;CJK UNIFIED IDEOGRAPH
                                (#xF692 . #x9C2D)	;CJK UNIFIED IDEOGRAPH
                                (#xF693 . #x9C2E)	;CJK UNIFIED IDEOGRAPH
                                (#xF694 . #x9C2F)	;CJK UNIFIED IDEOGRAPH
                                (#xF695 . #x9C30)	;CJK UNIFIED IDEOGRAPH
                                (#xF696 . #x9C31)	;CJK UNIFIED IDEOGRAPH
                                (#xF697 . #x9C32)	;CJK UNIFIED IDEOGRAPH
                                (#xF698 . #x9C33)	;CJK UNIFIED IDEOGRAPH
                                (#xF699 . #x9C34)	;CJK UNIFIED IDEOGRAPH
                                (#xF69A . #x9C35)	;CJK UNIFIED IDEOGRAPH
                                (#xF69B . #x9C36)	;CJK UNIFIED IDEOGRAPH
                                (#xF69C . #x9C37)	;CJK UNIFIED IDEOGRAPH
                                (#xF69D . #x9C38)	;CJK UNIFIED IDEOGRAPH
                                (#xF69E . #x9C39)	;CJK UNIFIED IDEOGRAPH
                                (#xF69F . #x9C3A)	;CJK UNIFIED IDEOGRAPH
                                (#xF6A0 . #x9C3B)	;CJK UNIFIED IDEOGRAPH
                                (#xF6A1 . #x89E5)	;CJK UNIFIED IDEOGRAPH
                                (#xF6A2 . #x89EB)	;CJK UNIFIED IDEOGRAPH
                                (#xF6A3 . #x89EF)	;CJK UNIFIED IDEOGRAPH
                                (#xF6A4 . #x8A3E)	;CJK UNIFIED IDEOGRAPH
                                (#xF6A5 . #x8B26)	;CJK UNIFIED IDEOGRAPH
                                (#xF6A6 . #x9753)	;CJK UNIFIED IDEOGRAPH
                                (#xF6A7 . #x96E9)	;CJK UNIFIED IDEOGRAPH
                                (#xF6A8 . #x96F3)	;CJK UNIFIED IDEOGRAPH
                                (#xF6A9 . #x96EF)	;CJK UNIFIED IDEOGRAPH
                                (#xF6AA . #x9706)	;CJK UNIFIED IDEOGRAPH
                                (#xF6AB . #x9701)	;CJK UNIFIED IDEOGRAPH
                                (#xF6AC . #x9708)	;CJK UNIFIED IDEOGRAPH
                                (#xF6AD . #x970F)	;CJK UNIFIED IDEOGRAPH
                                (#xF6AE . #x970E)	;CJK UNIFIED IDEOGRAPH
                                (#xF6AF . #x972A)	;CJK UNIFIED IDEOGRAPH
                                (#xF6B0 . #x972D)	;CJK UNIFIED IDEOGRAPH
                                (#xF6B1 . #x9730)	;CJK UNIFIED IDEOGRAPH
                                (#xF6B2 . #x973E)	;CJK UNIFIED IDEOGRAPH
                                (#xF6B3 . #x9F80)	;CJK UNIFIED IDEOGRAPH
                                (#xF6B4 . #x9F83)	;CJK UNIFIED IDEOGRAPH
                                (#xF6B5 . #x9F85)	;CJK UNIFIED IDEOGRAPH
                                (#xF6B6 . #x9F86)	;CJK UNIFIED IDEOGRAPH
                                (#xF6B7 . #x9F87)	;CJK UNIFIED IDEOGRAPH
                                (#xF6B8 . #x9F88)	;CJK UNIFIED IDEOGRAPH
                                (#xF6B9 . #x9F89)	;CJK UNIFIED IDEOGRAPH
                                (#xF6BA . #x9F8A)	;CJK UNIFIED IDEOGRAPH
                                (#xF6BB . #x9F8C)	;CJK UNIFIED IDEOGRAPH
                                (#xF6BC . #x9EFE)	;CJK UNIFIED IDEOGRAPH
                                (#xF6BD . #x9F0B)	;CJK UNIFIED IDEOGRAPH
                                (#xF6BE . #x9F0D)	;CJK UNIFIED IDEOGRAPH
                                (#xF6BF . #x96B9)	;CJK UNIFIED IDEOGRAPH
                                (#xF6C0 . #x96BC)	;CJK UNIFIED IDEOGRAPH
                                (#xF6C1 . #x96BD)	;CJK UNIFIED IDEOGRAPH
                                (#xF6C2 . #x96CE)	;CJK UNIFIED IDEOGRAPH
                                (#xF6C3 . #x96D2)	;CJK UNIFIED IDEOGRAPH
                                (#xF6C4 . #x77BF)	;CJK UNIFIED IDEOGRAPH
                                (#xF6C5 . #x96E0)	;CJK UNIFIED IDEOGRAPH
                                (#xF6C6 . #x928E)	;CJK UNIFIED IDEOGRAPH
                                (#xF6C7 . #x92AE)	;CJK UNIFIED IDEOGRAPH
                                (#xF6C8 . #x92C8)	;CJK UNIFIED IDEOGRAPH
                                (#xF6C9 . #x933E)	;CJK UNIFIED IDEOGRAPH
                                (#xF6CA . #x936A)	;CJK UNIFIED IDEOGRAPH
                                (#xF6CB . #x93CA)	;CJK UNIFIED IDEOGRAPH
                                (#xF6CC . #x938F)	;CJK UNIFIED IDEOGRAPH
                                (#xF6CD . #x943E)	;CJK UNIFIED IDEOGRAPH
                                (#xF6CE . #x946B)	;CJK UNIFIED IDEOGRAPH
                                (#xF6CF . #x9C7F)	;CJK UNIFIED IDEOGRAPH
                                (#xF6D0 . #x9C82)	;CJK UNIFIED IDEOGRAPH
                                (#xF6D1 . #x9C85)	;CJK UNIFIED IDEOGRAPH
                                (#xF6D2 . #x9C86)	;CJK UNIFIED IDEOGRAPH
                                (#xF6D3 . #x9C87)	;CJK UNIFIED IDEOGRAPH
                                (#xF6D4 . #x9C88)	;CJK UNIFIED IDEOGRAPH
                                (#xF6D5 . #x7A23)	;CJK UNIFIED IDEOGRAPH
                                (#xF6D6 . #x9C8B)	;CJK UNIFIED IDEOGRAPH
                                (#xF6D7 . #x9C8E)	;CJK UNIFIED IDEOGRAPH
                                (#xF6D8 . #x9C90)	;CJK UNIFIED IDEOGRAPH
                                (#xF6D9 . #x9C91)	;CJK UNIFIED IDEOGRAPH
                                (#xF6DA . #x9C92)	;CJK UNIFIED IDEOGRAPH
                                (#xF6DB . #x9C94)	;CJK UNIFIED IDEOGRAPH
                                (#xF6DC . #x9C95)	;CJK UNIFIED IDEOGRAPH
                                (#xF6DD . #x9C9A)	;CJK UNIFIED IDEOGRAPH
                                (#xF6DE . #x9C9B)	;CJK UNIFIED IDEOGRAPH
                                (#xF6DF . #x9C9E)	;CJK UNIFIED IDEOGRAPH
                                (#xF6E0 . #x9C9F)	;CJK UNIFIED IDEOGRAPH
                                (#xF6E1 . #x9CA0)	;CJK UNIFIED IDEOGRAPH
                                (#xF6E2 . #x9CA1)	;CJK UNIFIED IDEOGRAPH
                                (#xF6E3 . #x9CA2)	;CJK UNIFIED IDEOGRAPH
                                (#xF6E4 . #x9CA3)	;CJK UNIFIED IDEOGRAPH
                                (#xF6E5 . #x9CA5)	;CJK UNIFIED IDEOGRAPH
                                (#xF6E6 . #x9CA6)	;CJK UNIFIED IDEOGRAPH
                                (#xF6E7 . #x9CA7)	;CJK UNIFIED IDEOGRAPH
                                (#xF6E8 . #x9CA8)	;CJK UNIFIED IDEOGRAPH
                                (#xF6E9 . #x9CA9)	;CJK UNIFIED IDEOGRAPH
                                (#xF6EA . #x9CAB)	;CJK UNIFIED IDEOGRAPH
                                (#xF6EB . #x9CAD)	;CJK UNIFIED IDEOGRAPH
                                (#xF6EC . #x9CAE)	;CJK UNIFIED IDEOGRAPH
                                (#xF6ED . #x9CB0)	;CJK UNIFIED IDEOGRAPH
                                (#xF6EE . #x9CB1)	;CJK UNIFIED IDEOGRAPH
                                (#xF6EF . #x9CB2)	;CJK UNIFIED IDEOGRAPH
                                (#xF6F0 . #x9CB3)	;CJK UNIFIED IDEOGRAPH
                                (#xF6F1 . #x9CB4)	;CJK UNIFIED IDEOGRAPH
                                (#xF6F2 . #x9CB5)	;CJK UNIFIED IDEOGRAPH
                                (#xF6F3 . #x9CB6)	;CJK UNIFIED IDEOGRAPH
                                (#xF6F4 . #x9CB7)	;CJK UNIFIED IDEOGRAPH
                                (#xF6F5 . #x9CBA)	;CJK UNIFIED IDEOGRAPH
                                (#xF6F6 . #x9CBB)	;CJK UNIFIED IDEOGRAPH
                                (#xF6F7 . #x9CBC)	;CJK UNIFIED IDEOGRAPH
                                (#xF6F8 . #x9CBD)	;CJK UNIFIED IDEOGRAPH
                                (#xF6F9 . #x9CC4)	;CJK UNIFIED IDEOGRAPH
                                (#xF6FA . #x9CC5)	;CJK UNIFIED IDEOGRAPH
                                (#xF6FB . #x9CC6)	;CJK UNIFIED IDEOGRAPH
                                (#xF6FC . #x9CC7)	;CJK UNIFIED IDEOGRAPH
                                (#xF6FD . #x9CCA)	;CJK UNIFIED IDEOGRAPH
                                (#xF6FE . #x9CCB)	;CJK UNIFIED IDEOGRAPH
                                (#xF740 . #x9C3C)	;CJK UNIFIED IDEOGRAPH
                                (#xF741 . #x9C3D)	;CJK UNIFIED IDEOGRAPH
                                (#xF742 . #x9C3E)	;CJK UNIFIED IDEOGRAPH
                                (#xF743 . #x9C3F)	;CJK UNIFIED IDEOGRAPH
                                (#xF744 . #x9C40)	;CJK UNIFIED IDEOGRAPH
                                (#xF745 . #x9C41)	;CJK UNIFIED IDEOGRAPH
                                (#xF746 . #x9C42)	;CJK UNIFIED IDEOGRAPH
                                (#xF747 . #x9C43)	;CJK UNIFIED IDEOGRAPH
                                (#xF748 . #x9C44)	;CJK UNIFIED IDEOGRAPH
                                (#xF749 . #x9C45)	;CJK UNIFIED IDEOGRAPH
                                (#xF74A . #x9C46)	;CJK UNIFIED IDEOGRAPH
                                (#xF74B . #x9C47)	;CJK UNIFIED IDEOGRAPH
                                (#xF74C . #x9C48)	;CJK UNIFIED IDEOGRAPH
                                (#xF74D . #x9C49)	;CJK UNIFIED IDEOGRAPH
                                (#xF74E . #x9C4A)	;CJK UNIFIED IDEOGRAPH
                                (#xF74F . #x9C4B)	;CJK UNIFIED IDEOGRAPH
                                (#xF750 . #x9C4C)	;CJK UNIFIED IDEOGRAPH
                                (#xF751 . #x9C4D)	;CJK UNIFIED IDEOGRAPH
                                (#xF752 . #x9C4E)	;CJK UNIFIED IDEOGRAPH
                                (#xF753 . #x9C4F)	;CJK UNIFIED IDEOGRAPH
                                (#xF754 . #x9C50)	;CJK UNIFIED IDEOGRAPH
                                (#xF755 . #x9C51)	;CJK UNIFIED IDEOGRAPH
                                (#xF756 . #x9C52)	;CJK UNIFIED IDEOGRAPH
                                (#xF757 . #x9C53)	;CJK UNIFIED IDEOGRAPH
                                (#xF758 . #x9C54)	;CJK UNIFIED IDEOGRAPH
                                (#xF759 . #x9C55)	;CJK UNIFIED IDEOGRAPH
                                (#xF75A . #x9C56)	;CJK UNIFIED IDEOGRAPH
                                (#xF75B . #x9C57)	;CJK UNIFIED IDEOGRAPH
                                (#xF75C . #x9C58)	;CJK UNIFIED IDEOGRAPH
                                (#xF75D . #x9C59)	;CJK UNIFIED IDEOGRAPH
                                (#xF75E . #x9C5A)	;CJK UNIFIED IDEOGRAPH
                                (#xF75F . #x9C5B)	;CJK UNIFIED IDEOGRAPH
                                (#xF760 . #x9C5C)	;CJK UNIFIED IDEOGRAPH
                                (#xF761 . #x9C5D)	;CJK UNIFIED IDEOGRAPH
                                (#xF762 . #x9C5E)	;CJK UNIFIED IDEOGRAPH
                                (#xF763 . #x9C5F)	;CJK UNIFIED IDEOGRAPH
                                (#xF764 . #x9C60)	;CJK UNIFIED IDEOGRAPH
                                (#xF765 . #x9C61)	;CJK UNIFIED IDEOGRAPH
                                (#xF766 . #x9C62)	;CJK UNIFIED IDEOGRAPH
                                (#xF767 . #x9C63)	;CJK UNIFIED IDEOGRAPH
                                (#xF768 . #x9C64)	;CJK UNIFIED IDEOGRAPH
                                (#xF769 . #x9C65)	;CJK UNIFIED IDEOGRAPH
                                (#xF76A . #x9C66)	;CJK UNIFIED IDEOGRAPH
                                (#xF76B . #x9C67)	;CJK UNIFIED IDEOGRAPH
                                (#xF76C . #x9C68)	;CJK UNIFIED IDEOGRAPH
                                (#xF76D . #x9C69)	;CJK UNIFIED IDEOGRAPH
                                (#xF76E . #x9C6A)	;CJK UNIFIED IDEOGRAPH
                                (#xF76F . #x9C6B)	;CJK UNIFIED IDEOGRAPH
                                (#xF770 . #x9C6C)	;CJK UNIFIED IDEOGRAPH
                                (#xF771 . #x9C6D)	;CJK UNIFIED IDEOGRAPH
                                (#xF772 . #x9C6E)	;CJK UNIFIED IDEOGRAPH
                                (#xF773 . #x9C6F)	;CJK UNIFIED IDEOGRAPH
                                (#xF774 . #x9C70)	;CJK UNIFIED IDEOGRAPH
                                (#xF775 . #x9C71)	;CJK UNIFIED IDEOGRAPH
                                (#xF776 . #x9C72)	;CJK UNIFIED IDEOGRAPH
                                (#xF777 . #x9C73)	;CJK UNIFIED IDEOGRAPH
                                (#xF778 . #x9C74)	;CJK UNIFIED IDEOGRAPH
                                (#xF779 . #x9C75)	;CJK UNIFIED IDEOGRAPH
                                (#xF77A . #x9C76)	;CJK UNIFIED IDEOGRAPH
                                (#xF77B . #x9C77)	;CJK UNIFIED IDEOGRAPH
                                (#xF77C . #x9C78)	;CJK UNIFIED IDEOGRAPH
                                (#xF77D . #x9C79)	;CJK UNIFIED IDEOGRAPH
                                (#xF77E . #x9C7A)	;CJK UNIFIED IDEOGRAPH
                                (#xF780 . #x9C7B)	;CJK UNIFIED IDEOGRAPH
                                (#xF781 . #x9C7D)	;CJK UNIFIED IDEOGRAPH
                                (#xF782 . #x9C7E)	;CJK UNIFIED IDEOGRAPH
                                (#xF783 . #x9C80)	;CJK UNIFIED IDEOGRAPH
                                (#xF784 . #x9C83)	;CJK UNIFIED IDEOGRAPH
                                (#xF785 . #x9C84)	;CJK UNIFIED IDEOGRAPH
                                (#xF786 . #x9C89)	;CJK UNIFIED IDEOGRAPH
                                (#xF787 . #x9C8A)	;CJK UNIFIED IDEOGRAPH
                                (#xF788 . #x9C8C)	;CJK UNIFIED IDEOGRAPH
                                (#xF789 . #x9C8F)	;CJK UNIFIED IDEOGRAPH
                                (#xF78A . #x9C93)	;CJK UNIFIED IDEOGRAPH
                                (#xF78B . #x9C96)	;CJK UNIFIED IDEOGRAPH
                                (#xF78C . #x9C97)	;CJK UNIFIED IDEOGRAPH
                                (#xF78D . #x9C98)	;CJK UNIFIED IDEOGRAPH
                                (#xF78E . #x9C99)	;CJK UNIFIED IDEOGRAPH
                                (#xF78F . #x9C9D)	;CJK UNIFIED IDEOGRAPH
                                (#xF790 . #x9CAA)	;CJK UNIFIED IDEOGRAPH
                                (#xF791 . #x9CAC)	;CJK UNIFIED IDEOGRAPH
                                (#xF792 . #x9CAF)	;CJK UNIFIED IDEOGRAPH
                                (#xF793 . #x9CB9)	;CJK UNIFIED IDEOGRAPH
                                (#xF794 . #x9CBE)	;CJK UNIFIED IDEOGRAPH
                                (#xF795 . #x9CBF)	;CJK UNIFIED IDEOGRAPH
                                (#xF796 . #x9CC0)	;CJK UNIFIED IDEOGRAPH
                                (#xF797 . #x9CC1)	;CJK UNIFIED IDEOGRAPH
                                (#xF798 . #x9CC2)	;CJK UNIFIED IDEOGRAPH
                                (#xF799 . #x9CC8)	;CJK UNIFIED IDEOGRAPH
                                (#xF79A . #x9CC9)	;CJK UNIFIED IDEOGRAPH
                                (#xF79B . #x9CD1)	;CJK UNIFIED IDEOGRAPH
                                (#xF79C . #x9CD2)	;CJK UNIFIED IDEOGRAPH
                                (#xF79D . #x9CDA)	;CJK UNIFIED IDEOGRAPH
                                (#xF79E . #x9CDB)	;CJK UNIFIED IDEOGRAPH
                                (#xF79F . #x9CE0)	;CJK UNIFIED IDEOGRAPH
                                (#xF7A0 . #x9CE1)	;CJK UNIFIED IDEOGRAPH
                                (#xF7A1 . #x9CCC)	;CJK UNIFIED IDEOGRAPH
                                (#xF7A2 . #x9CCD)	;CJK UNIFIED IDEOGRAPH
                                (#xF7A3 . #x9CCE)	;CJK UNIFIED IDEOGRAPH
                                (#xF7A4 . #x9CCF)	;CJK UNIFIED IDEOGRAPH
                                (#xF7A5 . #x9CD0)	;CJK UNIFIED IDEOGRAPH
                                (#xF7A6 . #x9CD3)	;CJK UNIFIED IDEOGRAPH
                                (#xF7A7 . #x9CD4)	;CJK UNIFIED IDEOGRAPH
                                (#xF7A8 . #x9CD5)	;CJK UNIFIED IDEOGRAPH
                                (#xF7A9 . #x9CD7)	;CJK UNIFIED IDEOGRAPH
                                (#xF7AA . #x9CD8)	;CJK UNIFIED IDEOGRAPH
                                (#xF7AB . #x9CD9)	;CJK UNIFIED IDEOGRAPH
                                (#xF7AC . #x9CDC)	;CJK UNIFIED IDEOGRAPH
                                (#xF7AD . #x9CDD)	;CJK UNIFIED IDEOGRAPH
                                (#xF7AE . #x9CDF)	;CJK UNIFIED IDEOGRAPH
                                (#xF7AF . #x9CE2)	;CJK UNIFIED IDEOGRAPH
                                (#xF7B0 . #x977C)	;CJK UNIFIED IDEOGRAPH
                                (#xF7B1 . #x9785)	;CJK UNIFIED IDEOGRAPH
                                (#xF7B2 . #x9791)	;CJK UNIFIED IDEOGRAPH
                                (#xF7B3 . #x9792)	;CJK UNIFIED IDEOGRAPH
                                (#xF7B4 . #x9794)	;CJK UNIFIED IDEOGRAPH
                                (#xF7B5 . #x97AF)	;CJK UNIFIED IDEOGRAPH
                                (#xF7B6 . #x97AB)	;CJK UNIFIED IDEOGRAPH
                                (#xF7B7 . #x97A3)	;CJK UNIFIED IDEOGRAPH
                                (#xF7B8 . #x97B2)	;CJK UNIFIED IDEOGRAPH
                                (#xF7B9 . #x97B4)	;CJK UNIFIED IDEOGRAPH
                                (#xF7BA . #x9AB1)	;CJK UNIFIED IDEOGRAPH
                                (#xF7BB . #x9AB0)	;CJK UNIFIED IDEOGRAPH
                                (#xF7BC . #x9AB7)	;CJK UNIFIED IDEOGRAPH
                                (#xF7BD . #x9E58)	;CJK UNIFIED IDEOGRAPH
                                (#xF7BE . #x9AB6)	;CJK UNIFIED IDEOGRAPH
                                (#xF7BF . #x9ABA)	;CJK UNIFIED IDEOGRAPH
                                (#xF7C0 . #x9ABC)	;CJK UNIFIED IDEOGRAPH
                                (#xF7C1 . #x9AC1)	;CJK UNIFIED IDEOGRAPH
                                (#xF7C2 . #x9AC0)	;CJK UNIFIED IDEOGRAPH
                                (#xF7C3 . #x9AC5)	;CJK UNIFIED IDEOGRAPH
                                (#xF7C4 . #x9AC2)	;CJK UNIFIED IDEOGRAPH
                                (#xF7C5 . #x9ACB)	;CJK UNIFIED IDEOGRAPH
                                (#xF7C6 . #x9ACC)	;CJK UNIFIED IDEOGRAPH
                                (#xF7C7 . #x9AD1)	;CJK UNIFIED IDEOGRAPH
                                (#xF7C8 . #x9B45)	;CJK UNIFIED IDEOGRAPH
                                (#xF7C9 . #x9B43)	;CJK UNIFIED IDEOGRAPH
                                (#xF7CA . #x9B47)	;CJK UNIFIED IDEOGRAPH
                                (#xF7CB . #x9B49)	;CJK UNIFIED IDEOGRAPH
                                (#xF7CC . #x9B48)	;CJK UNIFIED IDEOGRAPH
                                (#xF7CD . #x9B4D)	;CJK UNIFIED IDEOGRAPH
                                (#xF7CE . #x9B51)	;CJK UNIFIED IDEOGRAPH
                                (#xF7CF . #x98E8)	;CJK UNIFIED IDEOGRAPH
                                (#xF7D0 . #x990D)	;CJK UNIFIED IDEOGRAPH
                                (#xF7D1 . #x992E)	;CJK UNIFIED IDEOGRAPH
                                (#xF7D2 . #x9955)	;CJK UNIFIED IDEOGRAPH
                                (#xF7D3 . #x9954)	;CJK UNIFIED IDEOGRAPH
                                (#xF7D4 . #x9ADF)	;CJK UNIFIED IDEOGRAPH
                                (#xF7D5 . #x9AE1)	;CJK UNIFIED IDEOGRAPH
                                (#xF7D6 . #x9AE6)	;CJK UNIFIED IDEOGRAPH
                                (#xF7D7 . #x9AEF)	;CJK UNIFIED IDEOGRAPH
                                (#xF7D8 . #x9AEB)	;CJK UNIFIED IDEOGRAPH
                                (#xF7D9 . #x9AFB)	;CJK UNIFIED IDEOGRAPH
                                (#xF7DA . #x9AED)	;CJK UNIFIED IDEOGRAPH
                                (#xF7DB . #x9AF9)	;CJK UNIFIED IDEOGRAPH
                                (#xF7DC . #x9B08)	;CJK UNIFIED IDEOGRAPH
                                (#xF7DD . #x9B0F)	;CJK UNIFIED IDEOGRAPH
                                (#xF7DE . #x9B13)	;CJK UNIFIED IDEOGRAPH
                                (#xF7DF . #x9B1F)	;CJK UNIFIED IDEOGRAPH
                                (#xF7E0 . #x9B23)	;CJK UNIFIED IDEOGRAPH
                                (#xF7E1 . #x9EBD)	;CJK UNIFIED IDEOGRAPH
                                (#xF7E2 . #x9EBE)	;CJK UNIFIED IDEOGRAPH
                                (#xF7E3 . #x7E3B)	;CJK UNIFIED IDEOGRAPH
                                (#xF7E4 . #x9E82)	;CJK UNIFIED IDEOGRAPH
                                (#xF7E5 . #x9E87)	;CJK UNIFIED IDEOGRAPH
                                (#xF7E6 . #x9E88)	;CJK UNIFIED IDEOGRAPH
                                (#xF7E7 . #x9E8B)	;CJK UNIFIED IDEOGRAPH
                                (#xF7E8 . #x9E92)	;CJK UNIFIED IDEOGRAPH
                                (#xF7E9 . #x93D6)	;CJK UNIFIED IDEOGRAPH
                                (#xF7EA . #x9E9D)	;CJK UNIFIED IDEOGRAPH
                                (#xF7EB . #x9E9F)	;CJK UNIFIED IDEOGRAPH
                                (#xF7EC . #x9EDB)	;CJK UNIFIED IDEOGRAPH
                                (#xF7ED . #x9EDC)	;CJK UNIFIED IDEOGRAPH
                                (#xF7EE . #x9EDD)	;CJK UNIFIED IDEOGRAPH
                                (#xF7EF . #x9EE0)	;CJK UNIFIED IDEOGRAPH
                                (#xF7F0 . #x9EDF)	;CJK UNIFIED IDEOGRAPH
                                (#xF7F1 . #x9EE2)	;CJK UNIFIED IDEOGRAPH
                                (#xF7F2 . #x9EE9)	;CJK UNIFIED IDEOGRAPH
                                (#xF7F3 . #x9EE7)	;CJK UNIFIED IDEOGRAPH
                                (#xF7F4 . #x9EE5)	;CJK UNIFIED IDEOGRAPH
                                (#xF7F5 . #x9EEA)	;CJK UNIFIED IDEOGRAPH
                                (#xF7F6 . #x9EEF)	;CJK UNIFIED IDEOGRAPH
                                (#xF7F7 . #x9F22)	;CJK UNIFIED IDEOGRAPH
                                (#xF7F8 . #x9F2C)	;CJK UNIFIED IDEOGRAPH
                                (#xF7F9 . #x9F2F)	;CJK UNIFIED IDEOGRAPH
                                (#xF7FA . #x9F39)	;CJK UNIFIED IDEOGRAPH
                                (#xF7FB . #x9F37)	;CJK UNIFIED IDEOGRAPH
                                (#xF7FC . #x9F3D)	;CJK UNIFIED IDEOGRAPH
                                (#xF7FD . #x9F3E)	;CJK UNIFIED IDEOGRAPH
                                (#xF7FE . #x9F44)	;CJK UNIFIED IDEOGRAPH
                                (#xF840 . #x9CE3)	;CJK UNIFIED IDEOGRAPH
                                (#xF841 . #x9CE4)	;CJK UNIFIED IDEOGRAPH
                                (#xF842 . #x9CE5)	;CJK UNIFIED IDEOGRAPH
                                (#xF843 . #x9CE6)	;CJK UNIFIED IDEOGRAPH
                                (#xF844 . #x9CE7)	;CJK UNIFIED IDEOGRAPH
                                (#xF845 . #x9CE8)	;CJK UNIFIED IDEOGRAPH
                                (#xF846 . #x9CE9)	;CJK UNIFIED IDEOGRAPH
                                (#xF847 . #x9CEA)	;CJK UNIFIED IDEOGRAPH
                                (#xF848 . #x9CEB)	;CJK UNIFIED IDEOGRAPH
                                (#xF849 . #x9CEC)	;CJK UNIFIED IDEOGRAPH
                                (#xF84A . #x9CED)	;CJK UNIFIED IDEOGRAPH
                                (#xF84B . #x9CEE)	;CJK UNIFIED IDEOGRAPH
                                (#xF84C . #x9CEF)	;CJK UNIFIED IDEOGRAPH
                                (#xF84D . #x9CF0)	;CJK UNIFIED IDEOGRAPH
                                (#xF84E . #x9CF1)	;CJK UNIFIED IDEOGRAPH
                                (#xF84F . #x9CF2)	;CJK UNIFIED IDEOGRAPH
                                (#xF850 . #x9CF3)	;CJK UNIFIED IDEOGRAPH
                                (#xF851 . #x9CF4)	;CJK UNIFIED IDEOGRAPH
                                (#xF852 . #x9CF5)	;CJK UNIFIED IDEOGRAPH
                                (#xF853 . #x9CF6)	;CJK UNIFIED IDEOGRAPH
                                (#xF854 . #x9CF7)	;CJK UNIFIED IDEOGRAPH
                                (#xF855 . #x9CF8)	;CJK UNIFIED IDEOGRAPH
                                (#xF856 . #x9CF9)	;CJK UNIFIED IDEOGRAPH
                                (#xF857 . #x9CFA)	;CJK UNIFIED IDEOGRAPH
                                (#xF858 . #x9CFB)	;CJK UNIFIED IDEOGRAPH
                                (#xF859 . #x9CFC)	;CJK UNIFIED IDEOGRAPH
                                (#xF85A . #x9CFD)	;CJK UNIFIED IDEOGRAPH
                                (#xF85B . #x9CFE)	;CJK UNIFIED IDEOGRAPH
                                (#xF85C . #x9CFF)	;CJK UNIFIED IDEOGRAPH
                                (#xF85D . #x9D00)	;CJK UNIFIED IDEOGRAPH
                                (#xF85E . #x9D01)	;CJK UNIFIED IDEOGRAPH
                                (#xF85F . #x9D02)	;CJK UNIFIED IDEOGRAPH
                                (#xF860 . #x9D03)	;CJK UNIFIED IDEOGRAPH
                                (#xF861 . #x9D04)	;CJK UNIFIED IDEOGRAPH
                                (#xF862 . #x9D05)	;CJK UNIFIED IDEOGRAPH
                                (#xF863 . #x9D06)	;CJK UNIFIED IDEOGRAPH
                                (#xF864 . #x9D07)	;CJK UNIFIED IDEOGRAPH
                                (#xF865 . #x9D08)	;CJK UNIFIED IDEOGRAPH
                                (#xF866 . #x9D09)	;CJK UNIFIED IDEOGRAPH
                                (#xF867 . #x9D0A)	;CJK UNIFIED IDEOGRAPH
                                (#xF868 . #x9D0B)	;CJK UNIFIED IDEOGRAPH
                                (#xF869 . #x9D0C)	;CJK UNIFIED IDEOGRAPH
                                (#xF86A . #x9D0D)	;CJK UNIFIED IDEOGRAPH
                                (#xF86B . #x9D0E)	;CJK UNIFIED IDEOGRAPH
                                (#xF86C . #x9D0F)	;CJK UNIFIED IDEOGRAPH
                                (#xF86D . #x9D10)	;CJK UNIFIED IDEOGRAPH
                                (#xF86E . #x9D11)	;CJK UNIFIED IDEOGRAPH
                                (#xF86F . #x9D12)	;CJK UNIFIED IDEOGRAPH
                                (#xF870 . #x9D13)	;CJK UNIFIED IDEOGRAPH
                                (#xF871 . #x9D14)	;CJK UNIFIED IDEOGRAPH
                                (#xF872 . #x9D15)	;CJK UNIFIED IDEOGRAPH
                                (#xF873 . #x9D16)	;CJK UNIFIED IDEOGRAPH
                                (#xF874 . #x9D17)	;CJK UNIFIED IDEOGRAPH
                                (#xF875 . #x9D18)	;CJK UNIFIED IDEOGRAPH
                                (#xF876 . #x9D19)	;CJK UNIFIED IDEOGRAPH
                                (#xF877 . #x9D1A)	;CJK UNIFIED IDEOGRAPH
                                (#xF878 . #x9D1B)	;CJK UNIFIED IDEOGRAPH
                                (#xF879 . #x9D1C)	;CJK UNIFIED IDEOGRAPH
                                (#xF87A . #x9D1D)	;CJK UNIFIED IDEOGRAPH
                                (#xF87B . #x9D1E)	;CJK UNIFIED IDEOGRAPH
                                (#xF87C . #x9D1F)	;CJK UNIFIED IDEOGRAPH
                                (#xF87D . #x9D20)	;CJK UNIFIED IDEOGRAPH
                                (#xF87E . #x9D21)	;CJK UNIFIED IDEOGRAPH
                                (#xF880 . #x9D22)	;CJK UNIFIED IDEOGRAPH
                                (#xF881 . #x9D23)	;CJK UNIFIED IDEOGRAPH
                                (#xF882 . #x9D24)	;CJK UNIFIED IDEOGRAPH
                                (#xF883 . #x9D25)	;CJK UNIFIED IDEOGRAPH
                                (#xF884 . #x9D26)	;CJK UNIFIED IDEOGRAPH
                                (#xF885 . #x9D27)	;CJK UNIFIED IDEOGRAPH
                                (#xF886 . #x9D28)	;CJK UNIFIED IDEOGRAPH
                                (#xF887 . #x9D29)	;CJK UNIFIED IDEOGRAPH
                                (#xF888 . #x9D2A)	;CJK UNIFIED IDEOGRAPH
                                (#xF889 . #x9D2B)	;CJK UNIFIED IDEOGRAPH
                                (#xF88A . #x9D2C)	;CJK UNIFIED IDEOGRAPH
                                (#xF88B . #x9D2D)	;CJK UNIFIED IDEOGRAPH
                                (#xF88C . #x9D2E)	;CJK UNIFIED IDEOGRAPH
                                (#xF88D . #x9D2F)	;CJK UNIFIED IDEOGRAPH
                                (#xF88E . #x9D30)	;CJK UNIFIED IDEOGRAPH
                                (#xF88F . #x9D31)	;CJK UNIFIED IDEOGRAPH
                                (#xF890 . #x9D32)	;CJK UNIFIED IDEOGRAPH
                                (#xF891 . #x9D33)	;CJK UNIFIED IDEOGRAPH
                                (#xF892 . #x9D34)	;CJK UNIFIED IDEOGRAPH
                                (#xF893 . #x9D35)	;CJK UNIFIED IDEOGRAPH
                                (#xF894 . #x9D36)	;CJK UNIFIED IDEOGRAPH
                                (#xF895 . #x9D37)	;CJK UNIFIED IDEOGRAPH
                                (#xF896 . #x9D38)	;CJK UNIFIED IDEOGRAPH
                                (#xF897 . #x9D39)	;CJK UNIFIED IDEOGRAPH
                                (#xF898 . #x9D3A)	;CJK UNIFIED IDEOGRAPH
                                (#xF899 . #x9D3B)	;CJK UNIFIED IDEOGRAPH
                                (#xF89A . #x9D3C)	;CJK UNIFIED IDEOGRAPH
                                (#xF89B . #x9D3D)	;CJK UNIFIED IDEOGRAPH
                                (#xF89C . #x9D3E)	;CJK UNIFIED IDEOGRAPH
                                (#xF89D . #x9D3F)	;CJK UNIFIED IDEOGRAPH
                                (#xF89E . #x9D40)	;CJK UNIFIED IDEOGRAPH
                                (#xF89F . #x9D41)	;CJK UNIFIED IDEOGRAPH
                                (#xF8A0 . #x9D42)	;CJK UNIFIED IDEOGRAPH
                                (#xF940 . #x9D43)	;CJK UNIFIED IDEOGRAPH
                                (#xF941 . #x9D44)	;CJK UNIFIED IDEOGRAPH
                                (#xF942 . #x9D45)	;CJK UNIFIED IDEOGRAPH
                                (#xF943 . #x9D46)	;CJK UNIFIED IDEOGRAPH
                                (#xF944 . #x9D47)	;CJK UNIFIED IDEOGRAPH
                                (#xF945 . #x9D48)	;CJK UNIFIED IDEOGRAPH
                                (#xF946 . #x9D49)	;CJK UNIFIED IDEOGRAPH
                                (#xF947 . #x9D4A)	;CJK UNIFIED IDEOGRAPH
                                (#xF948 . #x9D4B)	;CJK UNIFIED IDEOGRAPH
                                (#xF949 . #x9D4C)	;CJK UNIFIED IDEOGRAPH
                                (#xF94A . #x9D4D)	;CJK UNIFIED IDEOGRAPH
                                (#xF94B . #x9D4E)	;CJK UNIFIED IDEOGRAPH
                                (#xF94C . #x9D4F)	;CJK UNIFIED IDEOGRAPH
                                (#xF94D . #x9D50)	;CJK UNIFIED IDEOGRAPH
                                (#xF94E . #x9D51)	;CJK UNIFIED IDEOGRAPH
                                (#xF94F . #x9D52)	;CJK UNIFIED IDEOGRAPH
                                (#xF950 . #x9D53)	;CJK UNIFIED IDEOGRAPH
                                (#xF951 . #x9D54)	;CJK UNIFIED IDEOGRAPH
                                (#xF952 . #x9D55)	;CJK UNIFIED IDEOGRAPH
                                (#xF953 . #x9D56)	;CJK UNIFIED IDEOGRAPH
                                (#xF954 . #x9D57)	;CJK UNIFIED IDEOGRAPH
                                (#xF955 . #x9D58)	;CJK UNIFIED IDEOGRAPH
                                (#xF956 . #x9D59)	;CJK UNIFIED IDEOGRAPH
                                (#xF957 . #x9D5A)	;CJK UNIFIED IDEOGRAPH
                                (#xF958 . #x9D5B)	;CJK UNIFIED IDEOGRAPH
                                (#xF959 . #x9D5C)	;CJK UNIFIED IDEOGRAPH
                                (#xF95A . #x9D5D)	;CJK UNIFIED IDEOGRAPH
                                (#xF95B . #x9D5E)	;CJK UNIFIED IDEOGRAPH
                                (#xF95C . #x9D5F)	;CJK UNIFIED IDEOGRAPH
                                (#xF95D . #x9D60)	;CJK UNIFIED IDEOGRAPH
                                (#xF95E . #x9D61)	;CJK UNIFIED IDEOGRAPH
                                (#xF95F . #x9D62)	;CJK UNIFIED IDEOGRAPH
                                (#xF960 . #x9D63)	;CJK UNIFIED IDEOGRAPH
                                (#xF961 . #x9D64)	;CJK UNIFIED IDEOGRAPH
                                (#xF962 . #x9D65)	;CJK UNIFIED IDEOGRAPH
                                (#xF963 . #x9D66)	;CJK UNIFIED IDEOGRAPH
                                (#xF964 . #x9D67)	;CJK UNIFIED IDEOGRAPH
                                (#xF965 . #x9D68)	;CJK UNIFIED IDEOGRAPH
                                (#xF966 . #x9D69)	;CJK UNIFIED IDEOGRAPH
                                (#xF967 . #x9D6A)	;CJK UNIFIED IDEOGRAPH
                                (#xF968 . #x9D6B)	;CJK UNIFIED IDEOGRAPH
                                (#xF969 . #x9D6C)	;CJK UNIFIED IDEOGRAPH
                                (#xF96A . #x9D6D)	;CJK UNIFIED IDEOGRAPH
                                (#xF96B . #x9D6E)	;CJK UNIFIED IDEOGRAPH
                                (#xF96C . #x9D6F)	;CJK UNIFIED IDEOGRAPH
                                (#xF96D . #x9D70)	;CJK UNIFIED IDEOGRAPH
                                (#xF96E . #x9D71)	;CJK UNIFIED IDEOGRAPH
                                (#xF96F . #x9D72)	;CJK UNIFIED IDEOGRAPH
                                (#xF970 . #x9D73)	;CJK UNIFIED IDEOGRAPH
                                (#xF971 . #x9D74)	;CJK UNIFIED IDEOGRAPH
                                (#xF972 . #x9D75)	;CJK UNIFIED IDEOGRAPH
                                (#xF973 . #x9D76)	;CJK UNIFIED IDEOGRAPH
                                (#xF974 . #x9D77)	;CJK UNIFIED IDEOGRAPH
                                (#xF975 . #x9D78)	;CJK UNIFIED IDEOGRAPH
                                (#xF976 . #x9D79)	;CJK UNIFIED IDEOGRAPH
                                (#xF977 . #x9D7A)	;CJK UNIFIED IDEOGRAPH
                                (#xF978 . #x9D7B)	;CJK UNIFIED IDEOGRAPH
                                (#xF979 . #x9D7C)	;CJK UNIFIED IDEOGRAPH
                                (#xF97A . #x9D7D)	;CJK UNIFIED IDEOGRAPH
                                (#xF97B . #x9D7E)	;CJK UNIFIED IDEOGRAPH
                                (#xF97C . #x9D7F)	;CJK UNIFIED IDEOGRAPH
                                (#xF97D . #x9D80)	;CJK UNIFIED IDEOGRAPH
                                (#xF97E . #x9D81)	;CJK UNIFIED IDEOGRAPH
                                (#xF980 . #x9D82)	;CJK UNIFIED IDEOGRAPH
                                (#xF981 . #x9D83)	;CJK UNIFIED IDEOGRAPH
                                (#xF982 . #x9D84)	;CJK UNIFIED IDEOGRAPH
                                (#xF983 . #x9D85)	;CJK UNIFIED IDEOGRAPH
                                (#xF984 . #x9D86)	;CJK UNIFIED IDEOGRAPH
                                (#xF985 . #x9D87)	;CJK UNIFIED IDEOGRAPH
                                (#xF986 . #x9D88)	;CJK UNIFIED IDEOGRAPH
                                (#xF987 . #x9D89)	;CJK UNIFIED IDEOGRAPH
                                (#xF988 . #x9D8A)	;CJK UNIFIED IDEOGRAPH
                                (#xF989 . #x9D8B)	;CJK UNIFIED IDEOGRAPH
                                (#xF98A . #x9D8C)	;CJK UNIFIED IDEOGRAPH
                                (#xF98B . #x9D8D)	;CJK UNIFIED IDEOGRAPH
                                (#xF98C . #x9D8E)	;CJK UNIFIED IDEOGRAPH
                                (#xF98D . #x9D8F)	;CJK UNIFIED IDEOGRAPH
                                (#xF98E . #x9D90)	;CJK UNIFIED IDEOGRAPH
                                (#xF98F . #x9D91)	;CJK UNIFIED IDEOGRAPH
                                (#xF990 . #x9D92)	;CJK UNIFIED IDEOGRAPH
                                (#xF991 . #x9D93)	;CJK UNIFIED IDEOGRAPH
                                (#xF992 . #x9D94)	;CJK UNIFIED IDEOGRAPH
                                (#xF993 . #x9D95)	;CJK UNIFIED IDEOGRAPH
                                (#xF994 . #x9D96)	;CJK UNIFIED IDEOGRAPH
                                (#xF995 . #x9D97)	;CJK UNIFIED IDEOGRAPH
                                (#xF996 . #x9D98)	;CJK UNIFIED IDEOGRAPH
                                (#xF997 . #x9D99)	;CJK UNIFIED IDEOGRAPH
                                (#xF998 . #x9D9A)	;CJK UNIFIED IDEOGRAPH
                                (#xF999 . #x9D9B)	;CJK UNIFIED IDEOGRAPH
                                (#xF99A . #x9D9C)	;CJK UNIFIED IDEOGRAPH
                                (#xF99B . #x9D9D)	;CJK UNIFIED IDEOGRAPH
                                (#xF99C . #x9D9E)	;CJK UNIFIED IDEOGRAPH
                                (#xF99D . #x9D9F)	;CJK UNIFIED IDEOGRAPH
                                (#xF99E . #x9DA0)	;CJK UNIFIED IDEOGRAPH
                                (#xF99F . #x9DA1)	;CJK UNIFIED IDEOGRAPH
                                (#xF9A0 . #x9DA2)	;CJK UNIFIED IDEOGRAPH
                                (#xFA40 . #x9DA3)	;CJK UNIFIED IDEOGRAPH
                                (#xFA41 . #x9DA4)	;CJK UNIFIED IDEOGRAPH
                                (#xFA42 . #x9DA5)	;CJK UNIFIED IDEOGRAPH
                                (#xFA43 . #x9DA6)	;CJK UNIFIED IDEOGRAPH
                                (#xFA44 . #x9DA7)	;CJK UNIFIED IDEOGRAPH
                                (#xFA45 . #x9DA8)	;CJK UNIFIED IDEOGRAPH
                                (#xFA46 . #x9DA9)	;CJK UNIFIED IDEOGRAPH
                                (#xFA47 . #x9DAA)	;CJK UNIFIED IDEOGRAPH
                                (#xFA48 . #x9DAB)	;CJK UNIFIED IDEOGRAPH
                                (#xFA49 . #x9DAC)	;CJK UNIFIED IDEOGRAPH
                                (#xFA4A . #x9DAD)	;CJK UNIFIED IDEOGRAPH
                                (#xFA4B . #x9DAE)	;CJK UNIFIED IDEOGRAPH
                                (#xFA4C . #x9DAF)	;CJK UNIFIED IDEOGRAPH
                                (#xFA4D . #x9DB0)	;CJK UNIFIED IDEOGRAPH
                                (#xFA4E . #x9DB1)	;CJK UNIFIED IDEOGRAPH
                                (#xFA4F . #x9DB2)	;CJK UNIFIED IDEOGRAPH
                                (#xFA50 . #x9DB3)	;CJK UNIFIED IDEOGRAPH
                                (#xFA51 . #x9DB4)	;CJK UNIFIED IDEOGRAPH
                                (#xFA52 . #x9DB5)	;CJK UNIFIED IDEOGRAPH
                                (#xFA53 . #x9DB6)	;CJK UNIFIED IDEOGRAPH
                                (#xFA54 . #x9DB7)	;CJK UNIFIED IDEOGRAPH
                                (#xFA55 . #x9DB8)	;CJK UNIFIED IDEOGRAPH
                                (#xFA56 . #x9DB9)	;CJK UNIFIED IDEOGRAPH
                                (#xFA57 . #x9DBA)	;CJK UNIFIED IDEOGRAPH
                                (#xFA58 . #x9DBB)	;CJK UNIFIED IDEOGRAPH
                                (#xFA59 . #x9DBC)	;CJK UNIFIED IDEOGRAPH
                                (#xFA5A . #x9DBD)	;CJK UNIFIED IDEOGRAPH
                                (#xFA5B . #x9DBE)	;CJK UNIFIED IDEOGRAPH
                                (#xFA5C . #x9DBF)	;CJK UNIFIED IDEOGRAPH
                                (#xFA5D . #x9DC0)	;CJK UNIFIED IDEOGRAPH
                                (#xFA5E . #x9DC1)	;CJK UNIFIED IDEOGRAPH
                                (#xFA5F . #x9DC2)	;CJK UNIFIED IDEOGRAPH
                                (#xFA60 . #x9DC3)	;CJK UNIFIED IDEOGRAPH
                                (#xFA61 . #x9DC4)	;CJK UNIFIED IDEOGRAPH
                                (#xFA62 . #x9DC5)	;CJK UNIFIED IDEOGRAPH
                                (#xFA63 . #x9DC6)	;CJK UNIFIED IDEOGRAPH
                                (#xFA64 . #x9DC7)	;CJK UNIFIED IDEOGRAPH
                                (#xFA65 . #x9DC8)	;CJK UNIFIED IDEOGRAPH
                                (#xFA66 . #x9DC9)	;CJK UNIFIED IDEOGRAPH
                                (#xFA67 . #x9DCA)	;CJK UNIFIED IDEOGRAPH
                                (#xFA68 . #x9DCB)	;CJK UNIFIED IDEOGRAPH
                                (#xFA69 . #x9DCC)	;CJK UNIFIED IDEOGRAPH
                                (#xFA6A . #x9DCD)	;CJK UNIFIED IDEOGRAPH
                                (#xFA6B . #x9DCE)	;CJK UNIFIED IDEOGRAPH
                                (#xFA6C . #x9DCF)	;CJK UNIFIED IDEOGRAPH
                                (#xFA6D . #x9DD0)	;CJK UNIFIED IDEOGRAPH
                                (#xFA6E . #x9DD1)	;CJK UNIFIED IDEOGRAPH
                                (#xFA6F . #x9DD2)	;CJK UNIFIED IDEOGRAPH
                                (#xFA70 . #x9DD3)	;CJK UNIFIED IDEOGRAPH
                                (#xFA71 . #x9DD4)	;CJK UNIFIED IDEOGRAPH
                                (#xFA72 . #x9DD5)	;CJK UNIFIED IDEOGRAPH
                                (#xFA73 . #x9DD6)	;CJK UNIFIED IDEOGRAPH
                                (#xFA74 . #x9DD7)	;CJK UNIFIED IDEOGRAPH
                                (#xFA75 . #x9DD8)	;CJK UNIFIED IDEOGRAPH
                                (#xFA76 . #x9DD9)	;CJK UNIFIED IDEOGRAPH
                                (#xFA77 . #x9DDA)	;CJK UNIFIED IDEOGRAPH
                                (#xFA78 . #x9DDB)	;CJK UNIFIED IDEOGRAPH
                                (#xFA79 . #x9DDC)	;CJK UNIFIED IDEOGRAPH
                                (#xFA7A . #x9DDD)	;CJK UNIFIED IDEOGRAPH
                                (#xFA7B . #x9DDE)	;CJK UNIFIED IDEOGRAPH
                                (#xFA7C . #x9DDF)	;CJK UNIFIED IDEOGRAPH
                                (#xFA7D . #x9DE0)	;CJK UNIFIED IDEOGRAPH
                                (#xFA7E . #x9DE1)	;CJK UNIFIED IDEOGRAPH
                                (#xFA80 . #x9DE2)	;CJK UNIFIED IDEOGRAPH
                                (#xFA81 . #x9DE3)	;CJK UNIFIED IDEOGRAPH
                                (#xFA82 . #x9DE4)	;CJK UNIFIED IDEOGRAPH
                                (#xFA83 . #x9DE5)	;CJK UNIFIED IDEOGRAPH
                                (#xFA84 . #x9DE6)	;CJK UNIFIED IDEOGRAPH
                                (#xFA85 . #x9DE7)	;CJK UNIFIED IDEOGRAPH
                                (#xFA86 . #x9DE8)	;CJK UNIFIED IDEOGRAPH
                                (#xFA87 . #x9DE9)	;CJK UNIFIED IDEOGRAPH
                                (#xFA88 . #x9DEA)	;CJK UNIFIED IDEOGRAPH
                                (#xFA89 . #x9DEB)	;CJK UNIFIED IDEOGRAPH
                                (#xFA8A . #x9DEC)	;CJK UNIFIED IDEOGRAPH
                                (#xFA8B . #x9DED)	;CJK UNIFIED IDEOGRAPH
                                (#xFA8C . #x9DEE)	;CJK UNIFIED IDEOGRAPH
                                (#xFA8D . #x9DEF)	;CJK UNIFIED IDEOGRAPH
                                (#xFA8E . #x9DF0)	;CJK UNIFIED IDEOGRAPH
                                (#xFA8F . #x9DF1)	;CJK UNIFIED IDEOGRAPH
                                (#xFA90 . #x9DF2)	;CJK UNIFIED IDEOGRAPH
                                (#xFA91 . #x9DF3)	;CJK UNIFIED IDEOGRAPH
                                (#xFA92 . #x9DF4)	;CJK UNIFIED IDEOGRAPH
                                (#xFA93 . #x9DF5)	;CJK UNIFIED IDEOGRAPH
                                (#xFA94 . #x9DF6)	;CJK UNIFIED IDEOGRAPH
                                (#xFA95 . #x9DF7)	;CJK UNIFIED IDEOGRAPH
                                (#xFA96 . #x9DF8)	;CJK UNIFIED IDEOGRAPH
                                (#xFA97 . #x9DF9)	;CJK UNIFIED IDEOGRAPH
                                (#xFA98 . #x9DFA)	;CJK UNIFIED IDEOGRAPH
                                (#xFA99 . #x9DFB)	;CJK UNIFIED IDEOGRAPH
                                (#xFA9A . #x9DFC)	;CJK UNIFIED IDEOGRAPH
                                (#xFA9B . #x9DFD)	;CJK UNIFIED IDEOGRAPH
                                (#xFA9C . #x9DFE)	;CJK UNIFIED IDEOGRAPH
                                (#xFA9D . #x9DFF)	;CJK UNIFIED IDEOGRAPH
                                (#xFA9E . #x9E00)	;CJK UNIFIED IDEOGRAPH
                                (#xFA9F . #x9E01)	;CJK UNIFIED IDEOGRAPH
                                (#xFAA0 . #x9E02)	;CJK UNIFIED IDEOGRAPH
                                (#xFB40 . #x9E03)	;CJK UNIFIED IDEOGRAPH
                                (#xFB41 . #x9E04)	;CJK UNIFIED IDEOGRAPH
                                (#xFB42 . #x9E05)	;CJK UNIFIED IDEOGRAPH
                                (#xFB43 . #x9E06)	;CJK UNIFIED IDEOGRAPH
                                (#xFB44 . #x9E07)	;CJK UNIFIED IDEOGRAPH
                                (#xFB45 . #x9E08)	;CJK UNIFIED IDEOGRAPH
                                (#xFB46 . #x9E09)	;CJK UNIFIED IDEOGRAPH
                                (#xFB47 . #x9E0A)	;CJK UNIFIED IDEOGRAPH
                                (#xFB48 . #x9E0B)	;CJK UNIFIED IDEOGRAPH
                                (#xFB49 . #x9E0C)	;CJK UNIFIED IDEOGRAPH
                                (#xFB4A . #x9E0D)	;CJK UNIFIED IDEOGRAPH
                                (#xFB4B . #x9E0E)	;CJK UNIFIED IDEOGRAPH
                                (#xFB4C . #x9E0F)	;CJK UNIFIED IDEOGRAPH
                                (#xFB4D . #x9E10)	;CJK UNIFIED IDEOGRAPH
                                (#xFB4E . #x9E11)	;CJK UNIFIED IDEOGRAPH
                                (#xFB4F . #x9E12)	;CJK UNIFIED IDEOGRAPH
                                (#xFB50 . #x9E13)	;CJK UNIFIED IDEOGRAPH
                                (#xFB51 . #x9E14)	;CJK UNIFIED IDEOGRAPH
                                (#xFB52 . #x9E15)	;CJK UNIFIED IDEOGRAPH
                                (#xFB53 . #x9E16)	;CJK UNIFIED IDEOGRAPH
                                (#xFB54 . #x9E17)	;CJK UNIFIED IDEOGRAPH
                                (#xFB55 . #x9E18)	;CJK UNIFIED IDEOGRAPH
                                (#xFB56 . #x9E19)	;CJK UNIFIED IDEOGRAPH
                                (#xFB57 . #x9E1A)	;CJK UNIFIED IDEOGRAPH
                                (#xFB58 . #x9E1B)	;CJK UNIFIED IDEOGRAPH
                                (#xFB59 . #x9E1C)	;CJK UNIFIED IDEOGRAPH
                                (#xFB5A . #x9E1D)	;CJK UNIFIED IDEOGRAPH
                                (#xFB5B . #x9E1E)	;CJK UNIFIED IDEOGRAPH
                                (#xFB5C . #x9E24)	;CJK UNIFIED IDEOGRAPH
                                (#xFB5D . #x9E27)	;CJK UNIFIED IDEOGRAPH
                                (#xFB5E . #x9E2E)	;CJK UNIFIED IDEOGRAPH
                                (#xFB5F . #x9E30)	;CJK UNIFIED IDEOGRAPH
                                (#xFB60 . #x9E34)	;CJK UNIFIED IDEOGRAPH
                                (#xFB61 . #x9E3B)	;CJK UNIFIED IDEOGRAPH
                                (#xFB62 . #x9E3C)	;CJK UNIFIED IDEOGRAPH
                                (#xFB63 . #x9E40)	;CJK UNIFIED IDEOGRAPH
                                (#xFB64 . #x9E4D)	;CJK UNIFIED IDEOGRAPH
                                (#xFB65 . #x9E50)	;CJK UNIFIED IDEOGRAPH
                                (#xFB66 . #x9E52)	;CJK UNIFIED IDEOGRAPH
                                (#xFB67 . #x9E53)	;CJK UNIFIED IDEOGRAPH
                                (#xFB68 . #x9E54)	;CJK UNIFIED IDEOGRAPH
                                (#xFB69 . #x9E56)	;CJK UNIFIED IDEOGRAPH
                                (#xFB6A . #x9E59)	;CJK UNIFIED IDEOGRAPH
                                (#xFB6B . #x9E5D)	;CJK UNIFIED IDEOGRAPH
                                (#xFB6C . #x9E5F)	;CJK UNIFIED IDEOGRAPH
                                (#xFB6D . #x9E60)	;CJK UNIFIED IDEOGRAPH
                                (#xFB6E . #x9E61)	;CJK UNIFIED IDEOGRAPH
                                (#xFB6F . #x9E62)	;CJK UNIFIED IDEOGRAPH
                                (#xFB70 . #x9E65)	;CJK UNIFIED IDEOGRAPH
                                (#xFB71 . #x9E6E)	;CJK UNIFIED IDEOGRAPH
                                (#xFB72 . #x9E6F)	;CJK UNIFIED IDEOGRAPH
                                (#xFB73 . #x9E72)	;CJK UNIFIED IDEOGRAPH
                                (#xFB74 . #x9E74)	;CJK UNIFIED IDEOGRAPH
                                (#xFB75 . #x9E75)	;CJK UNIFIED IDEOGRAPH
                                (#xFB76 . #x9E76)	;CJK UNIFIED IDEOGRAPH
                                (#xFB77 . #x9E77)	;CJK UNIFIED IDEOGRAPH
                                (#xFB78 . #x9E78)	;CJK UNIFIED IDEOGRAPH
                                (#xFB79 . #x9E79)	;CJK UNIFIED IDEOGRAPH
                                (#xFB7A . #x9E7A)	;CJK UNIFIED IDEOGRAPH
                                (#xFB7B . #x9E7B)	;CJK UNIFIED IDEOGRAPH
                                (#xFB7C . #x9E7C)	;CJK UNIFIED IDEOGRAPH
                                (#xFB7D . #x9E7D)	;CJK UNIFIED IDEOGRAPH
                                (#xFB7E . #x9E80)	;CJK UNIFIED IDEOGRAPH
                                (#xFB80 . #x9E81)	;CJK UNIFIED IDEOGRAPH
                                (#xFB81 . #x9E83)	;CJK UNIFIED IDEOGRAPH
                                (#xFB82 . #x9E84)	;CJK UNIFIED IDEOGRAPH
                                (#xFB83 . #x9E85)	;CJK UNIFIED IDEOGRAPH
                                (#xFB84 . #x9E86)	;CJK UNIFIED IDEOGRAPH
                                (#xFB85 . #x9E89)	;CJK UNIFIED IDEOGRAPH
                                (#xFB86 . #x9E8A)	;CJK UNIFIED IDEOGRAPH
                                (#xFB87 . #x9E8C)	;CJK UNIFIED IDEOGRAPH
                                (#xFB88 . #x9E8D)	;CJK UNIFIED IDEOGRAPH
                                (#xFB89 . #x9E8E)	;CJK UNIFIED IDEOGRAPH
                                (#xFB8A . #x9E8F)	;CJK UNIFIED IDEOGRAPH
                                (#xFB8B . #x9E90)	;CJK UNIFIED IDEOGRAPH
                                (#xFB8C . #x9E91)	;CJK UNIFIED IDEOGRAPH
                                (#xFB8D . #x9E94)	;CJK UNIFIED IDEOGRAPH
                                (#xFB8E . #x9E95)	;CJK UNIFIED IDEOGRAPH
                                (#xFB8F . #x9E96)	;CJK UNIFIED IDEOGRAPH
                                (#xFB90 . #x9E97)	;CJK UNIFIED IDEOGRAPH
                                (#xFB91 . #x9E98)	;CJK UNIFIED IDEOGRAPH
                                (#xFB92 . #x9E99)	;CJK UNIFIED IDEOGRAPH
                                (#xFB93 . #x9E9A)	;CJK UNIFIED IDEOGRAPH
                                (#xFB94 . #x9E9B)	;CJK UNIFIED IDEOGRAPH
                                (#xFB95 . #x9E9C)	;CJK UNIFIED IDEOGRAPH
                                (#xFB96 . #x9E9E)	;CJK UNIFIED IDEOGRAPH
                                (#xFB97 . #x9EA0)	;CJK UNIFIED IDEOGRAPH
                                (#xFB98 . #x9EA1)	;CJK UNIFIED IDEOGRAPH
                                (#xFB99 . #x9EA2)	;CJK UNIFIED IDEOGRAPH
                                (#xFB9A . #x9EA3)	;CJK UNIFIED IDEOGRAPH
                                (#xFB9B . #x9EA4)	;CJK UNIFIED IDEOGRAPH
                                (#xFB9C . #x9EA5)	;CJK UNIFIED IDEOGRAPH
                                (#xFB9D . #x9EA7)	;CJK UNIFIED IDEOGRAPH
                                (#xFB9E . #x9EA8)	;CJK UNIFIED IDEOGRAPH
                                (#xFB9F . #x9EA9)	;CJK UNIFIED IDEOGRAPH
                                (#xFBA0 . #x9EAA)	;CJK UNIFIED IDEOGRAPH
                                (#xFC40 . #x9EAB)	;CJK UNIFIED IDEOGRAPH
                                (#xFC41 . #x9EAC)	;CJK UNIFIED IDEOGRAPH
                                (#xFC42 . #x9EAD)	;CJK UNIFIED IDEOGRAPH
                                (#xFC43 . #x9EAE)	;CJK UNIFIED IDEOGRAPH
                                (#xFC44 . #x9EAF)	;CJK UNIFIED IDEOGRAPH
                                (#xFC45 . #x9EB0)	;CJK UNIFIED IDEOGRAPH
                                (#xFC46 . #x9EB1)	;CJK UNIFIED IDEOGRAPH
                                (#xFC47 . #x9EB2)	;CJK UNIFIED IDEOGRAPH
                                (#xFC48 . #x9EB3)	;CJK UNIFIED IDEOGRAPH
                                (#xFC49 . #x9EB5)	;CJK UNIFIED IDEOGRAPH
                                (#xFC4A . #x9EB6)	;CJK UNIFIED IDEOGRAPH
                                (#xFC4B . #x9EB7)	;CJK UNIFIED IDEOGRAPH
                                (#xFC4C . #x9EB9)	;CJK UNIFIED IDEOGRAPH
                                (#xFC4D . #x9EBA)	;CJK UNIFIED IDEOGRAPH
                                (#xFC4E . #x9EBC)	;CJK UNIFIED IDEOGRAPH
                                (#xFC4F . #x9EBF)	;CJK UNIFIED IDEOGRAPH
                                (#xFC50 . #x9EC0)	;CJK UNIFIED IDEOGRAPH
                                (#xFC51 . #x9EC1)	;CJK UNIFIED IDEOGRAPH
                                (#xFC52 . #x9EC2)	;CJK UNIFIED IDEOGRAPH
                                (#xFC53 . #x9EC3)	;CJK UNIFIED IDEOGRAPH
                                (#xFC54 . #x9EC5)	;CJK UNIFIED IDEOGRAPH
                                (#xFC55 . #x9EC6)	;CJK UNIFIED IDEOGRAPH
                                (#xFC56 . #x9EC7)	;CJK UNIFIED IDEOGRAPH
                                (#xFC57 . #x9EC8)	;CJK UNIFIED IDEOGRAPH
                                (#xFC58 . #x9ECA)	;CJK UNIFIED IDEOGRAPH
                                (#xFC59 . #x9ECB)	;CJK UNIFIED IDEOGRAPH
                                (#xFC5A . #x9ECC)	;CJK UNIFIED IDEOGRAPH
                                (#xFC5B . #x9ED0)	;CJK UNIFIED IDEOGRAPH
                                (#xFC5C . #x9ED2)	;CJK UNIFIED IDEOGRAPH
                                (#xFC5D . #x9ED3)	;CJK UNIFIED IDEOGRAPH
                                (#xFC5E . #x9ED5)	;CJK UNIFIED IDEOGRAPH
                                (#xFC5F . #x9ED6)	;CJK UNIFIED IDEOGRAPH
                                (#xFC60 . #x9ED7)	;CJK UNIFIED IDEOGRAPH
                                (#xFC61 . #x9ED9)	;CJK UNIFIED IDEOGRAPH
                                (#xFC62 . #x9EDA)	;CJK UNIFIED IDEOGRAPH
                                (#xFC63 . #x9EDE)	;CJK UNIFIED IDEOGRAPH
                                (#xFC64 . #x9EE1)	;CJK UNIFIED IDEOGRAPH
                                (#xFC65 . #x9EE3)	;CJK UNIFIED IDEOGRAPH
                                (#xFC66 . #x9EE4)	;CJK UNIFIED IDEOGRAPH
                                (#xFC67 . #x9EE6)	;CJK UNIFIED IDEOGRAPH
                                (#xFC68 . #x9EE8)	;CJK UNIFIED IDEOGRAPH
                                (#xFC69 . #x9EEB)	;CJK UNIFIED IDEOGRAPH
                                (#xFC6A . #x9EEC)	;CJK UNIFIED IDEOGRAPH
                                (#xFC6B . #x9EED)	;CJK UNIFIED IDEOGRAPH
                                (#xFC6C . #x9EEE)	;CJK UNIFIED IDEOGRAPH
                                (#xFC6D . #x9EF0)	;CJK UNIFIED IDEOGRAPH
                                (#xFC6E . #x9EF1)	;CJK UNIFIED IDEOGRAPH
                                (#xFC6F . #x9EF2)	;CJK UNIFIED IDEOGRAPH
                                (#xFC70 . #x9EF3)	;CJK UNIFIED IDEOGRAPH
                                (#xFC71 . #x9EF4)	;CJK UNIFIED IDEOGRAPH
                                (#xFC72 . #x9EF5)	;CJK UNIFIED IDEOGRAPH
                                (#xFC73 . #x9EF6)	;CJK UNIFIED IDEOGRAPH
                                (#xFC74 . #x9EF7)	;CJK UNIFIED IDEOGRAPH
                                (#xFC75 . #x9EF8)	;CJK UNIFIED IDEOGRAPH
                                (#xFC76 . #x9EFA)	;CJK UNIFIED IDEOGRAPH
                                (#xFC77 . #x9EFD)	;CJK UNIFIED IDEOGRAPH
                                (#xFC78 . #x9EFF)	;CJK UNIFIED IDEOGRAPH
                                (#xFC79 . #x9F00)	;CJK UNIFIED IDEOGRAPH
                                (#xFC7A . #x9F01)	;CJK UNIFIED IDEOGRAPH
                                (#xFC7B . #x9F02)	;CJK UNIFIED IDEOGRAPH
                                (#xFC7C . #x9F03)	;CJK UNIFIED IDEOGRAPH
                                (#xFC7D . #x9F04)	;CJK UNIFIED IDEOGRAPH
                                (#xFC7E . #x9F05)	;CJK UNIFIED IDEOGRAPH
                                (#xFC80 . #x9F06)	;CJK UNIFIED IDEOGRAPH
                                (#xFC81 . #x9F07)	;CJK UNIFIED IDEOGRAPH
                                (#xFC82 . #x9F08)	;CJK UNIFIED IDEOGRAPH
                                (#xFC83 . #x9F09)	;CJK UNIFIED IDEOGRAPH
                                (#xFC84 . #x9F0A)	;CJK UNIFIED IDEOGRAPH
                                (#xFC85 . #x9F0C)	;CJK UNIFIED IDEOGRAPH
                                (#xFC86 . #x9F0F)	;CJK UNIFIED IDEOGRAPH
                                (#xFC87 . #x9F11)	;CJK UNIFIED IDEOGRAPH
                                (#xFC88 . #x9F12)	;CJK UNIFIED IDEOGRAPH
                                (#xFC89 . #x9F14)	;CJK UNIFIED IDEOGRAPH
                                (#xFC8A . #x9F15)	;CJK UNIFIED IDEOGRAPH
                                (#xFC8B . #x9F16)	;CJK UNIFIED IDEOGRAPH
                                (#xFC8C . #x9F18)	;CJK UNIFIED IDEOGRAPH
                                (#xFC8D . #x9F1A)	;CJK UNIFIED IDEOGRAPH
                                (#xFC8E . #x9F1B)	;CJK UNIFIED IDEOGRAPH
                                (#xFC8F . #x9F1C)	;CJK UNIFIED IDEOGRAPH
                                (#xFC90 . #x9F1D)	;CJK UNIFIED IDEOGRAPH
                                (#xFC91 . #x9F1E)	;CJK UNIFIED IDEOGRAPH
                                (#xFC92 . #x9F1F)	;CJK UNIFIED IDEOGRAPH
                                (#xFC93 . #x9F21)	;CJK UNIFIED IDEOGRAPH
                                (#xFC94 . #x9F23)	;CJK UNIFIED IDEOGRAPH
                                (#xFC95 . #x9F24)	;CJK UNIFIED IDEOGRAPH
                                (#xFC96 . #x9F25)	;CJK UNIFIED IDEOGRAPH
                                (#xFC97 . #x9F26)	;CJK UNIFIED IDEOGRAPH
                                (#xFC98 . #x9F27)	;CJK UNIFIED IDEOGRAPH
                                (#xFC99 . #x9F28)	;CJK UNIFIED IDEOGRAPH
                                (#xFC9A . #x9F29)	;CJK UNIFIED IDEOGRAPH
                                (#xFC9B . #x9F2A)	;CJK UNIFIED IDEOGRAPH
                                (#xFC9C . #x9F2B)	;CJK UNIFIED IDEOGRAPH
                                (#xFC9D . #x9F2D)	;CJK UNIFIED IDEOGRAPH
                                (#xFC9E . #x9F2E)	;CJK UNIFIED IDEOGRAPH
                                (#xFC9F . #x9F30)	;CJK UNIFIED IDEOGRAPH
                                (#xFCA0 . #x9F31)	;CJK UNIFIED IDEOGRAPH
                                (#xFD40 . #x9F32)	;CJK UNIFIED IDEOGRAPH
                                (#xFD41 . #x9F33)	;CJK UNIFIED IDEOGRAPH
                                (#xFD42 . #x9F34)	;CJK UNIFIED IDEOGRAPH
                                (#xFD43 . #x9F35)	;CJK UNIFIED IDEOGRAPH
                                (#xFD44 . #x9F36)	;CJK UNIFIED IDEOGRAPH
                                (#xFD45 . #x9F38)	;CJK UNIFIED IDEOGRAPH
                                (#xFD46 . #x9F3A)	;CJK UNIFIED IDEOGRAPH
                                (#xFD47 . #x9F3C)	;CJK UNIFIED IDEOGRAPH
                                (#xFD48 . #x9F3F)	;CJK UNIFIED IDEOGRAPH
                                (#xFD49 . #x9F40)	;CJK UNIFIED IDEOGRAPH
                                (#xFD4A . #x9F41)	;CJK UNIFIED IDEOGRAPH
                                (#xFD4B . #x9F42)	;CJK UNIFIED IDEOGRAPH
                                (#xFD4C . #x9F43)	;CJK UNIFIED IDEOGRAPH
                                (#xFD4D . #x9F45)	;CJK UNIFIED IDEOGRAPH
                                (#xFD4E . #x9F46)	;CJK UNIFIED IDEOGRAPH
                                (#xFD4F . #x9F47)	;CJK UNIFIED IDEOGRAPH
                                (#xFD50 . #x9F48)	;CJK UNIFIED IDEOGRAPH
                                (#xFD51 . #x9F49)	;CJK UNIFIED IDEOGRAPH
                                (#xFD52 . #x9F4A)	;CJK UNIFIED IDEOGRAPH
                                (#xFD53 . #x9F4B)	;CJK UNIFIED IDEOGRAPH
                                (#xFD54 . #x9F4C)	;CJK UNIFIED IDEOGRAPH
                                (#xFD55 . #x9F4D)	;CJK UNIFIED IDEOGRAPH
                                (#xFD56 . #x9F4E)	;CJK UNIFIED IDEOGRAPH
                                (#xFD57 . #x9F4F)	;CJK UNIFIED IDEOGRAPH
                                (#xFD58 . #x9F52)	;CJK UNIFIED IDEOGRAPH
                                (#xFD59 . #x9F53)	;CJK UNIFIED IDEOGRAPH
                                (#xFD5A . #x9F54)	;CJK UNIFIED IDEOGRAPH
                                (#xFD5B . #x9F55)	;CJK UNIFIED IDEOGRAPH
                                (#xFD5C . #x9F56)	;CJK UNIFIED IDEOGRAPH
                                (#xFD5D . #x9F57)	;CJK UNIFIED IDEOGRAPH
                                (#xFD5E . #x9F58)	;CJK UNIFIED IDEOGRAPH
                                (#xFD5F . #x9F59)	;CJK UNIFIED IDEOGRAPH
                                (#xFD60 . #x9F5A)	;CJK UNIFIED IDEOGRAPH
                                (#xFD61 . #x9F5B)	;CJK UNIFIED IDEOGRAPH
                                (#xFD62 . #x9F5C)	;CJK UNIFIED IDEOGRAPH
                                (#xFD63 . #x9F5D)	;CJK UNIFIED IDEOGRAPH
                                (#xFD64 . #x9F5E)	;CJK UNIFIED IDEOGRAPH
                                (#xFD65 . #x9F5F)	;CJK UNIFIED IDEOGRAPH
                                (#xFD66 . #x9F60)	;CJK UNIFIED IDEOGRAPH
                                (#xFD67 . #x9F61)	;CJK UNIFIED IDEOGRAPH
                                (#xFD68 . #x9F62)	;CJK UNIFIED IDEOGRAPH
                                (#xFD69 . #x9F63)	;CJK UNIFIED IDEOGRAPH
                                (#xFD6A . #x9F64)	;CJK UNIFIED IDEOGRAPH
                                (#xFD6B . #x9F65)	;CJK UNIFIED IDEOGRAPH
                                (#xFD6C . #x9F66)	;CJK UNIFIED IDEOGRAPH
                                (#xFD6D . #x9F67)	;CJK UNIFIED IDEOGRAPH
                                (#xFD6E . #x9F68)	;CJK UNIFIED IDEOGRAPH
                                (#xFD6F . #x9F69)	;CJK UNIFIED IDEOGRAPH
                                (#xFD70 . #x9F6A)	;CJK UNIFIED IDEOGRAPH
                                (#xFD71 . #x9F6B)	;CJK UNIFIED IDEOGRAPH
                                (#xFD72 . #x9F6C)	;CJK UNIFIED IDEOGRAPH
                                (#xFD73 . #x9F6D)	;CJK UNIFIED IDEOGRAPH
                                (#xFD74 . #x9F6E)	;CJK UNIFIED IDEOGRAPH
                                (#xFD75 . #x9F6F)	;CJK UNIFIED IDEOGRAPH
                                (#xFD76 . #x9F70)	;CJK UNIFIED IDEOGRAPH
                                (#xFD77 . #x9F71)	;CJK UNIFIED IDEOGRAPH
                                (#xFD78 . #x9F72)	;CJK UNIFIED IDEOGRAPH
                                (#xFD79 . #x9F73)	;CJK UNIFIED IDEOGRAPH
                                (#xFD7A . #x9F74)	;CJK UNIFIED IDEOGRAPH
                                (#xFD7B . #x9F75)	;CJK UNIFIED IDEOGRAPH
                                (#xFD7C . #x9F76)	;CJK UNIFIED IDEOGRAPH
                                (#xFD7D . #x9F77)	;CJK UNIFIED IDEOGRAPH
                                (#xFD7E . #x9F78)	;CJK UNIFIED IDEOGRAPH
                                (#xFD80 . #x9F79)	;CJK UNIFIED IDEOGRAPH
                                (#xFD81 . #x9F7A)	;CJK UNIFIED IDEOGRAPH
                                (#xFD82 . #x9F7B)	;CJK UNIFIED IDEOGRAPH
                                (#xFD83 . #x9F7C)	;CJK UNIFIED IDEOGRAPH
                                (#xFD84 . #x9F7D)	;CJK UNIFIED IDEOGRAPH
                                (#xFD85 . #x9F7E)	;CJK UNIFIED IDEOGRAPH
                                (#xFD86 . #x9F81)	;CJK UNIFIED IDEOGRAPH
                                (#xFD87 . #x9F82)	;CJK UNIFIED IDEOGRAPH
                                (#xFD88 . #x9F8D)	;CJK UNIFIED IDEOGRAPH
                                (#xFD89 . #x9F8E)	;CJK UNIFIED IDEOGRAPH
                                (#xFD8A . #x9F8F)	;CJK UNIFIED IDEOGRAPH
                                (#xFD8B . #x9F90)	;CJK UNIFIED IDEOGRAPH
                                (#xFD8C . #x9F91)	;CJK UNIFIED IDEOGRAPH
                                (#xFD8D . #x9F92)	;CJK UNIFIED IDEOGRAPH
                                (#xFD8E . #x9F93)	;CJK UNIFIED IDEOGRAPH
                                (#xFD8F . #x9F94)	;CJK UNIFIED IDEOGRAPH
                                (#xFD90 . #x9F95)	;CJK UNIFIED IDEOGRAPH
                                (#xFD91 . #x9F96)	;CJK UNIFIED IDEOGRAPH
                                (#xFD92 . #x9F97)	;CJK UNIFIED IDEOGRAPH
                                (#xFD93 . #x9F98)	;CJK UNIFIED IDEOGRAPH
                                (#xFD94 . #x9F9C)	;CJK UNIFIED IDEOGRAPH
                                (#xFD95 . #x9F9D)	;CJK UNIFIED IDEOGRAPH
                                (#xFD96 . #x9F9E)	;CJK UNIFIED IDEOGRAPH
                                (#xFD97 . #x9FA1)	;CJK UNIFIED IDEOGRAPH
                                (#xFD98 . #x9FA2)	;CJK UNIFIED IDEOGRAPH
                                (#xFD99 . #x9FA3)	;CJK UNIFIED IDEOGRAPH
                                (#xFD9A . #x9FA4)	;CJK UNIFIED IDEOGRAPH
                                (#xFD9B . #x9FA5)	;CJK UNIFIED IDEOGRAPH
                                (#xFD9C . #xF92C)	;CJK COMPATIBILITY IDEOGRAPH
                                (#xFD9D . #xF979)	;CJK COMPATIBILITY IDEOGRAPH
                                (#xFD9E . #xF995)	;CJK COMPATIBILITY IDEOGRAPH
                                (#xFD9F . #xF9E7)	;CJK COMPATIBILITY IDEOGRAPH
                                (#xFDA0 . #xF9F1)	;CJK COMPATIBILITY IDEOGRAPH
                                (#xFE40 . #xFA0C)	;CJK COMPATIBILITY IDEOGRAPH
                                (#xFE41 . #xFA0D)	;CJK COMPATIBILITY IDEOGRAPH
                                (#xFE42 . #xFA0E)	;CJK COMPATIBILITY IDEOGRAPH
                                (#xFE43 . #xFA0F)	;CJK COMPATIBILITY IDEOGRAPH
                                (#xFE44 . #xFA11)	;CJK COMPATIBILITY IDEOGRAPH
                                (#xFE45 . #xFA13)	;CJK COMPATIBILITY IDEOGRAPH
                                (#xFE46 . #xFA14)	;CJK COMPATIBILITY IDEOGRAPH
                                (#xFE47 . #xFA18)	;CJK COMPATIBILITY IDEOGRAPH
                                (#xFE48 . #xFA1F)	;CJK COMPATIBILITY IDEOGRAPH
                                (#xFE49 . #xFA20)	;CJK COMPATIBILITY IDEOGRAPH
                                (#xFE4A . #xFA21)	;CJK COMPATIBILITY IDEOGRAPH
                                (#xFE4B . #xFA23)	;CJK COMPATIBILITY IDEOGRAPH
                                (#xFE4C . #xFA24)	;CJK COMPATIBILITY IDEOGRAPH
                                (#xFE4D . #xFA27)	;CJK COMPATIBILITY IDEOGRAPH
                                (#xFE4E . #xFA28)	;CJK COMPATIBILITY IDEOGRAPH
                                (#xFE4F . #xFA29)	;CJK COMPATIBILITY IDEOGRAPH
                                ;; end of cp936-to-unicode-table
                                )))
  ;; TODO setup the hash tables
  ;; ??
  (dotimes (i 128)
    (push (cons i i) gb2312-to-unicode-table)
    (push (cons i i) cp936-to-unicode-table))
  (setq *gb2312-to-unicode-map* (init-pv-map gb2312-to-unicode-table)
        *unicode-to-gb2312-map* (init-pv-map gb2312-to-unicode-table :reverse-mapping t)
        *cp936-to-unicode-map* (init-pv-map cp936-to-unicode-table)
        *unicode-to-cp936-map* (init-pv-map cp936-to-unicode-table :reverse-mapping t))
    
  )

(defun gb2312-to-unicode (code)
  (pv-map-lookup code *gb2312-to-unicode-map*))

(defun unicode-to-gb2312 (code)
  (pv-map-lookup code *unicode-to-gb2312-map*))

(defun cp936-to-unicode (code)
  (pv-map-lookup code *cp936-to-unicode-map*))

(defun unicode-to-cp936 (code)
  (pv-map-lookup code *unicode-to-cp936-map*))


(defmacro define-cn-encoding (name docstring aliases max-units-per-char
                              from-ucs
                              to-ucs
                              length-by-code
                              length-by-1st-unit)
  `(define-character-encoding ,name
       ,docstring
     :aliases ,aliases
     :native-endianness nil
     :max-units-per-char ,max-units-per-char
     :stream-encode-function
     ;; convert from unicode to the specific encoding and write to string
     (lambda (char write-function stream)
       (let ((code (,from-ucs (char-code char))))
         (cond ((null code)
                (funcall write-function stream #.(char-code #\?))
                1)
               ((< code #x100)
                (funcall write-function stream code)
                1)
               ((< code #x10000)
                (funcall write-function stream (logand #xff (ash code -8)))
                (funcall write-function stream (logand code #xff))
                2)
               (t
                (funcall write-function stream (logand #xff (ash code -16)))
                (funcall write-function stream (logand #xff (ash code -8)))
                (funcall write-function stream (logand code #xff))
                3))))
     :stream-decode-function
     ;; convert to unicode
     (lambda (1st-unit next-unit-function stream)
       (declare (type (unsigned-byte 8) 1st-unit))
       (let ((code
              (case ,length-by-1st-unit
                (3 (let ((2nd-unit (funcall next-unit-function stream)))
                     (if (eq 2nd-unit :eof)
                         :eof
                         (let ((3rd-unit (funcall next-unit-function stream)))
                           (if (eq 3rd-unit :eof)
                               :eof
                               (logior ; #x8f0000 <- why this ?
                                (ash 1st-unit 16) ; combine the code
                                (ash 2nd-unit 8)
                                3rd-unit))))))
                (2 (let ((2nd-unit (funcall next-unit-function stream)))
                     (if (eq 2nd-unit :eof)
                         :eof
                         (logior (ash 1st-unit 8)
                                 2nd-unit))))
                (1 1st-unit))))
         (if (eq code :eof)
             :eof
             (let ((ucs (,to-ucs code)))
               (if ucs
                   (code-char ucs)
                   #\?)))))
     :vector-encode-function
     ;; convert from unicode
     (lambda (string vector idx start end)
       (declare (type (simple-array (unsigned-byte 8) (*)) vector)
                (fixnum idx))
       (do* ((i start (1+ i)))
            ((>= i end) idx)
         (let* ((char (schar string i))
                (code (,from-ucs (char-code char))))
           (cond ((null code)
                  (setf (aref vector idx) #.(char-code #\?))
                  (incf idx))
                 ((< code #x100)
                  (setf (aref vector idx) code)
                  (incf idx))
                 ((< code #x10000)
                  (setf (aref vector idx) (logand #xff (ash code -8)))
                  (setf (aref vector (the fixnum (1+ idx))) (logand code #xff))
                  (incf idx 2))
                 (t
                  (setf (aref vector idx) (logand #xff (ash code -16)))
                  (setf (aref vector (the fixnum (1+ idx)))
                        (logand #xff (ash code -8)))
                  (setf (aref vector (the fixnum (+ idx 2))) (logand code #xff))
                  (incf idx 3))))))
     :vector-decode-function
     ;; convert to unicode
     (lambda (vector idx noctets string)
       (declare (type (simple-array (unsigned-byte 8) (*)) vector)
                (type index idx))
       (do* ((i 0 (1+ i))
             (end (+ idx noctets))
             (index idx (1+ index)))
            ((= index end) index)
         (let* ((1st-unit (aref vector index)))
           (declare (type (unsigned-byte 8) 1st-unit))
           (let* ((code (,to-ucs
                         (case ,length-by-1st-unit
                           (3 (logior
                               ;#x8f0000
                               (ash (aref vector index) 16)
                               (ash (aref vector (incf index)) 8)
                               (aref vector (incf index))))
                           (2 (logior
                               (ash 1st-unit 8)
                               (aref vector (incf index))))
                           (1 1st-unit))))
                  (char (and code (code-char code))))
             (setf (schar string i) (or char #\?))))))
     :memory-encode-function
     ;; convert from unicode
     (lambda (string pointer idx start end)
       (declare (fixnum idx))
       (do* ((i start (1+ i)))
            ((>= i end) idx)
         (let* ((code (,from-ucs (char-code (schar string i)))))
           (cond ((null code)
                  (setf (%get-unsigned-byte pointer idx) #.(char-code #\?))
                  (incf idx))
                 ((< code #x100)
                  (setf (%get-unsigned-byte pointer idx) code)
                  (incf idx))
                 ((< code #x10000)
                  (setf (%get-unsigned-byte pointer idx)
                        (logand #xff (ash code -8)))
                  (setf (%get-unsigned-byte pointer (the fixnum (1+ idx)))
                        (logand code #xff))
                  (incf idx 2))
                 (t
                  (setf (%get-unsigned-byte pointer idx)
                        (logand #xff (ash code -16)))
                  (setf (%get-unsigned-byte pointer (the fixnum (1+ idx)))
                        (logand #xff (ash code -8)))
                  (setf (%get-unsigned-byte pointer (the fixnum (+ 2 idx)))
                        (logand code #xff))
                  (incf idx 3))))))
     :memory-decode-function
     ;; convert to unicode
     (lambda (pointer noctets idx string)
       (declare (fixnum noctets idx))
       (do* ((i 0 (1+ i))
             (end (+ idx noctets))
             (index idx (1+ index)))
            ((>= index end) (if (= index end) index 0))
         (let* ((1st-unit (%get-unsigned-byte pointer index)))
           (declare (type (unsigned-byte 8) 1st-unit))
           (let* ((code
                   (,to-ucs
                    (case ,length-by-1st-unit
                      (3 (logior
                          ; #x8f0000
                          (ash (%get-unsigned-byte pointer index) 16)
                          (ash (%get-unsigned-byte
                                pointer (incf index)) 8)
                          (%get-unsigned-byte pointer (incf index))))
                      (2 (logior
                          (ash 1st-unit 8)
                          (%get-unsigned-byte pointer (incf index))))
                      (1 1st-unit))))
                  (char (if code (code-char code) #\?)))
             (setf (schar string i) char)))))
     :octets-in-string-function
     (lambda (string start end)
       (if (>= end start)
           (do* ((noctets 0)
                 (i start (1+ i)))
                ((= i end) noctets)
             (declare (fixnum noctets))
             (let* ((code (,from-ucs (char-code (schar string i)))))
               (if code
                   (incf noctets ,length-by-code)
                   (incf noctets))))
           0))
     :length-of-vector-encoding-function
     (lambda (vector start end)
       (declare (type (simple-array (unsigned-byte 8) (*)) vector))
       (do* ((i start)
             (nchars 0))
            ((>= i end)
             (values nchars i))
         (declare (fixnum i))
         (let* ((1st-unit (aref vector i))
                (nexti (+ i ,length-by-1st-unit)))
           (declare (type (unsigned-byte 8) 1st-unit))
           (if (> nexti end)
               (return (values nchars i))
               (setq nchars (1+ nchars) i nexti)))))
     :length-of-memory-encoding-function
     (lambda (pointer noctets start)
       (do* ((i start)
             (end (+ start noctets))
             (nchars 0 (1+ nchars)))
            ((= i end) (values nchars (- i start)))
         (let* ((1st-unit (%get-unsigned-byte pointer i))
                (nexti (+ i ,length-by-1st-unit)))
           (declare (type (unsigned-byte 8) 1st-unit))
           (if (> nexti end)
               (return (values nchars (- i start)))
               (setq i nexti)))))
     :decode-literal-code-unit-limit #x80
     :encode-literal-char-code-limit #x80
     :character-size-in-octets-function
     (lambda (c)
       (let ((code (,from-ucs (char-code c))))
         (if code
             ,length-by-code
             1)))))
	
;; 0x80 added
(define-cn-encoding :gb2312
    "An 8-bit, variable-length character encoding in which
character code points in the range #x00-#x80 can be encoded in a
single octet; characters with larger code values can be encoded
in 2 bytes.

    Alias :gb2312-80 :gb2312-1980 :euc-cn :euccn"
  '(:gb2312-80 :gb2312-1980  :euc-cn :euccn)
  2
  unicode-to-gb2312
  gb2312-to-unicode 
  (cond ((<= code #x100) 1)
        (t 2))
  (cond ((and (>= 1st-unit #xa1) ; the range of the first byte is 0xA1-0xF7
              (<= 1st-unit #xf7)) 
         2)
        (t 1)))

(define-cn-encoding :cp936
    "An 8-bit, variable-length character encoding in which
character code points in the range #x00-#x80 can be encoded in a
single octet; characters with larger code values can be encoded
in 2 bytes.

    Alias :gbk :ms936 :windows-936"
  '(:gbk :ms936 :windows-936)
  2
  unicode-to-cp936
  cp936-to-unicode 
  (cond ((<= code #x100) 1)
        (t 2))
  (cond ((and (>= 1st-unit #x81) ; Loosely speaking, the first byte is in the range 81–FE (that is, never 80 or FF), and the second byte is 40–7E for some areas and 80–FE for others.
              (<= 1st-unit #xfe)) 
         2)
        (t 1)))


         

 
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3
;;;; END FILE ./reference/ccl/library/cn-encode.lisp
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4n









;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4n









;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4n









;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4n











\;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1
;;;; BEGIN FILE ./reference/ccl/library/mach-o-symbols.lisp
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2
;;;
;;; Copyright 2009 Clozure Associates
;;;
;;; Licensed under the Apache License, Version 2.0 (the "License");
;;; you may not use this file except in compliance with the License.
;;; You may obtain a copy of the License at
;;;
;;;     http://www.apache.org/licenses/LICENSE-2.0
;;;
;;; Unless required by applicable law or agreed to in writing, software
;;; distributed under the License is distributed on an "AS IS" BASIS,
;;; WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
;;; See the License for the specific language governing permissions and
;;; limitations under the License.

(in-package "CCL")

;;; String tables: used both for symbol names and for section names.
(defstruct mach-o-string-table
  (hash (make-hash-table :test #'equal))
  (string (make-array 100 :element-type '(unsigned-byte 8) :fill-pointer 1 :adjustable t)))

;;; Collect info about Mach-O symbols.
(defstruct mach-o-symbol-table
  (strings (make-mach-o-string-table))
  data                                  ; foreign pointer
  nsyms
  )

(defun mach-o-lisp-function-name (f)
  (let* ((name (format nil "~s" f)))
    (subseq (nsubstitute #\0 #\# (nsubstitute #\. #\Space name)) 1)))

(defun mach-o-register-string (string table)
  (let* ((hash (mach-o-string-table-hash table))
         (s (mach-o-string-table-string table)))
    (when (gethash string hash)
      (format t "~& duplicate: ~s" string))
    (or (gethash string hash)
        (setf (gethash string hash)
              (let* ((n (length s)))
                (dotimes (i (length string) (progn (vector-push-extend 0 s) n))
                  (let* ((code (char-code (char string i))))
                    (declare (type (mod #x110000 code)))
                    (if (> code 255)
                      (vector-push-extend (char-code #\sub) s)
                      (vector-push-extend code s)))))))))

(defun readonly-area-bounds ()
  (ccl::do-gc-areas (a)
    (when (eql (ccl::%fixnum-ref a target::area.code)
	       ccl::area-readonly)
      (return
	(values (ash (ccl::%fixnum-ref a target::area.low) target::fixnumshift)
		(ash (ccl::%fixnum-ref a target::area.active) target::fixnumshift))))))

#+ppc-target
(defun collect-mach-o-static-functions ()
  (purify)
  (multiple-value-bind (readonly-low readonly-high)
      (readonly-area-bounds)
    (let* ((hash (make-hash-table :test #'eq)))
      (ccl::%map-lfuns #'(lambda (f)
			   (let* ((code-vector (ccl:uvref f 0))
				  (startaddr (+ (ccl::%address-of code-vector)
						target::misc-data-offset)))
			     (when (and (>= startaddr readonly-low)
					(< startaddr readonly-high))
			       (push f (gethash code-vector hash))))))
      (collect ((functions))
	(maphash #'(lambda (k v)
		     (declare (ignore k))
		     (if (null (cdr v))
		       (functions (car v))))
		 hash)
        (values (sort (functions)
		      #'(lambda (x y)
			  (< (ccl::%address-of  (uvref x 0))
			     (ccl::%address-of  (uvref y 0)))))
		readonly-low
		(- readonly-high readonly-low))))))

(defun register-mach-o-functions (functions section-number)
  (let* ((n (length functions))
	 (nlist-len #+64-bit-target (record-length :nlist_64)
		    #+32-bit-target (record-length :nlist))
	 (data (#_calloc n nlist-len))
	 (string-table (make-mach-o-string-table)))
    (declare (fixnum n))
    (do* ((i 0 (1+ i))
	  (p (%inc-ptr data 0) (progn (%incf-ptr p nlist-len) p))
	  (f (pop functions) (pop functions)))
	 ((= i n)
	  (make-mach-o-symbol-table :strings string-table :data data :nsyms n))
      (declare (fixnum i))
      (let* ((namidx (mach-o-register-string (mach-o-lisp-function-name f) string-table))
	     (value (%address-of #+ppc-target (uvref f 0) #-ppc-target g))
	     (type #$N_SECT))
      #+32-bit-target
      (setf (pref p :nlist.n_un.n_strx) namidx
	    (pref p :nlist.n_value) value
	    (pref p :nlist.n_type) type
	    (pref p :nlist.n_other) section-number)
      #+64-bit-target
      (setf (pref p :nlist_64.n_un.n_strx) namidx
	    (pref p :nlist_64.n_value) value
	    (pref p :nlist_64.n_type) type
	    (pref p :nlist_64.n_sect) section-number)))))

(defun write-mach-o-symbol-info (fd symtab)
  (let* ((symoff *host-page-size*)
	 (nsyms (mach-o-symbol-table-nsyms symtab))
	 (symsize (* nsyms (record-length #+64-bit-target :nlist_64
						   #+32-bit-target :nlist)))
	 (stroff (+ symoff symsize))
	 (string (mach-o-string-table-string (mach-o-symbol-table-strings symtab)))
	 (strsize (length string))
	 (bytes (array-data-and-offset string))
	 (strbuf (#_malloc strsize)))
    (%copy-ivector-to-ptr bytes 0 strbuf 0 strsize)
    (fd-lseek fd symoff #$SEEK_SET)
    (fd-write fd (mach-o-symbol-table-data symtab) symsize)
    (fd-write fd strbuf strsize)
    (values symoff nsyms stroff strsize)))

(defun write-mach-o-load-commands (fd pos)
  (multiple-value-bind (functions start length)
      (collect-mach-o-static-functions)
    (let* ((symbols (register-mach-o-functions functions 1)))
      (multiple-value-bind (symoff nsyms stroff strsize)
	  (write-mach-o-symbol-info fd symbols)
	(rlet ((symtab :symtab_command
		 :cmd #$LC_SYMTAB
		 :cmdsize (record-length :symtab_command)
		 :symoff symoff
		 :nsyms nsyms
		 :stroff stroff
		 :strsize strsize))
	  (let* ((segsize (record-length #+64-bit-target :segment_command_64
					 #+32-bit-target :segment_command))
		 (sectsize (record-length #+64-bit-target :section_64
					 #+32-bit-target :section))
		 (totalsize (+ segsize sectsize)))
	    (%stack-block ((segment totalsize :clear t))
	      (let* ((section (%inc-ptr segment segsize)))
		#+64-bit-target
		(progn
		  (setf (pref segment :segment_command_64.cmd) #$LC_SEGMENT_64
			(pref segment :segment_command_64.cmdsize) totalsize)
		  (%cstr-pointer #$SEG_DATA
				 (pref segment :segment_command_64.segname)
				 nil)
		  (setf (pref segment :segment_command_64.vmaddr) start
			(pref segment :segment_command_64.vmsize) length
			(pref segment :segment_command_64.fileoff) 0
			(pref segment :segment_command_64.filesize) 0
			(pref segment :segment_command_64.maxprot) 0
			(pref segment :segment_command_64.initprot) 0
			(pref segment :segment_command_64.nsects) 1)
		  (%cstr-pointer "__lisp" (pref section :section_64.sectname) nil)
		  (%cstr-pointer #$SEG_DATA (pref section :section_64.segname) nil)
		  (setf (pref section :section_64.addr) start
			(pref section :section_64.size) length
			(pref section :section_64.align) 12))
		#+32-bit-target
		(progn
		  (setf (pref segment :segment_command.cmd) #$LC_SEGMENT
			(pref segment :segment_command.cmdsize) totalsize)
		  (%cstr-pointer #$SEG_DATA
				 (pref segment :segment_command.segname)
				 nil)
		  (setf (pref segment :segment_command.vmaddr) start
			(pref segment :segment_command.vmsize) length
			(pref segment :segment_command.fileoff) 0
			(pref segment :segment_command.filesize) 0
			(pref segment :segment_command.maxprot) 0
			(pref segment :segment_command.initprot) 0
			(pref segment :segment_command.nsects) 1)
		  (%cstr-pointer "__lisp" (pref section :section.sectname) nil)
		  (%cstr-pointer #$SEG_DATA (pref section :section.segname) nil)
		  (setf (pref section :section.addr) start
			(pref section :section.size) length
			(pref section :section.align) 12))
		(fd-lseek fd pos #$SEEK_SET)
		(fd-write fd segment totalsize)
		(fd-write fd symtab (record-length :symtab_command))
		(values 2
			(+ totalsize (record-length :symtab_command)))))))))))

    
(defun write-mach-header (fd)
  (let* ((n (record-length #+64-bit-target :mach_header_64
			   #+32-bit-target :mach_header)))
    (multiple-value-bind (ncmds cmd-size)
	(write-mach-o-load-commands fd n)
      (rlet ((header #+64-bit-target :mach_header_64 #+32-bit-target :mach_header
		     :magic #+64-bit-target #$#$MH_MAGIC_64 #+32-bit-target #$MH_MAGIC
		     :cputype (logior #+64-bit-target #$CPU_ARCH_ABI64
				      #+32-bit-target 0
				      #+ppc-target #$CPU_TYPE_POWERPC
				      #+x86-target #$CPU_TYPE_X86)
		     :cpusubtype #+x86-target #$CPU_SUBTYPE_X86_ALL #+ppc-target #$CPU_SUBTYPE_POWERPC_ALL
		     :filetype #$MH_BUNDLE
		     :ncmds ncmds
		     :sizeofcmds cmd-size
		     :flags (logior #$MH_NOUNDEFS)))
	(fd-lseek fd 0 #$SEEK_SET)
	(let* ((res (fd-write fd header n)))
	  (unless (eql res n)
	    (%errno-disp res)))
	(fd-close fd)))))
	   

    
		 
  
		  
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3
;;;; END FILE ./reference/ccl/library/mach-o-symbols.lisp
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4n









;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4n









;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4n









;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4n











\;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1
;;;; BEGIN FILE ./reference/ccl/library/swank-loader.lisp
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2
;;;-*- Mode: Lisp; Package: CCL -*-
;;;
;;; Copyright 2011 Clozure Associates
;;;
;;; Licensed under the Apache License, Version 2.0 (the "License");
;;; you may not use this file except in compliance with the License.
;;; You may obtain a copy of the License at
;;;
;;;     http://www.apache.org/licenses/LICENSE-2.0
;;;
;;; Unless required by applicable law or agreed to in writing, software
;;; distributed under the License is distributed on an "AS IS" BASIS,
;;; WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
;;; See the License for the specific language governing permissions and
;;; limitations under the License.
;;;

(in-package :ccl)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; 
;; Standard swank startup
;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; (export '(load-swank start-swank-server start-swank-loader stop-swank-loader))

(defun swankvar (name &optional (package :swank))
  (symbol-value (find-symbol name package)))

(defun (setf swankvar) (value name &optional (package :swank))
  (let ((sym (find-symbol name package)))
    (if (null sym)
      (warn "Couldn't find ~a::~a" package name)
      (set sym value))))

(defun load-swank (load-path)
  (when (find-package :swank-loader) (delete-package :swank-loader)) ;; so can tell if loaded
  (load (merge-pathnames load-path "swank-loader.lisp"))
  (unless (and (find-package :swank-loader)
               (find-symbol "INIT" :swank-loader))
    (error "~s is not a swank loader path" load-path))
  (funcall (find-symbol "INIT" :swank-loader))
  (unless (and (find-package :swank)
               (find-symbol "CREATE-SERVER" :swank))
    (error "Incompatible swank version loaded from ~s" load-path)))

(defun start-swank-server (&key
                           (port (swankvar "DEFAULT-SERVER-PORT"))
                           (debug (swankvar "*LOG-EVENTS*"))
                           (dedicated-output-port (and (swankvar "*USE-DEDICATED-OUTPUT-STREAM*")
                                                       (swankvar "*DEDICATED-OUTPUT-STREAM-PORT*")))
                           (globally-redirect-io (swankvar "*GLOBALLY-REDIRECT-IO*"))
                           (global-debugger (swankvar "*GLOBAL-DEBUGGER*"))
                           (indentation-updates (swankvar "*CONFIGURE-EMACS-INDENTATION*"))
                           (dont-close (swankvar "*DONT-CLOSE*"))
                           (coding-system "iso-latin-1-unix")
                           (style :spawn))
  "Assuming SWANK is already loaded, create a swank server on the specified port"
  (when debug
    (setf (swankvar "*LOG-EVENTS*" :swank-rpc) t)
    (setf (swankvar "*SWANK-DEBUG-P*") t)
    (setf (swankvar "*DEBUG-ON-SWANK-PROTOCOL-ERROR*") t))
  (when (setf (swankvar "*USE-DEDICATED-OUTPUT-STREAM*") (not (null dedicated-output-port)))
    (setf (swankvar "*DEDICATED-OUTPUT-STREAM-PORT*") dedicated-output-port))
  (setf (swankvar "*GLOBALLY-REDIRECT-IO*") globally-redirect-io)
  (setf (swankvar "*GLOBAL-DEBUGGER*") global-debugger)
  (setf (swankvar "*CONFIGURE-EMACS-INDENTATION*") indentation-updates)
  (funcall (find-symbol "CREATE-SERVER" :swank)
           :style style
           :port port
           :dont-close dont-close
           :coding-system coding-system))


(defun swank-port-active? (port)
  (and (find-package :swank) (getf (swankvar "*LISTENER-SOCKETS*") port)))


;; Special ccl slime extension to allow the client to specify the swank path

(defvar *swank-loader-process* nil)
(defparameter $emacs-ccl-swank-request-marker "[emacs-ccl-swank-request]")
(defparameter *default-swank-loader-port* 4884)

(defun stop-swank-loader ()
  (when *swank-loader-process*
    (process-kill (shiftf *swank-loader-process* nil))))

(defun start-swank-loader (&optional (port *default-swank-loader-port*))
  (ignore-errors (stop-swank-loader))
  (let ((semaphore (make-semaphore))
        (errorp nil))
    (setq *swank-loader-process*
          ;; Wait for either a swank client to connect or the special ccl slime kludge
          (process-run-function "Swank Loader"
                                (lambda (sem)
                                  (setq *swank-loader-process* *current-process*)
                                  (unwind-protect
                                      (with-open-socket (socket :connect :passive :local-port port
                                                                :reuse-address t)
                                        (signal-semaphore (shiftf sem nil))
                                        (loop
                                          (let* ((stream (accept-connection socket))
                                                 (line (read-line stream nil)))
                                            (multiple-value-bind (path port)
                                                                 (parse-emacs-ccl-swank-request line)
                                              (let ((message (handler-case
                                                                 (if (swank-port-active? port)
                                                                   (format nil "Swank is already active on port ~s" port)
                                                                   (progn
                                                                     (load-swank path)
                                                                     (start-swank-server :port port)
                                                                     nil))
                                                               (error (c) (princ-to-string c)))))
                                                (prin1 `(:active (and (swank-port-active? port) t)
                                                                 :loader ,path
                                                                 :message ,message
                                                                 :port ,port)
                                                       stream)
                                                (finish-output stream))))))
                                    (when sem ;; in case exit before finished startup
                                      (setq errorp t)
                                      (signal-semaphore sem))))
                                semaphore))
    (wait-on-semaphore semaphore)
    (when errorp
      (ignore-errors (process-kill (shiftf *swank-loader-process* nil))))
    *swank-loader-process*))

(defun parse-emacs-ccl-swank-request (line)
  (let ((start (length $emacs-ccl-swank-request-marker)))
    (when (and (< start (length line))
               (string= $emacs-ccl-swank-request-marker line :end2 start))
      (let* ((split-pos (position #\: line :start start))
             (port (parse-integer line :junk-allowed nil :start start :end split-pos))
             (path-pos (position-if-not #'whitespacep line
                                        :start (if split-pos (1+ split-pos) start)))
             (path (subseq line path-pos
                           (1+ (position-if-not #'whitespacep line :from-end t)))))
        (values path port)))))




;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3
;;;; END FILE ./reference/ccl/library/swank-loader.lisp
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4n









;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4n









;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4n









;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4n











\;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1
;;;; BEGIN FILE ./reference/ccl/library/lispequ.lisp
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2
;;;-*-Mode: LISP; Package: CCL -*-
;;;
;;; Copyright 1994-2009 Clozure Associates
;;;
;;; Licensed under the Apache License, Version 2.0 (the "License");
;;; you may not use this file except in compliance with the License.
;;; You may obtain a copy of the License at
;;;
;;;     http://www.apache.org/licenses/LICENSE-2.0
;;;
;;; Unless required by applicable law or agreed to in writing, software
;;; distributed under the License is distributed on an "AS IS" BASIS,
;;; WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
;;; See the License for the specific language governing permissions and
;;; limitations under the License.

;; LispEqu.lisp

(in-package "CCL")

(defconstant $flags_Normal 0)
(defconstant $flags_DisposeRecursiveLock 1)
(defconstant $flags_DisposPtr 2)
(defconstant $flags_DisposeRwlock 3)
(defconstant $flags_DisposeSemaphore 4)

(defconstant $system-lock-type-recursive 0)
(defconstant $system-lock-type-rwlock 1)

;;; this stuff is really ppc specific at the moment
(defconstant $population_weak-list 0)
(defconstant $population_weak-alist 1)
(defconstant $population_termination-bit 16)

;;; type of 0 is a weak-list
;;; Note that this evals its args in the wrong order.
(defmacro %cons-population (data &optional (type 0) (termination? nil))
  (if termination?
    `(gvector :population 0 (logior (ash 1 $population_termination-bit) ,type) ,data nil)
    `(gvector :population 0 ,type ,data)))

(defmacro %cons-terminatable-alist (&optional data)
  `(%cons-population ,data $population_weak-alist t))

;;; The GC assumes that this structure is laid out exactly as below.
;;; It also assumes that if the $population_termination-bit is set in the
;;; population.type slot, the vector is of length 4, otherwise 3.
(def-accessors (population) %svref
  population.gclink
  population.type
  population.data
  population.termination-list)

(def-accessors () uvref
  nil
  nil
  population-data                      ; type-checked
  population-termination-list)

(defmacro %cons-pool (&optional data)
  `(gvector :pool ,data))

(def-accessors (pool) %svref
  pool.data)

(def-accessors (resource) %svref
  nil                                   ; 'resource
  resource.constructor
  resource.destructor
  resource.initializer
  resource.pool
  resource.lock)

(defmacro gvector (type-keyword &rest initial-values)
  `(%gvector ,(type-keyword-code type-keyword) ,@initial-values))


(defmacro allocate-typed-vector (type-keyword elements &optional (init nil init-p))
  `(%alloc-misc ,elements ,(type-keyword-code type-keyword)
    ,@(if init-p `(,init))))
    

(def-accessors (semaphore) %svref
  nil					;'semaphore
  semaphore.value)


(defmacro %istruct (istruct-name &rest initial-values)
  `(gvector :ISTRUCT (register-istruct-cell ,istruct-name) ,@initial-values))


(defmacro %cons-resource (constructor &optional destructor initializer)
  `(%istruct 'resource ,constructor ,destructor ,initializer (%cons-pool) (make-lock)))



;;; Symbol [f,v]bits.

(defconstant $sym_bit_bound 0)		;Proclaimed bound.
(defconstant $sym_bit_const 1)
(defconstant $sym_bit_global 2)         ;Should never be lambda-bound.
(defconstant $sym_bit_special 4)
(defconstant $sym_vbit_typeppred 5)
(defconstant $sym_bit_indirect 6)
(defconstant $sym_bit_defunct 7)

(defconstant $sym_vbit_bound $sym_bit_bound)
(defconstant $sym_vbit_const $sym_bit_const)
(defconstant $sym_vbit_global $sym_bit_global)
(defconstant $sym_vbit_special $sym_bit_special)
(defconstant $sym_vbit_indirect $sym_bit_indirect)
(defconstant $sym_vbit_defunct $sym_bit_defunct)

(defconstant $sym_fbit_frozen (+ 8 $sym_bit_bound))
(defconstant $sym_fbit_special (+ 8 $sym_bit_special))
(defconstant $sym_fbit_indirect (+ 8 $sym_bit_indirect))
(defconstant $sym_fbit_defunct (+ 8 $sym_bit_defunct))

(defconstant $sym_fbit_constant_fold (+ 8 $sym_bit_const))
(defconstant $sym_fbit_fold_subforms (+ 8 $sym_bit_global))



;Lfun bits.
;Assumed to be a fixnum, so if you ever assign a bit number > 28,
;change lfun-bits and its callers.  Do the same if you change the
;number of bits in a fixnum, too.  Ignore other sign.
(defconstant $lfbits-nonnullenv-bit 0)
(defconstant $lfbits-keys-bit 1)
(defconstant $lfbits-numopt (byte 5 2))
(defconstant $lfbits-restv-bit 7)
(defconstant $lfbits-numreq (byte 6 8))
(defconstant $lfbits-optinit-bit 14)
(defconstant $lfbits-rest-bit 15)
(defconstant $lfbits-aok-bit 16)
(defconstant $lfbits-numinh (byte 6 17))
(defconstant $lfbits-info-bit 23)
(defconstant $lfbits-trampoline-bit 24)
(defconstant $lfbits-code-coverage-bit 25)
(defconstant $lfbits-cm-bit 26)         ; combined-method
(defconstant $lfbits-nextmeth-bit 26)   ; or call-next-method with method-bit
(defconstant $lfbits-gfn-bit 27)        ; generic-function
(defconstant $lfbits-nextmeth-with-args-bit 27)   ; or call-next-method-with-args with method-bit
(defconstant $lfbits-method-bit 28)     ; method function
(defconstant $lfbits-noname-bit 29)


(defconstant $lfbits-args-mask
  (%ilogior (dpb -1 $lfbits-numreq 0)
            (dpb -1 $lfbits-numopt 0)
            (%ilsl $lfbits-rest-bit 1)
            (%ilsl $lfbits-keys-bit 1)
            (%ilsl $lfbits-aok-bit 1)))

;Bits in $arh_bits.
(defconstant $arh_adjp_bit 7)		;adjustable-p
(defconstant $arh_fill_bit 6)		;fill-pointer-p
(defconstant $arh_disp_bit 5)		;displaced to another array header -p
(defconstant $arh_simple_bit 4)		;not adjustable, no fill-pointer and
					; not user-visibly displaced -p
(defconstant $arh_exp_disp_bit 3)	;explicitly-displaced -p

(def-accessors (lexical-environment) %svref
  ()					; 'lexical-environment
  lexenv.parent-env
  lexenv.functions
  lexenv.variables
  lexenv.fdecls				; function-binding decls, e.g., [NOT]INLINE, FTYPE
  lexenv.vdecls				; variable-binding decls, e.g., SPECIAL, TYPE
  lexenv.mdecls				; misc decls, e.g., OPTIMIZE
  lexenv.lambda				; unique id (e.g., afunc) of containing lambda expression.
  )

(def-accessors (definition-environment) %svref
  ()					; 'definition-environment
  defenv.type				; must be LIST, match lexenv.parent-env
  defenv.functions			; compile-time macros, same structure as lexenv.functions
  defenv.constants			; definition-time constants, shadows lexenv.variables
  defenv.fdecls				; shadows lexenv.fdecls
  defenv.vdecls				; shadows lexenv.vdecls
  defenv.mdecls				; shadows lexenv.mdecls
;;; extended info
  defenv.types				; compile-time deftype info, shadows lexenv.function
  defenv.defined			; functions defined in compilation unit.
  defenv.specials
  defenv.classes                        ; classed defined in compilation unit
  defenv.structrefs                     ; compile-time DEFSTRUCT accessor info
  defenv.structures                     ; compile-time DEFSTRUCT info
  defenv.symbol-macros			; compile-time SYMBOL-MACROS.
)



(def-accessors (package) %svref
  pkg.itab
  pkg.etab
  pkg.used
  pkg.used-by
  pkg.names
  pkg.shadowed
  pkg.lock
  pkg.intern-hook
  )

(defmacro package-deleted-marker ()
  `(%unbound-marker))




(defmacro %cons-fake-stack-frame (&optional sp next-sp fn lr vsp xp link)
  `(%istruct 'fake-stack-frame ,sp ,next-sp ,fn ,lr ,vsp ,xp ,link))

(def-accessors () svref
  bt.dialog
  bt.youngest
  bt.oldest
  bt.tcr
  bt.restarts
  bt.top-catch
  bt.break-condition
  bt.current
  bt.fake-frames
  bt.db-link
  bt.break-level)

(defconstant bt.sg bt.tcr)
(setf (macro-function 'bt.sg) (macro-function 'bt.tcr))


(def-accessors (lock) %svref
  lock.value
  lock.name)






  
;contents of pkg.itab/pkg.etab.
(defmacro pkgtab-table (htab) `(car (the list ,htab)))
#|
(defmacro pkgtab-hcount (htab) `(car (the list (cdr (the list ,htab)))))                                            (mkint acc)))
(defmacro pkgtab-hlimit (htab) `(cdr (the list (cdr (the list ,htab)))))
|#



(def-accessors (pathname) %svref
  ()                                    ; 'pathname
  %pathname-directory
  %pathname-name
  %pathname-type
  %physical-pathname-version
  %physical-pathname-device)

(def-accessors (logical-pathname) %svref
  ()                                    ; 'logical-pathname
  nil                                   ; %pathname-directory
  nil                                   ; %pathname-name
  nil                                   ; %pathname-type  
  %logical-pathname-host
  %logical-pathname-version)

(defmacro %cons-pathname (directory name type &optional version device)
  `(%istruct 'pathname ,directory ,name ,type ,version ,device))

(defmacro %cons-logical-pathname (directory name type host version)
  `(%istruct 'logical-pathname ,directory ,name ,type ,host ,version))

(def-accessors (restart) %svref
  ()                                    ; 'restart
  %restart-name
  %restart-action
  %restart-report
  %restart-interactive
  %restart-test)

;;; %cons-restart now in level-2.lisp


(def-accessors %svref
  nil                                   ; 'periodic-task
  ptask.state
  ptask.name
  ptask.function
)

;;;;;; CMU type system.



(def-accessors (type-class) %svref
  nil                                   ; 'type-class
  type-class-name                       ; name

  ;; Dyadic type methods.  If the classes of the two types are EQ, then we call
  ;; the SIMPLE-xxx method.  If the classes are not EQ, and either type's class
  ;; has a COMPLEX-xxx method, then we call it.
  ;;
  ;; Although it is undefined which method will get precedence when both types
  ;; have a complex method, the complex method can assume that the second arg
  ;; always is in its class, and the first always is not.  The arguments to
  ;; commutative operations will be swapped if the first argument has a complex
  ;; method.
  ;;
  ;; Since SUBTYPEP is not commutative, we have two complex methods.  the ARG1
  ;; method is only called when the first argument is in its class, and the
  ;; ARG2 method is only called when called when the second type is.  If either
  ;; is specified, both must be.
  type-class-simple-subtypep
  type-class-complex-subtypep-arg1
  type-class-complex-subtypep-arg2
  ;;
  ;; SIMPLE-UNION combines two types of the same class into a single type of
  ;; that class.  If the result is a two-type union, then return NIL.
  ;; VANILLA-UNION returns whichever argument is a supertype of the other, or
  ;; NIL.
  type-class-simple-union
  type-class-complex-union
  ;; The default intersection methods assume that if one type is a subtype of
  ;; the other, then that type is the intersection.
  type-class-simple-intersection
  type-class-complex-intersection
  ;;
  type-class-simple-=
  type-class-complex-=
  type-class-unparse
) 

;; This istruct (and its subtypes) are used to define types.
(def-accessors (ctype) %svref
  nil                                   ; 'ctype or a subtype
  ctype-class-info                       ; a type-class
  ;; True if this type has a fixed number of members, and as such could
  ;; possibly be completely specified in a MEMBER type.  This is used by the
  ;; MEMBER type methods.
  ctype-enumerable
)

;; args-ctype is a subtype of ctype
(def-accessors (args-ctype) %svref
  nil                                   ; 'args-ctype
  nil                                   ; ctype-class-info              
  nil                                   ; ctype-enumerable
  ;; Lists of the type for each required and optional argument.
  args-ctype-required
  args-ctype-optional
  ;;
  ;; The type for the rest arg.  NIL if there is no rest arg.
  args-ctype-rest
  ;; True if keyword arguments are specified.
  args-ctype-keyp
  ;; List of key-info structures describing the keyword arguments.
  args-ctype-keywords
  ;; True if other keywords are allowed.
  args-ctype-allowp
)

(def-accessors (key-info) %svref
  nil                                   ; 'key-info
  key-info-name                         ; Name of &key arg
  key-info-type                         ; type (ctype) of this &key arg
)

;;; VALUES-ctype is a subtype of ARGS-ctype.
(def-accessors (values-ctype) %svref
  nil                                   ; 'values-ctype
  nil                                   ; ctype-class-info           
  nil                                   ; ctype-enumerable
  ;; Lists of the type for each required and optional argument.
  values-ctype-required
  values-ctype-optional
  ;;
  ;; The type for the rest arg.  NIL if there is no rest arg.
  values-ctype-rest
  ;; True if keyword arguments are specified.
  values-ctype-keyp
  ;; List of key-info structures describing the keyword arguments.
  values-ctype-keywords
  ;; True if other keywords are allowed.
  values-ctype-allowp
)

;;; FUNCTION-ctype is a subtype of ARGS-ctype.
(def-accessors (args-ctype) %svref
  nil                                   ; 'function-ctype
  nil                                   ; ctype-class-info           
  nil                                   ; ctype-enumerable
  function-ctype-required               ; args-ctype-required
  function-ctype-optional               ; args-ctype-optional
  function-ctype-rest                   ; args-ctype-rest
  function-ctype-keyp                   ; args-ctype-keyp
  function-ctype-keywords               ; args-ctype-keywords
  function-ctype-allowp                 ; args-ctype-allowp
;; True if the arguments are unrestrictive, i.e. *.
  function-ctype-wild-args
  ;;
  ;; Type describing the return values.  This is a values type
  ;; when multiple values were specified for the return.
  function-ctype-returns
)

;;; The CONSTANT-ctype structure represents a use of the CONSTANT-ARGUMENT "type
;;; specifier", which is only meaningful in function argument type specifiers
;;; used within the compiler.
;;;


(def-accessors (constant-ctype) %svref
  nil                                   ; 'constant-ctype
  nil                                   ; ctype-class-info           
  nil                                   ; ctype-enumerable
  ;; The type which the argument must be a constant instance of for this type
  ;; specifier to win.
  constant-ctype-type
)

;;; The NAMED-ctype is used to represent *, T and NIL.  These types must be
;;; super or sub types of all types, not just classes and * & NIL aren't
;;; classes anyway, so it wouldn't make much sense to make them built-in
;;; classes.
;;;

(def-accessors (named-ctype) %svref
  nil                                   ; 'named-ctype
  nil                                   ; ctype-class-info           
  nil                                   ; ctype-enumerable
  named-ctype-name
)

;;; The Hairy-ctype represents anything too wierd to be described
;;; reasonably or to be useful, such as SATISFIES.  We just remember
;;; the original type spec.
;;;

(def-accessors (hairy-ctype) %svref
  nil                                   ; 'hairy-ctype
  nil                                   ; ctype-class-info           
  nil                                   ; ctype-enumerable
  ;; The type which the argument must be a constant instance of for this type
  ;; specifier to win.
  hairy-ctype-specifier
)

;;; An UNKNOWN-ctype is a type not known to the type system (not yet defined).
;;; We make this distinction since we don't want to complain about types that
;;; are hairy but defined.
;;;

;;; This means that UNKNOWN-ctype is a HAIRY-ctype.
(def-accessors (unknown-ctype) %svref
  nil                                   ; 'unknown-ctype
  nil                                   ; ctype-class-info           
  nil                                   ; ctype-enumerable
  unknown-ctype-specifier
)

;;; CONS-ctype is a subclass of CTYPE
(def-accessors (cons-ctype) %svref
  nil                                   ; 'cons-ctype
  nil                                   ; ctype-class-info
  nil                                   ; ctype-enumerable
  cons-ctype-car-ctype                  ; ctype of the car
  cons-ctype-cdr-ctype                  ; ctype of the cdr
  )

;;; NUMERIC-ctype is a subclass of CTYPE
(def-accessors (numeric-ctype) %svref
  nil                                   ; numeric-ctype
  nil                                   ; ctype-class-info           
  nil                                   ; ctype-enumerable
  ;;
  ;; The kind of numeric type we have.  NIL if not specified (just NUMBER or
  ;; COMPLEX).
  numeric-ctype-class
  ;; Format for a float type.  NIL if not specified or not a float.  Formats
  ;; which don't exist in a given implementation don't appear here.
  numeric-ctype-format
  ;; Is this a complex numeric type?  Null if unknown (only in NUMBER.)
  numeric-ctype-complexp
  ;; The upper and lower bounds on the value.  If null, there is no bound.  If
  ;; a list of a number, the bound is exclusive.  Integer types never have
  ;; exclusive bounds.
  numeric-ctype-low
  numeric-ctype-high
  numeric-ctype-predicate
)

;;; ARRAY-ctype is a subclass of CTYPE.
(def-accessors (array-ctype) %svref
  nil                                   ; 'array-ctype
  nil                                   ; ctype-class-info           
  nil                                   ; ctype-enumerable
  ;;
  ;; The dimensions of the array.  * if unspecified.  If a dimension is
  ;; unspecified, it is *.
  array-ctype-dimensions
  ;;
  ;; Is this not a simple array type?
  array-ctype-complexp
  ;;
  ;; The element type as originally specified.
  array-ctype-element-type
  ;;
  ;; The element type as it is specialized in this implementation.
  array-ctype-specialized-element-type
  ;; The typecode of the specialize element type, or NIL.
  array-ctype-typecode
)

;;; MEMBER-ctype is a direct subclass of CTYPE.
(def-accessors (member-ctype) %svref
  nil                                   ; 'member-ctype
  nil                                   ; ctype-class-info           
  nil                                   ; ctype-enumerable
  ;;
  ;; The things in the set, with no duplications.
  member-ctype-members
)

;;; UNION-ctype is a direct subclass of CTYPE.
(def-accessors (union-ctype) %svref
  nil                                   ; 'union-ctype
  nil                                   ; ctype-class-info           
  nil                                   ; ctype-enumerable
  ;;
  ;; The types in the union.
  union-ctype-types
)

;;; INTERSECTION-ctype is a direct subclass of CTYPE.
(def-accessors (intersection-ctype) %svref
  nil                                   ; 'intersection-ctype
  nil                                   ; ctype-class-info           
  nil                                   ; ctype-enumerable
  ;;
  ;; The types in the intersection
  intersection-ctype-types
)

(def-accessors (negation-ctype) %svref
  nil                                   ; 'negation-ctype
  nil                                   ; ctype-class-info           
  nil                                   ; ctype-enumerable
  ;; The type of what we're not:
  negation-ctype-type
  )
  



;;; It'd be nice to integrate "foreign" types into the type system
(def-accessors (foreign-ctype) %svref
  nil                                   ; 'foreign-ctype
  nil                                   ; ctype-class-info           
  nil                                   ; ctype-enumerable
  foreign-ctype-foreign-type
)
  
;;; Most "real" CLOS objects have one of these in their %class.ctype slot

(def-accessors (class-ctype) %svref
  nil                                   ; 'class-ctype
  nil                                   ; ctype-class-info           
  nil                                   ; ctype-enumerable
  class-ctype-class                     ; backptr to class.
  class-ctype-translation               ; ctype for some built-in-classes.
)



;;;;;;;
;;
;; state for with-package-iterator
;;
(def-accessors %svref
  pkg-iter-step.pkg                     ; package
  pkg-iter-step.type                    ; keyword
  pkg-iter-step.table
  pkg-iter-step.shadowed
  pkg-iter-step.vector
  pkg-iter-step.index)

(def-accessors %svref
  pkg-iter.step                         ; current step
  pkg-iter.remaining-steps              ; steps to be processed
)

;;;;;;;;;;;;;

;;; Bits in *gc-event-status-bits*
(defconstant $gc-retain-pages-bit 0)
(defconstant $gc-integrity-check-bit 2)
(defconstant $gc-allow-stack-overflows-bit 5)
(defconstant $egc-verbose-bit 3)
(defconstant $gc-verbose-bit 4)
(defconstant $gc-postgc-pending-bit 26)



;;; Values for the flags arg to %install-periodic-task
(defconstant $ptask_draw-flag 1)       ; set for tasks that do drawing
(defconstant $ptask_event-dispatch-flag 2)      ; set for tasks that do event processing





(defconstant struct.type 0)
(defconstant istruct.type 0)

(def-accessors (readtable) %svref
  ()                                        ; 'readtable
  rdtab.ttab                                ; type table
  rdtab.macros                               ; macro-char table
  rdtab.case)				    ; gratuitous braindeath

;character types in readtables
(defconstant $cht_ill 0)                ;Illegal char
(defconstant $cht_wsp 1)                ;Whitespace
(defconstant $cht_sesc 4)               ;Single escape (\)
(defconstant $cht_mesc 5)               ;Multiple escape (|)
(defconstant $cht_cnst 6)               ;Atom constituent
(defconstant $cht_tmac 8)               ;Terminating macro
(defconstant $cht_ntmac 9)              ;Non-terminating macro

(defconstant $cht_macbit 3)             ;This bit on in CHT_TMAC and CHT_NTMAC

;;; quantifiers

(defconstant $some 0)
(defconstant $notany 1)
(defconstant $every 2)
(defconstant $notevery 3)

;;; Error string constants.  As accurate as constants.i ...

(defconstant $XVUNBND 1)
;(defconstant $XNOCDR 2)
(defconstant $xbadvec 6)
(defconstant $XTMINPS 3)
(defconstant $XNEINPS 4)
(defconstant $XWRNGINP 5)
(defconstant $err-bad-input 5)
(defconstant $XFUNBND 6)
;;(defconstant $err-fundefined 6)
;;(defconstant $XNOCAR 7)
(defconstant $xsetbadvec 7)
(defconstant $xcoerce 8)
(defconstant $xnofinfunction 9)
(defconstant $xnomem 10)
(defconstant $xnotranslation 12)
(defconstant $XNOTFUN 13)
(defconstant $XNOTsymlam 14)
(defconstant $Xdeclpos 15)
(defconstant $Xsetconstant 16)
(defconstant $Xoddsetq 17)
(defconstant $Xbadsetq 18)
(defconstant $Xnotsym 19)
(defconstant $Xisconstant 20)
(defconstant $Xbadinit 21)
(defconstant $Xsmacspec 22)
(defconstant $X2manyargs 23)
(defconstant $XNolexvar 24)
(defconstant $XNolexfunc 25)
(defconstant $XNolextag 26)
(defconstant $XNolexblock 27)
(defconstant $XNotag 28)
(defconstant $Xduplicatetag 29)
(defconstant $XNoblock 30)
(defconstant $XBadLambdaList 31)
(defconstant $XBadLambda 32)
(defconstant $XNOCTAG 33)
(defconstant $XOBJBadType 34)
(defconstant $XFuncLexMacro 35)
(defconstant $xumrpr 41)
(defconstant $xnotsamevol 42)
(defconstant $xbadfilenamechar 43)
(defconstant $xillwild 44)
(defconstant $xnotfaslortext 45)
(defconstant $xrenamedir 46)
(defconstant $xdirnotfile 47)
(defconstant $xnocopydir 48)
(defconstant $XBADTOK 49)
(defconstant $err-long-pstr 49)
(defconstant $xnocreate 50)
(defconstant $XFLOVFL 64)
(defconstant $XDIVZRO 66)
(defconstant $XFLDZRO 66)
(defconstant $XSTKOVER 75)
(defconstant $XMEMFULL 76)
(defconstant $xarrlimit 77)
(defconstant $err-printer 94)
(defconstant $err-printer-load 95)
(defconstant $err-printer-params 96)
(defconstant $err-printer-start 97)
(defconstant $XFLEXC 98)
(defconstant $xfileof 111)
(defconstant $XARROOB 112)
(defconstant $err-arroob 112)
(defconstant $xunread 113)
(defconstant $xbadmac 114)
(defconstant $XCONST 115)
(defconstant $xillchr 116)
(defconstant $xbadsym 117)
(defconstant $xdoterr 118)
(defconstant $xbadrdx 119)
(defconstant $XNOSPREAD 120)
(defconstant $XFASLVERS 121)
(defconstant $XNOTFASL 122)
(defconstant $xudfcall 123)

(defconstant $xusecX 127)
(defconstant $ximprtcx 128)
(defconstant $xbadnum 129)	 ;Bad arg to #b/#o/#x/#r... 
(defconstant $XNOPKG 130)
(defconstant $xnoesym 131)
(defconstant $XBADFASL 132)
(defconstant $ximprtc 133)
(defconstant $xunintc 134)
(defconstant $XSYMACC 135)
(defconstant $XEXPRTC 136)
(defconstant $xusec 137)
(defconstant $xduppkg 138)
(defconstant $xrmactx 139)
(defconstant $xnordisp 140)
(defconstant $xrdnoarg 141)
(defconstant $xrdndarg 142)
(defconstant $xmacrdx 143)
(defconstant $xduprdlbl 144)
(defconstant $xnordlbl 145)
(defconstant $xrdfont 146)
(defconstant $xrdname 147)
(defconstant $XNDIMS 148)
(defconstant $err-disp-size 149)
(defconstant $XNARGS 150)
(defconstant $xdifdim 151)
(defconstant $xkeyconflict 152)
(defconstant $XBADKEYS 153)
(defconstant $xtoofew 154)
(defconstant $xtoomany 155)
(defconstant $XWRONGTYPE 157)
(defconstant $XBADSTRUCT 158)
(defconstant $XSTRUCTBOUNDS 159)
(defconstant $XCALLNOTLAMBDA 160)
(defconstant $XTEMPFLT 161)
(defconstant $xrdfeature 163)
(defconstant $err-no-file 164)
(defconstant $err-bad-named-arg 165)
(defconstant $err-bad-named-arg-2 166)
(defconstant $XCALLTOOMANY 167)
(defconstant $XCALLTOOFEW 168)
(defconstant $XCALLNOMATCH 169)
(defconstant $XIMPROPERLIST 170)
(defconstant $XNOFILLPTR 171)
(defconstant $XMALADJUST 172)
(defconstant $XACCESSNTH 173)
(defconstant $XNOTELT 174)
(defconstant $XSGEXHAUSTED 175)
(defconstant $XSGNARGS 176)
(defconstant $XTOOMANYVALUES 177)
(defconstant $XFOREIGNEXCEPTION 200)

(defconstant $cons-area.gspace-start 0)
(defconstant $cons-area.gspace-end 4)
(defconstant $cons-area.ispace-start 8)
(defconstant $cons-area.ispace-end 12)
(defconstant $cons-area.pgc-count 16)
(defconstant $cons-area.pgc-time 20)
(defconstant $cons-area.total 24)


;; Values returned by %number-check.

(defconstant $Num1Dfloat 0)
(defconstant $Num1Int 2)
(defconstant $Num1Sfloat 4)
(defconstant $Num1Ratio 6)
(defconstant $Num1CR 8)
(defconstant $Num1CF 10)
(defconstant $Num1CS 12)

(defconstant %numeric-type-names-alist% 
  `((double-float . ,$Num1Dfloat)
    (integer . ,$Num1Int)
    (short-float . ,$Num1Sfloat)
    (ratio . ,$Num1Ratio)
    ((complex rational) . ,$Num1CR)
    ((complex double-float) . ,$Num1CF)
    ((complex short-float) . ,$Num1CS)))
  
(defmacro numeric-dispatch (numform &body cases)
  (flet ((numtype (name)
           (if (memq name '(t otherwise))
             name
             (dolist (pair %numeric-type-names-alist% (error "Unknown numeric type name ~s" name))
               (when (subtypep name (car pair)) (return (cdr pair)))))))
    (flet ((numify (case)
             (destructuring-bind (types &body body) case
               (if (atom types)
                 `(,(numtype types) ,@body)
                 `(,(mapcar #'numtype types) ,@body)))))
      `(case (%number-check ,numform)
         ,@(mapcar #'numify cases)))))

(def-accessors (random-state) %svref
  ()
  random.mrg31k3p-state)

;;; IEEE-floating-point constants.

(defconstant IEEE-single-float-bias 126)
(defconstant IEEE-single-float-exponent-offset 23)
(defconstant IEEE-single-float-exponent-width 8)
(defconstant IEEE-single-float-mantissa-offset 0)
(defconstant IEEE-single-float-mantissa-width 23)
(defconstant IEEE-single-float-hidden-bit 23)
(defconstant IEEE-single-float-signalling-NAN-bit 22)
(defconstant IEEE-single-float-normal-exponent-min 1)
(defconstant IEEE-single-float-normal-exponent-max 254)
(defconstant IEEE-single-float-digits (1+ IEEE-single-float-mantissa-width))

;;; Double-floats are IEEE DOUBLE-FLOATs in both MCL implementations.

(defconstant IEEE-double-float-bias 1022)
(defconstant IEEE-double-float-exponent-offset 52)
(defconstant IEEE-double-float-exponent-width 11)
(defconstant IEEE-double-float-mantissa-offset 0)
(defconstant IEEE-double-float-mantissa-width 52)
(defconstant IEEE-double-float-hidden-bit 52)
(defconstant IEEE-double-float-signalling-NAN-bit 51)
(defconstant IEEE-double-float-normal-exponent-min 1)
(defconstant IEEE-double-float-normal-exponent-max 2046)
(defconstant IEEE-double-float-digits (1+ IEEE-double-float-mantissa-width))




(def-accessors (ptaskstate) %svref
  nil                                   ;ptaskstate
  ptaskstate.nexttick
  ptaskstate.interval
  ptaskstate.privatedata
  ptaskstate.flags)




 

;;;;;; clos instance and class layout.

;;; All standard-instances (classes, instances other than funcallable
;;; instances) consist of a vector of slot values and a pointer to the
;;; class wrapper.
(def-accessors (instance) %svref
  instance.hash				; a fixnum for EQ-based hashing
  instance.class-wrapper
  instance.slots			; a slot-vector
)
;;; Doing this via %SLOT-REF traps if the slot is unbound
(defmacro standard-instance-instance-location-access (instance location)
  `(%slot-ref (instance-slots ,instance) ,location))

;;; Get the "raw" contents of the slot, even if it's %SLOT-UNBOUND-MARKER.
(defmacro %standard-instance-instance-location-access (instance location)
  `(%svref (instance-slots ,instance) ,location))

(defmacro set-standard-instance-instance-location-access (instance location new)
  `(setf (%svref (instance-slots ,instance) ,location) ,new))

(defsetf standard-instance-instance-location-access
    set-standard-instance-instance-location-access)

(defmacro standard-generic-function-instance-location-access (sgf location)
  `(%slot-ref (gf.slots ,sgf) ,location))

(defmacro %standard-generic-function-instance-location-access (sgf location)
  `(%svref (gf.slots ,sgf) ,location))

(defmacro set-standard-generic-function-instance-location-access (sgf location new)
  `(setf (%svref (gf.slots ,sgf) ,location) ,new))

(defsetf standard-generic-function-instance-location-access
    set-standard-generic-function-instance-location-access)

;;; Slot vectors contain the instance they "belong" to (or NIL) in
;;; their 0th element, and the instance's slots in elements 1 .. n.

(def-accessors (slot-vector) %svref
  slot-vector.instance
  )

(def-accessors (class-wrapper) %svref
  nil                                   ; 'class-wrapper
  %wrapper-hash-index                   ; for generic-function dispatch tables
  %wrapper-class                        ; the class itself
  %wrapper-instance-slots               ; vector of instance slot names
  %wrapper-class-slots                  ; alist of (name . value-cell) pairs
  %wrapper-slot-id->slotd               ; map slot-id to slotd, or NIL
  %wrapper-slot-id-map                  ; (vector (mod nslots) next-slot-id-index)
  %wrapper-slot-definition-table        ; vector of nil || slot-definitions
  %wrapper-slot-id-value                ; "fast" SLOT-VALUE function
  %wrapper-set-slot-id-value            ; "fast" (SETF SLOT-VALUE) function
  %wrapper-cpl                          ; cached cpl of %wrapper-class or NIL
  %wrapper-class-ordinal                ; cached copy of class-ordinal
  %wrapper-cpl-bits                     ; bitvector representation of cpl
)

;; Use the wrapper-class-slots for info on obsolete & forwarded instances
;; Note: none of this xx-forwarding-xx or xx-forwarded-xx is valid unless
;; (%wrapper-instance-slots ...) is 0.
(defmacro %wrapper-forwarding-info (instance)
  `(%wrapper-class-slots ,instance))

(defmacro %forwarding-instance-slots (info)
  `(%car ,info))
(defmacro %forwarding-class-slots (info)
  `(%cdr ,info))


(defmacro %wrapper-forwarded-instance-slots (instance)
  `(%forwarding-instance-slots (%wrapper-forwarding-info ,instance)))
(defmacro %wrapper-forwarded-class-slots (instance)
  `(%forwarding-class-slots (%wrapper-forwarding-info ,instance)))


(defmacro %cons-forwarding-info (instance-slots class-slots)
  `(cons ,instance-slots ,class-slots))


(defmacro %cons-wrapper (class &optional 
                               (hash-index '(new-class-wrapper-hash-index)))
  (let* ((c (gensym)))
  `(let* ((,c ,class))
    (%istruct 'class-wrapper ,hash-index ,c nil nil #'slot-id-lookup-no-slots nil nil #'%slot-id-ref-missing #'%slot-id-set-missing nil (%class-ordinal ,c t) nil))))


(defmacro %instance-class (instance)
  `(%wrapper-class (instance.class-wrapper ,instance)))

(def-accessors standard-instance-instance-location-access ;A specializer
    nil					; backptr
  specializer.direct-methods
)

(def-accessors (class) standard-instance-instance-location-access ;Slots of any class
  nil                                   ; backptr
  %class.direct-methods			; aka specializer.direct-methods
  %class.prototype			; prototype instance
  %class.name
  %class.cpl                            ; class-precedence-list
  %class.own-wrapper                    ; own wrapper (or nil)
  %class.local-supers                   ; class-direct-superclasses
  %class.subclasses                     ; class-direct-subclasses
  %class.dependents			; arbitrary dependents
  %class.ctype
  %class.direct-slots                   ; local slots
  %class.slots                          ; all slots
  %class.info                           ; cons of kernel-p, proper-name
  %class.local-default-initargs         ; local default initargs alist
  %class.default-initargs               ; all default initargs if initialized.
)


(def-accessors () standard-instance-instance-location-access ; any standard class
  nil                                   ; slot-vector backptr
  nil                                   ; usual class stuff: direct-methods,
  nil					;   prototype,
  nil					;   name,
  nil					;   cpl,
  nil					;   own-wrapper,
  nil					;   local-supers,
  nil					;   subclasses,
  nil					;   dependents,
  nil					;   ctype.
  nil                                   ; local slots
  nil                                   ; all slots
  nil                                ; true if a non-redefinable class
  nil                                   ; local default initargs alist
  nil                           ; all default initargs if initialized.
  %class.alist                          ; other stuff about the class.
  %class.make-instance-initargs         ; (vector of) valid initargs to make-instance
  %class.reinit-initargs                ; valid initargs to reinitialize-instance
  %class.redefined-initargs             ; valid initargs to update-instance-for-redefined-class
  %class.changed-initargs               ; valid initargs to update-instance-for-changed-class
  )





(defmacro %instance-vector (wrapper &rest slots)
  (let ((instance (gensym))
	(slots-vector (gensym)))
    `(let* ((,instance (gvector :instance 0 ,wrapper nil))
	    (,slots-vector (gvector :slot-vector ,instance ,@slots)))
       (setf (instance.slots ,instance) ,slots-vector
	     (instance.hash ,instance) (strip-tag-to-fixnum ,instance))
       ,instance)))
 



(defmacro %cons-built-in-class (name)
  `(%instance-vector  *built-in-class-wrapper*
    nil                                 ;direct-methods
    nil                                 ;prototype
    ,name                               ;name
    nil                                 ;precedence-list
    nil                                 ;own-wrapper
    nil                                 ;direct-superclasses
    nil                                 ;direct-subclasses
    nil                                 ;dependents
    nil                                 ;class-ctype
    nil                                 ;direct-slots
    nil                                 ;slots
    (cons nil nil)                      ;info
    nil                                 ;direct-default-initargs
    nil                                 ;default-initargs
    ))

(defmacro %cons-standard-class (name &optional
                                     (metaclass-wrapper '*standard-class-wrapper*))
  `(%instance-vector  ,metaclass-wrapper
    nil                                 ;direct-methods
    nil                                 ;prototype
    ,name                               ;name
    nil                                 ;precedence-list
    nil                                 ;own-wrapper
    nil                                 ;direct-superclasses
    nil                                 ;direct-subclasses
    nil                                 ;dependents
    nil                                 ;class-ctype
    nil                                 ;direct-slots
    nil                                 ;slots
    (cons nil nil)                      ;info
    nil                                 ;direct-default-initargs
    nil                                 ;default-initargs
    nil                                 ;alist
    nil                                 ;make-instance-initargs
    nil                                 ;reinit-initargs
    nil                                 ;redefined-initargs
    nil                                 ;changed-initargs
    )
)



(defconstant max-class-ordinal (ash 1 20))


(def-accessors () standard-instance-instance-location-access
  nil					; backptr
  standard-slot-definition.name
  standard-slot-definition.type
  standard-slot-definition.initfunction
  standard-slot-definition.initform
  standard-slot-definition.initargs
  standard-slot-definition.allocation
  standard-slot-definition.documentation
  standard-slot-definition.class
  )

(def-accessors () standard-instance-instance-location-access
  nil
  standard-effective-slot-definition.name
  standard-effective-slot-definition.type
  standard-effective-slot-definition.initfunction
  standard-effective-slot-definition.initform
  standard-effective-slot-definition.initargs
  standard-effective-slot-definition.allocation
  standard-effective-slot-definition.documentation
  standard-effective-slot-definition.class
  standard-effective-slot-definition.location
  standard-effective-slot-definition.slot-id
  standard-effective-slot-definition.type-predicate
  )


(def-accessors () standard-instance-instance-location-access
  nil
  standard-direct-slot-definition.name
  standard-direct-slot-definition.type
  standard-direct-slot-definition.initfunction
  standard-direct-slot-definition.initform
  standard-direct-slot-definition.initargs
  standard-direct-slot-definition.allocation
  standard-direct-slot-definition.documentation
  standard-direct-slot-definition.class
  standard-direct-slot-definition.readers
  standard-direct-slot-definition.writers  
  )

;; Methods
(defmacro %cons-method (name qualifiers specializers function &optional 
                             (class '*standard-method-class*))
  `(%instance-vector 
    (%class.own-wrapper ,class)
    ,qualifiers
    ,specializers
    ,function
    nil
    ,name))


(def-accessors standard-instance-instance-location-access ; method
  nil                                   ; backptr
  %method.qualifiers
  %method.specializers
  %method.function
  %method.gf
  %method.name
  %method.lambda-list)

;;; Painful, but seems to be necessary.
(def-accessors standard-instance-instance-location-access ; standard-accessor-method
  nil                                   ; backptr
  nil					;%method.qualifiers
  nil					;%method.specializers
  nil					;%method.function
  nil					;%method.gf
  nil					;%method.name
  nil					;%method.lambda-list
  %accessor-method.slot-definition)





;; Generic Function Dispatch tables.
;; These accessors are at the beginning of the table.
;; rest of the table is alternating wrappers & combined-methods.

(def-accessors %svref
    %gf-dispatch-table-methods		; List of methods
    %gf-dispatch-table-precedence-list	; List of argument numbers in precedence order
    %gf-dispatch-table-keyvect          ; keyword vector, set by E-G-F.
    %gf-dispatch-table-argnum		; argument number
    %gf-dispatch-table-gf		; back pointer to gf - NEW
    %gf-dispatch-table-mask		; mask for rest of table
    %gf-dispatch-table-first-data)	; offset to first data.  Must follow mask.
  
(defmacro %gf-dispatch-table-size (dt)
  `(%i- (uvsize ,dt) ,(+ 2 %gf-dispatch-table-first-data)))

(defmacro %gf-dispatch-table-ref (table index)
  `(%svref ,table (%i+ ,index %gf-dispatch-table-first-data)))

(defmacro %cons-gf-dispatch-table (size)
  `(make-array (%i+ ,size ,(%i+ 2 %gf-dispatch-table-first-data))
               :initial-element nil))


;;; method-combination info
(def-accessors svref
  mci.class                             ; short-method-combination or long-method-combination
  mci.options                           ; short-form-options or long-form function
  mci.instances                         ; a population of instances
  mci.gfs                               ; a population of generic-functions
  )

(defmacro %cons-mci (&optional class options)
  `(vector ,class ,options (%cons-population nil) (%cons-population nil)))

;;; slot accessor info for primary classes
(def-accessors %svref
  %slot-accessor-info.class
  (%slot-accessor-info.accessor %slot-accessor-info.slot-name)
  %slot-accessor-info.offset
  )

(defmacro %cons-slot-accessor-info (class accessor-or-slot-name &optional offset)
  `(vector ,class ,accessor-or-slot-name ,offset))

(def-accessors (combined-method) nth-immediate
  combined-method.code-vector		; trampoline code vector
  combined-method.thing			; arbitrary arg to dcode
  combined-method.dcode			; discriminator function
  combined-method.gf			; gf
  combined-method.bits			; lfun-bits
  )
;;; The structure of a generic-function object (funcallable instance).
(def-accessors (generic-function) nth-immediate
  gf.code-vector			; trampoline code-vector
  gf.instance.class-wrapper		; instance class-wrapper
  gf.slots				; slots vector
  gf.dispatch-table			; effective-method cache
  gf.dcode				; discriminating code
  gf.hash				; hashing identity
  gf.bits				;
  )

;;; The slots of STANDARD-GENERIC-FUNCTION.
(def-accessors (standard-generic-function) standard-generic-function-instance-location-access
  nil					; backptr
  sgf.name				; generic-function-name
  sgf.method-combination		; generic-function-method-combination
  sgf.method-class			; generic-function-method-class
  sgf.methods				; generic-function-methods
  sgf.decls				; generic-function-declarations
  sgf.%lambda-list                      ; explicit lambda-list
  sgf.dependents			; dependents for MAP-DEPENDENTS et al.
  )

(def-accessors (slot-id) %svref
  nil                                   ;'slot-id
  slot-id.name                          ; slot name (symbol)
  slot-id.index                         ; index (integer)
  )

(def-accessors (foreign-object-domain) %svref
  nil					; foreign-object-domain
  foreign-object-domain-index		; 1..n
  foreign-object-domain-name		;
  foreign-object-domain-recognize	; function: is object one of ours ?
  foreign-object-domain-class-of	; function: returns class of object
  foreign-object-domain-classp		; function: true if object is a class
  foreign-object-domain-instance-class-wrapper ; function: returns wrapper of object's class
  foreign-object-domain-class-own-wrapper ; function: returns class own wrapper if class
  foreign-object-domain-slots-vector	; returns slots vector of object or nil
  foreign-object-domain-class-ordinal   ; returns class ordinal if class
  foreign-object-domain-set-class-ordinal  ; sets class ordinal if class
  )

;;; Hash table accessors.
(def-accessors (hash-table) %svref
    nil                                 ; 'HASH-TABLE
    nhash.keytransF                     ; transform key into (values primary addressp)
    nhash.compareF                      ; comparison function: 0 -> eq, -1 ->eql, else function
    nhash.rehash-bits                   ; bitset (array (unsigned-byte 32)) for rehash
    nhash.vector                        ; N <key,value> pairs; n relatively prime to & larger than all secondary keys
    nhash.lock                          ; flag: non-zero if lock-free
    nhash.owner                         ; tcr of "owning" thread, else NIL.
    nhash.grow-threshold                ; Max # entries before grow
    nhash.rehash-ratio                  ; inverted rehash-threshold
    nhash.rehash-size			; rehash-size from user
    nhash.puthash-count                 ; number of times table has been rehashed or grown
    nhash.exclusion-lock                ; read-write lock for access
    nhash.find                          ; function: find vector-index
    nhash.find-new                      ; function: find vector-index on put
    nhash.read-only                     ; boolean: true when read-only
    nhash.min-size                      ; smallest size can shrink the table to.
    )

(def-accessors (lock-acquisition) %svref
  nil                                   ; 'lock-acquisition
  lock-acquisition.status
  )

(defmacro make-lock-acquisition ()
  `(%istruct 'lock-acquisition nil))

(def-accessors (semaphore-notification) %svref
  nil                                   ; 'semaphore-notification
  semaphore-notification.status
  )

(defmacro make-semaphore-notification ()
  `(%istruct 'semaphore-notification nil))

;;; Why were these ever in architecture-dependent packages ?
(defenum (:prefix "AREA-")
  void                                  ; list header
  cstack                                ; a control stack
  vstack                                ; a value stack
  tstack                                ; (dynamic-extent) temp stack
  readonly                              ; readonly section
  watched				; static area containing a single object
  static-cons                           ; static cons cells
  managed-static                        ; growable static area
  static                                ; static data in application
  dynamic                               ; dynmaic (heap) data in application
)

;;; areas are sorted such that (in the "succ" direction) codes are >=.
;;; If you think that you're looking for a stack (instead of a heap), look
;;; in the "pred" direction from the all-areas header.
(defconstant max-stack-area-code area-tstack)
(defconstant min-heap-area-code area-readonly)


;;; Lisp threads, which barely need to exist and aren't worth burning
;;; a separate tag on ...
(def-accessors (lisp-thread) %svref
  nil                                   ;'lisp-thread
  lisp-thread.tcr
  lisp-thread.name
  lisp-thread.cs-size
  lisp-thread.vs-size
  lisp-thread.ts-size
  lisp-thread.initial-function.args
  lisp-thread.interrupt-functions
  lisp-thread.interrupt-lock
  lisp-thread.startup-function
  lisp-thread.state
  lisp-thread.state-change-lock
  )

;;; "basic" (e.g., builtin, non-extensible) streams.
(def-accessors (basic-stream) %svref
  basic-stream.wrapper                  ; a class wrapper object
  basic-stream.flags                    ; fixnum; bits.
  basic-stream.state                    ; typically an ioblock
  basic-stream.info                     ; a plist for less-often-used things.
)

(def-accessors (basic-file-stream) %svref
  basic-file-stream.class               ; a class object
  basic-file-stream.flags               ; fixnum; bits.
  basic-file-stream.state               ; typically an ioblock
  basic-file-stream.info                ; a plist for less-often-used things.
  basic-file-stream.filename
  basic-file-stream.actual-filename
  basic-file-stream.external-format
  )

;;; Bits in basic-stream.flags
(defenum (:prefix "BASIC-STREAM-FLAG.")
  open-input
  open-output
  open-character
  open-binary
  file-stream)


(def-accessors (class-cell) %svref
  nil                                   ; 'class-cell
  class-cell-name
  class-cell-class
  class-cell-instantiate
  class-cell-extra                      ; wrapper in some cases
  )

(defmacro make-class-cell (name) `(%istruct 'class-cell ,name nil '%make-instance nil))

;;; Map between TYPE-SPECIFIERS and CTYPEs
(def-accessors (type-cell) %svref
  nil
  type-cell-type-specifier
  type-cell-ctype)

(defmacro make-type-cell (specifier) `(%istruct 'type-cell ,specifier nil))

;;; Map between package names and packages, sometimes.
(def-accessors (package-ref) %svref
  nil
  package-ref.name                      ; a string
  package-ref.pkg                       ; a package or NIL
  )

(defmacro make-package-ref (name) `(%istruct 'package-ref (string ,name) nil))


(def-accessor-macros %svref
  nil                                 ; 'external-entry-point
  eep.address
  eep.name
  eep.container)

(defmacro %cons-external-entry-point (name &optional container)
  `(%istruct 'external-entry-point nil ,name ,container))

(def-accessor-macros %svref
    nil                                 ;'foreign-variable
  fv.addr                               ; a MACPTR, or nil
  fv.name                               ; a string
  fv.type                               ; a foreign type
  fv.container                          ; containing library
  )


(def-accessors (shlib) %svref
    nil					;'shlib
  shlib.soname
  shlib.pathname
  shlib.handle                          ; if explicitly opened
  shlib.map
  shlib.base
  shlib.opencount)

(defmacro %cons-shlib (soname pathname map base)
  `(%istruct 'shlib ,soname ,pathname nil ,map ,base 0))

(def-accessors uvref ; %svref
    ()                                  ;'entry
  entry-test                          ;predicate function or count of higher priority others.
  entry-fn                            ;pprint function
  entry-full-spec                     ;list of priority and type specifier
  )

;;; MacOS toolbox routines were once written mostly in Pascal, so some
;;; code still refers to callbacks from foreign code as "pascal-callable
;;; functions".

; %Pascal-Functions% Entry
(def-accessor-macros %svref
  pfe.routine-descriptor
  pfe.proc-info
  pfe.lisp-function
  pfe.sym
  pfe.without-interrupts
  pfe.trace-p)

(defmacro %cons-pfe (routine-descriptor proc-info lisp-function sym without-interrupts)
  `(vector ,routine-descriptor ,proc-info ,lisp-function ,sym ,without-interrupts nil))


(def-accessors %svref
    ()                                  ; 'xp-structure
  xp-base-stream ;;The stream io eventually goes to.
  xp-linel ;;The line length to use for formatting.
  xp-line-limit ;;If non-NIL the max number of lines to print.
  xp-line-no ;;number of next line to be printed.
  xp-char-mode ;;NIL :UP :DOWN :CAP0 :CAP1 :CAPW
  xp-char-mode-counter                  ;depth of nesting of ~(...~)
  xp-depth-in-blocks ;;Number of logical blocks at QRIGHT that 
  ;;are started but not ended.              
  xp-block-stack 
  xp-block-stack-ptr
  ;;This stack is pushed and popped in accordance with the way blocks are 
  ;;nested at the moment they are entered into the queue.  It contains the 
  ;;following block specific value.
  ;;SECTION-START total position where the section (see AIM-1102)
  ;;that is rightmost in the queue started.
  xp-buffer
  xp-charpos
  xp-buffer-ptr 
  xp-buffer-offset
  ;;This is a vector of characters (eg a string) that builds up the
  ;;line images that will be printed out.  BUFFER-PTR is the
  ;;buffer position where the next character should be inserted in
  ;;the string.  CHARPOS is the output character position of the
  ;;first character in the buffer (non-zero only if a partial line
  ;;has been output).  BUFFER-OFFSET is used in computing total lengths.
  ;;It is changed to reflect all shifting and insertion of prefixes so that
  ;;total length computes things as they would be if they were 
  ;;all on one line.  Positions are kept three different ways
  ;; Buffer position (eg BUFFER-PTR)
  ;; Line position (eg (+ BUFFER-PTR CHARPOS)).  Indentations are stored in this form.
  ;; Total position if all on one line (eg (+ BUFFER-PTR BUFFER-OFFSET))
  ;;  Positions are stored in this form.
  xp-queue
  xp-qleft
  xp-qright
  ;;This holds a queue of action descriptors.  QLEFT and QRIGHT
  ;;point to the next entry to dequeue and the last entry enqueued
  ;;respectively.  The queue is empty when
  ;;(> QLEFT QRIGHT).  The queue entries have several parts:
  ;;QTYPE one of :NEWLINE/:IND/:START-BLOCK/:END-BLOCK
  ;;QKIND :LINEAR/:MISER/:FILL/:MANDATORY or :UNCONDITIONAL/:FRESH
  ;; or :BLOCK/:CURRENT
  ;;QPOS total position corresponding to this entry
  ;;QDEPTH depth in blocks of this entry.
  ;;QEND offset to entry marking end of section this entry starts. (NIL until known.)
  ;; Only :start-block and non-literal :newline entries can start sections.
  ;;QOFFSET offset to :END-BLOCK for :START-BLOCK (NIL until known).
  ;;QARG for :IND indentation delta
  ;;     for :START-BLOCK suffix in the block if any.
  ;;                      or if per-line-prefix then cons of suffix and
  ;;                      per-line-prefix.
  ;;     for :END-BLOCK suffix for the block if any.
  xp-prefix
  ;;this stores the prefix that should be used at the start of the line
  xp-prefix-stack
  xp-prefix-stack-ptr
  ;;This stack is pushed and popped in accordance with the way blocks 
  ;;are nested at the moment things are taken off the queue and printed.
  ;;It contains the following block specific values.
  ;;PREFIX-PTR current length of PREFIX.
  ;;SUFFIX-PTR current length of pending suffix
  ;;NON-BLANK-PREFIX-PTR current length of non-blank prefix.
  ;;INITIAL-PREFIX-PTR prefix-ptr at the start of this block.
  ;;SECTION-START-LINE line-no value at last non-literal break at this level.
  xp-suffix
  ;;this stores the suffixes that have to be printed to close of the current
  ;;open blocks.  For convenient in popping, the whole suffix
  ;;is stored in reverse order.
  xp-stream  ;;; the xp-stream containing this structure
  xp-string-stream ;; string-stream for output until first circularity (in case none)
  )

(def-accessors (afunc) %svref
  ()                                    ; 'afunc
  afunc-acode
  afunc-parent
  afunc-vars
  afunc-inherited-vars
  afunc-blocks
  afunc-tags
  afunc-inner-functions
  afunc-name
  afunc-bits
  afunc-lfun
  afunc-environment
  afunc-lambdaform
  afunc-argsword
  afunc-ref-form
  afunc-warnings
  afunc-fn-refcount
  afunc-fn-downward-refcount
  afunc-all-vars
  afunc-callers
  afunc-vcells
  afunc-fcells
  afunc-fwd-refs
  afunc-lfun-info
  afunc-linkmap)

(defmacro %make-afunc ()
  `(%istruct 'afunc
    nil                                 ;afunc-acode
    nil                                 ;afunc-parent
    nil                                 ;afunc-vars
    nil                                 ;afunc-inherited-vars
    nil                                 ;afunc-blocks
    nil                                 ;afunc-tags
    nil                                 ;afunc-inner-functions
    nil                                 ;afunc-name
    nil                                 ;afunc-bits
    nil                                 ;afunc-lfun
    nil                                 ;afunc-environment
    nil                                 ;afunc-lambdaform
    nil                                 ;afunc-argsword
    nil                                 ;afunc-ref-form
    nil                                 ;afunc-warnings
    nil                                 ;afunc-fn-refcount
    nil                                 ;afunc-fn-downward-refcount
    nil                                 ;afunc-all-vars
    nil                                 ;afunc-callers
    nil                                 ;afunc-vcells
    nil                                 ;afunc-fcells
    nil                                 ;afunc-fwd-refs
    nil                                 ;afunc-lfun-info
    nil                                 ;afunc-linkmap
    ))


(def-accessors (compiler-policy) uvref
  nil                                   ; 'compiler-policy
  policy.allow-tail-recursion-elimination
  policy.inhibit-register-allocation
  policy.trust-declarations
  policy.open-code-inline
  policy.inhibit-safety-checking
  policy.declarations-typecheck
  policy.inline-self-calls
  policy.allow-transforms
  policy.force-boundp-checks
  policy.allow-constant-substitution
  policy.misc)


(def-accessors (deferred-warnings) %svref
  nil
  deferred-warnings.parent
  deferred-warnings.warnings
  deferred-warnings.defs
  deferred-warnings.last-file
)

;;; loader framework istruct
(def-accessors (faslapi) %svref
  ()
  ;; these represent all users of faslstate.iobuffer, .bufcount, and
  ;; .faslfd -- I think these are all the important file- and
  ;; buffer-IO-specific slots in faslstate; encapsulating these allows
  ;; sophisticated users to load fasl data from nonstandard sources
  ;; without too much trouble
  faslapi.fasl-open
  faslapi.fasl-close
  faslapi.fasl-init-buffer
  faslapi.fasl-set-file-pos
  faslapi.fasl-get-file-pos
  faslapi.fasl-read-buffer
  faslapi.fasl-read-byte
  faslapi.fasl-read-n-bytes)


(defmacro istruct-cell-name (cell)
  `(car ,cell))

(defmacro istruct-cell-info (cell)
  `(cdr ,cell))

(provide "LISPEQU")

;;; End of lispequ.lisp
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3
;;;; END FILE ./reference/ccl/library/lispequ.lisp
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4n









;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4n









;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4n









;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4n











\;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1
;;;; BEGIN FILE ./reference/ccl/library/jp-encode.lisp
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2
;;;-*- Mode: Lisp; Package: CCL -*-
;;;
;;; Copyright 2007-2009 Clozure Associates
;;;
;;; Licensed under the Apache License, Version 2.0 (the "License");
;;; you may not use this file except in compliance with the License.
;;; You may obtain a copy of the License at
;;;
;;;     http://www.apache.org/licenses/LICENSE-2.0
;;;
;;; Unless required by applicable law or agreed to in writing, software
;;; distributed under the License is distributed on an "AS IS" BASIS,
;;; WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
;;; See the License for the specific language governing permissions and
;;; limitations under the License.

(in-package "CCL")

;;;; helper functions
(defstatic *eucjp-to-ucs-map* nil)
(defstatic *ucs-to-eucjp-map* nil)
(defstatic *cp932-to-ucs-map* nil)
(defstatic *ucs-to-cp932-map* nil)

(let* ((cp932-only '((#xFC4B . #x9ED1)
                     (#xFC4A . #x9E19)
                     (#xFC49 . #xFA2D)
                     (#xFC48 . #x9D6B)
                     (#xFC47 . #x9D70)
                     (#xFC46 . #x9C00)
                     (#xFC45 . #x9BBB)
                     (#xFC44 . #x9BB1)
                     (#xFC43 . #x9B8F)
                     (#xFC42 . #x9B72)
                     (#xFC41 . #x9B75)
                     (#xFC40 . #x9ADC)
                     (#xFBFC . #x9AD9)
                     (#xFBFB . #x9A4E)
                     (#xFBFA . #x999E)
                     (#xFBF9 . #xFA2C)
                     (#xFBF8 . #x9927)
                     (#xFBF7 . #xFA2B)
                     (#xFBF6 . #xFA2A)
                     (#xFBF5 . #x9865)
                     (#xFBF4 . #x9857)
                     (#xFBF3 . #x9755)
                     (#xFBF2 . #x9751)
                     (#xFBF1 . #x974F)
                     (#xFBF0 . #x974D)
                     (#xFBEF . #x9743)
                     (#xFBEE . #x973B)
                     (#xFBED . #x9733)
                     (#xFBEC . #x96AF)
                     (#xFBEB . #x969D)
                     (#xFBEA . #xFA29)
                     (#xFBE9 . #xF9DC)
                     (#xFBE8 . #x9592)
                     (#xFBE7 . #x9448)
                     (#xFBE6 . #x9445)
                     (#xFBE5 . #x9431)
                     (#xFBE4 . #x93F8)
                     (#xFBE3 . #x93DE)
                     (#xFBE2 . #x93C6)
                     (#xFBE1 . #x93A4)
                     (#xFBE0 . #x9357)
                     (#xFBDF . #x9370)
                     (#xFBDE . #x9302)
                     (#xFBDD . #x931D)
                     (#xFBDC . #x92FF)
                     (#xFBDB . #x931E)
                     (#xFBDA . #xFA28)
                     (#xFBD9 . #x92FB)
                     (#xFBD8 . #x9321)
                     (#xFBD7 . #x9325)
                     (#xFBD6 . #x92D3)
                     (#xFBD5 . #x92E0)
                     (#xFBD4 . #x92D5)
                     (#xFBD3 . #xFA27)
                     (#xFBD2 . #x92D0)
                     (#xFBD1 . #x92D9)
                     (#xFBD0 . #x92D7)
                     (#xFBCF . #x92E7)
                     (#xFBCE . #x9278)
                     (#xFBCD . #x9277)
                     (#xFBCC . #x92A7)
                     (#xFBCB . #x9267)
                     (#xFBCA . #x9239)
                     (#xFBC9 . #x9251)
                     (#xFBC8 . #x9259)
                     (#xFBC7 . #x924E)
                     (#xFBC6 . #x923C)
                     (#xFBC5 . #x9240)
                     (#xFBC4 . #x923A)
                     (#xFBC3 . #x920A)
                     (#xFBC2 . #x9210)
                     (#xFBC1 . #x9206)
                     (#xFBC0 . #x91E5)
                     (#xFBBF . #x91E4)
                     (#xFBBE . #x91EE)
                     (#xFBBD . #x91ED)
                     (#xFBBC . #x91DE)
                     (#xFBBB . #x91D7)
                     (#xFBBA . #x91DA)
                     (#xFBB9 . #x9127)
                     (#xFBB8 . #x9115)
                     (#xFBB7 . #xFA26)
                     (#xFBB6 . #x90DE)
                     (#xFBB5 . #x9067)
                     (#xFBB4 . #xFA25)
                     (#xFBB3 . #xFA24)
                     (#xFBB2 . #x8ECF)
                     (#xFBB1 . #xFA23)
                     (#xFBB0 . #x8D76)
                     (#xFBAF . #x8D12)
                     (#xFBAE . #x8CF4)
                     (#xFBAD . #x8CF0)
                     (#xFBAC . #x8B7F)
                     (#xFBAB . #x8B53)
                     (#xFBAA . #x8AF6)
                     (#xFBA9 . #xFA22)
                     (#xFBA8 . #x8ADF)
                     (#xFBA7 . #x8ABE)
                     (#xFBA6 . #x8AA7)
                     (#xFBA5 . #x8A79)
                     (#xFBA4 . #x8A37)
                     (#xFBA3 . #x8A12)
                     (#xFBA2 . #x88F5)
                     (#xFBA1 . #x8807)
                     (#xFBA0 . #xFA21)
                     (#xFB9F . #xFA20)
                     (#xFB9E . #x85B0)
                     (#xFB9D . #xFA1F)
                     (#xFB9C . #x856B)
                     (#xFB9B . #x8559)
                     (#xFB9A . #x8553)
                     (#xFB99 . #x84B4)
                     (#xFB98 . #x8448)
                     (#xFB97 . #x83F6)
                     (#xFB96 . #x83C7)
                     (#xFB95 . #x837F)
                     (#xFB94 . #x8362)
                     (#xFB93 . #x8301)
                     (#xFB92 . #xFA1E)
                     (#xFB91 . #x7FA1)
                     (#xFB90 . #x7F47)
                     (#xFB8F . #x7E52)
                     (#xFB8E . #x7DD6)
                     (#xFB8D . #x7DA0)
                     (#xFB8C . #x7DB7)
                     (#xFB8B . #x7D5C)
                     (#xFB8A . #x7D48)
                     (#xFB89 . #xFA1D)
                     (#xFB88 . #x7B9E)
                     (#xFB87 . #x7AEB)
                     (#xFB86 . #xFA1C)
                     (#xFB85 . #x7AE7)
                     (#xFB84 . #x7AD1)
                     (#xFB83 . #x799B)
                     (#xFB82 . #xFA1B)
                     (#xFB81 . #x7994)
                     (#xFB80 . #xFA1A)
                     (#xFB7E . #xFA19)
                     (#xFB7D . #xFA18)
                     (#xFB7C . #x7930)
                     (#xFB7B . #x787A)
                     (#xFB7A . #x7864)
                     (#xFB79 . #x784E)
                     (#xFB78 . #x7821)
                     (#xFB77 . #x52AF)
                     (#xFB76 . #x7746)
                     (#xFB75 . #xFA17)
                     (#xFB74 . #x76A6)
                     (#xFB73 . #x769B)
                     (#xFB72 . #x769E)
                     (#xFB71 . #x769C)
                     (#xFB70 . #x7682)
                     (#xFB6F . #x756F)
                     (#xFB6E . #x7501)
                     (#xFB6D . #x749F)
                     (#xFB6C . #x7489)
                     (#xFB6B . #x7462)
                     (#xFB6A . #x742E)
                     (#xFB69 . #x7429)
                     (#xFB68 . #x742A)
                     (#xFB67 . #x7426)
                     (#xFB66 . #x73F5)
                     (#xFB65 . #x7407)
                     (#xFB64 . #x73D2)
                     (#xFB63 . #x73E3)
                     (#xFB62 . #x73D6)
                     (#xFB61 . #x73C9)
                     (#xFB60 . #x73BD)
                     (#xFB5F . #x7377)
                     (#xFB5E . #xFA16)
                     (#xFB5D . #x7324)
                     (#xFB5C . #x72BE)
                     (#xFB5B . #x72B1)
                     (#xFB5A . #x71FE)
                     (#xFB59 . #x71C1)
                     (#xFB58 . #xFA15)
                     (#xFB57 . #x7147)
                     (#xFB56 . #x7146)
                     (#xFB55 . #x715C)
                     (#xFB54 . #x7104)
                     (#xFB53 . #x710F)
                     (#xFB52 . #x70AB)
                     (#xFB51 . #x7085)
                     (#xFB50 . #x7028)
                     (#xFB4F . #x7007)
                     (#xFB4E . #x7005)
                     (#xFB4D . #x6FF5)
                     (#xFB4C . #x6FB5)
                     (#xFB4B . #x6F88)
                     (#xFB4A . #x6EBF)
                     (#xFB49 . #x6E3C)
                     (#xFB48 . #x6E27)
                     (#xFB47 . #x6E5C)
                     (#xFB46 . #x6E39)
                     (#xFB45 . #x6DFC)
                     (#xFB44 . #x6DF2)
                     (#xFB43 . #x6DF8)
                     (#xFB42 . #x6DCF)
                     (#xFB41 . #x6DAC)
                     (#xFB40 . #x6D96)
                     (#xFAFC . #x6D6F)
                     (#xFAFB . #x6D87)
                     (#xFAFA . #x6D04)
                     (#xFAF9 . #x6CDA)
                     (#xFAF8 . #x6C6F)
                     (#xFAF7 . #x6C86)
                     (#xFAF6 . #x6C5C)
                     (#xFAF5 . #x6C3F)
                     (#xFAF4 . #x6BD6)
                     (#xFAF3 . #x6AE4)
                     (#xFAF2 . #x6AE2)
                     (#xFAF1 . #x6A7E)
                     (#xFAF0 . #x6A73)
                     (#xFAEF . #x6A46)
                     (#xFAEE . #x6A6B)
                     (#xFAED . #x6A30)
                     (#xFAEC . #x69E2)
                     (#xFAEB . #x6998)
                     (#xFAEA . #xFA14)
                     (#xFAE9 . #x6968)
                     (#xFAE8 . #xFA13)
                     (#xFAE7 . #x68CF)
                     (#xFAE6 . #x6844)
                     (#xFAE5 . #x6801)
                     (#xFAE4 . #x67C0)
                     (#xFAE3 . #x6852)
                     (#xFAE2 . #x67BB)
                     (#xFAE1 . #x6766)
                     (#xFAE0 . #xF929)
                     (#xFADF . #x670E)
                     (#xFADE . #x66FA)
                     (#xFADD . #x66BF)
                     (#xFADC . #x66B2)
                     (#xFADB . #x66A0)
                     (#xFADA . #x6699)
                     (#xFAD9 . #x6673)
                     (#xFAD8 . #xFA12)
                     (#xFAD7 . #x6659)
                     (#xFAD6 . #x6657)
                     (#xFAD5 . #x6665)
                     (#xFAD4 . #x6624)
                     (#xFAD3 . #x661E)
                     (#xFAD2 . #x662E)
                     (#xFAD1 . #x6609)
                     (#xFAD0 . #x663B)
                     (#xFACF . #x6615)
                     (#xFACE . #x6600)
                     (#xFACD . #x654E)
                     (#xFACC . #x64CE)
                     (#xFACB . #x649D)
                     (#xFACA . #x6460)
                     (#xFAC9 . #x63F5)
                     (#xFAC8 . #x62A6)
                     (#xFAC7 . #x6213)
                     (#xFAC6 . #x6198)
                     (#xFAC5 . #x6130)
                     (#xFAC4 . #x6137)
                     (#xFAC3 . #x6111)
                     (#xFAC2 . #x60F2)
                     (#xFAC1 . #x6120)
                     (#xFAC0 . #x60D5)
                     (#xFABF . #x60DE)
                     (#xFABE . #x608A)
                     (#xFABD . #x6085)
                     (#xFABC . #x605D)
                     (#xFABB . #x5FDE)
                     (#xFABA . #x5FB7)
                     (#xFAB9 . #x5F67)
                     (#xFAB8 . #x5F34)
                     (#xFAB7 . #x5F21)
                     (#xFAB6 . #x5DD0)
                     (#xFAB5 . #x5DB9)
                     (#xFAB4 . #x5DB8)
                     (#xFAB3 . #x5D6D)
                     (#xFAB2 . #x5D42)
                     (#xFAB1 . #xFA11)
                     (#xFAB0 . #x5D53)
                     (#xFAAF . #x5D27)
                     (#xFAAE . #x5CF5)
                     (#xFAAD . #x5CBA)
                     (#xFAAC . #x5CA6)
                     (#xFAAB . #x5C1E)
                     (#xFAAA . #x5BEC)
                     (#xFAA9 . #x5BD8)
                     (#xFAA8 . #x752F)
                     (#xFAA7 . #x5BC0)
                     (#xFAA6 . #x5B56)
                     (#xFAA5 . #x59BA)
                     (#xFAA4 . #x59A4)
                     (#xFAA3 . #x5963)
                     (#xFAA2 . #x595D)
                     (#xFAA1 . #x595B)
                     (#xFAA0 . #x5953)
                     (#xFA9F . #x590B)
                     (#xFA9E . #x58B2)
                     (#xFA9D . #x589E)
                     (#xFA9C . #xFA10)
                     (#xFA9B . #xFA0F)
                     (#xFA9A . #x57C7)
                     (#xFA99 . #x57C8)
                     (#xFA98 . #x57AC)
                     (#xFA97 . #x5765)
                     (#xFA96 . #x5759)
                     (#xFA95 . #x5586)
                     (#xFA94 . #x54FF)
                     (#xFA93 . #x54A9)
                     (#xFA92 . #x548A)
                     (#xFA91 . #x549C)
                     (#xFA90 . #xFA0E)
                     (#xFA8F . #x53DD)
                     (#xFA8E . #x53B2)
                     (#xFA8D . #x5393)
                     (#xFA8C . #x5372)
                     (#xFA8B . #x5324)
                     (#xFA8A . #x5307)
                     (#xFA89 . #x5300)
                     (#xFA88 . #x52DB)
                     (#xFA87 . #x52C0)
                     (#xFA86 . #x52A6)
                     (#xFA85 . #x529C)
                     (#xFA84 . #x5215)
                     (#xFA83 . #x51EC)
                     (#xFA82 . #x51BE)
                     (#xFA81 . #x519D)
                     (#xFA80 . #x5164)
                     (#xFA7E . #x514A)
                     (#xFA7D . #x50D8)
                     (#xFA7C . #x50F4)
                     (#xFA7B . #x5094)
                     (#xFA7A . #x5042)
                     (#xFA79 . #x5070)
                     (#xFA78 . #x5046)
                     (#xFA77 . #x501E)
                     (#xFA76 . #x4FFF)
                     (#xFA75 . #x5022)
                     (#xFA74 . #x5040)
                     (#xFA73 . #x4FCD)
                     (#xFA72 . #x4F94)
                     (#xFA71 . #x4F9A)
                     (#xFA70 . #x4F8A)
                     (#xFA6F . #x4F92)
                     (#xFA6E . #x4F56)
                     (#xFA6D . #x4F39)
                     (#xFA6C . #x4F03)
                     (#xFA6B . #x4F00)
                     (#xFA6A . #x4EFC)
                     (#xFA69 . #x4EE1)
                     (#xFA68 . #x4E28)
                     (#xFA67 . #x5F45)
                     (#xFA66 . #x66FB)
                     (#xFA65 . #x92F9)
                     (#xFA64 . #x68C8)
                     (#xFA63 . #x6631)
                     (#xFA62 . #x70BB)
                     (#xFA61 . #x4FC9)
                     (#xFA60 . #x84DC)
                     (#xFA5F . #x9288)
                     (#xFA5E . #x9348)
                     (#xFA5D . #x891C)
                     (#xFA5C . #x7E8A)
                     (#xFA5B . #x2235)
                     (#xFA5A . #x2121)
                     (#xFA59 . #x2116)
                     (#xFA58 . #x3231)
                     (#xFA57 . #xFF02)
                     (#xFA56 . #xFF07)
                     (#xFA55 . #xFFE4)
                     (#xFA54 . #xFFE2)
                     (#xFA53 . #x2169)
                     (#xFA52 . #x2168)
                     (#xFA51 . #x2167)
                     (#xFA50 . #x2166)
                     (#xFA4F . #x2165)
                     (#xFA4E . #x2164)
                     (#xFA4D . #x2163)
                     (#xFA4C . #x2162)
                     (#xFA4B . #x2161)
                     (#xFA4A . #x2160)
                     (#xFA49 . #x2179)
                     (#xFA48 . #x2178)
                     (#xFA47 . #x2177)
                     (#xFA46 . #x2176)
                     (#xFA45 . #x2175)
                     (#xFA44 . #x2174)
                     (#xFA43 . #x2173)
                     (#xFA42 . #x2172)
                     (#xFA41 . #x2171)
                     (#xFA40 . #x2170)
                     (#xF9FC . #xE757)
                     (#xF9FB . #xE756)
                     (#xF9FA . #xE755)
                     (#xF9F9 . #xE754)
                     (#xF9F8 . #xE753)
                     (#xF9F7 . #xE752)
                     (#xF9F6 . #xE751)
                     (#xF9F5 . #xE750)
                     (#xF9F4 . #xE74F)
                     (#xF9F3 . #xE74E)
                     (#xF9F2 . #xE74D)
                     (#xF9F1 . #xE74C)
                     (#xF9F0 . #xE74B)
                     (#xF9EF . #xE74A)
                     (#xF9EE . #xE749)
                     (#xF9ED . #xE748)
                     (#xF9EC . #xE747)
                     (#xF9EB . #xE746)
                     (#xF9EA . #xE745)
                     (#xF9E9 . #xE744)
                     (#xF9E8 . #xE743)
                     (#xF9E7 . #xE742)
                     (#xF9E6 . #xE741)
                     (#xF9E5 . #xE740)
                     (#xF9E4 . #xE73F)
                     (#xF9E3 . #xE73E)
                     (#xF9E2 . #xE73D)
                     (#xF9E1 . #xE73C)
                     (#xF9E0 . #xE73B)
                     (#xF9DF . #xE73A)
                     (#xF9DE . #xE739)
                     (#xF9DD . #xE738)
                     (#xF9DC . #xE737)
                     (#xF9DB . #xE736)
                     (#xF9DA . #xE735)
                     (#xF9D9 . #xE734)
                     (#xF9D8 . #xE733)
                     (#xF9D7 . #xE732)
                     (#xF9D6 . #xE731)
                     (#xF9D5 . #xE730)
                     (#xF9D4 . #xE72F)
                     (#xF9D3 . #xE72E)
                     (#xF9D2 . #xE72D)
                     (#xF9D1 . #xE72C)
                     (#xF9D0 . #xE72B)
                     (#xF9CF . #xE72A)
                     (#xF9CE . #xE729)
                     (#xF9CD . #xE728)
                     (#xF9CC . #xE727)
                     (#xF9CB . #xE726)
                     (#xF9CA . #xE725)
                     (#xF9C9 . #xE724)
                     (#xF9C8 . #xE723)
                     (#xF9C7 . #xE722)
                     (#xF9C6 . #xE721)
                     (#xF9C5 . #xE720)
                     (#xF9C4 . #xE71F)
                     (#xF9C3 . #xE71E)
                     (#xF9C2 . #xE71D)
                     (#xF9C1 . #xE71C)
                     (#xF9C0 . #xE71B)
                     (#xF9BF . #xE71A)
                     (#xF9BE . #xE719)
                     (#xF9BD . #xE718)
                     (#xF9BC . #xE717)
                     (#xF9BB . #xE716)
                     (#xF9BA . #xE715)
                     (#xF9B9 . #xE714)
                     (#xF9B8 . #xE713)
                     (#xF9B7 . #xE712)
                     (#xF9B6 . #xE711)
                     (#xF9B5 . #xE710)
                     (#xF9B4 . #xE70F)
                     (#xF9B3 . #xE70E)
                     (#xF9B2 . #xE70D)
                     (#xF9B1 . #xE70C)
                     (#xF9B0 . #xE70B)
                     (#xF9AF . #xE70A)
                     (#xF9AE . #xE709)
                     (#xF9AD . #xE708)
                     (#xF9AC . #xE707)
                     (#xF9AB . #xE706)
                     (#xF9AA . #xE705)
                     (#xF9A9 . #xE704)
                     (#xF9A8 . #xE703)
                     (#xF9A7 . #xE702)
                     (#xF9A6 . #xE701)
                     (#xF9A5 . #xE700)
                     (#xF9A4 . #xE6FF)
                     (#xF9A3 . #xE6FE)
                     (#xF9A2 . #xE6FD)
                     (#xF9A1 . #xE6FC)
                     (#xF9A0 . #xE6FB)
                     (#xF99F . #xE6FA)
                     (#xF99E . #xE6F9)
                     (#xF99D . #xE6F8)
                     (#xF99C . #xE6F7)
                     (#xF99B . #xE6F6)
                     (#xF99A . #xE6F5)
                     (#xF999 . #xE6F4)
                     (#xF998 . #xE6F3)
                     (#xF997 . #xE6F2)
                     (#xF996 . #xE6F1)
                     (#xF995 . #xE6F0)
                     (#xF994 . #xE6EF)
                     (#xF993 . #xE6EE)
                     (#xF992 . #xE6ED)
                     (#xF991 . #xE6EC)
                     (#xF990 . #xE6EB)
                     (#xF98F . #xE6EA)
                     (#xF98E . #xE6E9)
                     (#xF98D . #xE6E8)
                     (#xF98C . #xE6E7)
                     (#xF98B . #xE6E6)
                     (#xF98A . #xE6E5)
                     (#xF989 . #xE6E4)
                     (#xF988 . #xE6E3)
                     (#xF987 . #xE6E2)
                     (#xF986 . #xE6E1)
                     (#xF985 . #xE6E0)
                     (#xF984 . #xE6DF)
                     (#xF983 . #xE6DE)
                     (#xF982 . #xE6DD)
                     (#xF981 . #xE6DC)
                     (#xF980 . #xE6DB)
                     (#xF97E . #xE6DA)
                     (#xF97D . #xE6D9)
                     (#xF97C . #xE6D8)
                     (#xF97B . #xE6D7)
                     (#xF97A . #xE6D6)
                     (#xF979 . #xE6D5)
                     (#xF978 . #xE6D4)
                     (#xF977 . #xE6D3)
                     (#xF976 . #xE6D2)
                     (#xF975 . #xE6D1)
                     (#xF974 . #xE6D0)
                     (#xF973 . #xE6CF)
                     (#xF972 . #xE6CE)
                     (#xF971 . #xE6CD)
                     (#xF970 . #xE6CC)
                     (#xF96F . #xE6CB)
                     (#xF96E . #xE6CA)
                     (#xF96D . #xE6C9)
                     (#xF96C . #xE6C8)
                     (#xF96B . #xE6C7)
                     (#xF96A . #xE6C6)
                     (#xF969 . #xE6C5)
                     (#xF968 . #xE6C4)
                     (#xF967 . #xE6C3)
                     (#xF966 . #xE6C2)
                     (#xF965 . #xE6C1)
                     (#xF964 . #xE6C0)
                     (#xF963 . #xE6BF)
                     (#xF962 . #xE6BE)
                     (#xF961 . #xE6BD)
                     (#xF960 . #xE6BC)
                     (#xF95F . #xE6BB)
                     (#xF95E . #xE6BA)
                     (#xF95D . #xE6B9)
                     (#xF95C . #xE6B8)
                     (#xF95B . #xE6B7)
                     (#xF95A . #xE6B6)
                     (#xF959 . #xE6B5)
                     (#xF958 . #xE6B4)
                     (#xF957 . #xE6B3)
                     (#xF956 . #xE6B2)
                     (#xF955 . #xE6B1)
                     (#xF954 . #xE6B0)
                     (#xF953 . #xE6AF)
                     (#xF952 . #xE6AE)
                     (#xF951 . #xE6AD)
                     (#xF950 . #xE6AC)
                     (#xF94F . #xE6AB)
                     (#xF94E . #xE6AA)
                     (#xF94D . #xE6A9)
                     (#xF94C . #xE6A8)
                     (#xF94B . #xE6A7)
                     (#xF94A . #xE6A6)
                     (#xF949 . #xE6A5)
                     (#xF948 . #xE6A4)
                     (#xF947 . #xE6A3)
                     (#xF946 . #xE6A2)
                     (#xF945 . #xE6A1)
                     (#xF944 . #xE6A0)
                     (#xF943 . #xE69F)
                     (#xF942 . #xE69E)
                     (#xF941 . #xE69D)
                     (#xF940 . #xE69C)
                     (#xF8FC . #xE69B)
                     (#xF8FB . #xE69A)
                     (#xF8FA . #xE699)
                     (#xF8F9 . #xE698)
                     (#xF8F8 . #xE697)
                     (#xF8F7 . #xE696)
                     (#xF8F6 . #xE695)
                     (#xF8F5 . #xE694)
                     (#xF8F4 . #xE693)
                     (#xF8F3 . #xE692)
                     (#xF8F2 . #xE691)
                     (#xF8F1 . #xE690)
                     (#xF8F0 . #xE68F)
                     (#xF8EF . #xE68E)
                     (#xF8EE . #xE68D)
                     (#xF8ED . #xE68C)
                     (#xF8EC . #xE68B)
                     (#xF8EB . #xE68A)
                     (#xF8EA . #xE689)
                     (#xF8E9 . #xE688)
                     (#xF8E8 . #xE687)
                     (#xF8E7 . #xE686)
                     (#xF8E6 . #xE685)
                     (#xF8E5 . #xE684)
                     (#xF8E4 . #xE683)
                     (#xF8E3 . #xE682)
                     (#xF8E2 . #xE681)
                     (#xF8E1 . #xE680)
                     (#xF8E0 . #xE67F)
                     (#xF8DF . #xE67E)
                     (#xF8DE . #xE67D)
                     (#xF8DD . #xE67C)
                     (#xF8DC . #xE67B)
                     (#xF8DB . #xE67A)
                     (#xF8DA . #xE679)
                     (#xF8D9 . #xE678)
                     (#xF8D8 . #xE677)
                     (#xF8D7 . #xE676)
                     (#xF8D6 . #xE675)
                     (#xF8D5 . #xE674)
                     (#xF8D4 . #xE673)
                     (#xF8D3 . #xE672)
                     (#xF8D2 . #xE671)
                     (#xF8D1 . #xE670)
                     (#xF8D0 . #xE66F)
                     (#xF8CF . #xE66E)
                     (#xF8CE . #xE66D)
                     (#xF8CD . #xE66C)
                     (#xF8CC . #xE66B)
                     (#xF8CB . #xE66A)
                     (#xF8CA . #xE669)
                     (#xF8C9 . #xE668)
                     (#xF8C8 . #xE667)
                     (#xF8C7 . #xE666)
                     (#xF8C6 . #xE665)
                     (#xF8C5 . #xE664)
                     (#xF8C4 . #xE663)
                     (#xF8C3 . #xE662)
                     (#xF8C2 . #xE661)
                     (#xF8C1 . #xE660)
                     (#xF8C0 . #xE65F)
                     (#xF8BF . #xE65E)
                     (#xF8BE . #xE65D)
                     (#xF8BD . #xE65C)
                     (#xF8BC . #xE65B)
                     (#xF8BB . #xE65A)
                     (#xF8BA . #xE659)
                     (#xF8B9 . #xE658)
                     (#xF8B8 . #xE657)
                     (#xF8B7 . #xE656)
                     (#xF8B6 . #xE655)
                     (#xF8B5 . #xE654)
                     (#xF8B4 . #xE653)
                     (#xF8B3 . #xE652)
                     (#xF8B2 . #xE651)
                     (#xF8B1 . #xE650)
                     (#xF8B0 . #xE64F)
                     (#xF8AF . #xE64E)
                     (#xF8AE . #xE64D)
                     (#xF8AD . #xE64C)
                     (#xF8AC . #xE64B)
                     (#xF8AB . #xE64A)
                     (#xF8AA . #xE649)
                     (#xF8A9 . #xE648)
                     (#xF8A8 . #xE647)
                     (#xF8A7 . #xE646)
                     (#xF8A6 . #xE645)
                     (#xF8A5 . #xE644)
                     (#xF8A4 . #xE643)
                     (#xF8A3 . #xE642)
                     (#xF8A2 . #xE641)
                     (#xF8A1 . #xE640)
                     (#xF8A0 . #xE63F)
                     (#xF89F . #xE63E)
                     (#xF89E . #xE63D)
                     (#xF89D . #xE63C)
                     (#xF89C . #xE63B)
                     (#xF89B . #xE63A)
                     (#xF89A . #xE639)
                     (#xF899 . #xE638)
                     (#xF898 . #xE637)
                     (#xF897 . #xE636)
                     (#xF896 . #xE635)
                     (#xF895 . #xE634)
                     (#xF894 . #xE633)
                     (#xF893 . #xE632)
                     (#xF892 . #xE631)
                     (#xF891 . #xE630)
                     (#xF890 . #xE62F)
                     (#xF88F . #xE62E)
                     (#xF88E . #xE62D)
                     (#xF88D . #xE62C)
                     (#xF88C . #xE62B)
                     (#xF88B . #xE62A)
                     (#xF88A . #xE629)
                     (#xF889 . #xE628)
                     (#xF888 . #xE627)
                     (#xF887 . #xE626)
                     (#xF886 . #xE625)
                     (#xF885 . #xE624)
                     (#xF884 . #xE623)
                     (#xF883 . #xE622)
                     (#xF882 . #xE621)
                     (#xF881 . #xE620)
                     (#xF880 . #xE61F)
                     (#xF87E . #xE61E)
                     (#xF87D . #xE61D)
                     (#xF87C . #xE61C)
                     (#xF87B . #xE61B)
                     (#xF87A . #xE61A)
                     (#xF879 . #xE619)
                     (#xF878 . #xE618)
                     (#xF877 . #xE617)
                     (#xF876 . #xE616)
                     (#xF875 . #xE615)
                     (#xF874 . #xE614)
                     (#xF873 . #xE613)
                     (#xF872 . #xE612)
                     (#xF871 . #xE611)
                     (#xF870 . #xE610)
                     (#xF86F . #xE60F)
                     (#xF86E . #xE60E)
                     (#xF86D . #xE60D)
                     (#xF86C . #xE60C)
                     (#xF86B . #xE60B)
                     (#xF86A . #xE60A)
                     (#xF869 . #xE609)
                     (#xF868 . #xE608)
                     (#xF867 . #xE607)
                     (#xF866 . #xE606)
                     (#xF865 . #xE605)
                     (#xF864 . #xE604)
                     (#xF863 . #xE603)
                     (#xF862 . #xE602)
                     (#xF861 . #xE601)
                     (#xF860 . #xE600)
                     (#xF85F . #xE5FF)
                     (#xF85E . #xE5FE)
                     (#xF85D . #xE5FD)
                     (#xF85C . #xE5FC)
                     (#xF85B . #xE5FB)
                     (#xF85A . #xE5FA)
                     (#xF859 . #xE5F9)
                     (#xF858 . #xE5F8)
                     (#xF857 . #xE5F7)
                     (#xF856 . #xE5F6)
                     (#xF855 . #xE5F5)
                     (#xF854 . #xE5F4)
                     (#xF853 . #xE5F3)
                     (#xF852 . #xE5F2)
                     (#xF851 . #xE5F1)
                     (#xF850 . #xE5F0)
                     (#xF84F . #xE5EF)
                     (#xF84E . #xE5EE)
                     (#xF84D . #xE5ED)
                     (#xF84C . #xE5EC)
                     (#xF84B . #xE5EB)
                     (#xF84A . #xE5EA)
                     (#xF849 . #xE5E9)
                     (#xF848 . #xE5E8)
                     (#xF847 . #xE5E7)
                     (#xF846 . #xE5E6)
                     (#xF845 . #xE5E5)
                     (#xF844 . #xE5E4)
                     (#xF843 . #xE5E3)
                     (#xF842 . #xE5E2)
                     (#xF841 . #xE5E1)
                     (#xF840 . #xE5E0)
                     (#xF7FC . #xE5DF)
                     (#xF7FB . #xE5DE)
                     (#xF7FA . #xE5DD)
                     (#xF7F9 . #xE5DC)
                     (#xF7F8 . #xE5DB)
                     (#xF7F7 . #xE5DA)
                     (#xF7F6 . #xE5D9)
                     (#xF7F5 . #xE5D8)
                     (#xF7F4 . #xE5D7)
                     (#xF7F3 . #xE5D6)
                     (#xF7F2 . #xE5D5)
                     (#xF7F1 . #xE5D4)
                     (#xF7F0 . #xE5D3)
                     (#xF7EF . #xE5D2)
                     (#xF7EE . #xE5D1)
                     (#xF7ED . #xE5D0)
                     (#xF7EC . #xE5CF)
                     (#xF7EB . #xE5CE)
                     (#xF7EA . #xE5CD)
                     (#xF7E9 . #xE5CC)
                     (#xF7E8 . #xE5CB)
                     (#xF7E7 . #xE5CA)
                     (#xF7E6 . #xE5C9)
                     (#xF7E5 . #xE5C8)
                     (#xF7E4 . #xE5C7)
                     (#xF7E3 . #xE5C6)
                     (#xF7E2 . #xE5C5)
                     (#xF7E1 . #xE5C4)
                     (#xF7E0 . #xE5C3)
                     (#xF7DF . #xE5C2)
                     (#xF7DE . #xE5C1)
                     (#xF7DD . #xE5C0)
                     (#xF7DC . #xE5BF)
                     (#xF7DB . #xE5BE)
                     (#xF7DA . #xE5BD)
                     (#xF7D9 . #xE5BC)
                     (#xF7D8 . #xE5BB)
                     (#xF7D7 . #xE5BA)
                     (#xF7D6 . #xE5B9)
                     (#xF7D5 . #xE5B8)
                     (#xF7D4 . #xE5B7)
                     (#xF7D3 . #xE5B6)
                     (#xF7D2 . #xE5B5)
                     (#xF7D1 . #xE5B4)
                     (#xF7D0 . #xE5B3)
                     (#xF7CF . #xE5B2)
                     (#xF7CE . #xE5B1)
                     (#xF7CD . #xE5B0)
                     (#xF7CC . #xE5AF)
                     (#xF7CB . #xE5AE)
                     (#xF7CA . #xE5AD)
                     (#xF7C9 . #xE5AC)
                     (#xF7C8 . #xE5AB)
                     (#xF7C7 . #xE5AA)
                     (#xF7C6 . #xE5A9)
                     (#xF7C5 . #xE5A8)
                     (#xF7C4 . #xE5A7)
                     (#xF7C3 . #xE5A6)
                     (#xF7C2 . #xE5A5)
                     (#xF7C1 . #xE5A4)
                     (#xF7C0 . #xE5A3)
                     (#xF7BF . #xE5A2)
                     (#xF7BE . #xE5A1)
                     (#xF7BD . #xE5A0)
                     (#xF7BC . #xE59F)
                     (#xF7BB . #xE59E)
                     (#xF7BA . #xE59D)
                     (#xF7B9 . #xE59C)
                     (#xF7B8 . #xE59B)
                     (#xF7B7 . #xE59A)
                     (#xF7B6 . #xE599)
                     (#xF7B5 . #xE598)
                     (#xF7B4 . #xE597)
                     (#xF7B3 . #xE596)
                     (#xF7B2 . #xE595)
                     (#xF7B1 . #xE594)
                     (#xF7B0 . #xE593)
                     (#xF7AF . #xE592)
                     (#xF7AE . #xE591)
                     (#xF7AD . #xE590)
                     (#xF7AC . #xE58F)
                     (#xF7AB . #xE58E)
                     (#xF7AA . #xE58D)
                     (#xF7A9 . #xE58C)
                     (#xF7A8 . #xE58B)
                     (#xF7A7 . #xE58A)
                     (#xF7A6 . #xE589)
                     (#xF7A5 . #xE588)
                     (#xF7A4 . #xE587)
                     (#xF7A3 . #xE586)
                     (#xF7A2 . #xE585)
                     (#xF7A1 . #xE584)
                     (#xF7A0 . #xE583)
                     (#xF79F . #xE582)
                     (#xF79E . #xE581)
                     (#xF79D . #xE580)
                     (#xF79C . #xE57F)
                     (#xF79B . #xE57E)
                     (#xF79A . #xE57D)
                     (#xF799 . #xE57C)
                     (#xF798 . #xE57B)
                     (#xF797 . #xE57A)
                     (#xF796 . #xE579)
                     (#xF795 . #xE578)
                     (#xF794 . #xE577)
                     (#xF793 . #xE576)
                     (#xF792 . #xE575)
                     (#xF791 . #xE574)
                     (#xF790 . #xE573)
                     (#xF78F . #xE572)
                     (#xF78E . #xE571)
                     (#xF78D . #xE570)
                     (#xF78C . #xE56F)
                     (#xF78B . #xE56E)
                     (#xF78A . #xE56D)
                     (#xF789 . #xE56C)
                     (#xF788 . #xE56B)
                     (#xF787 . #xE56A)
                     (#xF786 . #xE569)
                     (#xF785 . #xE568)
                     (#xF784 . #xE567)
                     (#xF783 . #xE566)
                     (#xF782 . #xE565)
                     (#xF781 . #xE564)
                     (#xF780 . #xE563)
                     (#xF77E . #xE562)
                     (#xF77D . #xE561)
                     (#xF77C . #xE560)
                     (#xF77B . #xE55F)
                     (#xF77A . #xE55E)
                     (#xF779 . #xE55D)
                     (#xF778 . #xE55C)
                     (#xF777 . #xE55B)
                     (#xF776 . #xE55A)
                     (#xF775 . #xE559)
                     (#xF774 . #xE558)
                     (#xF773 . #xE557)
                     (#xF772 . #xE556)
                     (#xF771 . #xE555)
                     (#xF770 . #xE554)
                     (#xF76F . #xE553)
                     (#xF76E . #xE552)
                     (#xF76D . #xE551)
                     (#xF76C . #xE550)
                     (#xF76B . #xE54F)
                     (#xF76A . #xE54E)
                     (#xF769 . #xE54D)
                     (#xF768 . #xE54C)
                     (#xF767 . #xE54B)
                     (#xF766 . #xE54A)
                     (#xF765 . #xE549)
                     (#xF764 . #xE548)
                     (#xF763 . #xE547)
                     (#xF762 . #xE546)
                     (#xF761 . #xE545)
                     (#xF760 . #xE544)
                     (#xF75F . #xE543)
                     (#xF75E . #xE542)
                     (#xF75D . #xE541)
                     (#xF75C . #xE540)
                     (#xF75B . #xE53F)
                     (#xF75A . #xE53E)
                     (#xF759 . #xE53D)
                     (#xF758 . #xE53C)
                     (#xF757 . #xE53B)
                     (#xF756 . #xE53A)
                     (#xF755 . #xE539)
                     (#xF754 . #xE538)
                     (#xF753 . #xE537)
                     (#xF752 . #xE536)
                     (#xF751 . #xE535)
                     (#xF750 . #xE534)
                     (#xF74F . #xE533)
                     (#xF74E . #xE532)
                     (#xF74D . #xE531)
                     (#xF74C . #xE530)
                     (#xF74B . #xE52F)
                     (#xF74A . #xE52E)
                     (#xF749 . #xE52D)
                     (#xF748 . #xE52C)
                     (#xF747 . #xE52B)
                     (#xF746 . #xE52A)
                     (#xF745 . #xE529)
                     (#xF744 . #xE528)
                     (#xF743 . #xE527)
                     (#xF742 . #xE526)
                     (#xF741 . #xE525)
                     (#xF740 . #xE524)
                     (#xF6FC . #xE523)
                     (#xF6FB . #xE522)
                     (#xF6FA . #xE521)
                     (#xF6F9 . #xE520)
                     (#xF6F8 . #xE51F)
                     (#xF6F7 . #xE51E)
                     (#xF6F6 . #xE51D)
                     (#xF6F5 . #xE51C)
                     (#xF6F4 . #xE51B)
                     (#xF6F3 . #xE51A)
                     (#xF6F2 . #xE519)
                     (#xF6F1 . #xE518)
                     (#xF6F0 . #xE517)
                     (#xF6EF . #xE516)
                     (#xF6EE . #xE515)
                     (#xF6ED . #xE514)
                     (#xF6EC . #xE513)
                     (#xF6EB . #xE512)
                     (#xF6EA . #xE511)
                     (#xF6E9 . #xE510)
                     (#xF6E8 . #xE50F)
                     (#xF6E7 . #xE50E)
                     (#xF6E6 . #xE50D)
                     (#xF6E5 . #xE50C)
                     (#xF6E4 . #xE50B)
                     (#xF6E3 . #xE50A)
                     (#xF6E2 . #xE509)
                     (#xF6E1 . #xE508)
                     (#xF6E0 . #xE507)
                     (#xF6DF . #xE506)
                     (#xF6DE . #xE505)
                     (#xF6DD . #xE504)
                     (#xF6DC . #xE503)
                     (#xF6DB . #xE502)
                     (#xF6DA . #xE501)
                     (#xF6D9 . #xE500)
                     (#xF6D8 . #xE4FF)
                     (#xF6D7 . #xE4FE)
                     (#xF6D6 . #xE4FD)
                     (#xF6D5 . #xE4FC)
                     (#xF6D4 . #xE4FB)
                     (#xF6D3 . #xE4FA)
                     (#xF6D2 . #xE4F9)
                     (#xF6D1 . #xE4F8)
                     (#xF6D0 . #xE4F7)
                     (#xF6CF . #xE4F6)
                     (#xF6CE . #xE4F5)
                     (#xF6CD . #xE4F4)
                     (#xF6CC . #xE4F3)
                     (#xF6CB . #xE4F2)
                     (#xF6CA . #xE4F1)
                     (#xF6C9 . #xE4F0)
                     (#xF6C8 . #xE4EF)
                     (#xF6C7 . #xE4EE)
                     (#xF6C6 . #xE4ED)
                     (#xF6C5 . #xE4EC)
                     (#xF6C4 . #xE4EB)
                     (#xF6C3 . #xE4EA)
                     (#xF6C2 . #xE4E9)
                     (#xF6C1 . #xE4E8)
                     (#xF6C0 . #xE4E7)
                     (#xF6BF . #xE4E6)
                     (#xF6BE . #xE4E5)
                     (#xF6BD . #xE4E4)
                     (#xF6BC . #xE4E3)
                     (#xF6BB . #xE4E2)
                     (#xF6BA . #xE4E1)
                     (#xF6B9 . #xE4E0)
                     (#xF6B8 . #xE4DF)
                     (#xF6B7 . #xE4DE)
                     (#xF6B6 . #xE4DD)
                     (#xF6B5 . #xE4DC)
                     (#xF6B4 . #xE4DB)
                     (#xF6B3 . #xE4DA)
                     (#xF6B2 . #xE4D9)
                     (#xF6B1 . #xE4D8)
                     (#xF6B0 . #xE4D7)
                     (#xF6AF . #xE4D6)
                     (#xF6AE . #xE4D5)
                     (#xF6AD . #xE4D4)
                     (#xF6AC . #xE4D3)
                     (#xF6AB . #xE4D2)
                     (#xF6AA . #xE4D1)
                     (#xF6A9 . #xE4D0)
                     (#xF6A8 . #xE4CF)
                     (#xF6A7 . #xE4CE)
                     (#xF6A6 . #xE4CD)
                     (#xF6A5 . #xE4CC)
                     (#xF6A4 . #xE4CB)
                     (#xF6A3 . #xE4CA)
                     (#xF6A2 . #xE4C9)
                     (#xF6A1 . #xE4C8)
                     (#xF6A0 . #xE4C7)
                     (#xF69F . #xE4C6)
                     (#xF69E . #xE4C5)
                     (#xF69D . #xE4C4)
                     (#xF69C . #xE4C3)
                     (#xF69B . #xE4C2)
                     (#xF69A . #xE4C1)
                     (#xF699 . #xE4C0)
                     (#xF698 . #xE4BF)
                     (#xF697 . #xE4BE)
                     (#xF696 . #xE4BD)
                     (#xF695 . #xE4BC)
                     (#xF694 . #xE4BB)
                     (#xF693 . #xE4BA)
                     (#xF692 . #xE4B9)
                     (#xF691 . #xE4B8)
                     (#xF690 . #xE4B7)
                     (#xF68F . #xE4B6)
                     (#xF68E . #xE4B5)
                     (#xF68D . #xE4B4)
                     (#xF68C . #xE4B3)
                     (#xF68B . #xE4B2)
                     (#xF68A . #xE4B1)
                     (#xF689 . #xE4B0)
                     (#xF688 . #xE4AF)
                     (#xF687 . #xE4AE)
                     (#xF686 . #xE4AD)
                     (#xF685 . #xE4AC)
                     (#xF684 . #xE4AB)
                     (#xF683 . #xE4AA)
                     (#xF682 . #xE4A9)
                     (#xF681 . #xE4A8)
                     (#xF680 . #xE4A7)
                     (#xF67E . #xE4A6)
                     (#xF67D . #xE4A5)
                     (#xF67C . #xE4A4)
                     (#xF67B . #xE4A3)
                     (#xF67A . #xE4A2)
                     (#xF679 . #xE4A1)
                     (#xF678 . #xE4A0)
                     (#xF677 . #xE49F)
                     (#xF676 . #xE49E)
                     (#xF675 . #xE49D)
                     (#xF674 . #xE49C)
                     (#xF673 . #xE49B)
                     (#xF672 . #xE49A)
                     (#xF671 . #xE499)
                     (#xF670 . #xE498)
                     (#xF66F . #xE497)
                     (#xF66E . #xE496)
                     (#xF66D . #xE495)
                     (#xF66C . #xE494)
                     (#xF66B . #xE493)
                     (#xF66A . #xE492)
                     (#xF669 . #xE491)
                     (#xF668 . #xE490)
                     (#xF667 . #xE48F)
                     (#xF666 . #xE48E)
                     (#xF665 . #xE48D)
                     (#xF664 . #xE48C)
                     (#xF663 . #xE48B)
                     (#xF662 . #xE48A)
                     (#xF661 . #xE489)
                     (#xF660 . #xE488)
                     (#xF65F . #xE487)
                     (#xF65E . #xE486)
                     (#xF65D . #xE485)
                     (#xF65C . #xE484)
                     (#xF65B . #xE483)
                     (#xF65A . #xE482)
                     (#xF659 . #xE481)
                     (#xF658 . #xE480)
                     (#xF657 . #xE47F)
                     (#xF656 . #xE47E)
                     (#xF655 . #xE47D)
                     (#xF654 . #xE47C)
                     (#xF653 . #xE47B)
                     (#xF652 . #xE47A)
                     (#xF651 . #xE479)
                     (#xF650 . #xE478)
                     (#xF64F . #xE477)
                     (#xF64E . #xE476)
                     (#xF64D . #xE475)
                     (#xF64C . #xE474)
                     (#xF64B . #xE473)
                     (#xF64A . #xE472)
                     (#xF649 . #xE471)
                     (#xF648 . #xE470)
                     (#xF647 . #xE46F)
                     (#xF646 . #xE46E)
                     (#xF645 . #xE46D)
                     (#xF644 . #xE46C)
                     (#xF643 . #xE46B)
                     (#xF642 . #xE46A)
                     (#xF641 . #xE469)
                     (#xF640 . #xE468)
                     (#xF5FC . #xE467)
                     (#xF5FB . #xE466)
                     (#xF5FA . #xE465)
                     (#xF5F9 . #xE464)
                     (#xF5F8 . #xE463)
                     (#xF5F7 . #xE462)
                     (#xF5F6 . #xE461)
                     (#xF5F5 . #xE460)
                     (#xF5F4 . #xE45F)
                     (#xF5F3 . #xE45E)
                     (#xF5F2 . #xE45D)
                     (#xF5F1 . #xE45C)
                     (#xF5F0 . #xE45B)
                     (#xF5EF . #xE45A)
                     (#xF5EE . #xE459)
                     (#xF5ED . #xE458)
                     (#xF5EC . #xE457)
                     (#xF5EB . #xE456)
                     (#xF5EA . #xE455)
                     (#xF5E9 . #xE454)
                     (#xF5E8 . #xE453)
                     (#xF5E7 . #xE452)
                     (#xF5E6 . #xE451)
                     (#xF5E5 . #xE450)
                     (#xF5E4 . #xE44F)
                     (#xF5E3 . #xE44E)
                     (#xF5E2 . #xE44D)
                     (#xF5E1 . #xE44C)
                     (#xF5E0 . #xE44B)
                     (#xF5DF . #xE44A)
                     (#xF5DE . #xE449)
                     (#xF5DD . #xE448)
                     (#xF5DC . #xE447)
                     (#xF5DB . #xE446)
                     (#xF5DA . #xE445)
                     (#xF5D9 . #xE444)
                     (#xF5D8 . #xE443)
                     (#xF5D7 . #xE442)
                     (#xF5D6 . #xE441)
                     (#xF5D5 . #xE440)
                     (#xF5D4 . #xE43F)
                     (#xF5D3 . #xE43E)
                     (#xF5D2 . #xE43D)
                     (#xF5D1 . #xE43C)
                     (#xF5D0 . #xE43B)
                     (#xF5CF . #xE43A)
                     (#xF5CE . #xE439)
                     (#xF5CD . #xE438)
                     (#xF5CC . #xE437)
                     (#xF5CB . #xE436)
                     (#xF5CA . #xE435)
                     (#xF5C9 . #xE434)
                     (#xF5C8 . #xE433)
                     (#xF5C7 . #xE432)
                     (#xF5C6 . #xE431)
                     (#xF5C5 . #xE430)
                     (#xF5C4 . #xE42F)
                     (#xF5C3 . #xE42E)
                     (#xF5C2 . #xE42D)
                     (#xF5C1 . #xE42C)
                     (#xF5C0 . #xE42B)
                     (#xF5BF . #xE42A)
                     (#xF5BE . #xE429)
                     (#xF5BD . #xE428)
                     (#xF5BC . #xE427)
                     (#xF5BB . #xE426)
                     (#xF5BA . #xE425)
                     (#xF5B9 . #xE424)
                     (#xF5B8 . #xE423)
                     (#xF5B7 . #xE422)
                     (#xF5B6 . #xE421)
                     (#xF5B5 . #xE420)
                     (#xF5B4 . #xE41F)
                     (#xF5B3 . #xE41E)
                     (#xF5B2 . #xE41D)
                     (#xF5B1 . #xE41C)
                     (#xF5B0 . #xE41B)
                     (#xF5AF . #xE41A)
                     (#xF5AE . #xE419)
                     (#xF5AD . #xE418)
                     (#xF5AC . #xE417)
                     (#xF5AB . #xE416)
                     (#xF5AA . #xE415)
                     (#xF5A9 . #xE414)
                     (#xF5A8 . #xE413)
                     (#xF5A7 . #xE412)
                     (#xF5A6 . #xE411)
                     (#xF5A5 . #xE410)
                     (#xF5A4 . #xE40F)
                     (#xF5A3 . #xE40E)
                     (#xF5A2 . #xE40D)
                     (#xF5A1 . #xE40C)
                     (#xF5A0 . #xE40B)
                     (#xF59F . #xE40A)
                     (#xF59E . #xE409)
                     (#xF59D . #xE408)
                     (#xF59C . #xE407)
                     (#xF59B . #xE406)
                     (#xF59A . #xE405)
                     (#xF599 . #xE404)
                     (#xF598 . #xE403)
                     (#xF597 . #xE402)
                     (#xF596 . #xE401)
                     (#xF595 . #xE400)
                     (#xF594 . #xE3FF)
                     (#xF593 . #xE3FE)
                     (#xF592 . #xE3FD)
                     (#xF591 . #xE3FC)
                     (#xF590 . #xE3FB)
                     (#xF58F . #xE3FA)
                     (#xF58E . #xE3F9)
                     (#xF58D . #xE3F8)
                     (#xF58C . #xE3F7)
                     (#xF58B . #xE3F6)
                     (#xF58A . #xE3F5)
                     (#xF589 . #xE3F4)
                     (#xF588 . #xE3F3)
                     (#xF587 . #xE3F2)
                     (#xF586 . #xE3F1)
                     (#xF585 . #xE3F0)
                     (#xF584 . #xE3EF)
                     (#xF583 . #xE3EE)
                     (#xF582 . #xE3ED)
                     (#xF581 . #xE3EC)
                     (#xF580 . #xE3EB)
                     (#xF57E . #xE3EA)
                     (#xF57D . #xE3E9)
                     (#xF57C . #xE3E8)
                     (#xF57B . #xE3E7)
                     (#xF57A . #xE3E6)
                     (#xF579 . #xE3E5)
                     (#xF578 . #xE3E4)
                     (#xF577 . #xE3E3)
                     (#xF576 . #xE3E2)
                     (#xF575 . #xE3E1)
                     (#xF574 . #xE3E0)
                     (#xF573 . #xE3DF)
                     (#xF572 . #xE3DE)
                     (#xF571 . #xE3DD)
                     (#xF570 . #xE3DC)
                     (#xF56F . #xE3DB)
                     (#xF56E . #xE3DA)
                     (#xF56D . #xE3D9)
                     (#xF56C . #xE3D8)
                     (#xF56B . #xE3D7)
                     (#xF56A . #xE3D6)
                     (#xF569 . #xE3D5)
                     (#xF568 . #xE3D4)
                     (#xF567 . #xE3D3)
                     (#xF566 . #xE3D2)
                     (#xF565 . #xE3D1)
                     (#xF564 . #xE3D0)
                     (#xF563 . #xE3CF)
                     (#xF562 . #xE3CE)
                     (#xF561 . #xE3CD)
                     (#xF560 . #xE3CC)
                     (#xF55F . #xE3CB)
                     (#xF55E . #xE3CA)
                     (#xF55D . #xE3C9)
                     (#xF55C . #xE3C8)
                     (#xF55B . #xE3C7)
                     (#xF55A . #xE3C6)
                     (#xF559 . #xE3C5)
                     (#xF558 . #xE3C4)
                     (#xF557 . #xE3C3)
                     (#xF556 . #xE3C2)
                     (#xF555 . #xE3C1)
                     (#xF554 . #xE3C0)
                     (#xF553 . #xE3BF)
                     (#xF552 . #xE3BE)
                     (#xF551 . #xE3BD)
                     (#xF550 . #xE3BC)
                     (#xF54F . #xE3BB)
                     (#xF54E . #xE3BA)
                     (#xF54D . #xE3B9)
                     (#xF54C . #xE3B8)
                     (#xF54B . #xE3B7)
                     (#xF54A . #xE3B6)
                     (#xF549 . #xE3B5)
                     (#xF548 . #xE3B4)
                     (#xF547 . #xE3B3)
                     (#xF546 . #xE3B2)
                     (#xF545 . #xE3B1)
                     (#xF544 . #xE3B0)
                     (#xF543 . #xE3AF)
                     (#xF542 . #xE3AE)
                     (#xF541 . #xE3AD)
                     (#xF540 . #xE3AC)
                     (#xF4FC . #xE3AB)
                     (#xF4FB . #xE3AA)
                     (#xF4FA . #xE3A9)
                     (#xF4F9 . #xE3A8)
                     (#xF4F8 . #xE3A7)
                     (#xF4F7 . #xE3A6)
                     (#xF4F6 . #xE3A5)
                     (#xF4F5 . #xE3A4)
                     (#xF4F4 . #xE3A3)
                     (#xF4F3 . #xE3A2)
                     (#xF4F2 . #xE3A1)
                     (#xF4F1 . #xE3A0)
                     (#xF4F0 . #xE39F)
                     (#xF4EF . #xE39E)
                     (#xF4EE . #xE39D)
                     (#xF4ED . #xE39C)
                     (#xF4EC . #xE39B)
                     (#xF4EB . #xE39A)
                     (#xF4EA . #xE399)
                     (#xF4E9 . #xE398)
                     (#xF4E8 . #xE397)
                     (#xF4E7 . #xE396)
                     (#xF4E6 . #xE395)
                     (#xF4E5 . #xE394)
                     (#xF4E4 . #xE393)
                     (#xF4E3 . #xE392)
                     (#xF4E2 . #xE391)
                     (#xF4E1 . #xE390)
                     (#xF4E0 . #xE38F)
                     (#xF4DF . #xE38E)
                     (#xF4DE . #xE38D)
                     (#xF4DD . #xE38C)
                     (#xF4DC . #xE38B)
                     (#xF4DB . #xE38A)
                     (#xF4DA . #xE389)
                     (#xF4D9 . #xE388)
                     (#xF4D8 . #xE387)
                     (#xF4D7 . #xE386)
                     (#xF4D6 . #xE385)
                     (#xF4D5 . #xE384)
                     (#xF4D4 . #xE383)
                     (#xF4D3 . #xE382)
                     (#xF4D2 . #xE381)
                     (#xF4D1 . #xE380)
                     (#xF4D0 . #xE37F)
                     (#xF4CF . #xE37E)
                     (#xF4CE . #xE37D)
                     (#xF4CD . #xE37C)
                     (#xF4CC . #xE37B)
                     (#xF4CB . #xE37A)
                     (#xF4CA . #xE379)
                     (#xF4C9 . #xE378)
                     (#xF4C8 . #xE377)
                     (#xF4C7 . #xE376)
                     (#xF4C6 . #xE375)
                     (#xF4C5 . #xE374)
                     (#xF4C4 . #xE373)
                     (#xF4C3 . #xE372)
                     (#xF4C2 . #xE371)
                     (#xF4C1 . #xE370)
                     (#xF4C0 . #xE36F)
                     (#xF4BF . #xE36E)
                     (#xF4BE . #xE36D)
                     (#xF4BD . #xE36C)
                     (#xF4BC . #xE36B)
                     (#xF4BB . #xE36A)
                     (#xF4BA . #xE369)
                     (#xF4B9 . #xE368)
                     (#xF4B8 . #xE367)
                     (#xF4B7 . #xE366)
                     (#xF4B6 . #xE365)
                     (#xF4B5 . #xE364)
                     (#xF4B4 . #xE363)
                     (#xF4B3 . #xE362)
                     (#xF4B2 . #xE361)
                     (#xF4B1 . #xE360)
                     (#xF4B0 . #xE35F)
                     (#xF4AF . #xE35E)
                     (#xF4AE . #xE35D)
                     (#xF4AD . #xE35C)
                     (#xF4AC . #xE35B)
                     (#xF4AB . #xE35A)
                     (#xF4AA . #xE359)
                     (#xF4A9 . #xE358)
                     (#xF4A8 . #xE357)
                     (#xF4A7 . #xE356)
                     (#xF4A6 . #xE355)
                     (#xF4A5 . #xE354)
                     (#xF4A4 . #xE353)
                     (#xF4A3 . #xE352)
                     (#xF4A2 . #xE351)
                     (#xF4A1 . #xE350)
                     (#xF4A0 . #xE34F)
                     (#xF49F . #xE34E)
                     (#xF49E . #xE34D)
                     (#xF49D . #xE34C)
                     (#xF49C . #xE34B)
                     (#xF49B . #xE34A)
                     (#xF49A . #xE349)
                     (#xF499 . #xE348)
                     (#xF498 . #xE347)
                     (#xF497 . #xE346)
                     (#xF496 . #xE345)
                     (#xF495 . #xE344)
                     (#xF494 . #xE343)
                     (#xF493 . #xE342)
                     (#xF492 . #xE341)
                     (#xF491 . #xE340)
                     (#xF490 . #xE33F)
                     (#xF48F . #xE33E)
                     (#xF48E . #xE33D)
                     (#xF48D . #xE33C)
                     (#xF48C . #xE33B)
                     (#xF48B . #xE33A)
                     (#xF48A . #xE339)
                     (#xF489 . #xE338)
                     (#xF488 . #xE337)
                     (#xF487 . #xE336)
                     (#xF486 . #xE335)
                     (#xF485 . #xE334)
                     (#xF484 . #xE333)
                     (#xF483 . #xE332)
                     (#xF482 . #xE331)
                     (#xF481 . #xE330)
                     (#xF480 . #xE32F)
                     (#xF47E . #xE32E)
                     (#xF47D . #xE32D)
                     (#xF47C . #xE32C)
                     (#xF47B . #xE32B)
                     (#xF47A . #xE32A)
                     (#xF479 . #xE329)
                     (#xF478 . #xE328)
                     (#xF477 . #xE327)
                     (#xF476 . #xE326)
                     (#xF475 . #xE325)
                     (#xF474 . #xE324)
                     (#xF473 . #xE323)
                     (#xF472 . #xE322)
                     (#xF471 . #xE321)
                     (#xF470 . #xE320)
                     (#xF46F . #xE31F)
                     (#xF46E . #xE31E)
                     (#xF46D . #xE31D)
                     (#xF46C . #xE31C)
                     (#xF46B . #xE31B)
                     (#xF46A . #xE31A)
                     (#xF469 . #xE319)
                     (#xF468 . #xE318)
                     (#xF467 . #xE317)
                     (#xF466 . #xE316)
                     (#xF465 . #xE315)
                     (#xF464 . #xE314)
                     (#xF463 . #xE313)
                     (#xF462 . #xE312)
                     (#xF461 . #xE311)
                     (#xF460 . #xE310)
                     (#xF45F . #xE30F)
                     (#xF45E . #xE30E)
                     (#xF45D . #xE30D)
                     (#xF45C . #xE30C)
                     (#xF45B . #xE30B)
                     (#xF45A . #xE30A)
                     (#xF459 . #xE309)
                     (#xF458 . #xE308)
                     (#xF457 . #xE307)
                     (#xF456 . #xE306)
                     (#xF455 . #xE305)
                     (#xF454 . #xE304)
                     (#xF453 . #xE303)
                     (#xF452 . #xE302)
                     (#xF451 . #xE301)
                     (#xF450 . #xE300)
                     (#xF44F . #xE2FF)
                     (#xF44E . #xE2FE)
                     (#xF44D . #xE2FD)
                     (#xF44C . #xE2FC)
                     (#xF44B . #xE2FB)
                     (#xF44A . #xE2FA)
                     (#xF449 . #xE2F9)
                     (#xF448 . #xE2F8)
                     (#xF447 . #xE2F7)
                     (#xF446 . #xE2F6)
                     (#xF445 . #xE2F5)
                     (#xF444 . #xE2F4)
                     (#xF443 . #xE2F3)
                     (#xF442 . #xE2F2)
                     (#xF441 . #xE2F1)
                     (#xF440 . #xE2F0)
                     (#xF3FC . #xE2EF)
                     (#xF3FB . #xE2EE)
                     (#xF3FA . #xE2ED)
                     (#xF3F9 . #xE2EC)
                     (#xF3F8 . #xE2EB)
                     (#xF3F7 . #xE2EA)
                     (#xF3F6 . #xE2E9)
                     (#xF3F5 . #xE2E8)
                     (#xF3F4 . #xE2E7)
                     (#xF3F3 . #xE2E6)
                     (#xF3F2 . #xE2E5)
                     (#xF3F1 . #xE2E4)
                     (#xF3F0 . #xE2E3)
                     (#xF3EF . #xE2E2)
                     (#xF3EE . #xE2E1)
                     (#xF3ED . #xE2E0)
                     (#xF3EC . #xE2DF)
                     (#xF3EB . #xE2DE)
                     (#xF3EA . #xE2DD)
                     (#xF3E9 . #xE2DC)
                     (#xF3E8 . #xE2DB)
                     (#xF3E7 . #xE2DA)
                     (#xF3E6 . #xE2D9)
                     (#xF3E5 . #xE2D8)
                     (#xF3E4 . #xE2D7)
                     (#xF3E3 . #xE2D6)
                     (#xF3E2 . #xE2D5)
                     (#xF3E1 . #xE2D4)
                     (#xF3E0 . #xE2D3)
                     (#xF3DF . #xE2D2)
                     (#xF3DE . #xE2D1)
                     (#xF3DD . #xE2D0)
                     (#xF3DC . #xE2CF)
                     (#xF3DB . #xE2CE)
                     (#xF3DA . #xE2CD)
                     (#xF3D9 . #xE2CC)
                     (#xF3D8 . #xE2CB)
                     (#xF3D7 . #xE2CA)
                     (#xF3D6 . #xE2C9)
                     (#xF3D5 . #xE2C8)
                     (#xF3D4 . #xE2C7)
                     (#xF3D3 . #xE2C6)
                     (#xF3D2 . #xE2C5)
                     (#xF3D1 . #xE2C4)
                     (#xF3D0 . #xE2C3)
                     (#xF3CF . #xE2C2)
                     (#xF3CE . #xE2C1)
                     (#xF3CD . #xE2C0)
                     (#xF3CC . #xE2BF)
                     (#xF3CB . #xE2BE)
                     (#xF3CA . #xE2BD)
                     (#xF3C9 . #xE2BC)
                     (#xF3C8 . #xE2BB)
                     (#xF3C7 . #xE2BA)
                     (#xF3C6 . #xE2B9)
                     (#xF3C5 . #xE2B8)
                     (#xF3C4 . #xE2B7)
                     (#xF3C3 . #xE2B6)
                     (#xF3C2 . #xE2B5)
                     (#xF3C1 . #xE2B4)
                     (#xF3C0 . #xE2B3)
                     (#xF3BF . #xE2B2)
                     (#xF3BE . #xE2B1)
                     (#xF3BD . #xE2B0)
                     (#xF3BC . #xE2AF)
                     (#xF3BB . #xE2AE)
                     (#xF3BA . #xE2AD)
                     (#xF3B9 . #xE2AC)
                     (#xF3B8 . #xE2AB)
                     (#xF3B7 . #xE2AA)
                     (#xF3B6 . #xE2A9)
                     (#xF3B5 . #xE2A8)
                     (#xF3B4 . #xE2A7)
                     (#xF3B3 . #xE2A6)
                     (#xF3B2 . #xE2A5)
                     (#xF3B1 . #xE2A4)
                     (#xF3B0 . #xE2A3)
                     (#xF3AF . #xE2A2)
                     (#xF3AE . #xE2A1)
                     (#xF3AD . #xE2A0)
                     (#xF3AC . #xE29F)
                     (#xF3AB . #xE29E)
                     (#xF3AA . #xE29D)
                     (#xF3A9 . #xE29C)
                     (#xF3A8 . #xE29B)
                     (#xF3A7 . #xE29A)
                     (#xF3A6 . #xE299)
                     (#xF3A5 . #xE298)
                     (#xF3A4 . #xE297)
                     (#xF3A3 . #xE296)
                     (#xF3A2 . #xE295)
                     (#xF3A1 . #xE294)
                     (#xF3A0 . #xE293)
                     (#xF39F . #xE292)
                     (#xF39E . #xE291)
                     (#xF39D . #xE290)
                     (#xF39C . #xE28F)
                     (#xF39B . #xE28E)
                     (#xF39A . #xE28D)
                     (#xF399 . #xE28C)
                     (#xF398 . #xE28B)
                     (#xF397 . #xE28A)
                     (#xF396 . #xE289)
                     (#xF395 . #xE288)
                     (#xF394 . #xE287)
                     (#xF393 . #xE286)
                     (#xF392 . #xE285)
                     (#xF391 . #xE284)
                     (#xF390 . #xE283)
                     (#xF38F . #xE282)
                     (#xF38E . #xE281)
                     (#xF38D . #xE280)
                     (#xF38C . #xE27F)
                     (#xF38B . #xE27E)
                     (#xF38A . #xE27D)
                     (#xF389 . #xE27C)
                     (#xF388 . #xE27B)
                     (#xF387 . #xE27A)
                     (#xF386 . #xE279)
                     (#xF385 . #xE278)
                     (#xF384 . #xE277)
                     (#xF383 . #xE276)
                     (#xF382 . #xE275)
                     (#xF381 . #xE274)
                     (#xF380 . #xE273)
                     (#xF37E . #xE272)
                     (#xF37D . #xE271)
                     (#xF37C . #xE270)
                     (#xF37B . #xE26F)
                     (#xF37A . #xE26E)
                     (#xF379 . #xE26D)
                     (#xF378 . #xE26C)
                     (#xF377 . #xE26B)
                     (#xF376 . #xE26A)
                     (#xF375 . #xE269)
                     (#xF374 . #xE268)
                     (#xF373 . #xE267)
                     (#xF372 . #xE266)
                     (#xF371 . #xE265)
                     (#xF370 . #xE264)
                     (#xF36F . #xE263)
                     (#xF36E . #xE262)
                     (#xF36D . #xE261)
                     (#xF36C . #xE260)
                     (#xF36B . #xE25F)
                     (#xF36A . #xE25E)
                     (#xF369 . #xE25D)
                     (#xF368 . #xE25C)
                     (#xF367 . #xE25B)
                     (#xF366 . #xE25A)
                     (#xF365 . #xE259)
                     (#xF364 . #xE258)
                     (#xF363 . #xE257)
                     (#xF362 . #xE256)
                     (#xF361 . #xE255)
                     (#xF360 . #xE254)
                     (#xF35F . #xE253)
                     (#xF35E . #xE252)
                     (#xF35D . #xE251)
                     (#xF35C . #xE250)
                     (#xF35B . #xE24F)
                     (#xF35A . #xE24E)
                     (#xF359 . #xE24D)
                     (#xF358 . #xE24C)
                     (#xF357 . #xE24B)
                     (#xF356 . #xE24A)
                     (#xF355 . #xE249)
                     (#xF354 . #xE248)
                     (#xF353 . #xE247)
                     (#xF352 . #xE246)
                     (#xF351 . #xE245)
                     (#xF350 . #xE244)
                     (#xF34F . #xE243)
                     (#xF34E . #xE242)
                     (#xF34D . #xE241)
                     (#xF34C . #xE240)
                     (#xF34B . #xE23F)
                     (#xF34A . #xE23E)
                     (#xF349 . #xE23D)
                     (#xF348 . #xE23C)
                     (#xF347 . #xE23B)
                     (#xF346 . #xE23A)
                     (#xF345 . #xE239)
                     (#xF344 . #xE238)
                     (#xF343 . #xE237)
                     (#xF342 . #xE236)
                     (#xF341 . #xE235)
                     (#xF340 . #xE234)
                     (#xF2FC . #xE233)
                     (#xF2FB . #xE232)
                     (#xF2FA . #xE231)
                     (#xF2F9 . #xE230)
                     (#xF2F8 . #xE22F)
                     (#xF2F7 . #xE22E)
                     (#xF2F6 . #xE22D)
                     (#xF2F5 . #xE22C)
                     (#xF2F4 . #xE22B)
                     (#xF2F3 . #xE22A)
                     (#xF2F2 . #xE229)
                     (#xF2F1 . #xE228)
                     (#xF2F0 . #xE227)
                     (#xF2EF . #xE226)
                     (#xF2EE . #xE225)
                     (#xF2ED . #xE224)
                     (#xF2EC . #xE223)
                     (#xF2EB . #xE222)
                     (#xF2EA . #xE221)
                     (#xF2E9 . #xE220)
                     (#xF2E8 . #xE21F)
                     (#xF2E7 . #xE21E)
                     (#xF2E6 . #xE21D)
                     (#xF2E5 . #xE21C)
                     (#xF2E4 . #xE21B)
                     (#xF2E3 . #xE21A)
                     (#xF2E2 . #xE219)
                     (#xF2E1 . #xE218)
                     (#xF2E0 . #xE217)
                     (#xF2DF . #xE216)
                     (#xF2DE . #xE215)
                     (#xF2DD . #xE214)
                     (#xF2DC . #xE213)
                     (#xF2DB . #xE212)
                     (#xF2DA . #xE211)
                     (#xF2D9 . #xE210)
                     (#xF2D8 . #xE20F)
                     (#xF2D7 . #xE20E)
                     (#xF2D6 . #xE20D)
                     (#xF2D5 . #xE20C)
                     (#xF2D4 . #xE20B)
                     (#xF2D3 . #xE20A)
                     (#xF2D2 . #xE209)
                     (#xF2D1 . #xE208)
                     (#xF2D0 . #xE207)
                     (#xF2CF . #xE206)
                     (#xF2CE . #xE205)
                     (#xF2CD . #xE204)
                     (#xF2CC . #xE203)
                     (#xF2CB . #xE202)
                     (#xF2CA . #xE201)
                     (#xF2C9 . #xE200)
                     (#xF2C8 . #xE1FF)
                     (#xF2C7 . #xE1FE)
                     (#xF2C6 . #xE1FD)
                     (#xF2C5 . #xE1FC)
                     (#xF2C4 . #xE1FB)
                     (#xF2C3 . #xE1FA)
                     (#xF2C2 . #xE1F9)
                     (#xF2C1 . #xE1F8)
                     (#xF2C0 . #xE1F7)
                     (#xF2BF . #xE1F6)
                     (#xF2BE . #xE1F5)
                     (#xF2BD . #xE1F4)
                     (#xF2BC . #xE1F3)
                     (#xF2BB . #xE1F2)
                     (#xF2BA . #xE1F1)
                     (#xF2B9 . #xE1F0)
                     (#xF2B8 . #xE1EF)
                     (#xF2B7 . #xE1EE)
                     (#xF2B6 . #xE1ED)
                     (#xF2B5 . #xE1EC)
                     (#xF2B4 . #xE1EB)
                     (#xF2B3 . #xE1EA)
                     (#xF2B2 . #xE1E9)
                     (#xF2B1 . #xE1E8)
                     (#xF2B0 . #xE1E7)
                     (#xF2AF . #xE1E6)
                     (#xF2AE . #xE1E5)
                     (#xF2AD . #xE1E4)
                     (#xF2AC . #xE1E3)
                     (#xF2AB . #xE1E2)
                     (#xF2AA . #xE1E1)
                     (#xF2A9 . #xE1E0)
                     (#xF2A8 . #xE1DF)
                     (#xF2A7 . #xE1DE)
                     (#xF2A6 . #xE1DD)
                     (#xF2A5 . #xE1DC)
                     (#xF2A4 . #xE1DB)
                     (#xF2A3 . #xE1DA)
                     (#xF2A2 . #xE1D9)
                     (#xF2A1 . #xE1D8)
                     (#xF2A0 . #xE1D7)
                     (#xF29F . #xE1D6)
                     (#xF29E . #xE1D5)
                     (#xF29D . #xE1D4)
                     (#xF29C . #xE1D3)
                     (#xF29B . #xE1D2)
                     (#xF29A . #xE1D1)
                     (#xF299 . #xE1D0)
                     (#xF298 . #xE1CF)
                     (#xF297 . #xE1CE)
                     (#xF296 . #xE1CD)
                     (#xF295 . #xE1CC)
                     (#xF294 . #xE1CB)
                     (#xF293 . #xE1CA)
                     (#xF292 . #xE1C9)
                     (#xF291 . #xE1C8)
                     (#xF290 . #xE1C7)
                     (#xF28F . #xE1C6)
                     (#xF28E . #xE1C5)
                     (#xF28D . #xE1C4)
                     (#xF28C . #xE1C3)
                     (#xF28B . #xE1C2)
                     (#xF28A . #xE1C1)
                     (#xF289 . #xE1C0)
                     (#xF288 . #xE1BF)
                     (#xF287 . #xE1BE)
                     (#xF286 . #xE1BD)
                     (#xF285 . #xE1BC)
                     (#xF284 . #xE1BB)
                     (#xF283 . #xE1BA)
                     (#xF282 . #xE1B9)
                     (#xF281 . #xE1B8)
                     (#xF280 . #xE1B7)
                     (#xF27E . #xE1B6)
                     (#xF27D . #xE1B5)
                     (#xF27C . #xE1B4)
                     (#xF27B . #xE1B3)
                     (#xF27A . #xE1B2)
                     (#xF279 . #xE1B1)
                     (#xF278 . #xE1B0)
                     (#xF277 . #xE1AF)
                     (#xF276 . #xE1AE)
                     (#xF275 . #xE1AD)
                     (#xF274 . #xE1AC)
                     (#xF273 . #xE1AB)
                     (#xF272 . #xE1AA)
                     (#xF271 . #xE1A9)
                     (#xF270 . #xE1A8)
                     (#xF26F . #xE1A7)
                     (#xF26E . #xE1A6)
                     (#xF26D . #xE1A5)
                     (#xF26C . #xE1A4)
                     (#xF26B . #xE1A3)
                     (#xF26A . #xE1A2)
                     (#xF269 . #xE1A1)
                     (#xF268 . #xE1A0)
                     (#xF267 . #xE19F)
                     (#xF266 . #xE19E)
                     (#xF265 . #xE19D)
                     (#xF264 . #xE19C)
                     (#xF263 . #xE19B)
                     (#xF262 . #xE19A)
                     (#xF261 . #xE199)
                     (#xF260 . #xE198)
                     (#xF25F . #xE197)
                     (#xF25E . #xE196)
                     (#xF25D . #xE195)
                     (#xF25C . #xE194)
                     (#xF25B . #xE193)
                     (#xF25A . #xE192)
                     (#xF259 . #xE191)
                     (#xF258 . #xE190)
                     (#xF257 . #xE18F)
                     (#xF256 . #xE18E)
                     (#xF255 . #xE18D)
                     (#xF254 . #xE18C)
                     (#xF253 . #xE18B)
                     (#xF252 . #xE18A)
                     (#xF251 . #xE189)
                     (#xF250 . #xE188)
                     (#xF24F . #xE187)
                     (#xF24E . #xE186)
                     (#xF24D . #xE185)
                     (#xF24C . #xE184)
                     (#xF24B . #xE183)
                     (#xF24A . #xE182)
                     (#xF249 . #xE181)
                     (#xF248 . #xE180)
                     (#xF247 . #xE17F)
                     (#xF246 . #xE17E)
                     (#xF245 . #xE17D)
                     (#xF244 . #xE17C)
                     (#xF243 . #xE17B)
                     (#xF242 . #xE17A)
                     (#xF241 . #xE179)
                     (#xF240 . #xE178)
                     (#xF1FC . #xE177)
                     (#xF1FB . #xE176)
                     (#xF1FA . #xE175)
                     (#xF1F9 . #xE174)
                     (#xF1F8 . #xE173)
                     (#xF1F7 . #xE172)
                     (#xF1F6 . #xE171)
                     (#xF1F5 . #xE170)
                     (#xF1F4 . #xE16F)
                     (#xF1F3 . #xE16E)
                     (#xF1F2 . #xE16D)
                     (#xF1F1 . #xE16C)
                     (#xF1F0 . #xE16B)
                     (#xF1EF . #xE16A)
                     (#xF1EE . #xE169)
                     (#xF1ED . #xE168)
                     (#xF1EC . #xE167)
                     (#xF1EB . #xE166)
                     (#xF1EA . #xE165)
                     (#xF1E9 . #xE164)
                     (#xF1E8 . #xE163)
                     (#xF1E7 . #xE162)
                     (#xF1E6 . #xE161)
                     (#xF1E5 . #xE160)
                     (#xF1E4 . #xE15F)
                     (#xF1E3 . #xE15E)
                     (#xF1E2 . #xE15D)
                     (#xF1E1 . #xE15C)
                     (#xF1E0 . #xE15B)
                     (#xF1DF . #xE15A)
                     (#xF1DE . #xE159)
                     (#xF1DD . #xE158)
                     (#xF1DC . #xE157)
                     (#xF1DB . #xE156)
                     (#xF1DA . #xE155)
                     (#xF1D9 . #xE154)
                     (#xF1D8 . #xE153)
                     (#xF1D7 . #xE152)
                     (#xF1D6 . #xE151)
                     (#xF1D5 . #xE150)
                     (#xF1D4 . #xE14F)
                     (#xF1D3 . #xE14E)
                     (#xF1D2 . #xE14D)
                     (#xF1D1 . #xE14C)
                     (#xF1D0 . #xE14B)
                     (#xF1CF . #xE14A)
                     (#xF1CE . #xE149)
                     (#xF1CD . #xE148)
                     (#xF1CC . #xE147)
                     (#xF1CB . #xE146)
                     (#xF1CA . #xE145)
                     (#xF1C9 . #xE144)
                     (#xF1C8 . #xE143)
                     (#xF1C7 . #xE142)
                     (#xF1C6 . #xE141)
                     (#xF1C5 . #xE140)
                     (#xF1C4 . #xE13F)
                     (#xF1C3 . #xE13E)
                     (#xF1C2 . #xE13D)
                     (#xF1C1 . #xE13C)
                     (#xF1C0 . #xE13B)
                     (#xF1BF . #xE13A)
                     (#xF1BE . #xE139)
                     (#xF1BD . #xE138)
                     (#xF1BC . #xE137)
                     (#xF1BB . #xE136)
                     (#xF1BA . #xE135)
                     (#xF1B9 . #xE134)
                     (#xF1B8 . #xE133)
                     (#xF1B7 . #xE132)
                     (#xF1B6 . #xE131)
                     (#xF1B5 . #xE130)
                     (#xF1B4 . #xE12F)
                     (#xF1B3 . #xE12E)
                     (#xF1B2 . #xE12D)
                     (#xF1B1 . #xE12C)
                     (#xF1B0 . #xE12B)
                     (#xF1AF . #xE12A)
                     (#xF1AE . #xE129)
                     (#xF1AD . #xE128)
                     (#xF1AC . #xE127)
                     (#xF1AB . #xE126)
                     (#xF1AA . #xE125)
                     (#xF1A9 . #xE124)
                     (#xF1A8 . #xE123)
                     (#xF1A7 . #xE122)
                     (#xF1A6 . #xE121)
                     (#xF1A5 . #xE120)
                     (#xF1A4 . #xE11F)
                     (#xF1A3 . #xE11E)
                     (#xF1A2 . #xE11D)
                     (#xF1A1 . #xE11C)
                     (#xF1A0 . #xE11B)
                     (#xF19F . #xE11A)
                     (#xF19E . #xE119)
                     (#xF19D . #xE118)
                     (#xF19C . #xE117)
                     (#xF19B . #xE116)
                     (#xF19A . #xE115)
                     (#xF199 . #xE114)
                     (#xF198 . #xE113)
                     (#xF197 . #xE112)
                     (#xF196 . #xE111)
                     (#xF195 . #xE110)
                     (#xF194 . #xE10F)
                     (#xF193 . #xE10E)
                     (#xF192 . #xE10D)
                     (#xF191 . #xE10C)
                     (#xF190 . #xE10B)
                     (#xF18F . #xE10A)
                     (#xF18E . #xE109)
                     (#xF18D . #xE108)
                     (#xF18C . #xE107)
                     (#xF18B . #xE106)
                     (#xF18A . #xE105)
                     (#xF189 . #xE104)
                     (#xF188 . #xE103)
                     (#xF187 . #xE102)
                     (#xF186 . #xE101)
                     (#xF185 . #xE100)
                     (#xF184 . #xE0FF)
                     (#xF183 . #xE0FE)
                     (#xF182 . #xE0FD)
                     (#xF181 . #xE0FC)
                     (#xF180 . #xE0FB)
                     (#xF17E . #xE0FA)
                     (#xF17D . #xE0F9)
                     (#xF17C . #xE0F8)
                     (#xF17B . #xE0F7)
                     (#xF17A . #xE0F6)
                     (#xF179 . #xE0F5)
                     (#xF178 . #xE0F4)
                     (#xF177 . #xE0F3)
                     (#xF176 . #xE0F2)
                     (#xF175 . #xE0F1)
                     (#xF174 . #xE0F0)
                     (#xF173 . #xE0EF)
                     (#xF172 . #xE0EE)
                     (#xF171 . #xE0ED)
                     (#xF170 . #xE0EC)
                     (#xF16F . #xE0EB)
                     (#xF16E . #xE0EA)
                     (#xF16D . #xE0E9)
                     (#xF16C . #xE0E8)
                     (#xF16B . #xE0E7)
                     (#xF16A . #xE0E6)
                     (#xF169 . #xE0E5)
                     (#xF168 . #xE0E4)
                     (#xF167 . #xE0E3)
                     (#xF166 . #xE0E2)
                     (#xF165 . #xE0E1)
                     (#xF164 . #xE0E0)
                     (#xF163 . #xE0DF)
                     (#xF162 . #xE0DE)
                     (#xF161 . #xE0DD)
                     (#xF160 . #xE0DC)
                     (#xF15F . #xE0DB)
                     (#xF15E . #xE0DA)
                     (#xF15D . #xE0D9)
                     (#xF15C . #xE0D8)
                     (#xF15B . #xE0D7)
                     (#xF15A . #xE0D6)
                     (#xF159 . #xE0D5)
                     (#xF158 . #xE0D4)
                     (#xF157 . #xE0D3)
                     (#xF156 . #xE0D2)
                     (#xF155 . #xE0D1)
                     (#xF154 . #xE0D0)
                     (#xF153 . #xE0CF)
                     (#xF152 . #xE0CE)
                     (#xF151 . #xE0CD)
                     (#xF150 . #xE0CC)
                     (#xF14F . #xE0CB)
                     (#xF14E . #xE0CA)
                     (#xF14D . #xE0C9)
                     (#xF14C . #xE0C8)
                     (#xF14B . #xE0C7)
                     (#xF14A . #xE0C6)
                     (#xF149 . #xE0C5)
                     (#xF148 . #xE0C4)
                     (#xF147 . #xE0C3)
                     (#xF146 . #xE0C2)
                     (#xF145 . #xE0C1)
                     (#xF144 . #xE0C0)
                     (#xF143 . #xE0BF)
                     (#xF142 . #xE0BE)
                     (#xF141 . #xE0BD)
                     (#xF140 . #xE0BC)
                     (#xF0FC . #xE0BB)
                     (#xF0FB . #xE0BA)
                     (#xF0FA . #xE0B9)
                     (#xF0F9 . #xE0B8)
                     (#xF0F8 . #xE0B7)
                     (#xF0F7 . #xE0B6)
                     (#xF0F6 . #xE0B5)
                     (#xF0F5 . #xE0B4)
                     (#xF0F4 . #xE0B3)
                     (#xF0F3 . #xE0B2)
                     (#xF0F2 . #xE0B1)
                     (#xF0F1 . #xE0B0)
                     (#xF0F0 . #xE0AF)
                     (#xF0EF . #xE0AE)
                     (#xF0EE . #xE0AD)
                     (#xF0ED . #xE0AC)
                     (#xF0EC . #xE0AB)
                     (#xF0EB . #xE0AA)
                     (#xF0EA . #xE0A9)
                     (#xF0E9 . #xE0A8)
                     (#xF0E8 . #xE0A7)
                     (#xF0E7 . #xE0A6)
                     (#xF0E6 . #xE0A5)
                     (#xF0E5 . #xE0A4)
                     (#xF0E4 . #xE0A3)
                     (#xF0E3 . #xE0A2)
                     (#xF0E2 . #xE0A1)
                     (#xF0E1 . #xE0A0)
                     (#xF0E0 . #xE09F)
                     (#xF0DF . #xE09E)
                     (#xF0DE . #xE09D)
                     (#xF0DD . #xE09C)
                     (#xF0DC . #xE09B)
                     (#xF0DB . #xE09A)
                     (#xF0DA . #xE099)
                     (#xF0D9 . #xE098)
                     (#xF0D8 . #xE097)
                     (#xF0D7 . #xE096)
                     (#xF0D6 . #xE095)
                     (#xF0D5 . #xE094)
                     (#xF0D4 . #xE093)
                     (#xF0D3 . #xE092)
                     (#xF0D2 . #xE091)
                     (#xF0D1 . #xE090)
                     (#xF0D0 . #xE08F)
                     (#xF0CF . #xE08E)
                     (#xF0CE . #xE08D)
                     (#xF0CD . #xE08C)
                     (#xF0CC . #xE08B)
                     (#xF0CB . #xE08A)
                     (#xF0CA . #xE089)
                     (#xF0C9 . #xE088)
                     (#xF0C8 . #xE087)
                     (#xF0C7 . #xE086)
                     (#xF0C6 . #xE085)
                     (#xF0C5 . #xE084)
                     (#xF0C4 . #xE083)
                     (#xF0C3 . #xE082)
                     (#xF0C2 . #xE081)
                     (#xF0C1 . #xE080)
                     (#xF0C0 . #xE07F)
                     (#xF0BF . #xE07E)
                     (#xF0BE . #xE07D)
                     (#xF0BD . #xE07C)
                     (#xF0BC . #xE07B)
                     (#xF0BB . #xE07A)
                     (#xF0BA . #xE079)
                     (#xF0B9 . #xE078)
                     (#xF0B8 . #xE077)
                     (#xF0B7 . #xE076)
                     (#xF0B6 . #xE075)
                     (#xF0B5 . #xE074)
                     (#xF0B4 . #xE073)
                     (#xF0B3 . #xE072)
                     (#xF0B2 . #xE071)
                     (#xF0B1 . #xE070)
                     (#xF0B0 . #xE06F)
                     (#xF0AF . #xE06E)
                     (#xF0AE . #xE06D)
                     (#xF0AD . #xE06C)
                     (#xF0AC . #xE06B)
                     (#xF0AB . #xE06A)
                     (#xF0AA . #xE069)
                     (#xF0A9 . #xE068)
                     (#xF0A8 . #xE067)
                     (#xF0A7 . #xE066)
                     (#xF0A6 . #xE065)
                     (#xF0A5 . #xE064)
                     (#xF0A4 . #xE063)
                     (#xF0A3 . #xE062)
                     (#xF0A2 . #xE061)
                     (#xF0A1 . #xE060)
                     (#xF0A0 . #xE05F)
                     (#xF09F . #xE05E)
                     (#xF09E . #xE05D)
                     (#xF09D . #xE05C)
                     (#xF09C . #xE05B)
                     (#xF09B . #xE05A)
                     (#xF09A . #xE059)
                     (#xF099 . #xE058)
                     (#xF098 . #xE057)
                     (#xF097 . #xE056)
                     (#xF096 . #xE055)
                     (#xF095 . #xE054)
                     (#xF094 . #xE053)
                     (#xF093 . #xE052)
                     (#xF092 . #xE051)
                     (#xF091 . #xE050)
                     (#xF090 . #xE04F)
                     (#xF08F . #xE04E)
                     (#xF08E . #xE04D)
                     (#xF08D . #xE04C)
                     (#xF08C . #xE04B)
                     (#xF08B . #xE04A)
                     (#xF08A . #xE049)
                     (#xF089 . #xE048)
                     (#xF088 . #xE047)
                     (#xF087 . #xE046)
                     (#xF086 . #xE045)
                     (#xF085 . #xE044)
                     (#xF084 . #xE043)
                     (#xF083 . #xE042)
                     (#xF082 . #xE041)
                     (#xF081 . #xE040)
                     (#xF080 . #xE03F)
                     (#xF07E . #xE03E)
                     (#xF07D . #xE03D)
                     (#xF07C . #xE03C)
                     (#xF07B . #xE03B)
                     (#xF07A . #xE03A)
                     (#xF079 . #xE039)
                     (#xF078 . #xE038)
                     (#xF077 . #xE037)
                     (#xF076 . #xE036)
                     (#xF075 . #xE035)
                     (#xF074 . #xE034)
                     (#xF073 . #xE033)
                     (#xF072 . #xE032)
                     (#xF071 . #xE031)
                     (#xF070 . #xE030)
                     (#xF06F . #xE02F)
                     (#xF06E . #xE02E)
                     (#xF06D . #xE02D)
                     (#xF06C . #xE02C)
                     (#xF06B . #xE02B)
                     (#xF06A . #xE02A)
                     (#xF069 . #xE029)
                     (#xF068 . #xE028)
                     (#xF067 . #xE027)
                     (#xF066 . #xE026)
                     (#xF065 . #xE025)
                     (#xF064 . #xE024)
                     (#xF063 . #xE023)
                     (#xF062 . #xE022)
                     (#xF061 . #xE021)
                     (#xF060 . #xE020)
                     (#xF05F . #xE01F)
                     (#xF05E . #xE01E)
                     (#xF05D . #xE01D)
                     (#xF05C . #xE01C)
                     (#xF05B . #xE01B)
                     (#xF05A . #xE01A)
                     (#xF059 . #xE019)
                     (#xF058 . #xE018)
                     (#xF057 . #xE017)
                     (#xF056 . #xE016)
                     (#xF055 . #xE015)
                     (#xF054 . #xE014)
                     (#xF053 . #xE013)
                     (#xF052 . #xE012)
                     (#xF051 . #xE011)
                     (#xF050 . #xE010)
                     (#xF04F . #xE00F)
                     (#xF04E . #xE00E)
                     (#xF04D . #xE00D)
                     (#xF04C . #xE00C)
                     (#xF04B . #xE00B)
                     (#xF04A . #xE00A)
                     (#xF049 . #xE009)
                     (#xF048 . #xE008)
                     (#xF047 . #xE007)
                     (#xF046 . #xE006)
                     (#xF045 . #xE005)
                     (#xF044 . #xE004)
                     (#xF043 . #xE003)
                     (#xF042 . #xE002)
                     (#xF041 . #xE001)
                     (#xF040 . #xE000)
                     (#xEEFC . #xFF02)
                     (#xEEFB . #xFF07)
                     (#xEEFA . #xFFE4)
                     (#xEEF9 . #xFFE2)
                     (#xEEF8 . #x2179)
                     (#xEEF7 . #x2178)
                     (#xEEF6 . #x2177)
                     (#xEEF5 . #x2176)
                     (#xEEF4 . #x2175)
                     (#xEEF3 . #x2174)
                     (#xEEF2 . #x2173)
                     (#xEEF1 . #x2172)
                     (#xEEF0 . #x2171)
                     (#xEEEF . #x2170)
                     (#xEEEC . #x9ED1)
                     (#xEEEB . #x9E19)
                     (#xEEEA . #xFA2D)
                     (#xEEE9 . #x9D6B)
                     (#xEEE8 . #x9D70)
                     (#xEEE7 . #x9C00)
                     (#xEEE6 . #x9BBB)
                     (#xEEE5 . #x9BB1)
                     (#xEEE4 . #x9B8F)
                     (#xEEE3 . #x9B72)
                     (#xEEE2 . #x9B75)
                     (#xEEE1 . #x9ADC)
                     (#xEEE0 . #x9AD9)
                     (#xEEDF . #x9A4E)
                     (#xEEDE . #x999E)
                     (#xEEDD . #xFA2C)
                     (#xEEDC . #x9927)
                     (#xEEDB . #xFA2B)
                     (#xEEDA . #xFA2A)
                     (#xEED9 . #x9865)
                     (#xEED8 . #x9857)
                     (#xEED7 . #x9755)
                     (#xEED6 . #x9751)
                     (#xEED5 . #x974F)
                     (#xEED4 . #x974D)
                     (#xEED3 . #x9743)
                     (#xEED2 . #x973B)
                     (#xEED1 . #x9733)
                     (#xEED0 . #x96AF)
                     (#xEECF . #x969D)
                     (#xEECE . #xFA29)
                     (#xEECD . #xF9DC)
                     (#xEECC . #x9592)
                     (#xEECB . #x9448)
                     (#xEECA . #x9445)
                     (#xEEC9 . #x9431)
                     (#xEEC8 . #x93F8)
                     (#xEEC7 . #x93DE)
                     (#xEEC6 . #x93C6)
                     (#xEEC5 . #x93A4)
                     (#xEEC4 . #x9357)
                     (#xEEC3 . #x9370)
                     (#xEEC2 . #x9302)
                     (#xEEC1 . #x931D)
                     (#xEEC0 . #x92FF)
                     (#xEEBF . #x931E)
                     (#xEEBE . #xFA28)
                     (#xEEBD . #x92FB)
                     (#xEEBC . #x9321)
                     (#xEEBB . #x9325)
                     (#xEEBA . #x92D3)
                     (#xEEB9 . #x92E0)
                     (#xEEB8 . #x92D5)
                     (#xEEB7 . #xFA27)
                     (#xEEB6 . #x92D0)
                     (#xEEB5 . #x92D9)
                     (#xEEB4 . #x92D7)
                     (#xEEB3 . #x92E7)
                     (#xEEB2 . #x9278)
                     (#xEEB1 . #x9277)
                     (#xEEB0 . #x92A7)
                     (#xEEAF . #x9267)
                     (#xEEAE . #x9239)
                     (#xEEAD . #x9251)
                     (#xEEAC . #x9259)
                     (#xEEAB . #x924E)
                     (#xEEAA . #x923C)
                     (#xEEA9 . #x9240)
                     (#xEEA8 . #x923A)
                     (#xEEA7 . #x920A)
                     (#xEEA6 . #x9210)
                     (#xEEA5 . #x9206)
                     (#xEEA4 . #x91E5)
                     (#xEEA3 . #x91E4)
                     (#xEEA2 . #x91EE)
                     (#xEEA1 . #x91ED)
                     (#xEEA0 . #x91DE)
                     (#xEE9F . #x91D7)
                     (#xEE9E . #x91DA)
                     (#xEE9D . #x9127)
                     (#xEE9C . #x9115)
                     (#xEE9B . #xFA26)
                     (#xEE9A . #x90DE)
                     (#xEE99 . #x9067)
                     (#xEE98 . #xFA25)
                     (#xEE97 . #xFA24)
                     (#xEE96 . #x8ECF)
                     (#xEE95 . #xFA23)
                     (#xEE94 . #x8D76)
                     (#xEE93 . #x8D12)
                     (#xEE92 . #x8CF4)
                     (#xEE91 . #x8CF0)
                     (#xEE90 . #x8B7F)
                     (#xEE8F . #x8B53)
                     (#xEE8E . #x8AF6)
                     (#xEE8D . #xFA22)
                     (#xEE8C . #x8ADF)
                     (#xEE8B . #x8ABE)
                     (#xEE8A . #x8AA7)
                     (#xEE89 . #x8A79)
                     (#xEE88 . #x8A37)
                     (#xEE87 . #x8A12)
                     (#xEE86 . #x88F5)
                     (#xEE85 . #x8807)
                     (#xEE84 . #xFA21)
                     (#xEE83 . #xFA20)
                     (#xEE82 . #x85B0)
                     (#xEE81 . #xFA1F)
                     (#xEE80 . #x856B)
                     (#xEE7E . #x8559)
                     (#xEE7D . #x8553)
                     (#xEE7C . #x84B4)
                     (#xEE7B . #x8448)
                     (#xEE7A . #x83F6)
                     (#xEE79 . #x83C7)
                     (#xEE78 . #x837F)
                     (#xEE77 . #x8362)
                     (#xEE76 . #x8301)
                     (#xEE75 . #xFA1E)
                     (#xEE74 . #x7FA1)
                     (#xEE73 . #x7F47)
                     (#xEE72 . #x7E52)
                     (#xEE71 . #x7DD6)
                     (#xEE70 . #x7DA0)
                     (#xEE6F . #x7DB7)
                     (#xEE6E . #x7D5C)
                     (#xEE6D . #x7D48)
                     (#xEE6C . #xFA1D)
                     (#xEE6B . #x7B9E)
                     (#xEE6A . #x7AEB)
                     (#xEE69 . #xFA1C)
                     (#xEE68 . #x7AE7)
                     (#xEE67 . #x7AD1)
                     (#xEE66 . #x799B)
                     (#xEE65 . #xFA1B)
                     (#xEE64 . #x7994)
                     (#xEE63 . #xFA1A)
                     (#xEE62 . #xFA19)
                     (#xEE61 . #xFA18)
                     (#xEE60 . #x7930)
                     (#xEE5F . #x787A)
                     (#xEE5E . #x7864)
                     (#xEE5D . #x784E)
                     (#xEE5C . #x7821)
                     (#xEE5B . #x52AF)
                     (#xEE5A . #x7746)
                     (#xEE59 . #xFA17)
                     (#xEE58 . #x76A6)
                     (#xEE57 . #x769B)
                     (#xEE56 . #x769E)
                     (#xEE55 . #x769C)
                     (#xEE54 . #x7682)
                     (#xEE53 . #x756F)
                     (#xEE52 . #x7501)
                     (#xEE51 . #x749F)
                     (#xEE50 . #x7489)
                     (#xEE4F . #x7462)
                     (#xEE4E . #x742E)
                     (#xEE4D . #x7429)
                     (#xEE4C . #x742A)
                     (#xEE4B . #x7426)
                     (#xEE4A . #x73F5)
                     (#xEE49 . #x7407)
                     (#xEE48 . #x73D2)
                     (#xEE47 . #x73E3)
                     (#xEE46 . #x73D6)
                     (#xEE45 . #x73C9)
                     (#xEE44 . #x73BD)
                     (#xEE43 . #x7377)
                     (#xEE42 . #xFA16)
                     (#xEE41 . #x7324)
                     (#xEE40 . #x72BE)
                     (#xEDFC . #x72B1)
                     (#xEDFB . #x71FE)
                     (#xEDFA . #x71C1)
                     (#xEDF9 . #xFA15)
                     (#xEDF8 . #x7147)
                     (#xEDF7 . #x7146)
                     (#xEDF6 . #x715C)
                     (#xEDF5 . #x7104)
                     (#xEDF4 . #x710F)
                     (#xEDF3 . #x70AB)
                     (#xEDF2 . #x7085)
                     (#xEDF1 . #x7028)
                     (#xEDF0 . #x7007)
                     (#xEDEF . #x7005)
                     (#xEDEE . #x6FF5)
                     (#xEDED . #x6FB5)
                     (#xEDEC . #x6F88)
                     (#xEDEB . #x6EBF)
                     (#xEDEA . #x6E3C)
                     (#xEDE9 . #x6E27)
                     (#xEDE8 . #x6E5C)
                     (#xEDE7 . #x6E39)
                     (#xEDE6 . #x6DFC)
                     (#xEDE5 . #x6DF2)
                     (#xEDE4 . #x6DF8)
                     (#xEDE3 . #x6DCF)
                     (#xEDE2 . #x6DAC)
                     (#xEDE1 . #x6D96)
                     (#xEDE0 . #x6D6F)
                     (#xEDDF . #x6D87)
                     (#xEDDE . #x6D04)
                     (#xEDDD . #x6CDA)
                     (#xEDDC . #x6C6F)
                     (#xEDDB . #x6C86)
                     (#xEDDA . #x6C5C)
                     (#xEDD9 . #x6C3F)
                     (#xEDD8 . #x6BD6)
                     (#xEDD7 . #x6AE4)
                     (#xEDD6 . #x6AE2)
                     (#xEDD5 . #x6A7E)
                     (#xEDD4 . #x6A73)
                     (#xEDD3 . #x6A46)
                     (#xEDD2 . #x6A6B)
                     (#xEDD1 . #x6A30)
                     (#xEDD0 . #x69E2)
                     (#xEDCF . #x6998)
                     (#xEDCE . #xFA14)
                     (#xEDCD . #x6968)
                     (#xEDCC . #xFA13)
                     (#xEDCB . #x68CF)
                     (#xEDCA . #x6844)
                     (#xEDC9 . #x6801)
                     (#xEDC8 . #x67C0)
                     (#xEDC7 . #x6852)
                     (#xEDC6 . #x67BB)
                     (#xEDC5 . #x6766)
                     (#xEDC4 . #xF929)
                     (#xEDC3 . #x670E)
                     (#xEDC2 . #x66FA)
                     (#xEDC1 . #x66BF)
                     (#xEDC0 . #x66B2)
                     (#xEDBF . #x66A0)
                     (#xEDBE . #x6699)
                     (#xEDBD . #x6673)
                     (#xEDBC . #xFA12)
                     (#xEDBB . #x6659)
                     (#xEDBA . #x6657)
                     (#xEDB9 . #x6665)
                     (#xEDB8 . #x6624)
                     (#xEDB7 . #x661E)
                     (#xEDB6 . #x662E)
                     (#xEDB5 . #x6609)
                     (#xEDB4 . #x663B)
                     (#xEDB3 . #x6615)
                     (#xEDB2 . #x6600)
                     (#xEDB1 . #x654E)
                     (#xEDB0 . #x64CE)
                     (#xEDAF . #x649D)
                     (#xEDAE . #x6460)
                     (#xEDAD . #x63F5)
                     (#xEDAC . #x62A6)
                     (#xEDAB . #x6213)
                     (#xEDAA . #x6198)
                     (#xEDA9 . #x6130)
                     (#xEDA8 . #x6137)
                     (#xEDA7 . #x6111)
                     (#xEDA6 . #x60F2)
                     (#xEDA5 . #x6120)
                     (#xEDA4 . #x60D5)
                     (#xEDA3 . #x60DE)
                     (#xEDA2 . #x608A)
                     (#xEDA1 . #x6085)
                     (#xEDA0 . #x605D)
                     (#xED9F . #x5FDE)
                     (#xED9E . #x5FB7)
                     (#xED9D . #x5F67)
                     (#xED9C . #x5F34)
                     (#xED9B . #x5F21)
                     (#xED9A . #x5DD0)
                     (#xED99 . #x5DB9)
                     (#xED98 . #x5DB8)
                     (#xED97 . #x5D6D)
                     (#xED96 . #x5D42)
                     (#xED95 . #xFA11)
                     (#xED94 . #x5D53)
                     (#xED93 . #x5D27)
                     (#xED92 . #x5CF5)
                     (#xED91 . #x5CBA)
                     (#xED90 . #x5CA6)
                     (#xED8F . #x5C1E)
                     (#xED8E . #x5BEC)
                     (#xED8D . #x5BD8)
                     (#xED8C . #x752F)
                     (#xED8B . #x5BC0)
                     (#xED8A . #x5B56)
                     (#xED89 . #x59BA)
                     (#xED88 . #x59A4)
                     (#xED87 . #x5963)
                     (#xED86 . #x595D)
                     (#xED85 . #x595B)
                     (#xED84 . #x5953)
                     (#xED83 . #x590B)
                     (#xED82 . #x58B2)
                     (#xED81 . #x589E)
                     (#xED80 . #xFA10)
                     (#xED7E . #xFA0F)
                     (#xED7D . #x57C7)
                     (#xED7C . #x57C8)
                     (#xED7B . #x57AC)
                     (#xED7A . #x5765)
                     (#xED79 . #x5759)
                     (#xED78 . #x5586)
                     (#xED77 . #x54FF)
                     (#xED76 . #x54A9)
                     (#xED75 . #x548A)
                     (#xED74 . #x549C)
                     (#xED73 . #xFA0E)
                     (#xED72 . #x53DD)
                     (#xED71 . #x53B2)
                     (#xED70 . #x5393)
                     (#xED6F . #x5372)
                     (#xED6E . #x5324)
                     (#xED6D . #x5307)
                     (#xED6C . #x5300)
                     (#xED6B . #x52DB)
                     (#xED6A . #x52C0)
                     (#xED69 . #x52A6)
                     (#xED68 . #x529C)
                     (#xED67 . #x5215)
                     (#xED66 . #x51EC)
                     (#xED65 . #x51BE)
                     (#xED64 . #x519D)
                     (#xED63 . #x5164)
                     (#xED62 . #x514A)
                     (#xED61 . #x50D8)
                     (#xED60 . #x50F4)
                     (#xED5F . #x5094)
                     (#xED5E . #x5042)
                     (#xED5D . #x5070)
                     (#xED5C . #x5046)
                     (#xED5B . #x501E)
                     (#xED5A . #x4FFF)
                     (#xED59 . #x5022)
                     (#xED58 . #x5040)
                     (#xED57 . #x4FCD)
                     (#xED56 . #x4F94)
                     (#xED55 . #x4F9A)
                     (#xED54 . #x4F8A)
                     (#xED53 . #x4F92)
                     (#xED52 . #x4F56)
                     (#xED51 . #x4F39)
                     (#xED50 . #x4F03)
                     (#xED4F . #x4F00)
                     (#xED4E . #x4EFC)
                     (#xED4D . #x4EE1)
                     (#xED4C . #x4E28)
                     (#xED4B . #x5F45)
                     (#xED4A . #x66FB)
                     (#xED49 . #x92F9)
                     (#xED48 . #x68C8)
                     (#xED47 . #x6631)
                     (#xED46 . #x70BB)
                     (#xED45 . #x4FC9)
                     (#xED44 . #x84DC)
                     (#xED43 . #x9288)
                     (#xED42 . #x9348)
                     (#xED41 . #x891C)
                     (#xED40 . #x7E8A)
                     (#xEA9E . #x9FA0)
                     (#xEA40 . #x9D5D)
                     (#xE99E . #x9AF7)
                     (#xE940 . #x9871)
                     (#xE89E . #x965E)
                     (#xE840 . #x9319)
                     (#xE79E . #x8FF8)
                     (#xE740 . #x8E47)
                     (#xE69E . #x8B6B)
                     (#xE640 . #x8966)
                     (#xE59E . #x8759)
                     (#xE540 . #x8541)
                     (#xE49E . #x82D9)
                     (#xE440 . #x968B)
                     (#xE39E . #x7F3A)
                     (#xE340 . #x7D02)
                     (#xE29E . #x7B50)
                     (#xE240 . #x78E7)
                     (#xE19E . #x7670)
                     (#xE140 . #x74E0)
                     (#xE09E . #x71FC)
                     (#xE040 . #x6F3E)
                     (#x9F9E . #x6CBE)
                     (#x9F40 . #x6A97)
                     (#x9E9E . #x68CD)
                     (#x9E40 . #x66C4)
                     (#x9D9E . #x64BC)
                     (#x9D40 . #x621E)
                     (#x9C9E . #x609A)
                     (#x9C40 . #x5ED6)
                     (#x9B9E . #x5C53)
                     (#x9B40 . #x5978)
                     (#x9A9E . #x5709)
                     (#x9A40 . #x54AB)
                     (#x999E . #x8FA8)
                     (#x9940 . #x50C9)
                     (#x9840 . #x84EE)
                     (#x979E . #x7483)
                     (#x9740 . #x8AED)
                     (#x969E . #x6E80)
                     (#x9640 . #x6CD5)
                     (#x959E . #x670D)
                     (#x9540 . #x9F3B)
                     (#x949E . #x9EA6)
                     (#x9440 . #x5982)
                     (#x939E . #x5230)
                     (#x9340 . #x90B8)
                     (#x929E . #x5BF5)
                     (#x9240 . #x53E9)
                     (#x919E . #x618E)
                     (#x9140 . #x7E4A)
                     (#x909E . #x88FE)
                     (#x9040 . #x62ED)
                     (#x8F9E . #x511F)
                     (#x8F40 . #x5B97)
                     (#x8E9E . #x6642)
                     (#x8E40 . #x5BDF)
                     (#x8D9E . #x8FBC)
                     (#x8D40 . #x540E)
                     (#x8C9E . #x6372)
                     (#x8C40 . #x6398)
                     (#x8B9E . #x4EAC)
                     (#x8B40 . #x6A5F)
                     (#x8A9E . #x8431)
                     (#x8A40 . #x9B41)
                     (#x899E . #x5FDC)
                     (#x8940 . #x9662)
                     (#x879C . #x222A)
                     (#x879B . #x2229)
                     (#x879A . #x2235)
                     (#x8799 . #x22BF)
                     (#x8798 . #x221F)
                     (#x8797 . #x2220)
                     (#x8796 . #x22A5)
                     (#x8795 . #x221A)
                     (#x8794 . #x2211)
                     (#x8793 . #x222E)
                     (#x8792 . #x222B)
                     (#x8791 . #x2261)
                     (#x8790 . #x2252)
                     (#x878F . #x337C)
                     (#x878E . #x337D)
                     (#x878D . #x337E)
                     (#x878C . #x3239)
                     (#x878B . #x3232)
                     (#x878A . #x3231)
                     (#x8789 . #x32A8)
                     (#x8788 . #x32A7)
                     (#x8787 . #x32A6)
                     (#x8786 . #x32A5)
                     (#x8785 . #x32A4)
                     (#x8784 . #x2121)
                     (#x8783 . #x33CD)
                     (#x8782 . #x2116)
                     (#x8781 . #x301F)
                     (#x8780 . #x301D)
                     (#x877E . #x337B)
                     (#x8775 . #x33A1)
                     (#x8774 . #x33C4)
                     (#x8773 . #x338F)
                     (#x8772 . #x338E)
                     (#x8771 . #x339E)
                     (#x8770 . #x339D)
                     (#x876F . #x339C)
                     (#x876E . #x333B)
                     (#x876D . #x334A)
                     (#x876C . #x332B)
                     (#x876B . #x3323)
                     (#x876A . #x3326)
                     (#x8769 . #x330D)
                     (#x8768 . #x3357)
                     (#x8767 . #x3351)
                     (#x8766 . #x3336)
                     (#x8765 . #x3303)
                     (#x8764 . #x3327)
                     (#x8763 . #x3318)
                     (#x8762 . #x334D)
                     (#x8761 . #x3322)
                     (#x8760 . #x3314)
                     (#x875F . #x3349)
                     (#x875D . #x2169)
                     (#x875C . #x2168)
                     (#x875B . #x2167)
                     (#x875A . #x2166)
                     (#x8759 . #x2165)
                     (#x8758 . #x2164)
                     (#x8757 . #x2163)
                     (#x8756 . #x2162)
                     (#x8755 . #x2161)
                     (#x8754 . #x2160)
                     (#x8753 . #x2473)
                     (#x8752 . #x2472)
                     (#x8751 . #x2471)
                     (#x8750 . #x2470)
                     (#x874F . #x246F)
                     (#x874E . #x246E)
                     (#x874D . #x246D)
                     (#x874C . #x246C)
                     (#x874B . #x246B)
                     (#x874A . #x246A)
                     (#x8749 . #x2469)
                     (#x8748 . #x2468)
                     (#x8747 . #x2467)
                     (#x8746 . #x2466)
                     (#x8745 . #x2465)
                     (#x8744 . #x2464)
                     (#x8743 . #x2463)
                     (#x8742 . #x2462)
                     (#x8741 . #x2461)
                     (#x8740 . #x2460)
                     (#x8440 . #x410)
                     (#x8340 . #x30A1)
                     (#x819E . #x25C7)
                     (#x8140 . #x3000)
                     ))
       (eucjp-only '((#xFEFE . #xE3AB)
                     (#xFEFD . #xE3AA)
                     (#xFEFC . #xE3A9)
                     (#xFEFB . #xE3A8)
                     (#xFEFA . #xE3A7)
                     (#xFEF9 . #xE3A6)
                     (#xFEF8 . #xE3A5)
                     (#xFEF7 . #xE3A4)
                     (#xFEF6 . #xE3A3)
                     (#xFEF5 . #xE3A2)
                     (#xFEF4 . #xE3A1)
                     (#xFEF3 . #xE3A0)
                     (#xFEF2 . #xE39F)
                     (#xFEF1 . #xE39E)
                     (#xFEF0 . #xE39D)
                     (#xFEEF . #xE39C)
                     (#xFEEE . #xE39B)
                     (#xFEED . #xE39A)
                     (#xFEEC . #xE399)
                     (#xFEEB . #xE398)
                     (#xFEEA . #xE397)
                     (#xFEE9 . #xE396)
                     (#xFEE8 . #xE395)
                     (#xFEE7 . #xE394)
                     (#xFEE6 . #xE393)
                     (#xFEE5 . #xE392)
                     (#xFEE4 . #xE391)
                     (#xFEE3 . #xE390)
                     (#xFEE2 . #xE38F)
                     (#xFEE1 . #xE38E)
                     (#xFEE0 . #xE38D)
                     (#xFEDF . #xE38C)
                     (#xFEDE . #xE38B)
                     (#xFEDD . #xE38A)
                     (#xFEDC . #xE389)
                     (#xFEDB . #xE388)
                     (#xFEDA . #xE387)
                     (#xFED9 . #xE386)
                     (#xFED8 . #xE385)
                     (#xFED7 . #xE384)
                     (#xFED6 . #xE383)
                     (#xFED5 . #xE382)
                     (#xFED4 . #xE381)
                     (#xFED3 . #xE380)
                     (#xFED2 . #xE37F)
                     (#xFED1 . #xE37E)
                     (#xFED0 . #xE37D)
                     (#xFECF . #xE37C)
                     (#xFECE . #xE37B)
                     (#xFECD . #xE37A)
                     (#xFECC . #xE379)
                     (#xFECB . #xE378)
                     (#xFECA . #xE377)
                     (#xFEC9 . #xE376)
                     (#xFEC8 . #xE375)
                     (#xFEC7 . #xE374)
                     (#xFEC6 . #xE373)
                     (#xFEC5 . #xE372)
                     (#xFEC4 . #xE371)
                     (#xFEC3 . #xE370)
                     (#xFEC2 . #xE36F)
                     (#xFEC1 . #xE36E)
                     (#xFEC0 . #xE36D)
                     (#xFEBF . #xE36C)
                     (#xFEBE . #xE36B)
                     (#xFEBD . #xE36A)
                     (#xFEBC . #xE369)
                     (#xFEBB . #xE368)
                     (#xFEBA . #xE367)
                     (#xFEB9 . #xE366)
                     (#xFEB8 . #xE365)
                     (#xFEB7 . #xE364)
                     (#xFEB6 . #xE363)
                     (#xFEB5 . #xE362)
                     (#xFEB4 . #xE361)
                     (#xFEB3 . #xE360)
                     (#xFEB2 . #xE35F)
                     (#xFEB1 . #xE35E)
                     (#xFEB0 . #xE35D)
                     (#xFEAF . #xE35C)
                     (#xFEAE . #xE35B)
                     (#xFEAD . #xE35A)
                     (#xFEAC . #xE359)
                     (#xFEAB . #xE358)
                     (#xFEAA . #xE357)
                     (#xFEA9 . #xE356)
                     (#xFEA8 . #xE355)
                     (#xFEA7 . #xE354)
                     (#xFEA6 . #xE353)
                     (#xFEA5 . #xE352)
                     (#xFEA4 . #xE351)
                     (#xFEA3 . #xE350)
                     (#xFEA2 . #xE34F)
                     (#xFEA1 . #xE34E)
                     (#xFDFE . #xE34D)
                     (#xFDFD . #xE34C)
                     (#xFDFC . #xE34B)
                     (#xFDFB . #xE34A)
                     (#xFDFA . #xE349)
                     (#xFDF9 . #xE348)
                     (#xFDF8 . #xE347)
                     (#xFDF7 . #xE346)
                     (#xFDF6 . #xE345)
                     (#xFDF5 . #xE344)
                     (#xFDF4 . #xE343)
                     (#xFDF3 . #xE342)
                     (#xFDF2 . #xE341)
                     (#xFDF1 . #xE340)
                     (#xFDF0 . #xE33F)
                     (#xFDEF . #xE33E)
                     (#xFDEE . #xE33D)
                     (#xFDED . #xE33C)
                     (#xFDEC . #xE33B)
                     (#xFDEB . #xE33A)
                     (#xFDEA . #xE339)
                     (#xFDE9 . #xE338)
                     (#xFDE8 . #xE337)
                     (#xFDE7 . #xE336)
                     (#xFDE6 . #xE335)
                     (#xFDE5 . #xE334)
                     (#xFDE4 . #xE333)
                     (#xFDE3 . #xE332)
                     (#xFDE2 . #xE331)
                     (#xFDE1 . #xE330)
                     (#xFDE0 . #xE32F)
                     (#xFDDF . #xE32E)
                     (#xFDDE . #xE32D)
                     (#xFDDD . #xE32C)
                     (#xFDDC . #xE32B)
                     (#xFDDB . #xE32A)
                     (#xFDDA . #xE329)
                     (#xFDD9 . #xE328)
                     (#xFDD8 . #xE327)
                     (#xFDD7 . #xE326)
                     (#xFDD6 . #xE325)
                     (#xFDD5 . #xE324)
                     (#xFDD4 . #xE323)
                     (#xFDD3 . #xE322)
                     (#xFDD2 . #xE321)
                     (#xFDD1 . #xE320)
                     (#xFDD0 . #xE31F)
                     (#xFDCF . #xE31E)
                     (#xFDCE . #xE31D)
                     (#xFDCD . #xE31C)
                     (#xFDCC . #xE31B)
                     (#xFDCB . #xE31A)
                     (#xFDCA . #xE319)
                     (#xFDC9 . #xE318)
                     (#xFDC8 . #xE317)
                     (#xFDC7 . #xE316)
                     (#xFDC6 . #xE315)
                     (#xFDC5 . #xE314)
                     (#xFDC4 . #xE313)
                     (#xFDC3 . #xE312)
                     (#xFDC2 . #xE311)
                     (#xFDC1 . #xE310)
                     (#xFDC0 . #xE30F)
                     (#xFDBF . #xE30E)
                     (#xFDBE . #xE30D)
                     (#xFDBD . #xE30C)
                     (#xFDBC . #xE30B)
                     (#xFDBB . #xE30A)
                     (#xFDBA . #xE309)
                     (#xFDB9 . #xE308)
                     (#xFDB8 . #xE307)
                     (#xFDB7 . #xE306)
                     (#xFDB6 . #xE305)
                     (#xFDB5 . #xE304)
                     (#xFDB4 . #xE303)
                     (#xFDB3 . #xE302)
                     (#xFDB2 . #xE301)
                     (#xFDB1 . #xE300)
                     (#xFDB0 . #xE2FF)
                     (#xFDAF . #xE2FE)
                     (#xFDAE . #xE2FD)
                     (#xFDAD . #xE2FC)
                     (#xFDAC . #xE2FB)
                     (#xFDAB . #xE2FA)
                     (#xFDAA . #xE2F9)
                     (#xFDA9 . #xE2F8)
                     (#xFDA8 . #xE2F7)
                     (#xFDA7 . #xE2F6)
                     (#xFDA6 . #xE2F5)
                     (#xFDA5 . #xE2F4)
                     (#xFDA4 . #xE2F3)
                     (#xFDA3 . #xE2F2)
                     (#xFDA2 . #xE2F1)
                     (#xFDA1 . #xE2F0)
                     (#xFCFE . #xE2EF)
                     (#xFCFD . #xE2EE)
                     (#xFCFC . #xE2ED)
                     (#xFCFB . #xE2EC)
                     (#xFCFA . #xE2EB)
                     (#xFCF9 . #xE2EA)
                     (#xFCF8 . #xE2E9)
                     (#xFCF7 . #xE2E8)
                     (#xFCF6 . #xE2E7)
                     (#xFCF5 . #xE2E6)
                     (#xFCF4 . #xE2E5)
                     (#xFCF3 . #xE2E4)
                     (#xFCF2 . #xE2E3)
                     (#xFCF1 . #xE2E2)
                     (#xFCF0 . #xE2E1)
                     (#xFCEF . #xE2E0)
                     (#xFCEE . #xE2DF)
                     (#xFCED . #xE2DE)
                     (#xFCEC . #xE2DD)
                     (#xFCEB . #xE2DC)
                     (#xFCEA . #xE2DB)
                     (#xFCE9 . #xE2DA)
                     (#xFCE8 . #xE2D9)
                     (#xFCE7 . #xE2D8)
                     (#xFCE6 . #xE2D7)
                     (#xFCE5 . #xE2D6)
                     (#xFCE4 . #xE2D5)
                     (#xFCE3 . #xE2D4)
                     (#xFCE2 . #xE2D3)
                     (#xFCE1 . #xE2D2)
                     (#xFCE0 . #xE2D1)
                     (#xFCDF . #xE2D0)
                     (#xFCDE . #xE2CF)
                     (#xFCDD . #xE2CE)
                     (#xFCDC . #xE2CD)
                     (#xFCDB . #xE2CC)
                     (#xFCDA . #xE2CB)
                     (#xFCD9 . #xE2CA)
                     (#xFCD8 . #xE2C9)
                     (#xFCD7 . #xE2C8)
                     (#xFCD6 . #xE2C7)
                     (#xFCD5 . #xE2C6)
                     (#xFCD4 . #xE2C5)
                     (#xFCD3 . #xE2C4)
                     (#xFCD2 . #xE2C3)
                     (#xFCD1 . #xE2C2)
                     (#xFCD0 . #xE2C1)
                     (#xFCCF . #xE2C0)
                     (#xFCCE . #xE2BF)
                     (#xFCCD . #xE2BE)
                     (#xFCCC . #xE2BD)
                     (#xFCCB . #xE2BC)
                     (#xFCCA . #xE2BB)
                     (#xFCC9 . #xE2BA)
                     (#xFCC8 . #xE2B9)
                     (#xFCC7 . #xE2B8)
                     (#xFCC6 . #xE2B7)
                     (#xFCC5 . #xE2B6)
                     (#xFCC4 . #xE2B5)
                     (#xFCC3 . #xE2B4)
                     (#xFCC2 . #xE2B3)
                     (#xFCC1 . #xE2B2)
                     (#xFCC0 . #xE2B1)
                     (#xFCBF . #xE2B0)
                     (#xFCBE . #xE2AF)
                     (#xFCBD . #xE2AE)
                     (#xFCBC . #xE2AD)
                     (#xFCBB . #xE2AC)
                     (#xFCBA . #xE2AB)
                     (#xFCB9 . #xE2AA)
                     (#xFCB8 . #xE2A9)
                     (#xFCB7 . #xE2A8)
                     (#xFCB6 . #xE2A7)
                     (#xFCB5 . #xE2A6)
                     (#xFCB4 . #xE2A5)
                     (#xFCB3 . #xE2A4)
                     (#xFCB2 . #xE2A3)
                     (#xFCB1 . #xE2A2)
                     (#xFCB0 . #xE2A1)
                     (#xFCAF . #xE2A0)
                     (#xFCAE . #xE29F)
                     (#xFCAD . #xE29E)
                     (#xFCAC . #xE29D)
                     (#xFCAB . #xE29C)
                     (#xFCAA . #xE29B)
                     (#xFCA9 . #xE29A)
                     (#xFCA8 . #xE299)
                     (#xFCA7 . #xE298)
                     (#xFCA6 . #xE297)
                     (#xFCA5 . #xE296)
                     (#xFCA4 . #xE295)
                     (#xFCA3 . #xE294)
                     (#xFCA2 . #xE293)
                     (#xFCA1 . #xE292)
                     (#xFBFE . #xE291)
                     (#xFBFD . #xE290)
                     (#xFBFC . #xE28F)
                     (#xFBFB . #xE28E)
                     (#xFBFA . #xE28D)
                     (#xFBF9 . #xE28C)
                     (#xFBF8 . #xE28B)
                     (#xFBF7 . #xE28A)
                     (#xFBF6 . #xE289)
                     (#xFBF5 . #xE288)
                     (#xFBF4 . #xE287)
                     (#xFBF3 . #xE286)
                     (#xFBF2 . #xE285)
                     (#xFBF1 . #xE284)
                     (#xFBF0 . #xE283)
                     (#xFBEF . #xE282)
                     (#xFBEE . #xE281)
                     (#xFBED . #xE280)
                     (#xFBEC . #xE27F)
                     (#xFBEB . #xE27E)
                     (#xFBEA . #xE27D)
                     (#xFBE9 . #xE27C)
                     (#xFBE8 . #xE27B)
                     (#xFBE7 . #xE27A)
                     (#xFBE6 . #xE279)
                     (#xFBE5 . #xE278)
                     (#xFBE4 . #xE277)
                     (#xFBE3 . #xE276)
                     (#xFBE2 . #xE275)
                     (#xFBE1 . #xE274)
                     (#xFBE0 . #xE273)
                     (#xFBDF . #xE272)
                     (#xFBDE . #xE271)
                     (#xFBDD . #xE270)
                     (#xFBDC . #xE26F)
                     (#xFBDB . #xE26E)
                     (#xFBDA . #xE26D)
                     (#xFBD9 . #xE26C)
                     (#xFBD8 . #xE26B)
                     (#xFBD7 . #xE26A)
                     (#xFBD6 . #xE269)
                     (#xFBD5 . #xE268)
                     (#xFBD4 . #xE267)
                     (#xFBD3 . #xE266)
                     (#xFBD2 . #xE265)
                     (#xFBD1 . #xE264)
                     (#xFBD0 . #xE263)
                     (#xFBCF . #xE262)
                     (#xFBCE . #xE261)
                     (#xFBCD . #xE260)
                     (#xFBCC . #xE25F)
                     (#xFBCB . #xE25E)
                     (#xFBCA . #xE25D)
                     (#xFBC9 . #xE25C)
                     (#xFBC8 . #xE25B)
                     (#xFBC7 . #xE25A)
                     (#xFBC6 . #xE259)
                     (#xFBC5 . #xE258)
                     (#xFBC4 . #xE257)
                     (#xFBC3 . #xE256)
                     (#xFBC2 . #xE255)
                     (#xFBC1 . #xE254)
                     (#xFBC0 . #xE253)
                     (#xFBBF . #xE252)
                     (#xFBBE . #xE251)
                     (#xFBBD . #xE250)
                     (#xFBBC . #xE24F)
                     (#xFBBB . #xE24E)
                     (#xFBBA . #xE24D)
                     (#xFBB9 . #xE24C)
                     (#xFBB8 . #xE24B)
                     (#xFBB7 . #xE24A)
                     (#xFBB6 . #xE249)
                     (#xFBB5 . #xE248)
                     (#xFBB4 . #xE247)
                     (#xFBB3 . #xE246)
                     (#xFBB2 . #xE245)
                     (#xFBB1 . #xE244)
                     (#xFBB0 . #xE243)
                     (#xFBAF . #xE242)
                     (#xFBAE . #xE241)
                     (#xFBAD . #xE240)
                     (#xFBAC . #xE23F)
                     (#xFBAB . #xE23E)
                     (#xFBAA . #xE23D)
                     (#xFBA9 . #xE23C)
                     (#xFBA8 . #xE23B)
                     (#xFBA7 . #xE23A)
                     (#xFBA6 . #xE239)
                     (#xFBA5 . #xE238)
                     (#xFBA4 . #xE237)
                     (#xFBA3 . #xE236)
                     (#xFBA2 . #xE235)
                     (#xFBA1 . #xE234)
                     (#xFAFE . #xE233)
                     (#xFAFD . #xE232)
                     (#xFAFC . #xE231)
                     (#xFAFB . #xE230)
                     (#xFAFA . #xE22F)
                     (#xFAF9 . #xE22E)
                     (#xFAF8 . #xE22D)
                     (#xFAF7 . #xE22C)
                     (#xFAF6 . #xE22B)
                     (#xFAF5 . #xE22A)
                     (#xFAF4 . #xE229)
                     (#xFAF3 . #xE228)
                     (#xFAF2 . #xE227)
                     (#xFAF1 . #xE226)
                     (#xFAF0 . #xE225)
                     (#xFAEF . #xE224)
                     (#xFAEE . #xE223)
                     (#xFAED . #xE222)
                     (#xFAEC . #xE221)
                     (#xFAEB . #xE220)
                     (#xFAEA . #xE21F)
                     (#xFAE9 . #xE21E)
                     (#xFAE8 . #xE21D)
                     (#xFAE7 . #xE21C)
                     (#xFAE6 . #xE21B)
                     (#xFAE5 . #xE21A)
                     (#xFAE4 . #xE219)
                     (#xFAE3 . #xE218)
                     (#xFAE2 . #xE217)
                     (#xFAE1 . #xE216)
                     (#xFAE0 . #xE215)
                     (#xFADF . #xE214)
                     (#xFADE . #xE213)
                     (#xFADD . #xE212)
                     (#xFADC . #xE211)
                     (#xFADB . #xE210)
                     (#xFADA . #xE20F)
                     (#xFAD9 . #xE20E)
                     (#xFAD8 . #xE20D)
                     (#xFAD7 . #xE20C)
                     (#xFAD6 . #xE20B)
                     (#xFAD5 . #xE20A)
                     (#xFAD4 . #xE209)
                     (#xFAD3 . #xE208)
                     (#xFAD2 . #xE207)
                     (#xFAD1 . #xE206)
                     (#xFAD0 . #xE205)
                     (#xFACF . #xE204)
                     (#xFACE . #xE203)
                     (#xFACD . #xE202)
                     (#xFACC . #xE201)
                     (#xFACB . #xE200)
                     (#xFACA . #xE1FF)
                     (#xFAC9 . #xE1FE)
                     (#xFAC8 . #xE1FD)
                     (#xFAC7 . #xE1FC)
                     (#xFAC6 . #xE1FB)
                     (#xFAC5 . #xE1FA)
                     (#xFAC4 . #xE1F9)
                     (#xFAC3 . #xE1F8)
                     (#xFAC2 . #xE1F7)
                     (#xFAC1 . #xE1F6)
                     (#xFAC0 . #xE1F5)
                     (#xFABF . #xE1F4)
                     (#xFABE . #xE1F3)
                     (#xFABD . #xE1F2)
                     (#xFABC . #xE1F1)
                     (#xFABB . #xE1F0)
                     (#xFABA . #xE1EF)
                     (#xFAB9 . #xE1EE)
                     (#xFAB8 . #xE1ED)
                     (#xFAB7 . #xE1EC)
                     (#xFAB6 . #xE1EB)
                     (#xFAB5 . #xE1EA)
                     (#xFAB4 . #xE1E9)
                     (#xFAB3 . #xE1E8)
                     (#xFAB2 . #xE1E7)
                     (#xFAB1 . #xE1E6)
                     (#xFAB0 . #xE1E5)
                     (#xFAAF . #xE1E4)
                     (#xFAAE . #xE1E3)
                     (#xFAAD . #xE1E2)
                     (#xFAAC . #xE1E1)
                     (#xFAAB . #xE1E0)
                     (#xFAAA . #xE1DF)
                     (#xFAA9 . #xE1DE)
                     (#xFAA8 . #xE1DD)
                     (#xFAA7 . #xE1DC)
                     (#xFAA6 . #xE1DB)
                     (#xFAA5 . #xE1DA)
                     (#xFAA4 . #xE1D9)
                     (#xFAA3 . #xE1D8)
                     (#xFAA2 . #xE1D7)
                     (#xFAA1 . #xE1D6)
                     (#xF9FE . #xE1D5)
                     (#xF9FD . #xE1D4)
                     (#xF9FC . #xE1D3)
                     (#xF9FB . #xE1D2)
                     (#xF9FA . #xE1D1)
                     (#xF9F9 . #xE1D0)
                     (#xF9F8 . #xE1CF)
                     (#xF9F7 . #xE1CE)
                     (#xF9F6 . #xE1CD)
                     (#xF9F5 . #xE1CC)
                     (#xF9F4 . #xE1CB)
                     (#xF9F3 . #xE1CA)
                     (#xF9F2 . #xE1C9)
                     (#xF9F1 . #xE1C8)
                     (#xF9F0 . #xE1C7)
                     (#xF9EF . #xE1C6)
                     (#xF9EE . #xE1C5)
                     (#xF9ED . #xE1C4)
                     (#xF9EC . #xE1C3)
                     (#xF9EB . #xE1C2)
                     (#xF9EA . #xE1C1)
                     (#xF9E9 . #xE1C0)
                     (#xF9E8 . #xE1BF)
                     (#xF9E7 . #xE1BE)
                     (#xF9E6 . #xE1BD)
                     (#xF9E5 . #xE1BC)
                     (#xF9E4 . #xE1BB)
                     (#xF9E3 . #xE1BA)
                     (#xF9E2 . #xE1B9)
                     (#xF9E1 . #xE1B8)
                     (#xF9E0 . #xE1B7)
                     (#xF9DF . #xE1B6)
                     (#xF9DE . #xE1B5)
                     (#xF9DD . #xE1B4)
                     (#xF9DC . #xE1B3)
                     (#xF9DB . #xE1B2)
                     (#xF9DA . #xE1B1)
                     (#xF9D9 . #xE1B0)
                     (#xF9D8 . #xE1AF)
                     (#xF9D7 . #xE1AE)
                     (#xF9D6 . #xE1AD)
                     (#xF9D5 . #xE1AC)
                     (#xF9D4 . #xE1AB)
                     (#xF9D3 . #xE1AA)
                     (#xF9D2 . #xE1A9)
                     (#xF9D1 . #xE1A8)
                     (#xF9D0 . #xE1A7)
                     (#xF9CF . #xE1A6)
                     (#xF9CE . #xE1A5)
                     (#xF9CD . #xE1A4)
                     (#xF9CC . #xE1A3)
                     (#xF9CB . #xE1A2)
                     (#xF9CA . #xE1A1)
                     (#xF9C9 . #xE1A0)
                     (#xF9C8 . #xE19F)
                     (#xF9C7 . #xE19E)
                     (#xF9C6 . #xE19D)
                     (#xF9C5 . #xE19C)
                     (#xF9C4 . #xE19B)
                     (#xF9C3 . #xE19A)
                     (#xF9C2 . #xE199)
                     (#xF9C1 . #xE198)
                     (#xF9C0 . #xE197)
                     (#xF9BF . #xE196)
                     (#xF9BE . #xE195)
                     (#xF9BD . #xE194)
                     (#xF9BC . #xE193)
                     (#xF9BB . #xE192)
                     (#xF9BA . #xE191)
                     (#xF9B9 . #xE190)
                     (#xF9B8 . #xE18F)
                     (#xF9B7 . #xE18E)
                     (#xF9B6 . #xE18D)
                     (#xF9B5 . #xE18C)
                     (#xF9B4 . #xE18B)
                     (#xF9B3 . #xE18A)
                     (#xF9B2 . #xE189)
                     (#xF9B1 . #xE188)
                     (#xF9B0 . #xE187)
                     (#xF9AF . #xE186)
                     (#xF9AE . #xE185)
                     (#xF9AD . #xE184)
                     (#xF9AC . #xE183)
                     (#xF9AB . #xE182)
                     (#xF9AA . #xE181)
                     (#xF9A9 . #xE180)
                     (#xF9A8 . #xE17F)
                     (#xF9A7 . #xE17E)
                     (#xF9A6 . #xE17D)
                     (#xF9A5 . #xE17C)
                     (#xF9A4 . #xE17B)
                     (#xF9A3 . #xE17A)
                     (#xF9A2 . #xE179)
                     (#xF9A1 . #xE178)
                     (#xF8FE . #xE177)
                     (#xF8FD . #xE176)
                     (#xF8FC . #xE175)
                     (#xF8FB . #xE174)
                     (#xF8FA . #xE173)
                     (#xF8F9 . #xE172)
                     (#xF8F8 . #xE171)
                     (#xF8F7 . #xE170)
                     (#xF8F6 . #xE16F)
                     (#xF8F5 . #xE16E)
                     (#xF8F4 . #xE16D)
                     (#xF8F3 . #xE16C)
                     (#xF8F2 . #xE16B)
                     (#xF8F1 . #xE16A)
                     (#xF8F0 . #xE169)
                     (#xF8EF . #xE168)
                     (#xF8EE . #xE167)
                     (#xF8ED . #xE166)
                     (#xF8EC . #xE165)
                     (#xF8EB . #xE164)
                     (#xF8EA . #xE163)
                     (#xF8E9 . #xE162)
                     (#xF8E8 . #xE161)
                     (#xF8E7 . #xE160)
                     (#xF8E6 . #xE15F)
                     (#xF8E5 . #xE15E)
                     (#xF8E4 . #xE15D)
                     (#xF8E3 . #xE15C)
                     (#xF8E2 . #xE15B)
                     (#xF8E1 . #xE15A)
                     (#xF8E0 . #xE159)
                     (#xF8DF . #xE158)
                     (#xF8DE . #xE157)
                     (#xF8DD . #xE156)
                     (#xF8DC . #xE155)
                     (#xF8DB . #xE154)
                     (#xF8DA . #xE153)
                     (#xF8D9 . #xE152)
                     (#xF8D8 . #xE151)
                     (#xF8D7 . #xE150)
                     (#xF8D6 . #xE14F)
                     (#xF8D5 . #xE14E)
                     (#xF8D4 . #xE14D)
                     (#xF8D3 . #xE14C)
                     (#xF8D2 . #xE14B)
                     (#xF8D1 . #xE14A)
                     (#xF8D0 . #xE149)
                     (#xF8CF . #xE148)
                     (#xF8CE . #xE147)
                     (#xF8CD . #xE146)
                     (#xF8CC . #xE145)
                     (#xF8CB . #xE144)
                     (#xF8CA . #xE143)
                     (#xF8C9 . #xE142)
                     (#xF8C8 . #xE141)
                     (#xF8C7 . #xE140)
                     (#xF8C6 . #xE13F)
                     (#xF8C5 . #xE13E)
                     (#xF8C4 . #xE13D)
                     (#xF8C3 . #xE13C)
                     (#xF8C2 . #xE13B)
                     (#xF8C1 . #xE13A)
                     (#xF8C0 . #xE139)
                     (#xF8BF . #xE138)
                     (#xF8BE . #xE137)
                     (#xF8BD . #xE136)
                     (#xF8BC . #xE135)
                     (#xF8BB . #xE134)
                     (#xF8BA . #xE133)
                     (#xF8B9 . #xE132)
                     (#xF8B8 . #xE131)
                     (#xF8B7 . #xE130)
                     (#xF8B6 . #xE12F)
                     (#xF8B5 . #xE12E)
                     (#xF8B4 . #xE12D)
                     (#xF8B3 . #xE12C)
                     (#xF8B2 . #xE12B)
                     (#xF8B1 . #xE12A)
                     (#xF8B0 . #xE129)
                     (#xF8AF . #xE128)
                     (#xF8AE . #xE127)
                     (#xF8AD . #xE126)
                     (#xF8AC . #xE125)
                     (#xF8AB . #xE124)
                     (#xF8AA . #xE123)
                     (#xF8A9 . #xE122)
                     (#xF8A8 . #xE121)
                     (#xF8A7 . #xE120)
                     (#xF8A6 . #xE11F)
                     (#xF8A5 . #xE11E)
                     (#xF8A4 . #xE11D)
                     (#xF8A3 . #xE11C)
                     (#xF8A2 . #xE11B)
                     (#xF8A1 . #xE11A)
                     (#xF7FE . #xE119)
                     (#xF7FD . #xE118)
                     (#xF7FC . #xE117)
                     (#xF7FB . #xE116)
                     (#xF7FA . #xE115)
                     (#xF7F9 . #xE114)
                     (#xF7F8 . #xE113)
                     (#xF7F7 . #xE112)
                     (#xF7F6 . #xE111)
                     (#xF7F5 . #xE110)
                     (#xF7F4 . #xE10F)
                     (#xF7F3 . #xE10E)
                     (#xF7F2 . #xE10D)
                     (#xF7F1 . #xE10C)
                     (#xF7F0 . #xE10B)
                     (#xF7EF . #xE10A)
                     (#xF7EE . #xE109)
                     (#xF7ED . #xE108)
                     (#xF7EC . #xE107)
                     (#xF7EB . #xE106)
                     (#xF7EA . #xE105)
                     (#xF7E9 . #xE104)
                     (#xF7E8 . #xE103)
                     (#xF7E7 . #xE102)
                     (#xF7E6 . #xE101)
                     (#xF7E5 . #xE100)
                     (#xF7E4 . #xE0FF)
                     (#xF7E3 . #xE0FE)
                     (#xF7E2 . #xE0FD)
                     (#xF7E1 . #xE0FC)
                     (#xF7E0 . #xE0FB)
                     (#xF7DF . #xE0FA)
                     (#xF7DE . #xE0F9)
                     (#xF7DD . #xE0F8)
                     (#xF7DC . #xE0F7)
                     (#xF7DB . #xE0F6)
                     (#xF7DA . #xE0F5)
                     (#xF7D9 . #xE0F4)
                     (#xF7D8 . #xE0F3)
                     (#xF7D7 . #xE0F2)
                     (#xF7D6 . #xE0F1)
                     (#xF7D5 . #xE0F0)
                     (#xF7D4 . #xE0EF)
                     (#xF7D3 . #xE0EE)
                     (#xF7D2 . #xE0ED)
                     (#xF7D1 . #xE0EC)
                     (#xF7D0 . #xE0EB)
                     (#xF7CF . #xE0EA)
                     (#xF7CE . #xE0E9)
                     (#xF7CD . #xE0E8)
                     (#xF7CC . #xE0E7)
                     (#xF7CB . #xE0E6)
                     (#xF7CA . #xE0E5)
                     (#xF7C9 . #xE0E4)
                     (#xF7C8 . #xE0E3)
                     (#xF7C7 . #xE0E2)
                     (#xF7C6 . #xE0E1)
                     (#xF7C5 . #xE0E0)
                     (#xF7C4 . #xE0DF)
                     (#xF7C3 . #xE0DE)
                     (#xF7C2 . #xE0DD)
                     (#xF7C1 . #xE0DC)
                     (#xF7C0 . #xE0DB)
                     (#xF7BF . #xE0DA)
                     (#xF7BE . #xE0D9)
                     (#xF7BD . #xE0D8)
                     (#xF7BC . #xE0D7)
                     (#xF7BB . #xE0D6)
                     (#xF7BA . #xE0D5)
                     (#xF7B9 . #xE0D4)
                     (#xF7B8 . #xE0D3)
                     (#xF7B7 . #xE0D2)
                     (#xF7B6 . #xE0D1)
                     (#xF7B5 . #xE0D0)
                     (#xF7B4 . #xE0CF)
                     (#xF7B3 . #xE0CE)
                     (#xF7B2 . #xE0CD)
                     (#xF7B1 . #xE0CC)
                     (#xF7B0 . #xE0CB)
                     (#xF7AF . #xE0CA)
                     (#xF7AE . #xE0C9)
                     (#xF7AD . #xE0C8)
                     (#xF7AC . #xE0C7)
                     (#xF7AB . #xE0C6)
                     (#xF7AA . #xE0C5)
                     (#xF7A9 . #xE0C4)
                     (#xF7A8 . #xE0C3)
                     (#xF7A7 . #xE0C2)
                     (#xF7A6 . #xE0C1)
                     (#xF7A5 . #xE0C0)
                     (#xF7A4 . #xE0BF)
                     (#xF7A3 . #xE0BE)
                     (#xF7A2 . #xE0BD)
                     (#xF7A1 . #xE0BC)
                     (#xF6FE . #xE0BB)
                     (#xF6FD . #xE0BA)
                     (#xF6FC . #xE0B9)
                     (#xF6FB . #xE0B8)
                     (#xF6FA . #xE0B7)
                     (#xF6F9 . #xE0B6)
                     (#xF6F8 . #xE0B5)
                     (#xF6F7 . #xE0B4)
                     (#xF6F6 . #xE0B3)
                     (#xF6F5 . #xE0B2)
                     (#xF6F4 . #xE0B1)
                     (#xF6F3 . #xE0B0)
                     (#xF6F2 . #xE0AF)
                     (#xF6F1 . #xE0AE)
                     (#xF6F0 . #xE0AD)
                     (#xF6EF . #xE0AC)
                     (#xF6EE . #xE0AB)
                     (#xF6ED . #xE0AA)
                     (#xF6EC . #xE0A9)
                     (#xF6EB . #xE0A8)
                     (#xF6EA . #xE0A7)
                     (#xF6E9 . #xE0A6)
                     (#xF6E8 . #xE0A5)
                     (#xF6E7 . #xE0A4)
                     (#xF6E6 . #xE0A3)
                     (#xF6E5 . #xE0A2)
                     (#xF6E4 . #xE0A1)
                     (#xF6E3 . #xE0A0)
                     (#xF6E2 . #xE09F)
                     (#xF6E1 . #xE09E)
                     (#xF6E0 . #xE09D)
                     (#xF6DF . #xE09C)
                     (#xF6DE . #xE09B)
                     (#xF6DD . #xE09A)
                     (#xF6DC . #xE099)
                     (#xF6DB . #xE098)
                     (#xF6DA . #xE097)
                     (#xF6D9 . #xE096)
                     (#xF6D8 . #xE095)
                     (#xF6D7 . #xE094)
                     (#xF6D6 . #xE093)
                     (#xF6D5 . #xE092)
                     (#xF6D4 . #xE091)
                     (#xF6D3 . #xE090)
                     (#xF6D2 . #xE08F)
                     (#xF6D1 . #xE08E)
                     (#xF6D0 . #xE08D)
                     (#xF6CF . #xE08C)
                     (#xF6CE . #xE08B)
                     (#xF6CD . #xE08A)
                     (#xF6CC . #xE089)
                     (#xF6CB . #xE088)
                     (#xF6CA . #xE087)
                     (#xF6C9 . #xE086)
                     (#xF6C8 . #xE085)
                     (#xF6C7 . #xE084)
                     (#xF6C6 . #xE083)
                     (#xF6C5 . #xE082)
                     (#xF6C4 . #xE081)
                     (#xF6C3 . #xE080)
                     (#xF6C2 . #xE07F)
                     (#xF6C1 . #xE07E)
                     (#xF6C0 . #xE07D)
                     (#xF6BF . #xE07C)
                     (#xF6BE . #xE07B)
                     (#xF6BD . #xE07A)
                     (#xF6BC . #xE079)
                     (#xF6BB . #xE078)
                     (#xF6BA . #xE077)
                     (#xF6B9 . #xE076)
                     (#xF6B8 . #xE075)
                     (#xF6B7 . #xE074)
                     (#xF6B6 . #xE073)
                     (#xF6B5 . #xE072)
                     (#xF6B4 . #xE071)
                     (#xF6B3 . #xE070)
                     (#xF6B2 . #xE06F)
                     (#xF6B1 . #xE06E)
                     (#xF6B0 . #xE06D)
                     (#xF6AF . #xE06C)
                     (#xF6AE . #xE06B)
                     (#xF6AD . #xE06A)
                     (#xF6AC . #xE069)
                     (#xF6AB . #xE068)
                     (#xF6AA . #xE067)
                     (#xF6A9 . #xE066)
                     (#xF6A8 . #xE065)
                     (#xF6A7 . #xE064)
                     (#xF6A6 . #xE063)
                     (#xF6A5 . #xE062)
                     (#xF6A4 . #xE061)
                     (#xF6A3 . #xE060)
                     (#xF6A2 . #xE05F)
                     (#xF6A1 . #xE05E)
                     (#xF5FE . #xE05D)
                     (#xF5FD . #xE05C)
                     (#xF5FC . #xE05B)
                     (#xF5FB . #xE05A)
                     (#xF5FA . #xE059)
                     (#xF5F9 . #xE058)
                     (#xF5F8 . #xE057)
                     (#xF5F7 . #xE056)
                     (#xF5F6 . #xE055)
                     (#xF5F5 . #xE054)
                     (#xF5F4 . #xE053)
                     (#xF5F3 . #xE052)
                     (#xF5F2 . #xE051)
                     (#xF5F1 . #xE050)
                     (#xF5F0 . #xE04F)
                     (#xF5EF . #xE04E)
                     (#xF5EE . #xE04D)
                     (#xF5ED . #xE04C)
                     (#xF5EC . #xE04B)
                     (#xF5EB . #xE04A)
                     (#xF5EA . #xE049)
                     (#xF5E9 . #xE048)
                     (#xF5E8 . #xE047)
                     (#xF5E7 . #xE046)
                     (#xF5E6 . #xE045)
                     (#xF5E5 . #xE044)
                     (#xF5E4 . #xE043)
                     (#xF5E3 . #xE042)
                     (#xF5E2 . #xE041)
                     (#xF5E1 . #xE040)
                     (#xF5E0 . #xE03F)
                     (#xF5DF . #xE03E)
                     (#xF5DE . #xE03D)
                     (#xF5DD . #xE03C)
                     (#xF5DC . #xE03B)
                     (#xF5DB . #xE03A)
                     (#xF5DA . #xE039)
                     (#xF5D9 . #xE038)
                     (#xF5D8 . #xE037)
                     (#xF5D7 . #xE036)
                     (#xF5D6 . #xE035)
                     (#xF5D5 . #xE034)
                     (#xF5D4 . #xE033)
                     (#xF5D3 . #xE032)
                     (#xF5D2 . #xE031)
                     (#xF5D1 . #xE030)
                     (#xF5D0 . #xE02F)
                     (#xF5CF . #xE02E)
                     (#xF5CE . #xE02D)
                     (#xF5CD . #xE02C)
                     (#xF5CC . #xE02B)
                     (#xF5CB . #xE02A)
                     (#xF5CA . #xE029)
                     (#xF5C9 . #xE028)
                     (#xF5C8 . #xE027)
                     (#xF5C7 . #xE026)
                     (#xF5C6 . #xE025)
                     (#xF5C5 . #xE024)
                     (#xF5C4 . #xE023)
                     (#xF5C3 . #xE022)
                     (#xF5C2 . #xE021)
                     (#xF5C1 . #xE020)
                     (#xF5C0 . #xE01F)
                     (#xF5BF . #xE01E)
                     (#xF5BE . #xE01D)
                     (#xF5BD . #xE01C)
                     (#xF5BC . #xE01B)
                     (#xF5BB . #xE01A)
                     (#xF5BA . #xE019)
                     (#xF5B9 . #xE018)
                     (#xF5B8 . #xE017)
                     (#xF5B7 . #xE016)
                     (#xF5B6 . #xE015)
                     (#xF5B5 . #xE014)
                     (#xF5B4 . #xE013)
                     (#xF5B3 . #xE012)
                     (#xF5B2 . #xE011)
                     (#xF5B1 . #xE010)
                     (#xF5B0 . #xE00F)
                     (#xF5AF . #xE00E)
                     (#xF5AE . #xE00D)
                     (#xF5AD . #xE00C)
                     (#xF5AC . #xE00B)
                     (#xF5AB . #xE00A)
                     (#xF5AA . #xE009)
                     (#xF5A9 . #xE008)
                     (#xF5A8 . #xE007)
                     (#xF5A7 . #xE006)
                     (#xF5A6 . #xE005)
                     (#xF5A5 . #xE004)
                     (#xF5A4 . #xE003)
                     (#xF5A3 . #xE002)
                     (#xF5A2 . #xE001)
                     (#xF5A1 . #xE000)
                     ))
       (eucjp '((#x8FA2AF . #x2D8)
                (#x8FA2B0 . #x2C7)
                (#x8FA2B1 . #xB8)
                (#x8FA2B2 . #x2D9)
                (#x8FA2B3 . #x2DD)
                (#x8FA2B4 . #xAF)
                (#x8FA2B5 . #x2DB)
                (#x8FA2B6 . #x2DA)
                (#x8FA2B7 . #xFF5E)
                (#x8FA2B8 . #x384)
                (#x8FA2B9 . #x385)
                (#x8FA2C2 . #xA1)
                (#x8FA2C3 . #xA6)
                (#x8FA2C4 . #xBF)
                (#x8FA2EB . #xBA)
                (#x8FA2EC . #xAA)
                (#x8FA2ED . #xA9)
                (#x8FA2EE . #xAE)
                (#x8FA2EF . #x2122)
                (#x8FA2F0 . #xA4)
                (#x8FA2F1 . #x2116)
                (#x8FA6E1 . #x386)
                (#x8FA6E2 . #x388)
                (#x8FA6E3 . #x389)
                (#x8FA6E4 . #x38A)
                (#x8FA6E5 . #x3AA)
                (#x8FA6E7 . #x38C)
                (#x8FA6E9 . #x38E)
                (#x8FA6EA . #x3AB)
                (#x8FA6EC . #x38F)
                (#x8FA6F1 . #x3AC)
                (#x8FA6F2 . #x3AD)
                (#x8FA6F3 . #x3AE)
                (#x8FA6F4 . #x3AF)
                (#x8FA6F5 . #x3CA)
                (#x8FA6F6 . #x390)
                (#x8FA6F7 . #x3CC)
                (#x8FA6F8 . #x3C2)
                (#x8FA6F9 . #x3CD)
                (#x8FA6FA . #x3CB)
                (#x8FA6FB . #x3B0)
                (#x8FA6FC . #x3CE)
                (#x8FA7C2 . #x402)
                (#x8FA7C3 . #x403)
                (#x8FA7C4 . #x404)
                (#x8FA7C5 . #x405)
                (#x8FA7C6 . #x406)
                (#x8FA7C7 . #x407)
                (#x8FA7C8 . #x408)
                (#x8FA7C9 . #x409)
                (#x8FA7CA . #x40A)
                (#x8FA7CB . #x40B)
                (#x8FA7CC . #x40C)
                (#x8FA7CD . #x40E)
                (#x8FA7CE . #x40F)
                (#x8FA7F2 . #x452)
                (#x8FA7F3 . #x453)
                (#x8FA7F4 . #x454)
                (#x8FA7F5 . #x455)
                (#x8FA7F6 . #x456)
                (#x8FA7F7 . #x457)
                (#x8FA7F8 . #x458)
                (#x8FA7F9 . #x459)
                (#x8FA7FA . #x45A)
                (#x8FA7FB . #x45B)
                (#x8FA7FC . #x45C)
                (#x8FA7FD . #x45E)
                (#x8FA7FE . #x45F)
                (#x8FA9A1 . #xC6)
                (#x8FA9A2 . #x110)
                (#x8FA9A4 . #x126)
                (#x8FA9A6 . #x132)
                (#x8FA9A8 . #x141)
                (#x8FA9A9 . #x13F)
                (#x8FA9AB . #x14A)
                (#x8FA9AC . #xD8)
                (#x8FA9AD . #x152)
                (#x8FA9AF . #x166)
                (#x8FA9B0 . #xDE)
                (#x8FA9C1 . #xE6)
                (#x8FA9C2 . #x111)
                (#x8FA9C3 . #xF0)
                (#x8FA9C4 . #x127)
                (#x8FA9C5 . #x131)
                (#x8FA9C6 . #x133)
                (#x8FA9C7 . #x138)
                (#x8FA9C8 . #x142)
                (#x8FA9C9 . #x140)
                (#x8FA9CA . #x149)
                (#x8FA9CB . #x14B)
                (#x8FA9CC . #xF8)
                (#x8FA9CD . #x153)
                (#x8FA9CE . #xDF)
                (#x8FA9CF . #x167)
                (#x8FA9D0 . #xFE)
                (#x8FAAA1 . #xC1)
                (#x8FAAA2 . #xC0)
                (#x8FAAA3 . #xC4)
                (#x8FAAA4 . #xC2)
                (#x8FAAA5 . #x102)
                (#x8FAAA6 . #x1CD)
                (#x8FAAA7 . #x100)
                (#x8FAAA8 . #x104)
                (#x8FAAA9 . #xC5)
                (#x8FAAAA . #xC3)
                (#x8FAAAB . #x106)
                (#x8FAAAC . #x108)
                (#x8FAAAD . #x10C)
                (#x8FAAAE . #xC7)
                (#x8FAAAF . #x10A)
                (#x8FAAB0 . #x10E)
                (#x8FAAB1 . #xC9)
                (#x8FAAB2 . #xC8)
                (#x8FAAB3 . #xCB)
                (#x8FAAB4 . #xCA)
                (#x8FAAB5 . #x11A)
                (#x8FAAB6 . #x116)
                (#x8FAAB7 . #x112)
                (#x8FAAB8 . #x118)
                (#x8FAABA . #x11C)
                (#x8FAABB . #x11E)
                (#x8FAABC . #x122)
                (#x8FAABD . #x120)
                (#x8FAABE . #x124)
                (#x8FAABF . #xCD)
                (#x8FAAC0 . #xCC)
                (#x8FAAC1 . #xCF)
                (#x8FAAC2 . #xCE)
                (#x8FAAC3 . #x1CF)
                (#x8FAAC4 . #x130)
                (#x8FAAC5 . #x12A)
                (#x8FAAC6 . #x12E)
                (#x8FAAC7 . #x128)
                (#x8FAAC8 . #x134)
                (#x8FAAC9 . #x136)
                (#x8FAACA . #x139)
                (#x8FAACB . #x13D)
                (#x8FAACC . #x13B)
                (#x8FAACD . #x143)
                (#x8FAACE . #x147)
                (#x8FAACF . #x145)
                (#x8FAAD0 . #xD1)
                (#x8FAAD1 . #xD3)
                (#x8FAAD2 . #xD2)
                (#x8FAAD3 . #xD6)
                (#x8FAAD4 . #xD4)
                (#x8FAAD5 . #x1D1)
                (#x8FAAD6 . #x150)
                (#x8FAAD7 . #x14C)
                (#x8FAAD8 . #xD5)
                (#x8FAAD9 . #x154)
                (#x8FAADA . #x158)
                (#x8FAADB . #x156)
                (#x8FAADC . #x15A)
                (#x8FAADD . #x15C)
                (#x8FAADE . #x160)
                (#x8FAADF . #x15E)
                (#x8FAAE0 . #x164)
                (#x8FAAE1 . #x162)
                (#x8FAAE2 . #xDA)
                (#x8FAAE3 . #xD9)
                (#x8FAAE4 . #xDC)
                (#x8FAAE5 . #xDB)
                (#x8FAAE6 . #x16C)
                (#x8FAAE7 . #x1D3)
                (#x8FAAE8 . #x170)
                (#x8FAAE9 . #x16A)
                (#x8FAAEA . #x172)
                (#x8FAAEB . #x16E)
                (#x8FAAEC . #x168)
                (#x8FAAED . #x1D7)
                (#x8FAAEE . #x1DB)
                (#x8FAAEF . #x1D9)
                (#x8FAAF0 . #x1D5)
                (#x8FAAF1 . #x174)
                (#x8FAAF2 . #xDD)
                (#x8FAAF3 . #x178)
                (#x8FAAF4 . #x176)
                (#x8FAAF5 . #x179)
                (#x8FAAF6 . #x17D)
                (#x8FAAF7 . #x17B)
                (#x8FABA1 . #xE1)
                (#x8FABA2 . #xE0)
                (#x8FABA3 . #xE4)
                (#x8FABA4 . #xE2)
                (#x8FABA5 . #x103)
                (#x8FABA6 . #x1CE)
                (#x8FABA7 . #x101)
                (#x8FABA8 . #x105)
                (#x8FABA9 . #xE5)
                (#x8FABAA . #xE3)
                (#x8FABAB . #x107)
                (#x8FABAC . #x109)
                (#x8FABAD . #x10D)
                (#x8FABAE . #xE7)
                (#x8FABAF . #x10B)
                (#x8FABB0 . #x10F)
                (#x8FABB1 . #xE9)
                (#x8FABB2 . #xE8)
                (#x8FABB3 . #xEB)
                (#x8FABB4 . #xEA)
                (#x8FABB5 . #x11B)
                (#x8FABB6 . #x117)
                (#x8FABB7 . #x113)
                (#x8FABB8 . #x119)
                (#x8FABB9 . #x1F5)
                (#x8FABBA . #x11D)
                (#x8FABBB . #x11F)
                (#x8FABBD . #x121)
                (#x8FABBE . #x125)
                (#x8FABBF . #xED)
                (#x8FABC0 . #xEC)
                (#x8FABC1 . #xEF)
                (#x8FABC2 . #xEE)
                (#x8FABC3 . #x1D0)
                (#x8FABC5 . #x12B)
                (#x8FABC6 . #x12F)
                (#x8FABC7 . #x129)
                (#x8FABC8 . #x135)
                (#x8FABC9 . #x137)
                (#x8FABCA . #x13A)
                (#x8FABCB . #x13E)
                (#x8FABCC . #x13C)
                (#x8FABCD . #x144)
                (#x8FABCE . #x148)
                (#x8FABCF . #x146)
                (#x8FABD0 . #xF1)
                (#x8FABD1 . #xF3)
                (#x8FABD2 . #xF2)
                (#x8FABD3 . #xF6)
                (#x8FABD4 . #xF4)
                (#x8FABD5 . #x1D2)
                (#x8FABD6 . #x151)
                (#x8FABD7 . #x14D)
                (#x8FABD8 . #xF5)
                (#x8FABD9 . #x155)
                (#x8FABDA . #x159)
                (#x8FABDB . #x157)
                (#x8FABDC . #x15B)
                (#x8FABDD . #x15D)
                (#x8FABDE . #x161)
                (#x8FABDF . #x15F)
                (#x8FABE0 . #x165)
                (#x8FABE1 . #x163)
                (#x8FABE2 . #xFA)
                (#x8FABE3 . #xF9)
                (#x8FABE4 . #xFC)
                (#x8FABE5 . #xFB)
                (#x8FABE6 . #x16D)
                (#x8FABE7 . #x1D4)
                (#x8FABE8 . #x171)
                (#x8FABE9 . #x16B)
                (#x8FABEA . #x173)
                (#x8FABEB . #x16F)
                (#x8FABEC . #x169)
                (#x8FABED . #x1D8)
                (#x8FABEE . #x1DC)
                (#x8FABEF . #x1DA)
                (#x8FABF0 . #x1D6)
                (#x8FABF1 . #x175)
                (#x8FABF2 . #xFD)
                (#x8FABF3 . #xFF)
                (#x8FABF4 . #x177)
                (#x8FABF5 . #x17A)
                (#x8FABF6 . #x17E)
                (#x8FABF7 . #x17C)
                (#x8FB0A1 . #x4E02)
                (#x8FB0A2 . #x4E04)
                (#x8FB0A3 . #x4E05)
                (#x8FB0A4 . #x4E0C)
                (#x8FB0A5 . #x4E12)
                (#x8FB0A6 . #x4E1F)
                (#x8FB0A7 . #x4E23)
                (#x8FB0A8 . #x4E24)
                (#x8FB0A9 . #x4E28)
                (#x8FB0AA . #x4E2B)
                (#x8FB0AB . #x4E2E)
                (#x8FB0AC . #x4E2F)
                (#x8FB0AD . #x4E30)
                (#x8FB0AE . #x4E35)
                (#x8FB0AF . #x4E40)
                (#x8FB0B0 . #x4E41)
                (#x8FB0B1 . #x4E44)
                (#x8FB0B2 . #x4E47)
                (#x8FB0B3 . #x4E51)
                (#x8FB0B4 . #x4E5A)
                (#x8FB0B5 . #x4E5C)
                (#x8FB0B6 . #x4E63)
                (#x8FB0B7 . #x4E68)
                (#x8FB0B8 . #x4E69)
                (#x8FB0B9 . #x4E74)
                (#x8FB0BA . #x4E75)
                (#x8FB0BB . #x4E79)
                (#x8FB0BC . #x4E7F)
                (#x8FB0BD . #x4E8D)
                (#x8FB0BE . #x4E96)
                (#x8FB0BF . #x4E97)
                (#x8FB0C0 . #x4E9D)
                (#x8FB0C1 . #x4EAF)
                (#x8FB0C2 . #x4EB9)
                (#x8FB0C3 . #x4EC3)
                (#x8FB0C4 . #x4ED0)
                (#x8FB0C5 . #x4EDA)
                (#x8FB0C6 . #x4EDB)
                (#x8FB0C7 . #x4EE0)
                (#x8FB0C8 . #x4EE1)
                (#x8FB0C9 . #x4EE2)
                (#x8FB0CA . #x4EE8)
                (#x8FB0CB . #x4EEF)
                (#x8FB0CC . #x4EF1)
                (#x8FB0CD . #x4EF3)
                (#x8FB0CE . #x4EF5)
                (#x8FB0CF . #x4EFD)
                (#x8FB0D0 . #x4EFE)
                (#x8FB0D1 . #x4EFF)
                (#x8FB0D2 . #x4F00)
                (#x8FB0D3 . #x4F02)
                (#x8FB0D4 . #x4F03)
                (#x8FB0D5 . #x4F08)
                (#x8FB0D6 . #x4F0B)
                (#x8FB0D7 . #x4F0C)
                (#x8FB0D8 . #x4F12)
                (#x8FB0D9 . #x4F15)
                (#x8FB0DA . #x4F16)
                (#x8FB0DB . #x4F17)
                (#x8FB0DC . #x4F19)
                (#x8FB0DD . #x4F2E)
                (#x8FB0DE . #x4F31)
                (#x8FB0DF . #x4F60)
                (#x8FB0E0 . #x4F33)
                (#x8FB0E1 . #x4F35)
                (#x8FB0E2 . #x4F37)
                (#x8FB0E3 . #x4F39)
                (#x8FB0E4 . #x4F3B)
                (#x8FB0E5 . #x4F3E)
                (#x8FB0E6 . #x4F40)
                (#x8FB0E7 . #x4F42)
                (#x8FB0E8 . #x4F48)
                (#x8FB0E9 . #x4F49)
                (#x8FB0EA . #x4F4B)
                (#x8FB0EB . #x4F4C)
                (#x8FB0EC . #x4F52)
                (#x8FB0ED . #x4F54)
                (#x8FB0EE . #x4F56)
                (#x8FB0EF . #x4F58)
                (#x8FB0F0 . #x4F5F)
                (#x8FB0F1 . #x4F63)
                (#x8FB0F2 . #x4F6A)
                (#x8FB0F3 . #x4F6C)
                (#x8FB0F4 . #x4F6E)
                (#x8FB0F5 . #x4F71)
                (#x8FB0F6 . #x4F77)
                (#x8FB0F7 . #x4F78)
                (#x8FB0F8 . #x4F79)
                (#x8FB0F9 . #x4F7A)
                (#x8FB0FA . #x4F7D)
                (#x8FB0FB . #x4F7E)
                (#x8FB0FC . #x4F81)
                (#x8FB0FD . #x4F82)
                (#x8FB0FE . #x4F84)
                (#x8FB1A1 . #x4F85)
                (#x8FB1A2 . #x4F89)
                (#x8FB1A3 . #x4F8A)
                (#x8FB1A4 . #x4F8C)
                (#x8FB1A5 . #x4F8E)
                (#x8FB1A6 . #x4F90)
                (#x8FB1A7 . #x4F92)
                (#x8FB1A8 . #x4F93)
                (#x8FB1A9 . #x4F94)
                (#x8FB1AA . #x4F97)
                (#x8FB1AB . #x4F99)
                (#x8FB1AC . #x4F9A)
                (#x8FB1AD . #x4F9E)
                (#x8FB1AE . #x4F9F)
                (#x8FB1AF . #x4FB2)
                (#x8FB1B0 . #x4FB7)
                (#x8FB1B1 . #x4FB9)
                (#x8FB1B2 . #x4FBB)
                (#x8FB1B3 . #x4FBC)
                (#x8FB1B4 . #x4FBD)
                (#x8FB1B5 . #x4FBE)
                (#x8FB1B6 . #x4FC0)
                (#x8FB1B7 . #x4FC1)
                (#x8FB1B8 . #x4FC5)
                (#x8FB1B9 . #x4FC6)
                (#x8FB1BA . #x4FC8)
                (#x8FB1BB . #x4FC9)
                (#x8FB1BC . #x4FCB)
                (#x8FB1BD . #x4FCC)
                (#x8FB1BE . #x4FCD)
                (#x8FB1BF . #x4FCF)
                (#x8FB1C0 . #x4FD2)
                (#x8FB1C1 . #x4FDC)
                (#x8FB1C2 . #x4FE0)
                (#x8FB1C3 . #x4FE2)
                (#x8FB1C4 . #x4FF0)
                (#x8FB1C5 . #x4FF2)
                (#x8FB1C6 . #x4FFC)
                (#x8FB1C7 . #x4FFD)
                (#x8FB1C8 . #x4FFF)
                (#x8FB1C9 . #x5000)
                (#x8FB1CA . #x5001)
                (#x8FB1CB . #x5004)
                (#x8FB1CC . #x5007)
                (#x8FB1CD . #x500A)
                (#x8FB1CE . #x500C)
                (#x8FB1CF . #x500E)
                (#x8FB1D0 . #x5010)
                (#x8FB1D1 . #x5013)
                (#x8FB1D2 . #x5017)
                (#x8FB1D3 . #x5018)
                (#x8FB1D4 . #x501B)
                (#x8FB1D5 . #x501C)
                (#x8FB1D6 . #x501D)
                (#x8FB1D7 . #x501E)
                (#x8FB1D8 . #x5022)
                (#x8FB1D9 . #x5027)
                (#x8FB1DA . #x502E)
                (#x8FB1DB . #x5030)
                (#x8FB1DC . #x5032)
                (#x8FB1DD . #x5033)
                (#x8FB1DE . #x5035)
                (#x8FB1DF . #x5040)
                (#x8FB1E0 . #x5041)
                (#x8FB1E1 . #x5042)
                (#x8FB1E2 . #x5045)
                (#x8FB1E3 . #x5046)
                (#x8FB1E4 . #x504A)
                (#x8FB1E5 . #x504C)
                (#x8FB1E6 . #x504E)
                (#x8FB1E7 . #x5051)
                (#x8FB1E8 . #x5052)
                (#x8FB1E9 . #x5053)
                (#x8FB1EA . #x5057)
                (#x8FB1EB . #x5059)
                (#x8FB1EC . #x505F)
                (#x8FB1ED . #x5060)
                (#x8FB1EE . #x5062)
                (#x8FB1EF . #x5063)
                (#x8FB1F0 . #x5066)
                (#x8FB1F1 . #x5067)
                (#x8FB1F2 . #x506A)
                (#x8FB1F3 . #x506D)
                (#x8FB1F4 . #x5070)
                (#x8FB1F5 . #x5071)
                (#x8FB1F6 . #x503B)
                (#x8FB1F7 . #x5081)
                (#x8FB1F8 . #x5083)
                (#x8FB1F9 . #x5084)
                (#x8FB1FA . #x5086)
                (#x8FB1FB . #x508A)
                (#x8FB1FC . #x508E)
                (#x8FB1FD . #x508F)
                (#x8FB1FE . #x5090)
                (#x8FB2A1 . #x5092)
                (#x8FB2A2 . #x5093)
                (#x8FB2A3 . #x5094)
                (#x8FB2A4 . #x5096)
                (#x8FB2A5 . #x509B)
                (#x8FB2A6 . #x509C)
                (#x8FB2A7 . #x509E)
                (#x8FB2A8 . #x509F)
                (#x8FB2A9 . #x50A0)
                (#x8FB2AA . #x50A1)
                (#x8FB2AB . #x50A2)
                (#x8FB2AC . #x50AA)
                (#x8FB2AD . #x50AF)
                (#x8FB2AE . #x50B0)
                (#x8FB2AF . #x50B9)
                (#x8FB2B0 . #x50BA)
                (#x8FB2B1 . #x50BD)
                (#x8FB2B2 . #x50C0)
                (#x8FB2B3 . #x50C3)
                (#x8FB2B4 . #x50C4)
                (#x8FB2B5 . #x50C7)
                (#x8FB2B6 . #x50CC)
                (#x8FB2B7 . #x50CE)
                (#x8FB2B8 . #x50D0)
                (#x8FB2B9 . #x50D3)
                (#x8FB2BA . #x50D4)
                (#x8FB2BB . #x50D8)
                (#x8FB2BC . #x50DC)
                (#x8FB2BD . #x50DD)
                (#x8FB2BE . #x50DF)
                (#x8FB2BF . #x50E2)
                (#x8FB2C0 . #x50E4)
                (#x8FB2C1 . #x50E6)
                (#x8FB2C2 . #x50E8)
                (#x8FB2C3 . #x50E9)
                (#x8FB2C4 . #x50EF)
                (#x8FB2C5 . #x50F1)
                (#x8FB2C6 . #x50F6)
                (#x8FB2C7 . #x50FA)
                (#x8FB2C8 . #x50FE)
                (#x8FB2C9 . #x5103)
                (#x8FB2CA . #x5106)
                (#x8FB2CB . #x5107)
                (#x8FB2CC . #x5108)
                (#x8FB2CD . #x510B)
                (#x8FB2CE . #x510C)
                (#x8FB2CF . #x510D)
                (#x8FB2D0 . #x510E)
                (#x8FB2D1 . #x50F2)
                (#x8FB2D2 . #x5110)
                (#x8FB2D3 . #x5117)
                (#x8FB2D4 . #x5119)
                (#x8FB2D5 . #x511B)
                (#x8FB2D6 . #x511C)
                (#x8FB2D7 . #x511D)
                (#x8FB2D8 . #x511E)
                (#x8FB2D9 . #x5123)
                (#x8FB2DA . #x5127)
                (#x8FB2DB . #x5128)
                (#x8FB2DC . #x512C)
                (#x8FB2DD . #x512D)
                (#x8FB2DE . #x512F)
                (#x8FB2DF . #x5131)
                (#x8FB2E0 . #x5133)
                (#x8FB2E1 . #x5134)
                (#x8FB2E2 . #x5135)
                (#x8FB2E3 . #x5138)
                (#x8FB2E4 . #x5139)
                (#x8FB2E5 . #x5142)
                (#x8FB2E6 . #x514A)
                (#x8FB2E7 . #x514F)
                (#x8FB2E8 . #x5153)
                (#x8FB2E9 . #x5155)
                (#x8FB2EA . #x5157)
                (#x8FB2EB . #x5158)
                (#x8FB2EC . #x515F)
                (#x8FB2ED . #x5164)
                (#x8FB2EE . #x5166)
                (#x8FB2EF . #x517E)
                (#x8FB2F0 . #x5183)
                (#x8FB2F1 . #x5184)
                (#x8FB2F2 . #x518B)
                (#x8FB2F3 . #x518E)
                (#x8FB2F4 . #x5198)
                (#x8FB2F5 . #x519D)
                (#x8FB2F6 . #x51A1)
                (#x8FB2F7 . #x51A3)
                (#x8FB2F8 . #x51AD)
                (#x8FB2F9 . #x51B8)
                (#x8FB2FA . #x51BA)
                (#x8FB2FB . #x51BC)
                (#x8FB2FC . #x51BE)
                (#x8FB2FD . #x51BF)
                (#x8FB2FE . #x51C2)
                (#x8FB3A1 . #x51C8)
                (#x8FB3A2 . #x51CF)
                (#x8FB3A3 . #x51D1)
                (#x8FB3A4 . #x51D2)
                (#x8FB3A5 . #x51D3)
                (#x8FB3A6 . #x51D5)
                (#x8FB3A7 . #x51D8)
                (#x8FB3A8 . #x51DE)
                (#x8FB3A9 . #x51E2)
                (#x8FB3AA . #x51E5)
                (#x8FB3AB . #x51EE)
                (#x8FB3AC . #x51F2)
                (#x8FB3AD . #x51F3)
                (#x8FB3AE . #x51F4)
                (#x8FB3AF . #x51F7)
                (#x8FB3B0 . #x5201)
                (#x8FB3B1 . #x5202)
                (#x8FB3B2 . #x5205)
                (#x8FB3B3 . #x5212)
                (#x8FB3B4 . #x5213)
                (#x8FB3B5 . #x5215)
                (#x8FB3B6 . #x5216)
                (#x8FB3B7 . #x5218)
                (#x8FB3B8 . #x5222)
                (#x8FB3B9 . #x5228)
                (#x8FB3BA . #x5231)
                (#x8FB3BB . #x5232)
                (#x8FB3BC . #x5235)
                (#x8FB3BD . #x523C)
                (#x8FB3BE . #x5245)
                (#x8FB3BF . #x5249)
                (#x8FB3C0 . #x5255)
                (#x8FB3C1 . #x5257)
                (#x8FB3C2 . #x5258)
                (#x8FB3C3 . #x525A)
                (#x8FB3C4 . #x525C)
                (#x8FB3C5 . #x525F)
                (#x8FB3C6 . #x5260)
                (#x8FB3C7 . #x5261)
                (#x8FB3C8 . #x5266)
                (#x8FB3C9 . #x526E)
                (#x8FB3CA . #x5277)
                (#x8FB3CB . #x5278)
                (#x8FB3CC . #x5279)
                (#x8FB3CD . #x5280)
                (#x8FB3CE . #x5282)
                (#x8FB3CF . #x5285)
                (#x8FB3D0 . #x528A)
                (#x8FB3D1 . #x528C)
                (#x8FB3D2 . #x5293)
                (#x8FB3D3 . #x5295)
                (#x8FB3D4 . #x5296)
                (#x8FB3D5 . #x5297)
                (#x8FB3D6 . #x5298)
                (#x8FB3D7 . #x529A)
                (#x8FB3D8 . #x529C)
                (#x8FB3D9 . #x52A4)
                (#x8FB3DA . #x52A5)
                (#x8FB3DB . #x52A6)
                (#x8FB3DC . #x52A7)
                (#x8FB3DD . #x52AF)
                (#x8FB3DE . #x52B0)
                (#x8FB3DF . #x52B6)
                (#x8FB3E0 . #x52B7)
                (#x8FB3E1 . #x52B8)
                (#x8FB3E2 . #x52BA)
                (#x8FB3E3 . #x52BB)
                (#x8FB3E4 . #x52BD)
                (#x8FB3E5 . #x52C0)
                (#x8FB3E6 . #x52C4)
                (#x8FB3E7 . #x52C6)
                (#x8FB3E8 . #x52C8)
                (#x8FB3E9 . #x52CC)
                (#x8FB3EA . #x52CF)
                (#x8FB3EB . #x52D1)
                (#x8FB3EC . #x52D4)
                (#x8FB3ED . #x52D6)
                (#x8FB3EE . #x52DB)
                (#x8FB3EF . #x52DC)
                (#x8FB3F0 . #x52E1)
                (#x8FB3F1 . #x52E5)
                (#x8FB3F2 . #x52E8)
                (#x8FB3F3 . #x52E9)
                (#x8FB3F4 . #x52EA)
                (#x8FB3F5 . #x52EC)
                (#x8FB3F6 . #x52F0)
                (#x8FB3F7 . #x52F1)
                (#x8FB3F8 . #x52F4)
                (#x8FB3F9 . #x52F6)
                (#x8FB3FA . #x52F7)
                (#x8FB3FB . #x5300)
                (#x8FB3FC . #x5303)
                (#x8FB3FD . #x530A)
                (#x8FB3FE . #x530B)
                (#x8FB4A1 . #x530C)
                (#x8FB4A2 . #x5311)
                (#x8FB4A3 . #x5313)
                (#x8FB4A4 . #x5318)
                (#x8FB4A5 . #x531B)
                (#x8FB4A6 . #x531C)
                (#x8FB4A7 . #x531E)
                (#x8FB4A8 . #x531F)
                (#x8FB4A9 . #x5325)
                (#x8FB4AA . #x5327)
                (#x8FB4AB . #x5328)
                (#x8FB4AC . #x5329)
                (#x8FB4AD . #x532B)
                (#x8FB4AE . #x532C)
                (#x8FB4AF . #x532D)
                (#x8FB4B0 . #x5330)
                (#x8FB4B1 . #x5332)
                (#x8FB4B2 . #x5335)
                (#x8FB4B3 . #x533C)
                (#x8FB4B4 . #x533D)
                (#x8FB4B5 . #x533E)
                (#x8FB4B6 . #x5342)
                (#x8FB4B7 . #x534C)
                (#x8FB4B8 . #x534B)
                (#x8FB4B9 . #x5359)
                (#x8FB4BA . #x535B)
                (#x8FB4BB . #x5361)
                (#x8FB4BC . #x5363)
                (#x8FB4BD . #x5365)
                (#x8FB4BE . #x536C)
                (#x8FB4BF . #x536D)
                (#x8FB4C0 . #x5372)
                (#x8FB4C1 . #x5379)
                (#x8FB4C2 . #x537E)
                (#x8FB4C3 . #x5383)
                (#x8FB4C4 . #x5387)
                (#x8FB4C5 . #x5388)
                (#x8FB4C6 . #x538E)
                (#x8FB4C7 . #x5393)
                (#x8FB4C8 . #x5394)
                (#x8FB4C9 . #x5399)
                (#x8FB4CA . #x539D)
                (#x8FB4CB . #x53A1)
                (#x8FB4CC . #x53A4)
                (#x8FB4CD . #x53AA)
                (#x8FB4CE . #x53AB)
                (#x8FB4CF . #x53AF)
                (#x8FB4D0 . #x53B2)
                (#x8FB4D1 . #x53B4)
                (#x8FB4D2 . #x53B5)
                (#x8FB4D3 . #x53B7)
                (#x8FB4D4 . #x53B8)
                (#x8FB4D5 . #x53BA)
                (#x8FB4D6 . #x53BD)
                (#x8FB4D7 . #x53C0)
                (#x8FB4D8 . #x53C5)
                (#x8FB4D9 . #x53CF)
                (#x8FB4DA . #x53D2)
                (#x8FB4DB . #x53D3)
                (#x8FB4DC . #x53D5)
                (#x8FB4DD . #x53DA)
                (#x8FB4DE . #x53DD)
                (#x8FB4DF . #x53DE)
                (#x8FB4E0 . #x53E0)
                (#x8FB4E1 . #x53E6)
                (#x8FB4E2 . #x53E7)
                (#x8FB4E3 . #x53F5)
                (#x8FB4E4 . #x5402)
                (#x8FB4E5 . #x5413)
                (#x8FB4E6 . #x541A)
                (#x8FB4E7 . #x5421)
                (#x8FB4E8 . #x5427)
                (#x8FB4E9 . #x5428)
                (#x8FB4EA . #x542A)
                (#x8FB4EB . #x542F)
                (#x8FB4EC . #x5431)
                (#x8FB4ED . #x5434)
                (#x8FB4EE . #x5435)
                (#x8FB4EF . #x5443)
                (#x8FB4F0 . #x5444)
                (#x8FB4F1 . #x5447)
                (#x8FB4F2 . #x544D)
                (#x8FB4F3 . #x544F)
                (#x8FB4F4 . #x545E)
                (#x8FB4F5 . #x5462)
                (#x8FB4F6 . #x5464)
                (#x8FB4F7 . #x5466)
                (#x8FB4F8 . #x5467)
                (#x8FB4F9 . #x5469)
                (#x8FB4FA . #x546B)
                (#x8FB4FB . #x546D)
                (#x8FB4FC . #x546E)
                (#x8FB4FD . #x5474)
                (#x8FB4FE . #x547F)
                (#x8FB5A1 . #x5481)
                (#x8FB5A2 . #x5483)
                (#x8FB5A3 . #x5485)
                (#x8FB5A4 . #x5488)
                (#x8FB5A5 . #x5489)
                (#x8FB5A6 . #x548D)
                (#x8FB5A7 . #x5491)
                (#x8FB5A8 . #x5495)
                (#x8FB5A9 . #x5496)
                (#x8FB5AA . #x549C)
                (#x8FB5AB . #x549F)
                (#x8FB5AC . #x54A1)
                (#x8FB5AD . #x54A6)
                (#x8FB5AE . #x54A7)
                (#x8FB5AF . #x54A9)
                (#x8FB5B0 . #x54AA)
                (#x8FB5B1 . #x54AD)
                (#x8FB5B2 . #x54AE)
                (#x8FB5B3 . #x54B1)
                (#x8FB5B4 . #x54B7)
                (#x8FB5B5 . #x54B9)
                (#x8FB5B6 . #x54BA)
                (#x8FB5B7 . #x54BB)
                (#x8FB5B8 . #x54BF)
                (#x8FB5B9 . #x54C6)
                (#x8FB5BA . #x54CA)
                (#x8FB5BB . #x54CD)
                (#x8FB5BC . #x54CE)
                (#x8FB5BD . #x54E0)
                (#x8FB5BE . #x54EA)
                (#x8FB5BF . #x54EC)
                (#x8FB5C0 . #x54EF)
                (#x8FB5C1 . #x54F6)
                (#x8FB5C2 . #x54FC)
                (#x8FB5C3 . #x54FE)
                (#x8FB5C4 . #x54FF)
                (#x8FB5C5 . #x5500)
                (#x8FB5C6 . #x5501)
                (#x8FB5C7 . #x5505)
                (#x8FB5C8 . #x5508)
                (#x8FB5C9 . #x5509)
                (#x8FB5CA . #x550C)
                (#x8FB5CB . #x550D)
                (#x8FB5CC . #x550E)
                (#x8FB5CD . #x5515)
                (#x8FB5CE . #x552A)
                (#x8FB5CF . #x552B)
                (#x8FB5D0 . #x5532)
                (#x8FB5D1 . #x5535)
                (#x8FB5D2 . #x5536)
                (#x8FB5D3 . #x553B)
                (#x8FB5D4 . #x553C)
                (#x8FB5D5 . #x553D)
                (#x8FB5D6 . #x5541)
                (#x8FB5D7 . #x5547)
                (#x8FB5D8 . #x5549)
                (#x8FB5D9 . #x554A)
                (#x8FB5DA . #x554D)
                (#x8FB5DB . #x5550)
                (#x8FB5DC . #x5551)
                (#x8FB5DD . #x5558)
                (#x8FB5DE . #x555A)
                (#x8FB5DF . #x555B)
                (#x8FB5E0 . #x555E)
                (#x8FB5E1 . #x5560)
                (#x8FB5E2 . #x5561)
                (#x8FB5E3 . #x5564)
                (#x8FB5E4 . #x5566)
                (#x8FB5E5 . #x557F)
                (#x8FB5E6 . #x5581)
                (#x8FB5E7 . #x5582)
                (#x8FB5E8 . #x5586)
                (#x8FB5E9 . #x5588)
                (#x8FB5EA . #x558E)
                (#x8FB5EB . #x558F)
                (#x8FB5EC . #x5591)
                (#x8FB5ED . #x5592)
                (#x8FB5EE . #x5593)
                (#x8FB5EF . #x5594)
                (#x8FB5F0 . #x5597)
                (#x8FB5F1 . #x55A3)
                (#x8FB5F2 . #x55A4)
                (#x8FB5F3 . #x55AD)
                (#x8FB5F4 . #x55B2)
                (#x8FB5F5 . #x55BF)
                (#x8FB5F6 . #x55C1)
                (#x8FB5F7 . #x55C3)
                (#x8FB5F8 . #x55C6)
                (#x8FB5F9 . #x55C9)
                (#x8FB5FA . #x55CB)
                (#x8FB5FB . #x55CC)
                (#x8FB5FC . #x55CE)
                (#x8FB5FD . #x55D1)
                (#x8FB5FE . #x55D2)
                (#x8FB6A1 . #x55D3)
                (#x8FB6A2 . #x55D7)
                (#x8FB6A3 . #x55D8)
                (#x8FB6A4 . #x55DB)
                (#x8FB6A5 . #x55DE)
                (#x8FB6A6 . #x55E2)
                (#x8FB6A7 . #x55E9)
                (#x8FB6A8 . #x55F6)
                (#x8FB6A9 . #x55FF)
                (#x8FB6AA . #x5605)
                (#x8FB6AB . #x5608)
                (#x8FB6AC . #x560A)
                (#x8FB6AD . #x560D)
                (#x8FB6AE . #x560E)
                (#x8FB6AF . #x560F)
                (#x8FB6B0 . #x5610)
                (#x8FB6B1 . #x5611)
                (#x8FB6B2 . #x5612)
                (#x8FB6B3 . #x5619)
                (#x8FB6B4 . #x562C)
                (#x8FB6B5 . #x5630)
                (#x8FB6B6 . #x5633)
                (#x8FB6B7 . #x5635)
                (#x8FB6B8 . #x5637)
                (#x8FB6B9 . #x5639)
                (#x8FB6BA . #x563B)
                (#x8FB6BB . #x563C)
                (#x8FB6BC . #x563D)
                (#x8FB6BD . #x563F)
                (#x8FB6BE . #x5640)
                (#x8FB6BF . #x5641)
                (#x8FB6C0 . #x5643)
                (#x8FB6C1 . #x5644)
                (#x8FB6C2 . #x5646)
                (#x8FB6C3 . #x5649)
                (#x8FB6C4 . #x564B)
                (#x8FB6C5 . #x564D)
                (#x8FB6C6 . #x564F)
                (#x8FB6C7 . #x5654)
                (#x8FB6C8 . #x565E)
                (#x8FB6C9 . #x5660)
                (#x8FB6CA . #x5661)
                (#x8FB6CB . #x5662)
                (#x8FB6CC . #x5663)
                (#x8FB6CD . #x5666)
                (#x8FB6CE . #x5669)
                (#x8FB6CF . #x566D)
                (#x8FB6D0 . #x566F)
                (#x8FB6D1 . #x5671)
                (#x8FB6D2 . #x5672)
                (#x8FB6D3 . #x5675)
                (#x8FB6D4 . #x5684)
                (#x8FB6D5 . #x5685)
                (#x8FB6D6 . #x5688)
                (#x8FB6D7 . #x568B)
                (#x8FB6D8 . #x568C)
                (#x8FB6D9 . #x5695)
                (#x8FB6DA . #x5699)
                (#x8FB6DB . #x569A)
                (#x8FB6DC . #x569D)
                (#x8FB6DD . #x569E)
                (#x8FB6DE . #x569F)
                (#x8FB6DF . #x56A6)
                (#x8FB6E0 . #x56A7)
                (#x8FB6E1 . #x56A8)
                (#x8FB6E2 . #x56A9)
                (#x8FB6E3 . #x56AB)
                (#x8FB6E4 . #x56AC)
                (#x8FB6E5 . #x56AD)
                (#x8FB6E6 . #x56B1)
                (#x8FB6E7 . #x56B3)
                (#x8FB6E8 . #x56B7)
                (#x8FB6E9 . #x56BE)
                (#x8FB6EA . #x56C5)
                (#x8FB6EB . #x56C9)
                (#x8FB6EC . #x56CA)
                (#x8FB6ED . #x56CB)
                (#x8FB6EE . #x56CF)
                (#x8FB6EF . #x56D0)
                (#x8FB6F0 . #x56CC)
                (#x8FB6F1 . #x56CD)
                (#x8FB6F2 . #x56D9)
                (#x8FB6F3 . #x56DC)
                (#x8FB6F4 . #x56DD)
                (#x8FB6F5 . #x56DF)
                (#x8FB6F6 . #x56E1)
                (#x8FB6F7 . #x56E4)
                (#x8FB6F8 . #x56E5)
                (#x8FB6F9 . #x56E6)
                (#x8FB6FA . #x56E7)
                (#x8FB6FB . #x56E8)
                (#x8FB6FC . #x56F1)
                (#x8FB6FD . #x56EB)
                (#x8FB6FE . #x56ED)
                (#x8FB7A1 . #x56F6)
                (#x8FB7A2 . #x56F7)
                (#x8FB7A3 . #x5701)
                (#x8FB7A4 . #x5702)
                (#x8FB7A5 . #x5707)
                (#x8FB7A6 . #x570A)
                (#x8FB7A7 . #x570C)
                (#x8FB7A8 . #x5711)
                (#x8FB7A9 . #x5715)
                (#x8FB7AA . #x571A)
                (#x8FB7AB . #x571B)
                (#x8FB7AC . #x571D)
                (#x8FB7AD . #x5720)
                (#x8FB7AE . #x5722)
                (#x8FB7AF . #x5723)
                (#x8FB7B0 . #x5724)
                (#x8FB7B1 . #x5725)
                (#x8FB7B2 . #x5729)
                (#x8FB7B3 . #x572A)
                (#x8FB7B4 . #x572C)
                (#x8FB7B5 . #x572E)
                (#x8FB7B6 . #x572F)
                (#x8FB7B7 . #x5733)
                (#x8FB7B8 . #x5734)
                (#x8FB7B9 . #x573D)
                (#x8FB7BA . #x573E)
                (#x8FB7BB . #x573F)
                (#x8FB7BC . #x5745)
                (#x8FB7BD . #x5746)
                (#x8FB7BE . #x574C)
                (#x8FB7BF . #x574D)
                (#x8FB7C0 . #x5752)
                (#x8FB7C1 . #x5762)
                (#x8FB7C2 . #x5765)
                (#x8FB7C3 . #x5767)
                (#x8FB7C4 . #x5768)
                (#x8FB7C5 . #x576B)
                (#x8FB7C6 . #x576D)
                (#x8FB7C7 . #x576E)
                (#x8FB7C8 . #x576F)
                (#x8FB7C9 . #x5770)
                (#x8FB7CA . #x5771)
                (#x8FB7CB . #x5773)
                (#x8FB7CC . #x5774)
                (#x8FB7CD . #x5775)
                (#x8FB7CE . #x5777)
                (#x8FB7CF . #x5779)
                (#x8FB7D0 . #x577A)
                (#x8FB7D1 . #x577B)
                (#x8FB7D2 . #x577C)
                (#x8FB7D3 . #x577E)
                (#x8FB7D4 . #x5781)
                (#x8FB7D5 . #x5783)
                (#x8FB7D6 . #x578C)
                (#x8FB7D7 . #x5794)
                (#x8FB7D8 . #x5797)
                (#x8FB7D9 . #x5799)
                (#x8FB7DA . #x579A)
                (#x8FB7DB . #x579C)
                (#x8FB7DC . #x579D)
                (#x8FB7DD . #x579E)
                (#x8FB7DE . #x579F)
                (#x8FB7DF . #x57A1)
                (#x8FB7E0 . #x5795)
                (#x8FB7E1 . #x57A7)
                (#x8FB7E2 . #x57A8)
                (#x8FB7E3 . #x57A9)
                (#x8FB7E4 . #x57AC)
                (#x8FB7E5 . #x57B8)
                (#x8FB7E6 . #x57BD)
                (#x8FB7E7 . #x57C7)
                (#x8FB7E8 . #x57C8)
                (#x8FB7E9 . #x57CC)
                (#x8FB7EA . #x57CF)
                (#x8FB7EB . #x57D5)
                (#x8FB7EC . #x57DD)
                (#x8FB7ED . #x57DE)
                (#x8FB7EE . #x57E4)
                (#x8FB7EF . #x57E6)
                (#x8FB7F0 . #x57E7)
                (#x8FB7F1 . #x57E9)
                (#x8FB7F2 . #x57ED)
                (#x8FB7F3 . #x57F0)
                (#x8FB7F4 . #x57F5)
                (#x8FB7F5 . #x57F6)
                (#x8FB7F6 . #x57F8)
                (#x8FB7F7 . #x57FD)
                (#x8FB7F8 . #x57FE)
                (#x8FB7F9 . #x57FF)
                (#x8FB7FA . #x5803)
                (#x8FB7FB . #x5804)
                (#x8FB7FC . #x5808)
                (#x8FB7FD . #x5809)
                (#x8FB7FE . #x57E1)
                (#x8FB8A1 . #x580C)
                (#x8FB8A2 . #x580D)
                (#x8FB8A3 . #x581B)
                (#x8FB8A4 . #x581E)
                (#x8FB8A5 . #x581F)
                (#x8FB8A6 . #x5820)
                (#x8FB8A7 . #x5826)
                (#x8FB8A8 . #x5827)
                (#x8FB8A9 . #x582D)
                (#x8FB8AA . #x5832)
                (#x8FB8AB . #x5839)
                (#x8FB8AC . #x583F)
                (#x8FB8AD . #x5849)
                (#x8FB8AE . #x584C)
                (#x8FB8AF . #x584D)
                (#x8FB8B0 . #x584F)
                (#x8FB8B1 . #x5850)
                (#x8FB8B2 . #x5855)
                (#x8FB8B3 . #x585F)
                (#x8FB8B4 . #x5861)
                (#x8FB8B5 . #x5864)
                (#x8FB8B6 . #x5867)
                (#x8FB8B7 . #x5868)
                (#x8FB8B8 . #x5878)
                (#x8FB8B9 . #x587C)
                (#x8FB8BA . #x587F)
                (#x8FB8BB . #x5880)
                (#x8FB8BC . #x5881)
                (#x8FB8BD . #x5887)
                (#x8FB8BE . #x5888)
                (#x8FB8BF . #x5889)
                (#x8FB8C0 . #x588A)
                (#x8FB8C1 . #x588C)
                (#x8FB8C2 . #x588D)
                (#x8FB8C3 . #x588F)
                (#x8FB8C4 . #x5890)
                (#x8FB8C5 . #x5894)
                (#x8FB8C6 . #x5896)
                (#x8FB8C7 . #x589D)
                (#x8FB8C8 . #x58A0)
                (#x8FB8C9 . #x58A1)
                (#x8FB8CA . #x58A2)
                (#x8FB8CB . #x58A6)
                (#x8FB8CC . #x58A9)
                (#x8FB8CD . #x58B1)
                (#x8FB8CE . #x58B2)
                (#x8FB8CF . #x58C4)
                (#x8FB8D0 . #x58BC)
                (#x8FB8D1 . #x58C2)
                (#x8FB8D2 . #x58C8)
                (#x8FB8D3 . #x58CD)
                (#x8FB8D4 . #x58CE)
                (#x8FB8D5 . #x58D0)
                (#x8FB8D6 . #x58D2)
                (#x8FB8D7 . #x58D4)
                (#x8FB8D8 . #x58D6)
                (#x8FB8D9 . #x58DA)
                (#x8FB8DA . #x58DD)
                (#x8FB8DB . #x58E1)
                (#x8FB8DC . #x58E2)
                (#x8FB8DD . #x58E9)
                (#x8FB8DE . #x58F3)
                (#x8FB8DF . #x5905)
                (#x8FB8E0 . #x5906)
                (#x8FB8E1 . #x590B)
                (#x8FB8E2 . #x590C)
                (#x8FB8E3 . #x5912)
                (#x8FB8E4 . #x5913)
                (#x8FB8E5 . #x5914)
                (#x8FB8E6 . #x8641)
                (#x8FB8E7 . #x591D)
                (#x8FB8E8 . #x5921)
                (#x8FB8E9 . #x5923)
                (#x8FB8EA . #x5924)
                (#x8FB8EB . #x5928)
                (#x8FB8EC . #x592F)
                (#x8FB8ED . #x5930)
                (#x8FB8EE . #x5933)
                (#x8FB8EF . #x5935)
                (#x8FB8F0 . #x5936)
                (#x8FB8F1 . #x593F)
                (#x8FB8F2 . #x5943)
                (#x8FB8F3 . #x5946)
                (#x8FB8F4 . #x5952)
                (#x8FB8F5 . #x5953)
                (#x8FB8F6 . #x5959)
                (#x8FB8F7 . #x595B)
                (#x8FB8F8 . #x595D)
                (#x8FB8F9 . #x595E)
                (#x8FB8FA . #x595F)
                (#x8FB8FB . #x5961)
                (#x8FB8FC . #x5963)
                (#x8FB8FD . #x596B)
                (#x8FB8FE . #x596D)
                (#x8FB9A1 . #x596F)
                (#x8FB9A2 . #x5972)
                (#x8FB9A3 . #x5975)
                (#x8FB9A4 . #x5976)
                (#x8FB9A5 . #x5979)
                (#x8FB9A6 . #x597B)
                (#x8FB9A7 . #x597C)
                (#x8FB9A8 . #x598B)
                (#x8FB9A9 . #x598C)
                (#x8FB9AA . #x598E)
                (#x8FB9AB . #x5992)
                (#x8FB9AC . #x5995)
                (#x8FB9AD . #x5997)
                (#x8FB9AE . #x599F)
                (#x8FB9AF . #x59A4)
                (#x8FB9B0 . #x59A7)
                (#x8FB9B1 . #x59AD)
                (#x8FB9B2 . #x59AE)
                (#x8FB9B3 . #x59AF)
                (#x8FB9B4 . #x59B0)
                (#x8FB9B5 . #x59B3)
                (#x8FB9B6 . #x59B7)
                (#x8FB9B7 . #x59BA)
                (#x8FB9B8 . #x59BC)
                (#x8FB9B9 . #x59C1)
                (#x8FB9BA . #x59C3)
                (#x8FB9BB . #x59C4)
                (#x8FB9BC . #x59C8)
                (#x8FB9BD . #x59CA)
                (#x8FB9BE . #x59CD)
                (#x8FB9BF . #x59D2)
                (#x8FB9C0 . #x59DD)
                (#x8FB9C1 . #x59DE)
                (#x8FB9C2 . #x59DF)
                (#x8FB9C3 . #x59E3)
                (#x8FB9C4 . #x59E4)
                (#x8FB9C5 . #x59E7)
                (#x8FB9C6 . #x59EE)
                (#x8FB9C7 . #x59EF)
                (#x8FB9C8 . #x59F1)
                (#x8FB9C9 . #x59F2)
                (#x8FB9CA . #x59F4)
                (#x8FB9CB . #x59F7)
                (#x8FB9CC . #x5A00)
                (#x8FB9CD . #x5A04)
                (#x8FB9CE . #x5A0C)
                (#x8FB9CF . #x5A0D)
                (#x8FB9D0 . #x5A0E)
                (#x8FB9D1 . #x5A12)
                (#x8FB9D2 . #x5A13)
                (#x8FB9D3 . #x5A1E)
                (#x8FB9D4 . #x5A23)
                (#x8FB9D5 . #x5A24)
                (#x8FB9D6 . #x5A27)
                (#x8FB9D7 . #x5A28)
                (#x8FB9D8 . #x5A2A)
                (#x8FB9D9 . #x5A2D)
                (#x8FB9DA . #x5A30)
                (#x8FB9DB . #x5A44)
                (#x8FB9DC . #x5A45)
                (#x8FB9DD . #x5A47)
                (#x8FB9DE . #x5A48)
                (#x8FB9DF . #x5A4C)
                (#x8FB9E0 . #x5A50)
                (#x8FB9E1 . #x5A55)
                (#x8FB9E2 . #x5A5E)
                (#x8FB9E3 . #x5A63)
                (#x8FB9E4 . #x5A65)
                (#x8FB9E5 . #x5A67)
                (#x8FB9E6 . #x5A6D)
                (#x8FB9E7 . #x5A77)
                (#x8FB9E8 . #x5A7A)
                (#x8FB9E9 . #x5A7B)
                (#x8FB9EA . #x5A7E)
                (#x8FB9EB . #x5A8B)
                (#x8FB9EC . #x5A90)
                (#x8FB9ED . #x5A93)
                (#x8FB9EE . #x5A96)
                (#x8FB9EF . #x5A99)
                (#x8FB9F0 . #x5A9C)
                (#x8FB9F1 . #x5A9E)
                (#x8FB9F2 . #x5A9F)
                (#x8FB9F3 . #x5AA0)
                (#x8FB9F4 . #x5AA2)
                (#x8FB9F5 . #x5AA7)
                (#x8FB9F6 . #x5AAC)
                (#x8FB9F7 . #x5AB1)
                (#x8FB9F8 . #x5AB2)
                (#x8FB9F9 . #x5AB3)
                (#x8FB9FA . #x5AB5)
                (#x8FB9FB . #x5AB8)
                (#x8FB9FC . #x5ABA)
                (#x8FB9FD . #x5ABB)
                (#x8FB9FE . #x5ABF)
                (#x8FBAA1 . #x5AC4)
                (#x8FBAA2 . #x5AC6)
                (#x8FBAA3 . #x5AC8)
                (#x8FBAA4 . #x5ACF)
                (#x8FBAA5 . #x5ADA)
                (#x8FBAA6 . #x5ADC)
                (#x8FBAA7 . #x5AE0)
                (#x8FBAA8 . #x5AE5)
                (#x8FBAA9 . #x5AEA)
                (#x8FBAAA . #x5AEE)
                (#x8FBAAB . #x5AF5)
                (#x8FBAAC . #x5AF6)
                (#x8FBAAD . #x5AFD)
                (#x8FBAAE . #x5B00)
                (#x8FBAAF . #x5B01)
                (#x8FBAB0 . #x5B08)
                (#x8FBAB1 . #x5B17)
                (#x8FBAB2 . #x5B34)
                (#x8FBAB3 . #x5B19)
                (#x8FBAB4 . #x5B1B)
                (#x8FBAB5 . #x5B1D)
                (#x8FBAB6 . #x5B21)
                (#x8FBAB7 . #x5B25)
                (#x8FBAB8 . #x5B2D)
                (#x8FBAB9 . #x5B38)
                (#x8FBABA . #x5B41)
                (#x8FBABB . #x5B4B)
                (#x8FBABC . #x5B4C)
                (#x8FBABD . #x5B52)
                (#x8FBABE . #x5B56)
                (#x8FBABF . #x5B5E)
                (#x8FBAC0 . #x5B68)
                (#x8FBAC1 . #x5B6E)
                (#x8FBAC2 . #x5B6F)
                (#x8FBAC3 . #x5B7C)
                (#x8FBAC4 . #x5B7D)
                (#x8FBAC5 . #x5B7E)
                (#x8FBAC6 . #x5B7F)
                (#x8FBAC7 . #x5B81)
                (#x8FBAC8 . #x5B84)
                (#x8FBAC9 . #x5B86)
                (#x8FBACA . #x5B8A)
                (#x8FBACB . #x5B8E)
                (#x8FBACC . #x5B90)
                (#x8FBACD . #x5B91)
                (#x8FBACE . #x5B93)
                (#x8FBACF . #x5B94)
                (#x8FBAD0 . #x5B96)
                (#x8FBAD1 . #x5BA8)
                (#x8FBAD2 . #x5BA9)
                (#x8FBAD3 . #x5BAC)
                (#x8FBAD4 . #x5BAD)
                (#x8FBAD5 . #x5BAF)
                (#x8FBAD6 . #x5BB1)
                (#x8FBAD7 . #x5BB2)
                (#x8FBAD8 . #x5BB7)
                (#x8FBAD9 . #x5BBA)
                (#x8FBADA . #x5BBC)
                (#x8FBADB . #x5BC0)
                (#x8FBADC . #x5BC1)
                (#x8FBADD . #x5BCD)
                (#x8FBADE . #x5BCF)
                (#x8FBADF . #x5BD6)
                (#x8FBAE0 . #x5BD7)
                (#x8FBAE1 . #x5BD8)
                (#x8FBAE2 . #x5BD9)
                (#x8FBAE3 . #x5BDA)
                (#x8FBAE4 . #x5BE0)
                (#x8FBAE5 . #x5BEF)
                (#x8FBAE6 . #x5BF1)
                (#x8FBAE7 . #x5BF4)
                (#x8FBAE8 . #x5BFD)
                (#x8FBAE9 . #x5C0C)
                (#x8FBAEA . #x5C17)
                (#x8FBAEB . #x5C1E)
                (#x8FBAEC . #x5C1F)
                (#x8FBAED . #x5C23)
                (#x8FBAEE . #x5C26)
                (#x8FBAEF . #x5C29)
                (#x8FBAF0 . #x5C2B)
                (#x8FBAF1 . #x5C2C)
                (#x8FBAF2 . #x5C2E)
                (#x8FBAF3 . #x5C30)
                (#x8FBAF4 . #x5C32)
                (#x8FBAF5 . #x5C35)
                (#x8FBAF6 . #x5C36)
                (#x8FBAF7 . #x5C59)
                (#x8FBAF8 . #x5C5A)
                (#x8FBAF9 . #x5C5C)
                (#x8FBAFA . #x5C62)
                (#x8FBAFB . #x5C63)
                (#x8FBAFC . #x5C67)
                (#x8FBAFD . #x5C68)
                (#x8FBAFE . #x5C69)
                (#x8FBBA1 . #x5C6D)
                (#x8FBBA2 . #x5C70)
                (#x8FBBA3 . #x5C74)
                (#x8FBBA4 . #x5C75)
                (#x8FBBA5 . #x5C7A)
                (#x8FBBA6 . #x5C7B)
                (#x8FBBA7 . #x5C7C)
                (#x8FBBA8 . #x5C7D)
                (#x8FBBA9 . #x5C87)
                (#x8FBBAA . #x5C88)
                (#x8FBBAB . #x5C8A)
                (#x8FBBAC . #x5C8F)
                (#x8FBBAD . #x5C92)
                (#x8FBBAE . #x5C9D)
                (#x8FBBAF . #x5C9F)
                (#x8FBBB0 . #x5CA0)
                (#x8FBBB1 . #x5CA2)
                (#x8FBBB2 . #x5CA3)
                (#x8FBBB3 . #x5CA6)
                (#x8FBBB4 . #x5CAA)
                (#x8FBBB5 . #x5CB2)
                (#x8FBBB6 . #x5CB4)
                (#x8FBBB7 . #x5CB5)
                (#x8FBBB8 . #x5CBA)
                (#x8FBBB9 . #x5CC9)
                (#x8FBBBA . #x5CCB)
                (#x8FBBBB . #x5CD2)
                (#x8FBBBC . #x5CDD)
                (#x8FBBBD . #x5CD7)
                (#x8FBBBE . #x5CEE)
                (#x8FBBBF . #x5CF1)
                (#x8FBBC0 . #x5CF2)
                (#x8FBBC1 . #x5CF4)
                (#x8FBBC2 . #x5D01)
                (#x8FBBC3 . #x5D06)
                (#x8FBBC4 . #x5D0D)
                (#x8FBBC5 . #x5D12)
                (#x8FBBC6 . #x5D2B)
                (#x8FBBC7 . #x5D23)
                (#x8FBBC8 . #x5D24)
                (#x8FBBC9 . #x5D26)
                (#x8FBBCA . #x5D27)
                (#x8FBBCB . #x5D31)
                (#x8FBBCC . #x5D34)
                (#x8FBBCD . #x5D39)
                (#x8FBBCE . #x5D3D)
                (#x8FBBCF . #x5D3F)
                (#x8FBBD0 . #x5D42)
                (#x8FBBD1 . #x5D43)
                (#x8FBBD2 . #x5D46)
                (#x8FBBD3 . #x5D48)
                (#x8FBBD4 . #x5D55)
                (#x8FBBD5 . #x5D51)
                (#x8FBBD6 . #x5D59)
                (#x8FBBD7 . #x5D4A)
                (#x8FBBD8 . #x5D5F)
                (#x8FBBD9 . #x5D60)
                (#x8FBBDA . #x5D61)
                (#x8FBBDB . #x5D62)
                (#x8FBBDC . #x5D64)
                (#x8FBBDD . #x5D6A)
                (#x8FBBDE . #x5D6D)
                (#x8FBBDF . #x5D70)
                (#x8FBBE0 . #x5D79)
                (#x8FBBE1 . #x5D7A)
                (#x8FBBE2 . #x5D7E)
                (#x8FBBE3 . #x5D7F)
                (#x8FBBE4 . #x5D81)
                (#x8FBBE5 . #x5D83)
                (#x8FBBE6 . #x5D88)
                (#x8FBBE7 . #x5D8A)
                (#x8FBBE8 . #x5D92)
                (#x8FBBE9 . #x5D93)
                (#x8FBBEA . #x5D94)
                (#x8FBBEB . #x5D95)
                (#x8FBBEC . #x5D99)
                (#x8FBBED . #x5D9B)
                (#x8FBBEE . #x5D9F)
                (#x8FBBEF . #x5DA0)
                (#x8FBBF0 . #x5DA7)
                (#x8FBBF1 . #x5DAB)
                (#x8FBBF2 . #x5DB0)
                (#x8FBBF3 . #x5DB4)
                (#x8FBBF4 . #x5DB8)
                (#x8FBBF5 . #x5DB9)
                (#x8FBBF6 . #x5DC3)
                (#x8FBBF7 . #x5DC7)
                (#x8FBBF8 . #x5DCB)
                (#x8FBBF9 . #x5DD0)
                (#x8FBBFA . #x5DCE)
                (#x8FBBFB . #x5DD8)
                (#x8FBBFC . #x5DD9)
                (#x8FBBFD . #x5DE0)
                (#x8FBBFE . #x5DE4)
                (#x8FBCA1 . #x5DE9)
                (#x8FBCA2 . #x5DF8)
                (#x8FBCA3 . #x5DF9)
                (#x8FBCA4 . #x5E00)
                (#x8FBCA5 . #x5E07)
                (#x8FBCA6 . #x5E0D)
                (#x8FBCA7 . #x5E12)
                (#x8FBCA8 . #x5E14)
                (#x8FBCA9 . #x5E15)
                (#x8FBCAA . #x5E18)
                (#x8FBCAB . #x5E1F)
                (#x8FBCAC . #x5E20)
                (#x8FBCAD . #x5E2E)
                (#x8FBCAE . #x5E28)
                (#x8FBCAF . #x5E32)
                (#x8FBCB0 . #x5E35)
                (#x8FBCB1 . #x5E3E)
                (#x8FBCB2 . #x5E4B)
                (#x8FBCB3 . #x5E50)
                (#x8FBCB4 . #x5E49)
                (#x8FBCB5 . #x5E51)
                (#x8FBCB6 . #x5E56)
                (#x8FBCB7 . #x5E58)
                (#x8FBCB8 . #x5E5B)
                (#x8FBCB9 . #x5E5C)
                (#x8FBCBA . #x5E5E)
                (#x8FBCBB . #x5E68)
                (#x8FBCBC . #x5E6A)
                (#x8FBCBD . #x5E6B)
                (#x8FBCBE . #x5E6C)
                (#x8FBCBF . #x5E6D)
                (#x8FBCC0 . #x5E6E)
                (#x8FBCC1 . #x5E70)
                (#x8FBCC2 . #x5E80)
                (#x8FBCC3 . #x5E8B)
                (#x8FBCC4 . #x5E8E)
                (#x8FBCC5 . #x5EA2)
                (#x8FBCC6 . #x5EA4)
                (#x8FBCC7 . #x5EA5)
                (#x8FBCC8 . #x5EA8)
                (#x8FBCC9 . #x5EAA)
                (#x8FBCCA . #x5EAC)
                (#x8FBCCB . #x5EB1)
                (#x8FBCCC . #x5EB3)
                (#x8FBCCD . #x5EBD)
                (#x8FBCCE . #x5EBE)
                (#x8FBCCF . #x5EBF)
                (#x8FBCD0 . #x5EC6)
                (#x8FBCD1 . #x5ECC)
                (#x8FBCD2 . #x5ECB)
                (#x8FBCD3 . #x5ECE)
                (#x8FBCD4 . #x5ED1)
                (#x8FBCD5 . #x5ED2)
                (#x8FBCD6 . #x5ED4)
                (#x8FBCD7 . #x5ED5)
                (#x8FBCD8 . #x5EDC)
                (#x8FBCD9 . #x5EDE)
                (#x8FBCDA . #x5EE5)
                (#x8FBCDB . #x5EEB)
                (#x8FBCDC . #x5F02)
                (#x8FBCDD . #x5F06)
                (#x8FBCDE . #x5F07)
                (#x8FBCDF . #x5F08)
                (#x8FBCE0 . #x5F0E)
                (#x8FBCE1 . #x5F19)
                (#x8FBCE2 . #x5F1C)
                (#x8FBCE3 . #x5F1D)
                (#x8FBCE4 . #x5F21)
                (#x8FBCE5 . #x5F22)
                (#x8FBCE6 . #x5F23)
                (#x8FBCE7 . #x5F24)
                (#x8FBCE8 . #x5F28)
                (#x8FBCE9 . #x5F2B)
                (#x8FBCEA . #x5F2C)
                (#x8FBCEB . #x5F2E)
                (#x8FBCEC . #x5F30)
                (#x8FBCED . #x5F34)
                (#x8FBCEE . #x5F36)
                (#x8FBCEF . #x5F3B)
                (#x8FBCF0 . #x5F3D)
                (#x8FBCF1 . #x5F3F)
                (#x8FBCF2 . #x5F40)
                (#x8FBCF3 . #x5F44)
                (#x8FBCF4 . #x5F45)
                (#x8FBCF5 . #x5F47)
                (#x8FBCF6 . #x5F4D)
                (#x8FBCF7 . #x5F50)
                (#x8FBCF8 . #x5F54)
                (#x8FBCF9 . #x5F58)
                (#x8FBCFA . #x5F5B)
                (#x8FBCFB . #x5F60)
                (#x8FBCFC . #x5F63)
                (#x8FBCFD . #x5F64)
                (#x8FBCFE . #x5F67)
                (#x8FBDA1 . #x5F6F)
                (#x8FBDA2 . #x5F72)
                (#x8FBDA3 . #x5F74)
                (#x8FBDA4 . #x5F75)
                (#x8FBDA5 . #x5F78)
                (#x8FBDA6 . #x5F7A)
                (#x8FBDA7 . #x5F7D)
                (#x8FBDA8 . #x5F7E)
                (#x8FBDA9 . #x5F89)
                (#x8FBDAA . #x5F8D)
                (#x8FBDAB . #x5F8F)
                (#x8FBDAC . #x5F96)
                (#x8FBDAD . #x5F9C)
                (#x8FBDAE . #x5F9D)
                (#x8FBDAF . #x5FA2)
                (#x8FBDB0 . #x5FA7)
                (#x8FBDB1 . #x5FAB)
                (#x8FBDB2 . #x5FA4)
                (#x8FBDB3 . #x5FAC)
                (#x8FBDB4 . #x5FAF)
                (#x8FBDB5 . #x5FB0)
                (#x8FBDB6 . #x5FB1)
                (#x8FBDB7 . #x5FB8)
                (#x8FBDB8 . #x5FC4)
                (#x8FBDB9 . #x5FC7)
                (#x8FBDBA . #x5FC8)
                (#x8FBDBB . #x5FC9)
                (#x8FBDBC . #x5FCB)
                (#x8FBDBD . #x5FD0)
                (#x8FBDBE . #x5FD1)
                (#x8FBDBF . #x5FD2)
                (#x8FBDC0 . #x5FD3)
                (#x8FBDC1 . #x5FD4)
                (#x8FBDC2 . #x5FDE)
                (#x8FBDC3 . #x5FE1)
                (#x8FBDC4 . #x5FE2)
                (#x8FBDC5 . #x5FE8)
                (#x8FBDC6 . #x5FE9)
                (#x8FBDC7 . #x5FEA)
                (#x8FBDC8 . #x5FEC)
                (#x8FBDC9 . #x5FED)
                (#x8FBDCA . #x5FEE)
                (#x8FBDCB . #x5FEF)
                (#x8FBDCC . #x5FF2)
                (#x8FBDCD . #x5FF3)
                (#x8FBDCE . #x5FF6)
                (#x8FBDCF . #x5FFA)
                (#x8FBDD0 . #x5FFC)
                (#x8FBDD1 . #x6007)
                (#x8FBDD2 . #x600A)
                (#x8FBDD3 . #x600D)
                (#x8FBDD4 . #x6013)
                (#x8FBDD5 . #x6014)
                (#x8FBDD6 . #x6017)
                (#x8FBDD7 . #x6018)
                (#x8FBDD8 . #x601A)
                (#x8FBDD9 . #x601F)
                (#x8FBDDA . #x6024)
                (#x8FBDDB . #x602D)
                (#x8FBDDC . #x6033)
                (#x8FBDDD . #x6035)
                (#x8FBDDE . #x6040)
                (#x8FBDDF . #x6047)
                (#x8FBDE0 . #x6048)
                (#x8FBDE1 . #x6049)
                (#x8FBDE2 . #x604C)
                (#x8FBDE3 . #x6051)
                (#x8FBDE4 . #x6054)
                (#x8FBDE5 . #x6056)
                (#x8FBDE6 . #x6057)
                (#x8FBDE7 . #x605D)
                (#x8FBDE8 . #x6061)
                (#x8FBDE9 . #x6067)
                (#x8FBDEA . #x6071)
                (#x8FBDEB . #x607E)
                (#x8FBDEC . #x607F)
                (#x8FBDED . #x6082)
                (#x8FBDEE . #x6086)
                (#x8FBDEF . #x6088)
                (#x8FBDF0 . #x608A)
                (#x8FBDF1 . #x608E)
                (#x8FBDF2 . #x6091)
                (#x8FBDF3 . #x6093)
                (#x8FBDF4 . #x6095)
                (#x8FBDF5 . #x6098)
                (#x8FBDF6 . #x609D)
                (#x8FBDF7 . #x609E)
                (#x8FBDF8 . #x60A2)
                (#x8FBDF9 . #x60A4)
                (#x8FBDFA . #x60A5)
                (#x8FBDFB . #x60A8)
                (#x8FBDFC . #x60B0)
                (#x8FBDFD . #x60B1)
                (#x8FBDFE . #x60B7)
                (#x8FBEA1 . #x60BB)
                (#x8FBEA2 . #x60BE)
                (#x8FBEA3 . #x60C2)
                (#x8FBEA4 . #x60C4)
                (#x8FBEA5 . #x60C8)
                (#x8FBEA6 . #x60C9)
                (#x8FBEA7 . #x60CA)
                (#x8FBEA8 . #x60CB)
                (#x8FBEA9 . #x60CE)
                (#x8FBEAA . #x60CF)
                (#x8FBEAB . #x60D4)
                (#x8FBEAC . #x60D5)
                (#x8FBEAD . #x60D9)
                (#x8FBEAE . #x60DB)
                (#x8FBEAF . #x60DD)
                (#x8FBEB0 . #x60DE)
                (#x8FBEB1 . #x60E2)
                (#x8FBEB2 . #x60E5)
                (#x8FBEB3 . #x60F2)
                (#x8FBEB4 . #x60F5)
                (#x8FBEB5 . #x60F8)
                (#x8FBEB6 . #x60FC)
                (#x8FBEB7 . #x60FD)
                (#x8FBEB8 . #x6102)
                (#x8FBEB9 . #x6107)
                (#x8FBEBA . #x610A)
                (#x8FBEBB . #x610C)
                (#x8FBEBC . #x6110)
                (#x8FBEBD . #x6111)
                (#x8FBEBE . #x6112)
                (#x8FBEBF . #x6113)
                (#x8FBEC0 . #x6114)
                (#x8FBEC1 . #x6116)
                (#x8FBEC2 . #x6117)
                (#x8FBEC3 . #x6119)
                (#x8FBEC4 . #x611C)
                (#x8FBEC5 . #x611E)
                (#x8FBEC6 . #x6122)
                (#x8FBEC7 . #x612A)
                (#x8FBEC8 . #x612B)
                (#x8FBEC9 . #x6130)
                (#x8FBECA . #x6131)
                (#x8FBECB . #x6135)
                (#x8FBECC . #x6136)
                (#x8FBECD . #x6137)
                (#x8FBECE . #x6139)
                (#x8FBECF . #x6141)
                (#x8FBED0 . #x6145)
                (#x8FBED1 . #x6146)
                (#x8FBED2 . #x6149)
                (#x8FBED3 . #x615E)
                (#x8FBED4 . #x6160)
                (#x8FBED5 . #x616C)
                (#x8FBED6 . #x6172)
                (#x8FBED7 . #x6178)
                (#x8FBED8 . #x617B)
                (#x8FBED9 . #x617C)
                (#x8FBEDA . #x617F)
                (#x8FBEDB . #x6180)
                (#x8FBEDC . #x6181)
                (#x8FBEDD . #x6183)
                (#x8FBEDE . #x6184)
                (#x8FBEDF . #x618B)
                (#x8FBEE0 . #x618D)
                (#x8FBEE1 . #x6192)
                (#x8FBEE2 . #x6193)
                (#x8FBEE3 . #x6197)
                (#x8FBEE4 . #x6198)
                (#x8FBEE5 . #x619C)
                (#x8FBEE6 . #x619D)
                (#x8FBEE7 . #x619F)
                (#x8FBEE8 . #x61A0)
                (#x8FBEE9 . #x61A5)
                (#x8FBEEA . #x61A8)
                (#x8FBEEB . #x61AA)
                (#x8FBEEC . #x61AD)
                (#x8FBEED . #x61B8)
                (#x8FBEEE . #x61B9)
                (#x8FBEEF . #x61BC)
                (#x8FBEF0 . #x61C0)
                (#x8FBEF1 . #x61C1)
                (#x8FBEF2 . #x61C2)
                (#x8FBEF3 . #x61CE)
                (#x8FBEF4 . #x61CF)
                (#x8FBEF5 . #x61D5)
                (#x8FBEF6 . #x61DC)
                (#x8FBEF7 . #x61DD)
                (#x8FBEF8 . #x61DE)
                (#x8FBEF9 . #x61DF)
                (#x8FBEFA . #x61E1)
                (#x8FBEFB . #x61E2)
                (#x8FBEFC . #x61E7)
                (#x8FBEFD . #x61E9)
                (#x8FBEFE . #x61E5)
                (#x8FBFA1 . #x61EC)
                (#x8FBFA2 . #x61ED)
                (#x8FBFA3 . #x61EF)
                (#x8FBFA4 . #x6201)
                (#x8FBFA5 . #x6203)
                (#x8FBFA6 . #x6204)
                (#x8FBFA7 . #x6207)
                (#x8FBFA8 . #x6213)
                (#x8FBFA9 . #x6215)
                (#x8FBFAA . #x621C)
                (#x8FBFAB . #x6220)
                (#x8FBFAC . #x6222)
                (#x8FBFAD . #x6223)
                (#x8FBFAE . #x6227)
                (#x8FBFAF . #x6229)
                (#x8FBFB0 . #x622B)
                (#x8FBFB1 . #x6239)
                (#x8FBFB2 . #x623D)
                (#x8FBFB3 . #x6242)
                (#x8FBFB4 . #x6243)
                (#x8FBFB5 . #x6244)
                (#x8FBFB6 . #x6246)
                (#x8FBFB7 . #x624C)
                (#x8FBFB8 . #x6250)
                (#x8FBFB9 . #x6251)
                (#x8FBFBA . #x6252)
                (#x8FBFBB . #x6254)
                (#x8FBFBC . #x6256)
                (#x8FBFBD . #x625A)
                (#x8FBFBE . #x625C)
                (#x8FBFBF . #x6264)
                (#x8FBFC0 . #x626D)
                (#x8FBFC1 . #x626F)
                (#x8FBFC2 . #x6273)
                (#x8FBFC3 . #x627A)
                (#x8FBFC4 . #x627D)
                (#x8FBFC5 . #x628D)
                (#x8FBFC6 . #x628E)
                (#x8FBFC7 . #x628F)
                (#x8FBFC8 . #x6290)
                (#x8FBFC9 . #x62A6)
                (#x8FBFCA . #x62A8)
                (#x8FBFCB . #x62B3)
                (#x8FBFCC . #x62B6)
                (#x8FBFCD . #x62B7)
                (#x8FBFCE . #x62BA)
                (#x8FBFCF . #x62BE)
                (#x8FBFD0 . #x62BF)
                (#x8FBFD1 . #x62C4)
                (#x8FBFD2 . #x62CE)
                (#x8FBFD3 . #x62D5)
                (#x8FBFD4 . #x62D6)
                (#x8FBFD5 . #x62DA)
                (#x8FBFD6 . #x62EA)
                (#x8FBFD7 . #x62F2)
                (#x8FBFD8 . #x62F4)
                (#x8FBFD9 . #x62FC)
                (#x8FBFDA . #x62FD)
                (#x8FBFDB . #x6303)
                (#x8FBFDC . #x6304)
                (#x8FBFDD . #x630A)
                (#x8FBFDE . #x630B)
                (#x8FBFDF . #x630D)
                (#x8FBFE0 . #x6310)
                (#x8FBFE1 . #x6313)
                (#x8FBFE2 . #x6316)
                (#x8FBFE3 . #x6318)
                (#x8FBFE4 . #x6329)
                (#x8FBFE5 . #x632A)
                (#x8FBFE6 . #x632D)
                (#x8FBFE7 . #x6335)
                (#x8FBFE8 . #x6336)
                (#x8FBFE9 . #x6339)
                (#x8FBFEA . #x633C)
                (#x8FBFEB . #x6341)
                (#x8FBFEC . #x6342)
                (#x8FBFED . #x6343)
                (#x8FBFEE . #x6344)
                (#x8FBFEF . #x6346)
                (#x8FBFF0 . #x634A)
                (#x8FBFF1 . #x634B)
                (#x8FBFF2 . #x634E)
                (#x8FBFF3 . #x6352)
                (#x8FBFF4 . #x6353)
                (#x8FBFF5 . #x6354)
                (#x8FBFF6 . #x6358)
                (#x8FBFF7 . #x635B)
                (#x8FBFF8 . #x6365)
                (#x8FBFF9 . #x6366)
                (#x8FBFFA . #x636C)
                (#x8FBFFB . #x636D)
                (#x8FBFFC . #x6371)
                (#x8FBFFD . #x6374)
                (#x8FBFFE . #x6375)
                (#x8FC0A1 . #x6378)
                (#x8FC0A2 . #x637C)
                (#x8FC0A3 . #x637D)
                (#x8FC0A4 . #x637F)
                (#x8FC0A5 . #x6382)
                (#x8FC0A6 . #x6384)
                (#x8FC0A7 . #x6387)
                (#x8FC0A8 . #x638A)
                (#x8FC0A9 . #x6390)
                (#x8FC0AA . #x6394)
                (#x8FC0AB . #x6395)
                (#x8FC0AC . #x6399)
                (#x8FC0AD . #x639A)
                (#x8FC0AE . #x639E)
                (#x8FC0AF . #x63A4)
                (#x8FC0B0 . #x63A6)
                (#x8FC0B1 . #x63AD)
                (#x8FC0B2 . #x63AE)
                (#x8FC0B3 . #x63AF)
                (#x8FC0B4 . #x63BD)
                (#x8FC0B5 . #x63C1)
                (#x8FC0B6 . #x63C5)
                (#x8FC0B7 . #x63C8)
                (#x8FC0B8 . #x63CE)
                (#x8FC0B9 . #x63D1)
                (#x8FC0BA . #x63D3)
                (#x8FC0BB . #x63D4)
                (#x8FC0BC . #x63D5)
                (#x8FC0BD . #x63DC)
                (#x8FC0BE . #x63E0)
                (#x8FC0BF . #x63E5)
                (#x8FC0C0 . #x63EA)
                (#x8FC0C1 . #x63EC)
                (#x8FC0C2 . #x63F2)
                (#x8FC0C3 . #x63F3)
                (#x8FC0C4 . #x63F5)
                (#x8FC0C5 . #x63F8)
                (#x8FC0C6 . #x63F9)
                (#x8FC0C7 . #x6409)
                (#x8FC0C8 . #x640A)
                (#x8FC0C9 . #x6410)
                (#x8FC0CA . #x6412)
                (#x8FC0CB . #x6414)
                (#x8FC0CC . #x6418)
                (#x8FC0CD . #x641E)
                (#x8FC0CE . #x6420)
                (#x8FC0CF . #x6422)
                (#x8FC0D0 . #x6424)
                (#x8FC0D1 . #x6425)
                (#x8FC0D2 . #x6429)
                (#x8FC0D3 . #x642A)
                (#x8FC0D4 . #x642F)
                (#x8FC0D5 . #x6430)
                (#x8FC0D6 . #x6435)
                (#x8FC0D7 . #x643D)
                (#x8FC0D8 . #x643F)
                (#x8FC0D9 . #x644B)
                (#x8FC0DA . #x644F)
                (#x8FC0DB . #x6451)
                (#x8FC0DC . #x6452)
                (#x8FC0DD . #x6453)
                (#x8FC0DE . #x6454)
                (#x8FC0DF . #x645A)
                (#x8FC0E0 . #x645B)
                (#x8FC0E1 . #x645C)
                (#x8FC0E2 . #x645D)
                (#x8FC0E3 . #x645F)
                (#x8FC0E4 . #x6460)
                (#x8FC0E5 . #x6461)
                (#x8FC0E6 . #x6463)
                (#x8FC0E7 . #x646D)
                (#x8FC0E8 . #x6473)
                (#x8FC0E9 . #x6474)
                (#x8FC0EA . #x647B)
                (#x8FC0EB . #x647D)
                (#x8FC0EC . #x6485)
                (#x8FC0ED . #x6487)
                (#x8FC0EE . #x648F)
                (#x8FC0EF . #x6490)
                (#x8FC0F0 . #x6491)
                (#x8FC0F1 . #x6498)
                (#x8FC0F2 . #x6499)
                (#x8FC0F3 . #x649B)
                (#x8FC0F4 . #x649D)
                (#x8FC0F5 . #x649F)
                (#x8FC0F6 . #x64A1)
                (#x8FC0F7 . #x64A3)
                (#x8FC0F8 . #x64A6)
                (#x8FC0F9 . #x64A8)
                (#x8FC0FA . #x64AC)
                (#x8FC0FB . #x64B3)
                (#x8FC0FC . #x64BD)
                (#x8FC0FD . #x64BE)
                (#x8FC0FE . #x64BF)
                (#x8FC1A1 . #x64C4)
                (#x8FC1A2 . #x64C9)
                (#x8FC1A3 . #x64CA)
                (#x8FC1A4 . #x64CB)
                (#x8FC1A5 . #x64CC)
                (#x8FC1A6 . #x64CE)
                (#x8FC1A7 . #x64D0)
                (#x8FC1A8 . #x64D1)
                (#x8FC1A9 . #x64D5)
                (#x8FC1AA . #x64D7)
                (#x8FC1AB . #x64E4)
                (#x8FC1AC . #x64E5)
                (#x8FC1AD . #x64E9)
                (#x8FC1AE . #x64EA)
                (#x8FC1AF . #x64ED)
                (#x8FC1B0 . #x64F0)
                (#x8FC1B1 . #x64F5)
                (#x8FC1B2 . #x64F7)
                (#x8FC1B3 . #x64FB)
                (#x8FC1B4 . #x64FF)
                (#x8FC1B5 . #x6501)
                (#x8FC1B6 . #x6504)
                (#x8FC1B7 . #x6508)
                (#x8FC1B8 . #x6509)
                (#x8FC1B9 . #x650A)
                (#x8FC1BA . #x650F)
                (#x8FC1BB . #x6513)
                (#x8FC1BC . #x6514)
                (#x8FC1BD . #x6516)
                (#x8FC1BE . #x6519)
                (#x8FC1BF . #x651B)
                (#x8FC1C0 . #x651E)
                (#x8FC1C1 . #x651F)
                (#x8FC1C2 . #x6522)
                (#x8FC1C3 . #x6526)
                (#x8FC1C4 . #x6529)
                (#x8FC1C5 . #x652E)
                (#x8FC1C6 . #x6531)
                (#x8FC1C7 . #x653A)
                (#x8FC1C8 . #x653C)
                (#x8FC1C9 . #x653D)
                (#x8FC1CA . #x6543)
                (#x8FC1CB . #x6547)
                (#x8FC1CC . #x6549)
                (#x8FC1CD . #x6550)
                (#x8FC1CE . #x6552)
                (#x8FC1CF . #x6554)
                (#x8FC1D0 . #x655F)
                (#x8FC1D1 . #x6560)
                (#x8FC1D2 . #x6567)
                (#x8FC1D3 . #x656B)
                (#x8FC1D4 . #x657A)
                (#x8FC1D5 . #x657D)
                (#x8FC1D6 . #x6581)
                (#x8FC1D7 . #x6585)
                (#x8FC1D8 . #x658A)
                (#x8FC1D9 . #x6592)
                (#x8FC1DA . #x6595)
                (#x8FC1DB . #x6598)
                (#x8FC1DC . #x659D)
                (#x8FC1DD . #x65A0)
                (#x8FC1DE . #x65A3)
                (#x8FC1DF . #x65A6)
                (#x8FC1E0 . #x65AE)
                (#x8FC1E1 . #x65B2)
                (#x8FC1E2 . #x65B3)
                (#x8FC1E3 . #x65B4)
                (#x8FC1E4 . #x65BF)
                (#x8FC1E5 . #x65C2)
                (#x8FC1E6 . #x65C8)
                (#x8FC1E7 . #x65C9)
                (#x8FC1E8 . #x65CE)
                (#x8FC1E9 . #x65D0)
                (#x8FC1EA . #x65D4)
                (#x8FC1EB . #x65D6)
                (#x8FC1EC . #x65D8)
                (#x8FC1ED . #x65DF)
                (#x8FC1EE . #x65F0)
                (#x8FC1EF . #x65F2)
                (#x8FC1F0 . #x65F4)
                (#x8FC1F1 . #x65F5)
                (#x8FC1F2 . #x65F9)
                (#x8FC1F3 . #x65FE)
                (#x8FC1F4 . #x65FF)
                (#x8FC1F5 . #x6600)
                (#x8FC1F6 . #x6604)
                (#x8FC1F7 . #x6608)
                (#x8FC1F8 . #x6609)
                (#x8FC1F9 . #x660D)
                (#x8FC1FA . #x6611)
                (#x8FC1FB . #x6612)
                (#x8FC1FC . #x6615)
                (#x8FC1FD . #x6616)
                (#x8FC1FE . #x661D)
                (#x8FC2A1 . #x661E)
                (#x8FC2A2 . #x6621)
                (#x8FC2A3 . #x6622)
                (#x8FC2A4 . #x6623)
                (#x8FC2A5 . #x6624)
                (#x8FC2A6 . #x6626)
                (#x8FC2A7 . #x6629)
                (#x8FC2A8 . #x662A)
                (#x8FC2A9 . #x662B)
                (#x8FC2AA . #x662C)
                (#x8FC2AB . #x662E)
                (#x8FC2AC . #x6630)
                (#x8FC2AD . #x6631)
                (#x8FC2AE . #x6633)
                (#x8FC2AF . #x6639)
                (#x8FC2B0 . #x6637)
                (#x8FC2B1 . #x6640)
                (#x8FC2B2 . #x6645)
                (#x8FC2B3 . #x6646)
                (#x8FC2B4 . #x664A)
                (#x8FC2B5 . #x664C)
                (#x8FC2B6 . #x6651)
                (#x8FC2B7 . #x664E)
                (#x8FC2B8 . #x6657)
                (#x8FC2B9 . #x6658)
                (#x8FC2BA . #x6659)
                (#x8FC2BB . #x665B)
                (#x8FC2BC . #x665C)
                (#x8FC2BD . #x6660)
                (#x8FC2BE . #x6661)
                (#x8FC2BF . #x66FB)
                (#x8FC2C0 . #x666A)
                (#x8FC2C1 . #x666B)
                (#x8FC2C2 . #x666C)
                (#x8FC2C3 . #x667E)
                (#x8FC2C4 . #x6673)
                (#x8FC2C5 . #x6675)
                (#x8FC2C6 . #x667F)
                (#x8FC2C7 . #x6677)
                (#x8FC2C8 . #x6678)
                (#x8FC2C9 . #x6679)
                (#x8FC2CA . #x667B)
                (#x8FC2CB . #x6680)
                (#x8FC2CC . #x667C)
                (#x8FC2CD . #x668B)
                (#x8FC2CE . #x668C)
                (#x8FC2CF . #x668D)
                (#x8FC2D0 . #x6690)
                (#x8FC2D1 . #x6692)
                (#x8FC2D2 . #x6699)
                (#x8FC2D3 . #x669A)
                (#x8FC2D4 . #x669B)
                (#x8FC2D5 . #x669C)
                (#x8FC2D6 . #x669F)
                (#x8FC2D7 . #x66A0)
                (#x8FC2D8 . #x66A4)
                (#x8FC2D9 . #x66AD)
                (#x8FC2DA . #x66B1)
                (#x8FC2DB . #x66B2)
                (#x8FC2DC . #x66B5)
                (#x8FC2DD . #x66BB)
                (#x8FC2DE . #x66BF)
                (#x8FC2DF . #x66C0)
                (#x8FC2E0 . #x66C2)
                (#x8FC2E1 . #x66C3)
                (#x8FC2E2 . #x66C8)
                (#x8FC2E3 . #x66CC)
                (#x8FC2E4 . #x66CE)
                (#x8FC2E5 . #x66CF)
                (#x8FC2E6 . #x66D4)
                (#x8FC2E7 . #x66DB)
                (#x8FC2E8 . #x66DF)
                (#x8FC2E9 . #x66E8)
                (#x8FC2EA . #x66EB)
                (#x8FC2EB . #x66EC)
                (#x8FC2EC . #x66EE)
                (#x8FC2ED . #x66FA)
                (#x8FC2EE . #x6705)
                (#x8FC2EF . #x6707)
                (#x8FC2F0 . #x670E)
                (#x8FC2F1 . #x6713)
                (#x8FC2F2 . #x6719)
                (#x8FC2F3 . #x671C)
                (#x8FC2F4 . #x6720)
                (#x8FC2F5 . #x6722)
                (#x8FC2F6 . #x6733)
                (#x8FC2F7 . #x673E)
                (#x8FC2F8 . #x6745)
                (#x8FC2F9 . #x6747)
                (#x8FC2FA . #x6748)
                (#x8FC2FB . #x674C)
                (#x8FC2FC . #x6754)
                (#x8FC2FD . #x6755)
                (#x8FC2FE . #x675D)
                (#x8FC3A1 . #x6766)
                (#x8FC3A2 . #x676C)
                (#x8FC3A3 . #x676E)
                (#x8FC3A4 . #x6774)
                (#x8FC3A5 . #x6776)
                (#x8FC3A6 . #x677B)
                (#x8FC3A7 . #x6781)
                (#x8FC3A8 . #x6784)
                (#x8FC3A9 . #x678E)
                (#x8FC3AA . #x678F)
                (#x8FC3AB . #x6791)
                (#x8FC3AC . #x6793)
                (#x8FC3AD . #x6796)
                (#x8FC3AE . #x6798)
                (#x8FC3AF . #x6799)
                (#x8FC3B0 . #x679B)
                (#x8FC3B1 . #x67B0)
                (#x8FC3B2 . #x67B1)
                (#x8FC3B3 . #x67B2)
                (#x8FC3B4 . #x67B5)
                (#x8FC3B5 . #x67BB)
                (#x8FC3B6 . #x67BC)
                (#x8FC3B7 . #x67BD)
                (#x8FC3B8 . #x67F9)
                (#x8FC3B9 . #x67C0)
                (#x8FC3BA . #x67C2)
                (#x8FC3BB . #x67C3)
                (#x8FC3BC . #x67C5)
                (#x8FC3BD . #x67C8)
                (#x8FC3BE . #x67C9)
                (#x8FC3BF . #x67D2)
                (#x8FC3C0 . #x67D7)
                (#x8FC3C1 . #x67D9)
                (#x8FC3C2 . #x67DC)
                (#x8FC3C3 . #x67E1)
                (#x8FC3C4 . #x67E6)
                (#x8FC3C5 . #x67F0)
                (#x8FC3C6 . #x67F2)
                (#x8FC3C7 . #x67F6)
                (#x8FC3C8 . #x67F7)
                (#x8FC3C9 . #x6852)
                (#x8FC3CA . #x6814)
                (#x8FC3CB . #x6819)
                (#x8FC3CC . #x681D)
                (#x8FC3CD . #x681F)
                (#x8FC3CE . #x6828)
                (#x8FC3CF . #x6827)
                (#x8FC3D0 . #x682C)
                (#x8FC3D1 . #x682D)
                (#x8FC3D2 . #x682F)
                (#x8FC3D3 . #x6830)
                (#x8FC3D4 . #x6831)
                (#x8FC3D5 . #x6833)
                (#x8FC3D6 . #x683B)
                (#x8FC3D7 . #x683F)
                (#x8FC3D8 . #x6844)
                (#x8FC3D9 . #x6845)
                (#x8FC3DA . #x684A)
                (#x8FC3DB . #x684C)
                (#x8FC3DC . #x6855)
                (#x8FC3DD . #x6857)
                (#x8FC3DE . #x6858)
                (#x8FC3DF . #x685B)
                (#x8FC3E0 . #x686B)
                (#x8FC3E1 . #x686E)
                (#x8FC3E2 . #x686F)
                (#x8FC3E3 . #x6870)
                (#x8FC3E4 . #x6871)
                (#x8FC3E5 . #x6872)
                (#x8FC3E6 . #x6875)
                (#x8FC3E7 . #x6879)
                (#x8FC3E8 . #x687A)
                (#x8FC3E9 . #x687B)
                (#x8FC3EA . #x687C)
                (#x8FC3EB . #x6882)
                (#x8FC3EC . #x6884)
                (#x8FC3ED . #x6886)
                (#x8FC3EE . #x6888)
                (#x8FC3EF . #x6896)
                (#x8FC3F0 . #x6898)
                (#x8FC3F1 . #x689A)
                (#x8FC3F2 . #x689C)
                (#x8FC3F3 . #x68A1)
                (#x8FC3F4 . #x68A3)
                (#x8FC3F5 . #x68A5)
                (#x8FC3F6 . #x68A9)
                (#x8FC3F7 . #x68AA)
                (#x8FC3F8 . #x68AE)
                (#x8FC3F9 . #x68B2)
                (#x8FC3FA . #x68BB)
                (#x8FC3FB . #x68C5)
                (#x8FC3FC . #x68C8)
                (#x8FC3FD . #x68CC)
                (#x8FC3FE . #x68CF)
                (#x8FC4A1 . #x68D0)
                (#x8FC4A2 . #x68D1)
                (#x8FC4A3 . #x68D3)
                (#x8FC4A4 . #x68D6)
                (#x8FC4A5 . #x68D9)
                (#x8FC4A6 . #x68DC)
                (#x8FC4A7 . #x68DD)
                (#x8FC4A8 . #x68E5)
                (#x8FC4A9 . #x68E8)
                (#x8FC4AA . #x68EA)
                (#x8FC4AB . #x68EB)
                (#x8FC4AC . #x68EC)
                (#x8FC4AD . #x68ED)
                (#x8FC4AE . #x68F0)
                (#x8FC4AF . #x68F1)
                (#x8FC4B0 . #x68F5)
                (#x8FC4B1 . #x68F6)
                (#x8FC4B2 . #x68FB)
                (#x8FC4B3 . #x68FC)
                (#x8FC4B4 . #x68FD)
                (#x8FC4B5 . #x6906)
                (#x8FC4B6 . #x6909)
                (#x8FC4B7 . #x690A)
                (#x8FC4B8 . #x6910)
                (#x8FC4B9 . #x6911)
                (#x8FC4BA . #x6913)
                (#x8FC4BB . #x6916)
                (#x8FC4BC . #x6917)
                (#x8FC4BD . #x6931)
                (#x8FC4BE . #x6933)
                (#x8FC4BF . #x6935)
                (#x8FC4C0 . #x6938)
                (#x8FC4C1 . #x693B)
                (#x8FC4C2 . #x6942)
                (#x8FC4C3 . #x6945)
                (#x8FC4C4 . #x6949)
                (#x8FC4C5 . #x694E)
                (#x8FC4C6 . #x6957)
                (#x8FC4C7 . #x695B)
                (#x8FC4C8 . #x6963)
                (#x8FC4C9 . #x6964)
                (#x8FC4CA . #x6965)
                (#x8FC4CB . #x6966)
                (#x8FC4CC . #x6968)
                (#x8FC4CD . #x6969)
                (#x8FC4CE . #x696C)
                (#x8FC4CF . #x6970)
                (#x8FC4D0 . #x6971)
                (#x8FC4D1 . #x6972)
                (#x8FC4D2 . #x697A)
                (#x8FC4D3 . #x697B)
                (#x8FC4D4 . #x697F)
                (#x8FC4D5 . #x6980)
                (#x8FC4D6 . #x698D)
                (#x8FC4D7 . #x6992)
                (#x8FC4D8 . #x6996)
                (#x8FC4D9 . #x6998)
                (#x8FC4DA . #x69A1)
                (#x8FC4DB . #x69A5)
                (#x8FC4DC . #x69A6)
                (#x8FC4DD . #x69A8)
                (#x8FC4DE . #x69AB)
                (#x8FC4DF . #x69AD)
                (#x8FC4E0 . #x69AF)
                (#x8FC4E1 . #x69B7)
                (#x8FC4E2 . #x69B8)
                (#x8FC4E3 . #x69BA)
                (#x8FC4E4 . #x69BC)
                (#x8FC4E5 . #x69C5)
                (#x8FC4E6 . #x69C8)
                (#x8FC4E7 . #x69D1)
                (#x8FC4E8 . #x69D6)
                (#x8FC4E9 . #x69D7)
                (#x8FC4EA . #x69E2)
                (#x8FC4EB . #x69E5)
                (#x8FC4EC . #x69EE)
                (#x8FC4ED . #x69EF)
                (#x8FC4EE . #x69F1)
                (#x8FC4EF . #x69F3)
                (#x8FC4F0 . #x69F5)
                (#x8FC4F1 . #x69FE)
                (#x8FC4F2 . #x6A00)
                (#x8FC4F3 . #x6A01)
                (#x8FC4F4 . #x6A03)
                (#x8FC4F5 . #x6A0F)
                (#x8FC4F6 . #x6A11)
                (#x8FC4F7 . #x6A15)
                (#x8FC4F8 . #x6A1A)
                (#x8FC4F9 . #x6A1D)
                (#x8FC4FA . #x6A20)
                (#x8FC4FB . #x6A24)
                (#x8FC4FC . #x6A28)
                (#x8FC4FD . #x6A30)
                (#x8FC4FE . #x6A32)
                (#x8FC5A1 . #x6A34)
                (#x8FC5A2 . #x6A37)
                (#x8FC5A3 . #x6A3B)
                (#x8FC5A4 . #x6A3E)
                (#x8FC5A5 . #x6A3F)
                (#x8FC5A6 . #x6A45)
                (#x8FC5A7 . #x6A46)
                (#x8FC5A8 . #x6A49)
                (#x8FC5A9 . #x6A4A)
                (#x8FC5AA . #x6A4E)
                (#x8FC5AB . #x6A50)
                (#x8FC5AC . #x6A51)
                (#x8FC5AD . #x6A52)
                (#x8FC5AE . #x6A55)
                (#x8FC5AF . #x6A56)
                (#x8FC5B0 . #x6A5B)
                (#x8FC5B1 . #x6A64)
                (#x8FC5B2 . #x6A67)
                (#x8FC5B3 . #x6A6A)
                (#x8FC5B4 . #x6A71)
                (#x8FC5B5 . #x6A73)
                (#x8FC5B6 . #x6A7E)
                (#x8FC5B7 . #x6A81)
                (#x8FC5B8 . #x6A83)
                (#x8FC5B9 . #x6A86)
                (#x8FC5BA . #x6A87)
                (#x8FC5BB . #x6A89)
                (#x8FC5BC . #x6A8B)
                (#x8FC5BD . #x6A91)
                (#x8FC5BE . #x6A9B)
                (#x8FC5BF . #x6A9D)
                (#x8FC5C0 . #x6A9E)
                (#x8FC5C1 . #x6A9F)
                (#x8FC5C2 . #x6AA5)
                (#x8FC5C3 . #x6AAB)
                (#x8FC5C4 . #x6AAF)
                (#x8FC5C5 . #x6AB0)
                (#x8FC5C6 . #x6AB1)
                (#x8FC5C7 . #x6AB4)
                (#x8FC5C8 . #x6ABD)
                (#x8FC5C9 . #x6ABE)
                (#x8FC5CA . #x6ABF)
                (#x8FC5CB . #x6AC6)
                (#x8FC5CC . #x6AC9)
                (#x8FC5CD . #x6AC8)
                (#x8FC5CE . #x6ACC)
                (#x8FC5CF . #x6AD0)
                (#x8FC5D0 . #x6AD4)
                (#x8FC5D1 . #x6AD5)
                (#x8FC5D2 . #x6AD6)
                (#x8FC5D3 . #x6ADC)
                (#x8FC5D4 . #x6ADD)
                (#x8FC5D5 . #x6AE4)
                (#x8FC5D6 . #x6AE7)
                (#x8FC5D7 . #x6AEC)
                (#x8FC5D8 . #x6AF0)
                (#x8FC5D9 . #x6AF1)
                (#x8FC5DA . #x6AF2)
                (#x8FC5DB . #x6AFC)
                (#x8FC5DC . #x6AFD)
                (#x8FC5DD . #x6B02)
                (#x8FC5DE . #x6B03)
                (#x8FC5DF . #x6B06)
                (#x8FC5E0 . #x6B07)
                (#x8FC5E1 . #x6B09)
                (#x8FC5E2 . #x6B0F)
                (#x8FC5E3 . #x6B10)
                (#x8FC5E4 . #x6B11)
                (#x8FC5E5 . #x6B17)
                (#x8FC5E6 . #x6B1B)
                (#x8FC5E7 . #x6B1E)
                (#x8FC5E8 . #x6B24)
                (#x8FC5E9 . #x6B28)
                (#x8FC5EA . #x6B2B)
                (#x8FC5EB . #x6B2C)
                (#x8FC5EC . #x6B2F)
                (#x8FC5ED . #x6B35)
                (#x8FC5EE . #x6B36)
                (#x8FC5EF . #x6B3B)
                (#x8FC5F0 . #x6B3F)
                (#x8FC5F1 . #x6B46)
                (#x8FC5F2 . #x6B4A)
                (#x8FC5F3 . #x6B4D)
                (#x8FC5F4 . #x6B52)
                (#x8FC5F5 . #x6B56)
                (#x8FC5F6 . #x6B58)
                (#x8FC5F7 . #x6B5D)
                (#x8FC5F8 . #x6B60)
                (#x8FC5F9 . #x6B67)
                (#x8FC5FA . #x6B6B)
                (#x8FC5FB . #x6B6E)
                (#x8FC5FC . #x6B70)
                (#x8FC5FD . #x6B75)
                (#x8FC5FE . #x6B7D)
                (#x8FC6A1 . #x6B7E)
                (#x8FC6A2 . #x6B82)
                (#x8FC6A3 . #x6B85)
                (#x8FC6A4 . #x6B97)
                (#x8FC6A5 . #x6B9B)
                (#x8FC6A6 . #x6B9F)
                (#x8FC6A7 . #x6BA0)
                (#x8FC6A8 . #x6BA2)
                (#x8FC6A9 . #x6BA3)
                (#x8FC6AA . #x6BA8)
                (#x8FC6AB . #x6BA9)
                (#x8FC6AC . #x6BAC)
                (#x8FC6AD . #x6BAD)
                (#x8FC6AE . #x6BAE)
                (#x8FC6AF . #x6BB0)
                (#x8FC6B0 . #x6BB8)
                (#x8FC6B1 . #x6BB9)
                (#x8FC6B2 . #x6BBD)
                (#x8FC6B3 . #x6BBE)
                (#x8FC6B4 . #x6BC3)
                (#x8FC6B5 . #x6BC4)
                (#x8FC6B6 . #x6BC9)
                (#x8FC6B7 . #x6BCC)
                (#x8FC6B8 . #x6BD6)
                (#x8FC6B9 . #x6BDA)
                (#x8FC6BA . #x6BE1)
                (#x8FC6BB . #x6BE3)
                (#x8FC6BC . #x6BE6)
                (#x8FC6BD . #x6BE7)
                (#x8FC6BE . #x6BEE)
                (#x8FC6BF . #x6BF1)
                (#x8FC6C0 . #x6BF7)
                (#x8FC6C1 . #x6BF9)
                (#x8FC6C2 . #x6BFF)
                (#x8FC6C3 . #x6C02)
                (#x8FC6C4 . #x6C04)
                (#x8FC6C5 . #x6C05)
                (#x8FC6C6 . #x6C09)
                (#x8FC6C7 . #x6C0D)
                (#x8FC6C8 . #x6C0E)
                (#x8FC6C9 . #x6C10)
                (#x8FC6CA . #x6C12)
                (#x8FC6CB . #x6C19)
                (#x8FC6CC . #x6C1F)
                (#x8FC6CD . #x6C26)
                (#x8FC6CE . #x6C27)
                (#x8FC6CF . #x6C28)
                (#x8FC6D0 . #x6C2C)
                (#x8FC6D1 . #x6C2E)
                (#x8FC6D2 . #x6C33)
                (#x8FC6D3 . #x6C35)
                (#x8FC6D4 . #x6C36)
                (#x8FC6D5 . #x6C3A)
                (#x8FC6D6 . #x6C3B)
                (#x8FC6D7 . #x6C3F)
                (#x8FC6D8 . #x6C4A)
                (#x8FC6D9 . #x6C4B)
                (#x8FC6DA . #x6C4D)
                (#x8FC6DB . #x6C4F)
                (#x8FC6DC . #x6C52)
                (#x8FC6DD . #x6C54)
                (#x8FC6DE . #x6C59)
                (#x8FC6DF . #x6C5B)
                (#x8FC6E0 . #x6C5C)
                (#x8FC6E1 . #x6C6B)
                (#x8FC6E2 . #x6C6D)
                (#x8FC6E3 . #x6C6F)
                (#x8FC6E4 . #x6C74)
                (#x8FC6E5 . #x6C76)
                (#x8FC6E6 . #x6C78)
                (#x8FC6E7 . #x6C79)
                (#x8FC6E8 . #x6C7B)
                (#x8FC6E9 . #x6C85)
                (#x8FC6EA . #x6C86)
                (#x8FC6EB . #x6C87)
                (#x8FC6EC . #x6C89)
                (#x8FC6ED . #x6C94)
                (#x8FC6EE . #x6C95)
                (#x8FC6EF . #x6C97)
                (#x8FC6F0 . #x6C98)
                (#x8FC6F1 . #x6C9C)
                (#x8FC6F2 . #x6C9F)
                (#x8FC6F3 . #x6CB0)
                (#x8FC6F4 . #x6CB2)
                (#x8FC6F5 . #x6CB4)
                (#x8FC6F6 . #x6CC2)
                (#x8FC6F7 . #x6CC6)
                (#x8FC6F8 . #x6CCD)
                (#x8FC6F9 . #x6CCF)
                (#x8FC6FA . #x6CD0)
                (#x8FC6FB . #x6CD1)
                (#x8FC6FC . #x6CD2)
                (#x8FC6FD . #x6CD4)
                (#x8FC6FE . #x6CD6)
                (#x8FC7A1 . #x6CDA)
                (#x8FC7A2 . #x6CDC)
                (#x8FC7A3 . #x6CE0)
                (#x8FC7A4 . #x6CE7)
                (#x8FC7A5 . #x6CE9)
                (#x8FC7A6 . #x6CEB)
                (#x8FC7A7 . #x6CEC)
                (#x8FC7A8 . #x6CEE)
                (#x8FC7A9 . #x6CF2)
                (#x8FC7AA . #x6CF4)
                (#x8FC7AB . #x6D04)
                (#x8FC7AC . #x6D07)
                (#x8FC7AD . #x6D0A)
                (#x8FC7AE . #x6D0E)
                (#x8FC7AF . #x6D0F)
                (#x8FC7B0 . #x6D11)
                (#x8FC7B1 . #x6D13)
                (#x8FC7B2 . #x6D1A)
                (#x8FC7B3 . #x6D26)
                (#x8FC7B4 . #x6D27)
                (#x8FC7B5 . #x6D28)
                (#x8FC7B6 . #x6C67)
                (#x8FC7B7 . #x6D2E)
                (#x8FC7B8 . #x6D2F)
                (#x8FC7B9 . #x6D31)
                (#x8FC7BA . #x6D39)
                (#x8FC7BB . #x6D3C)
                (#x8FC7BC . #x6D3F)
                (#x8FC7BD . #x6D57)
                (#x8FC7BE . #x6D5E)
                (#x8FC7BF . #x6D5F)
                (#x8FC7C0 . #x6D61)
                (#x8FC7C1 . #x6D65)
                (#x8FC7C2 . #x6D67)
                (#x8FC7C3 . #x6D6F)
                (#x8FC7C4 . #x6D70)
                (#x8FC7C5 . #x6D7C)
                (#x8FC7C6 . #x6D82)
                (#x8FC7C7 . #x6D87)
                (#x8FC7C8 . #x6D91)
                (#x8FC7C9 . #x6D92)
                (#x8FC7CA . #x6D94)
                (#x8FC7CB . #x6D96)
                (#x8FC7CC . #x6D97)
                (#x8FC7CD . #x6D98)
                (#x8FC7CE . #x6DAA)
                (#x8FC7CF . #x6DAC)
                (#x8FC7D0 . #x6DB4)
                (#x8FC7D1 . #x6DB7)
                (#x8FC7D2 . #x6DB9)
                (#x8FC7D3 . #x6DBD)
                (#x8FC7D4 . #x6DBF)
                (#x8FC7D5 . #x6DC4)
                (#x8FC7D6 . #x6DC8)
                (#x8FC7D7 . #x6DCA)
                (#x8FC7D8 . #x6DCE)
                (#x8FC7D9 . #x6DCF)
                (#x8FC7DA . #x6DD6)
                (#x8FC7DB . #x6DDB)
                (#x8FC7DC . #x6DDD)
                (#x8FC7DD . #x6DDF)
                (#x8FC7DE . #x6DE0)
                (#x8FC7DF . #x6DE2)
                (#x8FC7E0 . #x6DE5)
                (#x8FC7E1 . #x6DE9)
                (#x8FC7E2 . #x6DEF)
                (#x8FC7E3 . #x6DF0)
                (#x8FC7E4 . #x6DF4)
                (#x8FC7E5 . #x6DF6)
                (#x8FC7E6 . #x6DFC)
                (#x8FC7E7 . #x6E00)
                (#x8FC7E8 . #x6E04)
                (#x8FC7E9 . #x6E1E)
                (#x8FC7EA . #x6E22)
                (#x8FC7EB . #x6E27)
                (#x8FC7EC . #x6E32)
                (#x8FC7ED . #x6E36)
                (#x8FC7EE . #x6E39)
                (#x8FC7EF . #x6E3B)
                (#x8FC7F0 . #x6E3C)
                (#x8FC7F1 . #x6E44)
                (#x8FC7F2 . #x6E45)
                (#x8FC7F3 . #x6E48)
                (#x8FC7F4 . #x6E49)
                (#x8FC7F5 . #x6E4B)
                (#x8FC7F6 . #x6E4F)
                (#x8FC7F7 . #x6E51)
                (#x8FC7F8 . #x6E52)
                (#x8FC7F9 . #x6E53)
                (#x8FC7FA . #x6E54)
                (#x8FC7FB . #x6E57)
                (#x8FC7FC . #x6E5C)
                (#x8FC7FD . #x6E5D)
                (#x8FC7FE . #x6E5E)
                (#x8FC8A1 . #x6E62)
                (#x8FC8A2 . #x6E63)
                (#x8FC8A3 . #x6E68)
                (#x8FC8A4 . #x6E73)
                (#x8FC8A5 . #x6E7B)
                (#x8FC8A6 . #x6E7D)
                (#x8FC8A7 . #x6E8D)
                (#x8FC8A8 . #x6E93)
                (#x8FC8A9 . #x6E99)
                (#x8FC8AA . #x6EA0)
                (#x8FC8AB . #x6EA7)
                (#x8FC8AC . #x6EAD)
                (#x8FC8AD . #x6EAE)
                (#x8FC8AE . #x6EB1)
                (#x8FC8AF . #x6EB3)
                (#x8FC8B0 . #x6EBB)
                (#x8FC8B1 . #x6EBF)
                (#x8FC8B2 . #x6EC0)
                (#x8FC8B3 . #x6EC1)
                (#x8FC8B4 . #x6EC3)
                (#x8FC8B5 . #x6EC7)
                (#x8FC8B6 . #x6EC8)
                (#x8FC8B7 . #x6ECA)
                (#x8FC8B8 . #x6ECD)
                (#x8FC8B9 . #x6ECE)
                (#x8FC8BA . #x6ECF)
                (#x8FC8BB . #x6EEB)
                (#x8FC8BC . #x6EED)
                (#x8FC8BD . #x6EEE)
                (#x8FC8BE . #x6EF9)
                (#x8FC8BF . #x6EFB)
                (#x8FC8C0 . #x6EFD)
                (#x8FC8C1 . #x6F04)
                (#x8FC8C2 . #x6F08)
                (#x8FC8C3 . #x6F0A)
                (#x8FC8C4 . #x6F0C)
                (#x8FC8C5 . #x6F0D)
                (#x8FC8C6 . #x6F16)
                (#x8FC8C7 . #x6F18)
                (#x8FC8C8 . #x6F1A)
                (#x8FC8C9 . #x6F1B)
                (#x8FC8CA . #x6F26)
                (#x8FC8CB . #x6F29)
                (#x8FC8CC . #x6F2A)
                (#x8FC8CD . #x6F2F)
                (#x8FC8CE . #x6F30)
                (#x8FC8CF . #x6F33)
                (#x8FC8D0 . #x6F36)
                (#x8FC8D1 . #x6F3B)
                (#x8FC8D2 . #x6F3C)
                (#x8FC8D3 . #x6F2D)
                (#x8FC8D4 . #x6F4F)
                (#x8FC8D5 . #x6F51)
                (#x8FC8D6 . #x6F52)
                (#x8FC8D7 . #x6F53)
                (#x8FC8D8 . #x6F57)
                (#x8FC8D9 . #x6F59)
                (#x8FC8DA . #x6F5A)
                (#x8FC8DB . #x6F5D)
                (#x8FC8DC . #x6F5E)
                (#x8FC8DD . #x6F61)
                (#x8FC8DE . #x6F62)
                (#x8FC8DF . #x6F68)
                (#x8FC8E0 . #x6F6C)
                (#x8FC8E1 . #x6F7D)
                (#x8FC8E2 . #x6F7E)
                (#x8FC8E3 . #x6F83)
                (#x8FC8E4 . #x6F87)
                (#x8FC8E5 . #x6F88)
                (#x8FC8E6 . #x6F8B)
                (#x8FC8E7 . #x6F8C)
                (#x8FC8E8 . #x6F8D)
                (#x8FC8E9 . #x6F90)
                (#x8FC8EA . #x6F92)
                (#x8FC8EB . #x6F93)
                (#x8FC8EC . #x6F94)
                (#x8FC8ED . #x6F96)
                (#x8FC8EE . #x6F9A)
                (#x8FC8EF . #x6F9F)
                (#x8FC8F0 . #x6FA0)
                (#x8FC8F1 . #x6FA5)
                (#x8FC8F2 . #x6FA6)
                (#x8FC8F3 . #x6FA7)
                (#x8FC8F4 . #x6FA8)
                (#x8FC8F5 . #x6FAE)
                (#x8FC8F6 . #x6FAF)
                (#x8FC8F7 . #x6FB0)
                (#x8FC8F8 . #x6FB5)
                (#x8FC8F9 . #x6FB6)
                (#x8FC8FA . #x6FBC)
                (#x8FC8FB . #x6FC5)
                (#x8FC8FC . #x6FC7)
                (#x8FC8FD . #x6FC8)
                (#x8FC8FE . #x6FCA)
                (#x8FC9A1 . #x6FDA)
                (#x8FC9A2 . #x6FDE)
                (#x8FC9A3 . #x6FE8)
                (#x8FC9A4 . #x6FE9)
                (#x8FC9A5 . #x6FF0)
                (#x8FC9A6 . #x6FF5)
                (#x8FC9A7 . #x6FF9)
                (#x8FC9A8 . #x6FFC)
                (#x8FC9A9 . #x6FFD)
                (#x8FC9AA . #x7000)
                (#x8FC9AB . #x7005)
                (#x8FC9AC . #x7006)
                (#x8FC9AD . #x7007)
                (#x8FC9AE . #x700D)
                (#x8FC9AF . #x7017)
                (#x8FC9B0 . #x7020)
                (#x8FC9B1 . #x7023)
                (#x8FC9B2 . #x702F)
                (#x8FC9B3 . #x7034)
                (#x8FC9B4 . #x7037)
                (#x8FC9B5 . #x7039)
                (#x8FC9B6 . #x703C)
                (#x8FC9B7 . #x7043)
                (#x8FC9B8 . #x7044)
                (#x8FC9B9 . #x7048)
                (#x8FC9BA . #x7049)
                (#x8FC9BB . #x704A)
                (#x8FC9BC . #x704B)
                (#x8FC9BD . #x7054)
                (#x8FC9BE . #x7055)
                (#x8FC9BF . #x705D)
                (#x8FC9C0 . #x705E)
                (#x8FC9C1 . #x704E)
                (#x8FC9C2 . #x7064)
                (#x8FC9C3 . #x7065)
                (#x8FC9C4 . #x706C)
                (#x8FC9C5 . #x706E)
                (#x8FC9C6 . #x7075)
                (#x8FC9C7 . #x7076)
                (#x8FC9C8 . #x707E)
                (#x8FC9C9 . #x7081)
                (#x8FC9CA . #x7085)
                (#x8FC9CB . #x7086)
                (#x8FC9CC . #x7094)
                (#x8FC9CD . #x7095)
                (#x8FC9CE . #x7096)
                (#x8FC9CF . #x7097)
                (#x8FC9D0 . #x7098)
                (#x8FC9D1 . #x709B)
                (#x8FC9D2 . #x70A4)
                (#x8FC9D3 . #x70AB)
                (#x8FC9D4 . #x70B0)
                (#x8FC9D5 . #x70B1)
                (#x8FC9D6 . #x70B4)
                (#x8FC9D7 . #x70B7)
                (#x8FC9D8 . #x70CA)
                (#x8FC9D9 . #x70D1)
                (#x8FC9DA . #x70D3)
                (#x8FC9DB . #x70D4)
                (#x8FC9DC . #x70D5)
                (#x8FC9DD . #x70D6)
                (#x8FC9DE . #x70D8)
                (#x8FC9DF . #x70DC)
                (#x8FC9E0 . #x70E4)
                (#x8FC9E1 . #x70FA)
                (#x8FC9E2 . #x7103)
                (#x8FC9E3 . #x7104)
                (#x8FC9E4 . #x7105)
                (#x8FC9E5 . #x7106)
                (#x8FC9E6 . #x7107)
                (#x8FC9E7 . #x710B)
                (#x8FC9E8 . #x710C)
                (#x8FC9E9 . #x710F)
                (#x8FC9EA . #x711E)
                (#x8FC9EB . #x7120)
                (#x8FC9EC . #x712B)
                (#x8FC9ED . #x712D)
                (#x8FC9EE . #x712F)
                (#x8FC9EF . #x7130)
                (#x8FC9F0 . #x7131)
                (#x8FC9F1 . #x7138)
                (#x8FC9F2 . #x7141)
                (#x8FC9F3 . #x7145)
                (#x8FC9F4 . #x7146)
                (#x8FC9F5 . #x7147)
                (#x8FC9F6 . #x714A)
                (#x8FC9F7 . #x714B)
                (#x8FC9F8 . #x7150)
                (#x8FC9F9 . #x7152)
                (#x8FC9FA . #x7157)
                (#x8FC9FB . #x715A)
                (#x8FC9FC . #x715C)
                (#x8FC9FD . #x715E)
                (#x8FC9FE . #x7160)
                (#x8FCAA1 . #x7168)
                (#x8FCAA2 . #x7179)
                (#x8FCAA3 . #x7180)
                (#x8FCAA4 . #x7185)
                (#x8FCAA5 . #x7187)
                (#x8FCAA6 . #x718C)
                (#x8FCAA7 . #x7192)
                (#x8FCAA8 . #x719A)
                (#x8FCAA9 . #x719B)
                (#x8FCAAA . #x71A0)
                (#x8FCAAB . #x71A2)
                (#x8FCAAC . #x71AF)
                (#x8FCAAD . #x71B0)
                (#x8FCAAE . #x71B2)
                (#x8FCAAF . #x71B3)
                (#x8FCAB0 . #x71BA)
                (#x8FCAB1 . #x71BF)
                (#x8FCAB2 . #x71C0)
                (#x8FCAB3 . #x71C1)
                (#x8FCAB4 . #x71C4)
                (#x8FCAB5 . #x71CB)
                (#x8FCAB6 . #x71CC)
                (#x8FCAB7 . #x71D3)
                (#x8FCAB8 . #x71D6)
                (#x8FCAB9 . #x71D9)
                (#x8FCABA . #x71DA)
                (#x8FCABB . #x71DC)
                (#x8FCABC . #x71F8)
                (#x8FCABD . #x71FE)
                (#x8FCABE . #x7200)
                (#x8FCABF . #x7207)
                (#x8FCAC0 . #x7208)
                (#x8FCAC1 . #x7209)
                (#x8FCAC2 . #x7213)
                (#x8FCAC3 . #x7217)
                (#x8FCAC4 . #x721A)
                (#x8FCAC5 . #x721D)
                (#x8FCAC6 . #x721F)
                (#x8FCAC7 . #x7224)
                (#x8FCAC8 . #x722B)
                (#x8FCAC9 . #x722F)
                (#x8FCACA . #x7234)
                (#x8FCACB . #x7238)
                (#x8FCACC . #x7239)
                (#x8FCACD . #x7241)
                (#x8FCACE . #x7242)
                (#x8FCACF . #x7243)
                (#x8FCAD0 . #x7245)
                (#x8FCAD1 . #x724E)
                (#x8FCAD2 . #x724F)
                (#x8FCAD3 . #x7250)
                (#x8FCAD4 . #x7253)
                (#x8FCAD5 . #x7255)
                (#x8FCAD6 . #x7256)
                (#x8FCAD7 . #x725A)
                (#x8FCAD8 . #x725C)
                (#x8FCAD9 . #x725E)
                (#x8FCADA . #x7260)
                (#x8FCADB . #x7263)
                (#x8FCADC . #x7268)
                (#x8FCADD . #x726B)
                (#x8FCADE . #x726E)
                (#x8FCADF . #x726F)
                (#x8FCAE0 . #x7271)
                (#x8FCAE1 . #x7277)
                (#x8FCAE2 . #x7278)
                (#x8FCAE3 . #x727B)
                (#x8FCAE4 . #x727C)
                (#x8FCAE5 . #x727F)
                (#x8FCAE6 . #x7284)
                (#x8FCAE7 . #x7289)
                (#x8FCAE8 . #x728D)
                (#x8FCAE9 . #x728E)
                (#x8FCAEA . #x7293)
                (#x8FCAEB . #x729B)
                (#x8FCAEC . #x72A8)
                (#x8FCAED . #x72AD)
                (#x8FCAEE . #x72AE)
                (#x8FCAEF . #x72B1)
                (#x8FCAF0 . #x72B4)
                (#x8FCAF1 . #x72BE)
                (#x8FCAF2 . #x72C1)
                (#x8FCAF3 . #x72C7)
                (#x8FCAF4 . #x72C9)
                (#x8FCAF5 . #x72CC)
                (#x8FCAF6 . #x72D5)
                (#x8FCAF7 . #x72D6)
                (#x8FCAF8 . #x72D8)
                (#x8FCAF9 . #x72DF)
                (#x8FCAFA . #x72E5)
                (#x8FCAFB . #x72F3)
                (#x8FCAFC . #x72F4)
                (#x8FCAFD . #x72FA)
                (#x8FCAFE . #x72FB)
                (#x8FCBA1 . #x72FE)
                (#x8FCBA2 . #x7302)
                (#x8FCBA3 . #x7304)
                (#x8FCBA4 . #x7305)
                (#x8FCBA5 . #x7307)
                (#x8FCBA6 . #x730B)
                (#x8FCBA7 . #x730D)
                (#x8FCBA8 . #x7312)
                (#x8FCBA9 . #x7313)
                (#x8FCBAA . #x7318)
                (#x8FCBAB . #x7319)
                (#x8FCBAC . #x731E)
                (#x8FCBAD . #x7322)
                (#x8FCBAE . #x7324)
                (#x8FCBAF . #x7327)
                (#x8FCBB0 . #x7328)
                (#x8FCBB1 . #x732C)
                (#x8FCBB2 . #x7331)
                (#x8FCBB3 . #x7332)
                (#x8FCBB4 . #x7335)
                (#x8FCBB5 . #x733A)
                (#x8FCBB6 . #x733B)
                (#x8FCBB7 . #x733D)
                (#x8FCBB8 . #x7343)
                (#x8FCBB9 . #x734D)
                (#x8FCBBA . #x7350)
                (#x8FCBBB . #x7352)
                (#x8FCBBC . #x7356)
                (#x8FCBBD . #x7358)
                (#x8FCBBE . #x735D)
                (#x8FCBBF . #x735E)
                (#x8FCBC0 . #x735F)
                (#x8FCBC1 . #x7360)
                (#x8FCBC2 . #x7366)
                (#x8FCBC3 . #x7367)
                (#x8FCBC4 . #x7369)
                (#x8FCBC5 . #x736B)
                (#x8FCBC6 . #x736C)
                (#x8FCBC7 . #x736E)
                (#x8FCBC8 . #x736F)
                (#x8FCBC9 . #x7371)
                (#x8FCBCA . #x7377)
                (#x8FCBCB . #x7379)
                (#x8FCBCC . #x737C)
                (#x8FCBCD . #x7380)
                (#x8FCBCE . #x7381)
                (#x8FCBCF . #x7383)
                (#x8FCBD0 . #x7385)
                (#x8FCBD1 . #x7386)
                (#x8FCBD2 . #x738E)
                (#x8FCBD3 . #x7390)
                (#x8FCBD4 . #x7393)
                (#x8FCBD5 . #x7395)
                (#x8FCBD6 . #x7397)
                (#x8FCBD7 . #x7398)
                (#x8FCBD8 . #x739C)
                (#x8FCBD9 . #x739E)
                (#x8FCBDA . #x739F)
                (#x8FCBDB . #x73A0)
                (#x8FCBDC . #x73A2)
                (#x8FCBDD . #x73A5)
                (#x8FCBDE . #x73A6)
                (#x8FCBDF . #x73AA)
                (#x8FCBE0 . #x73AB)
                (#x8FCBE1 . #x73AD)
                (#x8FCBE2 . #x73B5)
                (#x8FCBE3 . #x73B7)
                (#x8FCBE4 . #x73B9)
                (#x8FCBE5 . #x73BC)
                (#x8FCBE6 . #x73BD)
                (#x8FCBE7 . #x73BF)
                (#x8FCBE8 . #x73C5)
                (#x8FCBE9 . #x73C6)
                (#x8FCBEA . #x73C9)
                (#x8FCBEB . #x73CB)
                (#x8FCBEC . #x73CC)
                (#x8FCBED . #x73CF)
                (#x8FCBEE . #x73D2)
                (#x8FCBEF . #x73D3)
                (#x8FCBF0 . #x73D6)
                (#x8FCBF1 . #x73D9)
                (#x8FCBF2 . #x73DD)
                (#x8FCBF3 . #x73E1)
                (#x8FCBF4 . #x73E3)
                (#x8FCBF5 . #x73E6)
                (#x8FCBF6 . #x73E7)
                (#x8FCBF7 . #x73E9)
                (#x8FCBF8 . #x73F4)
                (#x8FCBF9 . #x73F5)
                (#x8FCBFA . #x73F7)
                (#x8FCBFB . #x73F9)
                (#x8FCBFC . #x73FA)
                (#x8FCBFD . #x73FB)
                (#x8FCBFE . #x73FD)
                (#x8FCCA1 . #x73FF)
                (#x8FCCA2 . #x7400)
                (#x8FCCA3 . #x7401)
                (#x8FCCA4 . #x7404)
                (#x8FCCA5 . #x7407)
                (#x8FCCA6 . #x740A)
                (#x8FCCA7 . #x7411)
                (#x8FCCA8 . #x741A)
                (#x8FCCA9 . #x741B)
                (#x8FCCAA . #x7424)
                (#x8FCCAB . #x7426)
                (#x8FCCAC . #x7428)
                (#x8FCCAD . #x7429)
                (#x8FCCAE . #x742A)
                (#x8FCCAF . #x742B)
                (#x8FCCB0 . #x742C)
                (#x8FCCB1 . #x742D)
                (#x8FCCB2 . #x742E)
                (#x8FCCB3 . #x742F)
                (#x8FCCB4 . #x7430)
                (#x8FCCB5 . #x7431)
                (#x8FCCB6 . #x7439)
                (#x8FCCB7 . #x7440)
                (#x8FCCB8 . #x7443)
                (#x8FCCB9 . #x7444)
                (#x8FCCBA . #x7446)
                (#x8FCCBB . #x7447)
                (#x8FCCBC . #x744B)
                (#x8FCCBD . #x744D)
                (#x8FCCBE . #x7451)
                (#x8FCCBF . #x7452)
                (#x8FCCC0 . #x7457)
                (#x8FCCC1 . #x745D)
                (#x8FCCC2 . #x7462)
                (#x8FCCC3 . #x7466)
                (#x8FCCC4 . #x7467)
                (#x8FCCC5 . #x7468)
                (#x8FCCC6 . #x746B)
                (#x8FCCC7 . #x746D)
                (#x8FCCC8 . #x746E)
                (#x8FCCC9 . #x7471)
                (#x8FCCCA . #x7472)
                (#x8FCCCB . #x7480)
                (#x8FCCCC . #x7481)
                (#x8FCCCD . #x7485)
                (#x8FCCCE . #x7486)
                (#x8FCCCF . #x7487)
                (#x8FCCD0 . #x7489)
                (#x8FCCD1 . #x748F)
                (#x8FCCD2 . #x7490)
                (#x8FCCD3 . #x7491)
                (#x8FCCD4 . #x7492)
                (#x8FCCD5 . #x7498)
                (#x8FCCD6 . #x7499)
                (#x8FCCD7 . #x749A)
                (#x8FCCD8 . #x749C)
                (#x8FCCD9 . #x749F)
                (#x8FCCDA . #x74A0)
                (#x8FCCDB . #x74A1)
                (#x8FCCDC . #x74A3)
                (#x8FCCDD . #x74A6)
                (#x8FCCDE . #x74A8)
                (#x8FCCDF . #x74A9)
                (#x8FCCE0 . #x74AA)
                (#x8FCCE1 . #x74AB)
                (#x8FCCE2 . #x74AE)
                (#x8FCCE3 . #x74AF)
                (#x8FCCE4 . #x74B1)
                (#x8FCCE5 . #x74B2)
                (#x8FCCE6 . #x74B5)
                (#x8FCCE7 . #x74B9)
                (#x8FCCE8 . #x74BB)
                (#x8FCCE9 . #x74BF)
                (#x8FCCEA . #x74C8)
                (#x8FCCEB . #x74C9)
                (#x8FCCEC . #x74CC)
                (#x8FCCED . #x74D0)
                (#x8FCCEE . #x74D3)
                (#x8FCCEF . #x74D8)
                (#x8FCCF0 . #x74DA)
                (#x8FCCF1 . #x74DB)
                (#x8FCCF2 . #x74DE)
                (#x8FCCF3 . #x74DF)
                (#x8FCCF4 . #x74E4)
                (#x8FCCF5 . #x74E8)
                (#x8FCCF6 . #x74EA)
                (#x8FCCF7 . #x74EB)
                (#x8FCCF8 . #x74EF)
                (#x8FCCF9 . #x74F4)
                (#x8FCCFA . #x74FA)
                (#x8FCCFB . #x74FB)
                (#x8FCCFC . #x74FC)
                (#x8FCCFD . #x74FF)
                (#x8FCCFE . #x7506)
                (#x8FCDA1 . #x7512)
                (#x8FCDA2 . #x7516)
                (#x8FCDA3 . #x7517)
                (#x8FCDA4 . #x7520)
                (#x8FCDA5 . #x7521)
                (#x8FCDA6 . #x7524)
                (#x8FCDA7 . #x7527)
                (#x8FCDA8 . #x7529)
                (#x8FCDA9 . #x752A)
                (#x8FCDAA . #x752F)
                (#x8FCDAB . #x7536)
                (#x8FCDAC . #x7539)
                (#x8FCDAD . #x753D)
                (#x8FCDAE . #x753E)
                (#x8FCDAF . #x753F)
                (#x8FCDB0 . #x7540)
                (#x8FCDB1 . #x7543)
                (#x8FCDB2 . #x7547)
                (#x8FCDB3 . #x7548)
                (#x8FCDB4 . #x754E)
                (#x8FCDB5 . #x7550)
                (#x8FCDB6 . #x7552)
                (#x8FCDB7 . #x7557)
                (#x8FCDB8 . #x755E)
                (#x8FCDB9 . #x755F)
                (#x8FCDBA . #x7561)
                (#x8FCDBB . #x756F)
                (#x8FCDBC . #x7571)
                (#x8FCDBD . #x7579)
                (#x8FCDBE . #x757A)
                (#x8FCDBF . #x757B)
                (#x8FCDC0 . #x757C)
                (#x8FCDC1 . #x757D)
                (#x8FCDC2 . #x757E)
                (#x8FCDC3 . #x7581)
                (#x8FCDC4 . #x7585)
                (#x8FCDC5 . #x7590)
                (#x8FCDC6 . #x7592)
                (#x8FCDC7 . #x7593)
                (#x8FCDC8 . #x7595)
                (#x8FCDC9 . #x7599)
                (#x8FCDCA . #x759C)
                (#x8FCDCB . #x75A2)
                (#x8FCDCC . #x75A4)
                (#x8FCDCD . #x75B4)
                (#x8FCDCE . #x75BA)
                (#x8FCDCF . #x75BF)
                (#x8FCDD0 . #x75C0)
                (#x8FCDD1 . #x75C1)
                (#x8FCDD2 . #x75C4)
                (#x8FCDD3 . #x75C6)
                (#x8FCDD4 . #x75CC)
                (#x8FCDD5 . #x75CE)
                (#x8FCDD6 . #x75CF)
                (#x8FCDD7 . #x75D7)
                (#x8FCDD8 . #x75DC)
                (#x8FCDD9 . #x75DF)
                (#x8FCDDA . #x75E0)
                (#x8FCDDB . #x75E1)
                (#x8FCDDC . #x75E4)
                (#x8FCDDD . #x75E7)
                (#x8FCDDE . #x75EC)
                (#x8FCDDF . #x75EE)
                (#x8FCDE0 . #x75EF)
                (#x8FCDE1 . #x75F1)
                (#x8FCDE2 . #x75F9)
                (#x8FCDE3 . #x7600)
                (#x8FCDE4 . #x7602)
                (#x8FCDE5 . #x7603)
                (#x8FCDE6 . #x7604)
                (#x8FCDE7 . #x7607)
                (#x8FCDE8 . #x7608)
                (#x8FCDE9 . #x760A)
                (#x8FCDEA . #x760C)
                (#x8FCDEB . #x760F)
                (#x8FCDEC . #x7612)
                (#x8FCDED . #x7613)
                (#x8FCDEE . #x7615)
                (#x8FCDEF . #x7616)
                (#x8FCDF0 . #x7619)
                (#x8FCDF1 . #x761B)
                (#x8FCDF2 . #x761C)
                (#x8FCDF3 . #x761D)
                (#x8FCDF4 . #x761E)
                (#x8FCDF5 . #x7623)
                (#x8FCDF6 . #x7625)
                (#x8FCDF7 . #x7626)
                (#x8FCDF8 . #x7629)
                (#x8FCDF9 . #x762D)
                (#x8FCDFA . #x7632)
                (#x8FCDFB . #x7633)
                (#x8FCDFC . #x7635)
                (#x8FCDFD . #x7638)
                (#x8FCDFE . #x7639)
                (#x8FCEA1 . #x763A)
                (#x8FCEA2 . #x763C)
                (#x8FCEA3 . #x764A)
                (#x8FCEA4 . #x7640)
                (#x8FCEA5 . #x7641)
                (#x8FCEA6 . #x7643)
                (#x8FCEA7 . #x7644)
                (#x8FCEA8 . #x7645)
                (#x8FCEA9 . #x7649)
                (#x8FCEAA . #x764B)
                (#x8FCEAB . #x7655)
                (#x8FCEAC . #x7659)
                (#x8FCEAD . #x765F)
                (#x8FCEAE . #x7664)
                (#x8FCEAF . #x7665)
                (#x8FCEB0 . #x766D)
                (#x8FCEB1 . #x766E)
                (#x8FCEB2 . #x766F)
                (#x8FCEB3 . #x7671)
                (#x8FCEB4 . #x7674)
                (#x8FCEB5 . #x7681)
                (#x8FCEB6 . #x7685)
                (#x8FCEB7 . #x768C)
                (#x8FCEB8 . #x768D)
                (#x8FCEB9 . #x7695)
                (#x8FCEBA . #x769B)
                (#x8FCEBB . #x769C)
                (#x8FCEBC . #x769D)
                (#x8FCEBD . #x769F)
                (#x8FCEBE . #x76A0)
                (#x8FCEBF . #x76A2)
                (#x8FCEC0 . #x76A3)
                (#x8FCEC1 . #x76A4)
                (#x8FCEC2 . #x76A5)
                (#x8FCEC3 . #x76A6)
                (#x8FCEC4 . #x76A7)
                (#x8FCEC5 . #x76A8)
                (#x8FCEC6 . #x76AA)
                (#x8FCEC7 . #x76AD)
                (#x8FCEC8 . #x76BD)
                (#x8FCEC9 . #x76C1)
                (#x8FCECA . #x76C5)
                (#x8FCECB . #x76C9)
                (#x8FCECC . #x76CB)
                (#x8FCECD . #x76CC)
                (#x8FCECE . #x76CE)
                (#x8FCECF . #x76D4)
                (#x8FCED0 . #x76D9)
                (#x8FCED1 . #x76E0)
                (#x8FCED2 . #x76E6)
                (#x8FCED3 . #x76E8)
                (#x8FCED4 . #x76EC)
                (#x8FCED5 . #x76F0)
                (#x8FCED6 . #x76F1)
                (#x8FCED7 . #x76F6)
                (#x8FCED8 . #x76F9)
                (#x8FCED9 . #x76FC)
                (#x8FCEDA . #x7700)
                (#x8FCEDB . #x7706)
                (#x8FCEDC . #x770A)
                (#x8FCEDD . #x770E)
                (#x8FCEDE . #x7712)
                (#x8FCEDF . #x7714)
                (#x8FCEE0 . #x7715)
                (#x8FCEE1 . #x7717)
                (#x8FCEE2 . #x7719)
                (#x8FCEE3 . #x771A)
                (#x8FCEE4 . #x771C)
                (#x8FCEE5 . #x7722)
                (#x8FCEE6 . #x7728)
                (#x8FCEE7 . #x772D)
                (#x8FCEE8 . #x772E)
                (#x8FCEE9 . #x772F)
                (#x8FCEEA . #x7734)
                (#x8FCEEB . #x7735)
                (#x8FCEEC . #x7736)
                (#x8FCEED . #x7739)
                (#x8FCEEE . #x773D)
                (#x8FCEEF . #x773E)
                (#x8FCEF0 . #x7742)
                (#x8FCEF1 . #x7745)
                (#x8FCEF2 . #x7746)
                (#x8FCEF3 . #x774A)
                (#x8FCEF4 . #x774D)
                (#x8FCEF5 . #x774E)
                (#x8FCEF6 . #x774F)
                (#x8FCEF7 . #x7752)
                (#x8FCEF8 . #x7756)
                (#x8FCEF9 . #x7757)
                (#x8FCEFA . #x775C)
                (#x8FCEFB . #x775E)
                (#x8FCEFC . #x775F)
                (#x8FCEFD . #x7760)
                (#x8FCEFE . #x7762)
                (#x8FCFA1 . #x7764)
                (#x8FCFA2 . #x7767)
                (#x8FCFA3 . #x776A)
                (#x8FCFA4 . #x776C)
                (#x8FCFA5 . #x7770)
                (#x8FCFA6 . #x7772)
                (#x8FCFA7 . #x7773)
                (#x8FCFA8 . #x7774)
                (#x8FCFA9 . #x777A)
                (#x8FCFAA . #x777D)
                (#x8FCFAB . #x7780)
                (#x8FCFAC . #x7784)
                (#x8FCFAD . #x778C)
                (#x8FCFAE . #x778D)
                (#x8FCFAF . #x7794)
                (#x8FCFB0 . #x7795)
                (#x8FCFB1 . #x7796)
                (#x8FCFB2 . #x779A)
                (#x8FCFB3 . #x779F)
                (#x8FCFB4 . #x77A2)
                (#x8FCFB5 . #x77A7)
                (#x8FCFB6 . #x77AA)
                (#x8FCFB7 . #x77AE)
                (#x8FCFB8 . #x77AF)
                (#x8FCFB9 . #x77B1)
                (#x8FCFBA . #x77B5)
                (#x8FCFBB . #x77BE)
                (#x8FCFBC . #x77C3)
                (#x8FCFBD . #x77C9)
                (#x8FCFBE . #x77D1)
                (#x8FCFBF . #x77D2)
                (#x8FCFC0 . #x77D5)
                (#x8FCFC1 . #x77D9)
                (#x8FCFC2 . #x77DE)
                (#x8FCFC3 . #x77DF)
                (#x8FCFC4 . #x77E0)
                (#x8FCFC5 . #x77E4)
                (#x8FCFC6 . #x77E6)
                (#x8FCFC7 . #x77EA)
                (#x8FCFC8 . #x77EC)
                (#x8FCFC9 . #x77F0)
                (#x8FCFCA . #x77F1)
                (#x8FCFCB . #x77F4)
                (#x8FCFCC . #x77F8)
                (#x8FCFCD . #x77FB)
                (#x8FCFCE . #x7805)
                (#x8FCFCF . #x7806)
                (#x8FCFD0 . #x7809)
                (#x8FCFD1 . #x780D)
                (#x8FCFD2 . #x780E)
                (#x8FCFD3 . #x7811)
                (#x8FCFD4 . #x781D)
                (#x8FCFD5 . #x7821)
                (#x8FCFD6 . #x7822)
                (#x8FCFD7 . #x7823)
                (#x8FCFD8 . #x782D)
                (#x8FCFD9 . #x782E)
                (#x8FCFDA . #x7830)
                (#x8FCFDB . #x7835)
                (#x8FCFDC . #x7837)
                (#x8FCFDD . #x7843)
                (#x8FCFDE . #x7844)
                (#x8FCFDF . #x7847)
                (#x8FCFE0 . #x7848)
                (#x8FCFE1 . #x784C)
                (#x8FCFE2 . #x784E)
                (#x8FCFE3 . #x7852)
                (#x8FCFE4 . #x785C)
                (#x8FCFE5 . #x785E)
                (#x8FCFE6 . #x7860)
                (#x8FCFE7 . #x7861)
                (#x8FCFE8 . #x7863)
                (#x8FCFE9 . #x7864)
                (#x8FCFEA . #x7868)
                (#x8FCFEB . #x786A)
                (#x8FCFEC . #x786E)
                (#x8FCFED . #x787A)
                (#x8FCFEE . #x787E)
                (#x8FCFEF . #x788A)
                (#x8FCFF0 . #x788F)
                (#x8FCFF1 . #x7894)
                (#x8FCFF2 . #x7898)
                (#x8FCFF3 . #x78A1)
                (#x8FCFF4 . #x789D)
                (#x8FCFF5 . #x789E)
                (#x8FCFF6 . #x789F)
                (#x8FCFF7 . #x78A4)
                (#x8FCFF8 . #x78A8)
                (#x8FCFF9 . #x78AC)
                (#x8FCFFA . #x78AD)
                (#x8FCFFB . #x78B0)
                (#x8FCFFC . #x78B1)
                (#x8FCFFD . #x78B2)
                (#x8FCFFE . #x78B3)
                (#x8FD0A1 . #x78BB)
                (#x8FD0A2 . #x78BD)
                (#x8FD0A3 . #x78BF)
                (#x8FD0A4 . #x78C7)
                (#x8FD0A5 . #x78C8)
                (#x8FD0A6 . #x78C9)
                (#x8FD0A7 . #x78CC)
                (#x8FD0A8 . #x78CE)
                (#x8FD0A9 . #x78D2)
                (#x8FD0AA . #x78D3)
                (#x8FD0AB . #x78D5)
                (#x8FD0AC . #x78D6)
                (#x8FD0AD . #x78E4)
                (#x8FD0AE . #x78DB)
                (#x8FD0AF . #x78DF)
                (#x8FD0B0 . #x78E0)
                (#x8FD0B1 . #x78E1)
                (#x8FD0B2 . #x78E6)
                (#x8FD0B3 . #x78EA)
                (#x8FD0B4 . #x78F2)
                (#x8FD0B5 . #x78F3)
                (#x8FD0B6 . #x7900)
                (#x8FD0B7 . #x78F6)
                (#x8FD0B8 . #x78F7)
                (#x8FD0B9 . #x78FA)
                (#x8FD0BA . #x78FB)
                (#x8FD0BB . #x78FF)
                (#x8FD0BC . #x7906)
                (#x8FD0BD . #x790C)
                (#x8FD0BE . #x7910)
                (#x8FD0BF . #x791A)
                (#x8FD0C0 . #x791C)
                (#x8FD0C1 . #x791E)
                (#x8FD0C2 . #x791F)
                (#x8FD0C3 . #x7920)
                (#x8FD0C4 . #x7925)
                (#x8FD0C5 . #x7927)
                (#x8FD0C6 . #x7929)
                (#x8FD0C7 . #x792D)
                (#x8FD0C8 . #x7931)
                (#x8FD0C9 . #x7934)
                (#x8FD0CA . #x7935)
                (#x8FD0CB . #x793B)
                (#x8FD0CC . #x793D)
                (#x8FD0CD . #x793F)
                (#x8FD0CE . #x7944)
                (#x8FD0CF . #x7945)
                (#x8FD0D0 . #x7946)
                (#x8FD0D1 . #x794A)
                (#x8FD0D2 . #x794B)
                (#x8FD0D3 . #x794F)
                (#x8FD0D4 . #x7951)
                (#x8FD0D5 . #x7954)
                (#x8FD0D6 . #x7958)
                (#x8FD0D7 . #x795B)
                (#x8FD0D8 . #x795C)
                (#x8FD0D9 . #x7967)
                (#x8FD0DA . #x7969)
                (#x8FD0DB . #x796B)
                (#x8FD0DC . #x7972)
                (#x8FD0DD . #x7979)
                (#x8FD0DE . #x797B)
                (#x8FD0DF . #x797C)
                (#x8FD0E0 . #x797E)
                (#x8FD0E1 . #x798B)
                (#x8FD0E2 . #x798C)
                (#x8FD0E3 . #x7991)
                (#x8FD0E4 . #x7993)
                (#x8FD0E5 . #x7994)
                (#x8FD0E6 . #x7995)
                (#x8FD0E7 . #x7996)
                (#x8FD0E8 . #x7998)
                (#x8FD0E9 . #x799B)
                (#x8FD0EA . #x799C)
                (#x8FD0EB . #x79A1)
                (#x8FD0EC . #x79A8)
                (#x8FD0ED . #x79A9)
                (#x8FD0EE . #x79AB)
                (#x8FD0EF . #x79AF)
                (#x8FD0F0 . #x79B1)
                (#x8FD0F1 . #x79B4)
                (#x8FD0F2 . #x79B8)
                (#x8FD0F3 . #x79BB)
                (#x8FD0F4 . #x79C2)
                (#x8FD0F5 . #x79C4)
                (#x8FD0F6 . #x79C7)
                (#x8FD0F7 . #x79C8)
                (#x8FD0F8 . #x79CA)
                (#x8FD0F9 . #x79CF)
                (#x8FD0FA . #x79D4)
                (#x8FD0FB . #x79D6)
                (#x8FD0FC . #x79DA)
                (#x8FD0FD . #x79DD)
                (#x8FD0FE . #x79DE)
                (#x8FD1A1 . #x79E0)
                (#x8FD1A2 . #x79E2)
                (#x8FD1A3 . #x79E5)
                (#x8FD1A4 . #x79EA)
                (#x8FD1A5 . #x79EB)
                (#x8FD1A6 . #x79ED)
                (#x8FD1A7 . #x79F1)
                (#x8FD1A8 . #x79F8)
                (#x8FD1A9 . #x79FC)
                (#x8FD1AA . #x7A02)
                (#x8FD1AB . #x7A03)
                (#x8FD1AC . #x7A07)
                (#x8FD1AD . #x7A09)
                (#x8FD1AE . #x7A0A)
                (#x8FD1AF . #x7A0C)
                (#x8FD1B0 . #x7A11)
                (#x8FD1B1 . #x7A15)
                (#x8FD1B2 . #x7A1B)
                (#x8FD1B3 . #x7A1E)
                (#x8FD1B4 . #x7A21)
                (#x8FD1B5 . #x7A27)
                (#x8FD1B6 . #x7A2B)
                (#x8FD1B7 . #x7A2D)
                (#x8FD1B8 . #x7A2F)
                (#x8FD1B9 . #x7A30)
                (#x8FD1BA . #x7A34)
                (#x8FD1BB . #x7A35)
                (#x8FD1BC . #x7A38)
                (#x8FD1BD . #x7A39)
                (#x8FD1BE . #x7A3A)
                (#x8FD1BF . #x7A44)
                (#x8FD1C0 . #x7A45)
                (#x8FD1C1 . #x7A47)
                (#x8FD1C2 . #x7A48)
                (#x8FD1C3 . #x7A4C)
                (#x8FD1C4 . #x7A55)
                (#x8FD1C5 . #x7A56)
                (#x8FD1C6 . #x7A59)
                (#x8FD1C7 . #x7A5C)
                (#x8FD1C8 . #x7A5D)
                (#x8FD1C9 . #x7A5F)
                (#x8FD1CA . #x7A60)
                (#x8FD1CB . #x7A65)
                (#x8FD1CC . #x7A67)
                (#x8FD1CD . #x7A6A)
                (#x8FD1CE . #x7A6D)
                (#x8FD1CF . #x7A75)
                (#x8FD1D0 . #x7A78)
                (#x8FD1D1 . #x7A7E)
                (#x8FD1D2 . #x7A80)
                (#x8FD1D3 . #x7A82)
                (#x8FD1D4 . #x7A85)
                (#x8FD1D5 . #x7A86)
                (#x8FD1D6 . #x7A8A)
                (#x8FD1D7 . #x7A8B)
                (#x8FD1D8 . #x7A90)
                (#x8FD1D9 . #x7A91)
                (#x8FD1DA . #x7A94)
                (#x8FD1DB . #x7A9E)
                (#x8FD1DC . #x7AA0)
                (#x8FD1DD . #x7AA3)
                (#x8FD1DE . #x7AAC)
                (#x8FD1DF . #x7AB3)
                (#x8FD1E0 . #x7AB5)
                (#x8FD1E1 . #x7AB9)
                (#x8FD1E2 . #x7ABB)
                (#x8FD1E3 . #x7ABC)
                (#x8FD1E4 . #x7AC6)
                (#x8FD1E5 . #x7AC9)
                (#x8FD1E6 . #x7ACC)
                (#x8FD1E7 . #x7ACE)
                (#x8FD1E8 . #x7AD1)
                (#x8FD1E9 . #x7ADB)
                (#x8FD1EA . #x7AE8)
                (#x8FD1EB . #x7AE9)
                (#x8FD1EC . #x7AEB)
                (#x8FD1ED . #x7AEC)
                (#x8FD1EE . #x7AF1)
                (#x8FD1EF . #x7AF4)
                (#x8FD1F0 . #x7AFB)
                (#x8FD1F1 . #x7AFD)
                (#x8FD1F2 . #x7AFE)
                (#x8FD1F3 . #x7B07)
                (#x8FD1F4 . #x7B14)
                (#x8FD1F5 . #x7B1F)
                (#x8FD1F6 . #x7B23)
                (#x8FD1F7 . #x7B27)
                (#x8FD1F8 . #x7B29)
                (#x8FD1F9 . #x7B2A)
                (#x8FD1FA . #x7B2B)
                (#x8FD1FB . #x7B2D)
                (#x8FD1FC . #x7B2E)
                (#x8FD1FD . #x7B2F)
                (#x8FD1FE . #x7B30)
                (#x8FD2A1 . #x7B31)
                (#x8FD2A2 . #x7B34)
                (#x8FD2A3 . #x7B3D)
                (#x8FD2A4 . #x7B3F)
                (#x8FD2A5 . #x7B40)
                (#x8FD2A6 . #x7B41)
                (#x8FD2A7 . #x7B47)
                (#x8FD2A8 . #x7B4E)
                (#x8FD2A9 . #x7B55)
                (#x8FD2AA . #x7B60)
                (#x8FD2AB . #x7B64)
                (#x8FD2AC . #x7B66)
                (#x8FD2AD . #x7B69)
                (#x8FD2AE . #x7B6A)
                (#x8FD2AF . #x7B6D)
                (#x8FD2B0 . #x7B6F)
                (#x8FD2B1 . #x7B72)
                (#x8FD2B2 . #x7B73)
                (#x8FD2B3 . #x7B77)
                (#x8FD2B4 . #x7B84)
                (#x8FD2B5 . #x7B89)
                (#x8FD2B6 . #x7B8E)
                (#x8FD2B7 . #x7B90)
                (#x8FD2B8 . #x7B91)
                (#x8FD2B9 . #x7B96)
                (#x8FD2BA . #x7B9B)
                (#x8FD2BB . #x7B9E)
                (#x8FD2BC . #x7BA0)
                (#x8FD2BD . #x7BA5)
                (#x8FD2BE . #x7BAC)
                (#x8FD2BF . #x7BAF)
                (#x8FD2C0 . #x7BB0)
                (#x8FD2C1 . #x7BB2)
                (#x8FD2C2 . #x7BB5)
                (#x8FD2C3 . #x7BB6)
                (#x8FD2C4 . #x7BBA)
                (#x8FD2C5 . #x7BBB)
                (#x8FD2C6 . #x7BBC)
                (#x8FD2C7 . #x7BBD)
                (#x8FD2C8 . #x7BC2)
                (#x8FD2C9 . #x7BC5)
                (#x8FD2CA . #x7BC8)
                (#x8FD2CB . #x7BCA)
                (#x8FD2CC . #x7BD4)
                (#x8FD2CD . #x7BD6)
                (#x8FD2CE . #x7BD7)
                (#x8FD2CF . #x7BD9)
                (#x8FD2D0 . #x7BDA)
                (#x8FD2D1 . #x7BDB)
                (#x8FD2D2 . #x7BE8)
                (#x8FD2D3 . #x7BEA)
                (#x8FD2D4 . #x7BF2)
                (#x8FD2D5 . #x7BF4)
                (#x8FD2D6 . #x7BF5)
                (#x8FD2D7 . #x7BF8)
                (#x8FD2D8 . #x7BF9)
                (#x8FD2D9 . #x7BFA)
                (#x8FD2DA . #x7BFC)
                (#x8FD2DB . #x7BFE)
                (#x8FD2DC . #x7C01)
                (#x8FD2DD . #x7C02)
                (#x8FD2DE . #x7C03)
                (#x8FD2DF . #x7C04)
                (#x8FD2E0 . #x7C06)
                (#x8FD2E1 . #x7C09)
                (#x8FD2E2 . #x7C0B)
                (#x8FD2E3 . #x7C0C)
                (#x8FD2E4 . #x7C0E)
                (#x8FD2E5 . #x7C0F)
                (#x8FD2E6 . #x7C19)
                (#x8FD2E7 . #x7C1B)
                (#x8FD2E8 . #x7C20)
                (#x8FD2E9 . #x7C25)
                (#x8FD2EA . #x7C26)
                (#x8FD2EB . #x7C28)
                (#x8FD2EC . #x7C2C)
                (#x8FD2ED . #x7C31)
                (#x8FD2EE . #x7C33)
                (#x8FD2EF . #x7C34)
                (#x8FD2F0 . #x7C36)
                (#x8FD2F1 . #x7C39)
                (#x8FD2F2 . #x7C3A)
                (#x8FD2F3 . #x7C46)
                (#x8FD2F4 . #x7C4A)
                (#x8FD2F5 . #x7C55)
                (#x8FD2F6 . #x7C51)
                (#x8FD2F7 . #x7C52)
                (#x8FD2F8 . #x7C53)
                (#x8FD2F9 . #x7C59)
                (#x8FD2FA . #x7C5A)
                (#x8FD2FB . #x7C5B)
                (#x8FD2FC . #x7C5C)
                (#x8FD2FD . #x7C5D)
                (#x8FD2FE . #x7C5E)
                (#x8FD3A1 . #x7C61)
                (#x8FD3A2 . #x7C63)
                (#x8FD3A3 . #x7C67)
                (#x8FD3A4 . #x7C69)
                (#x8FD3A5 . #x7C6D)
                (#x8FD3A6 . #x7C6E)
                (#x8FD3A7 . #x7C70)
                (#x8FD3A8 . #x7C72)
                (#x8FD3A9 . #x7C79)
                (#x8FD3AA . #x7C7C)
                (#x8FD3AB . #x7C7D)
                (#x8FD3AC . #x7C86)
                (#x8FD3AD . #x7C87)
                (#x8FD3AE . #x7C8F)
                (#x8FD3AF . #x7C94)
                (#x8FD3B0 . #x7C9E)
                (#x8FD3B1 . #x7CA0)
                (#x8FD3B2 . #x7CA6)
                (#x8FD3B3 . #x7CB0)
                (#x8FD3B4 . #x7CB6)
                (#x8FD3B5 . #x7CB7)
                (#x8FD3B6 . #x7CBA)
                (#x8FD3B7 . #x7CBB)
                (#x8FD3B8 . #x7CBC)
                (#x8FD3B9 . #x7CBF)
                (#x8FD3BA . #x7CC4)
                (#x8FD3BB . #x7CC7)
                (#x8FD3BC . #x7CC8)
                (#x8FD3BD . #x7CC9)
                (#x8FD3BE . #x7CCD)
                (#x8FD3BF . #x7CCF)
                (#x8FD3C0 . #x7CD3)
                (#x8FD3C1 . #x7CD4)
                (#x8FD3C2 . #x7CD5)
                (#x8FD3C3 . #x7CD7)
                (#x8FD3C4 . #x7CD9)
                (#x8FD3C5 . #x7CDA)
                (#x8FD3C6 . #x7CDD)
                (#x8FD3C7 . #x7CE6)
                (#x8FD3C8 . #x7CE9)
                (#x8FD3C9 . #x7CEB)
                (#x8FD3CA . #x7CF5)
                (#x8FD3CB . #x7D03)
                (#x8FD3CC . #x7D07)
                (#x8FD3CD . #x7D08)
                (#x8FD3CE . #x7D09)
                (#x8FD3CF . #x7D0F)
                (#x8FD3D0 . #x7D11)
                (#x8FD3D1 . #x7D12)
                (#x8FD3D2 . #x7D13)
                (#x8FD3D3 . #x7D16)
                (#x8FD3D4 . #x7D1D)
                (#x8FD3D5 . #x7D1E)
                (#x8FD3D6 . #x7D23)
                (#x8FD3D7 . #x7D26)
                (#x8FD3D8 . #x7D2A)
                (#x8FD3D9 . #x7D2D)
                (#x8FD3DA . #x7D31)
                (#x8FD3DB . #x7D3C)
                (#x8FD3DC . #x7D3D)
                (#x8FD3DD . #x7D3E)
                (#x8FD3DE . #x7D40)
                (#x8FD3DF . #x7D41)
                (#x8FD3E0 . #x7D47)
                (#x8FD3E1 . #x7D48)
                (#x8FD3E2 . #x7D4D)
                (#x8FD3E3 . #x7D51)
                (#x8FD3E4 . #x7D53)
                (#x8FD3E5 . #x7D57)
                (#x8FD3E6 . #x7D59)
                (#x8FD3E7 . #x7D5A)
                (#x8FD3E8 . #x7D5C)
                (#x8FD3E9 . #x7D5D)
                (#x8FD3EA . #x7D65)
                (#x8FD3EB . #x7D67)
                (#x8FD3EC . #x7D6A)
                (#x8FD3ED . #x7D70)
                (#x8FD3EE . #x7D78)
                (#x8FD3EF . #x7D7A)
                (#x8FD3F0 . #x7D7B)
                (#x8FD3F1 . #x7D7F)
                (#x8FD3F2 . #x7D81)
                (#x8FD3F3 . #x7D82)
                (#x8FD3F4 . #x7D83)
                (#x8FD3F5 . #x7D85)
                (#x8FD3F6 . #x7D86)
                (#x8FD3F7 . #x7D88)
                (#x8FD3F8 . #x7D8B)
                (#x8FD3F9 . #x7D8C)
                (#x8FD3FA . #x7D8D)
                (#x8FD3FB . #x7D91)
                (#x8FD3FC . #x7D96)
                (#x8FD3FD . #x7D97)
                (#x8FD3FE . #x7D9D)
                (#x8FD4A1 . #x7D9E)
                (#x8FD4A2 . #x7DA6)
                (#x8FD4A3 . #x7DA7)
                (#x8FD4A4 . #x7DAA)
                (#x8FD4A5 . #x7DB3)
                (#x8FD4A6 . #x7DB6)
                (#x8FD4A7 . #x7DB7)
                (#x8FD4A8 . #x7DB9)
                (#x8FD4A9 . #x7DC2)
                (#x8FD4AA . #x7DC3)
                (#x8FD4AB . #x7DC4)
                (#x8FD4AC . #x7DC5)
                (#x8FD4AD . #x7DC6)
                (#x8FD4AE . #x7DCC)
                (#x8FD4AF . #x7DCD)
                (#x8FD4B0 . #x7DCE)
                (#x8FD4B1 . #x7DD7)
                (#x8FD4B2 . #x7DD9)
                (#x8FD4B3 . #x7E00)
                (#x8FD4B4 . #x7DE2)
                (#x8FD4B5 . #x7DE5)
                (#x8FD4B6 . #x7DE6)
                (#x8FD4B7 . #x7DEA)
                (#x8FD4B8 . #x7DEB)
                (#x8FD4B9 . #x7DED)
                (#x8FD4BA . #x7DF1)
                (#x8FD4BB . #x7DF5)
                (#x8FD4BC . #x7DF6)
                (#x8FD4BD . #x7DF9)
                (#x8FD4BE . #x7DFA)
                (#x8FD4BF . #x7E08)
                (#x8FD4C0 . #x7E10)
                (#x8FD4C1 . #x7E11)
                (#x8FD4C2 . #x7E15)
                (#x8FD4C3 . #x7E17)
                (#x8FD4C4 . #x7E1C)
                (#x8FD4C5 . #x7E1D)
                (#x8FD4C6 . #x7E20)
                (#x8FD4C7 . #x7E27)
                (#x8FD4C8 . #x7E28)
                (#x8FD4C9 . #x7E2C)
                (#x8FD4CA . #x7E2D)
                (#x8FD4CB . #x7E2F)
                (#x8FD4CC . #x7E33)
                (#x8FD4CD . #x7E36)
                (#x8FD4CE . #x7E3F)
                (#x8FD4CF . #x7E44)
                (#x8FD4D0 . #x7E45)
                (#x8FD4D1 . #x7E47)
                (#x8FD4D2 . #x7E4E)
                (#x8FD4D3 . #x7E50)
                (#x8FD4D4 . #x7E52)
                (#x8FD4D5 . #x7E58)
                (#x8FD4D6 . #x7E5F)
                (#x8FD4D7 . #x7E61)
                (#x8FD4D8 . #x7E62)
                (#x8FD4D9 . #x7E65)
                (#x8FD4DA . #x7E6B)
                (#x8FD4DB . #x7E6E)
                (#x8FD4DC . #x7E6F)
                (#x8FD4DD . #x7E73)
                (#x8FD4DE . #x7E78)
                (#x8FD4DF . #x7E7E)
                (#x8FD4E0 . #x7E81)
                (#x8FD4E1 . #x7E86)
                (#x8FD4E2 . #x7E87)
                (#x8FD4E3 . #x7E8A)
                (#x8FD4E4 . #x7E8D)
                (#x8FD4E5 . #x7E91)
                (#x8FD4E6 . #x7E95)
                (#x8FD4E7 . #x7E98)
                (#x8FD4E8 . #x7E9A)
                (#x8FD4E9 . #x7E9D)
                (#x8FD4EA . #x7E9E)
                (#x8FD4EB . #x7F3C)
                (#x8FD4EC . #x7F3B)
                (#x8FD4ED . #x7F3D)
                (#x8FD4EE . #x7F3E)
                (#x8FD4EF . #x7F3F)
                (#x8FD4F0 . #x7F43)
                (#x8FD4F1 . #x7F44)
                (#x8FD4F2 . #x7F47)
                (#x8FD4F3 . #x7F4F)
                (#x8FD4F4 . #x7F52)
                (#x8FD4F5 . #x7F53)
                (#x8FD4F6 . #x7F5B)
                (#x8FD4F7 . #x7F5C)
                (#x8FD4F8 . #x7F5D)
                (#x8FD4F9 . #x7F61)
                (#x8FD4FA . #x7F63)
                (#x8FD4FB . #x7F64)
                (#x8FD4FC . #x7F65)
                (#x8FD4FD . #x7F66)
                (#x8FD4FE . #x7F6D)
                (#x8FD5A1 . #x7F71)
                (#x8FD5A2 . #x7F7D)
                (#x8FD5A3 . #x7F7E)
                (#x8FD5A4 . #x7F7F)
                (#x8FD5A5 . #x7F80)
                (#x8FD5A6 . #x7F8B)
                (#x8FD5A7 . #x7F8D)
                (#x8FD5A8 . #x7F8F)
                (#x8FD5A9 . #x7F90)
                (#x8FD5AA . #x7F91)
                (#x8FD5AB . #x7F96)
                (#x8FD5AC . #x7F97)
                (#x8FD5AD . #x7F9C)
                (#x8FD5AE . #x7FA1)
                (#x8FD5AF . #x7FA2)
                (#x8FD5B0 . #x7FA6)
                (#x8FD5B1 . #x7FAA)
                (#x8FD5B2 . #x7FAD)
                (#x8FD5B3 . #x7FB4)
                (#x8FD5B4 . #x7FBC)
                (#x8FD5B5 . #x7FBF)
                (#x8FD5B6 . #x7FC0)
                (#x8FD5B7 . #x7FC3)
                (#x8FD5B8 . #x7FC8)
                (#x8FD5B9 . #x7FCE)
                (#x8FD5BA . #x7FCF)
                (#x8FD5BB . #x7FDB)
                (#x8FD5BC . #x7FDF)
                (#x8FD5BD . #x7FE3)
                (#x8FD5BE . #x7FE5)
                (#x8FD5BF . #x7FE8)
                (#x8FD5C0 . #x7FEC)
                (#x8FD5C1 . #x7FEE)
                (#x8FD5C2 . #x7FEF)
                (#x8FD5C3 . #x7FF2)
                (#x8FD5C4 . #x7FFA)
                (#x8FD5C5 . #x7FFD)
                (#x8FD5C6 . #x7FFE)
                (#x8FD5C7 . #x7FFF)
                (#x8FD5C8 . #x8007)
                (#x8FD5C9 . #x8008)
                (#x8FD5CA . #x800A)
                (#x8FD5CB . #x800D)
                (#x8FD5CC . #x800E)
                (#x8FD5CD . #x800F)
                (#x8FD5CE . #x8011)
                (#x8FD5CF . #x8013)
                (#x8FD5D0 . #x8014)
                (#x8FD5D1 . #x8016)
                (#x8FD5D2 . #x801D)
                (#x8FD5D3 . #x801E)
                (#x8FD5D4 . #x801F)
                (#x8FD5D5 . #x8020)
                (#x8FD5D6 . #x8024)
                (#x8FD5D7 . #x8026)
                (#x8FD5D8 . #x802C)
                (#x8FD5D9 . #x802E)
                (#x8FD5DA . #x8030)
                (#x8FD5DB . #x8034)
                (#x8FD5DC . #x8035)
                (#x8FD5DD . #x8037)
                (#x8FD5DE . #x8039)
                (#x8FD5DF . #x803A)
                (#x8FD5E0 . #x803C)
                (#x8FD5E1 . #x803E)
                (#x8FD5E2 . #x8040)
                (#x8FD5E3 . #x8044)
                (#x8FD5E4 . #x8060)
                (#x8FD5E5 . #x8064)
                (#x8FD5E6 . #x8066)
                (#x8FD5E7 . #x806D)
                (#x8FD5E8 . #x8071)
                (#x8FD5E9 . #x8075)
                (#x8FD5EA . #x8081)
                (#x8FD5EB . #x8088)
                (#x8FD5EC . #x808E)
                (#x8FD5ED . #x809C)
                (#x8FD5EE . #x809E)
                (#x8FD5EF . #x80A6)
                (#x8FD5F0 . #x80A7)
                (#x8FD5F1 . #x80AB)
                (#x8FD5F2 . #x80B8)
                (#x8FD5F3 . #x80B9)
                (#x8FD5F4 . #x80C8)
                (#x8FD5F5 . #x80CD)
                (#x8FD5F6 . #x80CF)
                (#x8FD5F7 . #x80D2)
                (#x8FD5F8 . #x80D4)
                (#x8FD5F9 . #x80D5)
                (#x8FD5FA . #x80D7)
                (#x8FD5FB . #x80D8)
                (#x8FD5FC . #x80E0)
                (#x8FD5FD . #x80ED)
                (#x8FD5FE . #x80EE)
                (#x8FD6A1 . #x80F0)
                (#x8FD6A2 . #x80F2)
                (#x8FD6A3 . #x80F3)
                (#x8FD6A4 . #x80F6)
                (#x8FD6A5 . #x80F9)
                (#x8FD6A6 . #x80FA)
                (#x8FD6A7 . #x80FE)
                (#x8FD6A8 . #x8103)
                (#x8FD6A9 . #x810B)
                (#x8FD6AA . #x8116)
                (#x8FD6AB . #x8117)
                (#x8FD6AC . #x8118)
                (#x8FD6AD . #x811C)
                (#x8FD6AE . #x811E)
                (#x8FD6AF . #x8120)
                (#x8FD6B0 . #x8124)
                (#x8FD6B1 . #x8127)
                (#x8FD6B2 . #x812C)
                (#x8FD6B3 . #x8130)
                (#x8FD6B4 . #x8135)
                (#x8FD6B5 . #x813A)
                (#x8FD6B6 . #x813C)
                (#x8FD6B7 . #x8145)
                (#x8FD6B8 . #x8147)
                (#x8FD6B9 . #x814A)
                (#x8FD6BA . #x814C)
                (#x8FD6BB . #x8152)
                (#x8FD6BC . #x8157)
                (#x8FD6BD . #x8160)
                (#x8FD6BE . #x8161)
                (#x8FD6BF . #x8167)
                (#x8FD6C0 . #x8168)
                (#x8FD6C1 . #x8169)
                (#x8FD6C2 . #x816D)
                (#x8FD6C3 . #x816F)
                (#x8FD6C4 . #x8177)
                (#x8FD6C5 . #x8181)
                (#x8FD6C6 . #x8190)
                (#x8FD6C7 . #x8184)
                (#x8FD6C8 . #x8185)
                (#x8FD6C9 . #x8186)
                (#x8FD6CA . #x818B)
                (#x8FD6CB . #x818E)
                (#x8FD6CC . #x8196)
                (#x8FD6CD . #x8198)
                (#x8FD6CE . #x819B)
                (#x8FD6CF . #x819E)
                (#x8FD6D0 . #x81A2)
                (#x8FD6D1 . #x81AE)
                (#x8FD6D2 . #x81B2)
                (#x8FD6D3 . #x81B4)
                (#x8FD6D4 . #x81BB)
                (#x8FD6D5 . #x81CB)
                (#x8FD6D6 . #x81C3)
                (#x8FD6D7 . #x81C5)
                (#x8FD6D8 . #x81CA)
                (#x8FD6D9 . #x81CE)
                (#x8FD6DA . #x81CF)
                (#x8FD6DB . #x81D5)
                (#x8FD6DC . #x81D7)
                (#x8FD6DD . #x81DB)
                (#x8FD6DE . #x81DD)
                (#x8FD6DF . #x81DE)
                (#x8FD6E0 . #x81E1)
                (#x8FD6E1 . #x81E4)
                (#x8FD6E2 . #x81EB)
                (#x8FD6E3 . #x81EC)
                (#x8FD6E4 . #x81F0)
                (#x8FD6E5 . #x81F1)
                (#x8FD6E6 . #x81F2)
                (#x8FD6E7 . #x81F5)
                (#x8FD6E8 . #x81F6)
                (#x8FD6E9 . #x81F8)
                (#x8FD6EA . #x81F9)
                (#x8FD6EB . #x81FD)
                (#x8FD6EC . #x81FF)
                (#x8FD6ED . #x8200)
                (#x8FD6EE . #x8203)
                (#x8FD6EF . #x820F)
                (#x8FD6F0 . #x8213)
                (#x8FD6F1 . #x8214)
                (#x8FD6F2 . #x8219)
                (#x8FD6F3 . #x821A)
                (#x8FD6F4 . #x821D)
                (#x8FD6F5 . #x8221)
                (#x8FD6F6 . #x8222)
                (#x8FD6F7 . #x8228)
                (#x8FD6F8 . #x8232)
                (#x8FD6F9 . #x8234)
                (#x8FD6FA . #x823A)
                (#x8FD6FB . #x8243)
                (#x8FD6FC . #x8244)
                (#x8FD6FD . #x8245)
                (#x8FD6FE . #x8246)
                (#x8FD7A1 . #x824B)
                (#x8FD7A2 . #x824E)
                (#x8FD7A3 . #x824F)
                (#x8FD7A4 . #x8251)
                (#x8FD7A5 . #x8256)
                (#x8FD7A6 . #x825C)
                (#x8FD7A7 . #x8260)
                (#x8FD7A8 . #x8263)
                (#x8FD7A9 . #x8267)
                (#x8FD7AA . #x826D)
                (#x8FD7AB . #x8274)
                (#x8FD7AC . #x827B)
                (#x8FD7AD . #x827D)
                (#x8FD7AE . #x827F)
                (#x8FD7AF . #x8280)
                (#x8FD7B0 . #x8281)
                (#x8FD7B1 . #x8283)
                (#x8FD7B2 . #x8284)
                (#x8FD7B3 . #x8287)
                (#x8FD7B4 . #x8289)
                (#x8FD7B5 . #x828A)
                (#x8FD7B6 . #x828E)
                (#x8FD7B7 . #x8291)
                (#x8FD7B8 . #x8294)
                (#x8FD7B9 . #x8296)
                (#x8FD7BA . #x8298)
                (#x8FD7BB . #x829A)
                (#x8FD7BC . #x829B)
                (#x8FD7BD . #x82A0)
                (#x8FD7BE . #x82A1)
                (#x8FD7BF . #x82A3)
                (#x8FD7C0 . #x82A4)
                (#x8FD7C1 . #x82A7)
                (#x8FD7C2 . #x82A8)
                (#x8FD7C3 . #x82A9)
                (#x8FD7C4 . #x82AA)
                (#x8FD7C5 . #x82AE)
                (#x8FD7C6 . #x82B0)
                (#x8FD7C7 . #x82B2)
                (#x8FD7C8 . #x82B4)
                (#x8FD7C9 . #x82B7)
                (#x8FD7CA . #x82BA)
                (#x8FD7CB . #x82BC)
                (#x8FD7CC . #x82BE)
                (#x8FD7CD . #x82BF)
                (#x8FD7CE . #x82C6)
                (#x8FD7CF . #x82D0)
                (#x8FD7D0 . #x82D5)
                (#x8FD7D1 . #x82DA)
                (#x8FD7D2 . #x82E0)
                (#x8FD7D3 . #x82E2)
                (#x8FD7D4 . #x82E4)
                (#x8FD7D5 . #x82E8)
                (#x8FD7D6 . #x82EA)
                (#x8FD7D7 . #x82ED)
                (#x8FD7D8 . #x82EF)
                (#x8FD7D9 . #x82F6)
                (#x8FD7DA . #x82F7)
                (#x8FD7DB . #x82FD)
                (#x8FD7DC . #x82FE)
                (#x8FD7DD . #x8300)
                (#x8FD7DE . #x8301)
                (#x8FD7DF . #x8307)
                (#x8FD7E0 . #x8308)
                (#x8FD7E1 . #x830A)
                (#x8FD7E2 . #x830B)
                (#x8FD7E3 . #x8354)
                (#x8FD7E4 . #x831B)
                (#x8FD7E5 . #x831D)
                (#x8FD7E6 . #x831E)
                (#x8FD7E7 . #x831F)
                (#x8FD7E8 . #x8321)
                (#x8FD7E9 . #x8322)
                (#x8FD7EA . #x832C)
                (#x8FD7EB . #x832D)
                (#x8FD7EC . #x832E)
                (#x8FD7ED . #x8330)
                (#x8FD7EE . #x8333)
                (#x8FD7EF . #x8337)
                (#x8FD7F0 . #x833A)
                (#x8FD7F1 . #x833C)
                (#x8FD7F2 . #x833D)
                (#x8FD7F3 . #x8342)
                (#x8FD7F4 . #x8343)
                (#x8FD7F5 . #x8344)
                (#x8FD7F6 . #x8347)
                (#x8FD7F7 . #x834D)
                (#x8FD7F8 . #x834E)
                (#x8FD7F9 . #x8351)
                (#x8FD7FA . #x8355)
                (#x8FD7FB . #x8356)
                (#x8FD7FC . #x8357)
                (#x8FD7FD . #x8370)
                (#x8FD7FE . #x8378)
                (#x8FD8A1 . #x837D)
                (#x8FD8A2 . #x837F)
                (#x8FD8A3 . #x8380)
                (#x8FD8A4 . #x8382)
                (#x8FD8A5 . #x8384)
                (#x8FD8A6 . #x8386)
                (#x8FD8A7 . #x838D)
                (#x8FD8A8 . #x8392)
                (#x8FD8A9 . #x8394)
                (#x8FD8AA . #x8395)
                (#x8FD8AB . #x8398)
                (#x8FD8AC . #x8399)
                (#x8FD8AD . #x839B)
                (#x8FD8AE . #x839C)
                (#x8FD8AF . #x839D)
                (#x8FD8B0 . #x83A6)
                (#x8FD8B1 . #x83A7)
                (#x8FD8B2 . #x83A9)
                (#x8FD8B3 . #x83AC)
                (#x8FD8B4 . #x83BE)
                (#x8FD8B5 . #x83BF)
                (#x8FD8B6 . #x83C0)
                (#x8FD8B7 . #x83C7)
                (#x8FD8B8 . #x83C9)
                (#x8FD8B9 . #x83CF)
                (#x8FD8BA . #x83D0)
                (#x8FD8BB . #x83D1)
                (#x8FD8BC . #x83D4)
                (#x8FD8BD . #x83DD)
                (#x8FD8BE . #x8353)
                (#x8FD8BF . #x83E8)
                (#x8FD8C0 . #x83EA)
                (#x8FD8C1 . #x83F6)
                (#x8FD8C2 . #x83F8)
                (#x8FD8C3 . #x83F9)
                (#x8FD8C4 . #x83FC)
                (#x8FD8C5 . #x8401)
                (#x8FD8C6 . #x8406)
                (#x8FD8C7 . #x840A)
                (#x8FD8C8 . #x840F)
                (#x8FD8C9 . #x8411)
                (#x8FD8CA . #x8415)
                (#x8FD8CB . #x8419)
                (#x8FD8CC . #x83AD)
                (#x8FD8CD . #x842F)
                (#x8FD8CE . #x8439)
                (#x8FD8CF . #x8445)
                (#x8FD8D0 . #x8447)
                (#x8FD8D1 . #x8448)
                (#x8FD8D2 . #x844A)
                (#x8FD8D3 . #x844D)
                (#x8FD8D4 . #x844F)
                (#x8FD8D5 . #x8451)
                (#x8FD8D6 . #x8452)
                (#x8FD8D7 . #x8456)
                (#x8FD8D8 . #x8458)
                (#x8FD8D9 . #x8459)
                (#x8FD8DA . #x845A)
                (#x8FD8DB . #x845C)
                (#x8FD8DC . #x8460)
                (#x8FD8DD . #x8464)
                (#x8FD8DE . #x8465)
                (#x8FD8DF . #x8467)
                (#x8FD8E0 . #x846A)
                (#x8FD8E1 . #x8470)
                (#x8FD8E2 . #x8473)
                (#x8FD8E3 . #x8474)
                (#x8FD8E4 . #x8476)
                (#x8FD8E5 . #x8478)
                (#x8FD8E6 . #x847C)
                (#x8FD8E7 . #x847D)
                (#x8FD8E8 . #x8481)
                (#x8FD8E9 . #x8485)
                (#x8FD8EA . #x8492)
                (#x8FD8EB . #x8493)
                (#x8FD8EC . #x8495)
                (#x8FD8ED . #x849E)
                (#x8FD8EE . #x84A6)
                (#x8FD8EF . #x84A8)
                (#x8FD8F0 . #x84A9)
                (#x8FD8F1 . #x84AA)
                (#x8FD8F2 . #x84AF)
                (#x8FD8F3 . #x84B1)
                (#x8FD8F4 . #x84B4)
                (#x8FD8F5 . #x84BA)
                (#x8FD8F6 . #x84BD)
                (#x8FD8F7 . #x84BE)
                (#x8FD8F8 . #x84C0)
                (#x8FD8F9 . #x84C2)
                (#x8FD8FA . #x84C7)
                (#x8FD8FB . #x84C8)
                (#x8FD8FC . #x84CC)
                (#x8FD8FD . #x84CF)
                (#x8FD8FE . #x84D3)
                (#x8FD9A1 . #x84DC)
                (#x8FD9A2 . #x84E7)
                (#x8FD9A3 . #x84EA)
                (#x8FD9A4 . #x84EF)
                (#x8FD9A5 . #x84F0)
                (#x8FD9A6 . #x84F1)
                (#x8FD9A7 . #x84F2)
                (#x8FD9A8 . #x84F7)
                (#x8FD9A9 . #x8532)
                (#x8FD9AA . #x84FA)
                (#x8FD9AB . #x84FB)
                (#x8FD9AC . #x84FD)
                (#x8FD9AD . #x8502)
                (#x8FD9AE . #x8503)
                (#x8FD9AF . #x8507)
                (#x8FD9B0 . #x850C)
                (#x8FD9B1 . #x850E)
                (#x8FD9B2 . #x8510)
                (#x8FD9B3 . #x851C)
                (#x8FD9B4 . #x851E)
                (#x8FD9B5 . #x8522)
                (#x8FD9B6 . #x8523)
                (#x8FD9B7 . #x8524)
                (#x8FD9B8 . #x8525)
                (#x8FD9B9 . #x8527)
                (#x8FD9BA . #x852A)
                (#x8FD9BB . #x852B)
                (#x8FD9BC . #x852F)
                (#x8FD9BD . #x8533)
                (#x8FD9BE . #x8534)
                (#x8FD9BF . #x8536)
                (#x8FD9C0 . #x853F)
                (#x8FD9C1 . #x8546)
                (#x8FD9C2 . #x854F)
                (#x8FD9C3 . #x8550)
                (#x8FD9C4 . #x8551)
                (#x8FD9C5 . #x8552)
                (#x8FD9C6 . #x8553)
                (#x8FD9C7 . #x8556)
                (#x8FD9C8 . #x8559)
                (#x8FD9C9 . #x855C)
                (#x8FD9CA . #x855D)
                (#x8FD9CB . #x855E)
                (#x8FD9CC . #x855F)
                (#x8FD9CD . #x8560)
                (#x8FD9CE . #x8561)
                (#x8FD9CF . #x8562)
                (#x8FD9D0 . #x8564)
                (#x8FD9D1 . #x856B)
                (#x8FD9D2 . #x856F)
                (#x8FD9D3 . #x8579)
                (#x8FD9D4 . #x857A)
                (#x8FD9D5 . #x857B)
                (#x8FD9D6 . #x857D)
                (#x8FD9D7 . #x857F)
                (#x8FD9D8 . #x8581)
                (#x8FD9D9 . #x8585)
                (#x8FD9DA . #x8586)
                (#x8FD9DB . #x8589)
                (#x8FD9DC . #x858B)
                (#x8FD9DD . #x858C)
                (#x8FD9DE . #x858F)
                (#x8FD9DF . #x8593)
                (#x8FD9E0 . #x8598)
                (#x8FD9E1 . #x859D)
                (#x8FD9E2 . #x859F)
                (#x8FD9E3 . #x85A0)
                (#x8FD9E4 . #x85A2)
                (#x8FD9E5 . #x85A5)
                (#x8FD9E6 . #x85A7)
                (#x8FD9E7 . #x85B4)
                (#x8FD9E8 . #x85B6)
                (#x8FD9E9 . #x85B7)
                (#x8FD9EA . #x85B8)
                (#x8FD9EB . #x85BC)
                (#x8FD9EC . #x85BD)
                (#x8FD9ED . #x85BE)
                (#x8FD9EE . #x85BF)
                (#x8FD9EF . #x85C2)
                (#x8FD9F0 . #x85C7)
                (#x8FD9F1 . #x85CA)
                (#x8FD9F2 . #x85CB)
                (#x8FD9F3 . #x85CE)
                (#x8FD9F4 . #x85AD)
                (#x8FD9F5 . #x85D8)
                (#x8FD9F6 . #x85DA)
                (#x8FD9F7 . #x85DF)
                (#x8FD9F8 . #x85E0)
                (#x8FD9F9 . #x85E6)
                (#x8FD9FA . #x85E8)
                (#x8FD9FB . #x85ED)
                (#x8FD9FC . #x85F3)
                (#x8FD9FD . #x85F6)
                (#x8FD9FE . #x85FC)
                (#x8FDAA1 . #x85FF)
                (#x8FDAA2 . #x8600)
                (#x8FDAA3 . #x8604)
                (#x8FDAA4 . #x8605)
                (#x8FDAA5 . #x860D)
                (#x8FDAA6 . #x860E)
                (#x8FDAA7 . #x8610)
                (#x8FDAA8 . #x8611)
                (#x8FDAA9 . #x8612)
                (#x8FDAAA . #x8618)
                (#x8FDAAB . #x8619)
                (#x8FDAAC . #x861B)
                (#x8FDAAD . #x861E)
                (#x8FDAAE . #x8621)
                (#x8FDAAF . #x8627)
                (#x8FDAB0 . #x8629)
                (#x8FDAB1 . #x8636)
                (#x8FDAB2 . #x8638)
                (#x8FDAB3 . #x863A)
                (#x8FDAB4 . #x863C)
                (#x8FDAB5 . #x863D)
                (#x8FDAB6 . #x8640)
                (#x8FDAB7 . #x8642)
                (#x8FDAB8 . #x8646)
                (#x8FDAB9 . #x8652)
                (#x8FDABA . #x8653)
                (#x8FDABB . #x8656)
                (#x8FDABC . #x8657)
                (#x8FDABD . #x8658)
                (#x8FDABE . #x8659)
                (#x8FDABF . #x865D)
                (#x8FDAC0 . #x8660)
                (#x8FDAC1 . #x8661)
                (#x8FDAC2 . #x8662)
                (#x8FDAC3 . #x8663)
                (#x8FDAC4 . #x8664)
                (#x8FDAC5 . #x8669)
                (#x8FDAC6 . #x866C)
                (#x8FDAC7 . #x866F)
                (#x8FDAC8 . #x8675)
                (#x8FDAC9 . #x8676)
                (#x8FDACA . #x8677)
                (#x8FDACB . #x867A)
                (#x8FDACC . #x868D)
                (#x8FDACD . #x8691)
                (#x8FDACE . #x8696)
                (#x8FDACF . #x8698)
                (#x8FDAD0 . #x869A)
                (#x8FDAD1 . #x869C)
                (#x8FDAD2 . #x86A1)
                (#x8FDAD3 . #x86A6)
                (#x8FDAD4 . #x86A7)
                (#x8FDAD5 . #x86A8)
                (#x8FDAD6 . #x86AD)
                (#x8FDAD7 . #x86B1)
                (#x8FDAD8 . #x86B3)
                (#x8FDAD9 . #x86B4)
                (#x8FDADA . #x86B5)
                (#x8FDADB . #x86B7)
                (#x8FDADC . #x86B8)
                (#x8FDADD . #x86B9)
                (#x8FDADE . #x86BF)
                (#x8FDADF . #x86C0)
                (#x8FDAE0 . #x86C1)
                (#x8FDAE1 . #x86C3)
                (#x8FDAE2 . #x86C5)
                (#x8FDAE3 . #x86D1)
                (#x8FDAE4 . #x86D2)
                (#x8FDAE5 . #x86D5)
                (#x8FDAE6 . #x86D7)
                (#x8FDAE7 . #x86DA)
                (#x8FDAE8 . #x86DC)
                (#x8FDAE9 . #x86E0)
                (#x8FDAEA . #x86E3)
                (#x8FDAEB . #x86E5)
                (#x8FDAEC . #x86E7)
                (#x8FDAED . #x8688)
                (#x8FDAEE . #x86FA)
                (#x8FDAEF . #x86FC)
                (#x8FDAF0 . #x86FD)
                (#x8FDAF1 . #x8704)
                (#x8FDAF2 . #x8705)
                (#x8FDAF3 . #x8707)
                (#x8FDAF4 . #x870B)
                (#x8FDAF5 . #x870E)
                (#x8FDAF6 . #x870F)
                (#x8FDAF7 . #x8710)
                (#x8FDAF8 . #x8713)
                (#x8FDAF9 . #x8714)
                (#x8FDAFA . #x8719)
                (#x8FDAFB . #x871E)
                (#x8FDAFC . #x871F)
                (#x8FDAFD . #x8721)
                (#x8FDAFE . #x8723)
                (#x8FDBA1 . #x8728)
                (#x8FDBA2 . #x872E)
                (#x8FDBA3 . #x872F)
                (#x8FDBA4 . #x8731)
                (#x8FDBA5 . #x8732)
                (#x8FDBA6 . #x8739)
                (#x8FDBA7 . #x873A)
                (#x8FDBA8 . #x873C)
                (#x8FDBA9 . #x873D)
                (#x8FDBAA . #x873E)
                (#x8FDBAB . #x8740)
                (#x8FDBAC . #x8743)
                (#x8FDBAD . #x8745)
                (#x8FDBAE . #x874D)
                (#x8FDBAF . #x8758)
                (#x8FDBB0 . #x875D)
                (#x8FDBB1 . #x8761)
                (#x8FDBB2 . #x8764)
                (#x8FDBB3 . #x8765)
                (#x8FDBB4 . #x876F)
                (#x8FDBB5 . #x8771)
                (#x8FDBB6 . #x8772)
                (#x8FDBB7 . #x877B)
                (#x8FDBB8 . #x8783)
                (#x8FDBB9 . #x8784)
                (#x8FDBBA . #x8785)
                (#x8FDBBB . #x8786)
                (#x8FDBBC . #x8787)
                (#x8FDBBD . #x8788)
                (#x8FDBBE . #x8789)
                (#x8FDBBF . #x878B)
                (#x8FDBC0 . #x878C)
                (#x8FDBC1 . #x8790)
                (#x8FDBC2 . #x8793)
                (#x8FDBC3 . #x8795)
                (#x8FDBC4 . #x8797)
                (#x8FDBC5 . #x8798)
                (#x8FDBC6 . #x8799)
                (#x8FDBC7 . #x879E)
                (#x8FDBC8 . #x87A0)
                (#x8FDBC9 . #x87A3)
                (#x8FDBCA . #x87A7)
                (#x8FDBCB . #x87AC)
                (#x8FDBCC . #x87AD)
                (#x8FDBCD . #x87AE)
                (#x8FDBCE . #x87B1)
                (#x8FDBCF . #x87B5)
                (#x8FDBD0 . #x87BE)
                (#x8FDBD1 . #x87BF)
                (#x8FDBD2 . #x87C1)
                (#x8FDBD3 . #x87C8)
                (#x8FDBD4 . #x87C9)
                (#x8FDBD5 . #x87CA)
                (#x8FDBD6 . #x87CE)
                (#x8FDBD7 . #x87D5)
                (#x8FDBD8 . #x87D6)
                (#x8FDBD9 . #x87D9)
                (#x8FDBDA . #x87DA)
                (#x8FDBDB . #x87DC)
                (#x8FDBDC . #x87DF)
                (#x8FDBDD . #x87E2)
                (#x8FDBDE . #x87E3)
                (#x8FDBDF . #x87E4)
                (#x8FDBE0 . #x87EA)
                (#x8FDBE1 . #x87EB)
                (#x8FDBE2 . #x87ED)
                (#x8FDBE3 . #x87F1)
                (#x8FDBE4 . #x87F3)
                (#x8FDBE5 . #x87F8)
                (#x8FDBE6 . #x87FA)
                (#x8FDBE7 . #x87FF)
                (#x8FDBE8 . #x8801)
                (#x8FDBE9 . #x8803)
                (#x8FDBEA . #x8806)
                (#x8FDBEB . #x8809)
                (#x8FDBEC . #x880A)
                (#x8FDBED . #x880B)
                (#x8FDBEE . #x8810)
                (#x8FDBEF . #x8819)
                (#x8FDBF0 . #x8812)
                (#x8FDBF1 . #x8813)
                (#x8FDBF2 . #x8814)
                (#x8FDBF3 . #x8818)
                (#x8FDBF4 . #x881A)
                (#x8FDBF5 . #x881B)
                (#x8FDBF6 . #x881C)
                (#x8FDBF7 . #x881E)
                (#x8FDBF8 . #x881F)
                (#x8FDBF9 . #x8828)
                (#x8FDBFA . #x882D)
                (#x8FDBFB . #x882E)
                (#x8FDBFC . #x8830)
                (#x8FDBFD . #x8832)
                (#x8FDBFE . #x8835)
                (#x8FDCA1 . #x883A)
                (#x8FDCA2 . #x883C)
                (#x8FDCA3 . #x8841)
                (#x8FDCA4 . #x8843)
                (#x8FDCA5 . #x8845)
                (#x8FDCA6 . #x8848)
                (#x8FDCA7 . #x8849)
                (#x8FDCA8 . #x884A)
                (#x8FDCA9 . #x884B)
                (#x8FDCAA . #x884E)
                (#x8FDCAB . #x8851)
                (#x8FDCAC . #x8855)
                (#x8FDCAD . #x8856)
                (#x8FDCAE . #x8858)
                (#x8FDCAF . #x885A)
                (#x8FDCB0 . #x885C)
                (#x8FDCB1 . #x885F)
                (#x8FDCB2 . #x8860)
                (#x8FDCB3 . #x8864)
                (#x8FDCB4 . #x8869)
                (#x8FDCB5 . #x8871)
                (#x8FDCB6 . #x8879)
                (#x8FDCB7 . #x887B)
                (#x8FDCB8 . #x8880)
                (#x8FDCB9 . #x8898)
                (#x8FDCBA . #x889A)
                (#x8FDCBB . #x889B)
                (#x8FDCBC . #x889C)
                (#x8FDCBD . #x889F)
                (#x8FDCBE . #x88A0)
                (#x8FDCBF . #x88A8)
                (#x8FDCC0 . #x88AA)
                (#x8FDCC1 . #x88BA)
                (#x8FDCC2 . #x88BD)
                (#x8FDCC3 . #x88BE)
                (#x8FDCC4 . #x88C0)
                (#x8FDCC5 . #x88CA)
                (#x8FDCC6 . #x88CB)
                (#x8FDCC7 . #x88CC)
                (#x8FDCC8 . #x88CD)
                (#x8FDCC9 . #x88CE)
                (#x8FDCCA . #x88D1)
                (#x8FDCCB . #x88D2)
                (#x8FDCCC . #x88D3)
                (#x8FDCCD . #x88DB)
                (#x8FDCCE . #x88DE)
                (#x8FDCCF . #x88E7)
                (#x8FDCD0 . #x88EF)
                (#x8FDCD1 . #x88F0)
                (#x8FDCD2 . #x88F1)
                (#x8FDCD3 . #x88F5)
                (#x8FDCD4 . #x88F7)
                (#x8FDCD5 . #x8901)
                (#x8FDCD6 . #x8906)
                (#x8FDCD7 . #x890D)
                (#x8FDCD8 . #x890E)
                (#x8FDCD9 . #x890F)
                (#x8FDCDA . #x8915)
                (#x8FDCDB . #x8916)
                (#x8FDCDC . #x8918)
                (#x8FDCDD . #x8919)
                (#x8FDCDE . #x891A)
                (#x8FDCDF . #x891C)
                (#x8FDCE0 . #x8920)
                (#x8FDCE1 . #x8926)
                (#x8FDCE2 . #x8927)
                (#x8FDCE3 . #x8928)
                (#x8FDCE4 . #x8930)
                (#x8FDCE5 . #x8931)
                (#x8FDCE6 . #x8932)
                (#x8FDCE7 . #x8935)
                (#x8FDCE8 . #x8939)
                (#x8FDCE9 . #x893A)
                (#x8FDCEA . #x893E)
                (#x8FDCEB . #x8940)
                (#x8FDCEC . #x8942)
                (#x8FDCED . #x8945)
                (#x8FDCEE . #x8946)
                (#x8FDCEF . #x8949)
                (#x8FDCF0 . #x894F)
                (#x8FDCF1 . #x8952)
                (#x8FDCF2 . #x8957)
                (#x8FDCF3 . #x895A)
                (#x8FDCF4 . #x895B)
                (#x8FDCF5 . #x895C)
                (#x8FDCF6 . #x8961)
                (#x8FDCF7 . #x8962)
                (#x8FDCF8 . #x8963)
                (#x8FDCF9 . #x896B)
                (#x8FDCFA . #x896E)
                (#x8FDCFB . #x8970)
                (#x8FDCFC . #x8973)
                (#x8FDCFD . #x8975)
                (#x8FDCFE . #x897A)
                (#x8FDDA1 . #x897B)
                (#x8FDDA2 . #x897C)
                (#x8FDDA3 . #x897D)
                (#x8FDDA4 . #x8989)
                (#x8FDDA5 . #x898D)
                (#x8FDDA6 . #x8990)
                (#x8FDDA7 . #x8994)
                (#x8FDDA8 . #x8995)
                (#x8FDDA9 . #x899B)
                (#x8FDDAA . #x899C)
                (#x8FDDAB . #x899F)
                (#x8FDDAC . #x89A0)
                (#x8FDDAD . #x89A5)
                (#x8FDDAE . #x89B0)
                (#x8FDDAF . #x89B4)
                (#x8FDDB0 . #x89B5)
                (#x8FDDB1 . #x89B6)
                (#x8FDDB2 . #x89B7)
                (#x8FDDB3 . #x89BC)
                (#x8FDDB4 . #x89D4)
                (#x8FDDB5 . #x89D5)
                (#x8FDDB6 . #x89D6)
                (#x8FDDB7 . #x89D7)
                (#x8FDDB8 . #x89D8)
                (#x8FDDB9 . #x89E5)
                (#x8FDDBA . #x89E9)
                (#x8FDDBB . #x89EB)
                (#x8FDDBC . #x89ED)
                (#x8FDDBD . #x89F1)
                (#x8FDDBE . #x89F3)
                (#x8FDDBF . #x89F6)
                (#x8FDDC0 . #x89F9)
                (#x8FDDC1 . #x89FD)
                (#x8FDDC2 . #x89FF)
                (#x8FDDC3 . #x8A04)
                (#x8FDDC4 . #x8A05)
                (#x8FDDC5 . #x8A07)
                (#x8FDDC6 . #x8A0F)
                (#x8FDDC7 . #x8A11)
                (#x8FDDC8 . #x8A12)
                (#x8FDDC9 . #x8A14)
                (#x8FDDCA . #x8A15)
                (#x8FDDCB . #x8A1E)
                (#x8FDDCC . #x8A20)
                (#x8FDDCD . #x8A22)
                (#x8FDDCE . #x8A24)
                (#x8FDDCF . #x8A26)
                (#x8FDDD0 . #x8A2B)
                (#x8FDDD1 . #x8A2C)
                (#x8FDDD2 . #x8A2F)
                (#x8FDDD3 . #x8A35)
                (#x8FDDD4 . #x8A37)
                (#x8FDDD5 . #x8A3D)
                (#x8FDDD6 . #x8A3E)
                (#x8FDDD7 . #x8A40)
                (#x8FDDD8 . #x8A43)
                (#x8FDDD9 . #x8A45)
                (#x8FDDDA . #x8A47)
                (#x8FDDDB . #x8A49)
                (#x8FDDDC . #x8A4D)
                (#x8FDDDD . #x8A4E)
                (#x8FDDDE . #x8A53)
                (#x8FDDDF . #x8A56)
                (#x8FDDE0 . #x8A57)
                (#x8FDDE1 . #x8A58)
                (#x8FDDE2 . #x8A5C)
                (#x8FDDE3 . #x8A5D)
                (#x8FDDE4 . #x8A61)
                (#x8FDDE5 . #x8A65)
                (#x8FDDE6 . #x8A67)
                (#x8FDDE7 . #x8A75)
                (#x8FDDE8 . #x8A76)
                (#x8FDDE9 . #x8A77)
                (#x8FDDEA . #x8A79)
                (#x8FDDEB . #x8A7A)
                (#x8FDDEC . #x8A7B)
                (#x8FDDED . #x8A7E)
                (#x8FDDEE . #x8A7F)
                (#x8FDDEF . #x8A80)
                (#x8FDDF0 . #x8A83)
                (#x8FDDF1 . #x8A86)
                (#x8FDDF2 . #x8A8B)
                (#x8FDDF3 . #x8A8F)
                (#x8FDDF4 . #x8A90)
                (#x8FDDF5 . #x8A92)
                (#x8FDDF6 . #x8A96)
                (#x8FDDF7 . #x8A97)
                (#x8FDDF8 . #x8A99)
                (#x8FDDF9 . #x8A9F)
                (#x8FDDFA . #x8AA7)
                (#x8FDDFB . #x8AA9)
                (#x8FDDFC . #x8AAE)
                (#x8FDDFD . #x8AAF)
                (#x8FDDFE . #x8AB3)
                (#x8FDEA1 . #x8AB6)
                (#x8FDEA2 . #x8AB7)
                (#x8FDEA3 . #x8ABB)
                (#x8FDEA4 . #x8ABE)
                (#x8FDEA5 . #x8AC3)
                (#x8FDEA6 . #x8AC6)
                (#x8FDEA7 . #x8AC8)
                (#x8FDEA8 . #x8AC9)
                (#x8FDEA9 . #x8ACA)
                (#x8FDEAA . #x8AD1)
                (#x8FDEAB . #x8AD3)
                (#x8FDEAC . #x8AD4)
                (#x8FDEAD . #x8AD5)
                (#x8FDEAE . #x8AD7)
                (#x8FDEAF . #x8ADD)
                (#x8FDEB0 . #x8ADF)
                (#x8FDEB1 . #x8AEC)
                (#x8FDEB2 . #x8AF0)
                (#x8FDEB3 . #x8AF4)
                (#x8FDEB4 . #x8AF5)
                (#x8FDEB5 . #x8AF6)
                (#x8FDEB6 . #x8AFC)
                (#x8FDEB7 . #x8AFF)
                (#x8FDEB8 . #x8B05)
                (#x8FDEB9 . #x8B06)
                (#x8FDEBA . #x8B0B)
                (#x8FDEBB . #x8B11)
                (#x8FDEBC . #x8B1C)
                (#x8FDEBD . #x8B1E)
                (#x8FDEBE . #x8B1F)
                (#x8FDEBF . #x8B0A)
                (#x8FDEC0 . #x8B2D)
                (#x8FDEC1 . #x8B30)
                (#x8FDEC2 . #x8B37)
                (#x8FDEC3 . #x8B3C)
                (#x8FDEC4 . #x8B42)
                (#x8FDEC5 . #x8B43)
                (#x8FDEC6 . #x8B44)
                (#x8FDEC7 . #x8B45)
                (#x8FDEC8 . #x8B46)
                (#x8FDEC9 . #x8B48)
                (#x8FDECA . #x8B52)
                (#x8FDECB . #x8B53)
                (#x8FDECC . #x8B54)
                (#x8FDECD . #x8B59)
                (#x8FDECE . #x8B4D)
                (#x8FDECF . #x8B5E)
                (#x8FDED0 . #x8B63)
                (#x8FDED1 . #x8B6D)
                (#x8FDED2 . #x8B76)
                (#x8FDED3 . #x8B78)
                (#x8FDED4 . #x8B79)
                (#x8FDED5 . #x8B7C)
                (#x8FDED6 . #x8B7E)
                (#x8FDED7 . #x8B81)
                (#x8FDED8 . #x8B84)
                (#x8FDED9 . #x8B85)
                (#x8FDEDA . #x8B8B)
                (#x8FDEDB . #x8B8D)
                (#x8FDEDC . #x8B8F)
                (#x8FDEDD . #x8B94)
                (#x8FDEDE . #x8B95)
                (#x8FDEDF . #x8B9C)
                (#x8FDEE0 . #x8B9E)
                (#x8FDEE1 . #x8B9F)
                (#x8FDEE2 . #x8C38)
                (#x8FDEE3 . #x8C39)
                (#x8FDEE4 . #x8C3D)
                (#x8FDEE5 . #x8C3E)
                (#x8FDEE6 . #x8C45)
                (#x8FDEE7 . #x8C47)
                (#x8FDEE8 . #x8C49)
                (#x8FDEE9 . #x8C4B)
                (#x8FDEEA . #x8C4F)
                (#x8FDEEB . #x8C51)
                (#x8FDEEC . #x8C53)
                (#x8FDEED . #x8C54)
                (#x8FDEEE . #x8C57)
                (#x8FDEEF . #x8C58)
                (#x8FDEF0 . #x8C5B)
                (#x8FDEF1 . #x8C5D)
                (#x8FDEF2 . #x8C59)
                (#x8FDEF3 . #x8C63)
                (#x8FDEF4 . #x8C64)
                (#x8FDEF5 . #x8C66)
                (#x8FDEF6 . #x8C68)
                (#x8FDEF7 . #x8C69)
                (#x8FDEF8 . #x8C6D)
                (#x8FDEF9 . #x8C73)
                (#x8FDEFA . #x8C75)
                (#x8FDEFB . #x8C76)
                (#x8FDEFC . #x8C7B)
                (#x8FDEFD . #x8C7E)
                (#x8FDEFE . #x8C86)
                (#x8FDFA1 . #x8C87)
                (#x8FDFA2 . #x8C8B)
                (#x8FDFA3 . #x8C90)
                (#x8FDFA4 . #x8C92)
                (#x8FDFA5 . #x8C93)
                (#x8FDFA6 . #x8C99)
                (#x8FDFA7 . #x8C9B)
                (#x8FDFA8 . #x8C9C)
                (#x8FDFA9 . #x8CA4)
                (#x8FDFAA . #x8CB9)
                (#x8FDFAB . #x8CBA)
                (#x8FDFAC . #x8CC5)
                (#x8FDFAD . #x8CC6)
                (#x8FDFAE . #x8CC9)
                (#x8FDFAF . #x8CCB)
                (#x8FDFB0 . #x8CCF)
                (#x8FDFB1 . #x8CD6)
                (#x8FDFB2 . #x8CD5)
                (#x8FDFB3 . #x8CD9)
                (#x8FDFB4 . #x8CDD)
                (#x8FDFB5 . #x8CE1)
                (#x8FDFB6 . #x8CE8)
                (#x8FDFB7 . #x8CEC)
                (#x8FDFB8 . #x8CEF)
                (#x8FDFB9 . #x8CF0)
                (#x8FDFBA . #x8CF2)
                (#x8FDFBB . #x8CF5)
                (#x8FDFBC . #x8CF7)
                (#x8FDFBD . #x8CF8)
                (#x8FDFBE . #x8CFE)
                (#x8FDFBF . #x8CFF)
                (#x8FDFC0 . #x8D01)
                (#x8FDFC1 . #x8D03)
                (#x8FDFC2 . #x8D09)
                (#x8FDFC3 . #x8D12)
                (#x8FDFC4 . #x8D17)
                (#x8FDFC5 . #x8D1B)
                (#x8FDFC6 . #x8D65)
                (#x8FDFC7 . #x8D69)
                (#x8FDFC8 . #x8D6C)
                (#x8FDFC9 . #x8D6E)
                (#x8FDFCA . #x8D7F)
                (#x8FDFCB . #x8D82)
                (#x8FDFCC . #x8D84)
                (#x8FDFCD . #x8D88)
                (#x8FDFCE . #x8D8D)
                (#x8FDFCF . #x8D90)
                (#x8FDFD0 . #x8D91)
                (#x8FDFD1 . #x8D95)
                (#x8FDFD2 . #x8D9E)
                (#x8FDFD3 . #x8D9F)
                (#x8FDFD4 . #x8DA0)
                (#x8FDFD5 . #x8DA6)
                (#x8FDFD6 . #x8DAB)
                (#x8FDFD7 . #x8DAC)
                (#x8FDFD8 . #x8DAF)
                (#x8FDFD9 . #x8DB2)
                (#x8FDFDA . #x8DB5)
                (#x8FDFDB . #x8DB7)
                (#x8FDFDC . #x8DB9)
                (#x8FDFDD . #x8DBB)
                (#x8FDFDE . #x8DC0)
                (#x8FDFDF . #x8DC5)
                (#x8FDFE0 . #x8DC6)
                (#x8FDFE1 . #x8DC7)
                (#x8FDFE2 . #x8DC8)
                (#x8FDFE3 . #x8DCA)
                (#x8FDFE4 . #x8DCE)
                (#x8FDFE5 . #x8DD1)
                (#x8FDFE6 . #x8DD4)
                (#x8FDFE7 . #x8DD5)
                (#x8FDFE8 . #x8DD7)
                (#x8FDFE9 . #x8DD9)
                (#x8FDFEA . #x8DE4)
                (#x8FDFEB . #x8DE5)
                (#x8FDFEC . #x8DE7)
                (#x8FDFED . #x8DEC)
                (#x8FDFEE . #x8DF0)
                (#x8FDFEF . #x8DBC)
                (#x8FDFF0 . #x8DF1)
                (#x8FDFF1 . #x8DF2)
                (#x8FDFF2 . #x8DF4)
                (#x8FDFF3 . #x8DFD)
                (#x8FDFF4 . #x8E01)
                (#x8FDFF5 . #x8E04)
                (#x8FDFF6 . #x8E05)
                (#x8FDFF7 . #x8E06)
                (#x8FDFF8 . #x8E0B)
                (#x8FDFF9 . #x8E11)
                (#x8FDFFA . #x8E14)
                (#x8FDFFB . #x8E16)
                (#x8FDFFC . #x8E20)
                (#x8FDFFD . #x8E21)
                (#x8FDFFE . #x8E22)
                (#x8FE0A1 . #x8E23)
                (#x8FE0A2 . #x8E26)
                (#x8FE0A3 . #x8E27)
                (#x8FE0A4 . #x8E31)
                (#x8FE0A5 . #x8E33)
                (#x8FE0A6 . #x8E36)
                (#x8FE0A7 . #x8E37)
                (#x8FE0A8 . #x8E38)
                (#x8FE0A9 . #x8E39)
                (#x8FE0AA . #x8E3D)
                (#x8FE0AB . #x8E40)
                (#x8FE0AC . #x8E41)
                (#x8FE0AD . #x8E4B)
                (#x8FE0AE . #x8E4D)
                (#x8FE0AF . #x8E4E)
                (#x8FE0B0 . #x8E4F)
                (#x8FE0B1 . #x8E54)
                (#x8FE0B2 . #x8E5B)
                (#x8FE0B3 . #x8E5C)
                (#x8FE0B4 . #x8E5D)
                (#x8FE0B5 . #x8E5E)
                (#x8FE0B6 . #x8E61)
                (#x8FE0B7 . #x8E62)
                (#x8FE0B8 . #x8E69)
                (#x8FE0B9 . #x8E6C)
                (#x8FE0BA . #x8E6D)
                (#x8FE0BB . #x8E6F)
                (#x8FE0BC . #x8E70)
                (#x8FE0BD . #x8E71)
                (#x8FE0BE . #x8E79)
                (#x8FE0BF . #x8E7A)
                (#x8FE0C0 . #x8E7B)
                (#x8FE0C1 . #x8E82)
                (#x8FE0C2 . #x8E83)
                (#x8FE0C3 . #x8E89)
                (#x8FE0C4 . #x8E90)
                (#x8FE0C5 . #x8E92)
                (#x8FE0C6 . #x8E95)
                (#x8FE0C7 . #x8E9A)
                (#x8FE0C8 . #x8E9B)
                (#x8FE0C9 . #x8E9D)
                (#x8FE0CA . #x8E9E)
                (#x8FE0CB . #x8EA2)
                (#x8FE0CC . #x8EA7)
                (#x8FE0CD . #x8EA9)
                (#x8FE0CE . #x8EAD)
                (#x8FE0CF . #x8EAE)
                (#x8FE0D0 . #x8EB3)
                (#x8FE0D1 . #x8EB5)
                (#x8FE0D2 . #x8EBA)
                (#x8FE0D3 . #x8EBB)
                (#x8FE0D4 . #x8EC0)
                (#x8FE0D5 . #x8EC1)
                (#x8FE0D6 . #x8EC3)
                (#x8FE0D7 . #x8EC4)
                (#x8FE0D8 . #x8EC7)
                (#x8FE0D9 . #x8ECF)
                (#x8FE0DA . #x8ED1)
                (#x8FE0DB . #x8ED4)
                (#x8FE0DC . #x8EDC)
                (#x8FE0DD . #x8EE8)
                (#x8FE0DE . #x8EEE)
                (#x8FE0DF . #x8EF0)
                (#x8FE0E0 . #x8EF1)
                (#x8FE0E1 . #x8EF7)
                (#x8FE0E2 . #x8EF9)
                (#x8FE0E3 . #x8EFA)
                (#x8FE0E4 . #x8EED)
                (#x8FE0E5 . #x8F00)
                (#x8FE0E6 . #x8F02)
                (#x8FE0E7 . #x8F07)
                (#x8FE0E8 . #x8F08)
                (#x8FE0E9 . #x8F0F)
                (#x8FE0EA . #x8F10)
                (#x8FE0EB . #x8F16)
                (#x8FE0EC . #x8F17)
                (#x8FE0ED . #x8F18)
                (#x8FE0EE . #x8F1E)
                (#x8FE0EF . #x8F20)
                (#x8FE0F0 . #x8F21)
                (#x8FE0F1 . #x8F23)
                (#x8FE0F2 . #x8F25)
                (#x8FE0F3 . #x8F27)
                (#x8FE0F4 . #x8F28)
                (#x8FE0F5 . #x8F2C)
                (#x8FE0F6 . #x8F2D)
                (#x8FE0F7 . #x8F2E)
                (#x8FE0F8 . #x8F34)
                (#x8FE0F9 . #x8F35)
                (#x8FE0FA . #x8F36)
                (#x8FE0FB . #x8F37)
                (#x8FE0FC . #x8F3A)
                (#x8FE0FD . #x8F40)
                (#x8FE0FE . #x8F41)
                (#x8FE1A1 . #x8F43)
                (#x8FE1A2 . #x8F47)
                (#x8FE1A3 . #x8F4F)
                (#x8FE1A4 . #x8F51)
                (#x8FE1A5 . #x8F52)
                (#x8FE1A6 . #x8F53)
                (#x8FE1A7 . #x8F54)
                (#x8FE1A8 . #x8F55)
                (#x8FE1A9 . #x8F58)
                (#x8FE1AA . #x8F5D)
                (#x8FE1AB . #x8F5E)
                (#x8FE1AC . #x8F65)
                (#x8FE1AD . #x8F9D)
                (#x8FE1AE . #x8FA0)
                (#x8FE1AF . #x8FA1)
                (#x8FE1B0 . #x8FA4)
                (#x8FE1B1 . #x8FA5)
                (#x8FE1B2 . #x8FA6)
                (#x8FE1B3 . #x8FB5)
                (#x8FE1B4 . #x8FB6)
                (#x8FE1B5 . #x8FB8)
                (#x8FE1B6 . #x8FBE)
                (#x8FE1B7 . #x8FC0)
                (#x8FE1B8 . #x8FC1)
                (#x8FE1B9 . #x8FC6)
                (#x8FE1BA . #x8FCA)
                (#x8FE1BB . #x8FCB)
                (#x8FE1BC . #x8FCD)
                (#x8FE1BD . #x8FD0)
                (#x8FE1BE . #x8FD2)
                (#x8FE1BF . #x8FD3)
                (#x8FE1C0 . #x8FD5)
                (#x8FE1C1 . #x8FE0)
                (#x8FE1C2 . #x8FE3)
                (#x8FE1C3 . #x8FE4)
                (#x8FE1C4 . #x8FE8)
                (#x8FE1C5 . #x8FEE)
                (#x8FE1C6 . #x8FF1)
                (#x8FE1C7 . #x8FF5)
                (#x8FE1C8 . #x8FF6)
                (#x8FE1C9 . #x8FFB)
                (#x8FE1CA . #x8FFE)
                (#x8FE1CB . #x9002)
                (#x8FE1CC . #x9004)
                (#x8FE1CD . #x9008)
                (#x8FE1CE . #x900C)
                (#x8FE1CF . #x9018)
                (#x8FE1D0 . #x901B)
                (#x8FE1D1 . #x9028)
                (#x8FE1D2 . #x9029)
                (#x8FE1D3 . #x902F)
                (#x8FE1D4 . #x902A)
                (#x8FE1D5 . #x902C)
                (#x8FE1D6 . #x902D)
                (#x8FE1D7 . #x9033)
                (#x8FE1D8 . #x9034)
                (#x8FE1D9 . #x9037)
                (#x8FE1DA . #x903F)
                (#x8FE1DB . #x9043)
                (#x8FE1DC . #x9044)
                (#x8FE1DD . #x904C)
                (#x8FE1DE . #x905B)
                (#x8FE1DF . #x905D)
                (#x8FE1E0 . #x9062)
                (#x8FE1E1 . #x9066)
                (#x8FE1E2 . #x9067)
                (#x8FE1E3 . #x906C)
                (#x8FE1E4 . #x9070)
                (#x8FE1E5 . #x9074)
                (#x8FE1E6 . #x9079)
                (#x8FE1E7 . #x9085)
                (#x8FE1E8 . #x9088)
                (#x8FE1E9 . #x908B)
                (#x8FE1EA . #x908C)
                (#x8FE1EB . #x908E)
                (#x8FE1EC . #x9090)
                (#x8FE1ED . #x9095)
                (#x8FE1EE . #x9097)
                (#x8FE1EF . #x9098)
                (#x8FE1F0 . #x9099)
                (#x8FE1F1 . #x909B)
                (#x8FE1F2 . #x90A0)
                (#x8FE1F3 . #x90A1)
                (#x8FE1F4 . #x90A2)
                (#x8FE1F5 . #x90A5)
                (#x8FE1F6 . #x90B0)
                (#x8FE1F7 . #x90B2)
                (#x8FE1F8 . #x90B3)
                (#x8FE1F9 . #x90B4)
                (#x8FE1FA . #x90B6)
                (#x8FE1FB . #x90BD)
                (#x8FE1FC . #x90CC)
                (#x8FE1FD . #x90BE)
                (#x8FE1FE . #x90C3)
                (#x8FE2A1 . #x90C4)
                (#x8FE2A2 . #x90C5)
                (#x8FE2A3 . #x90C7)
                (#x8FE2A4 . #x90C8)
                (#x8FE2A5 . #x90D5)
                (#x8FE2A6 . #x90D7)
                (#x8FE2A7 . #x90D8)
                (#x8FE2A8 . #x90D9)
                (#x8FE2A9 . #x90DC)
                (#x8FE2AA . #x90DD)
                (#x8FE2AB . #x90DF)
                (#x8FE2AC . #x90E5)
                (#x8FE2AD . #x90D2)
                (#x8FE2AE . #x90F6)
                (#x8FE2AF . #x90EB)
                (#x8FE2B0 . #x90EF)
                (#x8FE2B1 . #x90F0)
                (#x8FE2B2 . #x90F4)
                (#x8FE2B3 . #x90FE)
                (#x8FE2B4 . #x90FF)
                (#x8FE2B5 . #x9100)
                (#x8FE2B6 . #x9104)
                (#x8FE2B7 . #x9105)
                (#x8FE2B8 . #x9106)
                (#x8FE2B9 . #x9108)
                (#x8FE2BA . #x910D)
                (#x8FE2BB . #x9110)
                (#x8FE2BC . #x9114)
                (#x8FE2BD . #x9116)
                (#x8FE2BE . #x9117)
                (#x8FE2BF . #x9118)
                (#x8FE2C0 . #x911A)
                (#x8FE2C1 . #x911C)
                (#x8FE2C2 . #x911E)
                (#x8FE2C3 . #x9120)
                (#x8FE2C4 . #x9125)
                (#x8FE2C5 . #x9122)
                (#x8FE2C6 . #x9123)
                (#x8FE2C7 . #x9127)
                (#x8FE2C8 . #x9129)
                (#x8FE2C9 . #x912E)
                (#x8FE2CA . #x912F)
                (#x8FE2CB . #x9131)
                (#x8FE2CC . #x9134)
                (#x8FE2CD . #x9136)
                (#x8FE2CE . #x9137)
                (#x8FE2CF . #x9139)
                (#x8FE2D0 . #x913A)
                (#x8FE2D1 . #x913C)
                (#x8FE2D2 . #x913D)
                (#x8FE2D3 . #x9143)
                (#x8FE2D4 . #x9147)
                (#x8FE2D5 . #x9148)
                (#x8FE2D6 . #x914F)
                (#x8FE2D7 . #x9153)
                (#x8FE2D8 . #x9157)
                (#x8FE2D9 . #x9159)
                (#x8FE2DA . #x915A)
                (#x8FE2DB . #x915B)
                (#x8FE2DC . #x9161)
                (#x8FE2DD . #x9164)
                (#x8FE2DE . #x9167)
                (#x8FE2DF . #x916D)
                (#x8FE2E0 . #x9174)
                (#x8FE2E1 . #x9179)
                (#x8FE2E2 . #x917A)
                (#x8FE2E3 . #x917B)
                (#x8FE2E4 . #x9181)
                (#x8FE2E5 . #x9183)
                (#x8FE2E6 . #x9185)
                (#x8FE2E7 . #x9186)
                (#x8FE2E8 . #x918A)
                (#x8FE2E9 . #x918E)
                (#x8FE2EA . #x9191)
                (#x8FE2EB . #x9193)
                (#x8FE2EC . #x9194)
                (#x8FE2ED . #x9195)
                (#x8FE2EE . #x9198)
                (#x8FE2EF . #x919E)
                (#x8FE2F0 . #x91A1)
                (#x8FE2F1 . #x91A6)
                (#x8FE2F2 . #x91A8)
                (#x8FE2F3 . #x91AC)
                (#x8FE2F4 . #x91AD)
                (#x8FE2F5 . #x91AE)
                (#x8FE2F6 . #x91B0)
                (#x8FE2F7 . #x91B1)
                (#x8FE2F8 . #x91B2)
                (#x8FE2F9 . #x91B3)
                (#x8FE2FA . #x91B6)
                (#x8FE2FB . #x91BB)
                (#x8FE2FC . #x91BC)
                (#x8FE2FD . #x91BD)
                (#x8FE2FE . #x91BF)
                (#x8FE3A1 . #x91C2)
                (#x8FE3A2 . #x91C3)
                (#x8FE3A3 . #x91C5)
                (#x8FE3A4 . #x91D3)
                (#x8FE3A5 . #x91D4)
                (#x8FE3A6 . #x91D7)
                (#x8FE3A7 . #x91D9)
                (#x8FE3A8 . #x91DA)
                (#x8FE3A9 . #x91DE)
                (#x8FE3AA . #x91E4)
                (#x8FE3AB . #x91E5)
                (#x8FE3AC . #x91E9)
                (#x8FE3AD . #x91EA)
                (#x8FE3AE . #x91EC)
                (#x8FE3AF . #x91ED)
                (#x8FE3B0 . #x91EE)
                (#x8FE3B1 . #x91EF)
                (#x8FE3B2 . #x91F0)
                (#x8FE3B3 . #x91F1)
                (#x8FE3B4 . #x91F7)
                (#x8FE3B5 . #x91F9)
                (#x8FE3B6 . #x91FB)
                (#x8FE3B7 . #x91FD)
                (#x8FE3B8 . #x9200)
                (#x8FE3B9 . #x9201)
                (#x8FE3BA . #x9204)
                (#x8FE3BB . #x9205)
                (#x8FE3BC . #x9206)
                (#x8FE3BD . #x9207)
                (#x8FE3BE . #x9209)
                (#x8FE3BF . #x920A)
                (#x8FE3C0 . #x920C)
                (#x8FE3C1 . #x9210)
                (#x8FE3C2 . #x9212)
                (#x8FE3C3 . #x9213)
                (#x8FE3C4 . #x9216)
                (#x8FE3C5 . #x9218)
                (#x8FE3C6 . #x921C)
                (#x8FE3C7 . #x921D)
                (#x8FE3C8 . #x9223)
                (#x8FE3C9 . #x9224)
                (#x8FE3CA . #x9225)
                (#x8FE3CB . #x9226)
                (#x8FE3CC . #x9228)
                (#x8FE3CD . #x922E)
                (#x8FE3CE . #x922F)
                (#x8FE3CF . #x9230)
                (#x8FE3D0 . #x9233)
                (#x8FE3D1 . #x9235)
                (#x8FE3D2 . #x9236)
                (#x8FE3D3 . #x9238)
                (#x8FE3D4 . #x9239)
                (#x8FE3D5 . #x923A)
                (#x8FE3D6 . #x923C)
                (#x8FE3D7 . #x923E)
                (#x8FE3D8 . #x9240)
                (#x8FE3D9 . #x9242)
                (#x8FE3DA . #x9243)
                (#x8FE3DB . #x9246)
                (#x8FE3DC . #x9247)
                (#x8FE3DD . #x924A)
                (#x8FE3DE . #x924D)
                (#x8FE3DF . #x924E)
                (#x8FE3E0 . #x924F)
                (#x8FE3E1 . #x9251)
                (#x8FE3E2 . #x9258)
                (#x8FE3E3 . #x9259)
                (#x8FE3E4 . #x925C)
                (#x8FE3E5 . #x925D)
                (#x8FE3E6 . #x9260)
                (#x8FE3E7 . #x9261)
                (#x8FE3E8 . #x9265)
                (#x8FE3E9 . #x9267)
                (#x8FE3EA . #x9268)
                (#x8FE3EB . #x9269)
                (#x8FE3EC . #x926E)
                (#x8FE3ED . #x926F)
                (#x8FE3EE . #x9270)
                (#x8FE3EF . #x9275)
                (#x8FE3F0 . #x9276)
                (#x8FE3F1 . #x9277)
                (#x8FE3F2 . #x9278)
                (#x8FE3F3 . #x9279)
                (#x8FE3F4 . #x927B)
                (#x8FE3F5 . #x927C)
                (#x8FE3F6 . #x927D)
                (#x8FE3F7 . #x927F)
                (#x8FE3F8 . #x9288)
                (#x8FE3F9 . #x9289)
                (#x8FE3FA . #x928A)
                (#x8FE3FB . #x928D)
                (#x8FE3FC . #x928E)
                (#x8FE3FD . #x9292)
                (#x8FE3FE . #x9297)
                (#x8FE4A1 . #x9299)
                (#x8FE4A2 . #x929F)
                (#x8FE4A3 . #x92A0)
                (#x8FE4A4 . #x92A4)
                (#x8FE4A5 . #x92A5)
                (#x8FE4A6 . #x92A7)
                (#x8FE4A7 . #x92A8)
                (#x8FE4A8 . #x92AB)
                (#x8FE4A9 . #x92AF)
                (#x8FE4AA . #x92B2)
                (#x8FE4AB . #x92B6)
                (#x8FE4AC . #x92B8)
                (#x8FE4AD . #x92BA)
                (#x8FE4AE . #x92BB)
                (#x8FE4AF . #x92BC)
                (#x8FE4B0 . #x92BD)
                (#x8FE4B1 . #x92BF)
                (#x8FE4B2 . #x92C0)
                (#x8FE4B3 . #x92C1)
                (#x8FE4B4 . #x92C2)
                (#x8FE4B5 . #x92C3)
                (#x8FE4B6 . #x92C5)
                (#x8FE4B7 . #x92C6)
                (#x8FE4B8 . #x92C7)
                (#x8FE4B9 . #x92C8)
                (#x8FE4BA . #x92CB)
                (#x8FE4BB . #x92CC)
                (#x8FE4BC . #x92CD)
                (#x8FE4BD . #x92CE)
                (#x8FE4BE . #x92D0)
                (#x8FE4BF . #x92D3)
                (#x8FE4C0 . #x92D5)
                (#x8FE4C1 . #x92D7)
                (#x8FE4C2 . #x92D8)
                (#x8FE4C3 . #x92D9)
                (#x8FE4C4 . #x92DC)
                (#x8FE4C5 . #x92DD)
                (#x8FE4C6 . #x92DF)
                (#x8FE4C7 . #x92E0)
                (#x8FE4C8 . #x92E1)
                (#x8FE4C9 . #x92E3)
                (#x8FE4CA . #x92E5)
                (#x8FE4CB . #x92E7)
                (#x8FE4CC . #x92E8)
                (#x8FE4CD . #x92EC)
                (#x8FE4CE . #x92EE)
                (#x8FE4CF . #x92F0)
                (#x8FE4D0 . #x92F9)
                (#x8FE4D1 . #x92FB)
                (#x8FE4D2 . #x92FF)
                (#x8FE4D3 . #x9300)
                (#x8FE4D4 . #x9302)
                (#x8FE4D5 . #x9308)
                (#x8FE4D6 . #x930D)
                (#x8FE4D7 . #x9311)
                (#x8FE4D8 . #x9314)
                (#x8FE4D9 . #x9315)
                (#x8FE4DA . #x931C)
                (#x8FE4DB . #x931D)
                (#x8FE4DC . #x931E)
                (#x8FE4DD . #x931F)
                (#x8FE4DE . #x9321)
                (#x8FE4DF . #x9324)
                (#x8FE4E0 . #x9325)
                (#x8FE4E1 . #x9327)
                (#x8FE4E2 . #x9329)
                (#x8FE4E3 . #x932A)
                (#x8FE4E4 . #x9333)
                (#x8FE4E5 . #x9334)
                (#x8FE4E6 . #x9336)
                (#x8FE4E7 . #x9337)
                (#x8FE4E8 . #x9347)
                (#x8FE4E9 . #x9348)
                (#x8FE4EA . #x9349)
                (#x8FE4EB . #x9350)
                (#x8FE4EC . #x9351)
                (#x8FE4ED . #x9352)
                (#x8FE4EE . #x9355)
                (#x8FE4EF . #x9357)
                (#x8FE4F0 . #x9358)
                (#x8FE4F1 . #x935A)
                (#x8FE4F2 . #x935E)
                (#x8FE4F3 . #x9364)
                (#x8FE4F4 . #x9365)
                (#x8FE4F5 . #x9367)
                (#x8FE4F6 . #x9369)
                (#x8FE4F7 . #x936A)
                (#x8FE4F8 . #x936D)
                (#x8FE4F9 . #x936F)
                (#x8FE4FA . #x9370)
                (#x8FE4FB . #x9371)
                (#x8FE4FC . #x9373)
                (#x8FE4FD . #x9374)
                (#x8FE4FE . #x9376)
                (#x8FE5A1 . #x937A)
                (#x8FE5A2 . #x937D)
                (#x8FE5A3 . #x937F)
                (#x8FE5A4 . #x9380)
                (#x8FE5A5 . #x9381)
                (#x8FE5A6 . #x9382)
                (#x8FE5A7 . #x9388)
                (#x8FE5A8 . #x938A)
                (#x8FE5A9 . #x938B)
                (#x8FE5AA . #x938D)
                (#x8FE5AB . #x938F)
                (#x8FE5AC . #x9392)
                (#x8FE5AD . #x9395)
                (#x8FE5AE . #x9398)
                (#x8FE5AF . #x939B)
                (#x8FE5B0 . #x939E)
                (#x8FE5B1 . #x93A1)
                (#x8FE5B2 . #x93A3)
                (#x8FE5B3 . #x93A4)
                (#x8FE5B4 . #x93A6)
                (#x8FE5B5 . #x93A8)
                (#x8FE5B6 . #x93AB)
                (#x8FE5B7 . #x93B4)
                (#x8FE5B8 . #x93B5)
                (#x8FE5B9 . #x93B6)
                (#x8FE5BA . #x93BA)
                (#x8FE5BB . #x93A9)
                (#x8FE5BC . #x93C1)
                (#x8FE5BD . #x93C4)
                (#x8FE5BE . #x93C5)
                (#x8FE5BF . #x93C6)
                (#x8FE5C0 . #x93C7)
                (#x8FE5C1 . #x93C9)
                (#x8FE5C2 . #x93CA)
                (#x8FE5C3 . #x93CB)
                (#x8FE5C4 . #x93CC)
                (#x8FE5C5 . #x93CD)
                (#x8FE5C6 . #x93D3)
                (#x8FE5C7 . #x93D9)
                (#x8FE5C8 . #x93DC)
                (#x8FE5C9 . #x93DE)
                (#x8FE5CA . #x93DF)
                (#x8FE5CB . #x93E2)
                (#x8FE5CC . #x93E6)
                (#x8FE5CD . #x93E7)
                (#x8FE5CE . #x93F9)
                (#x8FE5CF . #x93F7)
                (#x8FE5D0 . #x93F8)
                (#x8FE5D1 . #x93FA)
                (#x8FE5D2 . #x93FB)
                (#x8FE5D3 . #x93FD)
                (#x8FE5D4 . #x9401)
                (#x8FE5D5 . #x9402)
                (#x8FE5D6 . #x9404)
                (#x8FE5D7 . #x9408)
                (#x8FE5D8 . #x9409)
                (#x8FE5D9 . #x940D)
                (#x8FE5DA . #x940E)
                (#x8FE5DB . #x940F)
                (#x8FE5DC . #x9415)
                (#x8FE5DD . #x9416)
                (#x8FE5DE . #x9417)
                (#x8FE5DF . #x941F)
                (#x8FE5E0 . #x942E)
                (#x8FE5E1 . #x942F)
                (#x8FE5E2 . #x9431)
                (#x8FE5E3 . #x9432)
                (#x8FE5E4 . #x9433)
                (#x8FE5E5 . #x9434)
                (#x8FE5E6 . #x943B)
                (#x8FE5E7 . #x943F)
                (#x8FE5E8 . #x943D)
                (#x8FE5E9 . #x9443)
                (#x8FE5EA . #x9445)
                (#x8FE5EB . #x9448)
                (#x8FE5EC . #x944A)
                (#x8FE5ED . #x944C)
                (#x8FE5EE . #x9455)
                (#x8FE5EF . #x9459)
                (#x8FE5F0 . #x945C)
                (#x8FE5F1 . #x945F)
                (#x8FE5F2 . #x9461)
                (#x8FE5F3 . #x9463)
                (#x8FE5F4 . #x9468)
                (#x8FE5F5 . #x946B)
                (#x8FE5F6 . #x946D)
                (#x8FE5F7 . #x946E)
                (#x8FE5F8 . #x946F)
                (#x8FE5F9 . #x9471)
                (#x8FE5FA . #x9472)
                (#x8FE5FB . #x9484)
                (#x8FE5FC . #x9483)
                (#x8FE5FD . #x9578)
                (#x8FE5FE . #x9579)
                (#x8FE6A1 . #x957E)
                (#x8FE6A2 . #x9584)
                (#x8FE6A3 . #x9588)
                (#x8FE6A4 . #x958C)
                (#x8FE6A5 . #x958D)
                (#x8FE6A6 . #x958E)
                (#x8FE6A7 . #x959D)
                (#x8FE6A8 . #x959E)
                (#x8FE6A9 . #x959F)
                (#x8FE6AA . #x95A1)
                (#x8FE6AB . #x95A6)
                (#x8FE6AC . #x95A9)
                (#x8FE6AD . #x95AB)
                (#x8FE6AE . #x95AC)
                (#x8FE6AF . #x95B4)
                (#x8FE6B0 . #x95B6)
                (#x8FE6B1 . #x95BA)
                (#x8FE6B2 . #x95BD)
                (#x8FE6B3 . #x95BF)
                (#x8FE6B4 . #x95C6)
                (#x8FE6B5 . #x95C8)
                (#x8FE6B6 . #x95C9)
                (#x8FE6B7 . #x95CB)
                (#x8FE6B8 . #x95D0)
                (#x8FE6B9 . #x95D1)
                (#x8FE6BA . #x95D2)
                (#x8FE6BB . #x95D3)
                (#x8FE6BC . #x95D9)
                (#x8FE6BD . #x95DA)
                (#x8FE6BE . #x95DD)
                (#x8FE6BF . #x95DE)
                (#x8FE6C0 . #x95DF)
                (#x8FE6C1 . #x95E0)
                (#x8FE6C2 . #x95E4)
                (#x8FE6C3 . #x95E6)
                (#x8FE6C4 . #x961D)
                (#x8FE6C5 . #x961E)
                (#x8FE6C6 . #x9622)
                (#x8FE6C7 . #x9624)
                (#x8FE6C8 . #x9625)
                (#x8FE6C9 . #x9626)
                (#x8FE6CA . #x962C)
                (#x8FE6CB . #x9631)
                (#x8FE6CC . #x9633)
                (#x8FE6CD . #x9637)
                (#x8FE6CE . #x9638)
                (#x8FE6CF . #x9639)
                (#x8FE6D0 . #x963A)
                (#x8FE6D1 . #x963C)
                (#x8FE6D2 . #x963D)
                (#x8FE6D3 . #x9641)
                (#x8FE6D4 . #x9652)
                (#x8FE6D5 . #x9654)
                (#x8FE6D6 . #x9656)
                (#x8FE6D7 . #x9657)
                (#x8FE6D8 . #x9658)
                (#x8FE6D9 . #x9661)
                (#x8FE6DA . #x966E)
                (#x8FE6DB . #x9674)
                (#x8FE6DC . #x967B)
                (#x8FE6DD . #x967C)
                (#x8FE6DE . #x967E)
                (#x8FE6DF . #x967F)
                (#x8FE6E0 . #x9681)
                (#x8FE6E1 . #x9682)
                (#x8FE6E2 . #x9683)
                (#x8FE6E3 . #x9684)
                (#x8FE6E4 . #x9689)
                (#x8FE6E5 . #x9691)
                (#x8FE6E6 . #x9696)
                (#x8FE6E7 . #x969A)
                (#x8FE6E8 . #x969D)
                (#x8FE6E9 . #x969F)
                (#x8FE6EA . #x96A4)
                (#x8FE6EB . #x96A5)
                (#x8FE6EC . #x96A6)
                (#x8FE6ED . #x96A9)
                (#x8FE6EE . #x96AE)
                (#x8FE6EF . #x96AF)
                (#x8FE6F0 . #x96B3)
                (#x8FE6F1 . #x96BA)
                (#x8FE6F2 . #x96CA)
                (#x8FE6F3 . #x96D2)
                (#x8FE6F4 . #x5DB2)
                (#x8FE6F5 . #x96D8)
                (#x8FE6F6 . #x96DA)
                (#x8FE6F7 . #x96DD)
                (#x8FE6F8 . #x96DE)
                (#x8FE6F9 . #x96DF)
                (#x8FE6FA . #x96E9)
                (#x8FE6FB . #x96EF)
                (#x8FE6FC . #x96F1)
                (#x8FE6FD . #x96FA)
                (#x8FE6FE . #x9702)
                (#x8FE7A1 . #x9703)
                (#x8FE7A2 . #x9705)
                (#x8FE7A3 . #x9709)
                (#x8FE7A4 . #x971A)
                (#x8FE7A5 . #x971B)
                (#x8FE7A6 . #x971D)
                (#x8FE7A7 . #x9721)
                (#x8FE7A8 . #x9722)
                (#x8FE7A9 . #x9723)
                (#x8FE7AA . #x9728)
                (#x8FE7AB . #x9731)
                (#x8FE7AC . #x9733)
                (#x8FE7AD . #x9741)
                (#x8FE7AE . #x9743)
                (#x8FE7AF . #x974A)
                (#x8FE7B0 . #x974E)
                (#x8FE7B1 . #x974F)
                (#x8FE7B2 . #x9755)
                (#x8FE7B3 . #x9757)
                (#x8FE7B4 . #x9758)
                (#x8FE7B5 . #x975A)
                (#x8FE7B6 . #x975B)
                (#x8FE7B7 . #x9763)
                (#x8FE7B8 . #x9767)
                (#x8FE7B9 . #x976A)
                (#x8FE7BA . #x976E)
                (#x8FE7BB . #x9773)
                (#x8FE7BC . #x9776)
                (#x8FE7BD . #x9777)
                (#x8FE7BE . #x9778)
                (#x8FE7BF . #x977B)
                (#x8FE7C0 . #x977D)
                (#x8FE7C1 . #x977F)
                (#x8FE7C2 . #x9780)
                (#x8FE7C3 . #x9789)
                (#x8FE7C4 . #x9795)
                (#x8FE7C5 . #x9796)
                (#x8FE7C6 . #x9797)
                (#x8FE7C7 . #x9799)
                (#x8FE7C8 . #x979A)
                (#x8FE7C9 . #x979E)
                (#x8FE7CA . #x979F)
                (#x8FE7CB . #x97A2)
                (#x8FE7CC . #x97AC)
                (#x8FE7CD . #x97AE)
                (#x8FE7CE . #x97B1)
                (#x8FE7CF . #x97B2)
                (#x8FE7D0 . #x97B5)
                (#x8FE7D1 . #x97B6)
                (#x8FE7D2 . #x97B8)
                (#x8FE7D3 . #x97B9)
                (#x8FE7D4 . #x97BA)
                (#x8FE7D5 . #x97BC)
                (#x8FE7D6 . #x97BE)
                (#x8FE7D7 . #x97BF)
                (#x8FE7D8 . #x97C1)
                (#x8FE7D9 . #x97C4)
                (#x8FE7DA . #x97C5)
                (#x8FE7DB . #x97C7)
                (#x8FE7DC . #x97C9)
                (#x8FE7DD . #x97CA)
                (#x8FE7DE . #x97CC)
                (#x8FE7DF . #x97CD)
                (#x8FE7E0 . #x97CE)
                (#x8FE7E1 . #x97D0)
                (#x8FE7E2 . #x97D1)
                (#x8FE7E3 . #x97D4)
                (#x8FE7E4 . #x97D7)
                (#x8FE7E5 . #x97D8)
                (#x8FE7E6 . #x97D9)
                (#x8FE7E7 . #x97DD)
                (#x8FE7E8 . #x97DE)
                (#x8FE7E9 . #x97E0)
                (#x8FE7EA . #x97DB)
                (#x8FE7EB . #x97E1)
                (#x8FE7EC . #x97E4)
                (#x8FE7ED . #x97EF)
                (#x8FE7EE . #x97F1)
                (#x8FE7EF . #x97F4)
                (#x8FE7F0 . #x97F7)
                (#x8FE7F1 . #x97F8)
                (#x8FE7F2 . #x97FA)
                (#x8FE7F3 . #x9807)
                (#x8FE7F4 . #x980A)
                (#x8FE7F5 . #x9819)
                (#x8FE7F6 . #x980D)
                (#x8FE7F7 . #x980E)
                (#x8FE7F8 . #x9814)
                (#x8FE7F9 . #x9816)
                (#x8FE7FA . #x981C)
                (#x8FE7FB . #x981E)
                (#x8FE7FC . #x9820)
                (#x8FE7FD . #x9823)
                (#x8FE7FE . #x9826)
                (#x8FE8A1 . #x982B)
                (#x8FE8A2 . #x982E)
                (#x8FE8A3 . #x982F)
                (#x8FE8A4 . #x9830)
                (#x8FE8A5 . #x9832)
                (#x8FE8A6 . #x9833)
                (#x8FE8A7 . #x9835)
                (#x8FE8A8 . #x9825)
                (#x8FE8A9 . #x983E)
                (#x8FE8AA . #x9844)
                (#x8FE8AB . #x9847)
                (#x8FE8AC . #x984A)
                (#x8FE8AD . #x9851)
                (#x8FE8AE . #x9852)
                (#x8FE8AF . #x9853)
                (#x8FE8B0 . #x9856)
                (#x8FE8B1 . #x9857)
                (#x8FE8B2 . #x9859)
                (#x8FE8B3 . #x985A)
                (#x8FE8B4 . #x9862)
                (#x8FE8B5 . #x9863)
                (#x8FE8B6 . #x9865)
                (#x8FE8B7 . #x9866)
                (#x8FE8B8 . #x986A)
                (#x8FE8B9 . #x986C)
                (#x8FE8BA . #x98AB)
                (#x8FE8BB . #x98AD)
                (#x8FE8BC . #x98AE)
                (#x8FE8BD . #x98B0)
                (#x8FE8BE . #x98B4)
                (#x8FE8BF . #x98B7)
                (#x8FE8C0 . #x98B8)
                (#x8FE8C1 . #x98BA)
                (#x8FE8C2 . #x98BB)
                (#x8FE8C3 . #x98BF)
                (#x8FE8C4 . #x98C2)
                (#x8FE8C5 . #x98C5)
                (#x8FE8C6 . #x98C8)
                (#x8FE8C7 . #x98CC)
                (#x8FE8C8 . #x98E1)
                (#x8FE8C9 . #x98E3)
                (#x8FE8CA . #x98E5)
                (#x8FE8CB . #x98E6)
                (#x8FE8CC . #x98E7)
                (#x8FE8CD . #x98EA)
                (#x8FE8CE . #x98F3)
                (#x8FE8CF . #x98F6)
                (#x8FE8D0 . #x9902)
                (#x8FE8D1 . #x9907)
                (#x8FE8D2 . #x9908)
                (#x8FE8D3 . #x9911)
                (#x8FE8D4 . #x9915)
                (#x8FE8D5 . #x9916)
                (#x8FE8D6 . #x9917)
                (#x8FE8D7 . #x991A)
                (#x8FE8D8 . #x991B)
                (#x8FE8D9 . #x991C)
                (#x8FE8DA . #x991F)
                (#x8FE8DB . #x9922)
                (#x8FE8DC . #x9926)
                (#x8FE8DD . #x9927)
                (#x8FE8DE . #x992B)
                (#x8FE8DF . #x9931)
                (#x8FE8E0 . #x9932)
                (#x8FE8E1 . #x9933)
                (#x8FE8E2 . #x9934)
                (#x8FE8E3 . #x9935)
                (#x8FE8E4 . #x9939)
                (#x8FE8E5 . #x993A)
                (#x8FE8E6 . #x993B)
                (#x8FE8E7 . #x993C)
                (#x8FE8E8 . #x9940)
                (#x8FE8E9 . #x9941)
                (#x8FE8EA . #x9946)
                (#x8FE8EB . #x9947)
                (#x8FE8EC . #x9948)
                (#x8FE8ED . #x994D)
                (#x8FE8EE . #x994E)
                (#x8FE8EF . #x9954)
                (#x8FE8F0 . #x9958)
                (#x8FE8F1 . #x9959)
                (#x8FE8F2 . #x995B)
                (#x8FE8F3 . #x995C)
                (#x8FE8F4 . #x995E)
                (#x8FE8F5 . #x995F)
                (#x8FE8F6 . #x9960)
                (#x8FE8F7 . #x999B)
                (#x8FE8F8 . #x999D)
                (#x8FE8F9 . #x999F)
                (#x8FE8FA . #x99A6)
                (#x8FE8FB . #x99B0)
                (#x8FE8FC . #x99B1)
                (#x8FE8FD . #x99B2)
                (#x8FE8FE . #x99B5)
                (#x8FE9A1 . #x99B9)
                (#x8FE9A2 . #x99BA)
                (#x8FE9A3 . #x99BD)
                (#x8FE9A4 . #x99BF)
                (#x8FE9A5 . #x99C3)
                (#x8FE9A6 . #x99C9)
                (#x8FE9A7 . #x99D3)
                (#x8FE9A8 . #x99D4)
                (#x8FE9A9 . #x99D9)
                (#x8FE9AA . #x99DA)
                (#x8FE9AB . #x99DC)
                (#x8FE9AC . #x99DE)
                (#x8FE9AD . #x99E7)
                (#x8FE9AE . #x99EA)
                (#x8FE9AF . #x99EB)
                (#x8FE9B0 . #x99EC)
                (#x8FE9B1 . #x99F0)
                (#x8FE9B2 . #x99F4)
                (#x8FE9B3 . #x99F5)
                (#x8FE9B4 . #x99F9)
                (#x8FE9B5 . #x99FD)
                (#x8FE9B6 . #x99FE)
                (#x8FE9B7 . #x9A02)
                (#x8FE9B8 . #x9A03)
                (#x8FE9B9 . #x9A04)
                (#x8FE9BA . #x9A0B)
                (#x8FE9BB . #x9A0C)
                (#x8FE9BC . #x9A10)
                (#x8FE9BD . #x9A11)
                (#x8FE9BE . #x9A16)
                (#x8FE9BF . #x9A1E)
                (#x8FE9C0 . #x9A20)
                (#x8FE9C1 . #x9A22)
                (#x8FE9C2 . #x9A23)
                (#x8FE9C3 . #x9A24)
                (#x8FE9C4 . #x9A27)
                (#x8FE9C5 . #x9A2D)
                (#x8FE9C6 . #x9A2E)
                (#x8FE9C7 . #x9A33)
                (#x8FE9C8 . #x9A35)
                (#x8FE9C9 . #x9A36)
                (#x8FE9CA . #x9A38)
                (#x8FE9CB . #x9A47)
                (#x8FE9CC . #x9A41)
                (#x8FE9CD . #x9A44)
                (#x8FE9CE . #x9A4A)
                (#x8FE9CF . #x9A4B)
                (#x8FE9D0 . #x9A4C)
                (#x8FE9D1 . #x9A4E)
                (#x8FE9D2 . #x9A51)
                (#x8FE9D3 . #x9A54)
                (#x8FE9D4 . #x9A56)
                (#x8FE9D5 . #x9A5D)
                (#x8FE9D6 . #x9AAA)
                (#x8FE9D7 . #x9AAC)
                (#x8FE9D8 . #x9AAE)
                (#x8FE9D9 . #x9AAF)
                (#x8FE9DA . #x9AB2)
                (#x8FE9DB . #x9AB4)
                (#x8FE9DC . #x9AB5)
                (#x8FE9DD . #x9AB6)
                (#x8FE9DE . #x9AB9)
                (#x8FE9DF . #x9ABB)
                (#x8FE9E0 . #x9ABE)
                (#x8FE9E1 . #x9ABF)
                (#x8FE9E2 . #x9AC1)
                (#x8FE9E3 . #x9AC3)
                (#x8FE9E4 . #x9AC6)
                (#x8FE9E5 . #x9AC8)
                (#x8FE9E6 . #x9ACE)
                (#x8FE9E7 . #x9AD0)
                (#x8FE9E8 . #x9AD2)
                (#x8FE9E9 . #x9AD5)
                (#x8FE9EA . #x9AD6)
                (#x8FE9EB . #x9AD7)
                (#x8FE9EC . #x9ADB)
                (#x8FE9ED . #x9ADC)
                (#x8FE9EE . #x9AE0)
                (#x8FE9EF . #x9AE4)
                (#x8FE9F0 . #x9AE5)
                (#x8FE9F1 . #x9AE7)
                (#x8FE9F2 . #x9AE9)
                (#x8FE9F3 . #x9AEC)
                (#x8FE9F4 . #x9AF2)
                (#x8FE9F5 . #x9AF3)
                (#x8FE9F6 . #x9AF5)
                (#x8FE9F7 . #x9AF9)
                (#x8FE9F8 . #x9AFA)
                (#x8FE9F9 . #x9AFD)
                (#x8FE9FA . #x9AFF)
                (#x8FE9FB . #x9B00)
                (#x8FE9FC . #x9B01)
                (#x8FE9FD . #x9B02)
                (#x8FE9FE . #x9B03)
                (#x8FEAA1 . #x9B04)
                (#x8FEAA2 . #x9B05)
                (#x8FEAA3 . #x9B08)
                (#x8FEAA4 . #x9B09)
                (#x8FEAA5 . #x9B0B)
                (#x8FEAA6 . #x9B0C)
                (#x8FEAA7 . #x9B0D)
                (#x8FEAA8 . #x9B0E)
                (#x8FEAA9 . #x9B10)
                (#x8FEAAA . #x9B12)
                (#x8FEAAB . #x9B16)
                (#x8FEAAC . #x9B19)
                (#x8FEAAD . #x9B1B)
                (#x8FEAAE . #x9B1C)
                (#x8FEAAF . #x9B20)
                (#x8FEAB0 . #x9B26)
                (#x8FEAB1 . #x9B2B)
                (#x8FEAB2 . #x9B2D)
                (#x8FEAB3 . #x9B33)
                (#x8FEAB4 . #x9B34)
                (#x8FEAB5 . #x9B35)
                (#x8FEAB6 . #x9B37)
                (#x8FEAB7 . #x9B39)
                (#x8FEAB8 . #x9B3A)
                (#x8FEAB9 . #x9B3D)
                (#x8FEABA . #x9B48)
                (#x8FEABB . #x9B4B)
                (#x8FEABC . #x9B4C)
                (#x8FEABD . #x9B55)
                (#x8FEABE . #x9B56)
                (#x8FEABF . #x9B57)
                (#x8FEAC0 . #x9B5B)
                (#x8FEAC1 . #x9B5E)
                (#x8FEAC2 . #x9B61)
                (#x8FEAC3 . #x9B63)
                (#x8FEAC4 . #x9B65)
                (#x8FEAC5 . #x9B66)
                (#x8FEAC6 . #x9B68)
                (#x8FEAC7 . #x9B6A)
                (#x8FEAC8 . #x9B6B)
                (#x8FEAC9 . #x9B6C)
                (#x8FEACA . #x9B6D)
                (#x8FEACB . #x9B6E)
                (#x8FEACC . #x9B73)
                (#x8FEACD . #x9B75)
                (#x8FEACE . #x9B77)
                (#x8FEACF . #x9B78)
                (#x8FEAD0 . #x9B79)
                (#x8FEAD1 . #x9B7F)
                (#x8FEAD2 . #x9B80)
                (#x8FEAD3 . #x9B84)
                (#x8FEAD4 . #x9B85)
                (#x8FEAD5 . #x9B86)
                (#x8FEAD6 . #x9B87)
                (#x8FEAD7 . #x9B89)
                (#x8FEAD8 . #x9B8A)
                (#x8FEAD9 . #x9B8B)
                (#x8FEADA . #x9B8D)
                (#x8FEADB . #x9B8F)
                (#x8FEADC . #x9B90)
                (#x8FEADD . #x9B94)
                (#x8FEADE . #x9B9A)
                (#x8FEADF . #x9B9D)
                (#x8FEAE0 . #x9B9E)
                (#x8FEAE1 . #x9BA6)
                (#x8FEAE2 . #x9BA7)
                (#x8FEAE3 . #x9BA9)
                (#x8FEAE4 . #x9BAC)
                (#x8FEAE5 . #x9BB0)
                (#x8FEAE6 . #x9BB1)
                (#x8FEAE7 . #x9BB2)
                (#x8FEAE8 . #x9BB7)
                (#x8FEAE9 . #x9BB8)
                (#x8FEAEA . #x9BBB)
                (#x8FEAEB . #x9BBC)
                (#x8FEAEC . #x9BBE)
                (#x8FEAED . #x9BBF)
                (#x8FEAEE . #x9BC1)
                (#x8FEAEF . #x9BC7)
                (#x8FEAF0 . #x9BC8)
                (#x8FEAF1 . #x9BCE)
                (#x8FEAF2 . #x9BD0)
                (#x8FEAF3 . #x9BD7)
                (#x8FEAF4 . #x9BD8)
                (#x8FEAF5 . #x9BDD)
                (#x8FEAF6 . #x9BDF)
                (#x8FEAF7 . #x9BE5)
                (#x8FEAF8 . #x9BE7)
                (#x8FEAF9 . #x9BEA)
                (#x8FEAFA . #x9BEB)
                (#x8FEAFB . #x9BEF)
                (#x8FEAFC . #x9BF3)
                (#x8FEAFD . #x9BF7)
                (#x8FEAFE . #x9BF8)
                (#x8FEBA1 . #x9BF9)
                (#x8FEBA2 . #x9BFA)
                (#x8FEBA3 . #x9BFD)
                (#x8FEBA4 . #x9BFF)
                (#x8FEBA5 . #x9C00)
                (#x8FEBA6 . #x9C02)
                (#x8FEBA7 . #x9C0B)
                (#x8FEBA8 . #x9C0F)
                (#x8FEBA9 . #x9C11)
                (#x8FEBAA . #x9C16)
                (#x8FEBAB . #x9C18)
                (#x8FEBAC . #x9C19)
                (#x8FEBAD . #x9C1A)
                (#x8FEBAE . #x9C1C)
                (#x8FEBAF . #x9C1E)
                (#x8FEBB0 . #x9C22)
                (#x8FEBB1 . #x9C23)
                (#x8FEBB2 . #x9C26)
                (#x8FEBB3 . #x9C27)
                (#x8FEBB4 . #x9C28)
                (#x8FEBB5 . #x9C29)
                (#x8FEBB6 . #x9C2A)
                (#x8FEBB7 . #x9C31)
                (#x8FEBB8 . #x9C35)
                (#x8FEBB9 . #x9C36)
                (#x8FEBBA . #x9C37)
                (#x8FEBBB . #x9C3D)
                (#x8FEBBC . #x9C41)
                (#x8FEBBD . #x9C43)
                (#x8FEBBE . #x9C44)
                (#x8FEBBF . #x9C45)
                (#x8FEBC0 . #x9C49)
                (#x8FEBC1 . #x9C4A)
                (#x8FEBC2 . #x9C4E)
                (#x8FEBC3 . #x9C4F)
                (#x8FEBC4 . #x9C50)
                (#x8FEBC5 . #x9C53)
                (#x8FEBC6 . #x9C54)
                (#x8FEBC7 . #x9C56)
                (#x8FEBC8 . #x9C58)
                (#x8FEBC9 . #x9C5B)
                (#x8FEBCA . #x9C5D)
                (#x8FEBCB . #x9C5E)
                (#x8FEBCC . #x9C5F)
                (#x8FEBCD . #x9C63)
                (#x8FEBCE . #x9C69)
                (#x8FEBCF . #x9C6A)
                (#x8FEBD0 . #x9C5C)
                (#x8FEBD1 . #x9C6B)
                (#x8FEBD2 . #x9C68)
                (#x8FEBD3 . #x9C6E)
                (#x8FEBD4 . #x9C70)
                (#x8FEBD5 . #x9C72)
                (#x8FEBD6 . #x9C75)
                (#x8FEBD7 . #x9C77)
                (#x8FEBD8 . #x9C7B)
                (#x8FEBD9 . #x9CE6)
                (#x8FEBDA . #x9CF2)
                (#x8FEBDB . #x9CF7)
                (#x8FEBDC . #x9CF9)
                (#x8FEBDD . #x9D0B)
                (#x8FEBDE . #x9D02)
                (#x8FEBDF . #x9D11)
                (#x8FEBE0 . #x9D17)
                (#x8FEBE1 . #x9D18)
                (#x8FEBE2 . #x9D1C)
                (#x8FEBE3 . #x9D1D)
                (#x8FEBE4 . #x9D1E)
                (#x8FEBE5 . #x9D2F)
                (#x8FEBE6 . #x9D30)
                (#x8FEBE7 . #x9D32)
                (#x8FEBE8 . #x9D33)
                (#x8FEBE9 . #x9D34)
                (#x8FEBEA . #x9D3A)
                (#x8FEBEB . #x9D3C)
                (#x8FEBEC . #x9D45)
                (#x8FEBED . #x9D3D)
                (#x8FEBEE . #x9D42)
                (#x8FEBEF . #x9D43)
                (#x8FEBF0 . #x9D47)
                (#x8FEBF1 . #x9D4A)
                (#x8FEBF2 . #x9D53)
                (#x8FEBF3 . #x9D54)
                (#x8FEBF4 . #x9D5F)
                (#x8FEBF5 . #x9D63)
                (#x8FEBF6 . #x9D62)
                (#x8FEBF7 . #x9D65)
                (#x8FEBF8 . #x9D69)
                (#x8FEBF9 . #x9D6A)
                (#x8FEBFA . #x9D6B)
                (#x8FEBFB . #x9D70)
                (#x8FEBFC . #x9D76)
                (#x8FEBFD . #x9D77)
                (#x8FEBFE . #x9D7B)
                (#x8FECA1 . #x9D7C)
                (#x8FECA2 . #x9D7E)
                (#x8FECA3 . #x9D83)
                (#x8FECA4 . #x9D84)
                (#x8FECA5 . #x9D86)
                (#x8FECA6 . #x9D8A)
                (#x8FECA7 . #x9D8D)
                (#x8FECA8 . #x9D8E)
                (#x8FECA9 . #x9D92)
                (#x8FECAA . #x9D93)
                (#x8FECAB . #x9D95)
                (#x8FECAC . #x9D96)
                (#x8FECAD . #x9D97)
                (#x8FECAE . #x9D98)
                (#x8FECAF . #x9DA1)
                (#x8FECB0 . #x9DAA)
                (#x8FECB1 . #x9DAC)
                (#x8FECB2 . #x9DAE)
                (#x8FECB3 . #x9DB1)
                (#x8FECB4 . #x9DB5)
                (#x8FECB5 . #x9DB9)
                (#x8FECB6 . #x9DBC)
                (#x8FECB7 . #x9DBF)
                (#x8FECB8 . #x9DC3)
                (#x8FECB9 . #x9DC7)
                (#x8FECBA . #x9DC9)
                (#x8FECBB . #x9DCA)
                (#x8FECBC . #x9DD4)
                (#x8FECBD . #x9DD5)
                (#x8FECBE . #x9DD6)
                (#x8FECBF . #x9DD7)
                (#x8FECC0 . #x9DDA)
                (#x8FECC1 . #x9DDE)
                (#x8FECC2 . #x9DDF)
                (#x8FECC3 . #x9DE0)
                (#x8FECC4 . #x9DE5)
                (#x8FECC5 . #x9DE7)
                (#x8FECC6 . #x9DE9)
                (#x8FECC7 . #x9DEB)
                (#x8FECC8 . #x9DEE)
                (#x8FECC9 . #x9DF0)
                (#x8FECCA . #x9DF3)
                (#x8FECCB . #x9DF4)
                (#x8FECCC . #x9DFE)
                (#x8FECCD . #x9E0A)
                (#x8FECCE . #x9E02)
                (#x8FECCF . #x9E07)
                (#x8FECD0 . #x9E0E)
                (#x8FECD1 . #x9E10)
                (#x8FECD2 . #x9E11)
                (#x8FECD3 . #x9E12)
                (#x8FECD4 . #x9E15)
                (#x8FECD5 . #x9E16)
                (#x8FECD6 . #x9E19)
                (#x8FECD7 . #x9E1C)
                (#x8FECD8 . #x9E1D)
                (#x8FECD9 . #x9E7A)
                (#x8FECDA . #x9E7B)
                (#x8FECDB . #x9E7C)
                (#x8FECDC . #x9E80)
                (#x8FECDD . #x9E82)
                (#x8FECDE . #x9E83)
                (#x8FECDF . #x9E84)
                (#x8FECE0 . #x9E85)
                (#x8FECE1 . #x9E87)
                (#x8FECE2 . #x9E8E)
                (#x8FECE3 . #x9E8F)
                (#x8FECE4 . #x9E96)
                (#x8FECE5 . #x9E98)
                (#x8FECE6 . #x9E9B)
                (#x8FECE7 . #x9E9E)
                (#x8FECE8 . #x9EA4)
                (#x8FECE9 . #x9EA8)
                (#x8FECEA . #x9EAC)
                (#x8FECEB . #x9EAE)
                (#x8FECEC . #x9EAF)
                (#x8FECED . #x9EB0)
                (#x8FECEE . #x9EB3)
                (#x8FECEF . #x9EB4)
                (#x8FECF0 . #x9EB5)
                (#x8FECF1 . #x9EC6)
                (#x8FECF2 . #x9EC8)
                (#x8FECF3 . #x9ECB)
                (#x8FECF4 . #x9ED5)
                (#x8FECF5 . #x9EDF)
                (#x8FECF6 . #x9EE4)
                (#x8FECF7 . #x9EE7)
                (#x8FECF8 . #x9EEC)
                (#x8FECF9 . #x9EED)
                (#x8FECFA . #x9EEE)
                (#x8FECFB . #x9EF0)
                (#x8FECFC . #x9EF1)
                (#x8FECFD . #x9EF2)
                (#x8FECFE . #x9EF5)
                (#x8FEDA1 . #x9EF8)
                (#x8FEDA2 . #x9EFF)
                (#x8FEDA3 . #x9F02)
                (#x8FEDA4 . #x9F03)
                (#x8FEDA5 . #x9F09)
                (#x8FEDA6 . #x9F0F)
                (#x8FEDA7 . #x9F10)
                (#x8FEDA8 . #x9F11)
                (#x8FEDA9 . #x9F12)
                (#x8FEDAA . #x9F14)
                (#x8FEDAB . #x9F16)
                (#x8FEDAC . #x9F17)
                (#x8FEDAD . #x9F19)
                (#x8FEDAE . #x9F1A)
                (#x8FEDAF . #x9F1B)
                (#x8FEDB0 . #x9F1F)
                (#x8FEDB1 . #x9F22)
                (#x8FEDB2 . #x9F26)
                (#x8FEDB3 . #x9F2A)
                (#x8FEDB4 . #x9F2B)
                (#x8FEDB5 . #x9F2F)
                (#x8FEDB6 . #x9F31)
                (#x8FEDB7 . #x9F32)
                (#x8FEDB8 . #x9F34)
                (#x8FEDB9 . #x9F37)
                (#x8FEDBA . #x9F39)
                (#x8FEDBB . #x9F3A)
                (#x8FEDBC . #x9F3C)
                (#x8FEDBD . #x9F3D)
                (#x8FEDBE . #x9F3F)
                (#x8FEDBF . #x9F41)
                (#x8FEDC0 . #x9F43)
                (#x8FEDC1 . #x9F44)
                (#x8FEDC2 . #x9F45)
                (#x8FEDC3 . #x9F46)
                (#x8FEDC4 . #x9F47)
                (#x8FEDC5 . #x9F53)
                (#x8FEDC6 . #x9F55)
                (#x8FEDC7 . #x9F56)
                (#x8FEDC8 . #x9F57)
                (#x8FEDC9 . #x9F58)
                (#x8FEDCA . #x9F5A)
                (#x8FEDCB . #x9F5D)
                (#x8FEDCC . #x9F5E)
                (#x8FEDCD . #x9F68)
                (#x8FEDCE . #x9F69)
                (#x8FEDCF . #x9F6D)
                (#x8FEDD0 . #x9F6E)
                (#x8FEDD1 . #x9F6F)
                (#x8FEDD2 . #x9F70)
                (#x8FEDD3 . #x9F71)
                (#x8FEDD4 . #x9F73)
                (#x8FEDD5 . #x9F75)
                (#x8FEDD6 . #x9F7A)
                (#x8FEDD7 . #x9F7D)
                (#x8FEDD8 . #x9F8F)
                (#x8FEDD9 . #x9F90)
                (#x8FEDDA . #x9F91)
                (#x8FEDDB . #x9F92)
                (#x8FEDDC . #x9F94)
                (#x8FEDDD . #x9F96)
                (#x8FEDDE . #x9F97)
                (#x8FEDDF . #x9F9E)
                (#x8FEDE0 . #x9FA1)
                (#x8FEDE1 . #x9FA2)
                (#x8FEDE2 . #x9FA3)
                (#x8FEDE3 . #x9FA5)
                (#x8FF5A1 . #xE3AC)
                (#x8FF5A2 . #xE3AD)
                (#x8FF5A3 . #xE3AE)
                (#x8FF5A4 . #xE3AF)
                (#x8FF5A5 . #xE3B0)
                (#x8FF5A6 . #xE3B1)
                (#x8FF5A7 . #xE3B2)
                (#x8FF5A8 . #xE3B3)
                (#x8FF5A9 . #xE3B4)
                (#x8FF5AA . #xE3B5)
                (#x8FF5AB . #xE3B6)
                (#x8FF5AC . #xE3B7)
                (#x8FF5AD . #xE3B8)
                (#x8FF5AE . #xE3B9)
                (#x8FF5AF . #xE3BA)
                (#x8FF5B0 . #xE3BB)
                (#x8FF5B1 . #xE3BC)
                (#x8FF5B2 . #xE3BD)
                (#x8FF5B3 . #xE3BE)
                (#x8FF5B4 . #xE3BF)
                (#x8FF5B5 . #xE3C0)
                (#x8FF5B6 . #xE3C1)
                (#x8FF5B7 . #xE3C2)
                (#x8FF5B8 . #xE3C3)
                (#x8FF5B9 . #xE3C4)
                (#x8FF5BA . #xE3C5)
                (#x8FF5BB . #xE3C6)
                (#x8FF5BC . #xE3C7)
                (#x8FF5BD . #xE3C8)
                (#x8FF5BE . #xE3C9)
                (#x8FF5BF . #xE3CA)
                (#x8FF5C0 . #xE3CB)
                (#x8FF5C1 . #xE3CC)
                (#x8FF5C2 . #xE3CD)
                (#x8FF5C3 . #xE3CE)
                (#x8FF5C4 . #xE3CF)
                (#x8FF5C5 . #xE3D0)
                (#x8FF5C6 . #xE3D1)
                (#x8FF5C7 . #xE3D2)
                (#x8FF5C8 . #xE3D3)
                (#x8FF5C9 . #xE3D4)
                (#x8FF5CA . #xE3D5)
                (#x8FF5CB . #xE3D6)
                (#x8FF5CC . #xE3D7)
                (#x8FF5CD . #xE3D8)
                (#x8FF5CE . #xE3D9)
                (#x8FF5CF . #xE3DA)
                (#x8FF5D0 . #xE3DB)
                (#x8FF5D1 . #xE3DC)
                (#x8FF5D2 . #xE3DD)
                (#x8FF5D3 . #xE3DE)
                (#x8FF5D4 . #xE3DF)
                (#x8FF5D5 . #xE3E0)
                (#x8FF5D6 . #xE3E1)
                (#x8FF5D7 . #xE3E2)
                (#x8FF5D8 . #xE3E3)
                (#x8FF5D9 . #xE3E4)
                (#x8FF5DA . #xE3E5)
                (#x8FF5DB . #xE3E6)
                (#x8FF5DC . #xE3E7)
                (#x8FF5DD . #xE3E8)
                (#x8FF5DE . #xE3E9)
                (#x8FF5DF . #xE3EA)
                (#x8FF5E0 . #xE3EB)
                (#x8FF5E1 . #xE3EC)
                (#x8FF5E2 . #xE3ED)
                (#x8FF5E3 . #xE3EE)
                (#x8FF5E4 . #xE3EF)
                (#x8FF5E5 . #xE3F0)
                (#x8FF5E6 . #xE3F1)
                (#x8FF5E7 . #xE3F2)
                (#x8FF5E8 . #xE3F3)
                (#x8FF5E9 . #xE3F4)
                (#x8FF5EA . #xE3F5)
                (#x8FF5EB . #xE3F6)
                (#x8FF5EC . #xE3F7)
                (#x8FF5ED . #xE3F8)
                (#x8FF5EE . #xE3F9)
                (#x8FF5EF . #xE3FA)
                (#x8FF5F0 . #xE3FB)
                (#x8FF5F1 . #xE3FC)
                (#x8FF5F2 . #xE3FD)
                (#x8FF5F3 . #xE3FE)
                (#x8FF5F4 . #xE3FF)
                (#x8FF5F5 . #xE400)
                (#x8FF5F6 . #xE401)
                (#x8FF5F7 . #xE402)
                (#x8FF5F8 . #xE403)
                (#x8FF5F9 . #xE404)
                (#x8FF5FA . #xE405)
                (#x8FF5FB . #xE406)
                (#x8FF5FC . #xE407)
                (#x8FF5FD . #xE408)
                (#x8FF5FE . #xE409)
                (#x8FF6A1 . #xE40A)
                (#x8FF6A2 . #xE40B)
                (#x8FF6A3 . #xE40C)
                (#x8FF6A4 . #xE40D)
                (#x8FF6A5 . #xE40E)
                (#x8FF6A6 . #xE40F)
                (#x8FF6A7 . #xE410)
                (#x8FF6A8 . #xE411)
                (#x8FF6A9 . #xE412)
                (#x8FF6AA . #xE413)
                (#x8FF6AB . #xE414)
                (#x8FF6AC . #xE415)
                (#x8FF6AD . #xE416)
                (#x8FF6AE . #xE417)
                (#x8FF6AF . #xE418)
                (#x8FF6B0 . #xE419)
                (#x8FF6B1 . #xE41A)
                (#x8FF6B2 . #xE41B)
                (#x8FF6B3 . #xE41C)
                (#x8FF6B4 . #xE41D)
                (#x8FF6B5 . #xE41E)
                (#x8FF6B6 . #xE41F)
                (#x8FF6B7 . #xE420)
                (#x8FF6B8 . #xE421)
                (#x8FF6B9 . #xE422)
                (#x8FF6BA . #xE423)
                (#x8FF6BB . #xE424)
                (#x8FF6BC . #xE425)
                (#x8FF6BD . #xE426)
                (#x8FF6BE . #xE427)
                (#x8FF6BF . #xE428)
                (#x8FF6C0 . #xE429)
                (#x8FF6C1 . #xE42A)
                (#x8FF6C2 . #xE42B)
                (#x8FF6C3 . #xE42C)
                (#x8FF6C4 . #xE42D)
                (#x8FF6C5 . #xE42E)
                (#x8FF6C6 . #xE42F)
                (#x8FF6C7 . #xE430)
                (#x8FF6C8 . #xE431)
                (#x8FF6C9 . #xE432)
                (#x8FF6CA . #xE433)
                (#x8FF6CB . #xE434)
                (#x8FF6CC . #xE435)
                (#x8FF6CD . #xE436)
                (#x8FF6CE . #xE437)
                (#x8FF6CF . #xE438)
                (#x8FF6D0 . #xE439)
                (#x8FF6D1 . #xE43A)
                (#x8FF6D2 . #xE43B)
                (#x8FF6D3 . #xE43C)
                (#x8FF6D4 . #xE43D)
                (#x8FF6D5 . #xE43E)
                (#x8FF6D6 . #xE43F)
                (#x8FF6D7 . #xE440)
                (#x8FF6D8 . #xE441)
                (#x8FF6D9 . #xE442)
                (#x8FF6DA . #xE443)
                (#x8FF6DB . #xE444)
                (#x8FF6DC . #xE445)
                (#x8FF6DD . #xE446)
                (#x8FF6DE . #xE447)
                (#x8FF6DF . #xE448)
                (#x8FF6E0 . #xE449)
                (#x8FF6E1 . #xE44A)
                (#x8FF6E2 . #xE44B)
                (#x8FF6E3 . #xE44C)
                (#x8FF6E4 . #xE44D)
                (#x8FF6E5 . #xE44E)
                (#x8FF6E6 . #xE44F)
                (#x8FF6E7 . #xE450)
                (#x8FF6E8 . #xE451)
                (#x8FF6E9 . #xE452)
                (#x8FF6EA . #xE453)
                (#x8FF6EB . #xE454)
                (#x8FF6EC . #xE455)
                (#x8FF6ED . #xE456)
                (#x8FF6EE . #xE457)
                (#x8FF6EF . #xE458)
                (#x8FF6F0 . #xE459)
                (#x8FF6F1 . #xE45A)
                (#x8FF6F2 . #xE45B)
                (#x8FF6F3 . #xE45C)
                (#x8FF6F4 . #xE45D)
                (#x8FF6F5 . #xE45E)
                (#x8FF6F6 . #xE45F)
                (#x8FF6F7 . #xE460)
                (#x8FF6F8 . #xE461)
                (#x8FF6F9 . #xE462)
                (#x8FF6FA . #xE463)
                (#x8FF6FB . #xE464)
                (#x8FF6FC . #xE465)
                (#x8FF6FD . #xE466)
                (#x8FF6FE . #xE467)
                (#x8FF7A1 . #xE468)
                (#x8FF7A2 . #xE469)
                (#x8FF7A3 . #xE46A)
                (#x8FF7A4 . #xE46B)
                (#x8FF7A5 . #xE46C)
                (#x8FF7A6 . #xE46D)
                (#x8FF7A7 . #xE46E)
                (#x8FF7A8 . #xE46F)
                (#x8FF7A9 . #xE470)
                (#x8FF7AA . #xE471)
                (#x8FF7AB . #xE472)
                (#x8FF7AC . #xE473)
                (#x8FF7AD . #xE474)
                (#x8FF7AE . #xE475)
                (#x8FF7AF . #xE476)
                (#x8FF7B0 . #xE477)
                (#x8FF7B1 . #xE478)
                (#x8FF7B2 . #xE479)
                (#x8FF7B3 . #xE47A)
                (#x8FF7B4 . #xE47B)
                (#x8FF7B5 . #xE47C)
                (#x8FF7B6 . #xE47D)
                (#x8FF7B7 . #xE47E)
                (#x8FF7B8 . #xE47F)
                (#x8FF7B9 . #xE480)
                (#x8FF7BA . #xE481)
                (#x8FF7BB . #xE482)
                (#x8FF7BC . #xE483)
                (#x8FF7BD . #xE484)
                (#x8FF7BE . #xE485)
                (#x8FF7BF . #xE486)
                (#x8FF7C0 . #xE487)
                (#x8FF7C1 . #xE488)
                (#x8FF7C2 . #xE489)
                (#x8FF7C3 . #xE48A)
                (#x8FF7C4 . #xE48B)
                (#x8FF7C5 . #xE48C)
                (#x8FF7C6 . #xE48D)
                (#x8FF7C7 . #xE48E)
                (#x8FF7C8 . #xE48F)
                (#x8FF7C9 . #xE490)
                (#x8FF7CA . #xE491)
                (#x8FF7CB . #xE492)
                (#x8FF7CC . #xE493)
                (#x8FF7CD . #xE494)
                (#x8FF7CE . #xE495)
                (#x8FF7CF . #xE496)
                (#x8FF7D0 . #xE497)
                (#x8FF7D1 . #xE498)
                (#x8FF7D2 . #xE499)
                (#x8FF7D3 . #xE49A)
                (#x8FF7D4 . #xE49B)
                (#x8FF7D5 . #xE49C)
                (#x8FF7D6 . #xE49D)
                (#x8FF7D7 . #xE49E)
                (#x8FF7D8 . #xE49F)
                (#x8FF7D9 . #xE4A0)
                (#x8FF7DA . #xE4A1)
                (#x8FF7DB . #xE4A2)
                (#x8FF7DC . #xE4A3)
                (#x8FF7DD . #xE4A4)
                (#x8FF7DE . #xE4A5)
                (#x8FF7DF . #xE4A6)
                (#x8FF7E0 . #xE4A7)
                (#x8FF7E1 . #xE4A8)
                (#x8FF7E2 . #xE4A9)
                (#x8FF7E3 . #xE4AA)
                (#x8FF7E4 . #xE4AB)
                (#x8FF7E5 . #xE4AC)
                (#x8FF7E6 . #xE4AD)
                (#x8FF7E7 . #xE4AE)
                (#x8FF7E8 . #xE4AF)
                (#x8FF7E9 . #xE4B0)
                (#x8FF7EA . #xE4B1)
                (#x8FF7EB . #xE4B2)
                (#x8FF7EC . #xE4B3)
                (#x8FF7ED . #xE4B4)
                (#x8FF7EE . #xE4B5)
                (#x8FF7EF . #xE4B6)
                (#x8FF7F0 . #xE4B7)
                (#x8FF7F1 . #xE4B8)
                (#x8FF7F2 . #xE4B9)
                (#x8FF7F3 . #xE4BA)
                (#x8FF7F4 . #xE4BB)
                (#x8FF7F5 . #xE4BC)
                (#x8FF7F6 . #xE4BD)
                (#x8FF7F7 . #xE4BE)
                (#x8FF7F8 . #xE4BF)
                (#x8FF7F9 . #xE4C0)
                (#x8FF7FA . #xE4C1)
                (#x8FF7FB . #xE4C2)
                (#x8FF7FC . #xE4C3)
                (#x8FF7FD . #xE4C4)
                (#x8FF7FE . #xE4C5)
                (#x8FF8A1 . #xE4C6)
                (#x8FF8A2 . #xE4C7)
                (#x8FF8A3 . #xE4C8)
                (#x8FF8A4 . #xE4C9)
                (#x8FF8A5 . #xE4CA)
                (#x8FF8A6 . #xE4CB)
                (#x8FF8A7 . #xE4CC)
                (#x8FF8A8 . #xE4CD)
                (#x8FF8A9 . #xE4CE)
                (#x8FF8AA . #xE4CF)
                (#x8FF8AB . #xE4D0)
                (#x8FF8AC . #xE4D1)
                (#x8FF8AD . #xE4D2)
                (#x8FF8AE . #xE4D3)
                (#x8FF8AF . #xE4D4)
                (#x8FF8B0 . #xE4D5)
                (#x8FF8B1 . #xE4D6)
                (#x8FF8B2 . #xE4D7)
                (#x8FF8B3 . #xE4D8)
                (#x8FF8B4 . #xE4D9)
                (#x8FF8B5 . #xE4DA)
                (#x8FF8B6 . #xE4DB)
                (#x8FF8B7 . #xE4DC)
                (#x8FF8B8 . #xE4DD)
                (#x8FF8B9 . #xE4DE)
                (#x8FF8BA . #xE4DF)
                (#x8FF8BB . #xE4E0)
                (#x8FF8BC . #xE4E1)
                (#x8FF8BD . #xE4E2)
                (#x8FF8BE . #xE4E3)
                (#x8FF8BF . #xE4E4)
                (#x8FF8C0 . #xE4E5)
                (#x8FF8C1 . #xE4E6)
                (#x8FF8C2 . #xE4E7)
                (#x8FF8C3 . #xE4E8)
                (#x8FF8C4 . #xE4E9)
                (#x8FF8C5 . #xE4EA)
                (#x8FF8C6 . #xE4EB)
                (#x8FF8C7 . #xE4EC)
                (#x8FF8C8 . #xE4ED)
                (#x8FF8C9 . #xE4EE)
                (#x8FF8CA . #xE4EF)
                (#x8FF8CB . #xE4F0)
                (#x8FF8CC . #xE4F1)
                (#x8FF8CD . #xE4F2)
                (#x8FF8CE . #xE4F3)
                (#x8FF8CF . #xE4F4)
                (#x8FF8D0 . #xE4F5)
                (#x8FF8D1 . #xE4F6)
                (#x8FF8D2 . #xE4F7)
                (#x8FF8D3 . #xE4F8)
                (#x8FF8D4 . #xE4F9)
                (#x8FF8D5 . #xE4FA)
                (#x8FF8D6 . #xE4FB)
                (#x8FF8D7 . #xE4FC)
                (#x8FF8D8 . #xE4FD)
                (#x8FF8D9 . #xE4FE)
                (#x8FF8DA . #xE4FF)
                (#x8FF8DB . #xE500)
                (#x8FF8DC . #xE501)
                (#x8FF8DD . #xE502)
                (#x8FF8DE . #xE503)
                (#x8FF8DF . #xE504)
                (#x8FF8E0 . #xE505)
                (#x8FF8E1 . #xE506)
                (#x8FF8E2 . #xE507)
                (#x8FF8E3 . #xE508)
                (#x8FF8E4 . #xE509)
                (#x8FF8E5 . #xE50A)
                (#x8FF8E6 . #xE50B)
                (#x8FF8E7 . #xE50C)
                (#x8FF8E8 . #xE50D)
                (#x8FF8E9 . #xE50E)
                (#x8FF8EA . #xE50F)
                (#x8FF8EB . #xE510)
                (#x8FF8EC . #xE511)
                (#x8FF8ED . #xE512)
                (#x8FF8EE . #xE513)
                (#x8FF8EF . #xE514)
                (#x8FF8F0 . #xE515)
                (#x8FF8F1 . #xE516)
                (#x8FF8F2 . #xE517)
                (#x8FF8F3 . #xE518)
                (#x8FF8F4 . #xE519)
                (#x8FF8F5 . #xE51A)
                (#x8FF8F6 . #xE51B)
                (#x8FF8F7 . #xE51C)
                (#x8FF8F8 . #xE51D)
                (#x8FF8F9 . #xE51E)
                (#x8FF8FA . #xE51F)
                (#x8FF8FB . #xE520)
                (#x8FF8FC . #xE521)
                (#x8FF8FD . #xE522)
                (#x8FF8FE . #xE523)
                (#x8FF9A1 . #xE524)
                (#x8FF9A2 . #xE525)
                (#x8FF9A3 . #xE526)
                (#x8FF9A4 . #xE527)
                (#x8FF9A5 . #xE528)
                (#x8FF9A6 . #xE529)
                (#x8FF9A7 . #xE52A)
                (#x8FF9A8 . #xE52B)
                (#x8FF9A9 . #xE52C)
                (#x8FF9AA . #xE52D)
                (#x8FF9AB . #xE52E)
                (#x8FF9AC . #xE52F)
                (#x8FF9AD . #xE530)
                (#x8FF9AE . #xE531)
                (#x8FF9AF . #xE532)
                (#x8FF9B0 . #xE533)
                (#x8FF9B1 . #xE534)
                (#x8FF9B2 . #xE535)
                (#x8FF9B3 . #xE536)
                (#x8FF9B4 . #xE537)
                (#x8FF9B5 . #xE538)
                (#x8FF9B6 . #xE539)
                (#x8FF9B7 . #xE53A)
                (#x8FF9B8 . #xE53B)
                (#x8FF9B9 . #xE53C)
                (#x8FF9BA . #xE53D)
                (#x8FF9BB . #xE53E)
                (#x8FF9BC . #xE53F)
                (#x8FF9BD . #xE540)
                (#x8FF9BE . #xE541)
                (#x8FF9BF . #xE542)
                (#x8FF9C0 . #xE543)
                (#x8FF9C1 . #xE544)
                (#x8FF9C2 . #xE545)
                (#x8FF9C3 . #xE546)
                (#x8FF9C4 . #xE547)
                (#x8FF9C5 . #xE548)
                (#x8FF9C6 . #xE549)
                (#x8FF9C7 . #xE54A)
                (#x8FF9C8 . #xE54B)
                (#x8FF9C9 . #xE54C)
                (#x8FF9CA . #xE54D)
                (#x8FF9CB . #xE54E)
                (#x8FF9CC . #xE54F)
                (#x8FF9CD . #xE550)
                (#x8FF9CE . #xE551)
                (#x8FF9CF . #xE552)
                (#x8FF9D0 . #xE553)
                (#x8FF9D1 . #xE554)
                (#x8FF9D2 . #xE555)
                (#x8FF9D3 . #xE556)
                (#x8FF9D4 . #xE557)
                (#x8FF9D5 . #xE558)
                (#x8FF9D6 . #xE559)
                (#x8FF9D7 . #xE55A)
                (#x8FF9D8 . #xE55B)
                (#x8FF9D9 . #xE55C)
                (#x8FF9DA . #xE55D)
                (#x8FF9DB . #xE55E)
                (#x8FF9DC . #xE55F)
                (#x8FF9DD . #xE560)
                (#x8FF9DE . #xE561)
                (#x8FF9DF . #xE562)
                (#x8FF9E0 . #xE563)
                (#x8FF9E1 . #xE564)
                (#x8FF9E2 . #xE565)
                (#x8FF9E3 . #xE566)
                (#x8FF9E4 . #xE567)
                (#x8FF9E5 . #xE568)
                (#x8FF9E6 . #xE569)
                (#x8FF9E7 . #xE56A)
                (#x8FF9E8 . #xE56B)
                (#x8FF9E9 . #xE56C)
                (#x8FF9EA . #xE56D)
                (#x8FF9EB . #xE56E)
                (#x8FF9EC . #xE56F)
                (#x8FF9ED . #xE570)
                (#x8FF9EE . #xE571)
                (#x8FF9EF . #xE572)
                (#x8FF9F0 . #xE573)
                (#x8FF9F1 . #xE574)
                (#x8FF9F2 . #xE575)
                (#x8FF9F3 . #xE576)
                (#x8FF9F4 . #xE577)
                (#x8FF9F5 . #xE578)
                (#x8FF9F6 . #xE579)
                (#x8FF9F7 . #xE57A)
                (#x8FF9F8 . #xE57B)
                (#x8FF9F9 . #xE57C)
                (#x8FF9FA . #xE57D)
                (#x8FF9FB . #xE57E)
                (#x8FF9FC . #xE57F)
                (#x8FF9FD . #xE580)
                (#x8FF9FE . #xE581)
                (#x8FFAA1 . #xE582)
                (#x8FFAA2 . #xE583)
                (#x8FFAA3 . #xE584)
                (#x8FFAA4 . #xE585)
                (#x8FFAA5 . #xE586)
                (#x8FFAA6 . #xE587)
                (#x8FFAA7 . #xE588)
                (#x8FFAA8 . #xE589)
                (#x8FFAA9 . #xE58A)
                (#x8FFAAA . #xE58B)
                (#x8FFAAB . #xE58C)
                (#x8FFAAC . #xE58D)
                (#x8FFAAD . #xE58E)
                (#x8FFAAE . #xE58F)
                (#x8FFAAF . #xE590)
                (#x8FFAB0 . #xE591)
                (#x8FFAB1 . #xE592)
                (#x8FFAB2 . #xE593)
                (#x8FFAB3 . #xE594)
                (#x8FFAB4 . #xE595)
                (#x8FFAB5 . #xE596)
                (#x8FFAB6 . #xE597)
                (#x8FFAB7 . #xE598)
                (#x8FFAB8 . #xE599)
                (#x8FFAB9 . #xE59A)
                (#x8FFABA . #xE59B)
                (#x8FFABB . #xE59C)
                (#x8FFABC . #xE59D)
                (#x8FFABD . #xE59E)
                (#x8FFABE . #xE59F)
                (#x8FFABF . #xE5A0)
                (#x8FFAC0 . #xE5A1)
                (#x8FFAC1 . #xE5A2)
                (#x8FFAC2 . #xE5A3)
                (#x8FFAC3 . #xE5A4)
                (#x8FFAC4 . #xE5A5)
                (#x8FFAC5 . #xE5A6)
                (#x8FFAC6 . #xE5A7)
                (#x8FFAC7 . #xE5A8)
                (#x8FFAC8 . #xE5A9)
                (#x8FFAC9 . #xE5AA)
                (#x8FFACA . #xE5AB)
                (#x8FFACB . #xE5AC)
                (#x8FFACC . #xE5AD)
                (#x8FFACD . #xE5AE)
                (#x8FFACE . #xE5AF)
                (#x8FFACF . #xE5B0)
                (#x8FFAD0 . #xE5B1)
                (#x8FFAD1 . #xE5B2)
                (#x8FFAD2 . #xE5B3)
                (#x8FFAD3 . #xE5B4)
                (#x8FFAD4 . #xE5B5)
                (#x8FFAD5 . #xE5B6)
                (#x8FFAD6 . #xE5B7)
                (#x8FFAD7 . #xE5B8)
                (#x8FFAD8 . #xE5B9)
                (#x8FFAD9 . #xE5BA)
                (#x8FFADA . #xE5BB)
                (#x8FFADB . #xE5BC)
                (#x8FFADC . #xE5BD)
                (#x8FFADD . #xE5BE)
                (#x8FFADE . #xE5BF)
                (#x8FFADF . #xE5C0)
                (#x8FFAE0 . #xE5C1)
                (#x8FFAE1 . #xE5C2)
                (#x8FFAE2 . #xE5C3)
                (#x8FFAE3 . #xE5C4)
                (#x8FFAE4 . #xE5C5)
                (#x8FFAE5 . #xE5C6)
                (#x8FFAE6 . #xE5C7)
                (#x8FFAE7 . #xE5C8)
                (#x8FFAE8 . #xE5C9)
                (#x8FFAE9 . #xE5CA)
                (#x8FFAEA . #xE5CB)
                (#x8FFAEB . #xE5CC)
                (#x8FFAEC . #xE5CD)
                (#x8FFAED . #xE5CE)
                (#x8FFAEE . #xE5CF)
                (#x8FFAEF . #xE5D0)
                (#x8FFAF0 . #xE5D1)
                (#x8FFAF1 . #xE5D2)
                (#x8FFAF2 . #xE5D3)
                (#x8FFAF3 . #xE5D4)
                (#x8FFAF4 . #xE5D5)
                (#x8FFAF5 . #xE5D6)
                (#x8FFAF6 . #xE5D7)
                (#x8FFAF7 . #xE5D8)
                (#x8FFAF8 . #xE5D9)
                (#x8FFAF9 . #xE5DA)
                (#x8FFAFA . #xE5DB)
                (#x8FFAFB . #xE5DC)
                (#x8FFAFC . #xE5DD)
                (#x8FFAFD . #xE5DE)
                (#x8FFAFE . #xE5DF)
                (#x8FFBA1 . #xE5E0)
                (#x8FFBA2 . #xE5E1)
                (#x8FFBA3 . #xE5E2)
                (#x8FFBA4 . #xE5E3)
                (#x8FFBA5 . #xE5E4)
                (#x8FFBA6 . #xE5E5)
                (#x8FFBA7 . #xE5E6)
                (#x8FFBA8 . #xE5E7)
                (#x8FFBA9 . #xE5E8)
                (#x8FFBAA . #xE5E9)
                (#x8FFBAB . #xE5EA)
                (#x8FFBAC . #xE5EB)
                (#x8FFBAD . #xE5EC)
                (#x8FFBAE . #xE5ED)
                (#x8FFBAF . #xE5EE)
                (#x8FFBB0 . #xE5EF)
                (#x8FFBB1 . #xE5F0)
                (#x8FFBB2 . #xE5F1)
                (#x8FFBB3 . #xE5F2)
                (#x8FFBB4 . #xE5F3)
                (#x8FFBB5 . #xE5F4)
                (#x8FFBB6 . #xE5F5)
                (#x8FFBB7 . #xE5F6)
                (#x8FFBB8 . #xE5F7)
                (#x8FFBB9 . #xE5F8)
                (#x8FFBBA . #xE5F9)
                (#x8FFBBB . #xE5FA)
                (#x8FFBBC . #xE5FB)
                (#x8FFBBD . #xE5FC)
                (#x8FFBBE . #xE5FD)
                (#x8FFBBF . #xE5FE)
                (#x8FFBC0 . #xE5FF)
                (#x8FFBC1 . #xE600)
                (#x8FFBC2 . #xE601)
                (#x8FFBC3 . #xE602)
                (#x8FFBC4 . #xE603)
                (#x8FFBC5 . #xE604)
                (#x8FFBC6 . #xE605)
                (#x8FFBC7 . #xE606)
                (#x8FFBC8 . #xE607)
                (#x8FFBC9 . #xE608)
                (#x8FFBCA . #xE609)
                (#x8FFBCB . #xE60A)
                (#x8FFBCC . #xE60B)
                (#x8FFBCD . #xE60C)
                (#x8FFBCE . #xE60D)
                (#x8FFBCF . #xE60E)
                (#x8FFBD0 . #xE60F)
                (#x8FFBD1 . #xE610)
                (#x8FFBD2 . #xE611)
                (#x8FFBD3 . #xE612)
                (#x8FFBD4 . #xE613)
                (#x8FFBD5 . #xE614)
                (#x8FFBD6 . #xE615)
                (#x8FFBD7 . #xE616)
                (#x8FFBD8 . #xE617)
                (#x8FFBD9 . #xE618)
                (#x8FFBDA . #xE619)
                (#x8FFBDB . #xE61A)
                (#x8FFBDC . #xE61B)
                (#x8FFBDD . #xE61C)
                (#x8FFBDE . #xE61D)
                (#x8FFBDF . #xE61E)
                (#x8FFBE0 . #xE61F)
                (#x8FFBE1 . #xE620)
                (#x8FFBE2 . #xE621)
                (#x8FFBE3 . #xE622)
                (#x8FFBE4 . #xE623)
                (#x8FFBE5 . #xE624)
                (#x8FFBE6 . #xE625)
                (#x8FFBE7 . #xE626)
                (#x8FFBE8 . #xE627)
                (#x8FFBE9 . #xE628)
                (#x8FFBEA . #xE629)
                (#x8FFBEB . #xE62A)
                (#x8FFBEC . #xE62B)
                (#x8FFBED . #xE62C)
                (#x8FFBEE . #xE62D)
                (#x8FFBEF . #xE62E)
                (#x8FFBF0 . #xE62F)
                (#x8FFBF1 . #xE630)
                (#x8FFBF2 . #xE631)
                (#x8FFBF3 . #xE632)
                (#x8FFBF4 . #xE633)
                (#x8FFBF5 . #xE634)
                (#x8FFBF6 . #xE635)
                (#x8FFBF7 . #xE636)
                (#x8FFBF8 . #xE637)
                (#x8FFBF9 . #xE638)
                (#x8FFBFA . #xE639)
                (#x8FFBFB . #xE63A)
                (#x8FFBFC . #xE63B)
                (#x8FFBFD . #xE63C)
                (#x8FFBFE . #xE63D)
                (#x8FFCA1 . #xE63E)
                (#x8FFCA2 . #xE63F)
                (#x8FFCA3 . #xE640)
                (#x8FFCA4 . #xE641)
                (#x8FFCA5 . #xE642)
                (#x8FFCA6 . #xE643)
                (#x8FFCA7 . #xE644)
                (#x8FFCA8 . #xE645)
                (#x8FFCA9 . #xE646)
                (#x8FFCAA . #xE647)
                (#x8FFCAB . #xE648)
                (#x8FFCAC . #xE649)
                (#x8FFCAD . #xE64A)
                (#x8FFCAE . #xE64B)
                (#x8FFCAF . #xE64C)
                (#x8FFCB0 . #xE64D)
                (#x8FFCB1 . #xE64E)
                (#x8FFCB2 . #xE64F)
                (#x8FFCB3 . #xE650)
                (#x8FFCB4 . #xE651)
                (#x8FFCB5 . #xE652)
                (#x8FFCB6 . #xE653)
                (#x8FFCB7 . #xE654)
                (#x8FFCB8 . #xE655)
                (#x8FFCB9 . #xE656)
                (#x8FFCBA . #xE657)
                (#x8FFCBB . #xE658)
                (#x8FFCBC . #xE659)
                (#x8FFCBD . #xE65A)
                (#x8FFCBE . #xE65B)
                (#x8FFCBF . #xE65C)
                (#x8FFCC0 . #xE65D)
                (#x8FFCC1 . #xE65E)
                (#x8FFCC2 . #xE65F)
                (#x8FFCC3 . #xE660)
                (#x8FFCC4 . #xE661)
                (#x8FFCC5 . #xE662)
                (#x8FFCC6 . #xE663)
                (#x8FFCC7 . #xE664)
                (#x8FFCC8 . #xE665)
                (#x8FFCC9 . #xE666)
                (#x8FFCCA . #xE667)
                (#x8FFCCB . #xE668)
                (#x8FFCCC . #xE669)
                (#x8FFCCD . #xE66A)
                (#x8FFCCE . #xE66B)
                (#x8FFCCF . #xE66C)
                (#x8FFCD0 . #xE66D)
                (#x8FFCD1 . #xE66E)
                (#x8FFCD2 . #xE66F)
                (#x8FFCD3 . #xE670)
                (#x8FFCD4 . #xE671)
                (#x8FFCD5 . #xE672)
                (#x8FFCD6 . #xE673)
                (#x8FFCD7 . #xE674)
                (#x8FFCD8 . #xE675)
                (#x8FFCD9 . #xE676)
                (#x8FFCDA . #xE677)
                (#x8FFCDB . #xE678)
                (#x8FFCDC . #xE679)
                (#x8FFCDD . #xE67A)
                (#x8FFCDE . #xE67B)
                (#x8FFCDF . #xE67C)
                (#x8FFCE0 . #xE67D)
                (#x8FFCE1 . #xE67E)
                (#x8FFCE2 . #xE67F)
                (#x8FFCE3 . #xE680)
                (#x8FFCE4 . #xE681)
                (#x8FFCE5 . #xE682)
                (#x8FFCE6 . #xE683)
                (#x8FFCE7 . #xE684)
                (#x8FFCE8 . #xE685)
                (#x8FFCE9 . #xE686)
                (#x8FFCEA . #xE687)
                (#x8FFCEB . #xE688)
                (#x8FFCEC . #xE689)
                (#x8FFCED . #xE68A)
                (#x8FFCEE . #xE68B)
                (#x8FFCEF . #xE68C)
                (#x8FFCF0 . #xE68D)
                (#x8FFCF1 . #xE68E)
                (#x8FFCF2 . #xE68F)
                (#x8FFCF3 . #xE690)
                (#x8FFCF4 . #xE691)
                (#x8FFCF5 . #xE692)
                (#x8FFCF6 . #xE693)
                (#x8FFCF7 . #xE694)
                (#x8FFCF8 . #xE695)
                (#x8FFCF9 . #xE696)
                (#x8FFCFA . #xE697)
                (#x8FFCFB . #xE698)
                (#x8FFCFC . #xE699)
                (#x8FFCFD . #xE69A)
                (#x8FFCFE . #xE69B)
                (#x8FFDA1 . #xE69C)
                (#x8FFDA2 . #xE69D)
                (#x8FFDA3 . #xE69E)
                (#x8FFDA4 . #xE69F)
                (#x8FFDA5 . #xE6A0)
                (#x8FFDA6 . #xE6A1)
                (#x8FFDA7 . #xE6A2)
                (#x8FFDA8 . #xE6A3)
                (#x8FFDA9 . #xE6A4)
                (#x8FFDAA . #xE6A5)
                (#x8FFDAB . #xE6A6)
                (#x8FFDAC . #xE6A7)
                (#x8FFDAD . #xE6A8)
                (#x8FFDAE . #xE6A9)
                (#x8FFDAF . #xE6AA)
                (#x8FFDB0 . #xE6AB)
                (#x8FFDB1 . #xE6AC)
                (#x8FFDB2 . #xE6AD)
                (#x8FFDB3 . #xE6AE)
                (#x8FFDB4 . #xE6AF)
                (#x8FFDB5 . #xE6B0)
                (#x8FFDB6 . #xE6B1)
                (#x8FFDB7 . #xE6B2)
                (#x8FFDB8 . #xE6B3)
                (#x8FFDB9 . #xE6B4)
                (#x8FFDBA . #xE6B5)
                (#x8FFDBB . #xE6B6)
                (#x8FFDBC . #xE6B7)
                (#x8FFDBD . #xE6B8)
                (#x8FFDBE . #xE6B9)
                (#x8FFDBF . #xE6BA)
                (#x8FFDC0 . #xE6BB)
                (#x8FFDC1 . #xE6BC)
                (#x8FFDC2 . #xE6BD)
                (#x8FFDC3 . #xE6BE)
                (#x8FFDC4 . #xE6BF)
                (#x8FFDC5 . #xE6C0)
                (#x8FFDC6 . #xE6C1)
                (#x8FFDC7 . #xE6C2)
                (#x8FFDC8 . #xE6C3)
                (#x8FFDC9 . #xE6C4)
                (#x8FFDCA . #xE6C5)
                (#x8FFDCB . #xE6C6)
                (#x8FFDCC . #xE6C7)
                (#x8FFDCD . #xE6C8)
                (#x8FFDCE . #xE6C9)
                (#x8FFDCF . #xE6CA)
                (#x8FFDD0 . #xE6CB)
                (#x8FFDD1 . #xE6CC)
                (#x8FFDD2 . #xE6CD)
                (#x8FFDD3 . #xE6CE)
                (#x8FFDD4 . #xE6CF)
                (#x8FFDD5 . #xE6D0)
                (#x8FFDD6 . #xE6D1)
                (#x8FFDD7 . #xE6D2)
                (#x8FFDD8 . #xE6D3)
                (#x8FFDD9 . #xE6D4)
                (#x8FFDDA . #xE6D5)
                (#x8FFDDB . #xE6D6)
                (#x8FFDDC . #xE6D7)
                (#x8FFDDD . #xE6D8)
                (#x8FFDDE . #xE6D9)
                (#x8FFDDF . #xE6DA)
                (#x8FFDE0 . #xE6DB)
                (#x8FFDE1 . #xE6DC)
                (#x8FFDE2 . #xE6DD)
                (#x8FFDE3 . #xE6DE)
                (#x8FFDE4 . #xE6DF)
                (#x8FFDE5 . #xE6E0)
                (#x8FFDE6 . #xE6E1)
                (#x8FFDE7 . #xE6E2)
                (#x8FFDE8 . #xE6E3)
                (#x8FFDE9 . #xE6E4)
                (#x8FFDEA . #xE6E5)
                (#x8FFDEB . #xE6E6)
                (#x8FFDEC . #xE6E7)
                (#x8FFDED . #xE6E8)
                (#x8FFDEE . #xE6E9)
                (#x8FFDEF . #xE6EA)
                (#x8FFDF0 . #xE6EB)
                (#x8FFDF1 . #xE6EC)
                (#x8FFDF2 . #xE6ED)
                (#x8FFDF3 . #xE6EE)
                (#x8FFDF4 . #xE6EF)
                (#x8FFDF5 . #xE6F0)
                (#x8FFDF6 . #xE6F1)
                (#x8FFDF7 . #xE6F2)
                (#x8FFDF8 . #xE6F3)
                (#x8FFDF9 . #xE6F4)
                (#x8FFDFA . #xE6F5)
                (#x8FFDFB . #xE6F6)
                (#x8FFDFC . #xE6F7)
                (#x8FFDFD . #xE6F8)
                (#x8FFDFE . #xE6F9)
                (#x8FFEA1 . #xE6FA)
                (#x8FFEA2 . #xE6FB)
                (#x8FFEA3 . #xE6FC)
                (#x8FFEA4 . #xE6FD)
                (#x8FFEA5 . #xE6FE)
                (#x8FFEA6 . #xE6FF)
                (#x8FFEA7 . #xE700)
                (#x8FFEA8 . #xE701)
                (#x8FFEA9 . #xE702)
                (#x8FFEAA . #xE703)
                (#x8FFEAB . #xE704)
                (#x8FFEAC . #xE705)
                (#x8FFEAD . #xE706)
                (#x8FFEAE . #xE707)
                (#x8FFEAF . #xE708)
                (#x8FFEB0 . #xE709)
                (#x8FFEB1 . #xE70A)
                (#x8FFEB2 . #xE70B)
                (#x8FFEB3 . #xE70C)
                (#x8FFEB4 . #xE70D)
                (#x8FFEB5 . #xE70E)
                (#x8FFEB6 . #xE70F)
                (#x8FFEB7 . #xE710)
                (#x8FFEB8 . #xE711)
                (#x8FFEB9 . #xE712)
                (#x8FFEBA . #xE713)
                (#x8FFEBB . #xE714)
                (#x8FFEBC . #xE715)
                (#x8FFEBD . #xE716)
                (#x8FFEBE . #xE717)
                (#x8FFEBF . #xE718)
                (#x8FFEC0 . #xE719)
                (#x8FFEC1 . #xE71A)
                (#x8FFEC2 . #xE71B)
                (#x8FFEC3 . #xE71C)
                (#x8FFEC4 . #xE71D)
                (#x8FFEC5 . #xE71E)
                (#x8FFEC6 . #xE71F)
                (#x8FFEC7 . #xE720)
                (#x8FFEC8 . #xE721)
                (#x8FFEC9 . #xE722)
                (#x8FFECA . #xE723)
                (#x8FFECB . #xE724)
                (#x8FFECC . #xE725)
                (#x8FFECD . #xE726)
                (#x8FFECE . #xE727)
                (#x8FFECF . #xE728)
                (#x8FFED0 . #xE729)
                (#x8FFED1 . #xE72A)
                (#x8FFED2 . #xE72B)
                (#x8FFED3 . #xE72C)
                (#x8FFED4 . #xE72D)
                (#x8FFED5 . #xE72E)
                (#x8FFED6 . #xE72F)
                (#x8FFED7 . #xE730)
                (#x8FFED8 . #xE731)
                (#x8FFED9 . #xE732)
                (#x8FFEDA . #xE733)
                (#x8FFEDB . #xE734)
                (#x8FFEDC . #xE735)
                (#x8FFEDD . #xE736)
                (#x8FFEDE . #xE737)
                (#x8FFEDF . #xE738)
                (#x8FFEE0 . #xE739)
                (#x8FFEE1 . #xE73A)
                (#x8FFEE2 . #xE73B)
                (#x8FFEE3 . #xE73C)
                (#x8FFEE4 . #xE73D)
                (#x8FFEE5 . #xE73E)
                (#x8FFEE6 . #xE73F)
                (#x8FFEE7 . #xE740)
                (#x8FFEE8 . #xE741)
                (#x8FFEE9 . #xE742)
                (#x8FFEEA . #xE743)
                (#x8FFEEB . #xE744)
                (#x8FFEEC . #xE745)
                (#x8FFEED . #xE746)
                (#x8FFEEE . #xE747)
                (#x8FFEEF . #xE748)
                (#x8FFEF0 . #xE749)
                (#x8FFEF1 . #xE74A)
                (#x8FFEF2 . #xE74B)
                (#x8FFEF3 . #xE74C)
                (#x8FFEF4 . #xE74D)
                (#x8FFEF5 . #xE74E)
                (#x8FFEF6 . #xE74F)
                (#x8FFEF7 . #xE750)
                (#x8FFEF8 . #xE751)
                (#x8FFEF9 . #xE752)
                (#x8FFEFA . #xE753)
                (#x8FFEFB . #xE754)
                (#x8FFEFC . #xE755)
                (#x8FFEFD . #xE756)
                (#x8FFEFE . #xE757)
                (#xA1A1 . #x3000)
                (#xA1A2 . #x3001)
                (#xA1A3 . #x3002)
                (#xA1A4 . #xFF0C)
                (#xA1A5 . #xFF0E)
                (#xA1A6 . #x30FB)
                (#xA1A7 . #xFF1A)
                (#xA1A8 . #xFF1B)
                (#xA1A9 . #xFF1F)
                (#xA1AA . #xFF01)
                (#xA1AB . #x309B)
                (#xA1AC . #x309C)
                (#xA1AD . #xB4)
                (#xA1AE . #xFF40)
                (#xA1AF . #xA8)
                (#xA1B0 . #xFF3E)
                (#xA1B1 . #xFFE3)
                (#xA1B2 . #xFF3F)
                (#xA1B3 . #x30FD)
                (#xA1B4 . #x30FE)
                (#xA1B5 . #x309D)
                (#xA1B6 . #x309E)
                (#xA1B7 . #x3003)
                (#xA1B8 . #x4EDD)
                (#xA1B9 . #x3005)
                (#xA1BA . #x3006)
                (#xA1BB . #x3007)
                (#xA1BC . #x30FC)
                (#xA1BD . #x2015)
                (#xA1BE . #x2010)
                (#xA1BF . #xFF0F)
                (#xA1C0 . #xFF3C)
                (#xA1C1 . #x301C)
                (#xA1C2 . #x2016)
                (#xA1C3 . #xFF5C)
                (#xA1C4 . #x2026)
                (#xA1C5 . #x2025)
                (#xA1C6 . #x2018)
                (#xA1C7 . #x2019)
                (#xA1C8 . #x201C)
                (#xA1C9 . #x201D)
                (#xA1CA . #xFF08)
                (#xA1CB . #xFF09)
                (#xA1CC . #x3014)
                (#xA1CD . #x3015)
                (#xA1CE . #xFF3B)
                (#xA1CF . #xFF3D)
                (#xA1D0 . #xFF5B)
                (#xA1D1 . #xFF5D)
                (#xA1D2 . #x3008)
                (#xA1D3 . #x3009)
                (#xA1D4 . #x300A)
                (#xA1D5 . #x300B)
                (#xA1D6 . #x300C)
                (#xA1D7 . #x300D)
                (#xA1D8 . #x300E)
                (#xA1D9 . #x300F)
                (#xA1DA . #x3010)
                (#xA1DB . #x3011)
                (#xA1DC . #xFF0B)
                (#xA1DD . #x2212)
                (#xA1DE . #xB1)
                (#xA1DF . #xD7)
                (#xA1E0 . #xF7)
                (#xA1E1 . #xFF1D)
                (#xA1E2 . #x2260)
                (#xA1E3 . #xFF1C)
                (#xA1E4 . #xFF1E)
                (#xA1E5 . #x2266)
                (#xA1E6 . #x2267)
                (#xA1E7 . #x221E)
                (#xA1E8 . #x2234)
                (#xA1E9 . #x2642)
                (#xA1EA . #x2640)
                (#xA1EB . #xB0)
                (#xA1EC . #x2032)
                (#xA1ED . #x2033)
                (#xA1EE . #x2103)
                (#xA1EF . #xFFE5)
                (#xA1F0 . #xFF04)
                (#xA1F1 . #xA2)
                (#xA1F2 . #xA3)
                (#xA1F3 . #xFF05)
                (#xA1F4 . #xFF03)
                (#xA1F5 . #xFF06)
                (#xA1F6 . #xFF0A)
                (#xA1F7 . #xFF20)
                (#xA1F8 . #xA7)
                (#xA1F9 . #x2606)
                (#xA1FA . #x2605)
                (#xA1FB . #x25CB)
                (#xA1FC . #x25CF)
                (#xA1FD . #x25CE)
                (#xA1FE . #x25C7)
                (#xA2A1 . #x25C6)
                (#xA2A2 . #x25A1)
                (#xA2A3 . #x25A0)
                (#xA2A4 . #x25B3)
                (#xA2A5 . #x25B2)
                (#xA2A6 . #x25BD)
                (#xA2A7 . #x25BC)
                (#xA2A8 . #x203B)
                (#xA2A9 . #x3012)
                (#xA2AA . #x2192)
                (#xA2AB . #x2190)
                (#xA2AC . #x2191)
                (#xA2AD . #x2193)
                (#xA2AE . #x3013)
                (#xA2BA . #x2208)
                (#xA2BB . #x220B)
                (#xA2BC . #x2286)
                (#xA2BD . #x2287)
                (#xA2BE . #x2282)
                (#xA2BF . #x2283)
                (#xA2C0 . #x222A)
                (#xA2C1 . #x2229)
                (#xA2CA . #x2227)
                (#xA2CB . #x2228)
                (#xA2CC . #xAC)
                (#xA2CD . #x21D2)
                (#xA2CE . #x21D4)
                (#xA2CF . #x2200)
                (#xA2D0 . #x2203)
                (#xA2DC . #x2220)
                (#xA2DD . #x22A5)
                (#xA2DE . #x2312)
                (#xA2DF . #x2202)
                (#xA2E0 . #x2207)
                (#xA2E1 . #x2261)
                (#xA2E2 . #x2252)
                (#xA2E3 . #x226A)
                (#xA2E4 . #x226B)
                (#xA2E5 . #x221A)
                (#xA2E6 . #x223D)
                (#xA2E7 . #x221D)
                (#xA2E8 . #x2235)
                (#xA2E9 . #x222B)
                (#xA2EA . #x222C)
                (#xA2F2 . #x212B)
                (#xA2F3 . #x2030)
                (#xA2F4 . #x266F)
                (#xA2F5 . #x266D)
                (#xA2F6 . #x266A)
                (#xA2F7 . #x2020)
                (#xA2F8 . #x2021)
                (#xA2F9 . #xB6)
                (#xA2FE . #x25EF)
                (#xA3B0 . #xFF10)
                (#xA3B1 . #xFF11)
                (#xA3B2 . #xFF12)
                (#xA3B3 . #xFF13)
                (#xA3B4 . #xFF14)
                (#xA3B5 . #xFF15)
                (#xA3B6 . #xFF16)
                (#xA3B7 . #xFF17)
                (#xA3B8 . #xFF18)
                (#xA3B9 . #xFF19)
                (#xA3C1 . #xFF21)
                (#xA3C2 . #xFF22)
                (#xA3C3 . #xFF23)
                (#xA3C4 . #xFF24)
                (#xA3C5 . #xFF25)
                (#xA3C6 . #xFF26)
                (#xA3C7 . #xFF27)
                (#xA3C8 . #xFF28)
                (#xA3C9 . #xFF29)
                (#xA3CA . #xFF2A)
                (#xA3CB . #xFF2B)
                (#xA3CC . #xFF2C)
                (#xA3CD . #xFF2D)
                (#xA3CE . #xFF2E)
                (#xA3CF . #xFF2F)
                (#xA3D0 . #xFF30)
                (#xA3D1 . #xFF31)
                (#xA3D2 . #xFF32)
                (#xA3D3 . #xFF33)
                (#xA3D4 . #xFF34)
                (#xA3D5 . #xFF35)
                (#xA3D6 . #xFF36)
                (#xA3D7 . #xFF37)
                (#xA3D8 . #xFF38)
                (#xA3D9 . #xFF39)
                (#xA3DA . #xFF3A)
                (#xA3E1 . #xFF41)
                (#xA3E2 . #xFF42)
                (#xA3E3 . #xFF43)
                (#xA3E4 . #xFF44)
                (#xA3E5 . #xFF45)
                (#xA3E6 . #xFF46)
                (#xA3E7 . #xFF47)
                (#xA3E8 . #xFF48)
                (#xA3E9 . #xFF49)
                (#xA3EA . #xFF4A)
                (#xA3EB . #xFF4B)
                (#xA3EC . #xFF4C)
                (#xA3ED . #xFF4D)
                (#xA3EE . #xFF4E)
                (#xA3EF . #xFF4F)
                (#xA3F0 . #xFF50)
                (#xA3F1 . #xFF51)
                (#xA3F2 . #xFF52)
                (#xA3F3 . #xFF53)
                (#xA3F4 . #xFF54)
                (#xA3F5 . #xFF55)
                (#xA3F6 . #xFF56)
                (#xA3F7 . #xFF57)
                (#xA3F8 . #xFF58)
                (#xA3F9 . #xFF59)
                (#xA3FA . #xFF5A)
                (#xA4A1 . #x3041)
                (#xA4A2 . #x3042)
                (#xA4A3 . #x3043)
                (#xA4A4 . #x3044)
                (#xA4A5 . #x3045)
                (#xA4A6 . #x3046)
                (#xA4A7 . #x3047)
                (#xA4A8 . #x3048)
                (#xA4A9 . #x3049)
                (#xA4AA . #x304A)
                (#xA4AB . #x304B)
                (#xA4AC . #x304C)
                (#xA4AD . #x304D)
                (#xA4AE . #x304E)
                (#xA4AF . #x304F)
                (#xA4B0 . #x3050)
                (#xA4B1 . #x3051)
                (#xA4B2 . #x3052)
                (#xA4B3 . #x3053)
                (#xA4B4 . #x3054)
                (#xA4B5 . #x3055)
                (#xA4B6 . #x3056)
                (#xA4B7 . #x3057)
                (#xA4B8 . #x3058)
                (#xA4B9 . #x3059)
                (#xA4BA . #x305A)
                (#xA4BB . #x305B)
                (#xA4BC . #x305C)
                (#xA4BD . #x305D)
                (#xA4BE . #x305E)
                (#xA4BF . #x305F)
                (#xA4C0 . #x3060)
                (#xA4C1 . #x3061)
                (#xA4C2 . #x3062)
                (#xA4C3 . #x3063)
                (#xA4C4 . #x3064)
                (#xA4C5 . #x3065)
                (#xA4C6 . #x3066)
                (#xA4C7 . #x3067)
                (#xA4C8 . #x3068)
                (#xA4C9 . #x3069)
                (#xA4CA . #x306A)
                (#xA4CB . #x306B)
                (#xA4CC . #x306C)
                (#xA4CD . #x306D)
                (#xA4CE . #x306E)
                (#xA4CF . #x306F)
                (#xA4D0 . #x3070)
                (#xA4D1 . #x3071)
                (#xA4D2 . #x3072)
                (#xA4D3 . #x3073)
                (#xA4D4 . #x3074)
                (#xA4D5 . #x3075)
                (#xA4D6 . #x3076)
                (#xA4D7 . #x3077)
                (#xA4D8 . #x3078)
                (#xA4D9 . #x3079)
                (#xA4DA . #x307A)
                (#xA4DB . #x307B)
                (#xA4DC . #x307C)
                (#xA4DD . #x307D)
                (#xA4DE . #x307E)
                (#xA4DF . #x307F)
                (#xA4E0 . #x3080)
                (#xA4E1 . #x3081)
                (#xA4E2 . #x3082)
                (#xA4E3 . #x3083)
                (#xA4E4 . #x3084)
                (#xA4E5 . #x3085)
                (#xA4E6 . #x3086)
                (#xA4E7 . #x3087)
                (#xA4E8 . #x3088)
                (#xA4E9 . #x3089)
                (#xA4EA . #x308A)
                (#xA4EB . #x308B)
                (#xA4EC . #x308C)
                (#xA4ED . #x308D)
                (#xA4EE . #x308E)
                (#xA4EF . #x308F)
                (#xA4F0 . #x3090)
                (#xA4F1 . #x3091)
                (#xA4F2 . #x3092)
                (#xA4F3 . #x3093)
                (#xA5A1 . #x30A1)
                (#xA5A2 . #x30A2)
                (#xA5A3 . #x30A3)
                (#xA5A4 . #x30A4)
                (#xA5A5 . #x30A5)
                (#xA5A6 . #x30A6)
                (#xA5A7 . #x30A7)
                (#xA5A8 . #x30A8)
                (#xA5A9 . #x30A9)
                (#xA5AA . #x30AA)
                (#xA5AB . #x30AB)
                (#xA5AC . #x30AC)
                (#xA5AD . #x30AD)
                (#xA5AE . #x30AE)
                (#xA5AF . #x30AF)
                (#xA5B0 . #x30B0)
                (#xA5B1 . #x30B1)
                (#xA5B2 . #x30B2)
                (#xA5B3 . #x30B3)
                (#xA5B4 . #x30B4)
                (#xA5B5 . #x30B5)
                (#xA5B6 . #x30B6)
                (#xA5B7 . #x30B7)
                (#xA5B8 . #x30B8)
                (#xA5B9 . #x30B9)
                (#xA5BA . #x30BA)
                (#xA5BB . #x30BB)
                (#xA5BC . #x30BC)
                (#xA5BD . #x30BD)
                (#xA5BE . #x30BE)
                (#xA5BF . #x30BF)
                (#xA5C0 . #x30C0)
                (#xA5C1 . #x30C1)
                (#xA5C2 . #x30C2)
                (#xA5C3 . #x30C3)
                (#xA5C4 . #x30C4)
                (#xA5C5 . #x30C5)
                (#xA5C6 . #x30C6)
                (#xA5C7 . #x30C7)
                (#xA5C8 . #x30C8)
                (#xA5C9 . #x30C9)
                (#xA5CA . #x30CA)
                (#xA5CB . #x30CB)
                (#xA5CC . #x30CC)
                (#xA5CD . #x30CD)
                (#xA5CE . #x30CE)
                (#xA5CF . #x30CF)
                (#xA5D0 . #x30D0)
                (#xA5D1 . #x30D1)
                (#xA5D2 . #x30D2)
                (#xA5D3 . #x30D3)
                (#xA5D4 . #x30D4)
                (#xA5D5 . #x30D5)
                (#xA5D6 . #x30D6)
                (#xA5D7 . #x30D7)
                (#xA5D8 . #x30D8)
                (#xA5D9 . #x30D9)
                (#xA5DA . #x30DA)
                (#xA5DB . #x30DB)
                (#xA5DC . #x30DC)
                (#xA5DD . #x30DD)
                (#xA5DE . #x30DE)
                (#xA5DF . #x30DF)
                (#xA5E0 . #x30E0)
                (#xA5E1 . #x30E1)
                (#xA5E2 . #x30E2)
                (#xA5E3 . #x30E3)
                (#xA5E4 . #x30E4)
                (#xA5E5 . #x30E5)
                (#xA5E6 . #x30E6)
                (#xA5E7 . #x30E7)
                (#xA5E8 . #x30E8)
                (#xA5E9 . #x30E9)
                (#xA5EA . #x30EA)
                (#xA5EB . #x30EB)
                (#xA5EC . #x30EC)
                (#xA5ED . #x30ED)
                (#xA5EE . #x30EE)
                (#xA5EF . #x30EF)
                (#xA5F0 . #x30F0)
                (#xA5F1 . #x30F1)
                (#xA5F2 . #x30F2)
                (#xA5F3 . #x30F3)
                (#xA5F4 . #x30F4)
                (#xA5F5 . #x30F5)
                (#xA5F6 . #x30F6)
                (#xA6A1 . #x391)
                (#xA6A2 . #x392)
                (#xA6A3 . #x393)
                (#xA6A4 . #x394)
                (#xA6A5 . #x395)
                (#xA6A6 . #x396)
                (#xA6A7 . #x397)
                (#xA6A8 . #x398)
                (#xA6A9 . #x399)
                (#xA6AA . #x39A)
                (#xA6AB . #x39B)
                (#xA6AC . #x39C)
                (#xA6AD . #x39D)
                (#xA6AE . #x39E)
                (#xA6AF . #x39F)
                (#xA6B0 . #x3A0)
                (#xA6B1 . #x3A1)
                (#xA6B2 . #x3A3)
                (#xA6B3 . #x3A4)
                (#xA6B4 . #x3A5)
                (#xA6B5 . #x3A6)
                (#xA6B6 . #x3A7)
                (#xA6B7 . #x3A8)
                (#xA6B8 . #x3A9)
                (#xA6C1 . #x3B1)
                (#xA6C2 . #x3B2)
                (#xA6C3 . #x3B3)
                (#xA6C4 . #x3B4)
                (#xA6C5 . #x3B5)
                (#xA6C6 . #x3B6)
                (#xA6C7 . #x3B7)
                (#xA6C8 . #x3B8)
                (#xA6C9 . #x3B9)
                (#xA6CA . #x3BA)
                (#xA6CB . #x3BB)
                (#xA6CC . #x3BC)
                (#xA6CD . #x3BD)
                (#xA6CE . #x3BE)
                (#xA6CF . #x3BF)
                (#xA6D0 . #x3C0)
                (#xA6D1 . #x3C1)
                (#xA6D2 . #x3C3)
                (#xA6D3 . #x3C4)
                (#xA6D4 . #x3C5)
                (#xA6D5 . #x3C6)
                (#xA6D6 . #x3C7)
                (#xA6D7 . #x3C8)
                (#xA6D8 . #x3C9)
                (#xA7A1 . #x410)
                (#xA7A2 . #x411)
                (#xA7A3 . #x412)
                (#xA7A4 . #x413)
                (#xA7A5 . #x414)
                (#xA7A6 . #x415)
                (#xA7A7 . #x401)
                (#xA7A8 . #x416)
                (#xA7A9 . #x417)
                (#xA7AA . #x418)
                (#xA7AB . #x419)
                (#xA7AC . #x41A)
                (#xA7AD . #x41B)
                (#xA7AE . #x41C)
                (#xA7AF . #x41D)
                (#xA7B0 . #x41E)
                (#xA7B1 . #x41F)
                (#xA7B2 . #x420)
                (#xA7B3 . #x421)
                (#xA7B4 . #x422)
                (#xA7B5 . #x423)
                (#xA7B6 . #x424)
                (#xA7B7 . #x425)
                (#xA7B8 . #x426)
                (#xA7B9 . #x427)
                (#xA7BA . #x428)
                (#xA7BB . #x429)
                (#xA7BC . #x42A)
                (#xA7BD . #x42B)
                (#xA7BE . #x42C)
                (#xA7BF . #x42D)
                (#xA7C0 . #x42E)
                (#xA7C1 . #x42F)
                (#xA7D1 . #x430)
                (#xA7D2 . #x431)
                (#xA7D3 . #x432)
                (#xA7D4 . #x433)
                (#xA7D5 . #x434)
                (#xA7D6 . #x435)
                (#xA7D7 . #x451)
                (#xA7D8 . #x436)
                (#xA7D9 . #x437)
                (#xA7DA . #x438)
                (#xA7DB . #x439)
                (#xA7DC . #x43A)
                (#xA7DD . #x43B)
                (#xA7DE . #x43C)
                (#xA7DF . #x43D)
                (#xA7E0 . #x43E)
                (#xA7E1 . #x43F)
                (#xA7E2 . #x440)
                (#xA7E3 . #x441)
                (#xA7E4 . #x442)
                (#xA7E5 . #x443)
                (#xA7E6 . #x444)
                (#xA7E7 . #x445)
                (#xA7E8 . #x446)
                (#xA7E9 . #x447)
                (#xA7EA . #x448)
                (#xA7EB . #x449)
                (#xA7EC . #x44A)
                (#xA7ED . #x44B)
                (#xA7EE . #x44C)
                (#xA7EF . #x44D)
                (#xA7F0 . #x44E)
                (#xA7F1 . #x44F)
                (#xA8A1 . #x2500)
                (#xA8A2 . #x2502)
                (#xA8A3 . #x250C)
                (#xA8A4 . #x2510)
                (#xA8A5 . #x2518)
                (#xA8A6 . #x2514)
                (#xA8A7 . #x251C)
                (#xA8A8 . #x252C)
                (#xA8A9 . #x2524)
                (#xA8AA . #x2534)
                (#xA8AB . #x253C)
                (#xA8AC . #x2501)
                (#xA8AD . #x2503)
                (#xA8AE . #x250F)
                (#xA8AF . #x2513)
                (#xA8B0 . #x251B)
                (#xA8B1 . #x2517)
                (#xA8B2 . #x2523)
                (#xA8B3 . #x2533)
                (#xA8B4 . #x252B)
                (#xA8B5 . #x253B)
                (#xA8B6 . #x254B)
                (#xA8B7 . #x2520)
                (#xA8B8 . #x252F)
                (#xA8B9 . #x2528)
                (#xA8BA . #x2537)
                (#xA8BB . #x253F)
                (#xA8BC . #x251D)
                (#xA8BD . #x2530)
                (#xA8BE . #x2525)
                (#xA8BF . #x2538)
                (#xA8C0 . #x2542)
                (#xB0A1 . #x4E9C)
                (#xB0A2 . #x5516)
                (#xB0A3 . #x5A03)
                (#xB0A4 . #x963F)
                (#xB0A5 . #x54C0)
                (#xB0A6 . #x611B)
                (#xB0A7 . #x6328)
                (#xB0A8 . #x59F6)
                (#xB0A9 . #x9022)
                (#xB0AA . #x8475)
                (#xB0AB . #x831C)
                (#xB0AC . #x7A50)
                (#xB0AD . #x60AA)
                (#xB0AE . #x63E1)
                (#xB0AF . #x6E25)
                (#xB0B0 . #x65ED)
                (#xB0B1 . #x8466)
                (#xB0B2 . #x82A6)
                (#xB0B3 . #x9BF5)
                (#xB0B4 . #x6893)
                (#xB0B5 . #x5727)
                (#xB0B6 . #x65A1)
                (#xB0B7 . #x6271)
                (#xB0B8 . #x5B9B)
                (#xB0B9 . #x59D0)
                (#xB0BA . #x867B)
                (#xB0BB . #x98F4)
                (#xB0BC . #x7D62)
                (#xB0BD . #x7DBE)
                (#xB0BE . #x9B8E)
                (#xB0BF . #x6216)
                (#xB0C0 . #x7C9F)
                (#xB0C1 . #x88B7)
                (#xB0C2 . #x5B89)
                (#xB0C3 . #x5EB5)
                (#xB0C4 . #x6309)
                (#xB0C5 . #x6697)
                (#xB0C6 . #x6848)
                (#xB0C7 . #x95C7)
                (#xB0C8 . #x978D)
                (#xB0C9 . #x674F)
                (#xB0CA . #x4EE5)
                (#xB0CB . #x4F0A)
                (#xB0CC . #x4F4D)
                (#xB0CD . #x4F9D)
                (#xB0CE . #x5049)
                (#xB0CF . #x56F2)
                (#xB0D0 . #x5937)
                (#xB0D1 . #x59D4)
                (#xB0D2 . #x5A01)
                (#xB0D3 . #x5C09)
                (#xB0D4 . #x60DF)
                (#xB0D5 . #x610F)
                (#xB0D6 . #x6170)
                (#xB0D7 . #x6613)
                (#xB0D8 . #x6905)
                (#xB0D9 . #x70BA)
                (#xB0DA . #x754F)
                (#xB0DB . #x7570)
                (#xB0DC . #x79FB)
                (#xB0DD . #x7DAD)
                (#xB0DE . #x7DEF)
                (#xB0DF . #x80C3)
                (#xB0E0 . #x840E)
                (#xB0E1 . #x8863)
                (#xB0E2 . #x8B02)
                (#xB0E3 . #x9055)
                (#xB0E4 . #x907A)
                (#xB0E5 . #x533B)
                (#xB0E6 . #x4E95)
                (#xB0E7 . #x4EA5)
                (#xB0E8 . #x57DF)
                (#xB0E9 . #x80B2)
                (#xB0EA . #x90C1)
                (#xB0EB . #x78EF)
                (#xB0EC . #x4E00)
                (#xB0ED . #x58F1)
                (#xB0EE . #x6EA2)
                (#xB0EF . #x9038)
                (#xB0F0 . #x7A32)
                (#xB0F1 . #x8328)
                (#xB0F2 . #x828B)
                (#xB0F3 . #x9C2F)
                (#xB0F4 . #x5141)
                (#xB0F5 . #x5370)
                (#xB0F6 . #x54BD)
                (#xB0F7 . #x54E1)
                (#xB0F8 . #x56E0)
                (#xB0F9 . #x59FB)
                (#xB0FA . #x5F15)
                (#xB0FB . #x98F2)
                (#xB0FC . #x6DEB)
                (#xB0FD . #x80E4)
                (#xB0FE . #x852D)
                (#xB1A1 . #x9662)
                (#xB1A2 . #x9670)
                (#xB1A3 . #x96A0)
                (#xB1A4 . #x97FB)
                (#xB1A5 . #x540B)
                (#xB1A6 . #x53F3)
                (#xB1A7 . #x5B87)
                (#xB1A8 . #x70CF)
                (#xB1A9 . #x7FBD)
                (#xB1AA . #x8FC2)
                (#xB1AB . #x96E8)
                (#xB1AC . #x536F)
                (#xB1AD . #x9D5C)
                (#xB1AE . #x7ABA)
                (#xB1AF . #x4E11)
                (#xB1B0 . #x7893)
                (#xB1B1 . #x81FC)
                (#xB1B2 . #x6E26)
                (#xB1B3 . #x5618)
                (#xB1B4 . #x5504)
                (#xB1B5 . #x6B1D)
                (#xB1B6 . #x851A)
                (#xB1B7 . #x9C3B)
                (#xB1B8 . #x59E5)
                (#xB1B9 . #x53A9)
                (#xB1BA . #x6D66)
                (#xB1BB . #x74DC)
                (#xB1BC . #x958F)
                (#xB1BD . #x5642)
                (#xB1BE . #x4E91)
                (#xB1BF . #x904B)
                (#xB1C0 . #x96F2)
                (#xB1C1 . #x834F)
                (#xB1C2 . #x990C)
                (#xB1C3 . #x53E1)
                (#xB1C4 . #x55B6)
                (#xB1C5 . #x5B30)
                (#xB1C6 . #x5F71)
                (#xB1C7 . #x6620)
                (#xB1C8 . #x66F3)
                (#xB1C9 . #x6804)
                (#xB1CA . #x6C38)
                (#xB1CB . #x6CF3)
                (#xB1CC . #x6D29)
                (#xB1CD . #x745B)
                (#xB1CE . #x76C8)
                (#xB1CF . #x7A4E)
                (#xB1D0 . #x9834)
                (#xB1D1 . #x82F1)
                (#xB1D2 . #x885B)
                (#xB1D3 . #x8A60)
                (#xB1D4 . #x92ED)
                (#xB1D5 . #x6DB2)
                (#xB1D6 . #x75AB)
                (#xB1D7 . #x76CA)
                (#xB1D8 . #x99C5)
                (#xB1D9 . #x60A6)
                (#xB1DA . #x8B01)
                (#xB1DB . #x8D8A)
                (#xB1DC . #x95B2)
                (#xB1DD . #x698E)
                (#xB1DE . #x53AD)
                (#xB1DF . #x5186)
                (#xB1E0 . #x5712)
                (#xB1E1 . #x5830)
                (#xB1E2 . #x5944)
                (#xB1E3 . #x5BB4)
                (#xB1E4 . #x5EF6)
                (#xB1E5 . #x6028)
                (#xB1E6 . #x63A9)
                (#xB1E7 . #x63F4)
                (#xB1E8 . #x6CBF)
                (#xB1E9 . #x6F14)
                (#xB1EA . #x708E)
                (#xB1EB . #x7114)
                (#xB1EC . #x7159)
                (#xB1ED . #x71D5)
                (#xB1EE . #x733F)
                (#xB1EF . #x7E01)
                (#xB1F0 . #x8276)
                (#xB1F1 . #x82D1)
                (#xB1F2 . #x8597)
                (#xB1F3 . #x9060)
                (#xB1F4 . #x925B)
                (#xB1F5 . #x9D1B)
                (#xB1F6 . #x5869)
                (#xB1F7 . #x65BC)
                (#xB1F8 . #x6C5A)
                (#xB1F9 . #x7525)
                (#xB1FA . #x51F9)
                (#xB1FB . #x592E)
                (#xB1FC . #x5965)
                (#xB1FD . #x5F80)
                (#xB1FE . #x5FDC)
                (#xB2A1 . #x62BC)
                (#xB2A2 . #x65FA)
                (#xB2A3 . #x6A2A)
                (#xB2A4 . #x6B27)
                (#xB2A5 . #x6BB4)
                (#xB2A6 . #x738B)
                (#xB2A7 . #x7FC1)
                (#xB2A8 . #x8956)
                (#xB2A9 . #x9D2C)
                (#xB2AA . #x9D0E)
                (#xB2AB . #x9EC4)
                (#xB2AC . #x5CA1)
                (#xB2AD . #x6C96)
                (#xB2AE . #x837B)
                (#xB2AF . #x5104)
                (#xB2B0 . #x5C4B)
                (#xB2B1 . #x61B6)
                (#xB2B2 . #x81C6)
                (#xB2B3 . #x6876)
                (#xB2B4 . #x7261)
                (#xB2B5 . #x4E59)
                (#xB2B6 . #x4FFA)
                (#xB2B7 . #x5378)
                (#xB2B8 . #x6069)
                (#xB2B9 . #x6E29)
                (#xB2BA . #x7A4F)
                (#xB2BB . #x97F3)
                (#xB2BC . #x4E0B)
                (#xB2BD . #x5316)
                (#xB2BE . #x4EEE)
                (#xB2BF . #x4F55)
                (#xB2C0 . #x4F3D)
                (#xB2C1 . #x4FA1)
                (#xB2C2 . #x4F73)
                (#xB2C3 . #x52A0)
                (#xB2C4 . #x53EF)
                (#xB2C5 . #x5609)
                (#xB2C6 . #x590F)
                (#xB2C7 . #x5AC1)
                (#xB2C8 . #x5BB6)
                (#xB2C9 . #x5BE1)
                (#xB2CA . #x79D1)
                (#xB2CB . #x6687)
                (#xB2CC . #x679C)
                (#xB2CD . #x67B6)
                (#xB2CE . #x6B4C)
                (#xB2CF . #x6CB3)
                (#xB2D0 . #x706B)
                (#xB2D1 . #x73C2)
                (#xB2D2 . #x798D)
                (#xB2D3 . #x79BE)
                (#xB2D4 . #x7A3C)
                (#xB2D5 . #x7B87)
                (#xB2D6 . #x82B1)
                (#xB2D7 . #x82DB)
                (#xB2D8 . #x8304)
                (#xB2D9 . #x8377)
                (#xB2DA . #x83EF)
                (#xB2DB . #x83D3)
                (#xB2DC . #x8766)
                (#xB2DD . #x8AB2)
                (#xB2DE . #x5629)
                (#xB2DF . #x8CA8)
                (#xB2E0 . #x8FE6)
                (#xB2E1 . #x904E)
                (#xB2E2 . #x971E)
                (#xB2E3 . #x868A)
                (#xB2E4 . #x4FC4)
                (#xB2E5 . #x5CE8)
                (#xB2E6 . #x6211)
                (#xB2E7 . #x7259)
                (#xB2E8 . #x753B)
                (#xB2E9 . #x81E5)
                (#xB2EA . #x82BD)
                (#xB2EB . #x86FE)
                (#xB2EC . #x8CC0)
                (#xB2ED . #x96C5)
                (#xB2EE . #x9913)
                (#xB2EF . #x99D5)
                (#xB2F0 . #x4ECB)
                (#xB2F1 . #x4F1A)
                (#xB2F2 . #x89E3)
                (#xB2F3 . #x56DE)
                (#xB2F4 . #x584A)
                (#xB2F5 . #x58CA)
                (#xB2F6 . #x5EFB)
                (#xB2F7 . #x5FEB)
                (#xB2F8 . #x602A)
                (#xB2F9 . #x6094)
                (#xB2FA . #x6062)
                (#xB2FB . #x61D0)
                (#xB2FC . #x6212)
                (#xB2FD . #x62D0)
                (#xB2FE . #x6539)
                (#xB3A1 . #x9B41)
                (#xB3A2 . #x6666)
                (#xB3A3 . #x68B0)
                (#xB3A4 . #x6D77)
                (#xB3A5 . #x7070)
                (#xB3A6 . #x754C)
                (#xB3A7 . #x7686)
                (#xB3A8 . #x7D75)
                (#xB3A9 . #x82A5)
                (#xB3AA . #x87F9)
                (#xB3AB . #x958B)
                (#xB3AC . #x968E)
                (#xB3AD . #x8C9D)
                (#xB3AE . #x51F1)
                (#xB3AF . #x52BE)
                (#xB3B0 . #x5916)
                (#xB3B1 . #x54B3)
                (#xB3B2 . #x5BB3)
                (#xB3B3 . #x5D16)
                (#xB3B4 . #x6168)
                (#xB3B5 . #x6982)
                (#xB3B6 . #x6DAF)
                (#xB3B7 . #x788D)
                (#xB3B8 . #x84CB)
                (#xB3B9 . #x8857)
                (#xB3BA . #x8A72)
                (#xB3BB . #x93A7)
                (#xB3BC . #x9AB8)
                (#xB3BD . #x6D6C)
                (#xB3BE . #x99A8)
                (#xB3BF . #x86D9)
                (#xB3C0 . #x57A3)
                (#xB3C1 . #x67FF)
                (#xB3C2 . #x86CE)
                (#xB3C3 . #x920E)
                (#xB3C4 . #x5283)
                (#xB3C5 . #x5687)
                (#xB3C6 . #x5404)
                (#xB3C7 . #x5ED3)
                (#xB3C8 . #x62E1)
                (#xB3C9 . #x64B9)
                (#xB3CA . #x683C)
                (#xB3CB . #x6838)
                (#xB3CC . #x6BBB)
                (#xB3CD . #x7372)
                (#xB3CE . #x78BA)
                (#xB3CF . #x7A6B)
                (#xB3D0 . #x899A)
                (#xB3D1 . #x89D2)
                (#xB3D2 . #x8D6B)
                (#xB3D3 . #x8F03)
                (#xB3D4 . #x90ED)
                (#xB3D5 . #x95A3)
                (#xB3D6 . #x9694)
                (#xB3D7 . #x9769)
                (#xB3D8 . #x5B66)
                (#xB3D9 . #x5CB3)
                (#xB3DA . #x697D)
                (#xB3DB . #x984D)
                (#xB3DC . #x984E)
                (#xB3DD . #x639B)
                (#xB3DE . #x7B20)
                (#xB3DF . #x6A2B)
                (#xB3E0 . #x6A7F)
                (#xB3E1 . #x68B6)
                (#xB3E2 . #x9C0D)
                (#xB3E3 . #x6F5F)
                (#xB3E4 . #x5272)
                (#xB3E5 . #x559D)
                (#xB3E6 . #x6070)
                (#xB3E7 . #x62EC)
                (#xB3E8 . #x6D3B)
                (#xB3E9 . #x6E07)
                (#xB3EA . #x6ED1)
                (#xB3EB . #x845B)
                (#xB3EC . #x8910)
                (#xB3ED . #x8F44)
                (#xB3EE . #x4E14)
                (#xB3EF . #x9C39)
                (#xB3F0 . #x53F6)
                (#xB3F1 . #x691B)
                (#xB3F2 . #x6A3A)
                (#xB3F3 . #x9784)
                (#xB3F4 . #x682A)
                (#xB3F5 . #x515C)
                (#xB3F6 . #x7AC3)
                (#xB3F7 . #x84B2)
                (#xB3F8 . #x91DC)
                (#xB3F9 . #x938C)
                (#xB3FA . #x565B)
                (#xB3FB . #x9D28)
                (#xB3FC . #x6822)
                (#xB3FD . #x8305)
                (#xB3FE . #x8431)
                (#xB4A1 . #x7CA5)
                (#xB4A2 . #x5208)
                (#xB4A3 . #x82C5)
                (#xB4A4 . #x74E6)
                (#xB4A5 . #x4E7E)
                (#xB4A6 . #x4F83)
                (#xB4A7 . #x51A0)
                (#xB4A8 . #x5BD2)
                (#xB4A9 . #x520A)
                (#xB4AA . #x52D8)
                (#xB4AB . #x52E7)
                (#xB4AC . #x5DFB)
                (#xB4AD . #x559A)
                (#xB4AE . #x582A)
                (#xB4AF . #x59E6)
                (#xB4B0 . #x5B8C)
                (#xB4B1 . #x5B98)
                (#xB4B2 . #x5BDB)
                (#xB4B3 . #x5E72)
                (#xB4B4 . #x5E79)
                (#xB4B5 . #x60A3)
                (#xB4B6 . #x611F)
                (#xB4B7 . #x6163)
                (#xB4B8 . #x61BE)
                (#xB4B9 . #x63DB)
                (#xB4BA . #x6562)
                (#xB4BB . #x67D1)
                (#xB4BC . #x6853)
                (#xB4BD . #x68FA)
                (#xB4BE . #x6B3E)
                (#xB4BF . #x6B53)
                (#xB4C0 . #x6C57)
                (#xB4C1 . #x6F22)
                (#xB4C2 . #x6F97)
                (#xB4C3 . #x6F45)
                (#xB4C4 . #x74B0)
                (#xB4C5 . #x7518)
                (#xB4C6 . #x76E3)
                (#xB4C7 . #x770B)
                (#xB4C8 . #x7AFF)
                (#xB4C9 . #x7BA1)
                (#xB4CA . #x7C21)
                (#xB4CB . #x7DE9)
                (#xB4CC . #x7F36)
                (#xB4CD . #x7FF0)
                (#xB4CE . #x809D)
                (#xB4CF . #x8266)
                (#xB4D0 . #x839E)
                (#xB4D1 . #x89B3)
                (#xB4D2 . #x8ACC)
                (#xB4D3 . #x8CAB)
                (#xB4D4 . #x9084)
                (#xB4D5 . #x9451)
                (#xB4D6 . #x9593)
                (#xB4D7 . #x9591)
                (#xB4D8 . #x95A2)
                (#xB4D9 . #x9665)
                (#xB4DA . #x97D3)
                (#xB4DB . #x9928)
                (#xB4DC . #x8218)
                (#xB4DD . #x4E38)
                (#xB4DE . #x542B)
                (#xB4DF . #x5CB8)
                (#xB4E0 . #x5DCC)
                (#xB4E1 . #x73A9)
                (#xB4E2 . #x764C)
                (#xB4E3 . #x773C)
                (#xB4E4 . #x5CA9)
                (#xB4E5 . #x7FEB)
                (#xB4E6 . #x8D0B)
                (#xB4E7 . #x96C1)
                (#xB4E8 . #x9811)
                (#xB4E9 . #x9854)
                (#xB4EA . #x9858)
                (#xB4EB . #x4F01)
                (#xB4EC . #x4F0E)
                (#xB4ED . #x5371)
                (#xB4EE . #x559C)
                (#xB4EF . #x5668)
                (#xB4F0 . #x57FA)
                (#xB4F1 . #x5947)
                (#xB4F2 . #x5B09)
                (#xB4F3 . #x5BC4)
                (#xB4F4 . #x5C90)
                (#xB4F5 . #x5E0C)
                (#xB4F6 . #x5E7E)
                (#xB4F7 . #x5FCC)
                (#xB4F8 . #x63EE)
                (#xB4F9 . #x673A)
                (#xB4FA . #x65D7)
                (#xB4FB . #x65E2)
                (#xB4FC . #x671F)
                (#xB4FD . #x68CB)
                (#xB4FE . #x68C4)
                (#xB5A1 . #x6A5F)
                (#xB5A2 . #x5E30)
                (#xB5A3 . #x6BC5)
                (#xB5A4 . #x6C17)
                (#xB5A5 . #x6C7D)
                (#xB5A6 . #x757F)
                (#xB5A7 . #x7948)
                (#xB5A8 . #x5B63)
                (#xB5A9 . #x7A00)
                (#xB5AA . #x7D00)
                (#xB5AB . #x5FBD)
                (#xB5AC . #x898F)
                (#xB5AD . #x8A18)
                (#xB5AE . #x8CB4)
                (#xB5AF . #x8D77)
                (#xB5B0 . #x8ECC)
                (#xB5B1 . #x8F1D)
                (#xB5B2 . #x98E2)
                (#xB5B3 . #x9A0E)
                (#xB5B4 . #x9B3C)
                (#xB5B5 . #x4E80)
                (#xB5B6 . #x507D)
                (#xB5B7 . #x5100)
                (#xB5B8 . #x5993)
                (#xB5B9 . #x5B9C)
                (#xB5BA . #x622F)
                (#xB5BB . #x6280)
                (#xB5BC . #x64EC)
                (#xB5BD . #x6B3A)
                (#xB5BE . #x72A0)
                (#xB5BF . #x7591)
                (#xB5C0 . #x7947)
                (#xB5C1 . #x7FA9)
                (#xB5C2 . #x87FB)
                (#xB5C3 . #x8ABC)
                (#xB5C4 . #x8B70)
                (#xB5C5 . #x63AC)
                (#xB5C6 . #x83CA)
                (#xB5C7 . #x97A0)
                (#xB5C8 . #x5409)
                (#xB5C9 . #x5403)
                (#xB5CA . #x55AB)
                (#xB5CB . #x6854)
                (#xB5CC . #x6A58)
                (#xB5CD . #x8A70)
                (#xB5CE . #x7827)
                (#xB5CF . #x6775)
                (#xB5D0 . #x9ECD)
                (#xB5D1 . #x5374)
                (#xB5D2 . #x5BA2)
                (#xB5D3 . #x811A)
                (#xB5D4 . #x8650)
                (#xB5D5 . #x9006)
                (#xB5D6 . #x4E18)
                (#xB5D7 . #x4E45)
                (#xB5D8 . #x4EC7)
                (#xB5D9 . #x4F11)
                (#xB5DA . #x53CA)
                (#xB5DB . #x5438)
                (#xB5DC . #x5BAE)
                (#xB5DD . #x5F13)
                (#xB5DE . #x6025)
                (#xB5DF . #x6551)
                (#xB5E0 . #x673D)
                (#xB5E1 . #x6C42)
                (#xB5E2 . #x6C72)
                (#xB5E3 . #x6CE3)
                (#xB5E4 . #x7078)
                (#xB5E5 . #x7403)
                (#xB5E6 . #x7A76)
                (#xB5E7 . #x7AAE)
                (#xB5E8 . #x7B08)
                (#xB5E9 . #x7D1A)
                (#xB5EA . #x7CFE)
                (#xB5EB . #x7D66)
                (#xB5EC . #x65E7)
                (#xB5ED . #x725B)
                (#xB5EE . #x53BB)
                (#xB5EF . #x5C45)
                (#xB5F0 . #x5DE8)
                (#xB5F1 . #x62D2)
                (#xB5F2 . #x62E0)
                (#xB5F3 . #x6319)
                (#xB5F4 . #x6E20)
                (#xB5F5 . #x865A)
                (#xB5F6 . #x8A31)
                (#xB5F7 . #x8DDD)
                (#xB5F8 . #x92F8)
                (#xB5F9 . #x6F01)
                (#xB5FA . #x79A6)
                (#xB5FB . #x9B5A)
                (#xB5FC . #x4EA8)
                (#xB5FD . #x4EAB)
                (#xB5FE . #x4EAC)
                (#xB6A1 . #x4F9B)
                (#xB6A2 . #x4FA0)
                (#xB6A3 . #x50D1)
                (#xB6A4 . #x5147)
                (#xB6A5 . #x7AF6)
                (#xB6A6 . #x5171)
                (#xB6A7 . #x51F6)
                (#xB6A8 . #x5354)
                (#xB6A9 . #x5321)
                (#xB6AA . #x537F)
                (#xB6AB . #x53EB)
                (#xB6AC . #x55AC)
                (#xB6AD . #x5883)
                (#xB6AE . #x5CE1)
                (#xB6AF . #x5F37)
                (#xB6B0 . #x5F4A)
                (#xB6B1 . #x602F)
                (#xB6B2 . #x6050)
                (#xB6B3 . #x606D)
                (#xB6B4 . #x631F)
                (#xB6B5 . #x6559)
                (#xB6B6 . #x6A4B)
                (#xB6B7 . #x6CC1)
                (#xB6B8 . #x72C2)
                (#xB6B9 . #x72ED)
                (#xB6BA . #x77EF)
                (#xB6BB . #x80F8)
                (#xB6BC . #x8105)
                (#xB6BD . #x8208)
                (#xB6BE . #x854E)
                (#xB6BF . #x90F7)
                (#xB6C0 . #x93E1)
                (#xB6C1 . #x97FF)
                (#xB6C2 . #x9957)
                (#xB6C3 . #x9A5A)
                (#xB6C4 . #x4EF0)
                (#xB6C5 . #x51DD)
                (#xB6C6 . #x5C2D)
                (#xB6C7 . #x6681)
                (#xB6C8 . #x696D)
                (#xB6C9 . #x5C40)
                (#xB6CA . #x66F2)
                (#xB6CB . #x6975)
                (#xB6CC . #x7389)
                (#xB6CD . #x6850)
                (#xB6CE . #x7C81)
                (#xB6CF . #x50C5)
                (#xB6D0 . #x52E4)
                (#xB6D1 . #x5747)
                (#xB6D2 . #x5DFE)
                (#xB6D3 . #x9326)
                (#xB6D4 . #x65A4)
                (#xB6D5 . #x6B23)
                (#xB6D6 . #x6B3D)
                (#xB6D7 . #x7434)
                (#xB6D8 . #x7981)
                (#xB6D9 . #x79BD)
                (#xB6DA . #x7B4B)
                (#xB6DB . #x7DCA)
                (#xB6DC . #x82B9)
                (#xB6DD . #x83CC)
                (#xB6DE . #x887F)
                (#xB6DF . #x895F)
                (#xB6E0 . #x8B39)
                (#xB6E1 . #x8FD1)
                (#xB6E2 . #x91D1)
                (#xB6E3 . #x541F)
                (#xB6E4 . #x9280)
                (#xB6E5 . #x4E5D)
                (#xB6E6 . #x5036)
                (#xB6E7 . #x53E5)
                (#xB6E8 . #x533A)
                (#xB6E9 . #x72D7)
                (#xB6EA . #x7396)
                (#xB6EB . #x77E9)
                (#xB6EC . #x82E6)
                (#xB6ED . #x8EAF)
                (#xB6EE . #x99C6)
                (#xB6EF . #x99C8)
                (#xB6F0 . #x99D2)
                (#xB6F1 . #x5177)
                (#xB6F2 . #x611A)
                (#xB6F3 . #x865E)
                (#xB6F4 . #x55B0)
                (#xB6F5 . #x7A7A)
                (#xB6F6 . #x5076)
                (#xB6F7 . #x5BD3)
                (#xB6F8 . #x9047)
                (#xB6F9 . #x9685)
                (#xB6FA . #x4E32)
                (#xB6FB . #x6ADB)
                (#xB6FC . #x91E7)
                (#xB6FD . #x5C51)
                (#xB6FE . #x5C48)
                (#xB7A1 . #x6398)
                (#xB7A2 . #x7A9F)
                (#xB7A3 . #x6C93)
                (#xB7A4 . #x9774)
                (#xB7A5 . #x8F61)
                (#xB7A6 . #x7AAA)
                (#xB7A7 . #x718A)
                (#xB7A8 . #x9688)
                (#xB7A9 . #x7C82)
                (#xB7AA . #x6817)
                (#xB7AB . #x7E70)
                (#xB7AC . #x6851)
                (#xB7AD . #x936C)
                (#xB7AE . #x52F2)
                (#xB7AF . #x541B)
                (#xB7B0 . #x85AB)
                (#xB7B1 . #x8A13)
                (#xB7B2 . #x7FA4)
                (#xB7B3 . #x8ECD)
                (#xB7B4 . #x90E1)
                (#xB7B5 . #x5366)
                (#xB7B6 . #x8888)
                (#xB7B7 . #x7941)
                (#xB7B8 . #x4FC2)
                (#xB7B9 . #x50BE)
                (#xB7BA . #x5211)
                (#xB7BB . #x5144)
                (#xB7BC . #x5553)
                (#xB7BD . #x572D)
                (#xB7BE . #x73EA)
                (#xB7BF . #x578B)
                (#xB7C0 . #x5951)
                (#xB7C1 . #x5F62)
                (#xB7C2 . #x5F84)
                (#xB7C3 . #x6075)
                (#xB7C4 . #x6176)
                (#xB7C5 . #x6167)
                (#xB7C6 . #x61A9)
                (#xB7C7 . #x63B2)
                (#xB7C8 . #x643A)
                (#xB7C9 . #x656C)
                (#xB7CA . #x666F)
                (#xB7CB . #x6842)
                (#xB7CC . #x6E13)
                (#xB7CD . #x7566)
                (#xB7CE . #x7A3D)
                (#xB7CF . #x7CFB)
                (#xB7D0 . #x7D4C)
                (#xB7D1 . #x7D99)
                (#xB7D2 . #x7E4B)
                (#xB7D3 . #x7F6B)
                (#xB7D4 . #x830E)
                (#xB7D5 . #x834A)
                (#xB7D6 . #x86CD)
                (#xB7D7 . #x8A08)
                (#xB7D8 . #x8A63)
                (#xB7D9 . #x8B66)
                (#xB7DA . #x8EFD)
                (#xB7DB . #x981A)
                (#xB7DC . #x9D8F)
                (#xB7DD . #x82B8)
                (#xB7DE . #x8FCE)
                (#xB7DF . #x9BE8)
                (#xB7E0 . #x5287)
                (#xB7E1 . #x621F)
                (#xB7E2 . #x6483)
                (#xB7E3 . #x6FC0)
                (#xB7E4 . #x9699)
                (#xB7E5 . #x6841)
                (#xB7E6 . #x5091)
                (#xB7E7 . #x6B20)
                (#xB7E8 . #x6C7A)
                (#xB7E9 . #x6F54)
                (#xB7EA . #x7A74)
                (#xB7EB . #x7D50)
                (#xB7EC . #x8840)
                (#xB7ED . #x8A23)
                (#xB7EE . #x6708)
                (#xB7EF . #x4EF6)
                (#xB7F0 . #x5039)
                (#xB7F1 . #x5026)
                (#xB7F2 . #x5065)
                (#xB7F3 . #x517C)
                (#xB7F4 . #x5238)
                (#xB7F5 . #x5263)
                (#xB7F6 . #x55A7)
                (#xB7F7 . #x570F)
                (#xB7F8 . #x5805)
                (#xB7F9 . #x5ACC)
                (#xB7FA . #x5EFA)
                (#xB7FB . #x61B2)
                (#xB7FC . #x61F8)
                (#xB7FD . #x62F3)
                (#xB7FE . #x6372)
                (#xB8A1 . #x691C)
                (#xB8A2 . #x6A29)
                (#xB8A3 . #x727D)
                (#xB8A4 . #x72AC)
                (#xB8A5 . #x732E)
                (#xB8A6 . #x7814)
                (#xB8A7 . #x786F)
                (#xB8A8 . #x7D79)
                (#xB8A9 . #x770C)
                (#xB8AA . #x80A9)
                (#xB8AB . #x898B)
                (#xB8AC . #x8B19)
                (#xB8AD . #x8CE2)
                (#xB8AE . #x8ED2)
                (#xB8AF . #x9063)
                (#xB8B0 . #x9375)
                (#xB8B1 . #x967A)
                (#xB8B2 . #x9855)
                (#xB8B3 . #x9A13)
                (#xB8B4 . #x9E78)
                (#xB8B5 . #x5143)
                (#xB8B6 . #x539F)
                (#xB8B7 . #x53B3)
                (#xB8B8 . #x5E7B)
                (#xB8B9 . #x5F26)
                (#xB8BA . #x6E1B)
                (#xB8BB . #x6E90)
                (#xB8BC . #x7384)
                (#xB8BD . #x73FE)
                (#xB8BE . #x7D43)
                (#xB8BF . #x8237)
                (#xB8C0 . #x8A00)
                (#xB8C1 . #x8AFA)
                (#xB8C2 . #x9650)
                (#xB8C3 . #x4E4E)
                (#xB8C4 . #x500B)
                (#xB8C5 . #x53E4)
                (#xB8C6 . #x547C)
                (#xB8C7 . #x56FA)
                (#xB8C8 . #x59D1)
                (#xB8C9 . #x5B64)
                (#xB8CA . #x5DF1)
                (#xB8CB . #x5EAB)
                (#xB8CC . #x5F27)
                (#xB8CD . #x6238)
                (#xB8CE . #x6545)
                (#xB8CF . #x67AF)
                (#xB8D0 . #x6E56)
                (#xB8D1 . #x72D0)
                (#xB8D2 . #x7CCA)
                (#xB8D3 . #x88B4)
                (#xB8D4 . #x80A1)
                (#xB8D5 . #x80E1)
                (#xB8D6 . #x83F0)
                (#xB8D7 . #x864E)
                (#xB8D8 . #x8A87)
                (#xB8D9 . #x8DE8)
                (#xB8DA . #x9237)
                (#xB8DB . #x96C7)
                (#xB8DC . #x9867)
                (#xB8DD . #x9F13)
                (#xB8DE . #x4E94)
                (#xB8DF . #x4E92)
                (#xB8E0 . #x4F0D)
                (#xB8E1 . #x5348)
                (#xB8E2 . #x5449)
                (#xB8E3 . #x543E)
                (#xB8E4 . #x5A2F)
                (#xB8E5 . #x5F8C)
                (#xB8E6 . #x5FA1)
                (#xB8E7 . #x609F)
                (#xB8E8 . #x68A7)
                (#xB8E9 . #x6A8E)
                (#xB8EA . #x745A)
                (#xB8EB . #x7881)
                (#xB8EC . #x8A9E)
                (#xB8ED . #x8AA4)
                (#xB8EE . #x8B77)
                (#xB8EF . #x9190)
                (#xB8F0 . #x4E5E)
                (#xB8F1 . #x9BC9)
                (#xB8F2 . #x4EA4)
                (#xB8F3 . #x4F7C)
                (#xB8F4 . #x4FAF)
                (#xB8F5 . #x5019)
                (#xB8F6 . #x5016)
                (#xB8F7 . #x5149)
                (#xB8F8 . #x516C)
                (#xB8F9 . #x529F)
                (#xB8FA . #x52B9)
                (#xB8FB . #x52FE)
                (#xB8FC . #x539A)
                (#xB8FD . #x53E3)
                (#xB8FE . #x5411)
                (#xB9A1 . #x540E)
                (#xB9A2 . #x5589)
                (#xB9A3 . #x5751)
                (#xB9A4 . #x57A2)
                (#xB9A5 . #x597D)
                (#xB9A6 . #x5B54)
                (#xB9A7 . #x5B5D)
                (#xB9A8 . #x5B8F)
                (#xB9A9 . #x5DE5)
                (#xB9AA . #x5DE7)
                (#xB9AB . #x5DF7)
                (#xB9AC . #x5E78)
                (#xB9AD . #x5E83)
                (#xB9AE . #x5E9A)
                (#xB9AF . #x5EB7)
                (#xB9B0 . #x5F18)
                (#xB9B1 . #x6052)
                (#xB9B2 . #x614C)
                (#xB9B3 . #x6297)
                (#xB9B4 . #x62D8)
                (#xB9B5 . #x63A7)
                (#xB9B6 . #x653B)
                (#xB9B7 . #x6602)
                (#xB9B8 . #x6643)
                (#xB9B9 . #x66F4)
                (#xB9BA . #x676D)
                (#xB9BB . #x6821)
                (#xB9BC . #x6897)
                (#xB9BD . #x69CB)
                (#xB9BE . #x6C5F)
                (#xB9BF . #x6D2A)
                (#xB9C0 . #x6D69)
                (#xB9C1 . #x6E2F)
                (#xB9C2 . #x6E9D)
                (#xB9C3 . #x7532)
                (#xB9C4 . #x7687)
                (#xB9C5 . #x786C)
                (#xB9C6 . #x7A3F)
                (#xB9C7 . #x7CE0)
                (#xB9C8 . #x7D05)
                (#xB9C9 . #x7D18)
                (#xB9CA . #x7D5E)
                (#xB9CB . #x7DB1)
                (#xB9CC . #x8015)
                (#xB9CD . #x8003)
                (#xB9CE . #x80AF)
                (#xB9CF . #x80B1)
                (#xB9D0 . #x8154)
                (#xB9D1 . #x818F)
                (#xB9D2 . #x822A)
                (#xB9D3 . #x8352)
                (#xB9D4 . #x884C)
                (#xB9D5 . #x8861)
                (#xB9D6 . #x8B1B)
                (#xB9D7 . #x8CA2)
                (#xB9D8 . #x8CFC)
                (#xB9D9 . #x90CA)
                (#xB9DA . #x9175)
                (#xB9DB . #x9271)
                (#xB9DC . #x783F)
                (#xB9DD . #x92FC)
                (#xB9DE . #x95A4)
                (#xB9DF . #x964D)
                (#xB9E0 . #x9805)
                (#xB9E1 . #x9999)
                (#xB9E2 . #x9AD8)
                (#xB9E3 . #x9D3B)
                (#xB9E4 . #x525B)
                (#xB9E5 . #x52AB)
                (#xB9E6 . #x53F7)
                (#xB9E7 . #x5408)
                (#xB9E8 . #x58D5)
                (#xB9E9 . #x62F7)
                (#xB9EA . #x6FE0)
                (#xB9EB . #x8C6A)
                (#xB9EC . #x8F5F)
                (#xB9ED . #x9EB9)
                (#xB9EE . #x514B)
                (#xB9EF . #x523B)
                (#xB9F0 . #x544A)
                (#xB9F1 . #x56FD)
                (#xB9F2 . #x7A40)
                (#xB9F3 . #x9177)
                (#xB9F4 . #x9D60)
                (#xB9F5 . #x9ED2)
                (#xB9F6 . #x7344)
                (#xB9F7 . #x6F09)
                (#xB9F8 . #x8170)
                (#xB9F9 . #x7511)
                (#xB9FA . #x5FFD)
                (#xB9FB . #x60DA)
                (#xB9FC . #x9AA8)
                (#xB9FD . #x72DB)
                (#xB9FE . #x8FBC)
                (#xBAA1 . #x6B64)
                (#xBAA2 . #x9803)
                (#xBAA3 . #x4ECA)
                (#xBAA4 . #x56F0)
                (#xBAA5 . #x5764)
                (#xBAA6 . #x58BE)
                (#xBAA7 . #x5A5A)
                (#xBAA8 . #x6068)
                (#xBAA9 . #x61C7)
                (#xBAAA . #x660F)
                (#xBAAB . #x6606)
                (#xBAAC . #x6839)
                (#xBAAD . #x68B1)
                (#xBAAE . #x6DF7)
                (#xBAAF . #x75D5)
                (#xBAB0 . #x7D3A)
                (#xBAB1 . #x826E)
                (#xBAB2 . #x9B42)
                (#xBAB3 . #x4E9B)
                (#xBAB4 . #x4F50)
                (#xBAB5 . #x53C9)
                (#xBAB6 . #x5506)
                (#xBAB7 . #x5D6F)
                (#xBAB8 . #x5DE6)
                (#xBAB9 . #x5DEE)
                (#xBABA . #x67FB)
                (#xBABB . #x6C99)
                (#xBABC . #x7473)
                (#xBABD . #x7802)
                (#xBABE . #x8A50)
                (#xBABF . #x9396)
                (#xBAC0 . #x88DF)
                (#xBAC1 . #x5750)
                (#xBAC2 . #x5EA7)
                (#xBAC3 . #x632B)
                (#xBAC4 . #x50B5)
                (#xBAC5 . #x50AC)
                (#xBAC6 . #x518D)
                (#xBAC7 . #x6700)
                (#xBAC8 . #x54C9)
                (#xBAC9 . #x585E)
                (#xBACA . #x59BB)
                (#xBACB . #x5BB0)
                (#xBACC . #x5F69)
                (#xBACD . #x624D)
                (#xBACE . #x63A1)
                (#xBACF . #x683D)
                (#xBAD0 . #x6B73)
                (#xBAD1 . #x6E08)
                (#xBAD2 . #x707D)
                (#xBAD3 . #x91C7)
                (#xBAD4 . #x7280)
                (#xBAD5 . #x7815)
                (#xBAD6 . #x7826)
                (#xBAD7 . #x796D)
                (#xBAD8 . #x658E)
                (#xBAD9 . #x7D30)
                (#xBADA . #x83DC)
                (#xBADB . #x88C1)
                (#xBADC . #x8F09)
                (#xBADD . #x969B)
                (#xBADE . #x5264)
                (#xBADF . #x5728)
                (#xBAE0 . #x6750)
                (#xBAE1 . #x7F6A)
                (#xBAE2 . #x8CA1)
                (#xBAE3 . #x51B4)
                (#xBAE4 . #x5742)
                (#xBAE5 . #x962A)
                (#xBAE6 . #x583A)
                (#xBAE7 . #x698A)
                (#xBAE8 . #x80B4)
                (#xBAE9 . #x54B2)
                (#xBAEA . #x5D0E)
                (#xBAEB . #x57FC)
                (#xBAEC . #x7895)
                (#xBAED . #x9DFA)
                (#xBAEE . #x4F5C)
                (#xBAEF . #x524A)
                (#xBAF0 . #x548B)
                (#xBAF1 . #x643E)
                (#xBAF2 . #x6628)
                (#xBAF3 . #x6714)
                (#xBAF4 . #x67F5)
                (#xBAF5 . #x7A84)
                (#xBAF6 . #x7B56)
                (#xBAF7 . #x7D22)
                (#xBAF8 . #x932F)
                (#xBAF9 . #x685C)
                (#xBAFA . #x9BAD)
                (#xBAFB . #x7B39)
                (#xBAFC . #x5319)
                (#xBAFD . #x518A)
                (#xBAFE . #x5237)
                (#xBBA1 . #x5BDF)
                (#xBBA2 . #x62F6)
                (#xBBA3 . #x64AE)
                (#xBBA4 . #x64E6)
                (#xBBA5 . #x672D)
                (#xBBA6 . #x6BBA)
                (#xBBA7 . #x85A9)
                (#xBBA8 . #x96D1)
                (#xBBA9 . #x7690)
                (#xBBAA . #x9BD6)
                (#xBBAB . #x634C)
                (#xBBAC . #x9306)
                (#xBBAD . #x9BAB)
                (#xBBAE . #x76BF)
                (#xBBAF . #x6652)
                (#xBBB0 . #x4E09)
                (#xBBB1 . #x5098)
                (#xBBB2 . #x53C2)
                (#xBBB3 . #x5C71)
                (#xBBB4 . #x60E8)
                (#xBBB5 . #x6492)
                (#xBBB6 . #x6563)
                (#xBBB7 . #x685F)
                (#xBBB8 . #x71E6)
                (#xBBB9 . #x73CA)
                (#xBBBA . #x7523)
                (#xBBBB . #x7B97)
                (#xBBBC . #x7E82)
                (#xBBBD . #x8695)
                (#xBBBE . #x8B83)
                (#xBBBF . #x8CDB)
                (#xBBC0 . #x9178)
                (#xBBC1 . #x9910)
                (#xBBC2 . #x65AC)
                (#xBBC3 . #x66AB)
                (#xBBC4 . #x6B8B)
                (#xBBC5 . #x4ED5)
                (#xBBC6 . #x4ED4)
                (#xBBC7 . #x4F3A)
                (#xBBC8 . #x4F7F)
                (#xBBC9 . #x523A)
                (#xBBCA . #x53F8)
                (#xBBCB . #x53F2)
                (#xBBCC . #x55E3)
                (#xBBCD . #x56DB)
                (#xBBCE . #x58EB)
                (#xBBCF . #x59CB)
                (#xBBD0 . #x59C9)
                (#xBBD1 . #x59FF)
                (#xBBD2 . #x5B50)
                (#xBBD3 . #x5C4D)
                (#xBBD4 . #x5E02)
                (#xBBD5 . #x5E2B)
                (#xBBD6 . #x5FD7)
                (#xBBD7 . #x601D)
                (#xBBD8 . #x6307)
                (#xBBD9 . #x652F)
                (#xBBDA . #x5B5C)
                (#xBBDB . #x65AF)
                (#xBBDC . #x65BD)
                (#xBBDD . #x65E8)
                (#xBBDE . #x679D)
                (#xBBDF . #x6B62)
                (#xBBE0 . #x6B7B)
                (#xBBE1 . #x6C0F)
                (#xBBE2 . #x7345)
                (#xBBE3 . #x7949)
                (#xBBE4 . #x79C1)
                (#xBBE5 . #x7CF8)
                (#xBBE6 . #x7D19)
                (#xBBE7 . #x7D2B)
                (#xBBE8 . #x80A2)
                (#xBBE9 . #x8102)
                (#xBBEA . #x81F3)
                (#xBBEB . #x8996)
                (#xBBEC . #x8A5E)
                (#xBBED . #x8A69)
                (#xBBEE . #x8A66)
                (#xBBEF . #x8A8C)
                (#xBBF0 . #x8AEE)
                (#xBBF1 . #x8CC7)
                (#xBBF2 . #x8CDC)
                (#xBBF3 . #x96CC)
                (#xBBF4 . #x98FC)
                (#xBBF5 . #x6B6F)
                (#xBBF6 . #x4E8B)
                (#xBBF7 . #x4F3C)
                (#xBBF8 . #x4F8D)
                (#xBBF9 . #x5150)
                (#xBBFA . #x5B57)
                (#xBBFB . #x5BFA)
                (#xBBFC . #x6148)
                (#xBBFD . #x6301)
                (#xBBFE . #x6642)
                (#xBCA1 . #x6B21)
                (#xBCA2 . #x6ECB)
                (#xBCA3 . #x6CBB)
                (#xBCA4 . #x723E)
                (#xBCA5 . #x74BD)
                (#xBCA6 . #x75D4)
                (#xBCA7 . #x78C1)
                (#xBCA8 . #x793A)
                (#xBCA9 . #x800C)
                (#xBCAA . #x8033)
                (#xBCAB . #x81EA)
                (#xBCAC . #x8494)
                (#xBCAD . #x8F9E)
                (#xBCAE . #x6C50)
                (#xBCAF . #x9E7F)
                (#xBCB0 . #x5F0F)
                (#xBCB1 . #x8B58)
                (#xBCB2 . #x9D2B)
                (#xBCB3 . #x7AFA)
                (#xBCB4 . #x8EF8)
                (#xBCB5 . #x5B8D)
                (#xBCB6 . #x96EB)
                (#xBCB7 . #x4E03)
                (#xBCB8 . #x53F1)
                (#xBCB9 . #x57F7)
                (#xBCBA . #x5931)
                (#xBCBB . #x5AC9)
                (#xBCBC . #x5BA4)
                (#xBCBD . #x6089)
                (#xBCBE . #x6E7F)
                (#xBCBF . #x6F06)
                (#xBCC0 . #x75BE)
                (#xBCC1 . #x8CEA)
                (#xBCC2 . #x5B9F)
                (#xBCC3 . #x8500)
                (#xBCC4 . #x7BE0)
                (#xBCC5 . #x5072)
                (#xBCC6 . #x67F4)
                (#xBCC7 . #x829D)
                (#xBCC8 . #x5C61)
                (#xBCC9 . #x854A)
                (#xBCCA . #x7E1E)
                (#xBCCB . #x820E)
                (#xBCCC . #x5199)
                (#xBCCD . #x5C04)
                (#xBCCE . #x6368)
                (#xBCCF . #x8D66)
                (#xBCD0 . #x659C)
                (#xBCD1 . #x716E)
                (#xBCD2 . #x793E)
                (#xBCD3 . #x7D17)
                (#xBCD4 . #x8005)
                (#xBCD5 . #x8B1D)
                (#xBCD6 . #x8ECA)
                (#xBCD7 . #x906E)
                (#xBCD8 . #x86C7)
                (#xBCD9 . #x90AA)
                (#xBCDA . #x501F)
                (#xBCDB . #x52FA)
                (#xBCDC . #x5C3A)
                (#xBCDD . #x6753)
                (#xBCDE . #x707C)
                (#xBCDF . #x7235)
                (#xBCE0 . #x914C)
                (#xBCE1 . #x91C8)
                (#xBCE2 . #x932B)
                (#xBCE3 . #x82E5)
                (#xBCE4 . #x5BC2)
                (#xBCE5 . #x5F31)
                (#xBCE6 . #x60F9)
                (#xBCE7 . #x4E3B)
                (#xBCE8 . #x53D6)
                (#xBCE9 . #x5B88)
                (#xBCEA . #x624B)
                (#xBCEB . #x6731)
                (#xBCEC . #x6B8A)
                (#xBCED . #x72E9)
                (#xBCEE . #x73E0)
                (#xBCEF . #x7A2E)
                (#xBCF0 . #x816B)
                (#xBCF1 . #x8DA3)
                (#xBCF2 . #x9152)
                (#xBCF3 . #x9996)
                (#xBCF4 . #x5112)
                (#xBCF5 . #x53D7)
                (#xBCF6 . #x546A)
                (#xBCF7 . #x5BFF)
                (#xBCF8 . #x6388)
                (#xBCF9 . #x6A39)
                (#xBCFA . #x7DAC)
                (#xBCFB . #x9700)
                (#xBCFC . #x56DA)
                (#xBCFD . #x53CE)
                (#xBCFE . #x5468)
                (#xBDA1 . #x5B97)
                (#xBDA2 . #x5C31)
                (#xBDA3 . #x5DDE)
                (#xBDA4 . #x4FEE)
                (#xBDA5 . #x6101)
                (#xBDA6 . #x62FE)
                (#xBDA7 . #x6D32)
                (#xBDA8 . #x79C0)
                (#xBDA9 . #x79CB)
                (#xBDAA . #x7D42)
                (#xBDAB . #x7E4D)
                (#xBDAC . #x7FD2)
                (#xBDAD . #x81ED)
                (#xBDAE . #x821F)
                (#xBDAF . #x8490)
                (#xBDB0 . #x8846)
                (#xBDB1 . #x8972)
                (#xBDB2 . #x8B90)
                (#xBDB3 . #x8E74)
                (#xBDB4 . #x8F2F)
                (#xBDB5 . #x9031)
                (#xBDB6 . #x914B)
                (#xBDB7 . #x916C)
                (#xBDB8 . #x96C6)
                (#xBDB9 . #x919C)
                (#xBDBA . #x4EC0)
                (#xBDBB . #x4F4F)
                (#xBDBC . #x5145)
                (#xBDBD . #x5341)
                (#xBDBE . #x5F93)
                (#xBDBF . #x620E)
                (#xBDC0 . #x67D4)
                (#xBDC1 . #x6C41)
                (#xBDC2 . #x6E0B)
                (#xBDC3 . #x7363)
                (#xBDC4 . #x7E26)
                (#xBDC5 . #x91CD)
                (#xBDC6 . #x9283)
                (#xBDC7 . #x53D4)
                (#xBDC8 . #x5919)
                (#xBDC9 . #x5BBF)
                (#xBDCA . #x6DD1)
                (#xBDCB . #x795D)
                (#xBDCC . #x7E2E)
                (#xBDCD . #x7C9B)
                (#xBDCE . #x587E)
                (#xBDCF . #x719F)
                (#xBDD0 . #x51FA)
                (#xBDD1 . #x8853)
                (#xBDD2 . #x8FF0)
                (#xBDD3 . #x4FCA)
                (#xBDD4 . #x5CFB)
                (#xBDD5 . #x6625)
                (#xBDD6 . #x77AC)
                (#xBDD7 . #x7AE3)
                (#xBDD8 . #x821C)
                (#xBDD9 . #x99FF)
                (#xBDDA . #x51C6)
                (#xBDDB . #x5FAA)
                (#xBDDC . #x65EC)
                (#xBDDD . #x696F)
                (#xBDDE . #x6B89)
                (#xBDDF . #x6DF3)
                (#xBDE0 . #x6E96)
                (#xBDE1 . #x6F64)
                (#xBDE2 . #x76FE)
                (#xBDE3 . #x7D14)
                (#xBDE4 . #x5DE1)
                (#xBDE5 . #x9075)
                (#xBDE6 . #x9187)
                (#xBDE7 . #x9806)
                (#xBDE8 . #x51E6)
                (#xBDE9 . #x521D)
                (#xBDEA . #x6240)
                (#xBDEB . #x6691)
                (#xBDEC . #x66D9)
                (#xBDED . #x6E1A)
                (#xBDEE . #x5EB6)
                (#xBDEF . #x7DD2)
                (#xBDF0 . #x7F72)
                (#xBDF1 . #x66F8)
                (#xBDF2 . #x85AF)
                (#xBDF3 . #x85F7)
                (#xBDF4 . #x8AF8)
                (#xBDF5 . #x52A9)
                (#xBDF6 . #x53D9)
                (#xBDF7 . #x5973)
                (#xBDF8 . #x5E8F)
                (#xBDF9 . #x5F90)
                (#xBDFA . #x6055)
                (#xBDFB . #x92E4)
                (#xBDFC . #x9664)
                (#xBDFD . #x50B7)
                (#xBDFE . #x511F)
                (#xBEA1 . #x52DD)
                (#xBEA2 . #x5320)
                (#xBEA3 . #x5347)
                (#xBEA4 . #x53EC)
                (#xBEA5 . #x54E8)
                (#xBEA6 . #x5546)
                (#xBEA7 . #x5531)
                (#xBEA8 . #x5617)
                (#xBEA9 . #x5968)
                (#xBEAA . #x59BE)
                (#xBEAB . #x5A3C)
                (#xBEAC . #x5BB5)
                (#xBEAD . #x5C06)
                (#xBEAE . #x5C0F)
                (#xBEAF . #x5C11)
                (#xBEB0 . #x5C1A)
                (#xBEB1 . #x5E84)
                (#xBEB2 . #x5E8A)
                (#xBEB3 . #x5EE0)
                (#xBEB4 . #x5F70)
                (#xBEB5 . #x627F)
                (#xBEB6 . #x6284)
                (#xBEB7 . #x62DB)
                (#xBEB8 . #x638C)
                (#xBEB9 . #x6377)
                (#xBEBA . #x6607)
                (#xBEBB . #x660C)
                (#xBEBC . #x662D)
                (#xBEBD . #x6676)
                (#xBEBE . #x677E)
                (#xBEBF . #x68A2)
                (#xBEC0 . #x6A1F)
                (#xBEC1 . #x6A35)
                (#xBEC2 . #x6CBC)
                (#xBEC3 . #x6D88)
                (#xBEC4 . #x6E09)
                (#xBEC5 . #x6E58)
                (#xBEC6 . #x713C)
                (#xBEC7 . #x7126)
                (#xBEC8 . #x7167)
                (#xBEC9 . #x75C7)
                (#xBECA . #x7701)
                (#xBECB . #x785D)
                (#xBECC . #x7901)
                (#xBECD . #x7965)
                (#xBECE . #x79F0)
                (#xBECF . #x7AE0)
                (#xBED0 . #x7B11)
                (#xBED1 . #x7CA7)
                (#xBED2 . #x7D39)
                (#xBED3 . #x8096)
                (#xBED4 . #x83D6)
                (#xBED5 . #x848B)
                (#xBED6 . #x8549)
                (#xBED7 . #x885D)
                (#xBED8 . #x88F3)
                (#xBED9 . #x8A1F)
                (#xBEDA . #x8A3C)
                (#xBEDB . #x8A54)
                (#xBEDC . #x8A73)
                (#xBEDD . #x8C61)
                (#xBEDE . #x8CDE)
                (#xBEDF . #x91A4)
                (#xBEE0 . #x9266)
                (#xBEE1 . #x937E)
                (#xBEE2 . #x9418)
                (#xBEE3 . #x969C)
                (#xBEE4 . #x9798)
                (#xBEE5 . #x4E0A)
                (#xBEE6 . #x4E08)
                (#xBEE7 . #x4E1E)
                (#xBEE8 . #x4E57)
                (#xBEE9 . #x5197)
                (#xBEEA . #x5270)
                (#xBEEB . #x57CE)
                (#xBEEC . #x5834)
                (#xBEED . #x58CC)
                (#xBEEE . #x5B22)
                (#xBEEF . #x5E38)
                (#xBEF0 . #x60C5)
                (#xBEF1 . #x64FE)
                (#xBEF2 . #x6761)
                (#xBEF3 . #x6756)
                (#xBEF4 . #x6D44)
                (#xBEF5 . #x72B6)
                (#xBEF6 . #x7573)
                (#xBEF7 . #x7A63)
                (#xBEF8 . #x84B8)
                (#xBEF9 . #x8B72)
                (#xBEFA . #x91B8)
                (#xBEFB . #x9320)
                (#xBEFC . #x5631)
                (#xBEFD . #x57F4)
                (#xBEFE . #x98FE)
                (#xBFA1 . #x62ED)
                (#xBFA2 . #x690D)
                (#xBFA3 . #x6B96)
                (#xBFA4 . #x71ED)
                (#xBFA5 . #x7E54)
                (#xBFA6 . #x8077)
                (#xBFA7 . #x8272)
                (#xBFA8 . #x89E6)
                (#xBFA9 . #x98DF)
                (#xBFAA . #x8755)
                (#xBFAB . #x8FB1)
                (#xBFAC . #x5C3B)
                (#xBFAD . #x4F38)
                (#xBFAE . #x4FE1)
                (#xBFAF . #x4FB5)
                (#xBFB0 . #x5507)
                (#xBFB1 . #x5A20)
                (#xBFB2 . #x5BDD)
                (#xBFB3 . #x5BE9)
                (#xBFB4 . #x5FC3)
                (#xBFB5 . #x614E)
                (#xBFB6 . #x632F)
                (#xBFB7 . #x65B0)
                (#xBFB8 . #x664B)
                (#xBFB9 . #x68EE)
                (#xBFBA . #x699B)
                (#xBFBB . #x6D78)
                (#xBFBC . #x6DF1)
                (#xBFBD . #x7533)
                (#xBFBE . #x75B9)
                (#xBFBF . #x771F)
                (#xBFC0 . #x795E)
                (#xBFC1 . #x79E6)
                (#xBFC2 . #x7D33)
                (#xBFC3 . #x81E3)
                (#xBFC4 . #x82AF)
                (#xBFC5 . #x85AA)
                (#xBFC6 . #x89AA)
                (#xBFC7 . #x8A3A)
                (#xBFC8 . #x8EAB)
                (#xBFC9 . #x8F9B)
                (#xBFCA . #x9032)
                (#xBFCB . #x91DD)
                (#xBFCC . #x9707)
                (#xBFCD . #x4EBA)
                (#xBFCE . #x4EC1)
                (#xBFCF . #x5203)
                (#xBFD0 . #x5875)
                (#xBFD1 . #x58EC)
                (#xBFD2 . #x5C0B)
                (#xBFD3 . #x751A)
                (#xBFD4 . #x5C3D)
                (#xBFD5 . #x814E)
                (#xBFD6 . #x8A0A)
                (#xBFD7 . #x8FC5)
                (#xBFD8 . #x9663)
                (#xBFD9 . #x976D)
                (#xBFDA . #x7B25)
                (#xBFDB . #x8ACF)
                (#xBFDC . #x9808)
                (#xBFDD . #x9162)
                (#xBFDE . #x56F3)
                (#xBFDF . #x53A8)
                (#xBFE0 . #x9017)
                (#xBFE1 . #x5439)
                (#xBFE2 . #x5782)
                (#xBFE3 . #x5E25)
                (#xBFE4 . #x63A8)
                (#xBFE5 . #x6C34)
                (#xBFE6 . #x708A)
                (#xBFE7 . #x7761)
                (#xBFE8 . #x7C8B)
                (#xBFE9 . #x7FE0)
                (#xBFEA . #x8870)
                (#xBFEB . #x9042)
                (#xBFEC . #x9154)
                (#xBFED . #x9310)
                (#xBFEE . #x9318)
                (#xBFEF . #x968F)
                (#xBFF0 . #x745E)
                (#xBFF1 . #x9AC4)
                (#xBFF2 . #x5D07)
                (#xBFF3 . #x5D69)
                (#xBFF4 . #x6570)
                (#xBFF5 . #x67A2)
                (#xBFF6 . #x8DA8)
                (#xBFF7 . #x96DB)
                (#xBFF8 . #x636E)
                (#xBFF9 . #x6749)
                (#xBFFA . #x6919)
                (#xBFFB . #x83C5)
                (#xBFFC . #x9817)
                (#xBFFD . #x96C0)
                (#xBFFE . #x88FE)
                (#xC0A1 . #x6F84)
                (#xC0A2 . #x647A)
                (#xC0A3 . #x5BF8)
                (#xC0A4 . #x4E16)
                (#xC0A5 . #x702C)
                (#xC0A6 . #x755D)
                (#xC0A7 . #x662F)
                (#xC0A8 . #x51C4)
                (#xC0A9 . #x5236)
                (#xC0AA . #x52E2)
                (#xC0AB . #x59D3)
                (#xC0AC . #x5F81)
                (#xC0AD . #x6027)
                (#xC0AE . #x6210)
                (#xC0AF . #x653F)
                (#xC0B0 . #x6574)
                (#xC0B1 . #x661F)
                (#xC0B2 . #x6674)
                (#xC0B3 . #x68F2)
                (#xC0B4 . #x6816)
                (#xC0B5 . #x6B63)
                (#xC0B6 . #x6E05)
                (#xC0B7 . #x7272)
                (#xC0B8 . #x751F)
                (#xC0B9 . #x76DB)
                (#xC0BA . #x7CBE)
                (#xC0BB . #x8056)
                (#xC0BC . #x58F0)
                (#xC0BD . #x88FD)
                (#xC0BE . #x897F)
                (#xC0BF . #x8AA0)
                (#xC0C0 . #x8A93)
                (#xC0C1 . #x8ACB)
                (#xC0C2 . #x901D)
                (#xC0C3 . #x9192)
                (#xC0C4 . #x9752)
                (#xC0C5 . #x9759)
                (#xC0C6 . #x6589)
                (#xC0C7 . #x7A0E)
                (#xC0C8 . #x8106)
                (#xC0C9 . #x96BB)
                (#xC0CA . #x5E2D)
                (#xC0CB . #x60DC)
                (#xC0CC . #x621A)
                (#xC0CD . #x65A5)
                (#xC0CE . #x6614)
                (#xC0CF . #x6790)
                (#xC0D0 . #x77F3)
                (#xC0D1 . #x7A4D)
                (#xC0D2 . #x7C4D)
                (#xC0D3 . #x7E3E)
                (#xC0D4 . #x810A)
                (#xC0D5 . #x8CAC)
                (#xC0D6 . #x8D64)
                (#xC0D7 . #x8DE1)
                (#xC0D8 . #x8E5F)
                (#xC0D9 . #x78A9)
                (#xC0DA . #x5207)
                (#xC0DB . #x62D9)
                (#xC0DC . #x63A5)
                (#xC0DD . #x6442)
                (#xC0DE . #x6298)
                (#xC0DF . #x8A2D)
                (#xC0E0 . #x7A83)
                (#xC0E1 . #x7BC0)
                (#xC0E2 . #x8AAC)
                (#xC0E3 . #x96EA)
                (#xC0E4 . #x7D76)
                (#xC0E5 . #x820C)
                (#xC0E6 . #x8749)
                (#xC0E7 . #x4ED9)
                (#xC0E8 . #x5148)
                (#xC0E9 . #x5343)
                (#xC0EA . #x5360)
                (#xC0EB . #x5BA3)
                (#xC0EC . #x5C02)
                (#xC0ED . #x5C16)
                (#xC0EE . #x5DDD)
                (#xC0EF . #x6226)
                (#xC0F0 . #x6247)
                (#xC0F1 . #x64B0)
                (#xC0F2 . #x6813)
                (#xC0F3 . #x6834)
                (#xC0F4 . #x6CC9)
                (#xC0F5 . #x6D45)
                (#xC0F6 . #x6D17)
                (#xC0F7 . #x67D3)
                (#xC0F8 . #x6F5C)
                (#xC0F9 . #x714E)
                (#xC0FA . #x717D)
                (#xC0FB . #x65CB)
                (#xC0FC . #x7A7F)
                (#xC0FD . #x7BAD)
                (#xC0FE . #x7DDA)
                (#xC1A1 . #x7E4A)
                (#xC1A2 . #x7FA8)
                (#xC1A3 . #x817A)
                (#xC1A4 . #x821B)
                (#xC1A5 . #x8239)
                (#xC1A6 . #x85A6)
                (#xC1A7 . #x8A6E)
                (#xC1A8 . #x8CCE)
                (#xC1A9 . #x8DF5)
                (#xC1AA . #x9078)
                (#xC1AB . #x9077)
                (#xC1AC . #x92AD)
                (#xC1AD . #x9291)
                (#xC1AE . #x9583)
                (#xC1AF . #x9BAE)
                (#xC1B0 . #x524D)
                (#xC1B1 . #x5584)
                (#xC1B2 . #x6F38)
                (#xC1B3 . #x7136)
                (#xC1B4 . #x5168)
                (#xC1B5 . #x7985)
                (#xC1B6 . #x7E55)
                (#xC1B7 . #x81B3)
                (#xC1B8 . #x7CCE)
                (#xC1B9 . #x564C)
                (#xC1BA . #x5851)
                (#xC1BB . #x5CA8)
                (#xC1BC . #x63AA)
                (#xC1BD . #x66FE)
                (#xC1BE . #x66FD)
                (#xC1BF . #x695A)
                (#xC1C0 . #x72D9)
                (#xC1C1 . #x758F)
                (#xC1C2 . #x758E)
                (#xC1C3 . #x790E)
                (#xC1C4 . #x7956)
                (#xC1C5 . #x79DF)
                (#xC1C6 . #x7C97)
                (#xC1C7 . #x7D20)
                (#xC1C8 . #x7D44)
                (#xC1C9 . #x8607)
                (#xC1CA . #x8A34)
                (#xC1CB . #x963B)
                (#xC1CC . #x9061)
                (#xC1CD . #x9F20)
                (#xC1CE . #x50E7)
                (#xC1CF . #x5275)
                (#xC1D0 . #x53CC)
                (#xC1D1 . #x53E2)
                (#xC1D2 . #x5009)
                (#xC1D3 . #x55AA)
                (#xC1D4 . #x58EE)
                (#xC1D5 . #x594F)
                (#xC1D6 . #x723D)
                (#xC1D7 . #x5B8B)
                (#xC1D8 . #x5C64)
                (#xC1D9 . #x531D)
                (#xC1DA . #x60E3)
                (#xC1DB . #x60F3)
                (#xC1DC . #x635C)
                (#xC1DD . #x6383)
                (#xC1DE . #x633F)
                (#xC1DF . #x63BB)
                (#xC1E0 . #x64CD)
                (#xC1E1 . #x65E9)
                (#xC1E2 . #x66F9)
                (#xC1E3 . #x5DE3)
                (#xC1E4 . #x69CD)
                (#xC1E5 . #x69FD)
                (#xC1E6 . #x6F15)
                (#xC1E7 . #x71E5)
                (#xC1E8 . #x4E89)
                (#xC1E9 . #x75E9)
                (#xC1EA . #x76F8)
                (#xC1EB . #x7A93)
                (#xC1EC . #x7CDF)
                (#xC1ED . #x7DCF)
                (#xC1EE . #x7D9C)
                (#xC1EF . #x8061)
                (#xC1F0 . #x8349)
                (#xC1F1 . #x8358)
                (#xC1F2 . #x846C)
                (#xC1F3 . #x84BC)
                (#xC1F4 . #x85FB)
                (#xC1F5 . #x88C5)
                (#xC1F6 . #x8D70)
                (#xC1F7 . #x9001)
                (#xC1F8 . #x906D)
                (#xC1F9 . #x9397)
                (#xC1FA . #x971C)
                (#xC1FB . #x9A12)
                (#xC1FC . #x50CF)
                (#xC1FD . #x5897)
                (#xC1FE . #x618E)
                (#xC2A1 . #x81D3)
                (#xC2A2 . #x8535)
                (#xC2A3 . #x8D08)
                (#xC2A4 . #x9020)
                (#xC2A5 . #x4FC3)
                (#xC2A6 . #x5074)
                (#xC2A7 . #x5247)
                (#xC2A8 . #x5373)
                (#xC2A9 . #x606F)
                (#xC2AA . #x6349)
                (#xC2AB . #x675F)
                (#xC2AC . #x6E2C)
                (#xC2AD . #x8DB3)
                (#xC2AE . #x901F)
                (#xC2AF . #x4FD7)
                (#xC2B0 . #x5C5E)
                (#xC2B1 . #x8CCA)
                (#xC2B2 . #x65CF)
                (#xC2B3 . #x7D9A)
                (#xC2B4 . #x5352)
                (#xC2B5 . #x8896)
                (#xC2B6 . #x5176)
                (#xC2B7 . #x63C3)
                (#xC2B8 . #x5B58)
                (#xC2B9 . #x5B6B)
                (#xC2BA . #x5C0A)
                (#xC2BB . #x640D)
                (#xC2BC . #x6751)
                (#xC2BD . #x905C)
                (#xC2BE . #x4ED6)
                (#xC2BF . #x591A)
                (#xC2C0 . #x592A)
                (#xC2C1 . #x6C70)
                (#xC2C2 . #x8A51)
                (#xC2C3 . #x553E)
                (#xC2C4 . #x5815)
                (#xC2C5 . #x59A5)
                (#xC2C6 . #x60F0)
                (#xC2C7 . #x6253)
                (#xC2C8 . #x67C1)
                (#xC2C9 . #x8235)
                (#xC2CA . #x6955)
                (#xC2CB . #x9640)
                (#xC2CC . #x99C4)
                (#xC2CD . #x9A28)
                (#xC2CE . #x4F53)
                (#xC2CF . #x5806)
                (#xC2D0 . #x5BFE)
                (#xC2D1 . #x8010)
                (#xC2D2 . #x5CB1)
                (#xC2D3 . #x5E2F)
                (#xC2D4 . #x5F85)
                (#xC2D5 . #x6020)
                (#xC2D6 . #x614B)
                (#xC2D7 . #x6234)
                (#xC2D8 . #x66FF)
                (#xC2D9 . #x6CF0)
                (#xC2DA . #x6EDE)
                (#xC2DB . #x80CE)
                (#xC2DC . #x817F)
                (#xC2DD . #x82D4)
                (#xC2DE . #x888B)
                (#xC2DF . #x8CB8)
                (#xC2E0 . #x9000)
                (#xC2E1 . #x902E)
                (#xC2E2 . #x968A)
                (#xC2E3 . #x9EDB)
                (#xC2E4 . #x9BDB)
                (#xC2E5 . #x4EE3)
                (#xC2E6 . #x53F0)
                (#xC2E7 . #x5927)
                (#xC2E8 . #x7B2C)
                (#xC2E9 . #x918D)
                (#xC2EA . #x984C)
                (#xC2EB . #x9DF9)
                (#xC2EC . #x6EDD)
                (#xC2ED . #x7027)
                (#xC2EE . #x5353)
                (#xC2EF . #x5544)
                (#xC2F0 . #x5B85)
                (#xC2F1 . #x6258)
                (#xC2F2 . #x629E)
                (#xC2F3 . #x62D3)
                (#xC2F4 . #x6CA2)
                (#xC2F5 . #x6FEF)
                (#xC2F6 . #x7422)
                (#xC2F7 . #x8A17)
                (#xC2F8 . #x9438)
                (#xC2F9 . #x6FC1)
                (#xC2FA . #x8AFE)
                (#xC2FB . #x8338)
                (#xC2FC . #x51E7)
                (#xC2FD . #x86F8)
                (#xC2FE . #x53EA)
                (#xC3A1 . #x53E9)
                (#xC3A2 . #x4F46)
                (#xC3A3 . #x9054)
                (#xC3A4 . #x8FB0)
                (#xC3A5 . #x596A)
                (#xC3A6 . #x8131)
                (#xC3A7 . #x5DFD)
                (#xC3A8 . #x7AEA)
                (#xC3A9 . #x8FBF)
                (#xC3AA . #x68DA)
                (#xC3AB . #x8C37)
                (#xC3AC . #x72F8)
                (#xC3AD . #x9C48)
                (#xC3AE . #x6A3D)
                (#xC3AF . #x8AB0)
                (#xC3B0 . #x4E39)
                (#xC3B1 . #x5358)
                (#xC3B2 . #x5606)
                (#xC3B3 . #x5766)
                (#xC3B4 . #x62C5)
                (#xC3B5 . #x63A2)
                (#xC3B6 . #x65E6)
                (#xC3B7 . #x6B4E)
                (#xC3B8 . #x6DE1)
                (#xC3B9 . #x6E5B)
                (#xC3BA . #x70AD)
                (#xC3BB . #x77ED)
                (#xC3BC . #x7AEF)
                (#xC3BD . #x7BAA)
                (#xC3BE . #x7DBB)
                (#xC3BF . #x803D)
                (#xC3C0 . #x80C6)
                (#xC3C1 . #x86CB)
                (#xC3C2 . #x8A95)
                (#xC3C3 . #x935B)
                (#xC3C4 . #x56E3)
                (#xC3C5 . #x58C7)
                (#xC3C6 . #x5F3E)
                (#xC3C7 . #x65AD)
                (#xC3C8 . #x6696)
                (#xC3C9 . #x6A80)
                (#xC3CA . #x6BB5)
                (#xC3CB . #x7537)
                (#xC3CC . #x8AC7)
                (#xC3CD . #x5024)
                (#xC3CE . #x77E5)
                (#xC3CF . #x5730)
                (#xC3D0 . #x5F1B)
                (#xC3D1 . #x6065)
                (#xC3D2 . #x667A)
                (#xC3D3 . #x6C60)
                (#xC3D4 . #x75F4)
                (#xC3D5 . #x7A1A)
                (#xC3D6 . #x7F6E)
                (#xC3D7 . #x81F4)
                (#xC3D8 . #x8718)
                (#xC3D9 . #x9045)
                (#xC3DA . #x99B3)
                (#xC3DB . #x7BC9)
                (#xC3DC . #x755C)
                (#xC3DD . #x7AF9)
                (#xC3DE . #x7B51)
                (#xC3DF . #x84C4)
                (#xC3E0 . #x9010)
                (#xC3E1 . #x79E9)
                (#xC3E2 . #x7A92)
                (#xC3E3 . #x8336)
                (#xC3E4 . #x5AE1)
                (#xC3E5 . #x7740)
                (#xC3E6 . #x4E2D)
                (#xC3E7 . #x4EF2)
                (#xC3E8 . #x5B99)
                (#xC3E9 . #x5FE0)
                (#xC3EA . #x62BD)
                (#xC3EB . #x663C)
                (#xC3EC . #x67F1)
                (#xC3ED . #x6CE8)
                (#xC3EE . #x866B)
                (#xC3EF . #x8877)
                (#xC3F0 . #x8A3B)
                (#xC3F1 . #x914E)
                (#xC3F2 . #x92F3)
                (#xC3F3 . #x99D0)
                (#xC3F4 . #x6A17)
                (#xC3F5 . #x7026)
                (#xC3F6 . #x732A)
                (#xC3F7 . #x82E7)
                (#xC3F8 . #x8457)
                (#xC3F9 . #x8CAF)
                (#xC3FA . #x4E01)
                (#xC3FB . #x5146)
                (#xC3FC . #x51CB)
                (#xC3FD . #x558B)
                (#xC3FE . #x5BF5)
                (#xC4A1 . #x5E16)
                (#xC4A2 . #x5E33)
                (#xC4A3 . #x5E81)
                (#xC4A4 . #x5F14)
                (#xC4A5 . #x5F35)
                (#xC4A6 . #x5F6B)
                (#xC4A7 . #x5FB4)
                (#xC4A8 . #x61F2)
                (#xC4A9 . #x6311)
                (#xC4AA . #x66A2)
                (#xC4AB . #x671D)
                (#xC4AC . #x6F6E)
                (#xC4AD . #x7252)
                (#xC4AE . #x753A)
                (#xC4AF . #x773A)
                (#xC4B0 . #x8074)
                (#xC4B1 . #x8139)
                (#xC4B2 . #x8178)
                (#xC4B3 . #x8776)
                (#xC4B4 . #x8ABF)
                (#xC4B5 . #x8ADC)
                (#xC4B6 . #x8D85)
                (#xC4B7 . #x8DF3)
                (#xC4B8 . #x929A)
                (#xC4B9 . #x9577)
                (#xC4BA . #x9802)
                (#xC4BB . #x9CE5)
                (#xC4BC . #x52C5)
                (#xC4BD . #x6357)
                (#xC4BE . #x76F4)
                (#xC4BF . #x6715)
                (#xC4C0 . #x6C88)
                (#xC4C1 . #x73CD)
                (#xC4C2 . #x8CC3)
                (#xC4C3 . #x93AE)
                (#xC4C4 . #x9673)
                (#xC4C5 . #x6D25)
                (#xC4C6 . #x589C)
                (#xC4C7 . #x690E)
                (#xC4C8 . #x69CC)
                (#xC4C9 . #x8FFD)
                (#xC4CA . #x939A)
                (#xC4CB . #x75DB)
                (#xC4CC . #x901A)
                (#xC4CD . #x585A)
                (#xC4CE . #x6802)
                (#xC4CF . #x63B4)
                (#xC4D0 . #x69FB)
                (#xC4D1 . #x4F43)
                (#xC4D2 . #x6F2C)
                (#xC4D3 . #x67D8)
                (#xC4D4 . #x8FBB)
                (#xC4D5 . #x8526)
                (#xC4D6 . #x7DB4)
                (#xC4D7 . #x9354)
                (#xC4D8 . #x693F)
                (#xC4D9 . #x6F70)
                (#xC4DA . #x576A)
                (#xC4DB . #x58F7)
                (#xC4DC . #x5B2C)
                (#xC4DD . #x7D2C)
                (#xC4DE . #x722A)
                (#xC4DF . #x540A)
                (#xC4E0 . #x91E3)
                (#xC4E1 . #x9DB4)
                (#xC4E2 . #x4EAD)
                (#xC4E3 . #x4F4E)
                (#xC4E4 . #x505C)
                (#xC4E5 . #x5075)
                (#xC4E6 . #x5243)
                (#xC4E7 . #x8C9E)
                (#xC4E8 . #x5448)
                (#xC4E9 . #x5824)
                (#xC4EA . #x5B9A)
                (#xC4EB . #x5E1D)
                (#xC4EC . #x5E95)
                (#xC4ED . #x5EAD)
                (#xC4EE . #x5EF7)
                (#xC4EF . #x5F1F)
                (#xC4F0 . #x608C)
                (#xC4F1 . #x62B5)
                (#xC4F2 . #x633A)
                (#xC4F3 . #x63D0)
                (#xC4F4 . #x68AF)
                (#xC4F5 . #x6C40)
                (#xC4F6 . #x7887)
                (#xC4F7 . #x798E)
                (#xC4F8 . #x7A0B)
                (#xC4F9 . #x7DE0)
                (#xC4FA . #x8247)
                (#xC4FB . #x8A02)
                (#xC4FC . #x8AE6)
                (#xC4FD . #x8E44)
                (#xC4FE . #x9013)
                (#xC5A1 . #x90B8)
                (#xC5A2 . #x912D)
                (#xC5A3 . #x91D8)
                (#xC5A4 . #x9F0E)
                (#xC5A5 . #x6CE5)
                (#xC5A6 . #x6458)
                (#xC5A7 . #x64E2)
                (#xC5A8 . #x6575)
                (#xC5A9 . #x6EF4)
                (#xC5AA . #x7684)
                (#xC5AB . #x7B1B)
                (#xC5AC . #x9069)
                (#xC5AD . #x93D1)
                (#xC5AE . #x6EBA)
                (#xC5AF . #x54F2)
                (#xC5B0 . #x5FB9)
                (#xC5B1 . #x64A4)
                (#xC5B2 . #x8F4D)
                (#xC5B3 . #x8FED)
                (#xC5B4 . #x9244)
                (#xC5B5 . #x5178)
                (#xC5B6 . #x586B)
                (#xC5B7 . #x5929)
                (#xC5B8 . #x5C55)
                (#xC5B9 . #x5E97)
                (#xC5BA . #x6DFB)
                (#xC5BB . #x7E8F)
                (#xC5BC . #x751C)
                (#xC5BD . #x8CBC)
                (#xC5BE . #x8EE2)
                (#xC5BF . #x985B)
                (#xC5C0 . #x70B9)
                (#xC5C1 . #x4F1D)
                (#xC5C2 . #x6BBF)
                (#xC5C3 . #x6FB1)
                (#xC5C4 . #x7530)
                (#xC5C5 . #x96FB)
                (#xC5C6 . #x514E)
                (#xC5C7 . #x5410)
                (#xC5C8 . #x5835)
                (#xC5C9 . #x5857)
                (#xC5CA . #x59AC)
                (#xC5CB . #x5C60)
                (#xC5CC . #x5F92)
                (#xC5CD . #x6597)
                (#xC5CE . #x675C)
                (#xC5CF . #x6E21)
                (#xC5D0 . #x767B)
                (#xC5D1 . #x83DF)
                (#xC5D2 . #x8CED)
                (#xC5D3 . #x9014)
                (#xC5D4 . #x90FD)
                (#xC5D5 . #x934D)
                (#xC5D6 . #x7825)
                (#xC5D7 . #x783A)
                (#xC5D8 . #x52AA)
                (#xC5D9 . #x5EA6)
                (#xC5DA . #x571F)
                (#xC5DB . #x5974)
                (#xC5DC . #x6012)
                (#xC5DD . #x5012)
                (#xC5DE . #x515A)
                (#xC5DF . #x51AC)
                (#xC5E0 . #x51CD)
                (#xC5E1 . #x5200)
                (#xC5E2 . #x5510)
                (#xC5E3 . #x5854)
                (#xC5E4 . #x5858)
                (#xC5E5 . #x5957)
                (#xC5E6 . #x5B95)
                (#xC5E7 . #x5CF6)
                (#xC5E8 . #x5D8B)
                (#xC5E9 . #x60BC)
                (#xC5EA . #x6295)
                (#xC5EB . #x642D)
                (#xC5EC . #x6771)
                (#xC5ED . #x6843)
                (#xC5EE . #x68BC)
                (#xC5EF . #x68DF)
                (#xC5F0 . #x76D7)
                (#xC5F1 . #x6DD8)
                (#xC5F2 . #x6E6F)
                (#xC5F3 . #x6D9B)
                (#xC5F4 . #x706F)
                (#xC5F5 . #x71C8)
                (#xC5F6 . #x5F53)
                (#xC5F7 . #x75D8)
                (#xC5F8 . #x7977)
                (#xC5F9 . #x7B49)
                (#xC5FA . #x7B54)
                (#xC5FB . #x7B52)
                (#xC5FC . #x7CD6)
                (#xC5FD . #x7D71)
                (#xC5FE . #x5230)
                (#xC6A1 . #x8463)
                (#xC6A2 . #x8569)
                (#xC6A3 . #x85E4)
                (#xC6A4 . #x8A0E)
                (#xC6A5 . #x8B04)
                (#xC6A6 . #x8C46)
                (#xC6A7 . #x8E0F)
                (#xC6A8 . #x9003)
                (#xC6A9 . #x900F)
                (#xC6AA . #x9419)
                (#xC6AB . #x9676)
                (#xC6AC . #x982D)
                (#xC6AD . #x9A30)
                (#xC6AE . #x95D8)
                (#xC6AF . #x50CD)
                (#xC6B0 . #x52D5)
                (#xC6B1 . #x540C)
                (#xC6B2 . #x5802)
                (#xC6B3 . #x5C0E)
                (#xC6B4 . #x61A7)
                (#xC6B5 . #x649E)
                (#xC6B6 . #x6D1E)
                (#xC6B7 . #x77B3)
                (#xC6B8 . #x7AE5)
                (#xC6B9 . #x80F4)
                (#xC6BA . #x8404)
                (#xC6BB . #x9053)
                (#xC6BC . #x9285)
                (#xC6BD . #x5CE0)
                (#xC6BE . #x9D07)
                (#xC6BF . #x533F)
                (#xC6C0 . #x5F97)
                (#xC6C1 . #x5FB3)
                (#xC6C2 . #x6D9C)
                (#xC6C3 . #x7279)
                (#xC6C4 . #x7763)
                (#xC6C5 . #x79BF)
                (#xC6C6 . #x7BE4)
                (#xC6C7 . #x6BD2)
                (#xC6C8 . #x72EC)
                (#xC6C9 . #x8AAD)
                (#xC6CA . #x6803)
                (#xC6CB . #x6A61)
                (#xC6CC . #x51F8)
                (#xC6CD . #x7A81)
                (#xC6CE . #x6934)
                (#xC6CF . #x5C4A)
                (#xC6D0 . #x9CF6)
                (#xC6D1 . #x82EB)
                (#xC6D2 . #x5BC5)
                (#xC6D3 . #x9149)
                (#xC6D4 . #x701E)
                (#xC6D5 . #x5678)
                (#xC6D6 . #x5C6F)
                (#xC6D7 . #x60C7)
                (#xC6D8 . #x6566)
                (#xC6D9 . #x6C8C)
                (#xC6DA . #x8C5A)
                (#xC6DB . #x9041)
                (#xC6DC . #x9813)
                (#xC6DD . #x5451)
                (#xC6DE . #x66C7)
                (#xC6DF . #x920D)
                (#xC6E0 . #x5948)
                (#xC6E1 . #x90A3)
                (#xC6E2 . #x5185)
                (#xC6E3 . #x4E4D)
                (#xC6E4 . #x51EA)
                (#xC6E5 . #x8599)
                (#xC6E6 . #x8B0E)
                (#xC6E7 . #x7058)
                (#xC6E8 . #x637A)
                (#xC6E9 . #x934B)
                (#xC6EA . #x6962)
                (#xC6EB . #x99B4)
                (#xC6EC . #x7E04)
                (#xC6ED . #x7577)
                (#xC6EE . #x5357)
                (#xC6EF . #x6960)
                (#xC6F0 . #x8EDF)
                (#xC6F1 . #x96E3)
                (#xC6F2 . #x6C5D)
                (#xC6F3 . #x4E8C)
                (#xC6F4 . #x5C3C)
                (#xC6F5 . #x5F10)
                (#xC6F6 . #x8FE9)
                (#xC6F7 . #x5302)
                (#xC6F8 . #x8CD1)
                (#xC6F9 . #x8089)
                (#xC6FA . #x8679)
                (#xC6FB . #x5EFF)
                (#xC6FC . #x65E5)
                (#xC6FD . #x4E73)
                (#xC6FE . #x5165)
                (#xC7A1 . #x5982)
                (#xC7A2 . #x5C3F)
                (#xC7A3 . #x97EE)
                (#xC7A4 . #x4EFB)
                (#xC7A5 . #x598A)
                (#xC7A6 . #x5FCD)
                (#xC7A7 . #x8A8D)
                (#xC7A8 . #x6FE1)
                (#xC7A9 . #x79B0)
                (#xC7AA . #x7962)
                (#xC7AB . #x5BE7)
                (#xC7AC . #x8471)
                (#xC7AD . #x732B)
                (#xC7AE . #x71B1)
                (#xC7AF . #x5E74)
                (#xC7B0 . #x5FF5)
                (#xC7B1 . #x637B)
                (#xC7B2 . #x649A)
                (#xC7B3 . #x71C3)
                (#xC7B4 . #x7C98)
                (#xC7B5 . #x4E43)
                (#xC7B6 . #x5EFC)
                (#xC7B7 . #x4E4B)
                (#xC7B8 . #x57DC)
                (#xC7B9 . #x56A2)
                (#xC7BA . #x60A9)
                (#xC7BB . #x6FC3)
                (#xC7BC . #x7D0D)
                (#xC7BD . #x80FD)
                (#xC7BE . #x8133)
                (#xC7BF . #x81BF)
                (#xC7C0 . #x8FB2)
                (#xC7C1 . #x8997)
                (#xC7C2 . #x86A4)
                (#xC7C3 . #x5DF4)
                (#xC7C4 . #x628A)
                (#xC7C5 . #x64AD)
                (#xC7C6 . #x8987)
                (#xC7C7 . #x6777)
                (#xC7C8 . #x6CE2)
                (#xC7C9 . #x6D3E)
                (#xC7CA . #x7436)
                (#xC7CB . #x7834)
                (#xC7CC . #x5A46)
                (#xC7CD . #x7F75)
                (#xC7CE . #x82AD)
                (#xC7CF . #x99AC)
                (#xC7D0 . #x4FF3)
                (#xC7D1 . #x5EC3)
                (#xC7D2 . #x62DD)
                (#xC7D3 . #x6392)
                (#xC7D4 . #x6557)
                (#xC7D5 . #x676F)
                (#xC7D6 . #x76C3)
                (#xC7D7 . #x724C)
                (#xC7D8 . #x80CC)
                (#xC7D9 . #x80BA)
                (#xC7DA . #x8F29)
                (#xC7DB . #x914D)
                (#xC7DC . #x500D)
                (#xC7DD . #x57F9)
                (#xC7DE . #x5A92)
                (#xC7DF . #x6885)
                (#xC7E0 . #x6973)
                (#xC7E1 . #x7164)
                (#xC7E2 . #x72FD)
                (#xC7E3 . #x8CB7)
                (#xC7E4 . #x58F2)
                (#xC7E5 . #x8CE0)
                (#xC7E6 . #x966A)
                (#xC7E7 . #x9019)
                (#xC7E8 . #x877F)
                (#xC7E9 . #x79E4)
                (#xC7EA . #x77E7)
                (#xC7EB . #x8429)
                (#xC7EC . #x4F2F)
                (#xC7ED . #x5265)
                (#xC7EE . #x535A)
                (#xC7EF . #x62CD)
                (#xC7F0 . #x67CF)
                (#xC7F1 . #x6CCA)
                (#xC7F2 . #x767D)
                (#xC7F3 . #x7B94)
                (#xC7F4 . #x7C95)
                (#xC7F5 . #x8236)
                (#xC7F6 . #x8584)
                (#xC7F7 . #x8FEB)
                (#xC7F8 . #x66DD)
                (#xC7F9 . #x6F20)
                (#xC7FA . #x7206)
                (#xC7FB . #x7E1B)
                (#xC7FC . #x83AB)
                (#xC7FD . #x99C1)
                (#xC7FE . #x9EA6)
                (#xC8A1 . #x51FD)
                (#xC8A2 . #x7BB1)
                (#xC8A3 . #x7872)
                (#xC8A4 . #x7BB8)
                (#xC8A5 . #x8087)
                (#xC8A6 . #x7B48)
                (#xC8A7 . #x6AE8)
                (#xC8A8 . #x5E61)
                (#xC8A9 . #x808C)
                (#xC8AA . #x7551)
                (#xC8AB . #x7560)
                (#xC8AC . #x516B)
                (#xC8AD . #x9262)
                (#xC8AE . #x6E8C)
                (#xC8AF . #x767A)
                (#xC8B0 . #x9197)
                (#xC8B1 . #x9AEA)
                (#xC8B2 . #x4F10)
                (#xC8B3 . #x7F70)
                (#xC8B4 . #x629C)
                (#xC8B5 . #x7B4F)
                (#xC8B6 . #x95A5)
                (#xC8B7 . #x9CE9)
                (#xC8B8 . #x567A)
                (#xC8B9 . #x5859)
                (#xC8BA . #x86E4)
                (#xC8BB . #x96BC)
                (#xC8BC . #x4F34)
                (#xC8BD . #x5224)
                (#xC8BE . #x534A)
                (#xC8BF . #x53CD)
                (#xC8C0 . #x53DB)
                (#xC8C1 . #x5E06)
                (#xC8C2 . #x642C)
                (#xC8C3 . #x6591)
                (#xC8C4 . #x677F)
                (#xC8C5 . #x6C3E)
                (#xC8C6 . #x6C4E)
                (#xC8C7 . #x7248)
                (#xC8C8 . #x72AF)
                (#xC8C9 . #x73ED)
                (#xC8CA . #x7554)
                (#xC8CB . #x7E41)
                (#xC8CC . #x822C)
                (#xC8CD . #x85E9)
                (#xC8CE . #x8CA9)
                (#xC8CF . #x7BC4)
                (#xC8D0 . #x91C6)
                (#xC8D1 . #x7169)
                (#xC8D2 . #x9812)
                (#xC8D3 . #x98EF)
                (#xC8D4 . #x633D)
                (#xC8D5 . #x6669)
                (#xC8D6 . #x756A)
                (#xC8D7 . #x76E4)
                (#xC8D8 . #x78D0)
                (#xC8D9 . #x8543)
                (#xC8DA . #x86EE)
                (#xC8DB . #x532A)
                (#xC8DC . #x5351)
                (#xC8DD . #x5426)
                (#xC8DE . #x5983)
                (#xC8DF . #x5E87)
                (#xC8E0 . #x5F7C)
                (#xC8E1 . #x60B2)
                (#xC8E2 . #x6249)
                (#xC8E3 . #x6279)
                (#xC8E4 . #x62AB)
                (#xC8E5 . #x6590)
                (#xC8E6 . #x6BD4)
                (#xC8E7 . #x6CCC)
                (#xC8E8 . #x75B2)
                (#xC8E9 . #x76AE)
                (#xC8EA . #x7891)
                (#xC8EB . #x79D8)
                (#xC8EC . #x7DCB)
                (#xC8ED . #x7F77)
                (#xC8EE . #x80A5)
                (#xC8EF . #x88AB)
                (#xC8F0 . #x8AB9)
                (#xC8F1 . #x8CBB)
                (#xC8F2 . #x907F)
                (#xC8F3 . #x975E)
                (#xC8F4 . #x98DB)
                (#xC8F5 . #x6A0B)
                (#xC8F6 . #x7C38)
                (#xC8F7 . #x5099)
                (#xC8F8 . #x5C3E)
                (#xC8F9 . #x5FAE)
                (#xC8FA . #x6787)
                (#xC8FB . #x6BD8)
                (#xC8FC . #x7435)
                (#xC8FD . #x7709)
                (#xC8FE . #x7F8E)
                (#xC9A1 . #x9F3B)
                (#xC9A2 . #x67CA)
                (#xC9A3 . #x7A17)
                (#xC9A4 . #x5339)
                (#xC9A5 . #x758B)
                (#xC9A6 . #x9AED)
                (#xC9A7 . #x5F66)
                (#xC9A8 . #x819D)
                (#xC9A9 . #x83F1)
                (#xC9AA . #x8098)
                (#xC9AB . #x5F3C)
                (#xC9AC . #x5FC5)
                (#xC9AD . #x7562)
                (#xC9AE . #x7B46)
                (#xC9AF . #x903C)
                (#xC9B0 . #x6867)
                (#xC9B1 . #x59EB)
                (#xC9B2 . #x5A9B)
                (#xC9B3 . #x7D10)
                (#xC9B4 . #x767E)
                (#xC9B5 . #x8B2C)
                (#xC9B6 . #x4FF5)
                (#xC9B7 . #x5F6A)
                (#xC9B8 . #x6A19)
                (#xC9B9 . #x6C37)
                (#xC9BA . #x6F02)
                (#xC9BB . #x74E2)
                (#xC9BC . #x7968)
                (#xC9BD . #x8868)
                (#xC9BE . #x8A55)
                (#xC9BF . #x8C79)
                (#xC9C0 . #x5EDF)
                (#xC9C1 . #x63CF)
                (#xC9C2 . #x75C5)
                (#xC9C3 . #x79D2)
                (#xC9C4 . #x82D7)
                (#xC9C5 . #x9328)
                (#xC9C6 . #x92F2)
                (#xC9C7 . #x849C)
                (#xC9C8 . #x86ED)
                (#xC9C9 . #x9C2D)
                (#xC9CA . #x54C1)
                (#xC9CB . #x5F6C)
                (#xC9CC . #x658C)
                (#xC9CD . #x6D5C)
                (#xC9CE . #x7015)
                (#xC9CF . #x8CA7)
                (#xC9D0 . #x8CD3)
                (#xC9D1 . #x983B)
                (#xC9D2 . #x654F)
                (#xC9D3 . #x74F6)
                (#xC9D4 . #x4E0D)
                (#xC9D5 . #x4ED8)
                (#xC9D6 . #x57E0)
                (#xC9D7 . #x592B)
                (#xC9D8 . #x5A66)
                (#xC9D9 . #x5BCC)
                (#xC9DA . #x51A8)
                (#xC9DB . #x5E03)
                (#xC9DC . #x5E9C)
                (#xC9DD . #x6016)
                (#xC9DE . #x6276)
                (#xC9DF . #x6577)
                (#xC9E0 . #x65A7)
                (#xC9E1 . #x666E)
                (#xC9E2 . #x6D6E)
                (#xC9E3 . #x7236)
                (#xC9E4 . #x7B26)
                (#xC9E5 . #x8150)
                (#xC9E6 . #x819A)
                (#xC9E7 . #x8299)
                (#xC9E8 . #x8B5C)
                (#xC9E9 . #x8CA0)
                (#xC9EA . #x8CE6)
                (#xC9EB . #x8D74)
                (#xC9EC . #x961C)
                (#xC9ED . #x9644)
                (#xC9EE . #x4FAE)
                (#xC9EF . #x64AB)
                (#xC9F0 . #x6B66)
                (#xC9F1 . #x821E)
                (#xC9F2 . #x8461)
                (#xC9F3 . #x856A)
                (#xC9F4 . #x90E8)
                (#xC9F5 . #x5C01)
                (#xC9F6 . #x6953)
                (#xC9F7 . #x98A8)
                (#xC9F8 . #x847A)
                (#xC9F9 . #x8557)
                (#xC9FA . #x4F0F)
                (#xC9FB . #x526F)
                (#xC9FC . #x5FA9)
                (#xC9FD . #x5E45)
                (#xC9FE . #x670D)
                (#xCAA1 . #x798F)
                (#xCAA2 . #x8179)
                (#xCAA3 . #x8907)
                (#xCAA4 . #x8986)
                (#xCAA5 . #x6DF5)
                (#xCAA6 . #x5F17)
                (#xCAA7 . #x6255)
                (#xCAA8 . #x6CB8)
                (#xCAA9 . #x4ECF)
                (#xCAAA . #x7269)
                (#xCAAB . #x9B92)
                (#xCAAC . #x5206)
                (#xCAAD . #x543B)
                (#xCAAE . #x5674)
                (#xCAAF . #x58B3)
                (#xCAB0 . #x61A4)
                (#xCAB1 . #x626E)
                (#xCAB2 . #x711A)
                (#xCAB3 . #x596E)
                (#xCAB4 . #x7C89)
                (#xCAB5 . #x7CDE)
                (#xCAB6 . #x7D1B)
                (#xCAB7 . #x96F0)
                (#xCAB8 . #x6587)
                (#xCAB9 . #x805E)
                (#xCABA . #x4E19)
                (#xCABB . #x4F75)
                (#xCABC . #x5175)
                (#xCABD . #x5840)
                (#xCABE . #x5E63)
                (#xCABF . #x5E73)
                (#xCAC0 . #x5F0A)
                (#xCAC1 . #x67C4)
                (#xCAC2 . #x4E26)
                (#xCAC3 . #x853D)
                (#xCAC4 . #x9589)
                (#xCAC5 . #x965B)
                (#xCAC6 . #x7C73)
                (#xCAC7 . #x9801)
                (#xCAC8 . #x50FB)
                (#xCAC9 . #x58C1)
                (#xCACA . #x7656)
                (#xCACB . #x78A7)
                (#xCACC . #x5225)
                (#xCACD . #x77A5)
                (#xCACE . #x8511)
                (#xCACF . #x7B86)
                (#xCAD0 . #x504F)
                (#xCAD1 . #x5909)
                (#xCAD2 . #x7247)
                (#xCAD3 . #x7BC7)
                (#xCAD4 . #x7DE8)
                (#xCAD5 . #x8FBA)
                (#xCAD6 . #x8FD4)
                (#xCAD7 . #x904D)
                (#xCAD8 . #x4FBF)
                (#xCAD9 . #x52C9)
                (#xCADA . #x5A29)
                (#xCADB . #x5F01)
                (#xCADC . #x97AD)
                (#xCADD . #x4FDD)
                (#xCADE . #x8217)
                (#xCADF . #x92EA)
                (#xCAE0 . #x5703)
                (#xCAE1 . #x6355)
                (#xCAE2 . #x6B69)
                (#xCAE3 . #x752B)
                (#xCAE4 . #x88DC)
                (#xCAE5 . #x8F14)
                (#xCAE6 . #x7A42)
                (#xCAE7 . #x52DF)
                (#xCAE8 . #x5893)
                (#xCAE9 . #x6155)
                (#xCAEA . #x620A)
                (#xCAEB . #x66AE)
                (#xCAEC . #x6BCD)
                (#xCAED . #x7C3F)
                (#xCAEE . #x83E9)
                (#xCAEF . #x5023)
                (#xCAF0 . #x4FF8)
                (#xCAF1 . #x5305)
                (#xCAF2 . #x5446)
                (#xCAF3 . #x5831)
                (#xCAF4 . #x5949)
                (#xCAF5 . #x5B9D)
                (#xCAF6 . #x5CF0)
                (#xCAF7 . #x5CEF)
                (#xCAF8 . #x5D29)
                (#xCAF9 . #x5E96)
                (#xCAFA . #x62B1)
                (#xCAFB . #x6367)
                (#xCAFC . #x653E)
                (#xCAFD . #x65B9)
                (#xCAFE . #x670B)
                (#xCBA1 . #x6CD5)
                (#xCBA2 . #x6CE1)
                (#xCBA3 . #x70F9)
                (#xCBA4 . #x7832)
                (#xCBA5 . #x7E2B)
                (#xCBA6 . #x80DE)
                (#xCBA7 . #x82B3)
                (#xCBA8 . #x840C)
                (#xCBA9 . #x84EC)
                (#xCBAA . #x8702)
                (#xCBAB . #x8912)
                (#xCBAC . #x8A2A)
                (#xCBAD . #x8C4A)
                (#xCBAE . #x90A6)
                (#xCBAF . #x92D2)
                (#xCBB0 . #x98FD)
                (#xCBB1 . #x9CF3)
                (#xCBB2 . #x9D6C)
                (#xCBB3 . #x4E4F)
                (#xCBB4 . #x4EA1)
                (#xCBB5 . #x508D)
                (#xCBB6 . #x5256)
                (#xCBB7 . #x574A)
                (#xCBB8 . #x59A8)
                (#xCBB9 . #x5E3D)
                (#xCBBA . #x5FD8)
                (#xCBBB . #x5FD9)
                (#xCBBC . #x623F)
                (#xCBBD . #x66B4)
                (#xCBBE . #x671B)
                (#xCBBF . #x67D0)
                (#xCBC0 . #x68D2)
                (#xCBC1 . #x5192)
                (#xCBC2 . #x7D21)
                (#xCBC3 . #x80AA)
                (#xCBC4 . #x81A8)
                (#xCBC5 . #x8B00)
                (#xCBC6 . #x8C8C)
                (#xCBC7 . #x8CBF)
                (#xCBC8 . #x927E)
                (#xCBC9 . #x9632)
                (#xCBCA . #x5420)
                (#xCBCB . #x982C)
                (#xCBCC . #x5317)
                (#xCBCD . #x50D5)
                (#xCBCE . #x535C)
                (#xCBCF . #x58A8)
                (#xCBD0 . #x64B2)
                (#xCBD1 . #x6734)
                (#xCBD2 . #x7267)
                (#xCBD3 . #x7766)
                (#xCBD4 . #x7A46)
                (#xCBD5 . #x91E6)
                (#xCBD6 . #x52C3)
                (#xCBD7 . #x6CA1)
                (#xCBD8 . #x6B86)
                (#xCBD9 . #x5800)
                (#xCBDA . #x5E4C)
                (#xCBDB . #x5954)
                (#xCBDC . #x672C)
                (#xCBDD . #x7FFB)
                (#xCBDE . #x51E1)
                (#xCBDF . #x76C6)
                (#xCBE0 . #x6469)
                (#xCBE1 . #x78E8)
                (#xCBE2 . #x9B54)
                (#xCBE3 . #x9EBB)
                (#xCBE4 . #x57CB)
                (#xCBE5 . #x59B9)
                (#xCBE6 . #x6627)
                (#xCBE7 . #x679A)
                (#xCBE8 . #x6BCE)
                (#xCBE9 . #x54E9)
                (#xCBEA . #x69D9)
                (#xCBEB . #x5E55)
                (#xCBEC . #x819C)
                (#xCBED . #x6795)
                (#xCBEE . #x9BAA)
                (#xCBEF . #x67FE)
                (#xCBF0 . #x9C52)
                (#xCBF1 . #x685D)
                (#xCBF2 . #x4EA6)
                (#xCBF3 . #x4FE3)
                (#xCBF4 . #x53C8)
                (#xCBF5 . #x62B9)
                (#xCBF6 . #x672B)
                (#xCBF7 . #x6CAB)
                (#xCBF8 . #x8FC4)
                (#xCBF9 . #x4FAD)
                (#xCBFA . #x7E6D)
                (#xCBFB . #x9EBF)
                (#xCBFC . #x4E07)
                (#xCBFD . #x6162)
                (#xCBFE . #x6E80)
                (#xCCA1 . #x6F2B)
                (#xCCA2 . #x8513)
                (#xCCA3 . #x5473)
                (#xCCA4 . #x672A)
                (#xCCA5 . #x9B45)
                (#xCCA6 . #x5DF3)
                (#xCCA7 . #x7B95)
                (#xCCA8 . #x5CAC)
                (#xCCA9 . #x5BC6)
                (#xCCAA . #x871C)
                (#xCCAB . #x6E4A)
                (#xCCAC . #x84D1)
                (#xCCAD . #x7A14)
                (#xCCAE . #x8108)
                (#xCCAF . #x5999)
                (#xCCB0 . #x7C8D)
                (#xCCB1 . #x6C11)
                (#xCCB2 . #x7720)
                (#xCCB3 . #x52D9)
                (#xCCB4 . #x5922)
                (#xCCB5 . #x7121)
                (#xCCB6 . #x725F)
                (#xCCB7 . #x77DB)
                (#xCCB8 . #x9727)
                (#xCCB9 . #x9D61)
                (#xCCBA . #x690B)
                (#xCCBB . #x5A7F)
                (#xCCBC . #x5A18)
                (#xCCBD . #x51A5)
                (#xCCBE . #x540D)
                (#xCCBF . #x547D)
                (#xCCC0 . #x660E)
                (#xCCC1 . #x76DF)
                (#xCCC2 . #x8FF7)
                (#xCCC3 . #x9298)
                (#xCCC4 . #x9CF4)
                (#xCCC5 . #x59EA)
                (#xCCC6 . #x725D)
                (#xCCC7 . #x6EC5)
                (#xCCC8 . #x514D)
                (#xCCC9 . #x68C9)
                (#xCCCA . #x7DBF)
                (#xCCCB . #x7DEC)
                (#xCCCC . #x9762)
                (#xCCCD . #x9EBA)
                (#xCCCE . #x6478)
                (#xCCCF . #x6A21)
                (#xCCD0 . #x8302)
                (#xCCD1 . #x5984)
                (#xCCD2 . #x5B5F)
                (#xCCD3 . #x6BDB)
                (#xCCD4 . #x731B)
                (#xCCD5 . #x76F2)
                (#xCCD6 . #x7DB2)
                (#xCCD7 . #x8017)
                (#xCCD8 . #x8499)
                (#xCCD9 . #x5132)
                (#xCCDA . #x6728)
                (#xCCDB . #x9ED9)
                (#xCCDC . #x76EE)
                (#xCCDD . #x6762)
                (#xCCDE . #x52FF)
                (#xCCDF . #x9905)
                (#xCCE0 . #x5C24)
                (#xCCE1 . #x623B)
                (#xCCE2 . #x7C7E)
                (#xCCE3 . #x8CB0)
                (#xCCE4 . #x554F)
                (#xCCE5 . #x60B6)
                (#xCCE6 . #x7D0B)
                (#xCCE7 . #x9580)
                (#xCCE8 . #x5301)
                (#xCCE9 . #x4E5F)
                (#xCCEA . #x51B6)
                (#xCCEB . #x591C)
                (#xCCEC . #x723A)
                (#xCCED . #x8036)
                (#xCCEE . #x91CE)
                (#xCCEF . #x5F25)
                (#xCCF0 . #x77E2)
                (#xCCF1 . #x5384)
                (#xCCF2 . #x5F79)
                (#xCCF3 . #x7D04)
                (#xCCF4 . #x85AC)
                (#xCCF5 . #x8A33)
                (#xCCF6 . #x8E8D)
                (#xCCF7 . #x9756)
                (#xCCF8 . #x67F3)
                (#xCCF9 . #x85AE)
                (#xCCFA . #x9453)
                (#xCCFB . #x6109)
                (#xCCFC . #x6108)
                (#xCCFD . #x6CB9)
                (#xCCFE . #x7652)
                (#xCDA1 . #x8AED)
                (#xCDA2 . #x8F38)
                (#xCDA3 . #x552F)
                (#xCDA4 . #x4F51)
                (#xCDA5 . #x512A)
                (#xCDA6 . #x52C7)
                (#xCDA7 . #x53CB)
                (#xCDA8 . #x5BA5)
                (#xCDA9 . #x5E7D)
                (#xCDAA . #x60A0)
                (#xCDAB . #x6182)
                (#xCDAC . #x63D6)
                (#xCDAD . #x6709)
                (#xCDAE . #x67DA)
                (#xCDAF . #x6E67)
                (#xCDB0 . #x6D8C)
                (#xCDB1 . #x7336)
                (#xCDB2 . #x7337)
                (#xCDB3 . #x7531)
                (#xCDB4 . #x7950)
                (#xCDB5 . #x88D5)
                (#xCDB6 . #x8A98)
                (#xCDB7 . #x904A)
                (#xCDB8 . #x9091)
                (#xCDB9 . #x90F5)
                (#xCDBA . #x96C4)
                (#xCDBB . #x878D)
                (#xCDBC . #x5915)
                (#xCDBD . #x4E88)
                (#xCDBE . #x4F59)
                (#xCDBF . #x4E0E)
                (#xCDC0 . #x8A89)
                (#xCDC1 . #x8F3F)
                (#xCDC2 . #x9810)
                (#xCDC3 . #x50AD)
                (#xCDC4 . #x5E7C)
                (#xCDC5 . #x5996)
                (#xCDC6 . #x5BB9)
                (#xCDC7 . #x5EB8)
                (#xCDC8 . #x63DA)
                (#xCDC9 . #x63FA)
                (#xCDCA . #x64C1)
                (#xCDCB . #x66DC)
                (#xCDCC . #x694A)
                (#xCDCD . #x69D8)
                (#xCDCE . #x6D0B)
                (#xCDCF . #x6EB6)
                (#xCDD0 . #x7194)
                (#xCDD1 . #x7528)
                (#xCDD2 . #x7AAF)
                (#xCDD3 . #x7F8A)
                (#xCDD4 . #x8000)
                (#xCDD5 . #x8449)
                (#xCDD6 . #x84C9)
                (#xCDD7 . #x8981)
                (#xCDD8 . #x8B21)
                (#xCDD9 . #x8E0A)
                (#xCDDA . #x9065)
                (#xCDDB . #x967D)
                (#xCDDC . #x990A)
                (#xCDDD . #x617E)
                (#xCDDE . #x6291)
                (#xCDDF . #x6B32)
                (#xCDE0 . #x6C83)
                (#xCDE1 . #x6D74)
                (#xCDE2 . #x7FCC)
                (#xCDE3 . #x7FFC)
                (#xCDE4 . #x6DC0)
                (#xCDE5 . #x7F85)
                (#xCDE6 . #x87BA)
                (#xCDE7 . #x88F8)
                (#xCDE8 . #x6765)
                (#xCDE9 . #x83B1)
                (#xCDEA . #x983C)
                (#xCDEB . #x96F7)
                (#xCDEC . #x6D1B)
                (#xCDED . #x7D61)
                (#xCDEE . #x843D)
                (#xCDEF . #x916A)
                (#xCDF0 . #x4E71)
                (#xCDF1 . #x5375)
                (#xCDF2 . #x5D50)
                (#xCDF3 . #x6B04)
                (#xCDF4 . #x6FEB)
                (#xCDF5 . #x85CD)
                (#xCDF6 . #x862D)
                (#xCDF7 . #x89A7)
                (#xCDF8 . #x5229)
                (#xCDF9 . #x540F)
                (#xCDFA . #x5C65)
                (#xCDFB . #x674E)
                (#xCDFC . #x68A8)
                (#xCDFD . #x7406)
                (#xCDFE . #x7483)
                (#xCEA1 . #x75E2)
                (#xCEA2 . #x88CF)
                (#xCEA3 . #x88E1)
                (#xCEA4 . #x91CC)
                (#xCEA5 . #x96E2)
                (#xCEA6 . #x9678)
                (#xCEA7 . #x5F8B)
                (#xCEA8 . #x7387)
                (#xCEA9 . #x7ACB)
                (#xCEAA . #x844E)
                (#xCEAB . #x63A0)
                (#xCEAC . #x7565)
                (#xCEAD . #x5289)
                (#xCEAE . #x6D41)
                (#xCEAF . #x6E9C)
                (#xCEB0 . #x7409)
                (#xCEB1 . #x7559)
                (#xCEB2 . #x786B)
                (#xCEB3 . #x7C92)
                (#xCEB4 . #x9686)
                (#xCEB5 . #x7ADC)
                (#xCEB6 . #x9F8D)
                (#xCEB7 . #x4FB6)
                (#xCEB8 . #x616E)
                (#xCEB9 . #x65C5)
                (#xCEBA . #x865C)
                (#xCEBB . #x4E86)
                (#xCEBC . #x4EAE)
                (#xCEBD . #x50DA)
                (#xCEBE . #x4E21)
                (#xCEBF . #x51CC)
                (#xCEC0 . #x5BEE)
                (#xCEC1 . #x6599)
                (#xCEC2 . #x6881)
                (#xCEC3 . #x6DBC)
                (#xCEC4 . #x731F)
                (#xCEC5 . #x7642)
                (#xCEC6 . #x77AD)
                (#xCEC7 . #x7A1C)
                (#xCEC8 . #x7CE7)
                (#xCEC9 . #x826F)
                (#xCECA . #x8AD2)
                (#xCECB . #x907C)
                (#xCECC . #x91CF)
                (#xCECD . #x9675)
                (#xCECE . #x9818)
                (#xCECF . #x529B)
                (#xCED0 . #x7DD1)
                (#xCED1 . #x502B)
                (#xCED2 . #x5398)
                (#xCED3 . #x6797)
                (#xCED4 . #x6DCB)
                (#xCED5 . #x71D0)
                (#xCED6 . #x7433)
                (#xCED7 . #x81E8)
                (#xCED8 . #x8F2A)
                (#xCED9 . #x96A3)
                (#xCEDA . #x9C57)
                (#xCEDB . #x9E9F)
                (#xCEDC . #x7460)
                (#xCEDD . #x5841)
                (#xCEDE . #x6D99)
                (#xCEDF . #x7D2F)
                (#xCEE0 . #x985E)
                (#xCEE1 . #x4EE4)
                (#xCEE2 . #x4F36)
                (#xCEE3 . #x4F8B)
                (#xCEE4 . #x51B7)
                (#xCEE5 . #x52B1)
                (#xCEE6 . #x5DBA)
                (#xCEE7 . #x601C)
                (#xCEE8 . #x73B2)
                (#xCEE9 . #x793C)
                (#xCEEA . #x82D3)
                (#xCEEB . #x9234)
                (#xCEEC . #x96B7)
                (#xCEED . #x96F6)
                (#xCEEE . #x970A)
                (#xCEEF . #x9E97)
                (#xCEF0 . #x9F62)
                (#xCEF1 . #x66A6)
                (#xCEF2 . #x6B74)
                (#xCEF3 . #x5217)
                (#xCEF4 . #x52A3)
                (#xCEF5 . #x70C8)
                (#xCEF6 . #x88C2)
                (#xCEF7 . #x5EC9)
                (#xCEF8 . #x604B)
                (#xCEF9 . #x6190)
                (#xCEFA . #x6F23)
                (#xCEFB . #x7149)
                (#xCEFC . #x7C3E)
                (#xCEFD . #x7DF4)
                (#xCEFE . #x806F)
                (#xCFA1 . #x84EE)
                (#xCFA2 . #x9023)
                (#xCFA3 . #x932C)
                (#xCFA4 . #x5442)
                (#xCFA5 . #x9B6F)
                (#xCFA6 . #x6AD3)
                (#xCFA7 . #x7089)
                (#xCFA8 . #x8CC2)
                (#xCFA9 . #x8DEF)
                (#xCFAA . #x9732)
                (#xCFAB . #x52B4)
                (#xCFAC . #x5A41)
                (#xCFAD . #x5ECA)
                (#xCFAE . #x5F04)
                (#xCFAF . #x6717)
                (#xCFB0 . #x697C)
                (#xCFB1 . #x6994)
                (#xCFB2 . #x6D6A)
                (#xCFB3 . #x6F0F)
                (#xCFB4 . #x7262)
                (#xCFB5 . #x72FC)
                (#xCFB6 . #x7BED)
                (#xCFB7 . #x8001)
                (#xCFB8 . #x807E)
                (#xCFB9 . #x874B)
                (#xCFBA . #x90CE)
                (#xCFBB . #x516D)
                (#xCFBC . #x9E93)
                (#xCFBD . #x7984)
                (#xCFBE . #x808B)
                (#xCFBF . #x9332)
                (#xCFC0 . #x8AD6)
                (#xCFC1 . #x502D)
                (#xCFC2 . #x548C)
                (#xCFC3 . #x8A71)
                (#xCFC4 . #x6B6A)
                (#xCFC5 . #x8CC4)
                (#xCFC6 . #x8107)
                (#xCFC7 . #x60D1)
                (#xCFC8 . #x67A0)
                (#xCFC9 . #x9DF2)
                (#xCFCA . #x4E99)
                (#xCFCB . #x4E98)
                (#xCFCC . #x9C10)
                (#xCFCD . #x8A6B)
                (#xCFCE . #x85C1)
                (#xCFCF . #x8568)
                (#xCFD0 . #x6900)
                (#xCFD1 . #x6E7E)
                (#xCFD2 . #x7897)
                (#xCFD3 . #x8155)
                (#xD0A1 . #x5F0C)
                (#xD0A2 . #x4E10)
                (#xD0A3 . #x4E15)
                (#xD0A4 . #x4E2A)
                (#xD0A5 . #x4E31)
                (#xD0A6 . #x4E36)
                (#xD0A7 . #x4E3C)
                (#xD0A8 . #x4E3F)
                (#xD0A9 . #x4E42)
                (#xD0AA . #x4E56)
                (#xD0AB . #x4E58)
                (#xD0AC . #x4E82)
                (#xD0AD . #x4E85)
                (#xD0AE . #x8C6B)
                (#xD0AF . #x4E8A)
                (#xD0B0 . #x8212)
                (#xD0B1 . #x5F0D)
                (#xD0B2 . #x4E8E)
                (#xD0B3 . #x4E9E)
                (#xD0B4 . #x4E9F)
                (#xD0B5 . #x4EA0)
                (#xD0B6 . #x4EA2)
                (#xD0B7 . #x4EB0)
                (#xD0B8 . #x4EB3)
                (#xD0B9 . #x4EB6)
                (#xD0BA . #x4ECE)
                (#xD0BB . #x4ECD)
                (#xD0BC . #x4EC4)
                (#xD0BD . #x4EC6)
                (#xD0BE . #x4EC2)
                (#xD0BF . #x4ED7)
                (#xD0C0 . #x4EDE)
                (#xD0C1 . #x4EED)
                (#xD0C2 . #x4EDF)
                (#xD0C3 . #x4EF7)
                (#xD0C4 . #x4F09)
                (#xD0C5 . #x4F5A)
                (#xD0C6 . #x4F30)
                (#xD0C7 . #x4F5B)
                (#xD0C8 . #x4F5D)
                (#xD0C9 . #x4F57)
                (#xD0CA . #x4F47)
                (#xD0CB . #x4F76)
                (#xD0CC . #x4F88)
                (#xD0CD . #x4F8F)
                (#xD0CE . #x4F98)
                (#xD0CF . #x4F7B)
                (#xD0D0 . #x4F69)
                (#xD0D1 . #x4F70)
                (#xD0D2 . #x4F91)
                (#xD0D3 . #x4F6F)
                (#xD0D4 . #x4F86)
                (#xD0D5 . #x4F96)
                (#xD0D6 . #x5118)
                (#xD0D7 . #x4FD4)
                (#xD0D8 . #x4FDF)
                (#xD0D9 . #x4FCE)
                (#xD0DA . #x4FD8)
                (#xD0DB . #x4FDB)
                (#xD0DC . #x4FD1)
                (#xD0DD . #x4FDA)
                (#xD0DE . #x4FD0)
                (#xD0DF . #x4FE4)
                (#xD0E0 . #x4FE5)
                (#xD0E1 . #x501A)
                (#xD0E2 . #x5028)
                (#xD0E3 . #x5014)
                (#xD0E4 . #x502A)
                (#xD0E5 . #x5025)
                (#xD0E6 . #x5005)
                (#xD0E7 . #x4F1C)
                (#xD0E8 . #x4FF6)
                (#xD0E9 . #x5021)
                (#xD0EA . #x5029)
                (#xD0EB . #x502C)
                (#xD0EC . #x4FFE)
                (#xD0ED . #x4FEF)
                (#xD0EE . #x5011)
                (#xD0EF . #x5006)
                (#xD0F0 . #x5043)
                (#xD0F1 . #x5047)
                (#xD0F2 . #x6703)
                (#xD0F3 . #x5055)
                (#xD0F4 . #x5050)
                (#xD0F5 . #x5048)
                (#xD0F6 . #x505A)
                (#xD0F7 . #x5056)
                (#xD0F8 . #x506C)
                (#xD0F9 . #x5078)
                (#xD0FA . #x5080)
                (#xD0FB . #x509A)
                (#xD0FC . #x5085)
                (#xD0FD . #x50B4)
                (#xD0FE . #x50B2)
                (#xD1A1 . #x50C9)
                (#xD1A2 . #x50CA)
                (#xD1A3 . #x50B3)
                (#xD1A4 . #x50C2)
                (#xD1A5 . #x50D6)
                (#xD1A6 . #x50DE)
                (#xD1A7 . #x50E5)
                (#xD1A8 . #x50ED)
                (#xD1A9 . #x50E3)
                (#xD1AA . #x50EE)
                (#xD1AB . #x50F9)
                (#xD1AC . #x50F5)
                (#xD1AD . #x5109)
                (#xD1AE . #x5101)
                (#xD1AF . #x5102)
                (#xD1B0 . #x5116)
                (#xD1B1 . #x5115)
                (#xD1B2 . #x5114)
                (#xD1B3 . #x511A)
                (#xD1B4 . #x5121)
                (#xD1B5 . #x513A)
                (#xD1B6 . #x5137)
                (#xD1B7 . #x513C)
                (#xD1B8 . #x513B)
                (#xD1B9 . #x513F)
                (#xD1BA . #x5140)
                (#xD1BB . #x5152)
                (#xD1BC . #x514C)
                (#xD1BD . #x5154)
                (#xD1BE . #x5162)
                (#xD1BF . #x7AF8)
                (#xD1C0 . #x5169)
                (#xD1C1 . #x516A)
                (#xD1C2 . #x516E)
                (#xD1C3 . #x5180)
                (#xD1C4 . #x5182)
                (#xD1C5 . #x56D8)
                (#xD1C6 . #x518C)
                (#xD1C7 . #x5189)
                (#xD1C8 . #x518F)
                (#xD1C9 . #x5191)
                (#xD1CA . #x5193)
                (#xD1CB . #x5195)
                (#xD1CC . #x5196)
                (#xD1CD . #x51A4)
                (#xD1CE . #x51A6)
                (#xD1CF . #x51A2)
                (#xD1D0 . #x51A9)
                (#xD1D1 . #x51AA)
                (#xD1D2 . #x51AB)
                (#xD1D3 . #x51B3)
                (#xD1D4 . #x51B1)
                (#xD1D5 . #x51B2)
                (#xD1D6 . #x51B0)
                (#xD1D7 . #x51B5)
                (#xD1D8 . #x51BD)
                (#xD1D9 . #x51C5)
                (#xD1DA . #x51C9)
                (#xD1DB . #x51DB)
                (#xD1DC . #x51E0)
                (#xD1DD . #x8655)
                (#xD1DE . #x51E9)
                (#xD1DF . #x51ED)
                (#xD1E0 . #x51F0)
                (#xD1E1 . #x51F5)
                (#xD1E2 . #x51FE)
                (#xD1E3 . #x5204)
                (#xD1E4 . #x520B)
                (#xD1E5 . #x5214)
                (#xD1E6 . #x520E)
                (#xD1E7 . #x5227)
                (#xD1E8 . #x522A)
                (#xD1E9 . #x522E)
                (#xD1EA . #x5233)
                (#xD1EB . #x5239)
                (#xD1EC . #x524F)
                (#xD1ED . #x5244)
                (#xD1EE . #x524B)
                (#xD1EF . #x524C)
                (#xD1F0 . #x525E)
                (#xD1F1 . #x5254)
                (#xD1F2 . #x526A)
                (#xD1F3 . #x5274)
                (#xD1F4 . #x5269)
                (#xD1F5 . #x5273)
                (#xD1F6 . #x527F)
                (#xD1F7 . #x527D)
                (#xD1F8 . #x528D)
                (#xD1F9 . #x5294)
                (#xD1FA . #x5292)
                (#xD1FB . #x5271)
                (#xD1FC . #x5288)
                (#xD1FD . #x5291)
                (#xD1FE . #x8FA8)
                (#xD2A1 . #x8FA7)
                (#xD2A2 . #x52AC)
                (#xD2A3 . #x52AD)
                (#xD2A4 . #x52BC)
                (#xD2A5 . #x52B5)
                (#xD2A6 . #x52C1)
                (#xD2A7 . #x52CD)
                (#xD2A8 . #x52D7)
                (#xD2A9 . #x52DE)
                (#xD2AA . #x52E3)
                (#xD2AB . #x52E6)
                (#xD2AC . #x98ED)
                (#xD2AD . #x52E0)
                (#xD2AE . #x52F3)
                (#xD2AF . #x52F5)
                (#xD2B0 . #x52F8)
                (#xD2B1 . #x52F9)
                (#xD2B2 . #x5306)
                (#xD2B3 . #x5308)
                (#xD2B4 . #x7538)
                (#xD2B5 . #x530D)
                (#xD2B6 . #x5310)
                (#xD2B7 . #x530F)
                (#xD2B8 . #x5315)
                (#xD2B9 . #x531A)
                (#xD2BA . #x5323)
                (#xD2BB . #x532F)
                (#xD2BC . #x5331)
                (#xD2BD . #x5333)
                (#xD2BE . #x5338)
                (#xD2BF . #x5340)
                (#xD2C0 . #x5346)
                (#xD2C1 . #x5345)
                (#xD2C2 . #x4E17)
                (#xD2C3 . #x5349)
                (#xD2C4 . #x534D)
                (#xD2C5 . #x51D6)
                (#xD2C6 . #x535E)
                (#xD2C7 . #x5369)
                (#xD2C8 . #x536E)
                (#xD2C9 . #x5918)
                (#xD2CA . #x537B)
                (#xD2CB . #x5377)
                (#xD2CC . #x5382)
                (#xD2CD . #x5396)
                (#xD2CE . #x53A0)
                (#xD2CF . #x53A6)
                (#xD2D0 . #x53A5)
                (#xD2D1 . #x53AE)
                (#xD2D2 . #x53B0)
                (#xD2D3 . #x53B6)
                (#xD2D4 . #x53C3)
                (#xD2D5 . #x7C12)
                (#xD2D6 . #x96D9)
                (#xD2D7 . #x53DF)
                (#xD2D8 . #x66FC)
                (#xD2D9 . #x71EE)
                (#xD2DA . #x53EE)
                (#xD2DB . #x53E8)
                (#xD2DC . #x53ED)
                (#xD2DD . #x53FA)
                (#xD2DE . #x5401)
                (#xD2DF . #x543D)
                (#xD2E0 . #x5440)
                (#xD2E1 . #x542C)
                (#xD2E2 . #x542D)
                (#xD2E3 . #x543C)
                (#xD2E4 . #x542E)
                (#xD2E5 . #x5436)
                (#xD2E6 . #x5429)
                (#xD2E7 . #x541D)
                (#xD2E8 . #x544E)
                (#xD2E9 . #x548F)
                (#xD2EA . #x5475)
                (#xD2EB . #x548E)
                (#xD2EC . #x545F)
                (#xD2ED . #x5471)
                (#xD2EE . #x5477)
                (#xD2EF . #x5470)
                (#xD2F0 . #x5492)
                (#xD2F1 . #x547B)
                (#xD2F2 . #x5480)
                (#xD2F3 . #x5476)
                (#xD2F4 . #x5484)
                (#xD2F5 . #x5490)
                (#xD2F6 . #x5486)
                (#xD2F7 . #x54C7)
                (#xD2F8 . #x54A2)
                (#xD2F9 . #x54B8)
                (#xD2FA . #x54A5)
                (#xD2FB . #x54AC)
                (#xD2FC . #x54C4)
                (#xD2FD . #x54C8)
                (#xD2FE . #x54A8)
                (#xD3A1 . #x54AB)
                (#xD3A2 . #x54C2)
                (#xD3A3 . #x54A4)
                (#xD3A4 . #x54BE)
                (#xD3A5 . #x54BC)
                (#xD3A6 . #x54D8)
                (#xD3A7 . #x54E5)
                (#xD3A8 . #x54E6)
                (#xD3A9 . #x550F)
                (#xD3AA . #x5514)
                (#xD3AB . #x54FD)
                (#xD3AC . #x54EE)
                (#xD3AD . #x54ED)
                (#xD3AE . #x54FA)
                (#xD3AF . #x54E2)
                (#xD3B0 . #x5539)
                (#xD3B1 . #x5540)
                (#xD3B2 . #x5563)
                (#xD3B3 . #x554C)
                (#xD3B4 . #x552E)
                (#xD3B5 . #x555C)
                (#xD3B6 . #x5545)
                (#xD3B7 . #x5556)
                (#xD3B8 . #x5557)
                (#xD3B9 . #x5538)
                (#xD3BA . #x5533)
                (#xD3BB . #x555D)
                (#xD3BC . #x5599)
                (#xD3BD . #x5580)
                (#xD3BE . #x54AF)
                (#xD3BF . #x558A)
                (#xD3C0 . #x559F)
                (#xD3C1 . #x557B)
                (#xD3C2 . #x557E)
                (#xD3C3 . #x5598)
                (#xD3C4 . #x559E)
                (#xD3C5 . #x55AE)
                (#xD3C6 . #x557C)
                (#xD3C7 . #x5583)
                (#xD3C8 . #x55A9)
                (#xD3C9 . #x5587)
                (#xD3CA . #x55A8)
                (#xD3CB . #x55DA)
                (#xD3CC . #x55C5)
                (#xD3CD . #x55DF)
                (#xD3CE . #x55C4)
                (#xD3CF . #x55DC)
                (#xD3D0 . #x55E4)
                (#xD3D1 . #x55D4)
                (#xD3D2 . #x5614)
                (#xD3D3 . #x55F7)
                (#xD3D4 . #x5616)
                (#xD3D5 . #x55FE)
                (#xD3D6 . #x55FD)
                (#xD3D7 . #x561B)
                (#xD3D8 . #x55F9)
                (#xD3D9 . #x564E)
                (#xD3DA . #x5650)
                (#xD3DB . #x71DF)
                (#xD3DC . #x5634)
                (#xD3DD . #x5636)
                (#xD3DE . #x5632)
                (#xD3DF . #x5638)
                (#xD3E0 . #x566B)
                (#xD3E1 . #x5664)
                (#xD3E2 . #x562F)
                (#xD3E3 . #x566C)
                (#xD3E4 . #x566A)
                (#xD3E5 . #x5686)
                (#xD3E6 . #x5680)
                (#xD3E7 . #x568A)
                (#xD3E8 . #x56A0)
                (#xD3E9 . #x5694)
                (#xD3EA . #x568F)
                (#xD3EB . #x56A5)
                (#xD3EC . #x56AE)
                (#xD3ED . #x56B6)
                (#xD3EE . #x56B4)
                (#xD3EF . #x56C2)
                (#xD3F0 . #x56BC)
                (#xD3F1 . #x56C1)
                (#xD3F2 . #x56C3)
                (#xD3F3 . #x56C0)
                (#xD3F4 . #x56C8)
                (#xD3F5 . #x56CE)
                (#xD3F6 . #x56D1)
                (#xD3F7 . #x56D3)
                (#xD3F8 . #x56D7)
                (#xD3F9 . #x56EE)
                (#xD3FA . #x56F9)
                (#xD3FB . #x5700)
                (#xD3FC . #x56FF)
                (#xD3FD . #x5704)
                (#xD3FE . #x5709)
                (#xD4A1 . #x5708)
                (#xD4A2 . #x570B)
                (#xD4A3 . #x570D)
                (#xD4A4 . #x5713)
                (#xD4A5 . #x5718)
                (#xD4A6 . #x5716)
                (#xD4A7 . #x55C7)
                (#xD4A8 . #x571C)
                (#xD4A9 . #x5726)
                (#xD4AA . #x5737)
                (#xD4AB . #x5738)
                (#xD4AC . #x574E)
                (#xD4AD . #x573B)
                (#xD4AE . #x5740)
                (#xD4AF . #x574F)
                (#xD4B0 . #x5769)
                (#xD4B1 . #x57C0)
                (#xD4B2 . #x5788)
                (#xD4B3 . #x5761)
                (#xD4B4 . #x577F)
                (#xD4B5 . #x5789)
                (#xD4B6 . #x5793)
                (#xD4B7 . #x57A0)
                (#xD4B8 . #x57B3)
                (#xD4B9 . #x57A4)
                (#xD4BA . #x57AA)
                (#xD4BB . #x57B0)
                (#xD4BC . #x57C3)
                (#xD4BD . #x57C6)
                (#xD4BE . #x57D4)
                (#xD4BF . #x57D2)
                (#xD4C0 . #x57D3)
                (#xD4C1 . #x580A)
                (#xD4C2 . #x57D6)
                (#xD4C3 . #x57E3)
                (#xD4C4 . #x580B)
                (#xD4C5 . #x5819)
                (#xD4C6 . #x581D)
                (#xD4C7 . #x5872)
                (#xD4C8 . #x5821)
                (#xD4C9 . #x5862)
                (#xD4CA . #x584B)
                (#xD4CB . #x5870)
                (#xD4CC . #x6BC0)
                (#xD4CD . #x5852)
                (#xD4CE . #x583D)
                (#xD4CF . #x5879)
                (#xD4D0 . #x5885)
                (#xD4D1 . #x58B9)
                (#xD4D2 . #x589F)
                (#xD4D3 . #x58AB)
                (#xD4D4 . #x58BA)
                (#xD4D5 . #x58DE)
                (#xD4D6 . #x58BB)
                (#xD4D7 . #x58B8)
                (#xD4D8 . #x58AE)
                (#xD4D9 . #x58C5)
                (#xD4DA . #x58D3)
                (#xD4DB . #x58D1)
                (#xD4DC . #x58D7)
                (#xD4DD . #x58D9)
                (#xD4DE . #x58D8)
                (#xD4DF . #x58E5)
                (#xD4E0 . #x58DC)
                (#xD4E1 . #x58E4)
                (#xD4E2 . #x58DF)
                (#xD4E3 . #x58EF)
                (#xD4E4 . #x58FA)
                (#xD4E5 . #x58F9)
                (#xD4E6 . #x58FB)
                (#xD4E7 . #x58FC)
                (#xD4E8 . #x58FD)
                (#xD4E9 . #x5902)
                (#xD4EA . #x590A)
                (#xD4EB . #x5910)
                (#xD4EC . #x591B)
                (#xD4ED . #x68A6)
                (#xD4EE . #x5925)
                (#xD4EF . #x592C)
                (#xD4F0 . #x592D)
                (#xD4F1 . #x5932)
                (#xD4F2 . #x5938)
                (#xD4F3 . #x593E)
                (#xD4F4 . #x7AD2)
                (#xD4F5 . #x5955)
                (#xD4F6 . #x5950)
                (#xD4F7 . #x594E)
                (#xD4F8 . #x595A)
                (#xD4F9 . #x5958)
                (#xD4FA . #x5962)
                (#xD4FB . #x5960)
                (#xD4FC . #x5967)
                (#xD4FD . #x596C)
                (#xD4FE . #x5969)
                (#xD5A1 . #x5978)
                (#xD5A2 . #x5981)
                (#xD5A3 . #x599D)
                (#xD5A4 . #x4F5E)
                (#xD5A5 . #x4FAB)
                (#xD5A6 . #x59A3)
                (#xD5A7 . #x59B2)
                (#xD5A8 . #x59C6)
                (#xD5A9 . #x59E8)
                (#xD5AA . #x59DC)
                (#xD5AB . #x598D)
                (#xD5AC . #x59D9)
                (#xD5AD . #x59DA)
                (#xD5AE . #x5A25)
                (#xD5AF . #x5A1F)
                (#xD5B0 . #x5A11)
                (#xD5B1 . #x5A1C)
                (#xD5B2 . #x5A09)
                (#xD5B3 . #x5A1A)
                (#xD5B4 . #x5A40)
                (#xD5B5 . #x5A6C)
                (#xD5B6 . #x5A49)
                (#xD5B7 . #x5A35)
                (#xD5B8 . #x5A36)
                (#xD5B9 . #x5A62)
                (#xD5BA . #x5A6A)
                (#xD5BB . #x5A9A)
                (#xD5BC . #x5ABC)
                (#xD5BD . #x5ABE)
                (#xD5BE . #x5ACB)
                (#xD5BF . #x5AC2)
                (#xD5C0 . #x5ABD)
                (#xD5C1 . #x5AE3)
                (#xD5C2 . #x5AD7)
                (#xD5C3 . #x5AE6)
                (#xD5C4 . #x5AE9)
                (#xD5C5 . #x5AD6)
                (#xD5C6 . #x5AFA)
                (#xD5C7 . #x5AFB)
                (#xD5C8 . #x5B0C)
                (#xD5C9 . #x5B0B)
                (#xD5CA . #x5B16)
                (#xD5CB . #x5B32)
                (#xD5CC . #x5AD0)
                (#xD5CD . #x5B2A)
                (#xD5CE . #x5B36)
                (#xD5CF . #x5B3E)
                (#xD5D0 . #x5B43)
                (#xD5D1 . #x5B45)
                (#xD5D2 . #x5B40)
                (#xD5D3 . #x5B51)
                (#xD5D4 . #x5B55)
                (#xD5D5 . #x5B5A)
                (#xD5D6 . #x5B5B)
                (#xD5D7 . #x5B65)
                (#xD5D8 . #x5B69)
                (#xD5D9 . #x5B70)
                (#xD5DA . #x5B73)
                (#xD5DB . #x5B75)
                (#xD5DC . #x5B78)
                (#xD5DD . #x6588)
                (#xD5DE . #x5B7A)
                (#xD5DF . #x5B80)
                (#xD5E0 . #x5B83)
                (#xD5E1 . #x5BA6)
                (#xD5E2 . #x5BB8)
                (#xD5E3 . #x5BC3)
                (#xD5E4 . #x5BC7)
                (#xD5E5 . #x5BC9)
                (#xD5E6 . #x5BD4)
                (#xD5E7 . #x5BD0)
                (#xD5E8 . #x5BE4)
                (#xD5E9 . #x5BE6)
                (#xD5EA . #x5BE2)
                (#xD5EB . #x5BDE)
                (#xD5EC . #x5BE5)
                (#xD5ED . #x5BEB)
                (#xD5EE . #x5BF0)
                (#xD5EF . #x5BF6)
                (#xD5F0 . #x5BF3)
                (#xD5F1 . #x5C05)
                (#xD5F2 . #x5C07)
                (#xD5F3 . #x5C08)
                (#xD5F4 . #x5C0D)
                (#xD5F5 . #x5C13)
                (#xD5F6 . #x5C20)
                (#xD5F7 . #x5C22)
                (#xD5F8 . #x5C28)
                (#xD5F9 . #x5C38)
                (#xD5FA . #x5C39)
                (#xD5FB . #x5C41)
                (#xD5FC . #x5C46)
                (#xD5FD . #x5C4E)
                (#xD5FE . #x5C53)
                (#xD6A1 . #x5C50)
                (#xD6A2 . #x5C4F)
                (#xD6A3 . #x5B71)
                (#xD6A4 . #x5C6C)
                (#xD6A5 . #x5C6E)
                (#xD6A6 . #x4E62)
                (#xD6A7 . #x5C76)
                (#xD6A8 . #x5C79)
                (#xD6A9 . #x5C8C)
                (#xD6AA . #x5C91)
                (#xD6AB . #x5C94)
                (#xD6AC . #x599B)
                (#xD6AD . #x5CAB)
                (#xD6AE . #x5CBB)
                (#xD6AF . #x5CB6)
                (#xD6B0 . #x5CBC)
                (#xD6B1 . #x5CB7)
                (#xD6B2 . #x5CC5)
                (#xD6B3 . #x5CBE)
                (#xD6B4 . #x5CC7)
                (#xD6B5 . #x5CD9)
                (#xD6B6 . #x5CE9)
                (#xD6B7 . #x5CFD)
                (#xD6B8 . #x5CFA)
                (#xD6B9 . #x5CED)
                (#xD6BA . #x5D8C)
                (#xD6BB . #x5CEA)
                (#xD6BC . #x5D0B)
                (#xD6BD . #x5D15)
                (#xD6BE . #x5D17)
                (#xD6BF . #x5D5C)
                (#xD6C0 . #x5D1F)
                (#xD6C1 . #x5D1B)
                (#xD6C2 . #x5D11)
                (#xD6C3 . #x5D14)
                (#xD6C4 . #x5D22)
                (#xD6C5 . #x5D1A)
                (#xD6C6 . #x5D19)
                (#xD6C7 . #x5D18)
                (#xD6C8 . #x5D4C)
                (#xD6C9 . #x5D52)
                (#xD6CA . #x5D4E)
                (#xD6CB . #x5D4B)
                (#xD6CC . #x5D6C)
                (#xD6CD . #x5D73)
                (#xD6CE . #x5D76)
                (#xD6CF . #x5D87)
                (#xD6D0 . #x5D84)
                (#xD6D1 . #x5D82)
                (#xD6D2 . #x5DA2)
                (#xD6D3 . #x5D9D)
                (#xD6D4 . #x5DAC)
                (#xD6D5 . #x5DAE)
                (#xD6D6 . #x5DBD)
                (#xD6D7 . #x5D90)
                (#xD6D8 . #x5DB7)
                (#xD6D9 . #x5DBC)
                (#xD6DA . #x5DC9)
                (#xD6DB . #x5DCD)
                (#xD6DC . #x5DD3)
                (#xD6DD . #x5DD2)
                (#xD6DE . #x5DD6)
                (#xD6DF . #x5DDB)
                (#xD6E0 . #x5DEB)
                (#xD6E1 . #x5DF2)
                (#xD6E2 . #x5DF5)
                (#xD6E3 . #x5E0B)
                (#xD6E4 . #x5E1A)
                (#xD6E5 . #x5E19)
                (#xD6E6 . #x5E11)
                (#xD6E7 . #x5E1B)
                (#xD6E8 . #x5E36)
                (#xD6E9 . #x5E37)
                (#xD6EA . #x5E44)
                (#xD6EB . #x5E43)
                (#xD6EC . #x5E40)
                (#xD6ED . #x5E4E)
                (#xD6EE . #x5E57)
                (#xD6EF . #x5E54)
                (#xD6F0 . #x5E5F)
                (#xD6F1 . #x5E62)
                (#xD6F2 . #x5E64)
                (#xD6F3 . #x5E47)
                (#xD6F4 . #x5E75)
                (#xD6F5 . #x5E76)
                (#xD6F6 . #x5E7A)
                (#xD6F7 . #x9EBC)
                (#xD6F8 . #x5E7F)
                (#xD6F9 . #x5EA0)
                (#xD6FA . #x5EC1)
                (#xD6FB . #x5EC2)
                (#xD6FC . #x5EC8)
                (#xD6FD . #x5ED0)
                (#xD6FE . #x5ECF)
                (#xD7A1 . #x5ED6)
                (#xD7A2 . #x5EE3)
                (#xD7A3 . #x5EDD)
                (#xD7A4 . #x5EDA)
                (#xD7A5 . #x5EDB)
                (#xD7A6 . #x5EE2)
                (#xD7A7 . #x5EE1)
                (#xD7A8 . #x5EE8)
                (#xD7A9 . #x5EE9)
                (#xD7AA . #x5EEC)
                (#xD7AB . #x5EF1)
                (#xD7AC . #x5EF3)
                (#xD7AD . #x5EF0)
                (#xD7AE . #x5EF4)
                (#xD7AF . #x5EF8)
                (#xD7B0 . #x5EFE)
                (#xD7B1 . #x5F03)
                (#xD7B2 . #x5F09)
                (#xD7B3 . #x5F5D)
                (#xD7B4 . #x5F5C)
                (#xD7B5 . #x5F0B)
                (#xD7B6 . #x5F11)
                (#xD7B7 . #x5F16)
                (#xD7B8 . #x5F29)
                (#xD7B9 . #x5F2D)
                (#xD7BA . #x5F38)
                (#xD7BB . #x5F41)
                (#xD7BC . #x5F48)
                (#xD7BD . #x5F4C)
                (#xD7BE . #x5F4E)
                (#xD7BF . #x5F2F)
                (#xD7C0 . #x5F51)
                (#xD7C1 . #x5F56)
                (#xD7C2 . #x5F57)
                (#xD7C3 . #x5F59)
                (#xD7C4 . #x5F61)
                (#xD7C5 . #x5F6D)
                (#xD7C6 . #x5F73)
                (#xD7C7 . #x5F77)
                (#xD7C8 . #x5F83)
                (#xD7C9 . #x5F82)
                (#xD7CA . #x5F7F)
                (#xD7CB . #x5F8A)
                (#xD7CC . #x5F88)
                (#xD7CD . #x5F91)
                (#xD7CE . #x5F87)
                (#xD7CF . #x5F9E)
                (#xD7D0 . #x5F99)
                (#xD7D1 . #x5F98)
                (#xD7D2 . #x5FA0)
                (#xD7D3 . #x5FA8)
                (#xD7D4 . #x5FAD)
                (#xD7D5 . #x5FBC)
                (#xD7D6 . #x5FD6)
                (#xD7D7 . #x5FFB)
                (#xD7D8 . #x5FE4)
                (#xD7D9 . #x5FF8)
                (#xD7DA . #x5FF1)
                (#xD7DB . #x5FDD)
                (#xD7DC . #x60B3)
                (#xD7DD . #x5FFF)
                (#xD7DE . #x6021)
                (#xD7DF . #x6060)
                (#xD7E0 . #x6019)
                (#xD7E1 . #x6010)
                (#xD7E2 . #x6029)
                (#xD7E3 . #x600E)
                (#xD7E4 . #x6031)
                (#xD7E5 . #x601B)
                (#xD7E6 . #x6015)
                (#xD7E7 . #x602B)
                (#xD7E8 . #x6026)
                (#xD7E9 . #x600F)
                (#xD7EA . #x603A)
                (#xD7EB . #x605A)
                (#xD7EC . #x6041)
                (#xD7ED . #x606A)
                (#xD7EE . #x6077)
                (#xD7EF . #x605F)
                (#xD7F0 . #x604A)
                (#xD7F1 . #x6046)
                (#xD7F2 . #x604D)
                (#xD7F3 . #x6063)
                (#xD7F4 . #x6043)
                (#xD7F5 . #x6064)
                (#xD7F6 . #x6042)
                (#xD7F7 . #x606C)
                (#xD7F8 . #x606B)
                (#xD7F9 . #x6059)
                (#xD7FA . #x6081)
                (#xD7FB . #x608D)
                (#xD7FC . #x60E7)
                (#xD7FD . #x6083)
                (#xD7FE . #x609A)
                (#xD8A1 . #x6084)
                (#xD8A2 . #x609B)
                (#xD8A3 . #x6096)
                (#xD8A4 . #x6097)
                (#xD8A5 . #x6092)
                (#xD8A6 . #x60A7)
                (#xD8A7 . #x608B)
                (#xD8A8 . #x60E1)
                (#xD8A9 . #x60B8)
                (#xD8AA . #x60E0)
                (#xD8AB . #x60D3)
                (#xD8AC . #x60B4)
                (#xD8AD . #x5FF0)
                (#xD8AE . #x60BD)
                (#xD8AF . #x60C6)
                (#xD8B0 . #x60B5)
                (#xD8B1 . #x60D8)
                (#xD8B2 . #x614D)
                (#xD8B3 . #x6115)
                (#xD8B4 . #x6106)
                (#xD8B5 . #x60F6)
                (#xD8B6 . #x60F7)
                (#xD8B7 . #x6100)
                (#xD8B8 . #x60F4)
                (#xD8B9 . #x60FA)
                (#xD8BA . #x6103)
                (#xD8BB . #x6121)
                (#xD8BC . #x60FB)
                (#xD8BD . #x60F1)
                (#xD8BE . #x610D)
                (#xD8BF . #x610E)
                (#xD8C0 . #x6147)
                (#xD8C1 . #x613E)
                (#xD8C2 . #x6128)
                (#xD8C3 . #x6127)
                (#xD8C4 . #x614A)
                (#xD8C5 . #x613F)
                (#xD8C6 . #x613C)
                (#xD8C7 . #x612C)
                (#xD8C8 . #x6134)
                (#xD8C9 . #x613D)
                (#xD8CA . #x6142)
                (#xD8CB . #x6144)
                (#xD8CC . #x6173)
                (#xD8CD . #x6177)
                (#xD8CE . #x6158)
                (#xD8CF . #x6159)
                (#xD8D0 . #x615A)
                (#xD8D1 . #x616B)
                (#xD8D2 . #x6174)
                (#xD8D3 . #x616F)
                (#xD8D4 . #x6165)
                (#xD8D5 . #x6171)
                (#xD8D6 . #x615F)
                (#xD8D7 . #x615D)
                (#xD8D8 . #x6153)
                (#xD8D9 . #x6175)
                (#xD8DA . #x6199)
                (#xD8DB . #x6196)
                (#xD8DC . #x6187)
                (#xD8DD . #x61AC)
                (#xD8DE . #x6194)
                (#xD8DF . #x619A)
                (#xD8E0 . #x618A)
                (#xD8E1 . #x6191)
                (#xD8E2 . #x61AB)
                (#xD8E3 . #x61AE)
                (#xD8E4 . #x61CC)
                (#xD8E5 . #x61CA)
                (#xD8E6 . #x61C9)
                (#xD8E7 . #x61F7)
                (#xD8E8 . #x61C8)
                (#xD8E9 . #x61C3)
                (#xD8EA . #x61C6)
                (#xD8EB . #x61BA)
                (#xD8EC . #x61CB)
                (#xD8ED . #x7F79)
                (#xD8EE . #x61CD)
                (#xD8EF . #x61E6)
                (#xD8F0 . #x61E3)
                (#xD8F1 . #x61F6)
                (#xD8F2 . #x61FA)
                (#xD8F3 . #x61F4)
                (#xD8F4 . #x61FF)
                (#xD8F5 . #x61FD)
                (#xD8F6 . #x61FC)
                (#xD8F7 . #x61FE)
                (#xD8F8 . #x6200)
                (#xD8F9 . #x6208)
                (#xD8FA . #x6209)
                (#xD8FB . #x620D)
                (#xD8FC . #x620C)
                (#xD8FD . #x6214)
                (#xD8FE . #x621B)
                (#xD9A1 . #x621E)
                (#xD9A2 . #x6221)
                (#xD9A3 . #x622A)
                (#xD9A4 . #x622E)
                (#xD9A5 . #x6230)
                (#xD9A6 . #x6232)
                (#xD9A7 . #x6233)
                (#xD9A8 . #x6241)
                (#xD9A9 . #x624E)
                (#xD9AA . #x625E)
                (#xD9AB . #x6263)
                (#xD9AC . #x625B)
                (#xD9AD . #x6260)
                (#xD9AE . #x6268)
                (#xD9AF . #x627C)
                (#xD9B0 . #x6282)
                (#xD9B1 . #x6289)
                (#xD9B2 . #x627E)
                (#xD9B3 . #x6292)
                (#xD9B4 . #x6293)
                (#xD9B5 . #x6296)
                (#xD9B6 . #x62D4)
                (#xD9B7 . #x6283)
                (#xD9B8 . #x6294)
                (#xD9B9 . #x62D7)
                (#xD9BA . #x62D1)
                (#xD9BB . #x62BB)
                (#xD9BC . #x62CF)
                (#xD9BD . #x62FF)
                (#xD9BE . #x62C6)
                (#xD9BF . #x64D4)
                (#xD9C0 . #x62C8)
                (#xD9C1 . #x62DC)
                (#xD9C2 . #x62CC)
                (#xD9C3 . #x62CA)
                (#xD9C4 . #x62C2)
                (#xD9C5 . #x62C7)
                (#xD9C6 . #x629B)
                (#xD9C7 . #x62C9)
                (#xD9C8 . #x630C)
                (#xD9C9 . #x62EE)
                (#xD9CA . #x62F1)
                (#xD9CB . #x6327)
                (#xD9CC . #x6302)
                (#xD9CD . #x6308)
                (#xD9CE . #x62EF)
                (#xD9CF . #x62F5)
                (#xD9D0 . #x6350)
                (#xD9D1 . #x633E)
                (#xD9D2 . #x634D)
                (#xD9D3 . #x641C)
                (#xD9D4 . #x634F)
                (#xD9D5 . #x6396)
                (#xD9D6 . #x638E)
                (#xD9D7 . #x6380)
                (#xD9D8 . #x63AB)
                (#xD9D9 . #x6376)
                (#xD9DA . #x63A3)
                (#xD9DB . #x638F)
                (#xD9DC . #x6389)
                (#xD9DD . #x639F)
                (#xD9DE . #x63B5)
                (#xD9DF . #x636B)
                (#xD9E0 . #x6369)
                (#xD9E1 . #x63BE)
                (#xD9E2 . #x63E9)
                (#xD9E3 . #x63C0)
                (#xD9E4 . #x63C6)
                (#xD9E5 . #x63E3)
                (#xD9E6 . #x63C9)
                (#xD9E7 . #x63D2)
                (#xD9E8 . #x63F6)
                (#xD9E9 . #x63C4)
                (#xD9EA . #x6416)
                (#xD9EB . #x6434)
                (#xD9EC . #x6406)
                (#xD9ED . #x6413)
                (#xD9EE . #x6426)
                (#xD9EF . #x6436)
                (#xD9F0 . #x651D)
                (#xD9F1 . #x6417)
                (#xD9F2 . #x6428)
                (#xD9F3 . #x640F)
                (#xD9F4 . #x6467)
                (#xD9F5 . #x646F)
                (#xD9F6 . #x6476)
                (#xD9F7 . #x644E)
                (#xD9F8 . #x652A)
                (#xD9F9 . #x6495)
                (#xD9FA . #x6493)
                (#xD9FB . #x64A5)
                (#xD9FC . #x64A9)
                (#xD9FD . #x6488)
                (#xD9FE . #x64BC)
                (#xDAA1 . #x64DA)
                (#xDAA2 . #x64D2)
                (#xDAA3 . #x64C5)
                (#xDAA4 . #x64C7)
                (#xDAA5 . #x64BB)
                (#xDAA6 . #x64D8)
                (#xDAA7 . #x64C2)
                (#xDAA8 . #x64F1)
                (#xDAA9 . #x64E7)
                (#xDAAA . #x8209)
                (#xDAAB . #x64E0)
                (#xDAAC . #x64E1)
                (#xDAAD . #x62AC)
                (#xDAAE . #x64E3)
                (#xDAAF . #x64EF)
                (#xDAB0 . #x652C)
                (#xDAB1 . #x64F6)
                (#xDAB2 . #x64F4)
                (#xDAB3 . #x64F2)
                (#xDAB4 . #x64FA)
                (#xDAB5 . #x6500)
                (#xDAB6 . #x64FD)
                (#xDAB7 . #x6518)
                (#xDAB8 . #x651C)
                (#xDAB9 . #x6505)
                (#xDABA . #x6524)
                (#xDABB . #x6523)
                (#xDABC . #x652B)
                (#xDABD . #x6534)
                (#xDABE . #x6535)
                (#xDABF . #x6537)
                (#xDAC0 . #x6536)
                (#xDAC1 . #x6538)
                (#xDAC2 . #x754B)
                (#xDAC3 . #x6548)
                (#xDAC4 . #x6556)
                (#xDAC5 . #x6555)
                (#xDAC6 . #x654D)
                (#xDAC7 . #x6558)
                (#xDAC8 . #x655E)
                (#xDAC9 . #x655D)
                (#xDACA . #x6572)
                (#xDACB . #x6578)
                (#xDACC . #x6582)
                (#xDACD . #x6583)
                (#xDACE . #x8B8A)
                (#xDACF . #x659B)
                (#xDAD0 . #x659F)
                (#xDAD1 . #x65AB)
                (#xDAD2 . #x65B7)
                (#xDAD3 . #x65C3)
                (#xDAD4 . #x65C6)
                (#xDAD5 . #x65C1)
                (#xDAD6 . #x65C4)
                (#xDAD7 . #x65CC)
                (#xDAD8 . #x65D2)
                (#xDAD9 . #x65DB)
                (#xDADA . #x65D9)
                (#xDADB . #x65E0)
                (#xDADC . #x65E1)
                (#xDADD . #x65F1)
                (#xDADE . #x6772)
                (#xDADF . #x660A)
                (#xDAE0 . #x6603)
                (#xDAE1 . #x65FB)
                (#xDAE2 . #x6773)
                (#xDAE3 . #x6635)
                (#xDAE4 . #x6636)
                (#xDAE5 . #x6634)
                (#xDAE6 . #x661C)
                (#xDAE7 . #x664F)
                (#xDAE8 . #x6644)
                (#xDAE9 . #x6649)
                (#xDAEA . #x6641)
                (#xDAEB . #x665E)
                (#xDAEC . #x665D)
                (#xDAED . #x6664)
                (#xDAEE . #x6667)
                (#xDAEF . #x6668)
                (#xDAF0 . #x665F)
                (#xDAF1 . #x6662)
                (#xDAF2 . #x6670)
                (#xDAF3 . #x6683)
                (#xDAF4 . #x6688)
                (#xDAF5 . #x668E)
                (#xDAF6 . #x6689)
                (#xDAF7 . #x6684)
                (#xDAF8 . #x6698)
                (#xDAF9 . #x669D)
                (#xDAFA . #x66C1)
                (#xDAFB . #x66B9)
                (#xDAFC . #x66C9)
                (#xDAFD . #x66BE)
                (#xDAFE . #x66BC)
                (#xDBA1 . #x66C4)
                (#xDBA2 . #x66B8)
                (#xDBA3 . #x66D6)
                (#xDBA4 . #x66DA)
                (#xDBA5 . #x66E0)
                (#xDBA6 . #x663F)
                (#xDBA7 . #x66E6)
                (#xDBA8 . #x66E9)
                (#xDBA9 . #x66F0)
                (#xDBAA . #x66F5)
                (#xDBAB . #x66F7)
                (#xDBAC . #x670F)
                (#xDBAD . #x6716)
                (#xDBAE . #x671E)
                (#xDBAF . #x6726)
                (#xDBB0 . #x6727)
                (#xDBB1 . #x9738)
                (#xDBB2 . #x672E)
                (#xDBB3 . #x673F)
                (#xDBB4 . #x6736)
                (#xDBB5 . #x6741)
                (#xDBB6 . #x6738)
                (#xDBB7 . #x6737)
                (#xDBB8 . #x6746)
                (#xDBB9 . #x675E)
                (#xDBBA . #x6760)
                (#xDBBB . #x6759)
                (#xDBBC . #x6763)
                (#xDBBD . #x6764)
                (#xDBBE . #x6789)
                (#xDBBF . #x6770)
                (#xDBC0 . #x67A9)
                (#xDBC1 . #x677C)
                (#xDBC2 . #x676A)
                (#xDBC3 . #x678C)
                (#xDBC4 . #x678B)
                (#xDBC5 . #x67A6)
                (#xDBC6 . #x67A1)
                (#xDBC7 . #x6785)
                (#xDBC8 . #x67B7)
                (#xDBC9 . #x67EF)
                (#xDBCA . #x67B4)
                (#xDBCB . #x67EC)
                (#xDBCC . #x67B3)
                (#xDBCD . #x67E9)
                (#xDBCE . #x67B8)
                (#xDBCF . #x67E4)
                (#xDBD0 . #x67DE)
                (#xDBD1 . #x67DD)
                (#xDBD2 . #x67E2)
                (#xDBD3 . #x67EE)
                (#xDBD4 . #x67B9)
                (#xDBD5 . #x67CE)
                (#xDBD6 . #x67C6)
                (#xDBD7 . #x67E7)
                (#xDBD8 . #x6A9C)
                (#xDBD9 . #x681E)
                (#xDBDA . #x6846)
                (#xDBDB . #x6829)
                (#xDBDC . #x6840)
                (#xDBDD . #x684D)
                (#xDBDE . #x6832)
                (#xDBDF . #x684E)
                (#xDBE0 . #x68B3)
                (#xDBE1 . #x682B)
                (#xDBE2 . #x6859)
                (#xDBE3 . #x6863)
                (#xDBE4 . #x6877)
                (#xDBE5 . #x687F)
                (#xDBE6 . #x689F)
                (#xDBE7 . #x688F)
                (#xDBE8 . #x68AD)
                (#xDBE9 . #x6894)
                (#xDBEA . #x689D)
                (#xDBEB . #x689B)
                (#xDBEC . #x6883)
                (#xDBED . #x6AAE)
                (#xDBEE . #x68B9)
                (#xDBEF . #x6874)
                (#xDBF0 . #x68B5)
                (#xDBF1 . #x68A0)
                (#xDBF2 . #x68BA)
                (#xDBF3 . #x690F)
                (#xDBF4 . #x688D)
                (#xDBF5 . #x687E)
                (#xDBF6 . #x6901)
                (#xDBF7 . #x68CA)
                (#xDBF8 . #x6908)
                (#xDBF9 . #x68D8)
                (#xDBFA . #x6922)
                (#xDBFB . #x6926)
                (#xDBFC . #x68E1)
                (#xDBFD . #x690C)
                (#xDBFE . #x68CD)
                (#xDCA1 . #x68D4)
                (#xDCA2 . #x68E7)
                (#xDCA3 . #x68D5)
                (#xDCA4 . #x6936)
                (#xDCA5 . #x6912)
                (#xDCA6 . #x6904)
                (#xDCA7 . #x68D7)
                (#xDCA8 . #x68E3)
                (#xDCA9 . #x6925)
                (#xDCAA . #x68F9)
                (#xDCAB . #x68E0)
                (#xDCAC . #x68EF)
                (#xDCAD . #x6928)
                (#xDCAE . #x692A)
                (#xDCAF . #x691A)
                (#xDCB0 . #x6923)
                (#xDCB1 . #x6921)
                (#xDCB2 . #x68C6)
                (#xDCB3 . #x6979)
                (#xDCB4 . #x6977)
                (#xDCB5 . #x695C)
                (#xDCB6 . #x6978)
                (#xDCB7 . #x696B)
                (#xDCB8 . #x6954)
                (#xDCB9 . #x697E)
                (#xDCBA . #x696E)
                (#xDCBB . #x6939)
                (#xDCBC . #x6974)
                (#xDCBD . #x693D)
                (#xDCBE . #x6959)
                (#xDCBF . #x6930)
                (#xDCC0 . #x6961)
                (#xDCC1 . #x695E)
                (#xDCC2 . #x695D)
                (#xDCC3 . #x6981)
                (#xDCC4 . #x696A)
                (#xDCC5 . #x69B2)
                (#xDCC6 . #x69AE)
                (#xDCC7 . #x69D0)
                (#xDCC8 . #x69BF)
                (#xDCC9 . #x69C1)
                (#xDCCA . #x69D3)
                (#xDCCB . #x69BE)
                (#xDCCC . #x69CE)
                (#xDCCD . #x5BE8)
                (#xDCCE . #x69CA)
                (#xDCCF . #x69DD)
                (#xDCD0 . #x69BB)
                (#xDCD1 . #x69C3)
                (#xDCD2 . #x69A7)
                (#xDCD3 . #x6A2E)
                (#xDCD4 . #x6991)
                (#xDCD5 . #x69A0)
                (#xDCD6 . #x699C)
                (#xDCD7 . #x6995)
                (#xDCD8 . #x69B4)
                (#xDCD9 . #x69DE)
                (#xDCDA . #x69E8)
                (#xDCDB . #x6A02)
                (#xDCDC . #x6A1B)
                (#xDCDD . #x69FF)
                (#xDCDE . #x6B0A)
                (#xDCDF . #x69F9)
                (#xDCE0 . #x69F2)
                (#xDCE1 . #x69E7)
                (#xDCE2 . #x6A05)
                (#xDCE3 . #x69B1)
                (#xDCE4 . #x6A1E)
                (#xDCE5 . #x69ED)
                (#xDCE6 . #x6A14)
                (#xDCE7 . #x69EB)
                (#xDCE8 . #x6A0A)
                (#xDCE9 . #x6A12)
                (#xDCEA . #x6AC1)
                (#xDCEB . #x6A23)
                (#xDCEC . #x6A13)
                (#xDCED . #x6A44)
                (#xDCEE . #x6A0C)
                (#xDCEF . #x6A72)
                (#xDCF0 . #x6A36)
                (#xDCF1 . #x6A78)
                (#xDCF2 . #x6A47)
                (#xDCF3 . #x6A62)
                (#xDCF4 . #x6A59)
                (#xDCF5 . #x6A66)
                (#xDCF6 . #x6A48)
                (#xDCF7 . #x6A38)
                (#xDCF8 . #x6A22)
                (#xDCF9 . #x6A90)
                (#xDCFA . #x6A8D)
                (#xDCFB . #x6AA0)
                (#xDCFC . #x6A84)
                (#xDCFD . #x6AA2)
                (#xDCFE . #x6AA3)
                (#xDDA1 . #x6A97)
                (#xDDA2 . #x8617)
                (#xDDA3 . #x6ABB)
                (#xDDA4 . #x6AC3)
                (#xDDA5 . #x6AC2)
                (#xDDA6 . #x6AB8)
                (#xDDA7 . #x6AB3)
                (#xDDA8 . #x6AAC)
                (#xDDA9 . #x6ADE)
                (#xDDAA . #x6AD1)
                (#xDDAB . #x6ADF)
                (#xDDAC . #x6AAA)
                (#xDDAD . #x6ADA)
                (#xDDAE . #x6AEA)
                (#xDDAF . #x6AFB)
                (#xDDB0 . #x6B05)
                (#xDDB1 . #x8616)
                (#xDDB2 . #x6AFA)
                (#xDDB3 . #x6B12)
                (#xDDB4 . #x6B16)
                (#xDDB5 . #x9B31)
                (#xDDB6 . #x6B1F)
                (#xDDB7 . #x6B38)
                (#xDDB8 . #x6B37)
                (#xDDB9 . #x76DC)
                (#xDDBA . #x6B39)
                (#xDDBB . #x98EE)
                (#xDDBC . #x6B47)
                (#xDDBD . #x6B43)
                (#xDDBE . #x6B49)
                (#xDDBF . #x6B50)
                (#xDDC0 . #x6B59)
                (#xDDC1 . #x6B54)
                (#xDDC2 . #x6B5B)
                (#xDDC3 . #x6B5F)
                (#xDDC4 . #x6B61)
                (#xDDC5 . #x6B78)
                (#xDDC6 . #x6B79)
                (#xDDC7 . #x6B7F)
                (#xDDC8 . #x6B80)
                (#xDDC9 . #x6B84)
                (#xDDCA . #x6B83)
                (#xDDCB . #x6B8D)
                (#xDDCC . #x6B98)
                (#xDDCD . #x6B95)
                (#xDDCE . #x6B9E)
                (#xDDCF . #x6BA4)
                (#xDDD0 . #x6BAA)
                (#xDDD1 . #x6BAB)
                (#xDDD2 . #x6BAF)
                (#xDDD3 . #x6BB2)
                (#xDDD4 . #x6BB1)
                (#xDDD5 . #x6BB3)
                (#xDDD6 . #x6BB7)
                (#xDDD7 . #x6BBC)
                (#xDDD8 . #x6BC6)
                (#xDDD9 . #x6BCB)
                (#xDDDA . #x6BD3)
                (#xDDDB . #x6BDF)
                (#xDDDC . #x6BEC)
                (#xDDDD . #x6BEB)
                (#xDDDE . #x6BF3)
                (#xDDDF . #x6BEF)
                (#xDDE0 . #x9EBE)
                (#xDDE1 . #x6C08)
                (#xDDE2 . #x6C13)
                (#xDDE3 . #x6C14)
                (#xDDE4 . #x6C1B)
                (#xDDE5 . #x6C24)
                (#xDDE6 . #x6C23)
                (#xDDE7 . #x6C5E)
                (#xDDE8 . #x6C55)
                (#xDDE9 . #x6C62)
                (#xDDEA . #x6C6A)
                (#xDDEB . #x6C82)
                (#xDDEC . #x6C8D)
                (#xDDED . #x6C9A)
                (#xDDEE . #x6C81)
                (#xDDEF . #x6C9B)
                (#xDDF0 . #x6C7E)
                (#xDDF1 . #x6C68)
                (#xDDF2 . #x6C73)
                (#xDDF3 . #x6C92)
                (#xDDF4 . #x6C90)
                (#xDDF5 . #x6CC4)
                (#xDDF6 . #x6CF1)
                (#xDDF7 . #x6CD3)
                (#xDDF8 . #x6CBD)
                (#xDDF9 . #x6CD7)
                (#xDDFA . #x6CC5)
                (#xDDFB . #x6CDD)
                (#xDDFC . #x6CAE)
                (#xDDFD . #x6CB1)
                (#xDDFE . #x6CBE)
                (#xDEA1 . #x6CBA)
                (#xDEA2 . #x6CDB)
                (#xDEA3 . #x6CEF)
                (#xDEA4 . #x6CD9)
                (#xDEA5 . #x6CEA)
                (#xDEA6 . #x6D1F)
                (#xDEA7 . #x884D)
                (#xDEA8 . #x6D36)
                (#xDEA9 . #x6D2B)
                (#xDEAA . #x6D3D)
                (#xDEAB . #x6D38)
                (#xDEAC . #x6D19)
                (#xDEAD . #x6D35)
                (#xDEAE . #x6D33)
                (#xDEAF . #x6D12)
                (#xDEB0 . #x6D0C)
                (#xDEB1 . #x6D63)
                (#xDEB2 . #x6D93)
                (#xDEB3 . #x6D64)
                (#xDEB4 . #x6D5A)
                (#xDEB5 . #x6D79)
                (#xDEB6 . #x6D59)
                (#xDEB7 . #x6D8E)
                (#xDEB8 . #x6D95)
                (#xDEB9 . #x6FE4)
                (#xDEBA . #x6D85)
                (#xDEBB . #x6DF9)
                (#xDEBC . #x6E15)
                (#xDEBD . #x6E0A)
                (#xDEBE . #x6DB5)
                (#xDEBF . #x6DC7)
                (#xDEC0 . #x6DE6)
                (#xDEC1 . #x6DB8)
                (#xDEC2 . #x6DC6)
                (#xDEC3 . #x6DEC)
                (#xDEC4 . #x6DDE)
                (#xDEC5 . #x6DCC)
                (#xDEC6 . #x6DE8)
                (#xDEC7 . #x6DD2)
                (#xDEC8 . #x6DC5)
                (#xDEC9 . #x6DFA)
                (#xDECA . #x6DD9)
                (#xDECB . #x6DE4)
                (#xDECC . #x6DD5)
                (#xDECD . #x6DEA)
                (#xDECE . #x6DEE)
                (#xDECF . #x6E2D)
                (#xDED0 . #x6E6E)
                (#xDED1 . #x6E2E)
                (#xDED2 . #x6E19)
                (#xDED3 . #x6E72)
                (#xDED4 . #x6E5F)
                (#xDED5 . #x6E3E)
                (#xDED6 . #x6E23)
                (#xDED7 . #x6E6B)
                (#xDED8 . #x6E2B)
                (#xDED9 . #x6E76)
                (#xDEDA . #x6E4D)
                (#xDEDB . #x6E1F)
                (#xDEDC . #x6E43)
                (#xDEDD . #x6E3A)
                (#xDEDE . #x6E4E)
                (#xDEDF . #x6E24)
                (#xDEE0 . #x6EFF)
                (#xDEE1 . #x6E1D)
                (#xDEE2 . #x6E38)
                (#xDEE3 . #x6E82)
                (#xDEE4 . #x6EAA)
                (#xDEE5 . #x6E98)
                (#xDEE6 . #x6EC9)
                (#xDEE7 . #x6EB7)
                (#xDEE8 . #x6ED3)
                (#xDEE9 . #x6EBD)
                (#xDEEA . #x6EAF)
                (#xDEEB . #x6EC4)
                (#xDEEC . #x6EB2)
                (#xDEED . #x6ED4)
                (#xDEEE . #x6ED5)
                (#xDEEF . #x6E8F)
                (#xDEF0 . #x6EA5)
                (#xDEF1 . #x6EC2)
                (#xDEF2 . #x6E9F)
                (#xDEF3 . #x6F41)
                (#xDEF4 . #x6F11)
                (#xDEF5 . #x704C)
                (#xDEF6 . #x6EEC)
                (#xDEF7 . #x6EF8)
                (#xDEF8 . #x6EFE)
                (#xDEF9 . #x6F3F)
                (#xDEFA . #x6EF2)
                (#xDEFB . #x6F31)
                (#xDEFC . #x6EEF)
                (#xDEFD . #x6F32)
                (#xDEFE . #x6ECC)
                (#xDFA1 . #x6F3E)
                (#xDFA2 . #x6F13)
                (#xDFA3 . #x6EF7)
                (#xDFA4 . #x6F86)
                (#xDFA5 . #x6F7A)
                (#xDFA6 . #x6F78)
                (#xDFA7 . #x6F81)
                (#xDFA8 . #x6F80)
                (#xDFA9 . #x6F6F)
                (#xDFAA . #x6F5B)
                (#xDFAB . #x6FF3)
                (#xDFAC . #x6F6D)
                (#xDFAD . #x6F82)
                (#xDFAE . #x6F7C)
                (#xDFAF . #x6F58)
                (#xDFB0 . #x6F8E)
                (#xDFB1 . #x6F91)
                (#xDFB2 . #x6FC2)
                (#xDFB3 . #x6F66)
                (#xDFB4 . #x6FB3)
                (#xDFB5 . #x6FA3)
                (#xDFB6 . #x6FA1)
                (#xDFB7 . #x6FA4)
                (#xDFB8 . #x6FB9)
                (#xDFB9 . #x6FC6)
                (#xDFBA . #x6FAA)
                (#xDFBB . #x6FDF)
                (#xDFBC . #x6FD5)
                (#xDFBD . #x6FEC)
                (#xDFBE . #x6FD4)
                (#xDFBF . #x6FD8)
                (#xDFC0 . #x6FF1)
                (#xDFC1 . #x6FEE)
                (#xDFC2 . #x6FDB)
                (#xDFC3 . #x7009)
                (#xDFC4 . #x700B)
                (#xDFC5 . #x6FFA)
                (#xDFC6 . #x7011)
                (#xDFC7 . #x7001)
                (#xDFC8 . #x700F)
                (#xDFC9 . #x6FFE)
                (#xDFCA . #x701B)
                (#xDFCB . #x701A)
                (#xDFCC . #x6F74)
                (#xDFCD . #x701D)
                (#xDFCE . #x7018)
                (#xDFCF . #x701F)
                (#xDFD0 . #x7030)
                (#xDFD1 . #x703E)
                (#xDFD2 . #x7032)
                (#xDFD3 . #x7051)
                (#xDFD4 . #x7063)
                (#xDFD5 . #x7099)
                (#xDFD6 . #x7092)
                (#xDFD7 . #x70AF)
                (#xDFD8 . #x70F1)
                (#xDFD9 . #x70AC)
                (#xDFDA . #x70B8)
                (#xDFDB . #x70B3)
                (#xDFDC . #x70AE)
                (#xDFDD . #x70DF)
                (#xDFDE . #x70CB)
                (#xDFDF . #x70DD)
                (#xDFE0 . #x70D9)
                (#xDFE1 . #x7109)
                (#xDFE2 . #x70FD)
                (#xDFE3 . #x711C)
                (#xDFE4 . #x7119)
                (#xDFE5 . #x7165)
                (#xDFE6 . #x7155)
                (#xDFE7 . #x7188)
                (#xDFE8 . #x7166)
                (#xDFE9 . #x7162)
                (#xDFEA . #x714C)
                (#xDFEB . #x7156)
                (#xDFEC . #x716C)
                (#xDFED . #x718F)
                (#xDFEE . #x71FB)
                (#xDFEF . #x7184)
                (#xDFF0 . #x7195)
                (#xDFF1 . #x71A8)
                (#xDFF2 . #x71AC)
                (#xDFF3 . #x71D7)
                (#xDFF4 . #x71B9)
                (#xDFF5 . #x71BE)
                (#xDFF6 . #x71D2)
                (#xDFF7 . #x71C9)
                (#xDFF8 . #x71D4)
                (#xDFF9 . #x71CE)
                (#xDFFA . #x71E0)
                (#xDFFB . #x71EC)
                (#xDFFC . #x71E7)
                (#xDFFD . #x71F5)
                (#xDFFE . #x71FC)
                (#xE0A1 . #x71F9)
                (#xE0A2 . #x71FF)
                (#xE0A3 . #x720D)
                (#xE0A4 . #x7210)
                (#xE0A5 . #x721B)
                (#xE0A6 . #x7228)
                (#xE0A7 . #x722D)
                (#xE0A8 . #x722C)
                (#xE0A9 . #x7230)
                (#xE0AA . #x7232)
                (#xE0AB . #x723B)
                (#xE0AC . #x723C)
                (#xE0AD . #x723F)
                (#xE0AE . #x7240)
                (#xE0AF . #x7246)
                (#xE0B0 . #x724B)
                (#xE0B1 . #x7258)
                (#xE0B2 . #x7274)
                (#xE0B3 . #x727E)
                (#xE0B4 . #x7282)
                (#xE0B5 . #x7281)
                (#xE0B6 . #x7287)
                (#xE0B7 . #x7292)
                (#xE0B8 . #x7296)
                (#xE0B9 . #x72A2)
                (#xE0BA . #x72A7)
                (#xE0BB . #x72B9)
                (#xE0BC . #x72B2)
                (#xE0BD . #x72C3)
                (#xE0BE . #x72C6)
                (#xE0BF . #x72C4)
                (#xE0C0 . #x72CE)
                (#xE0C1 . #x72D2)
                (#xE0C2 . #x72E2)
                (#xE0C3 . #x72E0)
                (#xE0C4 . #x72E1)
                (#xE0C5 . #x72F9)
                (#xE0C6 . #x72F7)
                (#xE0C7 . #x500F)
                (#xE0C8 . #x7317)
                (#xE0C9 . #x730A)
                (#xE0CA . #x731C)
                (#xE0CB . #x7316)
                (#xE0CC . #x731D)
                (#xE0CD . #x7334)
                (#xE0CE . #x732F)
                (#xE0CF . #x7329)
                (#xE0D0 . #x7325)
                (#xE0D1 . #x733E)
                (#xE0D2 . #x734E)
                (#xE0D3 . #x734F)
                (#xE0D4 . #x9ED8)
                (#xE0D5 . #x7357)
                (#xE0D6 . #x736A)
                (#xE0D7 . #x7368)
                (#xE0D8 . #x7370)
                (#xE0D9 . #x7378)
                (#xE0DA . #x7375)
                (#xE0DB . #x737B)
                (#xE0DC . #x737A)
                (#xE0DD . #x73C8)
                (#xE0DE . #x73B3)
                (#xE0DF . #x73CE)
                (#xE0E0 . #x73BB)
                (#xE0E1 . #x73C0)
                (#xE0E2 . #x73E5)
                (#xE0E3 . #x73EE)
                (#xE0E4 . #x73DE)
                (#xE0E5 . #x74A2)
                (#xE0E6 . #x7405)
                (#xE0E7 . #x746F)
                (#xE0E8 . #x7425)
                (#xE0E9 . #x73F8)
                (#xE0EA . #x7432)
                (#xE0EB . #x743A)
                (#xE0EC . #x7455)
                (#xE0ED . #x743F)
                (#xE0EE . #x745F)
                (#xE0EF . #x7459)
                (#xE0F0 . #x7441)
                (#xE0F1 . #x745C)
                (#xE0F2 . #x7469)
                (#xE0F3 . #x7470)
                (#xE0F4 . #x7463)
                (#xE0F5 . #x746A)
                (#xE0F6 . #x7476)
                (#xE0F7 . #x747E)
                (#xE0F8 . #x748B)
                (#xE0F9 . #x749E)
                (#xE0FA . #x74A7)
                (#xE0FB . #x74CA)
                (#xE0FC . #x74CF)
                (#xE0FD . #x74D4)
                (#xE0FE . #x73F1)
                (#xE1A1 . #x74E0)
                (#xE1A2 . #x74E3)
                (#xE1A3 . #x74E7)
                (#xE1A4 . #x74E9)
                (#xE1A5 . #x74EE)
                (#xE1A6 . #x74F2)
                (#xE1A7 . #x74F0)
                (#xE1A8 . #x74F1)
                (#xE1A9 . #x74F8)
                (#xE1AA . #x74F7)
                (#xE1AB . #x7504)
                (#xE1AC . #x7503)
                (#xE1AD . #x7505)
                (#xE1AE . #x750C)
                (#xE1AF . #x750E)
                (#xE1B0 . #x750D)
                (#xE1B1 . #x7515)
                (#xE1B2 . #x7513)
                (#xE1B3 . #x751E)
                (#xE1B4 . #x7526)
                (#xE1B5 . #x752C)
                (#xE1B6 . #x753C)
                (#xE1B7 . #x7544)
                (#xE1B8 . #x754D)
                (#xE1B9 . #x754A)
                (#xE1BA . #x7549)
                (#xE1BB . #x755B)
                (#xE1BC . #x7546)
                (#xE1BD . #x755A)
                (#xE1BE . #x7569)
                (#xE1BF . #x7564)
                (#xE1C0 . #x7567)
                (#xE1C1 . #x756B)
                (#xE1C2 . #x756D)
                (#xE1C3 . #x7578)
                (#xE1C4 . #x7576)
                (#xE1C5 . #x7586)
                (#xE1C6 . #x7587)
                (#xE1C7 . #x7574)
                (#xE1C8 . #x758A)
                (#xE1C9 . #x7589)
                (#xE1CA . #x7582)
                (#xE1CB . #x7594)
                (#xE1CC . #x759A)
                (#xE1CD . #x759D)
                (#xE1CE . #x75A5)
                (#xE1CF . #x75A3)
                (#xE1D0 . #x75C2)
                (#xE1D1 . #x75B3)
                (#xE1D2 . #x75C3)
                (#xE1D3 . #x75B5)
                (#xE1D4 . #x75BD)
                (#xE1D5 . #x75B8)
                (#xE1D6 . #x75BC)
                (#xE1D7 . #x75B1)
                (#xE1D8 . #x75CD)
                (#xE1D9 . #x75CA)
                (#xE1DA . #x75D2)
                (#xE1DB . #x75D9)
                (#xE1DC . #x75E3)
                (#xE1DD . #x75DE)
                (#xE1DE . #x75FE)
                (#xE1DF . #x75FF)
                (#xE1E0 . #x75FC)
                (#xE1E1 . #x7601)
                (#xE1E2 . #x75F0)
                (#xE1E3 . #x75FA)
                (#xE1E4 . #x75F2)
                (#xE1E5 . #x75F3)
                (#xE1E6 . #x760B)
                (#xE1E7 . #x760D)
                (#xE1E8 . #x7609)
                (#xE1E9 . #x761F)
                (#xE1EA . #x7627)
                (#xE1EB . #x7620)
                (#xE1EC . #x7621)
                (#xE1ED . #x7622)
                (#xE1EE . #x7624)
                (#xE1EF . #x7634)
                (#xE1F0 . #x7630)
                (#xE1F1 . #x763B)
                (#xE1F2 . #x7647)
                (#xE1F3 . #x7648)
                (#xE1F4 . #x7646)
                (#xE1F5 . #x765C)
                (#xE1F6 . #x7658)
                (#xE1F7 . #x7661)
                (#xE1F8 . #x7662)
                (#xE1F9 . #x7668)
                (#xE1FA . #x7669)
                (#xE1FB . #x766A)
                (#xE1FC . #x7667)
                (#xE1FD . #x766C)
                (#xE1FE . #x7670)
                (#xE2A1 . #x7672)
                (#xE2A2 . #x7676)
                (#xE2A3 . #x7678)
                (#xE2A4 . #x767C)
                (#xE2A5 . #x7680)
                (#xE2A6 . #x7683)
                (#xE2A7 . #x7688)
                (#xE2A8 . #x768B)
                (#xE2A9 . #x768E)
                (#xE2AA . #x7696)
                (#xE2AB . #x7693)
                (#xE2AC . #x7699)
                (#xE2AD . #x769A)
                (#xE2AE . #x76B0)
                (#xE2AF . #x76B4)
                (#xE2B0 . #x76B8)
                (#xE2B1 . #x76B9)
                (#xE2B2 . #x76BA)
                (#xE2B3 . #x76C2)
                (#xE2B4 . #x76CD)
                (#xE2B5 . #x76D6)
                (#xE2B6 . #x76D2)
                (#xE2B7 . #x76DE)
                (#xE2B8 . #x76E1)
                (#xE2B9 . #x76E5)
                (#xE2BA . #x76E7)
                (#xE2BB . #x76EA)
                (#xE2BC . #x862F)
                (#xE2BD . #x76FB)
                (#xE2BE . #x7708)
                (#xE2BF . #x7707)
                (#xE2C0 . #x7704)
                (#xE2C1 . #x7729)
                (#xE2C2 . #x7724)
                (#xE2C3 . #x771E)
                (#xE2C4 . #x7725)
                (#xE2C5 . #x7726)
                (#xE2C6 . #x771B)
                (#xE2C7 . #x7737)
                (#xE2C8 . #x7738)
                (#xE2C9 . #x7747)
                (#xE2CA . #x775A)
                (#xE2CB . #x7768)
                (#xE2CC . #x776B)
                (#xE2CD . #x775B)
                (#xE2CE . #x7765)
                (#xE2CF . #x777F)
                (#xE2D0 . #x777E)
                (#xE2D1 . #x7779)
                (#xE2D2 . #x778E)
                (#xE2D3 . #x778B)
                (#xE2D4 . #x7791)
                (#xE2D5 . #x77A0)
                (#xE2D6 . #x779E)
                (#xE2D7 . #x77B0)
                (#xE2D8 . #x77B6)
                (#xE2D9 . #x77B9)
                (#xE2DA . #x77BF)
                (#xE2DB . #x77BC)
                (#xE2DC . #x77BD)
                (#xE2DD . #x77BB)
                (#xE2DE . #x77C7)
                (#xE2DF . #x77CD)
                (#xE2E0 . #x77D7)
                (#xE2E1 . #x77DA)
                (#xE2E2 . #x77DC)
                (#xE2E3 . #x77E3)
                (#xE2E4 . #x77EE)
                (#xE2E5 . #x77FC)
                (#xE2E6 . #x780C)
                (#xE2E7 . #x7812)
                (#xE2E8 . #x7926)
                (#xE2E9 . #x7820)
                (#xE2EA . #x792A)
                (#xE2EB . #x7845)
                (#xE2EC . #x788E)
                (#xE2ED . #x7874)
                (#xE2EE . #x7886)
                (#xE2EF . #x787C)
                (#xE2F0 . #x789A)
                (#xE2F1 . #x788C)
                (#xE2F2 . #x78A3)
                (#xE2F3 . #x78B5)
                (#xE2F4 . #x78AA)
                (#xE2F5 . #x78AF)
                (#xE2F6 . #x78D1)
                (#xE2F7 . #x78C6)
                (#xE2F8 . #x78CB)
                (#xE2F9 . #x78D4)
                (#xE2FA . #x78BE)
                (#xE2FB . #x78BC)
                (#xE2FC . #x78C5)
                (#xE2FD . #x78CA)
                (#xE2FE . #x78EC)
                (#xE3A1 . #x78E7)
                (#xE3A2 . #x78DA)
                (#xE3A3 . #x78FD)
                (#xE3A4 . #x78F4)
                (#xE3A5 . #x7907)
                (#xE3A6 . #x7912)
                (#xE3A7 . #x7911)
                (#xE3A8 . #x7919)
                (#xE3A9 . #x792C)
                (#xE3AA . #x792B)
                (#xE3AB . #x7940)
                (#xE3AC . #x7960)
                (#xE3AD . #x7957)
                (#xE3AE . #x795F)
                (#xE3AF . #x795A)
                (#xE3B0 . #x7955)
                (#xE3B1 . #x7953)
                (#xE3B2 . #x797A)
                (#xE3B3 . #x797F)
                (#xE3B4 . #x798A)
                (#xE3B5 . #x799D)
                (#xE3B6 . #x79A7)
                (#xE3B7 . #x9F4B)
                (#xE3B8 . #x79AA)
                (#xE3B9 . #x79AE)
                (#xE3BA . #x79B3)
                (#xE3BB . #x79B9)
                (#xE3BC . #x79BA)
                (#xE3BD . #x79C9)
                (#xE3BE . #x79D5)
                (#xE3BF . #x79E7)
                (#xE3C0 . #x79EC)
                (#xE3C1 . #x79E1)
                (#xE3C2 . #x79E3)
                (#xE3C3 . #x7A08)
                (#xE3C4 . #x7A0D)
                (#xE3C5 . #x7A18)
                (#xE3C6 . #x7A19)
                (#xE3C7 . #x7A20)
                (#xE3C8 . #x7A1F)
                (#xE3C9 . #x7980)
                (#xE3CA . #x7A31)
                (#xE3CB . #x7A3B)
                (#xE3CC . #x7A3E)
                (#xE3CD . #x7A37)
                (#xE3CE . #x7A43)
                (#xE3CF . #x7A57)
                (#xE3D0 . #x7A49)
                (#xE3D1 . #x7A61)
                (#xE3D2 . #x7A62)
                (#xE3D3 . #x7A69)
                (#xE3D4 . #x9F9D)
                (#xE3D5 . #x7A70)
                (#xE3D6 . #x7A79)
                (#xE3D7 . #x7A7D)
                (#xE3D8 . #x7A88)
                (#xE3D9 . #x7A97)
                (#xE3DA . #x7A95)
                (#xE3DB . #x7A98)
                (#xE3DC . #x7A96)
                (#xE3DD . #x7AA9)
                (#xE3DE . #x7AC8)
                (#xE3DF . #x7AB0)
                (#xE3E0 . #x7AB6)
                (#xE3E1 . #x7AC5)
                (#xE3E2 . #x7AC4)
                (#xE3E3 . #x7ABF)
                (#xE3E4 . #x9083)
                (#xE3E5 . #x7AC7)
                (#xE3E6 . #x7ACA)
                (#xE3E7 . #x7ACD)
                (#xE3E8 . #x7ACF)
                (#xE3E9 . #x7AD5)
                (#xE3EA . #x7AD3)
                (#xE3EB . #x7AD9)
                (#xE3EC . #x7ADA)
                (#xE3ED . #x7ADD)
                (#xE3EE . #x7AE1)
                (#xE3EF . #x7AE2)
                (#xE3F0 . #x7AE6)
                (#xE3F1 . #x7AED)
                (#xE3F2 . #x7AF0)
                (#xE3F3 . #x7B02)
                (#xE3F4 . #x7B0F)
                (#xE3F5 . #x7B0A)
                (#xE3F6 . #x7B06)
                (#xE3F7 . #x7B33)
                (#xE3F8 . #x7B18)
                (#xE3F9 . #x7B19)
                (#xE3FA . #x7B1E)
                (#xE3FB . #x7B35)
                (#xE3FC . #x7B28)
                (#xE3FD . #x7B36)
                (#xE3FE . #x7B50)
                (#xE4A1 . #x7B7A)
                (#xE4A2 . #x7B04)
                (#xE4A3 . #x7B4D)
                (#xE4A4 . #x7B0B)
                (#xE4A5 . #x7B4C)
                (#xE4A6 . #x7B45)
                (#xE4A7 . #x7B75)
                (#xE4A8 . #x7B65)
                (#xE4A9 . #x7B74)
                (#xE4AA . #x7B67)
                (#xE4AB . #x7B70)
                (#xE4AC . #x7B71)
                (#xE4AD . #x7B6C)
                (#xE4AE . #x7B6E)
                (#xE4AF . #x7B9D)
                (#xE4B0 . #x7B98)
                (#xE4B1 . #x7B9F)
                (#xE4B2 . #x7B8D)
                (#xE4B3 . #x7B9C)
                (#xE4B4 . #x7B9A)
                (#xE4B5 . #x7B8B)
                (#xE4B6 . #x7B92)
                (#xE4B7 . #x7B8F)
                (#xE4B8 . #x7B5D)
                (#xE4B9 . #x7B99)
                (#xE4BA . #x7BCB)
                (#xE4BB . #x7BC1)
                (#xE4BC . #x7BCC)
                (#xE4BD . #x7BCF)
                (#xE4BE . #x7BB4)
                (#xE4BF . #x7BC6)
                (#xE4C0 . #x7BDD)
                (#xE4C1 . #x7BE9)
                (#xE4C2 . #x7C11)
                (#xE4C3 . #x7C14)
                (#xE4C4 . #x7BE6)
                (#xE4C5 . #x7BE5)
                (#xE4C6 . #x7C60)
                (#xE4C7 . #x7C00)
                (#xE4C8 . #x7C07)
                (#xE4C9 . #x7C13)
                (#xE4CA . #x7BF3)
                (#xE4CB . #x7BF7)
                (#xE4CC . #x7C17)
                (#xE4CD . #x7C0D)
                (#xE4CE . #x7BF6)
                (#xE4CF . #x7C23)
                (#xE4D0 . #x7C27)
                (#xE4D1 . #x7C2A)
                (#xE4D2 . #x7C1F)
                (#xE4D3 . #x7C37)
                (#xE4D4 . #x7C2B)
                (#xE4D5 . #x7C3D)
                (#xE4D6 . #x7C4C)
                (#xE4D7 . #x7C43)
                (#xE4D8 . #x7C54)
                (#xE4D9 . #x7C4F)
                (#xE4DA . #x7C40)
                (#xE4DB . #x7C50)
                (#xE4DC . #x7C58)
                (#xE4DD . #x7C5F)
                (#xE4DE . #x7C64)
                (#xE4DF . #x7C56)
                (#xE4E0 . #x7C65)
                (#xE4E1 . #x7C6C)
                (#xE4E2 . #x7C75)
                (#xE4E3 . #x7C83)
                (#xE4E4 . #x7C90)
                (#xE4E5 . #x7CA4)
                (#xE4E6 . #x7CAD)
                (#xE4E7 . #x7CA2)
                (#xE4E8 . #x7CAB)
                (#xE4E9 . #x7CA1)
                (#xE4EA . #x7CA8)
                (#xE4EB . #x7CB3)
                (#xE4EC . #x7CB2)
                (#xE4ED . #x7CB1)
                (#xE4EE . #x7CAE)
                (#xE4EF . #x7CB9)
                (#xE4F0 . #x7CBD)
                (#xE4F1 . #x7CC0)
                (#xE4F2 . #x7CC5)
                (#xE4F3 . #x7CC2)
                (#xE4F4 . #x7CD8)
                (#xE4F5 . #x7CD2)
                (#xE4F6 . #x7CDC)
                (#xE4F7 . #x7CE2)
                (#xE4F8 . #x9B3B)
                (#xE4F9 . #x7CEF)
                (#xE4FA . #x7CF2)
                (#xE4FB . #x7CF4)
                (#xE4FC . #x7CF6)
                (#xE4FD . #x7CFA)
                (#xE4FE . #x7D06)
                (#xE5A1 . #x7D02)
                (#xE5A2 . #x7D1C)
                (#xE5A3 . #x7D15)
                (#xE5A4 . #x7D0A)
                (#xE5A5 . #x7D45)
                (#xE5A6 . #x7D4B)
                (#xE5A7 . #x7D2E)
                (#xE5A8 . #x7D32)
                (#xE5A9 . #x7D3F)
                (#xE5AA . #x7D35)
                (#xE5AB . #x7D46)
                (#xE5AC . #x7D73)
                (#xE5AD . #x7D56)
                (#xE5AE . #x7D4E)
                (#xE5AF . #x7D72)
                (#xE5B0 . #x7D68)
                (#xE5B1 . #x7D6E)
                (#xE5B2 . #x7D4F)
                (#xE5B3 . #x7D63)
                (#xE5B4 . #x7D93)
                (#xE5B5 . #x7D89)
                (#xE5B6 . #x7D5B)
                (#xE5B7 . #x7D8F)
                (#xE5B8 . #x7D7D)
                (#xE5B9 . #x7D9B)
                (#xE5BA . #x7DBA)
                (#xE5BB . #x7DAE)
                (#xE5BC . #x7DA3)
                (#xE5BD . #x7DB5)
                (#xE5BE . #x7DC7)
                (#xE5BF . #x7DBD)
                (#xE5C0 . #x7DAB)
                (#xE5C1 . #x7E3D)
                (#xE5C2 . #x7DA2)
                (#xE5C3 . #x7DAF)
                (#xE5C4 . #x7DDC)
                (#xE5C5 . #x7DB8)
                (#xE5C6 . #x7D9F)
                (#xE5C7 . #x7DB0)
                (#xE5C8 . #x7DD8)
                (#xE5C9 . #x7DDD)
                (#xE5CA . #x7DE4)
                (#xE5CB . #x7DDE)
                (#xE5CC . #x7DFB)
                (#xE5CD . #x7DF2)
                (#xE5CE . #x7DE1)
                (#xE5CF . #x7E05)
                (#xE5D0 . #x7E0A)
                (#xE5D1 . #x7E23)
                (#xE5D2 . #x7E21)
                (#xE5D3 . #x7E12)
                (#xE5D4 . #x7E31)
                (#xE5D5 . #x7E1F)
                (#xE5D6 . #x7E09)
                (#xE5D7 . #x7E0B)
                (#xE5D8 . #x7E22)
                (#xE5D9 . #x7E46)
                (#xE5DA . #x7E66)
                (#xE5DB . #x7E3B)
                (#xE5DC . #x7E35)
                (#xE5DD . #x7E39)
                (#xE5DE . #x7E43)
                (#xE5DF . #x7E37)
                (#xE5E0 . #x7E32)
                (#xE5E1 . #x7E3A)
                (#xE5E2 . #x7E67)
                (#xE5E3 . #x7E5D)
                (#xE5E4 . #x7E56)
                (#xE5E5 . #x7E5E)
                (#xE5E6 . #x7E59)
                (#xE5E7 . #x7E5A)
                (#xE5E8 . #x7E79)
                (#xE5E9 . #x7E6A)
                (#xE5EA . #x7E69)
                (#xE5EB . #x7E7C)
                (#xE5EC . #x7E7B)
                (#xE5ED . #x7E83)
                (#xE5EE . #x7DD5)
                (#xE5EF . #x7E7D)
                (#xE5F0 . #x8FAE)
                (#xE5F1 . #x7E7F)
                (#xE5F2 . #x7E88)
                (#xE5F3 . #x7E89)
                (#xE5F4 . #x7E8C)
                (#xE5F5 . #x7E92)
                (#xE5F6 . #x7E90)
                (#xE5F7 . #x7E93)
                (#xE5F8 . #x7E94)
                (#xE5F9 . #x7E96)
                (#xE5FA . #x7E8E)
                (#xE5FB . #x7E9B)
                (#xE5FC . #x7E9C)
                (#xE5FD . #x7F38)
                (#xE5FE . #x7F3A)
                (#xE6A1 . #x7F45)
                (#xE6A2 . #x7F4C)
                (#xE6A3 . #x7F4D)
                (#xE6A4 . #x7F4E)
                (#xE6A5 . #x7F50)
                (#xE6A6 . #x7F51)
                (#xE6A7 . #x7F55)
                (#xE6A8 . #x7F54)
                (#xE6A9 . #x7F58)
                (#xE6AA . #x7F5F)
                (#xE6AB . #x7F60)
                (#xE6AC . #x7F68)
                (#xE6AD . #x7F69)
                (#xE6AE . #x7F67)
                (#xE6AF . #x7F78)
                (#xE6B0 . #x7F82)
                (#xE6B1 . #x7F86)
                (#xE6B2 . #x7F83)
                (#xE6B3 . #x7F88)
                (#xE6B4 . #x7F87)
                (#xE6B5 . #x7F8C)
                (#xE6B6 . #x7F94)
                (#xE6B7 . #x7F9E)
                (#xE6B8 . #x7F9D)
                (#xE6B9 . #x7F9A)
                (#xE6BA . #x7FA3)
                (#xE6BB . #x7FAF)
                (#xE6BC . #x7FB2)
                (#xE6BD . #x7FB9)
                (#xE6BE . #x7FAE)
                (#xE6BF . #x7FB6)
                (#xE6C0 . #x7FB8)
                (#xE6C1 . #x8B71)
                (#xE6C2 . #x7FC5)
                (#xE6C3 . #x7FC6)
                (#xE6C4 . #x7FCA)
                (#xE6C5 . #x7FD5)
                (#xE6C6 . #x7FD4)
                (#xE6C7 . #x7FE1)
                (#xE6C8 . #x7FE6)
                (#xE6C9 . #x7FE9)
                (#xE6CA . #x7FF3)
                (#xE6CB . #x7FF9)
                (#xE6CC . #x98DC)
                (#xE6CD . #x8006)
                (#xE6CE . #x8004)
                (#xE6CF . #x800B)
                (#xE6D0 . #x8012)
                (#xE6D1 . #x8018)
                (#xE6D2 . #x8019)
                (#xE6D3 . #x801C)
                (#xE6D4 . #x8021)
                (#xE6D5 . #x8028)
                (#xE6D6 . #x803F)
                (#xE6D7 . #x803B)
                (#xE6D8 . #x804A)
                (#xE6D9 . #x8046)
                (#xE6DA . #x8052)
                (#xE6DB . #x8058)
                (#xE6DC . #x805A)
                (#xE6DD . #x805F)
                (#xE6DE . #x8062)
                (#xE6DF . #x8068)
                (#xE6E0 . #x8073)
                (#xE6E1 . #x8072)
                (#xE6E2 . #x8070)
                (#xE6E3 . #x8076)
                (#xE6E4 . #x8079)
                (#xE6E5 . #x807D)
                (#xE6E6 . #x807F)
                (#xE6E7 . #x8084)
                (#xE6E8 . #x8086)
                (#xE6E9 . #x8085)
                (#xE6EA . #x809B)
                (#xE6EB . #x8093)
                (#xE6EC . #x809A)
                (#xE6ED . #x80AD)
                (#xE6EE . #x5190)
                (#xE6EF . #x80AC)
                (#xE6F0 . #x80DB)
                (#xE6F1 . #x80E5)
                (#xE6F2 . #x80D9)
                (#xE6F3 . #x80DD)
                (#xE6F4 . #x80C4)
                (#xE6F5 . #x80DA)
                (#xE6F6 . #x80D6)
                (#xE6F7 . #x8109)
                (#xE6F8 . #x80EF)
                (#xE6F9 . #x80F1)
                (#xE6FA . #x811B)
                (#xE6FB . #x8129)
                (#xE6FC . #x8123)
                (#xE6FD . #x812F)
                (#xE6FE . #x814B)
                (#xE7A1 . #x968B)
                (#xE7A2 . #x8146)
                (#xE7A3 . #x813E)
                (#xE7A4 . #x8153)
                (#xE7A5 . #x8151)
                (#xE7A6 . #x80FC)
                (#xE7A7 . #x8171)
                (#xE7A8 . #x816E)
                (#xE7A9 . #x8165)
                (#xE7AA . #x8166)
                (#xE7AB . #x8174)
                (#xE7AC . #x8183)
                (#xE7AD . #x8188)
                (#xE7AE . #x818A)
                (#xE7AF . #x8180)
                (#xE7B0 . #x8182)
                (#xE7B1 . #x81A0)
                (#xE7B2 . #x8195)
                (#xE7B3 . #x81A4)
                (#xE7B4 . #x81A3)
                (#xE7B5 . #x815F)
                (#xE7B6 . #x8193)
                (#xE7B7 . #x81A9)
                (#xE7B8 . #x81B0)
                (#xE7B9 . #x81B5)
                (#xE7BA . #x81BE)
                (#xE7BB . #x81B8)
                (#xE7BC . #x81BD)
                (#xE7BD . #x81C0)
                (#xE7BE . #x81C2)
                (#xE7BF . #x81BA)
                (#xE7C0 . #x81C9)
                (#xE7C1 . #x81CD)
                (#xE7C2 . #x81D1)
                (#xE7C3 . #x81D9)
                (#xE7C4 . #x81D8)
                (#xE7C5 . #x81C8)
                (#xE7C6 . #x81DA)
                (#xE7C7 . #x81DF)
                (#xE7C8 . #x81E0)
                (#xE7C9 . #x81E7)
                (#xE7CA . #x81FA)
                (#xE7CB . #x81FB)
                (#xE7CC . #x81FE)
                (#xE7CD . #x8201)
                (#xE7CE . #x8202)
                (#xE7CF . #x8205)
                (#xE7D0 . #x8207)
                (#xE7D1 . #x820A)
                (#xE7D2 . #x820D)
                (#xE7D3 . #x8210)
                (#xE7D4 . #x8216)
                (#xE7D5 . #x8229)
                (#xE7D6 . #x822B)
                (#xE7D7 . #x8238)
                (#xE7D8 . #x8233)
                (#xE7D9 . #x8240)
                (#xE7DA . #x8259)
                (#xE7DB . #x8258)
                (#xE7DC . #x825D)
                (#xE7DD . #x825A)
                (#xE7DE . #x825F)
                (#xE7DF . #x8264)
                (#xE7E0 . #x8262)
                (#xE7E1 . #x8268)
                (#xE7E2 . #x826A)
                (#xE7E3 . #x826B)
                (#xE7E4 . #x822E)
                (#xE7E5 . #x8271)
                (#xE7E6 . #x8277)
                (#xE7E7 . #x8278)
                (#xE7E8 . #x827E)
                (#xE7E9 . #x828D)
                (#xE7EA . #x8292)
                (#xE7EB . #x82AB)
                (#xE7EC . #x829F)
                (#xE7ED . #x82BB)
                (#xE7EE . #x82AC)
                (#xE7EF . #x82E1)
                (#xE7F0 . #x82E3)
                (#xE7F1 . #x82DF)
                (#xE7F2 . #x82D2)
                (#xE7F3 . #x82F4)
                (#xE7F4 . #x82F3)
                (#xE7F5 . #x82FA)
                (#xE7F6 . #x8393)
                (#xE7F7 . #x8303)
                (#xE7F8 . #x82FB)
                (#xE7F9 . #x82F9)
                (#xE7FA . #x82DE)
                (#xE7FB . #x8306)
                (#xE7FC . #x82DC)
                (#xE7FD . #x8309)
                (#xE7FE . #x82D9)
                (#xE8A1 . #x8335)
                (#xE8A2 . #x8334)
                (#xE8A3 . #x8316)
                (#xE8A4 . #x8332)
                (#xE8A5 . #x8331)
                (#xE8A6 . #x8340)
                (#xE8A7 . #x8339)
                (#xE8A8 . #x8350)
                (#xE8A9 . #x8345)
                (#xE8AA . #x832F)
                (#xE8AB . #x832B)
                (#xE8AC . #x8317)
                (#xE8AD . #x8318)
                (#xE8AE . #x8385)
                (#xE8AF . #x839A)
                (#xE8B0 . #x83AA)
                (#xE8B1 . #x839F)
                (#xE8B2 . #x83A2)
                (#xE8B3 . #x8396)
                (#xE8B4 . #x8323)
                (#xE8B5 . #x838E)
                (#xE8B6 . #x8387)
                (#xE8B7 . #x838A)
                (#xE8B8 . #x837C)
                (#xE8B9 . #x83B5)
                (#xE8BA . #x8373)
                (#xE8BB . #x8375)
                (#xE8BC . #x83A0)
                (#xE8BD . #x8389)
                (#xE8BE . #x83A8)
                (#xE8BF . #x83F4)
                (#xE8C0 . #x8413)
                (#xE8C1 . #x83EB)
                (#xE8C2 . #x83CE)
                (#xE8C3 . #x83FD)
                (#xE8C4 . #x8403)
                (#xE8C5 . #x83D8)
                (#xE8C6 . #x840B)
                (#xE8C7 . #x83C1)
                (#xE8C8 . #x83F7)
                (#xE8C9 . #x8407)
                (#xE8CA . #x83E0)
                (#xE8CB . #x83F2)
                (#xE8CC . #x840D)
                (#xE8CD . #x8422)
                (#xE8CE . #x8420)
                (#xE8CF . #x83BD)
                (#xE8D0 . #x8438)
                (#xE8D1 . #x8506)
                (#xE8D2 . #x83FB)
                (#xE8D3 . #x846D)
                (#xE8D4 . #x842A)
                (#xE8D5 . #x843C)
                (#xE8D6 . #x855A)
                (#xE8D7 . #x8484)
                (#xE8D8 . #x8477)
                (#xE8D9 . #x846B)
                (#xE8DA . #x84AD)
                (#xE8DB . #x846E)
                (#xE8DC . #x8482)
                (#xE8DD . #x8469)
                (#xE8DE . #x8446)
                (#xE8DF . #x842C)
                (#xE8E0 . #x846F)
                (#xE8E1 . #x8479)
                (#xE8E2 . #x8435)
                (#xE8E3 . #x84CA)
                (#xE8E4 . #x8462)
                (#xE8E5 . #x84B9)
                (#xE8E6 . #x84BF)
                (#xE8E7 . #x849F)
                (#xE8E8 . #x84D9)
                (#xE8E9 . #x84CD)
                (#xE8EA . #x84BB)
                (#xE8EB . #x84DA)
                (#xE8EC . #x84D0)
                (#xE8ED . #x84C1)
                (#xE8EE . #x84C6)
                (#xE8EF . #x84D6)
                (#xE8F0 . #x84A1)
                (#xE8F1 . #x8521)
                (#xE8F2 . #x84FF)
                (#xE8F3 . #x84F4)
                (#xE8F4 . #x8517)
                (#xE8F5 . #x8518)
                (#xE8F6 . #x852C)
                (#xE8F7 . #x851F)
                (#xE8F8 . #x8515)
                (#xE8F9 . #x8514)
                (#xE8FA . #x84FC)
                (#xE8FB . #x8540)
                (#xE8FC . #x8563)
                (#xE8FD . #x8558)
                (#xE8FE . #x8548)
                (#xE9A1 . #x8541)
                (#xE9A2 . #x8602)
                (#xE9A3 . #x854B)
                (#xE9A4 . #x8555)
                (#xE9A5 . #x8580)
                (#xE9A6 . #x85A4)
                (#xE9A7 . #x8588)
                (#xE9A8 . #x8591)
                (#xE9A9 . #x858A)
                (#xE9AA . #x85A8)
                (#xE9AB . #x856D)
                (#xE9AC . #x8594)
                (#xE9AD . #x859B)
                (#xE9AE . #x85EA)
                (#xE9AF . #x8587)
                (#xE9B0 . #x859C)
                (#xE9B1 . #x8577)
                (#xE9B2 . #x857E)
                (#xE9B3 . #x8590)
                (#xE9B4 . #x85C9)
                (#xE9B5 . #x85BA)
                (#xE9B6 . #x85CF)
                (#xE9B7 . #x85B9)
                (#xE9B8 . #x85D0)
                (#xE9B9 . #x85D5)
                (#xE9BA . #x85DD)
                (#xE9BB . #x85E5)
                (#xE9BC . #x85DC)
                (#xE9BD . #x85F9)
                (#xE9BE . #x860A)
                (#xE9BF . #x8613)
                (#xE9C0 . #x860B)
                (#xE9C1 . #x85FE)
                (#xE9C2 . #x85FA)
                (#xE9C3 . #x8606)
                (#xE9C4 . #x8622)
                (#xE9C5 . #x861A)
                (#xE9C6 . #x8630)
                (#xE9C7 . #x863F)
                (#xE9C8 . #x864D)
                (#xE9C9 . #x4E55)
                (#xE9CA . #x8654)
                (#xE9CB . #x865F)
                (#xE9CC . #x8667)
                (#xE9CD . #x8671)
                (#xE9CE . #x8693)
                (#xE9CF . #x86A3)
                (#xE9D0 . #x86A9)
                (#xE9D1 . #x86AA)
                (#xE9D2 . #x868B)
                (#xE9D3 . #x868C)
                (#xE9D4 . #x86B6)
                (#xE9D5 . #x86AF)
                (#xE9D6 . #x86C4)
                (#xE9D7 . #x86C6)
                (#xE9D8 . #x86B0)
                (#xE9D9 . #x86C9)
                (#xE9DA . #x8823)
                (#xE9DB . #x86AB)
                (#xE9DC . #x86D4)
                (#xE9DD . #x86DE)
                (#xE9DE . #x86E9)
                (#xE9DF . #x86EC)
                (#xE9E0 . #x86DF)
                (#xE9E1 . #x86DB)
                (#xE9E2 . #x86EF)
                (#xE9E3 . #x8712)
                (#xE9E4 . #x8706)
                (#xE9E5 . #x8708)
                (#xE9E6 . #x8700)
                (#xE9E7 . #x8703)
                (#xE9E8 . #x86FB)
                (#xE9E9 . #x8711)
                (#xE9EA . #x8709)
                (#xE9EB . #x870D)
                (#xE9EC . #x86F9)
                (#xE9ED . #x870A)
                (#xE9EE . #x8734)
                (#xE9EF . #x873F)
                (#xE9F0 . #x8737)
                (#xE9F1 . #x873B)
                (#xE9F2 . #x8725)
                (#xE9F3 . #x8729)
                (#xE9F4 . #x871A)
                (#xE9F5 . #x8760)
                (#xE9F6 . #x875F)
                (#xE9F7 . #x8778)
                (#xE9F8 . #x874C)
                (#xE9F9 . #x874E)
                (#xE9FA . #x8774)
                (#xE9FB . #x8757)
                (#xE9FC . #x8768)
                (#xE9FD . #x876E)
                (#xE9FE . #x8759)
                (#xEAA1 . #x8753)
                (#xEAA2 . #x8763)
                (#xEAA3 . #x876A)
                (#xEAA4 . #x8805)
                (#xEAA5 . #x87A2)
                (#xEAA6 . #x879F)
                (#xEAA7 . #x8782)
                (#xEAA8 . #x87AF)
                (#xEAA9 . #x87CB)
                (#xEAAA . #x87BD)
                (#xEAAB . #x87C0)
                (#xEAAC . #x87D0)
                (#xEAAD . #x96D6)
                (#xEAAE . #x87AB)
                (#xEAAF . #x87C4)
                (#xEAB0 . #x87B3)
                (#xEAB1 . #x87C7)
                (#xEAB2 . #x87C6)
                (#xEAB3 . #x87BB)
                (#xEAB4 . #x87EF)
                (#xEAB5 . #x87F2)
                (#xEAB6 . #x87E0)
                (#xEAB7 . #x880F)
                (#xEAB8 . #x880D)
                (#xEAB9 . #x87FE)
                (#xEABA . #x87F6)
                (#xEABB . #x87F7)
                (#xEABC . #x880E)
                (#xEABD . #x87D2)
                (#xEABE . #x8811)
                (#xEABF . #x8816)
                (#xEAC0 . #x8815)
                (#xEAC1 . #x8822)
                (#xEAC2 . #x8821)
                (#xEAC3 . #x8831)
                (#xEAC4 . #x8836)
                (#xEAC5 . #x8839)
                (#xEAC6 . #x8827)
                (#xEAC7 . #x883B)
                (#xEAC8 . #x8844)
                (#xEAC9 . #x8842)
                (#xEACA . #x8852)
                (#xEACB . #x8859)
                (#xEACC . #x885E)
                (#xEACD . #x8862)
                (#xEACE . #x886B)
                (#xEACF . #x8881)
                (#xEAD0 . #x887E)
                (#xEAD1 . #x889E)
                (#xEAD2 . #x8875)
                (#xEAD3 . #x887D)
                (#xEAD4 . #x88B5)
                (#xEAD5 . #x8872)
                (#xEAD6 . #x8882)
                (#xEAD7 . #x8897)
                (#xEAD8 . #x8892)
                (#xEAD9 . #x88AE)
                (#xEADA . #x8899)
                (#xEADB . #x88A2)
                (#xEADC . #x888D)
                (#xEADD . #x88A4)
                (#xEADE . #x88B0)
                (#xEADF . #x88BF)
                (#xEAE0 . #x88B1)
                (#xEAE1 . #x88C3)
                (#xEAE2 . #x88C4)
                (#xEAE3 . #x88D4)
                (#xEAE4 . #x88D8)
                (#xEAE5 . #x88D9)
                (#xEAE6 . #x88DD)
                (#xEAE7 . #x88F9)
                (#xEAE8 . #x8902)
                (#xEAE9 . #x88FC)
                (#xEAEA . #x88F4)
                (#xEAEB . #x88E8)
                (#xEAEC . #x88F2)
                (#xEAED . #x8904)
                (#xEAEE . #x890C)
                (#xEAEF . #x890A)
                (#xEAF0 . #x8913)
                (#xEAF1 . #x8943)
                (#xEAF2 . #x891E)
                (#xEAF3 . #x8925)
                (#xEAF4 . #x892A)
                (#xEAF5 . #x892B)
                (#xEAF6 . #x8941)
                (#xEAF7 . #x8944)
                (#xEAF8 . #x893B)
                (#xEAF9 . #x8936)
                (#xEAFA . #x8938)
                (#xEAFB . #x894C)
                (#xEAFC . #x891D)
                (#xEAFD . #x8960)
                (#xEAFE . #x895E)
                (#xEBA1 . #x8966)
                (#xEBA2 . #x8964)
                (#xEBA3 . #x896D)
                (#xEBA4 . #x896A)
                (#xEBA5 . #x896F)
                (#xEBA6 . #x8974)
                (#xEBA7 . #x8977)
                (#xEBA8 . #x897E)
                (#xEBA9 . #x8983)
                (#xEBAA . #x8988)
                (#xEBAB . #x898A)
                (#xEBAC . #x8993)
                (#xEBAD . #x8998)
                (#xEBAE . #x89A1)
                (#xEBAF . #x89A9)
                (#xEBB0 . #x89A6)
                (#xEBB1 . #x89AC)
                (#xEBB2 . #x89AF)
                (#xEBB3 . #x89B2)
                (#xEBB4 . #x89BA)
                (#xEBB5 . #x89BD)
                (#xEBB6 . #x89BF)
                (#xEBB7 . #x89C0)
                (#xEBB8 . #x89DA)
                (#xEBB9 . #x89DC)
                (#xEBBA . #x89DD)
                (#xEBBB . #x89E7)
                (#xEBBC . #x89F4)
                (#xEBBD . #x89F8)
                (#xEBBE . #x8A03)
                (#xEBBF . #x8A16)
                (#xEBC0 . #x8A10)
                (#xEBC1 . #x8A0C)
                (#xEBC2 . #x8A1B)
                (#xEBC3 . #x8A1D)
                (#xEBC4 . #x8A25)
                (#xEBC5 . #x8A36)
                (#xEBC6 . #x8A41)
                (#xEBC7 . #x8A5B)
                (#xEBC8 . #x8A52)
                (#xEBC9 . #x8A46)
                (#xEBCA . #x8A48)
                (#xEBCB . #x8A7C)
                (#xEBCC . #x8A6D)
                (#xEBCD . #x8A6C)
                (#xEBCE . #x8A62)
                (#xEBCF . #x8A85)
                (#xEBD0 . #x8A82)
                (#xEBD1 . #x8A84)
                (#xEBD2 . #x8AA8)
                (#xEBD3 . #x8AA1)
                (#xEBD4 . #x8A91)
                (#xEBD5 . #x8AA5)
                (#xEBD6 . #x8AA6)
                (#xEBD7 . #x8A9A)
                (#xEBD8 . #x8AA3)
                (#xEBD9 . #x8AC4)
                (#xEBDA . #x8ACD)
                (#xEBDB . #x8AC2)
                (#xEBDC . #x8ADA)
                (#xEBDD . #x8AEB)
                (#xEBDE . #x8AF3)
                (#xEBDF . #x8AE7)
                (#xEBE0 . #x8AE4)
                (#xEBE1 . #x8AF1)
                (#xEBE2 . #x8B14)
                (#xEBE3 . #x8AE0)
                (#xEBE4 . #x8AE2)
                (#xEBE5 . #x8AF7)
                (#xEBE6 . #x8ADE)
                (#xEBE7 . #x8ADB)
                (#xEBE8 . #x8B0C)
                (#xEBE9 . #x8B07)
                (#xEBEA . #x8B1A)
                (#xEBEB . #x8AE1)
                (#xEBEC . #x8B16)
                (#xEBED . #x8B10)
                (#xEBEE . #x8B17)
                (#xEBEF . #x8B20)
                (#xEBF0 . #x8B33)
                (#xEBF1 . #x97AB)
                (#xEBF2 . #x8B26)
                (#xEBF3 . #x8B2B)
                (#xEBF4 . #x8B3E)
                (#xEBF5 . #x8B28)
                (#xEBF6 . #x8B41)
                (#xEBF7 . #x8B4C)
                (#xEBF8 . #x8B4F)
                (#xEBF9 . #x8B4E)
                (#xEBFA . #x8B49)
                (#xEBFB . #x8B56)
                (#xEBFC . #x8B5B)
                (#xEBFD . #x8B5A)
                (#xEBFE . #x8B6B)
                (#xECA1 . #x8B5F)
                (#xECA2 . #x8B6C)
                (#xECA3 . #x8B6F)
                (#xECA4 . #x8B74)
                (#xECA5 . #x8B7D)
                (#xECA6 . #x8B80)
                (#xECA7 . #x8B8C)
                (#xECA8 . #x8B8E)
                (#xECA9 . #x8B92)
                (#xECAA . #x8B93)
                (#xECAB . #x8B96)
                (#xECAC . #x8B99)
                (#xECAD . #x8B9A)
                (#xECAE . #x8C3A)
                (#xECAF . #x8C41)
                (#xECB0 . #x8C3F)
                (#xECB1 . #x8C48)
                (#xECB2 . #x8C4C)
                (#xECB3 . #x8C4E)
                (#xECB4 . #x8C50)
                (#xECB5 . #x8C55)
                (#xECB6 . #x8C62)
                (#xECB7 . #x8C6C)
                (#xECB8 . #x8C78)
                (#xECB9 . #x8C7A)
                (#xECBA . #x8C82)
                (#xECBB . #x8C89)
                (#xECBC . #x8C85)
                (#xECBD . #x8C8A)
                (#xECBE . #x8C8D)
                (#xECBF . #x8C8E)
                (#xECC0 . #x8C94)
                (#xECC1 . #x8C7C)
                (#xECC2 . #x8C98)
                (#xECC3 . #x621D)
                (#xECC4 . #x8CAD)
                (#xECC5 . #x8CAA)
                (#xECC6 . #x8CBD)
                (#xECC7 . #x8CB2)
                (#xECC8 . #x8CB3)
                (#xECC9 . #x8CAE)
                (#xECCA . #x8CB6)
                (#xECCB . #x8CC8)
                (#xECCC . #x8CC1)
                (#xECCD . #x8CE4)
                (#xECCE . #x8CE3)
                (#xECCF . #x8CDA)
                (#xECD0 . #x8CFD)
                (#xECD1 . #x8CFA)
                (#xECD2 . #x8CFB)
                (#xECD3 . #x8D04)
                (#xECD4 . #x8D05)
                (#xECD5 . #x8D0A)
                (#xECD6 . #x8D07)
                (#xECD7 . #x8D0F)
                (#xECD8 . #x8D0D)
                (#xECD9 . #x8D10)
                (#xECDA . #x9F4E)
                (#xECDB . #x8D13)
                (#xECDC . #x8CCD)
                (#xECDD . #x8D14)
                (#xECDE . #x8D16)
                (#xECDF . #x8D67)
                (#xECE0 . #x8D6D)
                (#xECE1 . #x8D71)
                (#xECE2 . #x8D73)
                (#xECE3 . #x8D81)
                (#xECE4 . #x8D99)
                (#xECE5 . #x8DC2)
                (#xECE6 . #x8DBE)
                (#xECE7 . #x8DBA)
                (#xECE8 . #x8DCF)
                (#xECE9 . #x8DDA)
                (#xECEA . #x8DD6)
                (#xECEB . #x8DCC)
                (#xECEC . #x8DDB)
                (#xECED . #x8DCB)
                (#xECEE . #x8DEA)
                (#xECEF . #x8DEB)
                (#xECF0 . #x8DDF)
                (#xECF1 . #x8DE3)
                (#xECF2 . #x8DFC)
                (#xECF3 . #x8E08)
                (#xECF4 . #x8E09)
                (#xECF5 . #x8DFF)
                (#xECF6 . #x8E1D)
                (#xECF7 . #x8E1E)
                (#xECF8 . #x8E10)
                (#xECF9 . #x8E1F)
                (#xECFA . #x8E42)
                (#xECFB . #x8E35)
                (#xECFC . #x8E30)
                (#xECFD . #x8E34)
                (#xECFE . #x8E4A)
                (#xEDA1 . #x8E47)
                (#xEDA2 . #x8E49)
                (#xEDA3 . #x8E4C)
                (#xEDA4 . #x8E50)
                (#xEDA5 . #x8E48)
                (#xEDA6 . #x8E59)
                (#xEDA7 . #x8E64)
                (#xEDA8 . #x8E60)
                (#xEDA9 . #x8E2A)
                (#xEDAA . #x8E63)
                (#xEDAB . #x8E55)
                (#xEDAC . #x8E76)
                (#xEDAD . #x8E72)
                (#xEDAE . #x8E7C)
                (#xEDAF . #x8E81)
                (#xEDB0 . #x8E87)
                (#xEDB1 . #x8E85)
                (#xEDB2 . #x8E84)
                (#xEDB3 . #x8E8B)
                (#xEDB4 . #x8E8A)
                (#xEDB5 . #x8E93)
                (#xEDB6 . #x8E91)
                (#xEDB7 . #x8E94)
                (#xEDB8 . #x8E99)
                (#xEDB9 . #x8EAA)
                (#xEDBA . #x8EA1)
                (#xEDBB . #x8EAC)
                (#xEDBC . #x8EB0)
                (#xEDBD . #x8EC6)
                (#xEDBE . #x8EB1)
                (#xEDBF . #x8EBE)
                (#xEDC0 . #x8EC5)
                (#xEDC1 . #x8EC8)
                (#xEDC2 . #x8ECB)
                (#xEDC3 . #x8EDB)
                (#xEDC4 . #x8EE3)
                (#xEDC5 . #x8EFC)
                (#xEDC6 . #x8EFB)
                (#xEDC7 . #x8EEB)
                (#xEDC8 . #x8EFE)
                (#xEDC9 . #x8F0A)
                (#xEDCA . #x8F05)
                (#xEDCB . #x8F15)
                (#xEDCC . #x8F12)
                (#xEDCD . #x8F19)
                (#xEDCE . #x8F13)
                (#xEDCF . #x8F1C)
                (#xEDD0 . #x8F1F)
                (#xEDD1 . #x8F1B)
                (#xEDD2 . #x8F0C)
                (#xEDD3 . #x8F26)
                (#xEDD4 . #x8F33)
                (#xEDD5 . #x8F3B)
                (#xEDD6 . #x8F39)
                (#xEDD7 . #x8F45)
                (#xEDD8 . #x8F42)
                (#xEDD9 . #x8F3E)
                (#xEDDA . #x8F4C)
                (#xEDDB . #x8F49)
                (#xEDDC . #x8F46)
                (#xEDDD . #x8F4E)
                (#xEDDE . #x8F57)
                (#xEDDF . #x8F5C)
                (#xEDE0 . #x8F62)
                (#xEDE1 . #x8F63)
                (#xEDE2 . #x8F64)
                (#xEDE3 . #x8F9C)
                (#xEDE4 . #x8F9F)
                (#xEDE5 . #x8FA3)
                (#xEDE6 . #x8FAD)
                (#xEDE7 . #x8FAF)
                (#xEDE8 . #x8FB7)
                (#xEDE9 . #x8FDA)
                (#xEDEA . #x8FE5)
                (#xEDEB . #x8FE2)
                (#xEDEC . #x8FEA)
                (#xEDED . #x8FEF)
                (#xEDEE . #x9087)
                (#xEDEF . #x8FF4)
                (#xEDF0 . #x9005)
                (#xEDF1 . #x8FF9)
                (#xEDF2 . #x8FFA)
                (#xEDF3 . #x9011)
                (#xEDF4 . #x9015)
                (#xEDF5 . #x9021)
                (#xEDF6 . #x900D)
                (#xEDF7 . #x901E)
                (#xEDF8 . #x9016)
                (#xEDF9 . #x900B)
                (#xEDFA . #x9027)
                (#xEDFB . #x9036)
                (#xEDFC . #x9035)
                (#xEDFD . #x9039)
                (#xEDFE . #x8FF8)
                (#xEEA1 . #x904F)
                (#xEEA2 . #x9050)
                (#xEEA3 . #x9051)
                (#xEEA4 . #x9052)
                (#xEEA5 . #x900E)
                (#xEEA6 . #x9049)
                (#xEEA7 . #x903E)
                (#xEEA8 . #x9056)
                (#xEEA9 . #x9058)
                (#xEEAA . #x905E)
                (#xEEAB . #x9068)
                (#xEEAC . #x906F)
                (#xEEAD . #x9076)
                (#xEEAE . #x96A8)
                (#xEEAF . #x9072)
                (#xEEB0 . #x9082)
                (#xEEB1 . #x907D)
                (#xEEB2 . #x9081)
                (#xEEB3 . #x9080)
                (#xEEB4 . #x908A)
                (#xEEB5 . #x9089)
                (#xEEB6 . #x908F)
                (#xEEB7 . #x90A8)
                (#xEEB8 . #x90AF)
                (#xEEB9 . #x90B1)
                (#xEEBA . #x90B5)
                (#xEEBB . #x90E2)
                (#xEEBC . #x90E4)
                (#xEEBD . #x6248)
                (#xEEBE . #x90DB)
                (#xEEBF . #x9102)
                (#xEEC0 . #x9112)
                (#xEEC1 . #x9119)
                (#xEEC2 . #x9132)
                (#xEEC3 . #x9130)
                (#xEEC4 . #x914A)
                (#xEEC5 . #x9156)
                (#xEEC6 . #x9158)
                (#xEEC7 . #x9163)
                (#xEEC8 . #x9165)
                (#xEEC9 . #x9169)
                (#xEECA . #x9173)
                (#xEECB . #x9172)
                (#xEECC . #x918B)
                (#xEECD . #x9189)
                (#xEECE . #x9182)
                (#xEECF . #x91A2)
                (#xEED0 . #x91AB)
                (#xEED1 . #x91AF)
                (#xEED2 . #x91AA)
                (#xEED3 . #x91B5)
                (#xEED4 . #x91B4)
                (#xEED5 . #x91BA)
                (#xEED6 . #x91C0)
                (#xEED7 . #x91C1)
                (#xEED8 . #x91C9)
                (#xEED9 . #x91CB)
                (#xEEDA . #x91D0)
                (#xEEDB . #x91D6)
                (#xEEDC . #x91DF)
                (#xEEDD . #x91E1)
                (#xEEDE . #x91DB)
                (#xEEDF . #x91FC)
                (#xEEE0 . #x91F5)
                (#xEEE1 . #x91F6)
                (#xEEE2 . #x921E)
                (#xEEE3 . #x91FF)
                (#xEEE4 . #x9214)
                (#xEEE5 . #x922C)
                (#xEEE6 . #x9215)
                (#xEEE7 . #x9211)
                (#xEEE8 . #x925E)
                (#xEEE9 . #x9257)
                (#xEEEA . #x9245)
                (#xEEEB . #x9249)
                (#xEEEC . #x9264)
                (#xEEED . #x9248)
                (#xEEEE . #x9295)
                (#xEEEF . #x923F)
                (#xEEF0 . #x924B)
                (#xEEF1 . #x9250)
                (#xEEF2 . #x929C)
                (#xEEF3 . #x9296)
                (#xEEF4 . #x9293)
                (#xEEF5 . #x929B)
                (#xEEF6 . #x925A)
                (#xEEF7 . #x92CF)
                (#xEEF8 . #x92B9)
                (#xEEF9 . #x92B7)
                (#xEEFA . #x92E9)
                (#xEEFB . #x930F)
                (#xEEFC . #x92FA)
                (#xEEFD . #x9344)
                (#xEEFE . #x932E)
                (#xEFA1 . #x9319)
                (#xEFA2 . #x9322)
                (#xEFA3 . #x931A)
                (#xEFA4 . #x9323)
                (#xEFA5 . #x933A)
                (#xEFA6 . #x9335)
                (#xEFA7 . #x933B)
                (#xEFA8 . #x935C)
                (#xEFA9 . #x9360)
                (#xEFAA . #x937C)
                (#xEFAB . #x936E)
                (#xEFAC . #x9356)
                (#xEFAD . #x93B0)
                (#xEFAE . #x93AC)
                (#xEFAF . #x93AD)
                (#xEFB0 . #x9394)
                (#xEFB1 . #x93B9)
                (#xEFB2 . #x93D6)
                (#xEFB3 . #x93D7)
                (#xEFB4 . #x93E8)
                (#xEFB5 . #x93E5)
                (#xEFB6 . #x93D8)
                (#xEFB7 . #x93C3)
                (#xEFB8 . #x93DD)
                (#xEFB9 . #x93D0)
                (#xEFBA . #x93C8)
                (#xEFBB . #x93E4)
                (#xEFBC . #x941A)
                (#xEFBD . #x9414)
                (#xEFBE . #x9413)
                (#xEFBF . #x9403)
                (#xEFC0 . #x9407)
                (#xEFC1 . #x9410)
                (#xEFC2 . #x9436)
                (#xEFC3 . #x942B)
                (#xEFC4 . #x9435)
                (#xEFC5 . #x9421)
                (#xEFC6 . #x943A)
                (#xEFC7 . #x9441)
                (#xEFC8 . #x9452)
                (#xEFC9 . #x9444)
                (#xEFCA . #x945B)
                (#xEFCB . #x9460)
                (#xEFCC . #x9462)
                (#xEFCD . #x945E)
                (#xEFCE . #x946A)
                (#xEFCF . #x9229)
                (#xEFD0 . #x9470)
                (#xEFD1 . #x9475)
                (#xEFD2 . #x9477)
                (#xEFD3 . #x947D)
                (#xEFD4 . #x945A)
                (#xEFD5 . #x947C)
                (#xEFD6 . #x947E)
                (#xEFD7 . #x9481)
                (#xEFD8 . #x947F)
                (#xEFD9 . #x9582)
                (#xEFDA . #x9587)
                (#xEFDB . #x958A)
                (#xEFDC . #x9594)
                (#xEFDD . #x9596)
                (#xEFDE . #x9598)
                (#xEFDF . #x9599)
                (#xEFE0 . #x95A0)
                (#xEFE1 . #x95A8)
                (#xEFE2 . #x95A7)
                (#xEFE3 . #x95AD)
                (#xEFE4 . #x95BC)
                (#xEFE5 . #x95BB)
                (#xEFE6 . #x95B9)
                (#xEFE7 . #x95BE)
                (#xEFE8 . #x95CA)
                (#xEFE9 . #x6FF6)
                (#xEFEA . #x95C3)
                (#xEFEB . #x95CD)
                (#xEFEC . #x95CC)
                (#xEFED . #x95D5)
                (#xEFEE . #x95D4)
                (#xEFEF . #x95D6)
                (#xEFF0 . #x95DC)
                (#xEFF1 . #x95E1)
                (#xEFF2 . #x95E5)
                (#xEFF3 . #x95E2)
                (#xEFF4 . #x9621)
                (#xEFF5 . #x9628)
                (#xEFF6 . #x962E)
                (#xEFF7 . #x962F)
                (#xEFF8 . #x9642)
                (#xEFF9 . #x964C)
                (#xEFFA . #x964F)
                (#xEFFB . #x964B)
                (#xEFFC . #x9677)
                (#xEFFD . #x965C)
                (#xEFFE . #x965E)
                (#xF0A1 . #x965D)
                (#xF0A2 . #x965F)
                (#xF0A3 . #x9666)
                (#xF0A4 . #x9672)
                (#xF0A5 . #x966C)
                (#xF0A6 . #x968D)
                (#xF0A7 . #x9698)
                (#xF0A8 . #x9695)
                (#xF0A9 . #x9697)
                (#xF0AA . #x96AA)
                (#xF0AB . #x96A7)
                (#xF0AC . #x96B1)
                (#xF0AD . #x96B2)
                (#xF0AE . #x96B0)
                (#xF0AF . #x96B4)
                (#xF0B0 . #x96B6)
                (#xF0B1 . #x96B8)
                (#xF0B2 . #x96B9)
                (#xF0B3 . #x96CE)
                (#xF0B4 . #x96CB)
                (#xF0B5 . #x96C9)
                (#xF0B6 . #x96CD)
                (#xF0B7 . #x894D)
                (#xF0B8 . #x96DC)
                (#xF0B9 . #x970D)
                (#xF0BA . #x96D5)
                (#xF0BB . #x96F9)
                (#xF0BC . #x9704)
                (#xF0BD . #x9706)
                (#xF0BE . #x9708)
                (#xF0BF . #x9713)
                (#xF0C0 . #x970E)
                (#xF0C1 . #x9711)
                (#xF0C2 . #x970F)
                (#xF0C3 . #x9716)
                (#xF0C4 . #x9719)
                (#xF0C5 . #x9724)
                (#xF0C6 . #x972A)
                (#xF0C7 . #x9730)
                (#xF0C8 . #x9739)
                (#xF0C9 . #x973D)
                (#xF0CA . #x973E)
                (#xF0CB . #x9744)
                (#xF0CC . #x9746)
                (#xF0CD . #x9748)
                (#xF0CE . #x9742)
                (#xF0CF . #x9749)
                (#xF0D0 . #x975C)
                (#xF0D1 . #x9760)
                (#xF0D2 . #x9764)
                (#xF0D3 . #x9766)
                (#xF0D4 . #x9768)
                (#xF0D5 . #x52D2)
                (#xF0D6 . #x976B)
                (#xF0D7 . #x9771)
                (#xF0D8 . #x9779)
                (#xF0D9 . #x9785)
                (#xF0DA . #x977C)
                (#xF0DB . #x9781)
                (#xF0DC . #x977A)
                (#xF0DD . #x9786)
                (#xF0DE . #x978B)
                (#xF0DF . #x978F)
                (#xF0E0 . #x9790)
                (#xF0E1 . #x979C)
                (#xF0E2 . #x97A8)
                (#xF0E3 . #x97A6)
                (#xF0E4 . #x97A3)
                (#xF0E5 . #x97B3)
                (#xF0E6 . #x97B4)
                (#xF0E7 . #x97C3)
                (#xF0E8 . #x97C6)
                (#xF0E9 . #x97C8)
                (#xF0EA . #x97CB)
                (#xF0EB . #x97DC)
                (#xF0EC . #x97ED)
                (#xF0ED . #x9F4F)
                (#xF0EE . #x97F2)
                (#xF0EF . #x7ADF)
                (#xF0F0 . #x97F6)
                (#xF0F1 . #x97F5)
                (#xF0F2 . #x980F)
                (#xF0F3 . #x980C)
                (#xF0F4 . #x9838)
                (#xF0F5 . #x9824)
                (#xF0F6 . #x9821)
                (#xF0F7 . #x9837)
                (#xF0F8 . #x983D)
                (#xF0F9 . #x9846)
                (#xF0FA . #x984F)
                (#xF0FB . #x984B)
                (#xF0FC . #x986B)
                (#xF0FD . #x986F)
                (#xF0FE . #x9870)
                (#xF1A1 . #x9871)
                (#xF1A2 . #x9874)
                (#xF1A3 . #x9873)
                (#xF1A4 . #x98AA)
                (#xF1A5 . #x98AF)
                (#xF1A6 . #x98B1)
                (#xF1A7 . #x98B6)
                (#xF1A8 . #x98C4)
                (#xF1A9 . #x98C3)
                (#xF1AA . #x98C6)
                (#xF1AB . #x98E9)
                (#xF1AC . #x98EB)
                (#xF1AD . #x9903)
                (#xF1AE . #x9909)
                (#xF1AF . #x9912)
                (#xF1B0 . #x9914)
                (#xF1B1 . #x9918)
                (#xF1B2 . #x9921)
                (#xF1B3 . #x991D)
                (#xF1B4 . #x991E)
                (#xF1B5 . #x9924)
                (#xF1B6 . #x9920)
                (#xF1B7 . #x992C)
                (#xF1B8 . #x992E)
                (#xF1B9 . #x993D)
                (#xF1BA . #x993E)
                (#xF1BB . #x9942)
                (#xF1BC . #x9949)
                (#xF1BD . #x9945)
                (#xF1BE . #x9950)
                (#xF1BF . #x994B)
                (#xF1C0 . #x9951)
                (#xF1C1 . #x9952)
                (#xF1C2 . #x994C)
                (#xF1C3 . #x9955)
                (#xF1C4 . #x9997)
                (#xF1C5 . #x9998)
                (#xF1C6 . #x99A5)
                (#xF1C7 . #x99AD)
                (#xF1C8 . #x99AE)
                (#xF1C9 . #x99BC)
                (#xF1CA . #x99DF)
                (#xF1CB . #x99DB)
                (#xF1CC . #x99DD)
                (#xF1CD . #x99D8)
                (#xF1CE . #x99D1)
                (#xF1CF . #x99ED)
                (#xF1D0 . #x99EE)
                (#xF1D1 . #x99F1)
                (#xF1D2 . #x99F2)
                (#xF1D3 . #x99FB)
                (#xF1D4 . #x99F8)
                (#xF1D5 . #x9A01)
                (#xF1D6 . #x9A0F)
                (#xF1D7 . #x9A05)
                (#xF1D8 . #x99E2)
                (#xF1D9 . #x9A19)
                (#xF1DA . #x9A2B)
                (#xF1DB . #x9A37)
                (#xF1DC . #x9A45)
                (#xF1DD . #x9A42)
                (#xF1DE . #x9A40)
                (#xF1DF . #x9A43)
                (#xF1E0 . #x9A3E)
                (#xF1E1 . #x9A55)
                (#xF1E2 . #x9A4D)
                (#xF1E3 . #x9A5B)
                (#xF1E4 . #x9A57)
                (#xF1E5 . #x9A5F)
                (#xF1E6 . #x9A62)
                (#xF1E7 . #x9A65)
                (#xF1E8 . #x9A64)
                (#xF1E9 . #x9A69)
                (#xF1EA . #x9A6B)
                (#xF1EB . #x9A6A)
                (#xF1EC . #x9AAD)
                (#xF1ED . #x9AB0)
                (#xF1EE . #x9ABC)
                (#xF1EF . #x9AC0)
                (#xF1F0 . #x9ACF)
                (#xF1F1 . #x9AD1)
                (#xF1F2 . #x9AD3)
                (#xF1F3 . #x9AD4)
                (#xF1F4 . #x9ADE)
                (#xF1F5 . #x9ADF)
                (#xF1F6 . #x9AE2)
                (#xF1F7 . #x9AE3)
                (#xF1F8 . #x9AE6)
                (#xF1F9 . #x9AEF)
                (#xF1FA . #x9AEB)
                (#xF1FB . #x9AEE)
                (#xF1FC . #x9AF4)
                (#xF1FD . #x9AF1)
                (#xF1FE . #x9AF7)
                (#xF2A1 . #x9AFB)
                (#xF2A2 . #x9B06)
                (#xF2A3 . #x9B18)
                (#xF2A4 . #x9B1A)
                (#xF2A5 . #x9B1F)
                (#xF2A6 . #x9B22)
                (#xF2A7 . #x9B23)
                (#xF2A8 . #x9B25)
                (#xF2A9 . #x9B27)
                (#xF2AA . #x9B28)
                (#xF2AB . #x9B29)
                (#xF2AC . #x9B2A)
                (#xF2AD . #x9B2E)
                (#xF2AE . #x9B2F)
                (#xF2AF . #x9B32)
                (#xF2B0 . #x9B44)
                (#xF2B1 . #x9B43)
                (#xF2B2 . #x9B4F)
                (#xF2B3 . #x9B4D)
                (#xF2B4 . #x9B4E)
                (#xF2B5 . #x9B51)
                (#xF2B6 . #x9B58)
                (#xF2B7 . #x9B74)
                (#xF2B8 . #x9B93)
                (#xF2B9 . #x9B83)
                (#xF2BA . #x9B91)
                (#xF2BB . #x9B96)
                (#xF2BC . #x9B97)
                (#xF2BD . #x9B9F)
                (#xF2BE . #x9BA0)
                (#xF2BF . #x9BA8)
                (#xF2C0 . #x9BB4)
                (#xF2C1 . #x9BC0)
                (#xF2C2 . #x9BCA)
                (#xF2C3 . #x9BB9)
                (#xF2C4 . #x9BC6)
                (#xF2C5 . #x9BCF)
                (#xF2C6 . #x9BD1)
                (#xF2C7 . #x9BD2)
                (#xF2C8 . #x9BE3)
                (#xF2C9 . #x9BE2)
                (#xF2CA . #x9BE4)
                (#xF2CB . #x9BD4)
                (#xF2CC . #x9BE1)
                (#xF2CD . #x9C3A)
                (#xF2CE . #x9BF2)
                (#xF2CF . #x9BF1)
                (#xF2D0 . #x9BF0)
                (#xF2D1 . #x9C15)
                (#xF2D2 . #x9C14)
                (#xF2D3 . #x9C09)
                (#xF2D4 . #x9C13)
                (#xF2D5 . #x9C0C)
                (#xF2D6 . #x9C06)
                (#xF2D7 . #x9C08)
                (#xF2D8 . #x9C12)
                (#xF2D9 . #x9C0A)
                (#xF2DA . #x9C04)
                (#xF2DB . #x9C2E)
                (#xF2DC . #x9C1B)
                (#xF2DD . #x9C25)
                (#xF2DE . #x9C24)
                (#xF2DF . #x9C21)
                (#xF2E0 . #x9C30)
                (#xF2E1 . #x9C47)
                (#xF2E2 . #x9C32)
                (#xF2E3 . #x9C46)
                (#xF2E4 . #x9C3E)
                (#xF2E5 . #x9C5A)
                (#xF2E6 . #x9C60)
                (#xF2E7 . #x9C67)
                (#xF2E8 . #x9C76)
                (#xF2E9 . #x9C78)
                (#xF2EA . #x9CE7)
                (#xF2EB . #x9CEC)
                (#xF2EC . #x9CF0)
                (#xF2ED . #x9D09)
                (#xF2EE . #x9D08)
                (#xF2EF . #x9CEB)
                (#xF2F0 . #x9D03)
                (#xF2F1 . #x9D06)
                (#xF2F2 . #x9D2A)
                (#xF2F3 . #x9D26)
                (#xF2F4 . #x9DAF)
                (#xF2F5 . #x9D23)
                (#xF2F6 . #x9D1F)
                (#xF2F7 . #x9D44)
                (#xF2F8 . #x9D15)
                (#xF2F9 . #x9D12)
                (#xF2FA . #x9D41)
                (#xF2FB . #x9D3F)
                (#xF2FC . #x9D3E)
                (#xF2FD . #x9D46)
                (#xF2FE . #x9D48)
                (#xF3A1 . #x9D5D)
                (#xF3A2 . #x9D5E)
                (#xF3A3 . #x9D64)
                (#xF3A4 . #x9D51)
                (#xF3A5 . #x9D50)
                (#xF3A6 . #x9D59)
                (#xF3A7 . #x9D72)
                (#xF3A8 . #x9D89)
                (#xF3A9 . #x9D87)
                (#xF3AA . #x9DAB)
                (#xF3AB . #x9D6F)
                (#xF3AC . #x9D7A)
                (#xF3AD . #x9D9A)
                (#xF3AE . #x9DA4)
                (#xF3AF . #x9DA9)
                (#xF3B0 . #x9DB2)
                (#xF3B1 . #x9DC4)
                (#xF3B2 . #x9DC1)
                (#xF3B3 . #x9DBB)
                (#xF3B4 . #x9DB8)
                (#xF3B5 . #x9DBA)
                (#xF3B6 . #x9DC6)
                (#xF3B7 . #x9DCF)
                (#xF3B8 . #x9DC2)
                (#xF3B9 . #x9DD9)
                (#xF3BA . #x9DD3)
                (#xF3BB . #x9DF8)
                (#xF3BC . #x9DE6)
                (#xF3BD . #x9DED)
                (#xF3BE . #x9DEF)
                (#xF3BF . #x9DFD)
                (#xF3C0 . #x9E1A)
                (#xF3C1 . #x9E1B)
                (#xF3C2 . #x9E1E)
                (#xF3C3 . #x9E75)
                (#xF3C4 . #x9E79)
                (#xF3C5 . #x9E7D)
                (#xF3C6 . #x9E81)
                (#xF3C7 . #x9E88)
                (#xF3C8 . #x9E8B)
                (#xF3C9 . #x9E8C)
                (#xF3CA . #x9E92)
                (#xF3CB . #x9E95)
                (#xF3CC . #x9E91)
                (#xF3CD . #x9E9D)
                (#xF3CE . #x9EA5)
                (#xF3CF . #x9EA9)
                (#xF3D0 . #x9EB8)
                (#xF3D1 . #x9EAA)
                (#xF3D2 . #x9EAD)
                (#xF3D3 . #x9761)
                (#xF3D4 . #x9ECC)
                (#xF3D5 . #x9ECE)
                (#xF3D6 . #x9ECF)
                (#xF3D7 . #x9ED0)
                (#xF3D8 . #x9ED4)
                (#xF3D9 . #x9EDC)
                (#xF3DA . #x9EDE)
                (#xF3DB . #x9EDD)
                (#xF3DC . #x9EE0)
                (#xF3DD . #x9EE5)
                (#xF3DE . #x9EE8)
                (#xF3DF . #x9EEF)
                (#xF3E0 . #x9EF4)
                (#xF3E1 . #x9EF6)
                (#xF3E2 . #x9EF7)
                (#xF3E3 . #x9EF9)
                (#xF3E4 . #x9EFB)
                (#xF3E5 . #x9EFC)
                (#xF3E6 . #x9EFD)
                (#xF3E7 . #x9F07)
                (#xF3E8 . #x9F08)
                (#xF3E9 . #x76B7)
                (#xF3EA . #x9F15)
                (#xF3EB . #x9F21)
                (#xF3EC . #x9F2C)
                (#xF3ED . #x9F3E)
                (#xF3EE . #x9F4A)
                (#xF3EF . #x9F52)
                (#xF3F0 . #x9F54)
                (#xF3F1 . #x9F63)
                (#xF3F2 . #x9F5F)
                (#xF3F3 . #x9F60)
                (#xF3F4 . #x9F61)
                (#xF3F5 . #x9F66)
                (#xF3F6 . #x9F67)
                (#xF3F7 . #x9F6C)
                (#xF3F8 . #x9F6A)
                (#xF3F9 . #x9F77)
                (#xF3FA . #x9F72)
                (#xF3FB . #x9F76)
                (#xF3FC . #x9F95)
                (#xF3FD . #x9F9C)
                (#xF3FE . #x9FA0)
                (#xF4A1 . #x582F)
                (#xF4A2 . #x69C7)
                (#xF4A3 . #x9059)
                (#xF4A4 . #x7464)
                (#xF4A5 . #x51DC)
                (#xF4A6 . #x7199)
                ))
       (all-cp932 cp932-only)
       (all-eucjp eucjp-only))
        
  

  (flet ((euc-cp932 (x)
           (let ((high (ash x -16))
                 (mid (logand (ash x -8) 255))
                 (low (logand x 255)))
             (cond ((not (zerop high))
                    nil)
                   ((= mid #x8e)
                    (logand x 255))
                   ((zerop mid)
                    x)
                   ((decf mid #xa1)
                    (decf low #x80)
                    (incf low (if (zerop (logand mid 1)) #x1f #x7e))
                    (incf low (if (<= #x7f low #x9d) 1 0))
                    (setq mid (ash mid -1))
                    (incf mid (if (<= mid #x1e) #x81 #xc1))
                    (+ (ash mid 8) low))))))
    (dolist (i eucjp)
      (push i all-eucjp)
      (let* ((cp932 (euc-cp932 (car i))))
        (when cp932
          (push (cons cp932 (cdr i)) all-cp932)))))

;; ascii
  (loop for i from #x00 to #x7f
        do
        (push (cons i i) all-eucjp)
        (push (cons i i) all-cp932))

;; half-width katakana
  (loop for i from #xa1 to #xdf
        do
        (push (cons i (+ #xff61 #x-a1 i)) all-cp932)
        (push (cons (+ #x8e00 i) (+ #xff61 #x-a1 i)) all-eucjp))
  (setq *cp932-to-ucs-map* (init-pv-map all-cp932)
        *ucs-to-cp932-map* (init-pv-map all-cp932 :reverse-mapping t)
        *eucjp-to-ucs-map* (init-pv-map all-eucjp)
        *ucs-to-eucjp-map* (init-pv-map all-eucjp :reverse-mapping t)))

(defun eucjp-to-ucs (code)
  (pv-map-lookup code *eucjp-to-ucs-map*))

(defun ucs-to-eucjp (code)
  (pv-map-lookup code *ucs-to-eucjp-map*))

(defun cp932-to-ucs (code)
  (pv-map-lookup code *cp932-to-ucs-map*))

(defun ucs-to-cp932 (code)
  (pv-map-lookup code *ucs-to-cp932-map*))


(defmacro define-jp-encoding (name docstring aliases max-units-per-char
                              from-ucs
                              to-ucs
                              length-by-code
                              length-by-1st-unit)
  `(define-character-encoding ,name
       ,docstring
     :aliases ,aliases
     :native-endianness nil
     :max-units-per-char ,max-units-per-char
     :stream-encode-function
     (lambda (char write-function stream)
       (let ((code (,from-ucs (char-code char))))
         (cond ((null code)
                (funcall write-function stream #.(char-code #\?))
                1)
               ((< code #x100)
                (funcall write-function stream code)
                1)
               ((< code #x10000)
                (funcall write-function stream (logand #xff (ash code -8)))
                (funcall write-function stream (logand code #xff))
                2)
               (t
                (funcall write-function stream (logand #xff (ash code -16)))
                (funcall write-function stream (logand #xff (ash code -8)))
                (funcall write-function stream (logand code #xff))
                3))))
     :stream-decode-function
     (lambda (1st-unit next-unit-function stream)
       (declare (type (unsigned-byte 8) 1st-unit))
       (let ((code
              (case ,length-by-1st-unit
                (3 (let ((2nd-unit (funcall next-unit-function stream)))
                     (if (eq 2nd-unit :eof)
                         :eof
                         (let ((3rd-unit (funcall next-unit-function stream)))
                           (if (eq 3rd-unit :eof)
                               :eof
                               (logior #x8f0000
                                       (ash 2nd-unit 8)
                                       3rd-unit))))))
                (2 (let ((2nd-unit (funcall next-unit-function stream)))
                     (if (eq 2nd-unit :eof)
                         :eof
                         (logior (ash 1st-unit 8)
                                 2nd-unit))))
                (1 1st-unit))))
         (if (eq code :eof)
             :eof
             (let ((ucs (,to-ucs code)))
               (if ucs
                   (code-char ucs)
                   #\?)))))
     :vector-encode-function
     (lambda (string vector idx start end)
       (declare (type (simple-array (unsigned-byte 8) (*)) vector)
                (fixnum idx))
       (do* ((i start (1+ i)))
            ((>= i end) idx)
         (let* ((char (schar string i))
                (code (,from-ucs (char-code char))))
           (cond ((null code)
                  (setf (aref vector idx) #.(char-code #\?))
                  (incf idx))
                 ((< code #x100)
                  (setf (aref vector idx) code)
                  (incf idx))
                 ((< code #x10000)
                  (setf (aref vector idx) (logand #xff (ash code -8)))
                  (setf (aref vector (the fixnum (1+ idx))) (logand code #xff))
                  (incf idx 2))
                 (t
                  (setf (aref vector idx) (logand #xff (ash code -16)))
                  (setf (aref vector (the fixnum (1+ idx)))
                        (logand #xff (ash code -8)))
                  (setf (aref vector (the fixnum (+ idx 2))) (logand code #xff))
                  (incf idx 3))))))
     :vector-decode-function
     (lambda (vector idx noctets string)
       (declare (type (simple-array (unsigned-byte 8) (*)) vector)
                (type index idx))
       (do* ((i 0 (1+ i))
             (end (+ idx noctets))
             (index idx (1+ index)))
            ((= index end) index)
         (let* ((1st-unit (aref vector index)))
           (declare (type (unsigned-byte 8) 1st-unit))
           (let* ((code (,to-ucs
                         (case ,length-by-1st-unit
                           (3 (logior
                               #x8f0000
                               (ash (aref vector (incf index)) 8)
                               (aref vector (incf index))))
                           (2 (logior
                               (ash 1st-unit 8)
                               (aref vector (incf index))))
                           (1 1st-unit))))
                  (char (and code (code-char code))))
             (setf (schar string i) (or char #\?))))))
     :memory-encode-function
     (lambda (string pointer idx start end)
       (declare (fixnum idx))
       (do* ((i start (1+ i)))
            ((>= i end) idx)
         (let* ((code (,from-ucs (char-code (schar string i)))))
           (cond ((null code)
                  (setf (%get-unsigned-byte pointer idx) #.(char-code #\?))
                  (incf idx))
                 ((< code #x100)
                  (setf (%get-unsigned-byte pointer idx) code)
                  (incf idx))
                 ((< code #x10000)
                  (setf (%get-unsigned-byte pointer idx)
                        (logand #xff (ash code -8)))
                  (setf (%get-unsigned-byte pointer (the fixnum (1+ idx)))
                        (logand code #xff))
                  (incf idx 2))
                 (t
                  (setf (%get-unsigned-byte pointer idx)
                        (logand #xff (ash code -16)))
                  (setf (%get-unsigned-byte pointer (the fixnum (1+ idx)))
                        (logand #xff (ash code -8)))
                  (setf (%get-unsigned-byte pointer (the fixnum (+ 2 idx)))
                        (logand code #xff))
                  (incf idx 3))))))
     :memory-decode-function
     (lambda (pointer noctets idx string)
       (declare (fixnum noctets idx))
       (do* ((i 0 (1+ i))
             (end (+ idx noctets))
             (index idx (1+ index)))
            ((>= index end) (if (= index end) index 0))
         (let* ((1st-unit (%get-unsigned-byte pointer index)))
           (declare (type (unsigned-byte 8) 1st-unit))
           (let* ((code
                   (,to-ucs
                    (case ,length-by-1st-unit
                      (3 (logior
                          #x8f0000
                          (ash (%get-unsigned-byte
                                pointer (incf index)) 8)
                          (%get-unsigned-byte pointer (incf index))))
                      (2 (logior
                          (ash 1st-unit 8)
                          (%get-unsigned-byte pointer (incf index))))
                      (1 1st-unit))))
                  (char (if code (code-char code) #\?)))
             (setf (schar string i) char)))))
     :octets-in-string-function
     (lambda (string start end)
       (if (>= end start)
           (do* ((noctets 0)
                 (i start (1+ i)))
                ((= i end) noctets)
             (declare (fixnum noctets))
             (let* ((code (,from-ucs (char-code (schar string i)))))
               (if code
                   (incf noctets ,length-by-code)
                   (incf noctets))))
           0))
     :length-of-vector-encoding-function
     (lambda (vector start end)
       (declare (type (simple-array (unsigned-byte 8) (*)) vector))
       (do* ((i start)
             (nchars 0))
            ((>= i end)
             (values nchars i))
         (declare (fixnum i))
         (let* ((1st-unit (aref vector i))
                (nexti (+ i ,length-by-1st-unit)))
           (declare (type (unsigned-byte 8) 1st-unit))
           (if (> nexti end)
               (return (values nchars i))
               (setq nchars (1+ nchars) i nexti)))))
     :length-of-memory-encoding-function
     (lambda (pointer noctets start)
       (do* ((i start)
             (end (+ start noctets))
             (nchars 0 (1+ nchars)))
            ((= i end) (values nchars (- i start)))
         (let* ((1st-unit (%get-unsigned-byte pointer i))
                (nexti (+ i ,length-by-1st-unit)))
           (declare (type (unsigned-byte 8) 1st-unit))
           (if (> nexti end)
               (return (values nchars (- i start)))
               (setq i nexti)))))
     :decode-literal-code-unit-limit #x80
     :encode-literal-char-code-limit #x80
     :character-size-in-octets-function
     (lambda (c)
       (let ((code (,from-ucs (char-code c))))
         (if code
             ,length-by-code
             1)))))


(define-jp-encoding :euc-jp
    "An 8-bit, variable-length character encoding in which
character code points in the range #x00-#x7f can be encoded in a
single octet; characters with larger code values can be encoded
in 2 to 3 bytes."
  '(:eucjp)
  3
  ucs-to-eucjp
  eucjp-to-ucs
  (cond ((< code #x100) 1)
        ((< code #x10000) 2)
        (t 3))
  (cond ((= 1st-unit #x8f)
         3)
        ((or (= 1st-unit #x8e)
             (< #xa0 1st-unit #xff))
         2)
        (t 1)))

(define-jp-encoding :windows-31j
    "An 8-bit, variable-length character encoding in which
character code points in the range #x00-#x7f can be encoded in a
single octet; characters with larger code values can be encoded
in 2 bytes."
  '(:cp932 :csWindows31J)
  2
  ucs-to-cp932
  cp932-to-ucs
  (cond ((< code #x100) 1)
        (t 2))
  (cond ((or (<= #x81 1st-unit #x9f)
             (<= #xe0 1st-unit #xfc))
         2)
        (t 1)))
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3
;;;; END FILE ./reference/ccl/library/jp-encode.lisp
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4n









;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4n









;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4n









;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4n











\;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1
;;;; BEGIN FILE ./reference/ccl/library/openmcl-gtk-support.lisp
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2
;;;-*-Mode: LISP; Package: CCL -*-
;;;
;;; Copyright 2001-2009 Clozure Associates
;;;
;;; Licensed under the Apache License, Version 2.0 (the "License");
;;; you may not use this file except in compliance with the License.
;;; You may obtain a copy of the License at
;;;
;;;     http://www.apache.org/licenses/LICENSE-2.0
;;;
;;; Unless required by applicable law or agreed to in writing, software
;;; distributed under the License is distributed on an "AS IS" BASIS,
;;; WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
;;; See the License for the specific language governing permissions and
;;; limitations under the License.

(in-package "CCL")

(eval-when (:compile-toplevel :execute)
  (use-interface-dir :GTK2))

(eval-when (:compile-toplevel :load-toplevel :execute)
  (open-shared-library "libgnomeui-2.so"))


;;; All arguments (including the first, required one) should
;;; be strings.  This is supposed to be called from a C main
;;; function; it picks off gtk+-specific arguments from the
;;; caller's argv and deletes them from that C string vector.
;;; I don't know how to suppress any messages that this call
;;; might generate.
(defun gtk-init (arg &rest args)
  (declare (dynamic-extent args))
  (push arg args)
  (with-string-vector (argv args)
    (rlet ((argvp (* t))
           (argcp :signed))
     (setf (%get-ptr argvp) argv
           (%get-long argcp) (length args))
       (#_gtk_init argcp argvp))))

;;; Run this every 10 ticks.  (There seem to be about 100 ticks
;;; per second.)
#-openmcl-native-threads
(def-load-pointers gtk-task ()
  (%install-periodic-task 'gtk-task
			  #'(lambda ()
			      (do* ()
				   ((eql (#_gtk_events_pending) 0))
                              (#_gtk_main_iteration)))
                        10))

;;; Ensure that GTK's initialized whenever this file's loaded
;;; and whenever a saved image starts up.  (If an application
;;; needs to defer GTK initialization, *GTK-AUTO-INITIALIZE*
;;; can be set to nil to suppress this behavior.)

;;; Used in error reporting and to provide default window titles
(defvar *gtk-init-application-name* "Clozure CL")

(defvar *gtk-init-arguments* ())
(defvar *gtk-auto-initialize* t)

(def-load-pointers initialize-gtk ()
  (when *gtk-auto-initialize*
    (apply #'gtk-init *gtk-init-application-name* *gtk-init-arguments*)))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3
;;;; END FILE ./reference/ccl/library/openmcl-gtk-support.lisp
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4n









;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4n









;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4n









;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4n











\;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1
;;;; BEGIN FILE ./reference/ccl/tools/asdf.lisp
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2
;;; -*- mode: Lisp; Base: 10 ; Syntax: ANSI-Common-Lisp ; buffer-read-only: t; -*-
;;; This is ASDF 3.2.0: Another System Definition Facility.
;;;
;;; Feedback, bug reports, and patches are all welcome:
;;; please mail to <asdf-devel@common-lisp.net>.
;;; Note first that the canonical source for ASDF is presently
;;; <URL:http://common-lisp.net/project/asdf/>.
;;;
;;; If you obtained this copy from anywhere else, and you experience
;;; trouble using it, or find bugs, you may want to check at the
;;; location above for a more recent version (and for documentation
;;; and test files, if your copy came without them) before reporting
;;; bugs.  There are usually two "supported" revisions - the git master
;;; branch is the latest development version, whereas the git release
;;; branch may be slightly older but is considered `stable'

;;; -- LICENSE START
;;; (This is the MIT / X Consortium license as taken from
;;;  http://www.opensource.org/licenses/mit-license.html on or about
;;;  Monday; July 13, 2009)
;;;
;;; Copyright (c) 2001-2016 Daniel Barlow and contributors
;;;
;;; Permission is hereby granted, free of charge, to any person obtaining
;;; a copy of this software and associated documentation files (the
;;; "Software"), to deal in the Software without restriction, including
;;; without limitation the rights to use, copy, modify, merge, publish,
;;; distribute, sublicense, and/or sell copies of the Software, and to
;;; permit persons to whom the Software is furnished to do so, subject to
;;; the following conditions:
;;;
;;; The above copyright notice and this permission notice shall be
;;; included in all copies or substantial portions of the Software.
;;;
;;; THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
;;; EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
;;; MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
;;; NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
;;; LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
;;; OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
;;; WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
;;;
;;; -- LICENSE END

;;; The problem with writing a defsystem replacement is bootstrapping:
;;; we can't use defsystem to compile it.  Hence, all in one file.

;;;; ---------------------------------------------------------------------------
;;;; Handle ASDF package upgrade, including implementation-dependent magic.
;;
;; See https://bugs.launchpad.net/asdf/+bug/485687
;;

(defpackage :uiop/package
  ;; CAUTION: we must handle the first few packages specially for hot-upgrade.
  ;; This package definition MUST NOT change unless its name too changes;
  ;; if/when it changes, don't forget to add new functions missing from below.
  ;; Until then, uiop/package is frozen to forever
  ;; import and export the same exact symbols as for ASDF 2.27.
  ;; Any other symbol must be import-from'ed and re-export'ed in a different package.
  (:use :common-lisp)
  (:export
   #:find-package* #:find-symbol* #:symbol-call
   #:intern* #:export* #:import* #:shadowing-import* #:shadow* #:make-symbol* #:unintern*
   #:symbol-shadowing-p #:home-package-p
   #:symbol-package-name #:standard-common-lisp-symbol-p
   #:reify-package #:unreify-package #:reify-symbol #:unreify-symbol
   #:nuke-symbol-in-package #:nuke-symbol #:rehome-symbol
   #:ensure-package-unused #:delete-package*
   #:package-names #:packages-from-names #:fresh-package-name #:rename-package-away
   #:package-definition-form #:parse-define-package-form
   #:ensure-package #:define-package))

(in-package :uiop/package)

;;;; General purpose package utilities

(eval-when (:load-toplevel :compile-toplevel :execute)
  (defun find-package* (package-designator &optional (error t))
    (let ((package (find-package package-designator)))
      (cond
        (package package)
        (error (error "No package named ~S" (string package-designator)))
        (t nil))))
  (defun find-symbol* (name package-designator &optional (error t))
    "Find a symbol in a package of given string'ified NAME;
unlike CL:FIND-SYMBOL, work well with 'modern' case sensitive syntax
by letting you supply a symbol or keyword for the name;
also works well when the package is not present.
If optional ERROR argument is NIL, return NIL instead of an error
when the symbol is not found."
    (block nil
      (let ((package (find-package* package-designator error)))
        (when package ;; package error handled by find-package* already
          (multiple-value-bind (symbol status) (find-symbol (string name) package)
            (cond
              (status (return (values symbol status)))
              (error (error "There is no symbol ~S in package ~S" name (package-name package))))))
        (values nil nil))))
  (defun symbol-call (package name &rest args)
    "Call a function associated with symbol of given name in given package,
with given ARGS. Useful when the call is read before the package is loaded,
or when loading the package is optional."
    (apply (find-symbol* name package) args))
  (defun intern* (name package-designator &optional (error t))
    (intern (string name) (find-package* package-designator error)))
  (defun export* (name package-designator)
    (let* ((package (find-package* package-designator))
           (symbol (intern* name package)))
      (export (or symbol (list symbol)) package)))
  (defun import* (symbol package-designator)
    (import (or symbol (list symbol)) (find-package* package-designator)))
  (defun shadowing-import* (symbol package-designator)
    (shadowing-import (or symbol (list symbol)) (find-package* package-designator)))
  (defun shadow* (name package-designator)
    (shadow (list (string name)) (find-package* package-designator)))
  (defun make-symbol* (name)
    (etypecase name
      (string (make-symbol name))
      (symbol (copy-symbol name))))
  (defun unintern* (name package-designator &optional (error t))
    (block nil
      (let ((package (find-package* package-designator error)))
        (when package
          (multiple-value-bind (symbol status) (find-symbol* name package error)
            (cond
              (status (unintern symbol package)
                      (return (values symbol status)))
              (error (error "symbol ~A not present in package ~A"
                            (string symbol) (package-name package))))))
        (values nil nil))))
  (defun symbol-shadowing-p (symbol package)
    (and (member symbol (package-shadowing-symbols package)) t))
  (defun home-package-p (symbol package)
    (and package (let ((sp (symbol-package symbol)))
                   (and sp (let ((pp (find-package* package)))
                             (and pp (eq sp pp))))))))


(eval-when (:load-toplevel :compile-toplevel :execute)
  (defun symbol-package-name (symbol)
    (let ((package (symbol-package symbol)))
      (and package (package-name package))))
  (defun standard-common-lisp-symbol-p (symbol)
    (multiple-value-bind (sym status) (find-symbol* symbol :common-lisp nil)
      (and (eq sym symbol) (eq status :external))))
  (defun reify-package (package &optional package-context)
    (if (eq package package-context) t
        (etypecase package
          (null nil)
          ((eql (find-package :cl)) :cl)
          (package (package-name package)))))
  (defun unreify-package (package &optional package-context)
    (etypecase package
      (null nil)
      ((eql t) package-context)
      ((or symbol string) (find-package package))))
  (defun reify-symbol (symbol &optional package-context)
    (etypecase symbol
      ((or keyword (satisfies standard-common-lisp-symbol-p)) symbol)
      (symbol (vector (symbol-name symbol)
                      (reify-package (symbol-package symbol) package-context)))))
  (defun unreify-symbol (symbol &optional package-context)
    (etypecase symbol
      (symbol symbol)
      ((simple-vector 2)
       (let* ((symbol-name (svref symbol 0))
              (package-foo (svref symbol 1))
              (package (unreify-package package-foo package-context)))
         (if package (intern* symbol-name package)
             (make-symbol* symbol-name)))))))

(eval-when (:load-toplevel :compile-toplevel :execute)
  (defvar *all-package-happiness* '())
  (defvar *all-package-fishiness* (list t))
  (defun record-fishy (info)
    ;;(format t "~&FISHY: ~S~%" info)
    (push info *all-package-fishiness*))
  (defmacro when-package-fishiness (&body body)
    `(when *all-package-fishiness* ,@body))
  (defmacro note-package-fishiness (&rest info)
    `(when-package-fishiness (record-fishy (list ,@info)))))

(eval-when (:load-toplevel :compile-toplevel :execute)
  #+(or clisp clozure)
  (defun get-setf-function-symbol (symbol)
    #+clisp (let ((sym (get symbol 'system::setf-function)))
              (if sym (values sym :setf-function)
                  (let ((sym (get symbol 'system::setf-expander)))
                    (if sym (values sym :setf-expander)
                        (values nil nil)))))
    #+clozure (gethash symbol ccl::%setf-function-names%))
  #+(or clisp clozure)
  (defun set-setf-function-symbol (new-setf-symbol symbol &optional kind)
    #+clisp (assert (member kind '(:setf-function :setf-expander)))
    #+clozure (assert (eq kind t))
    #+clisp
    (cond
      ((null new-setf-symbol)
       (remprop symbol 'system::setf-function)
       (remprop symbol 'system::setf-expander))
      ((eq kind :setf-function)
       (setf (get symbol 'system::setf-function) new-setf-symbol))
      ((eq kind :setf-expander)
       (setf (get symbol 'system::setf-expander) new-setf-symbol))
      (t (error "invalid kind of setf-function ~S for ~S to be set to ~S"
                kind symbol new-setf-symbol)))
    #+clozure
    (progn
      (gethash symbol ccl::%setf-function-names%) new-setf-symbol
      (gethash new-setf-symbol ccl::%setf-function-name-inverses%) symbol))
  #+(or clisp clozure)
  (defun create-setf-function-symbol (symbol)
    #+clisp (system::setf-symbol symbol)
    #+clozure (ccl::construct-setf-function-name symbol))
  (defun set-dummy-symbol (symbol reason other-symbol)
    (setf (get symbol 'dummy-symbol) (cons reason other-symbol)))
  (defun make-dummy-symbol (symbol)
    (let ((dummy (copy-symbol symbol)))
      (set-dummy-symbol dummy 'replacing symbol)
      (set-dummy-symbol symbol 'replaced-by dummy)
      dummy))
  (defun dummy-symbol (symbol)
    (get symbol 'dummy-symbol))
  (defun get-dummy-symbol (symbol)
    (let ((existing (dummy-symbol symbol)))
      (if existing (values (cdr existing) (car existing))
          (make-dummy-symbol symbol))))
  (defun nuke-symbol-in-package (symbol package-designator)
    (let ((package (find-package* package-designator))
          (name (symbol-name symbol)))
      (multiple-value-bind (sym stat) (find-symbol name package)
        (when (and (member stat '(:internal :external)) (eq symbol sym))
          (if (symbol-shadowing-p symbol package)
              (shadowing-import* (get-dummy-symbol symbol) package)
              (unintern* symbol package))))))
  (defun nuke-symbol (symbol &optional (packages (list-all-packages)))
    #+(or clisp clozure)
    (multiple-value-bind (setf-symbol kind)
        (get-setf-function-symbol symbol)
      (when kind (nuke-symbol setf-symbol)))
    (loop :for p :in packages :do (nuke-symbol-in-package symbol p)))
  (defun rehome-symbol (symbol package-designator)
    "Changes the home package of a symbol, also leaving it present in its old home if any"
    (let* ((name (symbol-name symbol))
           (package (find-package* package-designator))
           (old-package (symbol-package symbol))
           (old-status (and old-package (nth-value 1 (find-symbol name old-package))))
           (shadowing (and old-package (symbol-shadowing-p symbol old-package) (make-symbol name))))
      (multiple-value-bind (overwritten-symbol overwritten-symbol-status) (find-symbol name package)
        (unless (eq package old-package)
          (let ((overwritten-symbol-shadowing-p
                  (and overwritten-symbol-status
                       (symbol-shadowing-p overwritten-symbol package))))
            (note-package-fishiness
             :rehome-symbol name
             (when old-package (package-name old-package)) old-status (and shadowing t)
             (package-name package) overwritten-symbol-status overwritten-symbol-shadowing-p)
            (when old-package
              (if shadowing
                  (shadowing-import* shadowing old-package))
              (unintern* symbol old-package))
            (cond
              (overwritten-symbol-shadowing-p
               (shadowing-import* symbol package))
              (t
               (when overwritten-symbol-status
                 (unintern* overwritten-symbol package))
               (import* symbol package)))
            (if shadowing
                (shadowing-import* symbol old-package)
                (import* symbol old-package))
            #+(or clisp clozure)
            (multiple-value-bind (setf-symbol kind)
                (get-setf-function-symbol symbol)
              (when kind
                (let* ((setf-function (fdefinition setf-symbol))
                       (new-setf-symbol (create-setf-function-symbol symbol)))
                  (note-package-fishiness
                   :setf-function
                   name (package-name package)
                   (symbol-name setf-symbol) (symbol-package-name setf-symbol)
                   (symbol-name new-setf-symbol) (symbol-package-name new-setf-symbol))
                  (when (symbol-package setf-symbol)
                    (unintern* setf-symbol (symbol-package setf-symbol)))
                  (setf (fdefinition new-setf-symbol) setf-function)
                  (set-setf-function-symbol new-setf-symbol symbol kind))))
            #+(or clisp clozure)
            (multiple-value-bind (overwritten-setf foundp)
                (get-setf-function-symbol overwritten-symbol)
              (when foundp
                (unintern overwritten-setf)))
            (when (eq old-status :external)
              (export* symbol old-package))
            (when (eq overwritten-symbol-status :external)
              (export* symbol package))))
        (values overwritten-symbol overwritten-symbol-status))))
  (defun ensure-package-unused (package)
    (loop :for p :in (package-used-by-list package) :do
      (unuse-package package p)))
  (defun delete-package* (package &key nuke)
    (let ((p (find-package package)))
      (when p
        (when nuke (do-symbols (s p) (when (home-package-p s p) (nuke-symbol s))))
        (ensure-package-unused p)
        (delete-package package))))
  (defun package-names (package)
    (cons (package-name package) (package-nicknames package)))
  (defun packages-from-names (names)
    (remove-duplicates (remove nil (mapcar #'find-package names)) :from-end t))
  (defun fresh-package-name (&key (prefix :%TO-BE-DELETED)
                               separator
                               (index (random most-positive-fixnum)))
    (loop :for i :from index
          :for n = (format nil "~A~@[~A~D~]" prefix (and (plusp i) (or separator "")) i)
          :thereis (and (not (find-package n)) n)))
  (defun rename-package-away (p &rest keys &key prefix &allow-other-keys)
    (let ((new-name
            (apply 'fresh-package-name
                   :prefix (or prefix (format nil "__~A__" (package-name p))) keys)))
      (record-fishy (list :rename-away (package-names p) new-name))
      (rename-package p new-name))))


;;; Communicable representation of symbol and package information

(eval-when (:load-toplevel :compile-toplevel :execute)
  (defun package-definition-form (package-designator
                                  &key (nicknamesp t) (usep t)
                                    (shadowp t) (shadowing-import-p t)
                                    (exportp t) (importp t) internp (error t))
    (let* ((package (or (find-package* package-designator error)
                        (return-from package-definition-form nil)))
           (name (package-name package))
           (nicknames (package-nicknames package))
           (use (mapcar #'package-name (package-use-list package)))
           (shadow ())
           (shadowing-import (make-hash-table :test 'equal))
           (import (make-hash-table :test 'equal))
           (export ())
           (intern ()))
      (when package
        (loop :for sym :being :the :symbols :in package
              :for status = (nth-value 1 (find-symbol* sym package)) :do
                (ecase status
                  ((nil :inherited))
                  ((:internal :external)
                   (let* ((name (symbol-name sym))
                          (external (eq status :external))
                          (home (symbol-package sym))
                          (home-name (package-name home))
                          (imported (not (eq home package)))
                          (shadowing (symbol-shadowing-p sym package)))
                     (cond
                       ((and shadowing imported)
                        (push name (gethash home-name shadowing-import)))
                       (shadowing
                        (push name shadow))
                       (imported
                        (push name (gethash home-name import))))
                     (cond
                       (external
                        (push name export))
                       (imported)
                       (t (push name intern)))))))
        (labels ((sort-names (names)
                   (sort (copy-list names) #'string<))
                 (table-keys (table)
                   (loop :for k :being :the :hash-keys :of table :collect k))
                 (when-relevant (key value)
                   (when value (list (cons key value))))
                 (import-options (key table)
                   (loop :for i :in (sort-names (table-keys table))
                         :collect `(,key ,i ,@(sort-names (gethash i table))))))
          `(defpackage ,name
             ,@(when-relevant :nicknames (and nicknamesp (sort-names nicknames)))
             (:use ,@(and usep (sort-names use)))
             ,@(when-relevant :shadow (and shadowp (sort-names shadow)))
             ,@(import-options :shadowing-import-from (and shadowing-import-p shadowing-import))
             ,@(import-options :import-from (and importp import))
             ,@(when-relevant :export (and exportp (sort-names export)))
             ,@(when-relevant :intern (and internp (sort-names intern)))))))))


;;; ensure-package, define-package
(eval-when (:load-toplevel :compile-toplevel :execute)
  (defun ensure-shadowing-import (name to-package from-package shadowed imported)
    (check-type name string)
    (check-type to-package package)
    (check-type from-package package)
    (check-type shadowed hash-table)
    (check-type imported hash-table)
    (let ((import-me (find-symbol* name from-package)))
      (multiple-value-bind (existing status) (find-symbol name to-package)
        (cond
          ((gethash name shadowed)
           (unless (eq import-me existing)
             (error "Conflicting shadowings for ~A" name)))
          (t
           (setf (gethash name shadowed) t)
           (setf (gethash name imported) t)
           (unless (or (null status)
                       (and (member status '(:internal :external))
                            (eq existing import-me)
                            (symbol-shadowing-p existing to-package)))
             (note-package-fishiness
              :shadowing-import name
              (package-name from-package)
              (or (home-package-p import-me from-package) (symbol-package-name import-me))
              (package-name to-package) status
              (and status (or (home-package-p existing to-package) (symbol-package-name existing)))))
           (shadowing-import* import-me to-package))))))
  (defun ensure-imported (import-me into-package &optional from-package)
    (check-type import-me symbol)
    (check-type into-package package)
    (check-type from-package (or null package))
    (let ((name (symbol-name import-me)))
      (multiple-value-bind (existing status) (find-symbol name into-package)
        (cond
          ((not status)
           (import* import-me into-package))
          ((eq import-me existing))
          (t
           (let ((shadowing-p (symbol-shadowing-p existing into-package)))
             (note-package-fishiness
              :ensure-imported name
              (and from-package (package-name from-package))
              (or (home-package-p import-me from-package) (symbol-package-name import-me))
              (package-name into-package)
              status
              (and status (or (home-package-p existing into-package) (symbol-package-name existing)))
              shadowing-p)
             (cond
               ((or shadowing-p (eq status :inherited))
                (shadowing-import* import-me into-package))
               (t
                (unintern* existing into-package)
                (import* import-me into-package))))))))
    (values))
  (defun ensure-import (name to-package from-package shadowed imported)
    (check-type name string)
    (check-type to-package package)
    (check-type from-package package)
    (check-type shadowed hash-table)
    (check-type imported hash-table)
    (multiple-value-bind (import-me import-status) (find-symbol name from-package)
      (when (null import-status)
        (note-package-fishiness
         :import-uninterned name (package-name from-package) (package-name to-package))
        (setf import-me (intern* name from-package)))
      (multiple-value-bind (existing status) (find-symbol name to-package)
        (cond
          ((and imported (gethash name imported))
           (unless (and status (eq import-me existing))
             (error "Can't import ~S from both ~S and ~S"
                    name (package-name (symbol-package existing)) (package-name from-package))))
          ((gethash name shadowed)
           (error "Can't both shadow ~S and import it from ~S" name (package-name from-package)))
          (t
           (setf (gethash name imported) t))))
      (ensure-imported import-me to-package from-package)))
  (defun ensure-inherited (name symbol to-package from-package mixp shadowed imported inherited)
    (check-type name string)
    (check-type symbol symbol)
    (check-type to-package package)
    (check-type from-package package)
    (check-type mixp (member nil t)) ; no cl:boolean on Genera
    (check-type shadowed hash-table)
    (check-type imported hash-table)
    (check-type inherited hash-table)
    (multiple-value-bind (existing status) (find-symbol name to-package)
      (let* ((sp (symbol-package symbol))
             (in (gethash name inherited))
             (xp (and status (symbol-package existing))))
        (when (null sp)
          (note-package-fishiness
           :import-uninterned name
           (package-name from-package) (package-name to-package) mixp)
          (import* symbol from-package)
          (setf sp (package-name from-package)))
        (cond
          ((gethash name shadowed))
          (in
           (unless (equal sp (first in))
             (if mixp
                 (ensure-shadowing-import name to-package (second in) shadowed imported)
                 (error "Can't inherit ~S from ~S, it is inherited from ~S"
                        name (package-name sp) (package-name (first in))))))
          ((gethash name imported)
           (unless (eq symbol existing)
             (error "Can't inherit ~S from ~S, it is imported from ~S"
                    name (package-name sp) (package-name xp))))
          (t
           (setf (gethash name inherited) (list sp from-package))
           (when (and status (not (eq sp xp)))
             (let ((shadowing (symbol-shadowing-p existing to-package)))
               (note-package-fishiness
                :inherited name
                (package-name from-package)
                (or (home-package-p symbol from-package) (symbol-package-name symbol))
                (package-name to-package)
                (or (home-package-p existing to-package) (symbol-package-name existing)))
               (if shadowing (ensure-shadowing-import name to-package from-package shadowed imported)
                   (unintern* existing to-package)))))))))
  (defun ensure-mix (name symbol to-package from-package shadowed imported inherited)
    (check-type name string)
    (check-type symbol symbol)
    (check-type to-package package)
    (check-type from-package package)
    (check-type shadowed hash-table)
    (check-type imported hash-table)
    (check-type inherited hash-table)
    (unless (gethash name shadowed)
      (multiple-value-bind (existing status) (find-symbol name to-package)
        (let* ((sp (symbol-package symbol))
               (im (gethash name imported))
               (in (gethash name inherited)))
          (cond
            ((or (null status)
                 (and status (eq symbol existing))
                 (and in (eq sp (first in))))
             (ensure-inherited name symbol to-package from-package t shadowed imported inherited))
            (in
             (remhash name inherited)
             (ensure-shadowing-import name to-package (second in) shadowed imported))
            (im
             (error "Symbol ~S import from ~S~:[~; actually ~:[uninterned~;~:*from ~S~]~] conflicts with existing symbol in ~S~:[~; actually ~:[uninterned~;from ~:*~S~]~]"
                    name (package-name from-package)
                    (home-package-p symbol from-package) (symbol-package-name symbol)
                    (package-name to-package)
                    (home-package-p existing to-package) (symbol-package-name existing)))
            (t
             (ensure-inherited name symbol to-package from-package t shadowed imported inherited)))))))

  (defun recycle-symbol (name recycle exported)
    ;; Takes a symbol NAME (a string), a list of package designators for RECYCLE
    ;; packages, and a hash-table of names (strings) of symbols scheduled to be
    ;; EXPORTED from the package being defined. It returns two values, the
    ;; symbol found (if any, or else NIL), and a boolean flag indicating whether
    ;; a symbol was found. The caller (DEFINE-PACKAGE) will then do the
    ;; re-homing of the symbol, etc.
    (check-type name string)
    (check-type recycle list)
    (check-type exported hash-table)
    (when (gethash name exported) ;; don't bother recycling private symbols
      (let (recycled foundp)
        (dolist (r recycle (values recycled foundp))
          (multiple-value-bind (symbol status) (find-symbol name r)
            (when (and status (home-package-p symbol r))
              (cond
                (foundp
                 ;; (nuke-symbol symbol)) -- even simple variable names like O or C will do that.
                 (note-package-fishiness :recycled-duplicate name (package-name foundp) (package-name r)))
                (t
                 (setf recycled symbol foundp r)))))))))
  (defun symbol-recycled-p (sym recycle)
    (check-type sym symbol)
    (check-type recycle list)
    (and (member (symbol-package sym) recycle) t))
  (defun ensure-symbol (name package intern recycle shadowed imported inherited exported)
    (check-type name string)
    (check-type package package)
    (check-type intern (member nil t)) ; no cl:boolean on Genera
    (check-type shadowed hash-table)
    (check-type imported hash-table)
    (check-type inherited hash-table)
    (unless (or (gethash name shadowed)
                (gethash name imported)
                (gethash name inherited))
      (multiple-value-bind (existing status)
          (find-symbol name package)
        (multiple-value-bind (recycled previous) (recycle-symbol name recycle exported)
          (cond
            ((and status (eq existing recycled) (eq previous package)))
            (previous
             (rehome-symbol recycled package))
            ((and status (eq package (symbol-package existing))))
            (t
             (when status
               (note-package-fishiness
                :ensure-symbol name
                (reify-package (symbol-package existing) package)
                status intern)
               (unintern existing))
             (when intern
               (intern* name package))))))))
  (declaim (ftype (function (t t t &optional t) t) ensure-exported))
  (defun ensure-exported-to-user (name symbol to-package &optional recycle)
    (check-type name string)
    (check-type symbol symbol)
    (check-type to-package package)
    (check-type recycle list)
    (assert (equal name (symbol-name symbol)))
    (multiple-value-bind (existing status) (find-symbol name to-package)
      (unless (and status (eq symbol existing))
        (let ((accessible
                (or (null status)
                    (let ((shadowing (symbol-shadowing-p existing to-package))
                          (recycled (symbol-recycled-p existing recycle)))
                      (unless (and shadowing (not recycled))
                        (note-package-fishiness
                         :ensure-export name (symbol-package-name symbol)
                         (package-name to-package)
                         (or (home-package-p existing to-package) (symbol-package-name existing))
                         status shadowing)
                        (if (or (eq status :inherited) shadowing)
                            (shadowing-import* symbol to-package)
                            (unintern existing to-package))
                        t)))))
          (when (and accessible (eq status :external))
            (ensure-exported name symbol to-package recycle))))))
  (defun ensure-exported (name symbol from-package &optional recycle)
    (dolist (to-package (package-used-by-list from-package))
      (ensure-exported-to-user name symbol to-package recycle))
    (unless (eq from-package (symbol-package symbol))
      (ensure-imported symbol from-package))
    (export* name from-package))
  (defun ensure-export (name from-package &optional recycle)
    (multiple-value-bind (symbol status) (find-symbol* name from-package)
      (unless (eq status :external)
        (ensure-exported name symbol from-package recycle))))
  (defun ensure-package (name &key
                                nicknames documentation use
                                shadow shadowing-import-from
                                import-from export intern
                                recycle mix reexport
                                unintern)
    #+genera (declare (ignore documentation))
    (let* ((package-name (string name))
           (nicknames (mapcar #'string nicknames))
           (names (cons package-name nicknames))
           (previous (packages-from-names names))
           (discarded (cdr previous))
           (to-delete ())
           (package (or (first previous) (make-package package-name :nicknames nicknames)))
           (recycle (packages-from-names recycle))
           (use (mapcar 'find-package* use))
           (mix (mapcar 'find-package* mix))
           (reexport (mapcar 'find-package* reexport))
           (shadow (mapcar 'string shadow))
           (export (mapcar 'string export))
           (intern (mapcar 'string intern))
           (unintern (mapcar 'string unintern))
           (shadowed (make-hash-table :test 'equal)) ; string to bool
           (imported (make-hash-table :test 'equal)) ; string to bool
           (exported (make-hash-table :test 'equal)) ; string to bool
           ;; string to list home package and use package:
           (inherited (make-hash-table :test 'equal)))
      (when-package-fishiness (record-fishy package-name))
      #-genera
      (when documentation (setf (documentation package t) documentation))
      (loop :for p :in (set-difference (package-use-list package) (append mix use))
            :do (note-package-fishiness :over-use name (package-names p))
                (unuse-package p package))
      (loop :for p :in discarded
            :for n = (remove-if #'(lambda (x) (member x names :test 'equal))
                                (package-names p))
            :do (note-package-fishiness :nickname name (package-names p))
                (cond (n (rename-package p (first n) (rest n)))
                      (t (rename-package-away p)
                         (push p to-delete))))
      (rename-package package package-name nicknames)
      (dolist (name unintern)
        (multiple-value-bind (existing status) (find-symbol name package)
          (when status
            (unless (eq status :inherited)
              (note-package-fishiness
               :unintern (package-name package) name (symbol-package-name existing) status)
              (unintern* name package nil)))))
      (dolist (name export)
        (setf (gethash name exported) t))
      (dolist (p reexport)
        (do-external-symbols (sym p)
          (setf (gethash (string sym) exported) t)))
      (do-external-symbols (sym package)
        (let ((name (symbol-name sym)))
          (unless (gethash name exported)
            (note-package-fishiness
             :over-export (package-name package) name
             (or (home-package-p sym package) (symbol-package-name sym)))
            (unexport sym package))))
      (dolist (name shadow)
        (setf (gethash name shadowed) t)
        (multiple-value-bind (existing status) (find-symbol name package)
          (multiple-value-bind (recycled previous) (recycle-symbol name recycle exported)
            (let ((shadowing (and status (symbol-shadowing-p existing package))))
              (cond
                ((eq previous package))
                (previous
                 (rehome-symbol recycled package))
                ((or (member status '(nil :inherited))
                     (home-package-p existing package)))
                (t
                 (let ((dummy (make-symbol name)))
                   (note-package-fishiness
                    :shadow-imported (package-name package) name
                    (symbol-package-name existing) status shadowing)
                   (shadowing-import* dummy package)
                   (import* dummy package)))))))
        (shadow* name package))
      (loop :for (p . syms) :in shadowing-import-from
            :for pp = (find-package* p) :do
              (dolist (sym syms) (ensure-shadowing-import (string sym) package pp shadowed imported)))
      (loop :for p :in mix
            :for pp = (find-package* p) :do
              (do-external-symbols (sym pp) (ensure-mix (symbol-name sym) sym package pp shadowed imported inherited)))
      (loop :for (p . syms) :in import-from
            :for pp = (find-package p) :do
              (dolist (sym syms) (ensure-import (symbol-name sym) package pp shadowed imported)))
      (dolist (p (append use mix))
        (do-external-symbols (sym p) (ensure-inherited (string sym) sym package p nil shadowed imported inherited))
        (use-package p package))
      (loop :for name :being :the :hash-keys :of exported :do
        (ensure-symbol name package t recycle shadowed imported inherited exported)
        (ensure-export name package recycle))
      (dolist (name intern)
        (ensure-symbol name package t recycle shadowed imported inherited exported))
      (do-symbols (sym package)
        (ensure-symbol (symbol-name sym) package nil recycle shadowed imported inherited exported))
      (map () 'delete-package* to-delete)
      package)))

(eval-when (:load-toplevel :compile-toplevel :execute)
  (defun parse-define-package-form (package clauses)
    (loop
      :with use-p = nil :with recycle-p = nil
      :with documentation = nil
      :for (kw . args) :in clauses
      :when (eq kw :nicknames) :append args :into nicknames :else
      :when (eq kw :documentation)
        :do (cond
              (documentation (error "define-package: can't define documentation twice"))
              ((or (atom args) (cdr args)) (error "define-package: bad documentation"))
              (t (setf documentation (car args)))) :else
      :when (eq kw :use) :append args :into use :and :do (setf use-p t) :else
      :when (eq kw :shadow) :append args :into shadow :else
      :when (eq kw :shadowing-import-from) :collect args :into shadowing-import-from :else
      :when (eq kw :import-from) :collect args :into import-from :else
      :when (eq kw :export) :append args :into export :else
      :when (eq kw :intern) :append args :into intern :else
      :when (eq kw :recycle) :append args :into recycle :and :do (setf recycle-p t) :else
      :when (eq kw :mix) :append args :into mix :else
      :when (eq kw :reexport) :append args :into reexport :else
      :when (eq kw :use-reexport) :append args :into use :and :append args :into reexport
        :and :do (setf use-p t) :else
      :when (eq kw :mix-reexport) :append args :into mix :and :append args :into reexport
        :and :do (setf use-p t) :else
      :when (eq kw :unintern) :append args :into unintern :else
        :do (error "unrecognized define-package keyword ~S" kw)
      :finally (return `(,package
                         :nicknames ,nicknames :documentation ,documentation
                         :use ,(if use-p use '(:common-lisp))
                         :shadow ,shadow :shadowing-import-from ,shadowing-import-from
                         :import-from ,import-from :export ,export :intern ,intern
                         :recycle ,(if recycle-p recycle (cons package nicknames))
                         :mix ,mix :reexport ,reexport :unintern ,unintern)))))

(defmacro define-package (package &rest clauses)
  "DEFINE-PACKAGE takes a PACKAGE and a number of CLAUSES, of the form
\(KEYWORD . ARGS\).
DEFINE-PACKAGE supports the following keywords:
USE, SHADOW, SHADOWING-IMPORT-FROM, IMPORT-FROM, EXPORT, INTERN -- as per CL:DEFPACKAGE.
RECYCLE -- Recycle the package's exported symbols from the specified packages,
in order.  For every symbol scheduled to be exported by the DEFINE-PACKAGE,
either through an :EXPORT option or a :REEXPORT option, if the symbol exists in
one of the :RECYCLE packages, the first such symbol is re-homed to the package
being defined.
For the sake of idempotence, it is important that the package being defined
should appear in first position if it already exists, and even if it doesn't,
ahead of any package that is not going to be deleted afterwards and never
created again. In short, except for special cases, always make it the first
package on the list if the list is not empty.
MIX -- Takes a list of package designators.  MIX behaves like
\(:USE PKG1 PKG2 ... PKGn\) but additionally uses :SHADOWING-IMPORT-FROM to
resolve conflicts in favor of the first found symbol.  It may still yield
an error if there is a conflict with an explicitly :IMPORT-FROM symbol.
REEXPORT -- Takes a list of package designators.  For each package, p, in the list,
export symbols with the same name as those exported from p.  Note that in the case
of shadowing, etc. the symbols with the same name may not be the same symbols.
UNINTERN -- Remove symbols here from PACKAGE."
  (let ((ensure-form
          `(apply 'ensure-package ',(parse-define-package-form package clauses))))
    `(progn
       #+(or clasp ecl gcl mkcl) (defpackage ,package (:use))
       (eval-when (:compile-toplevel :load-toplevel :execute)
         ,ensure-form))))
;;;; -------------------------------------------------------------------------
;;;; Handle compatibility with multiple implementations.
;;; This file is for papering over the deficiencies and peculiarities
;;; of various Common Lisp implementations.
;;; For implementation-specific access to the system, see os.lisp instead.
;;; A few functions are defined here, but actually exported from utility;
;;; from this package only common-lisp symbols are exported.

(uiop/package:define-package :uiop/common-lisp
  (:nicknames :uoip/cl)
  (:use :uiop/package)
  (:use-reexport #-genera :common-lisp #+genera :future-common-lisp)
  #+allegro (:intern #:*acl-warn-save*)
  #+cormanlisp (:shadow #:user-homedir-pathname)
  #+cormanlisp
  (:export
   #:logical-pathname #:translate-logical-pathname
   #:make-broadcast-stream #:file-namestring)
  #+genera (:shadowing-import-from :scl #:boolean)
  #+genera (:export #:boolean #:ensure-directories-exist #:read-sequence #:write-sequence)
  #+(or mcl cmucl) (:shadow #:user-homedir-pathname))
(in-package :uiop/common-lisp)

#-(or abcl allegro clasp clisp clozure cmucl cormanlisp ecl gcl genera lispworks mcl mkcl sbcl scl xcl)
(error "ASDF is not supported on your implementation. Please help us port it.")

;; (declaim (optimize (speed 1) (debug 3) (safety 3))) ; DON'T: trust implementation defaults.


;;;; Early meta-level tweaks

#+(or allegro clasp clisp clozure cmucl ecl mkcl sbcl)
(eval-when (:load-toplevel :compile-toplevel :execute)
  (when (and #+allegro (member :ics *features*)
             #+(or clasp clisp cmucl ecl mkcl) (member :unicode *features*)
             #+clozure (member :openmcl-unicode-strings *features*)
             #+sbcl (member :sb-unicode *features*))
    ;; Check for unicode at runtime, so that a hypothetical FASL compiled with unicode
    ;; but loaded in a non-unicode setting (e.g. on Allegro) won't tell a lie.
    (pushnew :asdf-unicode *features*)))

#+allegro
(eval-when (:load-toplevel :compile-toplevel :execute)
  ;; We need to disable autoloading BEFORE any mention of package ASDF.
  ;; In particular, there must NOT be a mention of package ASDF in the defpackage of this file
  ;; or any previous file.
  (setf excl::*autoload-package-name-alist*
        (remove "asdf" excl::*autoload-package-name-alist*
                :test 'equalp :key 'car))
  (defparameter *acl-warn-save*
    (when (boundp 'excl:*warn-on-nested-reader-conditionals*)
      excl:*warn-on-nested-reader-conditionals*))
  (when (boundp 'excl:*warn-on-nested-reader-conditionals*)
    (setf excl:*warn-on-nested-reader-conditionals* nil))
  (setf *print-readably* nil))

#+clasp
(eval-when (:load-toplevel :compile-toplevel :execute)
  (setf *load-verbose* nil)
  (defun use-ecl-byte-compiler-p () nil))

#+clozure (in-package :ccl)
#+(and clozure windows-target) ;; See http://trac.clozure.com/ccl/ticket/1117
(eval-when (:load-toplevel :compile-toplevel :execute)
  (unless (fboundp 'external-process-wait)
    (in-development-mode
     (defun external-process-wait (proc)
       (when (and (external-process-pid proc) (eq (external-process-%status proc) :running))
         (with-interrupts-enabled
             (wait-on-semaphore (external-process-completed proc))))
       (values (external-process-%exit-code proc)
               (external-process-%status proc))))))
#+clozure (in-package :uiop/common-lisp) ;; back in this package.

#+cmucl
(eval-when (:load-toplevel :compile-toplevel :execute)
  (setf ext:*gc-verbose* nil)
  (defun user-homedir-pathname ()
    (first (ext:search-list (cl:user-homedir-pathname)))))

#+cormanlisp
(eval-when (:load-toplevel :compile-toplevel :execute)
  (deftype logical-pathname () nil)
  (defun make-broadcast-stream () *error-output*)
  (defun translate-logical-pathname (x) x)
  (defun user-homedir-pathname (&optional host)
    (declare (ignore host))
    (parse-namestring (format nil "~A\\" (cl:user-homedir-pathname))))
  (defun file-namestring (p)
    (setf p (pathname p))
    (format nil "~@[~A~]~@[.~A~]" (pathname-name p) (pathname-type p))))

#+ecl
(eval-when (:load-toplevel :compile-toplevel :execute)
  (setf *load-verbose* nil)
  (defun use-ecl-byte-compiler-p () (and (member :ecl-bytecmp *features*) t))
  (unless (use-ecl-byte-compiler-p) (require :cmp)))

#+gcl
(eval-when (:load-toplevel :compile-toplevel :execute)
  (unless (member :ansi-cl *features*)
    (error "ASDF only supports GCL in ANSI mode. Aborting.~%"))
  (setf compiler::*compiler-default-type* (pathname "")
        compiler::*lsp-ext* "")
  #.(let ((code ;; Only support very recent GCL 2.7.0 from November 2013 or later.
            (cond
              #+gcl
              ((or (< system::*gcl-major-version* 2)
                   (and (= system::*gcl-major-version* 2)
                        (< system::*gcl-minor-version* 7)))
               '(error "GCL 2.7 or later required to use ASDF")))))
      (eval code)
      code))

#+genera
(eval-when (:load-toplevel :compile-toplevel :execute)
  (unless (fboundp 'lambda)
    (defmacro lambda (&whole form &rest bvl-decls-and-body)
      (declare (ignore bvl-decls-and-body)(zwei::indentation 1 1))
      `#',(cons 'lisp::lambda (cdr form))))
  (unless (fboundp 'ensure-directories-exist)
    (defun ensure-directories-exist (path)
      (fs:create-directories-recursively (pathname path))))
  (unless (fboundp 'read-sequence)
    (defun read-sequence (sequence stream &key (start 0) end)
      (scl:send stream :string-in nil sequence start end)))
  (unless (fboundp 'write-sequence)
    (defun write-sequence (sequence stream &key (start 0) end)
      (scl:send stream :string-out sequence start end)
      sequence)))

#+lispworks
(eval-when (:load-toplevel :compile-toplevel :execute)
  ;; lispworks 3 and earlier cannot be checked for so we always assume
  ;; at least version 4
  (unless (member :lispworks4 *features*)
    (pushnew :lispworks5+ *features*)
    (unless (member :lispworks5 *features*)
      (pushnew :lispworks6+ *features*)
      (unless (member :lispworks6 *features*)
        (pushnew :lispworks7+ *features*)))))

#.(or #+mcl ;; the #$ doesn't work on other lisps, even protected by #+mcl, so we use this trick
      (read-from-string
       "(eval-when (:load-toplevel :compile-toplevel :execute)
          (ccl:define-entry-point (_getenv \"getenv\") ((name :string)) :string)
          (ccl:define-entry-point (_system \"system\") ((name :string)) :int)
          ;; Note: ASDF may expect user-homedir-pathname to provide
          ;; the pathname of the current user's home directory, whereas
          ;; MCL by default provides the directory from which MCL was started.
          ;; See http://code.google.com/p/mcl/wiki/Portability
          (defun user-homedir-pathname ()
            (ccl::findfolder #$kuserdomain #$kCurrentUserFolderType))
          (defun probe-posix (posix-namestring)
            \"If a file exists for the posix namestring, return the pathname\"
            (ccl::with-cstrs ((cpath posix-namestring))
              (ccl::rlet ((is-dir :boolean)
                          (fsref :fsref))
                (when (eq #$noerr (#_fspathmakeref cpath fsref is-dir))
                  (ccl::%path-from-fsref fsref is-dir))))))"))

#+mkcl
(eval-when (:load-toplevel :compile-toplevel :execute)
  (require :cmp)
  (setq clos::*redefine-class-in-place* t)) ;; Make sure we have strict ANSI class redefinition semantics


;;;; Looping
(eval-when (:load-toplevel :compile-toplevel :execute)
  (defmacro loop* (&rest rest)
    #-genera `(loop ,@rest)
    #+genera `(lisp:loop ,@rest))) ;; In genera, CL:LOOP can't destructure, so we use LOOP*. Sigh.


;;;; compatfmt: avoid fancy format directives when unsupported
(eval-when (:load-toplevel :compile-toplevel :execute)
  (defun frob-substrings (string substrings &optional frob)
    "for each substring in SUBSTRINGS, find occurrences of it within STRING
that don't use parts of matched occurrences of previous strings, and
FROB them, that is to say, remove them if FROB is NIL,
replace by FROB if FROB is a STRING, or if FROB is a FUNCTION,
call FROB with the match and a function that emits a string in the output.
Return a string made of the parts not omitted or emitted by FROB."
    (declare (optimize (speed 0) (safety #-gcl 3 #+gcl 0) (debug 3)))
    (let ((length (length string)) (stream nil))
      (labels ((emit-string (x &optional (start 0) (end (length x)))
                 (when (< start end)
                   (unless stream (setf stream (make-string-output-stream)))
                   (write-string x stream :start start :end end)))
               (emit-substring (start end)
                 (when (and (zerop start) (= end length))
                   (return-from frob-substrings string))
                 (emit-string string start end))
               (recurse (substrings start end)
                 (cond
                   ((>= start end))
                   ((null substrings) (emit-substring start end))
                   (t (let* ((sub-spec (first substrings))
                             (sub (if (consp sub-spec) (car sub-spec) sub-spec))
                             (fun (if (consp sub-spec) (cdr sub-spec) frob))
                             (found (search sub string :start2 start :end2 end))
                             (more (rest substrings)))
                        (cond
                          (found
                           (recurse more start found)
                           (etypecase fun
                             (null)
                             (string (emit-string fun))
                             (function (funcall fun sub #'emit-string)))
                           (recurse substrings (+ found (length sub)) end))
                          (t
                           (recurse more start end))))))))
        (recurse substrings 0 length))
      (if stream (get-output-stream-string stream) "")))

  (defmacro compatfmt (format)
    #+(or gcl genera)
    (frob-substrings format `("~3i~_" #+genera ,@'("~@<" "~@;" "~@:>" "~:>")))
    #-(or gcl genera) format))
;;;; -------------------------------------------------------------------------
;;;; General Purpose Utilities for ASDF

(uiop/package:define-package :uiop/utility
  (:use :uiop/common-lisp :uiop/package)
  ;; import and reexport a few things defined in :uiop/common-lisp
  (:import-from :uiop/common-lisp #:compatfmt #:loop* #:frob-substrings
   #+(or clasp ecl) #:use-ecl-byte-compiler-p #+mcl #:probe-posix)
  (:export #:compatfmt #:loop* #:frob-substrings #:compatfmt
   #+(or clasp ecl) #:use-ecl-byte-compiler-p #+mcl #:probe-posix)
  (:export
   ;; magic helper to define debugging functions:
   #:uiop-debug #:load-uiop-debug-utility #:*uiop-debug-utility*
   #:with-upgradability ;; (un)defining functions in an upgrade-friendly way
   #:defun* #:defgeneric*
   #:nest #:if-let ;; basic flow control
   #:parse-body ;; macro definition helper
   #:while-collecting #:appendf #:length=n-p #:ensure-list ;; lists
   #:remove-plist-keys #:remove-plist-key ;; plists
   #:emptyp ;; sequences
   #:+non-base-chars-exist-p+ ;; characters
   #:+max-character-type-index+ #:character-type-index #:+character-types+
   #:base-string-p #:strings-common-element-type #:reduce/strcat #:strcat ;; strings
   #:first-char #:last-char #:split-string #:stripln #:+cr+ #:+lf+ #:+crlf+
   #:string-prefix-p #:string-enclosed-p #:string-suffix-p
   #:standard-case-symbol-name #:find-standard-case-symbol ;; symbols
   #:coerce-class ;; CLOS
   #:stamp< #:stamps< #:stamp*< #:stamp<= ;; stamps
   #:earlier-stamp #:stamps-earliest #:earliest-stamp
   #:later-stamp #:stamps-latest #:latest-stamp #:latest-stamp-f
   #:list-to-hash-set #:ensure-gethash ;; hash-table
   #:ensure-function #:access-at #:access-at-count ;; functions
   #:call-function #:call-functions #:register-hook-function
   #:lexicographic< #:lexicographic<= ;; version
   #:simple-style-warning #:style-warn ;; simple style warnings
   #:match-condition-p #:match-any-condition-p ;; conditions
   #:call-with-muffled-conditions #:with-muffled-conditions
   #:not-implemented-error #:parameter-error))
(in-package :uiop/utility)

;;;; Defining functions in a way compatible with hot-upgrade:
;; DEFUN* and DEFGENERIC* use FMAKUNBOUND to delete any previous fdefinition,
;; thus replacing the function without warning or error
;; even if the signature and/or generic-ness of the function has changed.
;; For a generic function, this invalidates any previous DEFMETHOD.
(eval-when (:load-toplevel :compile-toplevel :execute)
  (macrolet
      ((defdef (def* def)
         `(defmacro ,def* (name formals &rest rest)
            (destructuring-bind (name &key (supersede t))
                (if (or (atom name) (eq (car name) 'setf))
                    (list name :supersede nil)
                    name)
              (declare (ignorable supersede))
              `(progn
                 ;; We usually try to do it only for the functions that need it,
                 ;; which happens in asdf/upgrade - however, for ECL, we need this hammer.
                 ,@(when supersede
                     `((fmakunbound ',name)))
                 ,@(when (and #+(or clasp ecl) (symbolp name)) ; fails for setf functions on ecl
                     `((declaim (notinline ,name))))
                 (,',def ,name ,formals ,@rest))))))
    (defdef defgeneric* defgeneric)
    (defdef defun* defun))
  (defmacro with-upgradability ((&optional) &body body)
    "Evaluate BODY at compile- load- and run- times, with DEFUN and DEFGENERIC modified
to also declare the functions NOTINLINE and to accept a wrapping the function name
specification into a list with keyword argument SUPERSEDE (which defaults to T if the name
is not wrapped, and NIL if it is wrapped). If SUPERSEDE is true, call UNDEFINE-FUNCTION
to supersede any previous definition."
    `(eval-when (:compile-toplevel :load-toplevel :execute)
       ,@(loop :for form :in body :collect
               (if (consp form)
                   (destructuring-bind (car . cdr) form
                     (case car
                       ((defun) `(defun* ,@cdr))
                       ((defgeneric) `(defgeneric* ,@cdr))
                       (otherwise form)))
                   form)))))

;;; Magic debugging help. See contrib/debug.lisp
(with-upgradability ()
  (defvar *uiop-debug-utility*
    '(or (ignore-errors
          (symbol-call :asdf :system-relative-pathname :uiop "contrib/debug.lisp"))
      (symbol-call :uiop/pathname :subpathname (user-homedir-pathname) "common-lisp/asdf/uiop/contrib/debug.lisp"))
    "form that evaluates to the pathname to your favorite debugging utilities")

  (defmacro uiop-debug (&rest keys)
    `(eval-when (:compile-toplevel :load-toplevel :execute)
       (load-uiop-debug-utility ,@keys)))

  (defun load-uiop-debug-utility (&key package utility-file)
    (let* ((*package* (if package (find-package package) *package*))
           (keyword (read-from-string
                     (format nil ":DBG-~:@(~A~)" (package-name *package*)))))
      (unless (member keyword *features*)
        (let* ((utility-file (or utility-file *uiop-debug-utility*))
               (file (ignore-errors (probe-file (eval utility-file)))))
          (if file (load file)
              (error "Failed to locate debug utility file: ~S" utility-file)))))))

;;; Flow control
(with-upgradability ()
  (defmacro nest (&rest things)
    "Macro to do keep code nesting and indentation under control." ;; Thanks to mbaringer
    (reduce #'(lambda (outer inner) `(,@outer ,inner))
            things :from-end t))

  (defmacro if-let (bindings &body (then-form &optional else-form)) ;; from alexandria
    ;; bindings can be (var form) or ((var1 form1) ...)
    (let* ((binding-list (if (and (consp bindings) (symbolp (car bindings)))
                             (list bindings)
                             bindings))
           (variables (mapcar #'car binding-list)))
      `(let ,binding-list
         (if (and ,@variables)
             ,then-form
             ,else-form)))))

;;; Macro definition helper
(with-upgradability ()
  (defun parse-body (body &key documentation whole) ;; from alexandria
    "Parses BODY into (values remaining-forms declarations doc-string).
Documentation strings are recognized only if DOCUMENTATION is true.
Syntax errors in body are signalled and WHOLE is used in the signal
arguments when given."
    (let ((doc nil)
          (decls nil)
          (current nil))
      (tagbody
       :declarations
         (setf current (car body))
         (when (and documentation (stringp current) (cdr body))
           (if doc
               (error "Too many documentation strings in ~S." (or whole body))
               (setf doc (pop body)))
           (go :declarations))
         (when (and (listp current) (eql (first current) 'declare))
           (push (pop body) decls)
           (go :declarations)))
      (values body (nreverse decls) doc))))


;;; List manipulation
(with-upgradability ()
  (defmacro while-collecting ((&rest collectors) &body body)
    "COLLECTORS should be a list of names for collections.  A collector
defines a function that, when applied to an argument inside BODY, will
add its argument to the corresponding collection.  Returns multiple values,
a list for each collection, in order.
   E.g.,
\(while-collecting \(foo bar\)
           \(dolist \(x '\(\(a 1\) \(b 2\) \(c 3\)\)\)
             \(foo \(first x\)\)
             \(bar \(second x\)\)\)\)
Returns two values: \(A B C\) and \(1 2 3\)."
    (let ((vars (mapcar #'(lambda (x) (gensym (symbol-name x))) collectors))
          (initial-values (mapcar (constantly nil) collectors)))
      `(let ,(mapcar #'list vars initial-values)
         (flet ,(mapcar #'(lambda (c v) `(,c (x) (push x ,v) (values))) collectors vars)
           ,@body
           (values ,@(mapcar #'(lambda (v) `(reverse ,v)) vars))))))

  (define-modify-macro appendf (&rest args)
    append "Append onto list") ;; only to be used on short lists.

  (defun length=n-p (x n) ;is it that (= (length x) n) ?
    (check-type n (integer 0 *))
    (loop
      :for l = x :then (cdr l)
      :for i :downfrom n :do
        (cond
          ((zerop i) (return (null l)))
          ((not (consp l)) (return nil)))))

  (defun ensure-list (x)
    (if (listp x) x (list x))))


;;; Remove a key from a plist, i.e. for keyword argument cleanup
(with-upgradability ()
  (defun remove-plist-key (key plist)
    "Remove a single key from a plist"
    (loop* :for (k v) :on plist :by #'cddr
           :unless (eq k key)
           :append (list k v)))

  (defun remove-plist-keys (keys plist)
    "Remove a list of keys from a plist"
    (loop* :for (k v) :on plist :by #'cddr
           :unless (member k keys)
           :append (list k v))))


;;; Sequences
(with-upgradability ()
  (defun emptyp (x)
    "Predicate that is true for an empty sequence"
    (or (null x) (and (vectorp x) (zerop (length x))))))


;;; Characters
(with-upgradability ()
  ;; base-char != character on ECL, LW, SBCL, Genera.
  ;; NB: We assume a total order on character types.
  ;; If that's not true... this code will need to be updated.
  (defparameter +character-types+ ;; assuming a simple hierarchy
    #.(coerce (loop* :for (type next) :on
                     '(;; In SCL, all characters seem to be 16-bit base-char
                       ;; Yet somehow character fails to be a subtype of base-char
                       #-scl base-char
                       ;; LW6 has BASE-CHAR < SIMPLE-CHAR < CHARACTER
                       ;; LW7 has BASE-CHAR < BMP-CHAR < SIMPLE-CHAR = CHARACTER
                       #+lispworks7+ lw:bmp-char
                       #+lispworks lw:simple-char
                       character)
                     :unless (and next (subtypep next type))
                     :collect type) 'vector))
  (defparameter +max-character-type-index+ (1- (length +character-types+)))
  (defconstant +non-base-chars-exist-p+ (plusp +max-character-type-index+))
  (when +non-base-chars-exist-p+ (pushnew :non-base-chars-exist-p *features*)))

(with-upgradability ()
  (defun character-type-index (x)
    (declare (ignorable x))
    #.(case +max-character-type-index+
        (0 0)
        (1 '(etypecase x
             (character (if (typep x 'base-char) 0 1))
             (symbol (if (subtypep x 'base-char) 0 1))))
        (otherwise
         '(or (position-if (etypecase x
                             (character #'(lambda (type) (typep x type)))
                             (symbol #'(lambda (type) (subtypep x type))))
               +character-types+)
           (error "Not a character or character type: ~S" x))))))


;;; Strings
(with-upgradability ()
  (defun base-string-p (string)
    "Does the STRING only contain BASE-CHARs?"
    (declare (ignorable string))
    (and #+non-base-chars-exist-p (eq 'base-char (array-element-type string))))

  (defun strings-common-element-type (strings)
    "What least subtype of CHARACTER can contain all the elements of all the STRINGS?"
    (declare (ignorable strings))
    #.(if +non-base-chars-exist-p+
          `(aref +character-types+
            (loop :with index = 0 :for s :in strings :do
              (flet ((consider (i)
                       (cond ((= i ,+max-character-type-index+) (return i))
                             ,@(when (> +max-character-type-index+ 1) `(((> i index) (setf index i)))))))
                (cond
                  ((emptyp s)) ;; NIL or empty string
                  ((characterp s) (consider (character-type-index s)))
                  ((stringp s) (let ((string-type-index
                                       (character-type-index (array-element-type s))))
                                 (unless (>= index string-type-index)
                                   (loop :for c :across s :for i = (character-type-index c)
                                         :do (consider i)
                                         ,@(when (> +max-character-type-index+ 1)
                                             `((when (= i string-type-index) (return))))))))
                  (t (error "Invalid string designator ~S for ~S" s 'strings-common-element-type))))
                  :finally (return index)))
          ''character))

  (defun reduce/strcat (strings &key key start end)
    "Reduce a list as if by STRCAT, accepting KEY START and END keywords like REDUCE.
NIL is interpreted as an empty string. A character is interpreted as a string of length one."
    (when (or start end) (setf strings (subseq strings start end)))
    (when key (setf strings (mapcar key strings)))
    (loop :with output = (make-string (loop :for s :in strings
                                            :sum (if (characterp s) 1 (length s)))
                                      :element-type (strings-common-element-type strings))
          :with pos = 0
          :for input :in strings
          :do (etypecase input
                (null)
                (character (setf (char output pos) input) (incf pos))
                (string (replace output input :start1 pos) (incf pos (length input))))
          :finally (return output)))

  (defun strcat (&rest strings)
    "Concatenate strings.
NIL is interpreted as an empty string, a character as a string of length one."
    (reduce/strcat strings))

  (defun first-char (s)
    "Return the first character of a non-empty string S, or NIL"
    (and (stringp s) (plusp (length s)) (char s 0)))

  (defun last-char (s)
    "Return the last character of a non-empty string S, or NIL"
    (and (stringp s) (plusp (length s)) (char s (1- (length s)))))

  (defun split-string (string &key max (separator '(#\Space #\Tab)))
    "Split STRING into a list of components separated by
any of the characters in the sequence SEPARATOR.
If MAX is specified, then no more than max(1,MAX) components will be returned,
starting the separation from the end, e.g. when called with arguments
 \"a.b.c.d.e\" :max 3 :separator \".\" it will return (\"a.b.c\" \"d\" \"e\")."
    (block ()
      (let ((list nil) (words 0) (end (length string)))
        (when (zerop end) (return nil))
        (flet ((separatorp (char) (find char separator))
               (done () (return (cons (subseq string 0 end) list))))
          (loop
            :for start = (if (and max (>= words (1- max)))
                             (done)
                             (position-if #'separatorp string :end end :from-end t))
            :do (when (null start) (done))
                (push (subseq string (1+ start) end) list)
                (incf words)
                (setf end start))))))

  (defun string-prefix-p (prefix string)
    "Does STRING begin with PREFIX?"
    (let* ((x (string prefix))
           (y (string string))
           (lx (length x))
           (ly (length y)))
      (and (<= lx ly) (string= x y :end2 lx))))

  (defun string-suffix-p (string suffix)
    "Does STRING end with SUFFIX?"
    (let* ((x (string string))
           (y (string suffix))
           (lx (length x))
           (ly (length y)))
      (and (<= ly lx) (string= x y :start1 (- lx ly)))))

  (defun string-enclosed-p (prefix string suffix)
    "Does STRING begin with PREFIX and end with SUFFIX?"
    (and (string-prefix-p prefix string)
         (string-suffix-p string suffix)))

  (defvar +cr+ (coerce #(#\Return) 'string))
  (defvar +lf+ (coerce #(#\Linefeed) 'string))
  (defvar +crlf+ (coerce #(#\Return #\Linefeed) 'string))

  (defun stripln (x)
    "Strip a string X from any ending CR, LF or CRLF.
Return two values, the stripped string and the ending that was stripped,
or the original value and NIL if no stripping took place.
Since our STRCAT accepts NIL as empty string designator,
the two results passed to STRCAT always reconstitute the original string"
    (check-type x string)
    (block nil
      (flet ((c (end) (when (string-suffix-p x end)
                        (return (values (subseq x 0 (- (length x) (length end))) end)))))
        (when x (c +crlf+) (c +lf+) (c +cr+) (values x nil)))))

  (defun standard-case-symbol-name (name-designator)
    "Given a NAME-DESIGNATOR for a symbol, if it is a symbol, convert it to a string using STRING;
if it is a string, use STRING-UPCASE on an ANSI CL platform, or STRING on a so-called \"modern\"
platform such as Allegro with modern syntax."
    (check-type name-designator (or string symbol))
    (cond
      ((or (symbolp name-designator) #+allegro (eq excl:*current-case-mode* :case-sensitive-lower))
       (string name-designator))
      ;; Should we be doing something on CLISP?
      (t (string-upcase name-designator))))

  (defun find-standard-case-symbol (name-designator package-designator &optional (error t))
    "Find a symbol designated by NAME-DESIGNATOR in a package designated by PACKAGE-DESIGNATOR,
where STANDARD-CASE-SYMBOL-NAME is used to transform them if these designators are strings.
If optional ERROR argument is NIL, return NIL instead of an error when the symbol is not found."
    (find-symbol* (standard-case-symbol-name name-designator)
                  (etypecase package-designator
                    ((or package symbol) package-designator)
                    (string (standard-case-symbol-name package-designator)))
                  error)))

;;; stamps: a REAL or a boolean where NIL=-infinity, T=+infinity
(eval-when (#-lispworks :compile-toplevel :load-toplevel :execute)
  (deftype stamp () '(or real boolean)))
(with-upgradability ()
  (defun stamp< (x y)
    (etypecase x
      (null (and y t))
      ((eql t) nil)
      (real (etypecase y
              (null nil)
              ((eql t) t)
              (real (< x y))))))
  (defun stamps< (list) (loop :for y :in list :for x = nil :then y :always (stamp< x y)))
  (defun stamp*< (&rest list) (stamps< list))
  (defun stamp<= (x y) (not (stamp< y x)))
  (defun earlier-stamp (x y) (if (stamp< x y) x y))
  (defun stamps-earliest (list) (reduce 'earlier-stamp list :initial-value t))
  (defun earliest-stamp (&rest list) (stamps-earliest list))
  (defun later-stamp (x y) (if (stamp< x y) y x))
  (defun stamps-latest (list) (reduce 'later-stamp list :initial-value nil))
  (defun latest-stamp (&rest list) (stamps-latest list))
  (define-modify-macro latest-stamp-f (&rest stamps) latest-stamp))


;;; Function designators
(with-upgradability ()
  (defun ensure-function (fun &key (package :cl))
    "Coerce the object FUN into a function.

If FUN is a FUNCTION, return it.
If the FUN is a non-sequence literal constant, return constantly that,
i.e. for a boolean keyword character number or pathname.
Otherwise if FUN is a non-literally constant symbol, return its FDEFINITION.
If FUN is a CONS, return the function that applies its CAR
to the appended list of the rest of its CDR and the arguments,
unless the CAR is LAMBDA, in which case the expression is evaluated.
If FUN is a string, READ a form from it in the specified PACKAGE (default: CL)
and EVAL that in a (FUNCTION ...) context."
    (etypecase fun
      (function fun)
      ((or boolean keyword character number pathname) (constantly fun))
      (hash-table #'(lambda (x) (gethash x fun)))
      (symbol (fdefinition fun))
      (cons (if (eq 'lambda (car fun))
                (eval fun)
                #'(lambda (&rest args) (apply (car fun) (append (cdr fun) args)))))
      (string (eval `(function ,(with-standard-io-syntax
                                  (let ((*package* (find-package package)))
                                    (read-from-string fun))))))))

  (defun access-at (object at)
    "Given an OBJECT and an AT specifier, list of successive accessors,
call each accessor on the result of the previous calls.
An accessor may be an integer, meaning a call to ELT,
a keyword, meaning a call to GETF,
NIL, meaning identity,
a function or other symbol, meaning itself,
or a list of a function designator and arguments, interpreted as per ENSURE-FUNCTION.
As a degenerate case, the AT specifier may be an atom of a single such accessor
instead of a list."
    (flet ((access (object accessor)
             (etypecase accessor
               (function (funcall accessor object))
               (integer (elt object accessor))
               (keyword (getf object accessor))
               (null object)
               (symbol (funcall accessor object))
               (cons (funcall (ensure-function accessor) object)))))
      (if (listp at)
          (dolist (accessor at object)
            (setf object (access object accessor)))
          (access object at))))

  (defun access-at-count (at)
    "From an AT specification, extract a COUNT of maximum number
of sub-objects to read as per ACCESS-AT"
    (cond
      ((integerp at)
       (1+ at))
      ((and (consp at) (integerp (first at)))
       (1+ (first at)))))

  (defun call-function (function-spec &rest arguments)
    "Call the function designated by FUNCTION-SPEC as per ENSURE-FUNCTION,
with the given ARGUMENTS"
    (apply (ensure-function function-spec) arguments))

  (defun call-functions (function-specs)
    "For each function in the list FUNCTION-SPECS, in order, call the function as per CALL-FUNCTION"
    (map () 'call-function function-specs))

  (defun register-hook-function (variable hook &optional call-now-p)
    "Push the HOOK function (a designator as per ENSURE-FUNCTION) onto the hook VARIABLE.
When CALL-NOW-P is true, also call the function immediately."
    (pushnew hook (symbol-value variable) :test 'equal)
    (when call-now-p (call-function hook))))


;;; CLOS
(with-upgradability ()
  (defun coerce-class (class &key (package :cl) (super t) (error 'error))
    "Coerce CLASS to a class that is subclass of SUPER if specified,
or invoke ERROR handler as per CALL-FUNCTION.

A keyword designates the name a symbol, which when found in either PACKAGE, designates a class.
-- for backward compatibility, *PACKAGE* is also accepted for now, but this may go in the future.
A string is read as a symbol while in PACKAGE, the symbol designates a class.

A class object designates itself.
NIL designates itself (no class).
A symbol otherwise designates a class by name."
    (let* ((normalized
            (typecase class
              (keyword (or (find-symbol* class package nil)
                           (find-symbol* class *package* nil)))
              (string (symbol-call :uiop :safe-read-from-string class :package package))
              (t class)))
           (found
            (etypecase normalized
              ((or standard-class built-in-class) normalized)
              ((or null keyword) nil)
              (symbol (find-class normalized nil nil))))
           (super-class
            (etypecase super
              ((or standard-class built-in-class) super)
              ((or null keyword) nil)
              (symbol (find-class super nil nil)))))
      #+allegro (when found (mop:finalize-inheritance found))
      (or (and found
               (or (eq super t) (#-cormanlisp subtypep #+cormanlisp cl::subclassp found super-class))
               found)
          (call-function error "Can't coerce ~S to a ~:[class~;subclass of ~:*~S~]" class super)))))


;;; Hash-tables
(with-upgradability ()
  (defun ensure-gethash (key table default)
    "Lookup the TABLE for a KEY as by GETHASH, but if not present,
call the (possibly constant) function designated by DEFAULT as per CALL-FUNCTION,
set the corresponding entry to the result in the table.
Return two values: the entry after its optional computation, and whether it was found"
    (multiple-value-bind (value foundp) (gethash key table)
      (values
       (if foundp
           value
           (setf (gethash key table) (call-function default)))
       foundp)))

  (defun list-to-hash-set (list &aux (h (make-hash-table :test 'equal)))
    "Convert a LIST into hash-table that has the same elements when viewed as a set,
up to the given equality TEST"
    (dolist (x list h) (setf (gethash x h) t))))


;;; Lexicographic comparison of lists of numbers
(with-upgradability ()
  (defun lexicographic< (element< x y)
    "Lexicographically compare two lists of using the function element< to compare elements.
element< is a strict total order; the resulting order on X and Y will also be strict."
    (cond ((null y) nil)
          ((null x) t)
          ((funcall element< (car x) (car y)) t)
          ((funcall element< (car y) (car x)) nil)
          (t (lexicographic< element< (cdr x) (cdr y)))))

  (defun lexicographic<= (element< x y)
    "Lexicographically compare two lists of using the function element< to compare elements.
element< is a strict total order; the resulting order on X and Y will be a non-strict total order."
    (not (lexicographic< element< y x))))


;;; Simple style warnings
(with-upgradability ()
  (define-condition simple-style-warning
      #+sbcl (sb-int:simple-style-warning) #-sbcl (simple-condition style-warning)
    ())

  (defun style-warn (datum &rest arguments)
    (etypecase datum
      (string (warn (make-condition 'simple-style-warning :format-control datum :format-arguments arguments)))
      (symbol (assert (subtypep datum 'style-warning)) (apply 'warn datum arguments))
      (style-warning (apply 'warn datum arguments)))))


;;; Condition control

(with-upgradability ()
  (defparameter +simple-condition-format-control-slot+
    #+abcl 'system::format-control
    #+allegro 'excl::format-control
    #+(or clasp ecl mkcl) 'si::format-control
    #+clisp 'system::$format-control
    #+clozure 'ccl::format-control
    #+(or cmucl scl) 'conditions::format-control
    #+(or gcl lispworks) 'conditions::format-string
    #+sbcl 'sb-kernel:format-control
    #-(or abcl allegro clasp clisp clozure cmucl ecl gcl lispworks mkcl sbcl scl) nil
    "Name of the slot for FORMAT-CONTROL in simple-condition")

  (defun match-condition-p (x condition)
    "Compare received CONDITION to some pattern X:
a symbol naming a condition class,
a simple vector of length 2, arguments to find-symbol* with result as above,
or a string describing the format-control of a simple-condition."
    (etypecase x
      (symbol (typep condition x))
      ((simple-vector 2)
       (ignore-errors (typep condition (find-symbol* (svref x 0) (svref x 1) nil))))
      (function (funcall x condition))
      (string (and (typep condition 'simple-condition)
                   ;; On SBCL, it's always set and the check triggers a warning
                   #+(or allegro clozure cmucl lispworks scl)
                   (slot-boundp condition +simple-condition-format-control-slot+)
                   (ignore-errors (equal (simple-condition-format-control condition) x))))))

  (defun match-any-condition-p (condition conditions)
    "match CONDITION against any of the patterns of CONDITIONS supplied"
    (loop :for x :in conditions :thereis (match-condition-p x condition)))

  (defun call-with-muffled-conditions (thunk conditions)
    "calls the THUNK in a context where the CONDITIONS are muffled"
    (handler-bind ((t #'(lambda (c) (when (match-any-condition-p c conditions)
                                      (muffle-warning c)))))
      (funcall thunk)))

  (defmacro with-muffled-conditions ((conditions) &body body)
    "Shorthand syntax for CALL-WITH-MUFFLED-CONDITIONS"
    `(call-with-muffled-conditions #'(lambda () ,@body) ,conditions)))

;;; Conditions

(with-upgradability ()
  (define-condition not-implemented-error (error)
    ((functionality :initarg :functionality)
     (format-control :initarg :format-control)
     (format-arguments :initarg :format-arguments))
    (:report (lambda (condition stream)
               (format stream "Not implemented: ~s~@[ ~?~]"
                       (slot-value condition 'functionality)
                       (slot-value condition 'format-control)
                       (slot-value condition 'format-arguments)))))

  (defun not-implemented-error (functionality &optional format-control &rest format-arguments)
    "Signal an error because some FUNCTIONALITY is not implemented in the current version
of the software on the current platform; it may or may not be implemented in different combinations
of version of the software and of the underlying platform. Optionally, report a formatted error
message."
    (error 'not-implemented-error
           :functionality functionality
           :format-control format-control
           :format-arguments format-arguments))

  (define-condition parameter-error (error)
    ((functionality :initarg :functionality)
     (format-control :initarg :format-control)
     (format-arguments :initarg :format-arguments))
    (:report (lambda (condition stream)
               (apply 'format stream
                       (slot-value condition 'format-control)
                       (slot-value condition 'functionality)
                       (slot-value condition 'format-arguments)))))

  ;; Note that functionality MUST be passed as the second argument to parameter-error, just after
  ;; the format-control. If you want it to not appear in first position in actual message, use
  ;; ~* and ~:* to adjust parameter order.
  (defun parameter-error (format-control functionality &rest format-arguments)
    "Signal an error because some FUNCTIONALITY or its specific implementation on a given underlying
platform does not accept a given parameter or combination of parameters. Report a formatted error
message, that takes the functionality as its first argument (that can be skipped with ~*)."
    (error 'parameter-error
           :functionality functionality
           :format-control format-control
           :format-arguments format-arguments)))

(uiop/package:define-package :uiop/version
  (:recycle :uiop/version :uiop/utility :asdf)
  (:use :uiop/common-lisp :uiop/package :uiop/utility)
  (:export
   #:*uiop-version*
   #:parse-version #:unparse-version #:version< #:version<= ;; version support, moved from uiop/utility
   #:next-version
   #:deprecated-function-condition #:deprecated-function-name ;; deprecation control
   #:deprecated-function-style-warning #:deprecated-function-warning
   #:deprecated-function-error #:deprecated-function-should-be-deleted
   #:version-deprecation #:with-deprecation))
(in-package :uiop/version)

(with-upgradability ()
  (defparameter *uiop-version* "3.2.0")

  (defun unparse-version (version-list)
    "From a parsed version (a list of natural numbers), compute the version string"
    (format nil "~{~D~^.~}" version-list))

  (defun parse-version (version-string &optional on-error)
    "Parse a VERSION-STRING as a series of natural numbers separated by dots.
Return a (non-null) list of integers if the string is valid;
otherwise return NIL.

When invalid, ON-ERROR is called as per CALL-FUNCTION before to return NIL,
with format arguments explaining why the version is invalid.
ON-ERROR is also called if the version is not canonical
in that it doesn't print back to itself, but the list is returned anyway."
    (block nil
      (unless (stringp version-string)
        (call-function on-error "~S: ~S is not a string" 'parse-version version-string)
        (return))
      (unless (loop :for prev = nil :then c :for c :across version-string
                    :always (or (digit-char-p c)
                                (and (eql c #\.) prev (not (eql prev #\.))))
                    :finally (return (and c (digit-char-p c))))
        (call-function on-error "~S: ~S doesn't follow asdf version numbering convention"
                       'parse-version version-string)
        (return))
      (let* ((version-list
               (mapcar #'parse-integer (split-string version-string :separator ".")))
             (normalized-version (unparse-version version-list)))
        (unless (equal version-string normalized-version)
          (call-function on-error "~S: ~S contains leading zeros" 'parse-version version-string))
        version-list)))

  (defun next-version (version)
    "When VERSION is not nil, it is a string, then parse it as a version, compute the next version
and return it as a string."
    (when version
      (let ((version-list (parse-version version)))
        (incf (car (last version-list)))
        (unparse-version version-list))))

  (defun version< (version1 version2)
    "Given two version strings, return T if the second is strictly newer"
    (let ((v1 (parse-version version1 nil))
          (v2 (parse-version version2 nil)))
      (lexicographic< '< v1 v2)))

  (defun version<= (version1 version2)
    "Given two version strings, return T if the second is newer or the same"
    (not (version< version2 version1))))


(with-upgradability ()
  (define-condition deprecated-function-condition (condition)
    ((name :initarg :name :reader deprecated-function-name)))
  (define-condition deprecated-function-style-warning (deprecated-function-condition style-warning) ())
  (define-condition deprecated-function-warning (deprecated-function-condition warning) ())
  (define-condition deprecated-function-error (deprecated-function-condition error) ())
  (define-condition deprecated-function-should-be-deleted (deprecated-function-condition error) ())

  (defun deprecated-function-condition-kind (type)
    (ecase type
      ((deprecated-function-style-warning) :style-warning)
      ((deprecated-function-warning) :warning)
      ((deprecated-function-error) :error)
      ((deprecated-function-should-be-deleted) :delete)))

  (defmethod print-object ((c deprecated-function-condition) stream)
    (let ((name (deprecated-function-name c)))
      (cond
        (*print-readably*
         (let ((fmt "#.(make-condition '~S :name ~S)")
               (args (list (type-of c) name)))
           (if *read-eval*
               (apply 'format stream fmt args)
               (error "Can't print ~?" fmt args))))
        (*print-escape*
         (print-unreadable-object (c stream :type t) (format stream ":name ~S" name)))
        (t
         (let ((*package* (find-package :cl))
               (type (type-of c)))
           (format stream
                   (if (eq type 'deprecated-function-should-be-deleted)
                       "~A: Still defining deprecated function~:P ~{~S~^ ~} that promised to delete"
                       "~A: Using deprecated function ~S -- please update your code to use a newer API.~
~@[~%The docstring for this function says:~%~A~%~]")
                   type name (when (symbolp name) (documentation name 'function))))))))

  (defun notify-deprecated-function (status name)
    (ecase status
      ((nil) nil)
      ((:style-warning) (style-warn 'deprecated-function-style-warning :name name))
      ((:warning) (warn 'deprecated-function-warning :name name))
      ((:error) (cerror "USE FUNCTION ANYWAY" 'deprecated-function-error :name name))))

  (defun version-deprecation (version &key (style-warning nil)
                                        (warning (next-version style-warning))
                                        (error (next-version warning))
                                        (delete (next-version error)))
    "Given a VERSION string, and the starting versions for notifying the programmer of
various levels of deprecation, return the current level of deprecation as per WITH-DEPRECATION
that is the highest level that has a declared version older than the specified version.
Each start version for a level of deprecation can be specified by a keyword argument, or
if left unspecified, will be the NEXT-VERSION of the immediate lower level of deprecation."
    (cond
      ((and delete (version<= delete version)) :delete)
      ((and error (version<= error version)) :error)
      ((and warning (version<= warning version)) :warning)
      ((and style-warning (version<= style-warning version)) :style-warning)))

  (defmacro with-deprecation ((level) &body definitions)
    "Given a deprecation LEVEL (a form to be EVAL'ed at macro-expansion time), instrument the
DEFUN and DEFMETHOD forms in DEFINITIONS to notify the programmer of the deprecation of the function
when it is compiled or called.

Increasing levels (as result from evaluating LEVEL) are: NIL (not deprecated yet),
:STYLE-WARNING (a style warning is issued when used), :WARNING (a full warning is issued when used),
:ERROR (a continuable error instead), and :DELETE (it's an error if the code is still there while
at that level).

Forms other than DEFUN and DEFMETHOD are not instrumented, and you can protect a DEFUN or DEFMETHOD
from instrumentation by enclosing it in a PROGN."
    (let ((level (eval level)))
      (check-type level (member nil :style-warning :warning :error :delete))
      (when (eq level :delete)
        (error 'deprecated-function-should-be-deleted :name
               (mapcar 'second
                       (remove-if-not #'(lambda (x) (member x '(defun defmethod)))
                                      definitions :key 'first))))
      (labels ((instrument (name head body whole)
                 (if level
                     (let ((notifiedp
                            (intern (format nil "*~A-~A-~A-~A*"
                                            :deprecated-function level name :notified-p))))
                       (multiple-value-bind (remaining-forms declarations doc-string)
                           (parse-body body :documentation t :whole whole)
                         `(progn
                            (defparameter ,notifiedp nil)
                            ;; tell some implementations to use the compiler-macro
                            (declaim (inline ,name))
                            (define-compiler-macro ,name (&whole form &rest args)
                              (declare (ignore args))
                              (notify-deprecated-function ,level ',name)
                              form)
                            (,@head ,@(when doc-string (list doc-string)) ,@declarations
                                    (unless ,notifiedp
                                      (setf ,notifiedp t)
                                      (notify-deprecated-function ,level ',name))
                                    ,@remaining-forms))))
                     `(progn
                        (eval-when (:compile-toplevel :load-toplevel :execute)
                          (setf (compiler-macro-function ',name) nil))
                        (declaim (notinline ,name))
                        (,@head ,@body)))))
        `(progn
           ,@(loop :for form :in definitions :collect
               (cond
                 ((and (consp form) (eq (car form) 'defun))
                  (instrument (second form) (subseq form 0 3) (subseq form 3) form))
                 ((and (consp form) (eq (car form) 'defmethod))
                  (let ((body-start (if (listp (third form)) 3 4)))
                    (instrument (second form)
                                (subseq form 0 body-start)
                                (subseq form body-start)
                                form)))
                 (t
                  form))))))))
;;;; ---------------------------------------------------------------------------
;;;; Access to the Operating System

(uiop/package:define-package :uiop/os
  (:use :uiop/common-lisp :uiop/package :uiop/utility)
  (:export
   #:featurep #:os-unix-p #:os-macosx-p #:os-windows-p #:os-genera-p #:detect-os ;; features
   #:os-cond
   #:getenv #:getenvp ;; environment variables
   #:implementation-identifier ;; implementation identifier
   #:implementation-type #:*implementation-type*
   #:operating-system #:architecture #:lisp-version-string
   #:hostname #:getcwd #:chdir
   ;; Windows shortcut support
   #:read-null-terminated-string #:read-little-endian
   #:parse-file-location-info #:parse-windows-shortcut))
(in-package :uiop/os)

;;; Features
(with-upgradability ()
  (defun featurep (x &optional (*features* *features*))
    "Checks whether a feature expression X is true with respect to the *FEATURES* set,
as per the CLHS standard for #+ and #-. Beware that just like the CLHS,
we assume symbols from the KEYWORD package are used, but that unless you're using #+/#-
your reader will not have magically used the KEYWORD package, so you need specify
keywords explicitly."
    (cond
      ((atom x) (and (member x *features*) t))
      ((eq :not (car x)) (assert (null (cddr x))) (not (featurep (cadr x))))
      ((eq :or (car x)) (some #'featurep (cdr x)))
      ((eq :and (car x)) (every #'featurep (cdr x)))
      (t (error "Malformed feature specification ~S" x))))

  ;; Starting with UIOP 3.1.5, these are runtime tests.
  ;; You may bind *features* with a copy of what your target system offers to test its properties.
  (defun os-macosx-p ()
    "Is the underlying operating system MacOS X?"
    ;; OS-MACOSX is not mutually exclusive with OS-UNIX,
    ;; in fact the former implies the latter.
    (featurep '(:or :darwin (:and :allegro :macosx) (:and :clisp :macos))))

  (defun os-unix-p ()
    "Is the underlying operating system some Unix variant?"
    (or (featurep '(:or :unix :cygwin)) (os-macosx-p)))

  (defun os-windows-p ()
    "Is the underlying operating system Microsoft Windows?"
    (and (not (os-unix-p)) (featurep '(:or :win32 :windows :mswindows :mingw32 :mingw64))))

  (defun os-genera-p ()
    "Is the underlying operating system Genera (running on a Symbolics Lisp Machine)?"
    (featurep :genera))

  (defun os-oldmac-p ()
    "Is the underlying operating system an (emulated?) MacOS 9 or earlier?"
    (featurep :mcl))

  (defun os-haiku-p ()
    "Is the underlying operating system Haiku?"
    (featurep :haiku))

  (defun detect-os ()
    "Detects the current operating system. Only needs be run at compile-time,
except on ABCL where it might change between FASL compilation and runtime."
    (loop* :with o
           :for (feature . detect) :in '((:os-unix . os-unix-p) (:os-macosx . os-macosx-p)
                                         (:os-windows . os-windows-p)
                                         (:genera . os-genera-p) (:os-oldmac . os-oldmac-p)
                                         (:haiku . os-haiku-p))
           :when (and (or (not o) (eq feature :os-macosx)) (funcall detect))
           :do (setf o feature) (pushnew feature *features*)
           :else :do (setf *features* (remove feature *features*))
           :finally
           (return (or o (error "Congratulations for trying ASDF on an operating system~%~
that is neither Unix, nor Windows, nor Genera, nor even old MacOS.~%Now you port it.")))))

  (defmacro os-cond (&rest clauses)
    #+abcl `(cond ,@clauses)
    #-abcl (loop* :for (test . body) :in clauses :when (eval test) :return `(progn ,@body)))

  (detect-os))

;;;; Environment variables: getting them, and parsing them.
(with-upgradability ()
  (defun getenv (x)
    "Query the environment, as in C getenv.
Beware: may return empty string if a variable is present but empty;
use getenvp to return NIL in such a case."
    (declare (ignorable x))
    #+(or abcl clasp clisp ecl xcl) (ext:getenv x)
    #+allegro (sys:getenv x)
    #+clozure (ccl:getenv x)
    #+cmucl (unix:unix-getenv x)
    #+scl (cdr (assoc x ext:*environment-list* :test #'string=))
    #+cormanlisp
    (let* ((buffer (ct:malloc 1))
           (cname (ct:lisp-string-to-c-string x))
           (needed-size (win:getenvironmentvariable cname buffer 0))
           (buffer1 (ct:malloc (1+ needed-size))))
      (prog1 (if (zerop (win:getenvironmentvariable cname buffer1 needed-size))
                 nil
                 (ct:c-string-to-lisp-string buffer1))
        (ct:free buffer)
        (ct:free buffer1)))
    #+gcl (system:getenv x)
    #+genera nil
    #+lispworks (lispworks:environment-variable x)
    #+mcl (ccl:with-cstrs ((name x))
            (let ((value (_getenv name)))
              (unless (ccl:%null-ptr-p value)
                (ccl:%get-cstring value))))
    #+mkcl (#.(or (find-symbol* 'getenv :si nil) (find-symbol* 'getenv :mk-ext nil)) x)
    #+sbcl (sb-ext:posix-getenv x)
    #-(or abcl allegro clasp clisp clozure cmucl cormanlisp ecl gcl genera lispworks mcl mkcl sbcl scl xcl)
    (error "~S is not supported on your implementation" 'getenv))

  (defsetf getenv (x) (val)
    "Set an environment variable."
      (declare (ignorable x val))
    #+allegro `(setf (sys:getenv ,x) ,val)
    #+clisp `(system::setenv ,x ,val)
    #+clozure `(ccl:setenv ,x ,val)
    #+cmucl `(unix:unix-setenv ,x ,val 1)
    #+ecl `(ext:setenv ,x ,val)
    #+lispworks `(hcl:setenv ,x ,val)
    #+mkcl `(mkcl:setenv ,x ,val)
    #+sbcl `(progn (require :sb-posix) (symbol-call :sb-posix :setenv ,x ,val 1))
    #-(or allegro clisp clozure cmucl ecl lispworks mkcl sbcl)
    '(error "~S ~S is not supported on your implementation" 'setf 'getenv))

  (defun getenvp (x)
    "Predicate that is true if the named variable is present in the libc environment,
then returning the non-empty string value of the variable"
    (let ((g (getenv x))) (and (not (emptyp g)) g))))


;;;; implementation-identifier
;;
;; produce a string to identify current implementation.
;; Initially stolen from SLIME's SWANK, completely rewritten since.
;; We're back to runtime checking, for the sake of e.g. ABCL.

(with-upgradability ()
  (defun first-feature (feature-sets)
    "A helper for various feature detection functions"
    (dolist (x feature-sets)
      (multiple-value-bind (short long feature-expr)
          (if (consp x)
              (values (first x) (second x) (cons :or (rest x)))
              (values x x x))
        (when (featurep feature-expr)
          (return (values short long))))))

  (defun implementation-type ()
    "The type of Lisp implementation used, as a short UIOP-standardized keyword"
    (first-feature
     '(:abcl (:acl :allegro) (:ccl :clozure) :clisp (:corman :cormanlisp)
       (:cmu :cmucl :cmu) :clasp :ecl :gcl
       (:lwpe :lispworks-personal-edition) (:lw :lispworks)
       :mcl :mkcl :sbcl :scl (:smbx :symbolics) :xcl)))

  (defvar *implementation-type* (implementation-type)
    "The type of Lisp implementation used, as a short UIOP-standardized keyword")

  (defun operating-system ()
    "The operating system of the current host"
    (first-feature
     '(:cygwin
       (:win :windows :mswindows :win32 :mingw32) ;; try cygwin first!
       (:linux :linux :linux-target) ;; for GCL at least, must appear before :bsd
       (:macosx :macosx :darwin :darwin-target :apple) ; also before :bsd
       (:solaris :solaris :sunos)
       (:bsd :bsd :freebsd :netbsd :openbsd :dragonfly)
       :unix
       :genera)))

  (defun architecture ()
    "The CPU architecture of the current host"
    (first-feature
     '((:x64 :x86-64 :x86_64 :x8664-target :amd64 (:and :word-size=64 :pc386))
       (:x86 :x86 :i386 :i486 :i586 :i686 :pentium3 :pentium4 :pc386 :iapx386 :x8632-target)
       (:ppc64 :ppc64 :ppc64-target) (:ppc32 :ppc32 :ppc32-target :ppc :powerpc)
       :hppa64 :hppa :sparc64 (:sparc32 :sparc32 :sparc)
       :mipsel :mipseb :mips :alpha (:arm :arm :arm-target) :imach
       ;; Java comes last: if someone uses C via CFFI or otherwise JNA or JNI,
       ;; we may have to segregate the code still by architecture.
       (:java :java :java-1.4 :java-1.5 :java-1.6 :java-1.7))))

  #+clozure
  (defun ccl-fasl-version ()
    ;; the fasl version is target-dependent from CCL 1.8 on.
    (or (let ((s 'ccl::target-fasl-version))
          (and (fboundp s) (funcall s)))
        (and (boundp 'ccl::fasl-version)
             (symbol-value 'ccl::fasl-version))
        (error "Can't determine fasl version.")))

  (defun lisp-version-string ()
    "return a string that identifies the current Lisp implementation version"
    (let ((s (lisp-implementation-version)))
      (car ; as opposed to OR, this idiom prevents some unreachable code warning
       (list
        #+allegro
        (format nil "~A~@[~A~]~@[~A~]~@[~A~]"
                excl::*common-lisp-version-number*
                ;; M means "modern", as opposed to ANSI-compatible mode (which I consider default)
                (and (eq excl:*current-case-mode* :case-sensitive-lower) "M")
                ;; Note if not using International ACL
                ;; see http://www.franz.com/support/documentation/8.1/doc/operators/excl/ics-target-case.htm
                (excl:ics-target-case (:-ics "8"))
                (and (member :smp *features*) "S"))
        #+armedbear (format nil "~a-fasl~a" s system::*fasl-version*)
        #+clisp
        (subseq s 0 (position #\space s)) ; strip build information (date, etc.)
        #+clozure
        (format nil "~d.~d-f~d" ; shorten for windows
                ccl::*openmcl-major-version*
                ccl::*openmcl-minor-version*
                (logand (ccl-fasl-version) #xFF))
        #+cmucl (substitute #\- #\/ s)
        #+scl (format nil "~A~A" s
                      ;; ANSI upper case vs lower case.
                      (ecase ext:*case-mode* (:upper "") (:lower "l")))
        #+ecl (format nil "~A~@[-~A~]" s
                      (let ((vcs-id (ext:lisp-implementation-vcs-id)))
                        (subseq vcs-id 0 (min (length vcs-id) 8))))
        #+gcl (subseq s (1+ (position #\space s)))
        #+genera
        (multiple-value-bind (major minor) (sct:get-system-version "System")
          (format nil "~D.~D" major minor))
        #+mcl (subseq s 8) ; strip the leading "Version "
        ;; seems like there should be a shorter way to do this, like ACALL.
        #+mkcl (or
                (let ((fname (find-symbol* '#:git-describe-this-mkcl :mkcl nil)))
                  (when (and fname (fboundp fname))
                    (funcall fname)))
                s)
        s))))

  (defun implementation-identifier ()
    "Return a string that identifies the ABI of the current implementation,
suitable for use as a directory name to segregate Lisp FASLs, C dynamic libraries, etc."
    (substitute-if
     #\_ #'(lambda (x) (find x " /:;&^\\|?<>(){}[]$#`'\""))
     (format nil "~(~a~@{~@[-~a~]~}~)"
             (or (implementation-type) (lisp-implementation-type))
             (lisp-version-string)
             (or (operating-system) (software-type))
             (or (architecture) (machine-type))))))


;;;; Other system information

(with-upgradability ()
  (defun hostname ()
    "return the hostname of the current host"
    ;; Note: untested on RMCL
    #+(or abcl clasp clozure cmucl ecl genera lispworks mcl mkcl sbcl scl xcl) (machine-instance)
    #+cormanlisp "localhost" ;; is there a better way? Does it matter?
    #+allegro (symbol-call :excl.osi :gethostname)
    #+clisp (first (split-string (machine-instance) :separator " "))
    #+gcl (system:gethostname)))


;;; Current directory
(with-upgradability ()

  #+cmucl
  (defun parse-unix-namestring* (unix-namestring)
    "variant of LISP::PARSE-UNIX-NAMESTRING that returns a pathname object"
    (multiple-value-bind (host device directory name type version)
        (lisp::parse-unix-namestring unix-namestring 0 (length unix-namestring))
      (make-pathname :host (or host lisp::*unix-host*) :device device
                     :directory directory :name name :type type :version version)))

  (defun getcwd ()
    "Get the current working directory as per POSIX getcwd(3), as a pathname object"
    (or #+(or abcl genera xcl) (truename *default-pathname-defaults*) ;; d-p-d is canonical!
        #+allegro (excl::current-directory)
        #+clisp (ext:default-directory)
        #+clozure (ccl:current-directory)
        #+(or cmucl scl) (#+cmucl parse-unix-namestring* #+scl lisp::parse-unix-namestring
                        (strcat (nth-value 1 (unix:unix-current-directory)) "/"))
        #+cormanlisp (pathname (pl::get-current-directory)) ;; Q: what type does it return?
        #+(or clasp ecl) (ext:getcwd)
        #+gcl (let ((*default-pathname-defaults* #p"")) (truename #p""))
        #+lispworks (hcl:get-working-directory)
        #+mkcl (mk-ext:getcwd)
        #+sbcl (sb-ext:parse-native-namestring (sb-unix:posix-getcwd/))
        #+xcl (extensions:current-directory)
        (error "getcwd not supported on your implementation")))

  (defun chdir (x)
    "Change current directory, as per POSIX chdir(2), to a given pathname object"
    (if-let (x (pathname x))
      #+(or abcl genera xcl) (setf *default-pathname-defaults* (truename x)) ;; d-p-d is canonical!
      #+allegro (excl:chdir x)
      #+clisp (ext:cd x)
      #+clozure (setf (ccl:current-directory) x)
      #+(or cmucl scl) (unix:unix-chdir (ext:unix-namestring x))
      #+cormanlisp (unless (zerop (win32::_chdir (namestring x)))
                     (error "Could not set current directory to ~A" x))
      #+(or clasp ecl) (ext:chdir x)
      #+gcl (system:chdir x)
      #+lispworks (hcl:change-directory x)
      #+mkcl (mk-ext:chdir x)
      #+sbcl (progn (require :sb-posix) (symbol-call :sb-posix :chdir (sb-ext:native-namestring x)))
      #-(or abcl allegro clasp clisp clozure cmucl cormanlisp ecl gcl genera lispworks mkcl sbcl scl xcl)
      (error "chdir not supported on your implementation"))))


;;;; -----------------------------------------------------------------
;;;; Windows shortcut support.  Based on:
;;;;
;;;; Jesse Hager: The Windows Shortcut File Format.
;;;; http://www.wotsit.org/list.asp?fc=13

#-(or clisp genera) ; CLISP doesn't need it, and READ-SEQUENCE annoys old Genera that doesn't need it
(with-upgradability ()
  (defparameter *link-initial-dword* 76)
  (defparameter *link-guid* #(1 20 2 0 0 0 0 0 192 0 0 0 0 0 0 70))

  (defun read-null-terminated-string (s)
    "Read a null-terminated string from an octet stream S"
    ;; note: doesn't play well with UNICODE
    (with-output-to-string (out)
      (loop :for code = (read-byte s)
            :until (zerop code)
            :do (write-char (code-char code) out))))

  (defun read-little-endian (s &optional (bytes 4))
    "Read a number in little-endian format from an byte (octet) stream S,
the number having BYTES octets (defaulting to 4)."
    (loop :for i :from 0 :below bytes
          :sum (ash (read-byte s) (* 8 i))))

  (defun parse-file-location-info (s)
    "helper to parse-windows-shortcut"
    (let ((start (file-position s))
          (total-length (read-little-endian s))
          (end-of-header (read-little-endian s))
          (fli-flags (read-little-endian s))
          (local-volume-offset (read-little-endian s))
          (local-offset (read-little-endian s))
          (network-volume-offset (read-little-endian s))
          (remaining-offset (read-little-endian s)))
      (declare (ignore total-length end-of-header local-volume-offset))
      (unless (zerop fli-flags)
        (cond
          ((logbitp 0 fli-flags)
           (file-position s (+ start local-offset)))
          ((logbitp 1 fli-flags)
           (file-position s (+ start
                               network-volume-offset
                               #x14))))
        (strcat (read-null-terminated-string s)
                (progn
                  (file-position s (+ start remaining-offset))
                  (read-null-terminated-string s))))))

  (defun parse-windows-shortcut (pathname)
    "From a .lnk windows shortcut, extract the pathname linked to"
    ;; NB: doesn't do much checking & doesn't look like it will work well with UNICODE.
    (with-open-file (s pathname :element-type '(unsigned-byte 8))
      (handler-case
          (when (and (= (read-little-endian s) *link-initial-dword*)
                     (let ((header (make-array (length *link-guid*))))
                       (read-sequence header s)
                       (equalp header *link-guid*)))
            (let ((flags (read-little-endian s)))
              (file-position s 76)        ;skip rest of header
              (when (logbitp 0 flags)
                ;; skip shell item id list
                (let ((length (read-little-endian s 2)))
                  (file-position s (+ length (file-position s)))))
              (cond
                ((logbitp 1 flags)
                 (parse-file-location-info s))
                (t
                 (when (logbitp 2 flags)
                   ;; skip description string
                   (let ((length (read-little-endian s 2)))
                     (file-position s (+ length (file-position s)))))
                 (when (logbitp 3 flags)
                   ;; finally, our pathname
                   (let* ((length (read-little-endian s 2))
                          (buffer (make-array length)))
                     (read-sequence buffer s)
                     (map 'string #'code-char buffer)))))))
        (end-of-file (c)
          (declare (ignore c))
          nil)))))


;;;; -------------------------------------------------------------------------
;;;; Portability layer around Common Lisp pathnames
;; This layer allows for portable manipulation of pathname objects themselves,
;; which all is necessary prior to any access the filesystem or environment.

(uiop/package:define-package :uiop/pathname
  (:nicknames :asdf/pathname) ;; deprecated. Used by ceramic
  (:use :uiop/common-lisp :uiop/package :uiop/utility :uiop/os)
  (:export
   ;; Making and merging pathnames, portably
   #:normalize-pathname-directory-component #:denormalize-pathname-directory-component
   #:merge-pathname-directory-components #:*unspecific-pathname-type* #:make-pathname*
   #:make-pathname-component-logical #:make-pathname-logical
   #:merge-pathnames*
   #:nil-pathname #:*nil-pathname* #:with-pathname-defaults
   ;; Predicates
   #:pathname-equal #:logical-pathname-p #:physical-pathname-p #:physicalize-pathname
   #:absolute-pathname-p #:relative-pathname-p #:hidden-pathname-p #:file-pathname-p
   ;; Directories
   #:pathname-directory-pathname #:pathname-parent-directory-pathname
   #:directory-pathname-p #:ensure-directory-pathname
   ;; Parsing filenames
   #:split-name-type #:parse-unix-namestring #:unix-namestring
   #:split-unix-namestring-directory-components
   ;; Absolute and relative pathnames
   #:subpathname #:subpathname*
   #:ensure-absolute-pathname
   #:pathname-root #:pathname-host-pathname
   #:subpathp #:enough-pathname #:with-enough-pathname #:call-with-enough-pathname
   ;; Checking constraints
   #:ensure-pathname ;; implemented in filesystem.lisp to accommodate for existence constraints
   ;; Wildcard pathnames
   #:*wild* #:*wild-file* #:*wild-file-for-directory* #:*wild-directory*
   #:*wild-inferiors* #:*wild-path* #:wilden
   ;; Translate a pathname
   #:relativize-directory-component #:relativize-pathname-directory
   #:directory-separator-for-host #:directorize-pathname-host-device
   #:translate-pathname*
   #:*output-translation-function*))
(in-package :uiop/pathname)

;;; Normalizing pathnames across implementations

(with-upgradability ()
  (defun normalize-pathname-directory-component (directory)
    "Convert the DIRECTORY component from a format usable by the underlying
implementation's MAKE-PATHNAME and other primitives to a CLHS-standard format
that is a list and not a string."
    (cond
      #-(or cmucl sbcl scl) ;; these implementations already normalize directory components.
      ((stringp directory) `(:absolute ,directory))
      ((or (null directory)
           (and (consp directory) (member (first directory) '(:absolute :relative))))
       directory)
      #+gcl
      ((consp directory)
       (cons :relative directory))
      (t
       (error (compatfmt "~@<Unrecognized pathname directory component ~S~@:>") directory))))

  (defun denormalize-pathname-directory-component (directory-component)
    "Convert the DIRECTORY-COMPONENT from a CLHS-standard format to a format usable
by the underlying implementation's MAKE-PATHNAME and other primitives"
    directory-component)

  (defun merge-pathname-directory-components (specified defaults)
    "Helper for MERGE-PATHNAMES* that handles directory components"
    (let ((directory (normalize-pathname-directory-component specified)))
      (ecase (first directory)
        ((nil) defaults)
        (:absolute specified)
        (:relative
         (let ((defdir (normalize-pathname-directory-component defaults))
               (reldir (cdr directory)))
           (cond
             ((null defdir)
              directory)
             ((not (eq :back (first reldir)))
              (append defdir reldir))
             (t
              (loop :with defabs = (first defdir)
                    :with defrev = (reverse (rest defdir))
                    :while (and (eq :back (car reldir))
                                (or (and (eq :absolute defabs) (null defrev))
                                    (stringp (car defrev))))
                    :do (pop reldir) (pop defrev)
                    :finally (return (cons defabs (append (reverse defrev) reldir)))))))))))

  ;; Giving :unspecific as :type argument to make-pathname is not portable.
  ;; See CLHS make-pathname and 19.2.2.2.3.
  ;; This will be :unspecific if supported, or NIL if not.
  (defparameter *unspecific-pathname-type*
    #+(or abcl allegro clozure cmucl genera lispworks sbcl scl) :unspecific
    #+(or clasp clisp ecl mkcl gcl xcl #|These haven't been tested:|# cormanlisp mcl) nil
    "Unspecific type component to use with the underlying implementation's MAKE-PATHNAME")

  (defun make-pathname* (&rest keys &key directory host device name type version defaults
                                      #+scl &allow-other-keys)
    "Takes arguments like CL:MAKE-PATHNAME in the CLHS, and
   tries hard to make a pathname that will actually behave as documented,
   despite the peculiarities of each implementation. DEPRECATED: just use MAKE-PATHNAME."
    (declare (ignore host device directory name type version defaults))
    (apply 'make-pathname keys))

  (defun make-pathname-component-logical (x)
    "Make a pathname component suitable for use in a logical-pathname"
    (typecase x
      ((eql :unspecific) nil)
      #+clisp (string (string-upcase x))
      #+clisp (cons (mapcar 'make-pathname-component-logical x))
      (t x)))

  (defun make-pathname-logical (pathname host)
    "Take a PATHNAME's directory, name, type and version components,
and make a new pathname with corresponding components and specified logical HOST"
    (make-pathname
     :host host
     :directory (make-pathname-component-logical (pathname-directory pathname))
     :name (make-pathname-component-logical (pathname-name pathname))
     :type (make-pathname-component-logical (pathname-type pathname))
     :version (make-pathname-component-logical (pathname-version pathname))))

  (defun merge-pathnames* (specified &optional (defaults *default-pathname-defaults*))
    "MERGE-PATHNAMES* is like MERGE-PATHNAMES except that
if the SPECIFIED pathname does not have an absolute directory,
then the HOST and DEVICE both come from the DEFAULTS, whereas
if the SPECIFIED pathname does have an absolute directory,
then the HOST and DEVICE both come from the SPECIFIED pathname.
This is what users want on a modern Unix or Windows operating system,
unlike the MERGE-PATHNAMES behavior.
Also, if either argument is NIL, then the other argument is returned unmodified;
this is unlike MERGE-PATHNAMES which always merges with a pathname,
by default *DEFAULT-PATHNAME-DEFAULTS*, which cannot be NIL."
    (when (null specified) (return-from merge-pathnames* defaults))
    (when (null defaults) (return-from merge-pathnames* specified))
    #+scl
    (ext:resolve-pathname specified defaults)
    #-scl
    (let* ((specified (pathname specified))
           (defaults (pathname defaults))
           (directory (normalize-pathname-directory-component (pathname-directory specified)))
           (name (or (pathname-name specified) (pathname-name defaults)))
           (type (or (pathname-type specified) (pathname-type defaults)))
           (version (or (pathname-version specified) (pathname-version defaults))))
      (labels ((unspecific-handler (p)
                 (if (typep p 'logical-pathname) #'make-pathname-component-logical #'identity)))
        (multiple-value-bind (host device directory unspecific-handler)
            (ecase (first directory)
              ((:absolute)
               (values (pathname-host specified)
                       (pathname-device specified)
                       directory
                       (unspecific-handler specified)))
              ((nil :relative)
               (values (pathname-host defaults)
                       (pathname-device defaults)
                       (merge-pathname-directory-components directory (pathname-directory defaults))
                       (unspecific-handler defaults))))
          (make-pathname :host host :device device :directory directory
                         :name (funcall unspecific-handler name)
                         :type (funcall unspecific-handler type)
                         :version (funcall unspecific-handler version))))))

  (defun logical-pathname-p (x)
    "is X a logical-pathname?"
    (typep x 'logical-pathname))

  (defun physical-pathname-p (x)
    "is X a pathname that is not a logical-pathname?"
    (and (pathnamep x) (not (logical-pathname-p x))))

  (defun physicalize-pathname (x)
    "if X is a logical pathname, use translate-logical-pathname on it."
    ;; Ought to be the same as translate-logical-pathname, except the latter borks on CLISP
    (let ((p (when x (pathname x))))
      (if (logical-pathname-p p) (translate-logical-pathname p) p)))

  (defun nil-pathname (&optional (defaults *default-pathname-defaults*))
    "A pathname that is as neutral as possible for use as defaults
when merging, making or parsing pathnames"
    ;; 19.2.2.2.1 says a NIL host can mean a default host;
    ;; see also "valid physical pathname host" in the CLHS glossary, that suggests
    ;; strings and lists of strings or :unspecific
    ;; But CMUCL decides to die on NIL.
    ;; MCL has issues with make-pathname, nil and defaulting
    (declare (ignorable defaults))
    #.`(make-pathname :directory nil :name nil :type nil :version nil
                      :device (or #+(and mkcl os-unix) :unspecific)
                      :host (or #+cmucl lisp::*unix-host* #+(and mkcl os-unix) "localhost")
                      #+scl ,@'(:scheme nil :scheme-specific-part nil
                                :username nil :password nil :parameters nil :query nil :fragment nil)
                      ;; the default shouldn't matter, but we really want something physical
                      #-mcl ,@'(:defaults defaults)))

  (defvar *nil-pathname* (nil-pathname (physicalize-pathname (user-homedir-pathname)))
    "A pathname that is as neutral as possible for use as defaults
when merging, making or parsing pathnames")

  (defmacro with-pathname-defaults ((&optional defaults) &body body)
    "Execute BODY in a context where the *DEFAULT-PATHNAME-DEFAULTS* is as specified,
where leaving the defaults NIL or unspecified means a (NIL-PATHNAME), except
on ABCL, Genera and XCL, where it remains unchanged for it doubles as current-directory."
    `(let ((*default-pathname-defaults*
             ,(or defaults
                  #-(or abcl genera xcl) '*nil-pathname*
                  #+(or abcl genera xcl) '*default-pathname-defaults*)))
       ,@body)))


;;; Some pathname predicates
(with-upgradability ()
  (defun pathname-equal (p1 p2)
    "Are the two pathnames P1 and P2 reasonably equal in the paths they denote?"
    (when (stringp p1) (setf p1 (pathname p1)))
    (when (stringp p2) (setf p2 (pathname p2)))
    (flet ((normalize-component (x)
             (unless (member x '(nil :unspecific :newest (:relative)) :test 'equal)
               x)))
      (macrolet ((=? (&rest accessors)
                   (flet ((frob (x)
                            (reduce 'list (cons 'normalize-component accessors)
                                    :initial-value x :from-end t)))
                     `(equal ,(frob 'p1) ,(frob 'p2)))))
        (or (and (null p1) (null p2))
            (and (pathnamep p1) (pathnamep p2)
                 (and (=? pathname-host)
                      #-(and mkcl os-unix) (=? pathname-device)
                      (=? normalize-pathname-directory-component pathname-directory)
                      (=? pathname-name)
                      (=? pathname-type)
                      #-mkcl (=? pathname-version)))))))

  (defun absolute-pathname-p (pathspec)
    "If PATHSPEC is a pathname or namestring object that parses as a pathname
possessing an :ABSOLUTE directory component, return the (parsed) pathname.
Otherwise return NIL"
    (and pathspec
         (typep pathspec '(or null pathname string))
         (let ((pathname (pathname pathspec)))
           (and (eq :absolute (car (normalize-pathname-directory-component
                                    (pathname-directory pathname))))
                pathname))))

  (defun relative-pathname-p (pathspec)
    "If PATHSPEC is a pathname or namestring object that parses as a pathname
possessing a :RELATIVE or NIL directory component, return the (parsed) pathname.
Otherwise return NIL"
    (and pathspec
         (typep pathspec '(or null pathname string))
         (let* ((pathname (pathname pathspec))
                (directory (normalize-pathname-directory-component
                            (pathname-directory pathname))))
           (when (or (null directory) (eq :relative (car directory)))
             pathname))))

  (defun hidden-pathname-p (pathname)
    "Return a boolean that is true if the pathname is hidden as per Unix style,
i.e. its name starts with a dot."
    (and pathname (equal (first-char (pathname-name pathname)) #\.)))

  (defun file-pathname-p (pathname)
    "Does PATHNAME represent a file, i.e. has a non-null NAME component?

Accepts NIL, a string (converted through PARSE-NAMESTRING) or a PATHNAME.

Note that this does _not_ check to see that PATHNAME points to an
actually-existing file.

Returns the (parsed) PATHNAME when true"
    (when pathname
      (let ((pathname (pathname pathname)))
        (unless (and (member (pathname-name pathname) '(nil :unspecific "") :test 'equal)
                     (member (pathname-type pathname) '(nil :unspecific "") :test 'equal))
          pathname)))))


;;; Directory pathnames
(with-upgradability ()
  (defun pathname-directory-pathname (pathname)
    "Returns a new pathname with same HOST, DEVICE, DIRECTORY as PATHNAME,
and NIL NAME, TYPE and VERSION components"
    (when pathname
      (make-pathname :name nil :type nil :version nil :defaults pathname)))

  (defun pathname-parent-directory-pathname (pathname)
    "Returns a new pathname that corresponds to the parent of the current pathname's directory,
i.e. removing one level of depth in the DIRECTORY component. e.g. if pathname is
Unix pathname /foo/bar/baz/file.type then return /foo/bar/"
    (when pathname
      (make-pathname :name nil :type nil :version nil
                     :directory (merge-pathname-directory-components
                                 '(:relative :back) (pathname-directory pathname))
                     :defaults pathname)))

  (defun directory-pathname-p (pathname)
    "Does PATHNAME represent a directory?

A directory-pathname is a pathname _without_ a filename. The three
ways that the filename components can be missing are for it to be NIL,
:UNSPECIFIC or the empty string.

Note that this does _not_ check to see that PATHNAME points to an
actually-existing directory."
    (when pathname
      ;; I tried using Allegro's excl:file-directory-p, but this cannot be done,
      ;; because it rejects apparently legal pathnames as
      ;; ill-formed. [2014/02/10:rpg]
      (let ((pathname (pathname pathname)))
        (flet ((check-one (x)
                 (member x '(nil :unspecific) :test 'equal)))
          (and (not (wild-pathname-p pathname))
               (check-one (pathname-name pathname))
               (check-one (pathname-type pathname))
               t)))))

  (defun ensure-directory-pathname (pathspec &optional (on-error 'error))
    "Converts the non-wild pathname designator PATHSPEC to directory form."
    (cond
      ((stringp pathspec)
       (ensure-directory-pathname (pathname pathspec)))
      ((not (pathnamep pathspec))
       (call-function on-error (compatfmt "~@<Invalid pathname designator ~S~@:>") pathspec))
      ((wild-pathname-p pathspec)
       (call-function on-error (compatfmt "~@<Can't reliably convert wild pathname ~3i~_~S~@:>") pathspec))
      ((directory-pathname-p pathspec)
       pathspec)
      (t
       (handler-case
           (make-pathname :directory (append (or (normalize-pathname-directory-component
                                                  (pathname-directory pathspec))
                                                 (list :relative))
                                             (list (file-namestring pathspec)))
                          :name nil :type nil :version nil :defaults pathspec)
         (error (c) (call-function on-error (compatfmt "~@<error while trying to create a directory pathname for ~S: ~A~@:>") pathspec c)))))))


;;; Parsing filenames
(with-upgradability ()
  (declaim (ftype function ensure-pathname)) ; forward reference

  (defun split-unix-namestring-directory-components
      (unix-namestring &key ensure-directory dot-dot)
    "Splits the path string UNIX-NAMESTRING, returning four values:
A flag that is either :absolute or :relative, indicating
   how the rest of the values are to be interpreted.
A directory path --- a list of strings and keywords, suitable for
   use with MAKE-PATHNAME when prepended with the flag value.
   Directory components with an empty name or the name . are removed.
   Any directory named .. is read as DOT-DOT, or :BACK if it's NIL (not :UP).
A last-component, either a file-namestring including type extension,
   or NIL in the case of a directory pathname.
A flag that is true iff the unix-style-pathname was just
   a file-namestring without / path specification.
ENSURE-DIRECTORY forces the namestring to be interpreted as a directory pathname:
the third return value will be NIL, and final component of the namestring
will be treated as part of the directory path.

An empty string is thus read as meaning a pathname object with all fields nil.

Note that colon characters #\: will NOT be interpreted as host specification.
Absolute pathnames are only appropriate on Unix-style systems.

The intention of this function is to support structured component names,
e.g., \(:file \"foo/bar\"\), which will be unpacked to relative pathnames."
    (check-type unix-namestring string)
    (check-type dot-dot (member nil :back :up))
    (if (and (not (find #\/ unix-namestring)) (not ensure-directory)
             (plusp (length unix-namestring)))
        (values :relative () unix-namestring t)
        (let* ((components (split-string unix-namestring :separator "/"))
               (last-comp (car (last components))))
          (multiple-value-bind (relative components)
              (if (equal (first components) "")
                  (if (equal (first-char unix-namestring) #\/)
                      (values :absolute (cdr components))
                      (values :relative nil))
                  (values :relative components))
            (setf components (remove-if #'(lambda (x) (member x '("" ".") :test #'equal))
                                        components))
            (setf components (substitute (or dot-dot :back) ".." components :test #'equal))
            (cond
              ((equal last-comp "")
               (values relative components nil nil)) ; "" already removed from components
              (ensure-directory
               (values relative components nil nil))
              (t
               (values relative (butlast components) last-comp nil)))))))

  (defun split-name-type (filename)
    "Split a filename into two values NAME and TYPE that are returned.
We assume filename has no directory component.
The last . if any separates name and type from from type,
except that if there is only one . and it is in first position,
the whole filename is the NAME with an empty type.
NAME is always a string.
For an empty type, *UNSPECIFIC-PATHNAME-TYPE* is returned."
    (check-type filename string)
    (assert (plusp (length filename)))
    (destructuring-bind (name &optional (type *unspecific-pathname-type*))
        (split-string filename :max 2 :separator ".")
      (if (equal name "")
          (values filename *unspecific-pathname-type*)
          (values name type))))

  (defun parse-unix-namestring (name &rest keys &key type defaults dot-dot ensure-directory
                                &allow-other-keys)
    "Coerce NAME into a PATHNAME using standard Unix syntax.

Unix syntax is used whether or not the underlying system is Unix;
on such non-Unix systems it is reliably usable only for relative pathnames.
This function is especially useful to manipulate relative pathnames portably,
where it is of crucial to possess a portable pathname syntax independent of the underlying OS.
This is what PARSE-UNIX-NAMESTRING provides, and why we use it in ASDF.

When given a PATHNAME object, just return it untouched.
When given NIL, just return NIL.
When given a non-null SYMBOL, first downcase its name and treat it as a string.
When given a STRING, portably decompose it into a pathname as below.

#\\/ separates directory components.

The last #\\/-separated substring is interpreted as follows:
1- If TYPE is :DIRECTORY or ENSURE-DIRECTORY is true,
 the string is made the last directory component, and NAME and TYPE are NIL.
 if the string is empty, it's the empty pathname with all slots NIL.
2- If TYPE is NIL, the substring is a file-namestring, and its NAME and TYPE
 are separated by SPLIT-NAME-TYPE.
3- If TYPE is a string, it is the given TYPE, and the whole string is the NAME.

Directory components with an empty name or the name \".\" are removed.
Any directory named \"..\" is read as DOT-DOT,
which must be one of :BACK or :UP and defaults to :BACK.

HOST, DEVICE and VERSION components are taken from DEFAULTS,
which itself defaults to *NIL-PATHNAME*, also used if DEFAULTS is NIL.
No host or device can be specified in the string itself,
which makes it unsuitable for absolute pathnames outside Unix.

For relative pathnames, these components (and hence the defaults) won't matter
if you use MERGE-PATHNAMES* but will matter if you use MERGE-PATHNAMES,
which is an important reason to always use MERGE-PATHNAMES*.

Arbitrary keys are accepted, and the parse result is passed to ENSURE-PATHNAME
with those keys, removing TYPE DEFAULTS and DOT-DOT.
When you're manipulating pathnames that are supposed to make sense portably
even though the OS may not be Unixish, we recommend you use :WANT-RELATIVE T
to throw an error if the pathname is absolute"
    (block nil
      (check-type type (or null string (eql :directory)))
      (when ensure-directory
        (setf type :directory))
      (etypecase name
        ((or null pathname) (return name))
        (symbol
         (setf name (string-downcase name)))
        (string))
      (multiple-value-bind (relative path filename file-only)
          (split-unix-namestring-directory-components
           name :dot-dot dot-dot :ensure-directory (eq type :directory))
        (multiple-value-bind (name type)
            (cond
              ((or (eq type :directory) (null filename))
               (values nil nil))
              (type
               (values filename type))
              (t
               (split-name-type filename)))
          (apply 'ensure-pathname
                 (make-pathname
                  :directory (unless file-only (cons relative path))
                  :name name :type type
                  :defaults (or #-mcl defaults *nil-pathname*))
                 (remove-plist-keys '(:type :dot-dot :defaults) keys))))))

  (defun unix-namestring (pathname)
    "Given a non-wild PATHNAME, return a Unix-style namestring for it.
If the PATHNAME is NIL or a STRING, return it unchanged.

This only considers the DIRECTORY, NAME and TYPE components of the pathname.
This is a portable solution for representing relative pathnames,
But unless you are running on a Unix system, it is not a general solution
to representing native pathnames.

An error is signaled if the argument is not NULL, a STRING or a PATHNAME,
or if it is a PATHNAME but some of its components are not recognized."
    (etypecase pathname
      ((or null string) pathname)
      (pathname
       (with-output-to-string (s)
         (flet ((err () #+lispworks (describe pathname) (error "Not a valid unix-namestring ~S" pathname)))
           (let* ((dir (normalize-pathname-directory-component (pathname-directory pathname)))
                  (name (pathname-name pathname))
                  (name (and (not (eq name :unspecific)) name))
                  (type (pathname-type pathname))
                  (type (and (not (eq type :unspecific)) type)))
             (cond
               ((member dir '(nil :unspecific)))
               ((eq dir '(:relative)) (princ "./" s))
               ((consp dir)
                (destructuring-bind (relabs &rest dirs) dir
                  (or (member relabs '(:relative :absolute)) (err))
                  (when (eq relabs :absolute) (princ #\/ s))
                  (loop :for x :in dirs :do
                    (cond
                      ((member x '(:back :up)) (princ "../" s))
                      ((equal x "") (err))
                      ;;((member x '("." "..") :test 'equal) (err))
                      ((stringp x) (format s "~A/" x))
                      (t (err))))))
               (t (err)))
             (cond
               (name
                (unless (and (stringp name) (or (null type) (stringp type))) (err))
                (format s "~A~@[.~A~]" name type))
               (t
                (or (null type) (err)))))))))))

;;; Absolute and relative pathnames
(with-upgradability ()
  (defun subpathname (pathname subpath &key type)
    "This function takes a PATHNAME and a SUBPATH and a TYPE.
If SUBPATH is already a PATHNAME object (not namestring),
and is an absolute pathname at that, it is returned unchanged;
otherwise, SUBPATH is turned into a relative pathname with given TYPE
as per PARSE-UNIX-NAMESTRING with :WANT-RELATIVE T :TYPE TYPE,
then it is merged with the PATHNAME-DIRECTORY-PATHNAME of PATHNAME."
    (or (and (pathnamep subpath) (absolute-pathname-p subpath))
        (merge-pathnames* (parse-unix-namestring subpath :type type :want-relative t)
                          (pathname-directory-pathname pathname))))

  (defun subpathname* (pathname subpath &key type)
    "returns NIL if the base pathname is NIL, otherwise like SUBPATHNAME."
    (and pathname
         (subpathname (ensure-directory-pathname pathname) subpath :type type)))

  (defun pathname-root (pathname)
    "return the root directory for the host and device of given PATHNAME"
    (make-pathname :directory '(:absolute)
                   :name nil :type nil :version nil
                   :defaults pathname ;; host device, and on scl, *some*
                   ;; scheme-specific parts: port username password, not others:
                   . #.(or #+scl '(:parameters nil :query nil :fragment nil))))

  (defun pathname-host-pathname (pathname)
    "return a pathname with the same host as given PATHNAME, and all other fields NIL"
    (make-pathname :directory nil
                   :name nil :type nil :version nil :device nil
                   :defaults pathname ;; host device, and on scl, *some*
                   ;; scheme-specific parts: port username password, not others:
                   . #.(or #+scl '(:parameters nil :query nil :fragment nil))))

  (defun ensure-absolute-pathname (path &optional defaults (on-error 'error))
    "Given a pathname designator PATH, return an absolute pathname as specified by PATH
considering the DEFAULTS, or, if not possible, use CALL-FUNCTION on the specified ON-ERROR behavior,
with a format control-string and other arguments as arguments"
    (cond
      ((absolute-pathname-p path))
      ((stringp path) (ensure-absolute-pathname (pathname path) defaults on-error))
      ((not (pathnamep path)) (call-function on-error "not a valid pathname designator ~S" path))
      ((let ((default-pathname (if (pathnamep defaults) defaults (call-function defaults))))
         (or (if (absolute-pathname-p default-pathname)
                 (absolute-pathname-p (merge-pathnames* path default-pathname))
                 (call-function on-error "Default pathname ~S is not an absolute pathname"
                                default-pathname))
             (call-function on-error "Failed to merge ~S with ~S into an absolute pathname"
                            path default-pathname))))
      (t (call-function on-error
                        "Cannot ensure ~S is evaluated as an absolute pathname with defaults ~S"
                        path defaults))))

  (defun subpathp (maybe-subpath base-pathname)
    "if MAYBE-SUBPATH is a pathname that is under BASE-PATHNAME, return a pathname object that
when used with MERGE-PATHNAMES* with defaults BASE-PATHNAME, returns MAYBE-SUBPATH."
    (and (pathnamep maybe-subpath) (pathnamep base-pathname)
         (absolute-pathname-p maybe-subpath) (absolute-pathname-p base-pathname)
         (directory-pathname-p base-pathname) (not (wild-pathname-p base-pathname))
         (pathname-equal (pathname-root maybe-subpath) (pathname-root base-pathname))
         (with-pathname-defaults (*nil-pathname*)
           (let ((enough (enough-namestring maybe-subpath base-pathname)))
             (and (relative-pathname-p enough) (pathname enough))))))

  (defun enough-pathname (maybe-subpath base-pathname)
    "if MAYBE-SUBPATH is a pathname that is under BASE-PATHNAME, return a pathname object that
when used with MERGE-PATHNAMES* with defaults BASE-PATHNAME, returns MAYBE-SUBPATH."
    (let ((sub (when maybe-subpath (pathname maybe-subpath)))
          (base (when base-pathname (ensure-absolute-pathname (pathname base-pathname)))))
      (or (and base (subpathp sub base)) sub)))

  (defun call-with-enough-pathname (maybe-subpath defaults-pathname thunk)
    "In a context where *DEFAULT-PATHNAME-DEFAULTS* is bound to DEFAULTS-PATHNAME (if not null,
or else to its current value), call THUNK with ENOUGH-PATHNAME for MAYBE-SUBPATH
given DEFAULTS-PATHNAME as a base pathname."
    (let ((enough (enough-pathname maybe-subpath defaults-pathname))
          (*default-pathname-defaults* (or defaults-pathname *default-pathname-defaults*)))
      (funcall thunk enough)))

  (defmacro with-enough-pathname ((pathname-var &key (pathname pathname-var)
                                                  (defaults *default-pathname-defaults*))
                                  &body body)
    "Shorthand syntax for CALL-WITH-ENOUGH-PATHNAME"
    `(call-with-enough-pathname ,pathname ,defaults #'(lambda (,pathname-var) ,@body))))


;;; Wildcard pathnames
(with-upgradability ()
  (defparameter *wild* (or #+cormanlisp "*" :wild)
    "Wild component for use with MAKE-PATHNAME")
  (defparameter *wild-directory-component* (or :wild)
    "Wild directory component for use with MAKE-PATHNAME")
  (defparameter *wild-inferiors-component* (or :wild-inferiors)
    "Wild-inferiors directory component for use with MAKE-PATHNAME")
  (defparameter *wild-file*
    (make-pathname :directory nil :name *wild* :type *wild*
                   :version (or #-(or allegro abcl xcl) *wild*))
    "A pathname object with wildcards for matching any file with TRANSLATE-PATHNAME")
  (defparameter *wild-file-for-directory*
    (make-pathname :directory nil :name *wild* :type (or #-(or clisp gcl) *wild*)
                   :version (or #-(or allegro abcl clisp gcl xcl) *wild*))
    "A pathname object with wildcards for matching any file with DIRECTORY")
  (defparameter *wild-directory*
    (make-pathname :directory `(:relative ,*wild-directory-component*)
                   :name nil :type nil :version nil)
    "A pathname object with wildcards for matching any subdirectory")
  (defparameter *wild-inferiors*
    (make-pathname :directory `(:relative ,*wild-inferiors-component*)
                   :name nil :type nil :version nil)
    "A pathname object with wildcards for matching any recursive subdirectory")
  (defparameter *wild-path*
    (merge-pathnames* *wild-file* *wild-inferiors*)
    "A pathname object with wildcards for matching any file in any recursive subdirectory")

  (defun wilden (path)
    "From a pathname, return a wildcard pathname matching any file in any subdirectory of given pathname's directory"
    (merge-pathnames* *wild-path* path)))


;;; Translate a pathname
(with-upgradability ()
  (defun relativize-directory-component (directory-component)
    "Given the DIRECTORY-COMPONENT of a pathname, return an otherwise similar relative directory component"
    (let ((directory (normalize-pathname-directory-component directory-component)))
      (cond
        ((stringp directory)
         (list :relative directory))
        ((eq (car directory) :absolute)
         (cons :relative (cdr directory)))
        (t
         directory))))

  (defun relativize-pathname-directory (pathspec)
    "Given a PATHNAME, return a relative pathname with otherwise the same components"
    (let ((p (pathname pathspec)))
      (make-pathname
       :directory (relativize-directory-component (pathname-directory p))
       :defaults p)))

  (defun directory-separator-for-host (&optional (pathname *default-pathname-defaults*))
    "Given a PATHNAME, return the character used to delimit directory names on this host and device."
    (let ((foo (make-pathname :directory '(:absolute "FOO") :defaults pathname)))
      (last-char (namestring foo))))

  #-scl
  (defun directorize-pathname-host-device (pathname)
    "Given a PATHNAME, return a pathname that has representations of its HOST and DEVICE components
added to its DIRECTORY component. This is useful for output translations."
    (os-cond
     ((os-unix-p)
      (when (physical-pathname-p pathname)
        (return-from directorize-pathname-host-device pathname))))
    (let* ((root (pathname-root pathname))
           (wild-root (wilden root))
           (absolute-pathname (merge-pathnames* pathname root))
           (separator (directory-separator-for-host root))
           (root-namestring (namestring root))
           (root-string
             (substitute-if #\/
                            #'(lambda (x) (or (eql x #\:)
                                              (eql x separator)))
                            root-namestring)))
      (multiple-value-bind (relative path filename)
          (split-unix-namestring-directory-components root-string :ensure-directory t)
        (declare (ignore relative filename))
        (let ((new-base (make-pathname :defaults root :directory `(:absolute ,@path))))
          (translate-pathname absolute-pathname wild-root (wilden new-base))))))

  #+scl
  (defun directorize-pathname-host-device (pathname)
    (let ((scheme (ext:pathname-scheme pathname))
          (host (pathname-host pathname))
          (port (ext:pathname-port pathname))
          (directory (pathname-directory pathname)))
      (flet ((specificp (x) (and x (not (eq x :unspecific)))))
        (if (or (specificp port)
                (and (specificp host) (plusp (length host)))
                (specificp scheme))
            (let ((prefix ""))
              (when (specificp port)
                (setf prefix (format nil ":~D" port)))
              (when (and (specificp host) (plusp (length host)))
                (setf prefix (strcat host prefix)))
              (setf prefix (strcat ":" prefix))
              (when (specificp scheme)
                (setf prefix (strcat scheme prefix)))
              (assert (and directory (eq (first directory) :absolute)))
              (make-pathname :directory `(:absolute ,prefix ,@(rest directory))
                             :defaults pathname)))
        pathname)))

  (defun* (translate-pathname*) (path absolute-source destination &optional root source)
    "A wrapper around TRANSLATE-PATHNAME to be used by the ASDF output-translations facility.
PATH is the pathname to be translated.
ABSOLUTE-SOURCE is an absolute pathname to use as source for translate-pathname,
DESTINATION is either a function, to be called with PATH and ABSOLUTE-SOURCE,
or a relative pathname, to be merged with ROOT and used as destination for translate-pathname
or an absolute pathname, to be used as destination for translate-pathname.
In that last case, if ROOT is non-NIL, PATH is first transformated by DIRECTORIZE-PATHNAME-HOST-DEVICE."
    (declare (ignore source))
    (cond
      ((functionp destination)
       (funcall destination path absolute-source))
      ((eq destination t)
       path)
      ((not (pathnamep destination))
       (error "Invalid destination"))
      ((not (absolute-pathname-p destination))
       (translate-pathname path absolute-source (merge-pathnames* destination root)))
      (root
       (translate-pathname (directorize-pathname-host-device path) absolute-source destination))
      (t
       (translate-pathname path absolute-source destination))))

  (defvar *output-translation-function* 'identity
    "Hook for output translations.

This function needs to be idempotent, so that actions can work
whether their inputs were translated or not,
which they will be if we are composing operations. e.g. if some
create-lisp-op creates a lisp file from some higher-level input,
you need to still be able to use compile-op on that lisp file."))
;;;; -------------------------------------------------------------------------
;;;; Portability layer around Common Lisp filesystem access

(uiop/package:define-package :uiop/filesystem
  (:use :uiop/common-lisp :uiop/package :uiop/utility :uiop/os :uiop/pathname)
  (:export
   ;; Native namestrings
   #:native-namestring #:parse-native-namestring
   ;; Probing the filesystem
   #:truename* #:safe-file-write-date #:probe-file* #:directory-exists-p #:file-exists-p
   #:directory* #:filter-logical-directory-results #:directory-files #:subdirectories
   #:collect-sub*directories
   ;; Resolving symlinks somewhat
   #:truenamize #:resolve-symlinks #:*resolve-symlinks* #:resolve-symlinks*
   ;; merging with cwd
   #:get-pathname-defaults #:call-with-current-directory #:with-current-directory
   ;; Environment pathnames
   #:inter-directory-separator #:split-native-pathnames-string
   #:getenv-pathname #:getenv-pathnames
   #:getenv-absolute-directory #:getenv-absolute-directories
   #:lisp-implementation-directory #:lisp-implementation-pathname-p
   ;; Simple filesystem operations
   #:ensure-all-directories-exist
   #:rename-file-overwriting-target
   #:delete-file-if-exists #:delete-empty-directory #:delete-directory-tree))
(in-package :uiop/filesystem)

;;; Native namestrings, as seen by the operating system calls rather than Lisp
(with-upgradability ()
  (defun native-namestring (x)
    "From a non-wildcard CL pathname, a return namestring suitable for passing to the operating system"
    (when x
      (let ((p (pathname x)))
        #+clozure (with-pathname-defaults () (ccl:native-translated-namestring p)) ; see ccl bug 978
        #+(or cmucl scl) (ext:unix-namestring p nil)
        #+sbcl (sb-ext:native-namestring p)
        #-(or clozure cmucl sbcl scl)
        (os-cond
         ((os-unix-p) (unix-namestring p))
         (t (namestring p))))))

  (defun parse-native-namestring (string &rest constraints &key ensure-directory &allow-other-keys)
    "From a native namestring suitable for use by the operating system, return
a CL pathname satisfying all the specified constraints as per ENSURE-PATHNAME"
    (check-type string (or string null))
    (let* ((pathname
             (when string
               (with-pathname-defaults ()
                 #+clozure (ccl:native-to-pathname string)
                 #+cmucl (uiop/os::parse-unix-namestring* string)
                 #+sbcl (sb-ext:parse-native-namestring string)
                 #+scl (lisp::parse-unix-namestring string)
                 #-(or clozure cmucl sbcl scl)
                 (os-cond
                  ((os-unix-p) (parse-unix-namestring string :ensure-directory ensure-directory))
                  (t (parse-namestring string))))))
           (pathname
             (if ensure-directory
                 (and pathname (ensure-directory-pathname pathname))
                 pathname)))
      (apply 'ensure-pathname pathname constraints))))


;;; Probing the filesystem
(with-upgradability ()
  (defun truename* (p)
    "Nicer variant of TRUENAME that plays well with NIL, avoids logical pathname contexts, and tries both files and directories"
    (when p
      (when (stringp p) (setf p (with-pathname-defaults () (parse-namestring p))))
      (values
       (or (ignore-errors (truename p))
           ;; this is here because trying to find the truename of a directory pathname WITHOUT supplying
           ;; a trailing directory separator, causes an error on some lisps.
           #+(or clisp gcl) (if-let (d (ensure-directory-pathname p nil)) (ignore-errors (truename d)))))))

  (defun safe-file-write-date (pathname)
    "Safe variant of FILE-WRITE-DATE that may return NIL rather than raise an error."
    ;; If FILE-WRITE-DATE returns NIL, it's possible that
    ;; the user or some other agent has deleted an input file.
    ;; Also, generated files will not exist at the time planning is done
    ;; and calls compute-action-stamp which calls safe-file-write-date.
    ;; So it is very possible that we can't get a valid file-write-date,
    ;; and we can survive and we will continue the planning
    ;; as if the file were very old.
    ;; (or should we treat the case in a different, special way?)
    (and pathname
         (handler-case (file-write-date (physicalize-pathname pathname))
           (file-error () nil))))

  (defun probe-file* (p &key truename)
    "when given a pathname P (designated by a string as per PARSE-NAMESTRING),
probes the filesystem for a file or directory with given pathname.
If it exists, return its truename if TRUENAME is true,
or the original (parsed) pathname if it is false (the default)."
    (values
     (ignore-errors
      (setf p (funcall 'ensure-pathname p
                       :namestring :lisp
                       :ensure-physical t
                       :ensure-absolute t :defaults 'get-pathname-defaults
                       :want-non-wild t
                       :on-error nil))
      (when p
        #+allegro
        (probe-file p :follow-symlinks truename)
        #+gcl
        (if truename
            (truename* p)
            (let ((kind (car (si::stat p))))
              (when (eq kind :link)
                (setf kind (ignore-errors (car (si::stat (truename* p))))))
              (ecase kind
                ((nil) nil)
                ((:file :link)
                 (cond
                   ((file-pathname-p p) p)
                   ((directory-pathname-p p)
                    (subpathname p (car (last (pathname-directory p)))))))
                (:directory (ensure-directory-pathname p)))))
        #+clisp
        #.(let* ((fs (or #-os-windows (find-symbol* '#:file-stat :posix nil)))
                 (pp (find-symbol* '#:probe-pathname :ext nil)))
            `(if truename
                 ,(if pp
                      `(values (,pp p))
                      '(or (truename* p)
                        (truename* (ignore-errors (ensure-directory-pathname p)))))
                 ,(cond
                    (fs `(and (,fs p) p))
                    (pp `(nth-value 1 (,pp p)))
                    (t '(or (and (truename* p) p)
                         (if-let (d (ensure-directory-pathname p))
                          (and (truename* d) d)))))))
        #-(or allegro clisp gcl)
        (if truename
            (probe-file p)
            (and
             #+(or cmucl scl) (unix:unix-stat (ext:unix-namestring p))
             #+(and lispworks os-unix) (system:get-file-stat p)
             #+sbcl (sb-unix:unix-stat (sb-ext:native-namestring p))
             #-(or cmucl (and lispworks os-unix) sbcl scl) (file-write-date p)
             p))))))

  (defun directory-exists-p (x)
    "Is X the name of a directory that exists on the filesystem?"
    #+allegro
    (excl:probe-directory x)
    #+clisp
    (handler-case (ext:probe-directory x)
           (sys::simple-file-error ()
             nil))
    #-(or allegro clisp)
    (let ((p (probe-file* x :truename t)))
      (and (directory-pathname-p p) p)))

  (defun file-exists-p (x)
    "Is X the name of a file that exists on the filesystem?"
    (let ((p (probe-file* x :truename t)))
      (and (file-pathname-p p) p)))

  (defun directory* (pathname-spec &rest keys &key &allow-other-keys)
    "Return a list of the entries in a directory by calling DIRECTORY.
Try to override the defaults to not resolving symlinks, if implementation allows."
    (apply 'directory pathname-spec
           (append keys '#.(or #+allegro '(:directories-are-files nil :follow-symbolic-links nil)
                               #+(or clozure digitool) '(:follow-links nil)
                               #+clisp '(:circle t :if-does-not-exist :ignore)
                               #+(or cmucl scl) '(:follow-links nil :truenamep nil)
                               #+lispworks '(:link-transparency nil)
                               #+sbcl (when (find-symbol* :resolve-symlinks '#:sb-impl nil)
                                        '(:resolve-symlinks nil))))))

  (defun filter-logical-directory-results (directory entries merger)
    "If DIRECTORY isn't a logical pathname, return ENTRIES. If it is,
given ENTRIES in the DIRECTORY, remove the entries which are physical yet
when transformed by MERGER have a different TRUENAME.
Also remove duplicates as may appear with some translation rules.
This function is used as a helper to DIRECTORY-FILES to avoid invalid entries
when using logical-pathnames."
    (if (logical-pathname-p directory)
        (remove-duplicates ;; on CLISP, querying ~/ will return duplicates
         ;; Try hard to not resolve logical-pathname into physical pathnames;
         ;; otherwise logical-pathname users/lovers will be disappointed.
         ;; If directory* could use some implementation-dependent magic,
         ;; we will have logical pathnames already; otherwise,
         ;; we only keep pathnames for which specifying the name and
         ;; translating the LPN commute.
         (loop :for f :in entries
               :for p = (or (and (logical-pathname-p f) f)
                            (let* ((u (ignore-errors (call-function merger f))))
                              ;; The first u avoids a cumbersome (truename u) error.
                              ;; At this point f should already be a truename,
                              ;; but isn't quite in CLISP, for it doesn't have :version :newest
                              (and u (equal (truename* u) (truename* f)) u)))
           :when p :collect p)
         :test 'pathname-equal)
        entries))

  (defun directory-files (directory &optional (pattern *wild-file-for-directory*))
    "Return a list of the files in a directory according to the PATTERN.
Subdirectories should NOT be returned.
  PATTERN defaults to a pattern carefully chosen based on the implementation;
override the default at your own risk.
  DIRECTORY-FILES tries NOT to resolve symlinks if the implementation permits this,
but the behavior in presence of symlinks is not portable. Use IOlib to handle such situations."
    (let ((dir (pathname directory)))
      (when (logical-pathname-p dir)
        ;; Because of the filtering we do below,
        ;; logical pathnames have restrictions on wild patterns.
        ;; Not that the results are very portable when you use these patterns on physical pathnames.
        (when (wild-pathname-p dir)
          (error "Invalid wild pattern in logical directory ~S" directory))
        (unless (member (pathname-directory pattern) '(() (:relative)) :test 'equal)
          (error "Invalid file pattern ~S for logical directory ~S" pattern directory))
        (setf pattern (make-pathname-logical pattern (pathname-host dir))))
      (let* ((pat (merge-pathnames* pattern dir))
             (entries (ignore-errors (directory* pat))))
        (remove-if 'directory-pathname-p
                   (filter-logical-directory-results
                    directory entries
                    #'(lambda (f)
                        (make-pathname :defaults dir
                                       :name (make-pathname-component-logical (pathname-name f))
                                       :type (make-pathname-component-logical (pathname-type f))
                                       :version (make-pathname-component-logical (pathname-version f)))))))))

  (defun subdirectories (directory)
    "Given a DIRECTORY pathname designator, return a list of the subdirectories under it.
The behavior in presence of symlinks is not portable. Use IOlib to handle such situations."
    (let* ((directory (ensure-directory-pathname directory))
           #-(or abcl cormanlisp genera xcl)
           (wild (merge-pathnames*
                  #-(or abcl allegro cmucl lispworks sbcl scl xcl)
                  *wild-directory*
                  #+(or abcl allegro cmucl lispworks sbcl scl xcl) "*.*"
                  directory))
           (dirs
             #-(or abcl cormanlisp genera xcl)
             (ignore-errors
              (directory* wild . #.(or #+clozure '(:directories t :files nil)
                                       #+mcl '(:directories t))))
             #+(or abcl xcl) (system:list-directory directory)
             #+cormanlisp (cl::directory-subdirs directory)
             #+genera (handler-case (fs:directory-list directory) (fs:directory-not-found () nil)))
           #+(or abcl allegro cmucl genera lispworks sbcl scl xcl)
           (dirs (loop :for x :in dirs
                       :for d = #+(or abcl xcl) (extensions:probe-directory x)
                       #+allegro (excl:probe-directory x)
                       #+(or cmucl sbcl scl) (directory-pathname-p x)
                       #+genera (getf (cdr x) :directory)
                       #+lispworks (lw:file-directory-p x)
                       :when d :collect #+(or abcl allegro xcl) (ensure-directory-pathname d)
                         #+genera (ensure-directory-pathname (first x))
                       #+(or cmucl lispworks sbcl scl) x)))
      (filter-logical-directory-results
       directory dirs
       (let ((prefix (or (normalize-pathname-directory-component (pathname-directory directory))
                         '(:absolute)))) ; because allegro returns NIL for #p"FOO:"
         #'(lambda (d)
             (let ((dir (normalize-pathname-directory-component (pathname-directory d))))
               (and (consp dir) (consp (cdr dir))
                    (make-pathname
                     :defaults directory :name nil :type nil :version nil
                     :directory (append prefix (make-pathname-component-logical (last dir)))))))))))

  (defun collect-sub*directories (directory collectp recursep collector)
    "Given a DIRECTORY, when COLLECTP returns true when CALL-FUNCTION'ed with the directory,
call-function the COLLECTOR function designator on the directory,
and recurse each of its subdirectories on which the RECURSEP returns true when CALL-FUNCTION'ed with them.
This function will thus let you traverse a filesystem hierarchy,
superseding the functionality of CL-FAD:WALK-DIRECTORY.
The behavior in presence of symlinks is not portable. Use IOlib to handle such situations."
    (when (call-function collectp directory)
      (call-function collector directory)
      (dolist (subdir (subdirectories directory))
        (when (call-function recursep subdir)
          (collect-sub*directories subdir collectp recursep collector))))))

;;; Resolving symlinks somewhat
(with-upgradability ()
  (defun truenamize (pathname)
    "Resolve as much of a pathname as possible"
    (block nil
      (when (typep pathname '(or null logical-pathname)) (return pathname))
      (let ((p pathname))
        (unless (absolute-pathname-p p)
          (setf p (or (absolute-pathname-p (ensure-absolute-pathname p 'get-pathname-defaults nil))
                      (return p))))
        (when (logical-pathname-p p) (return p))
        (let ((found (probe-file* p :truename t)))
          (when found (return found)))
        (let* ((directory (normalize-pathname-directory-component (pathname-directory p)))
               (up-components (reverse (rest directory)))
               (down-components ()))
          (assert (eq :absolute (first directory)))
          (loop :while up-components :do
            (if-let (parent
                     (ignore-errors
                      (probe-file* (make-pathname :directory `(:absolute ,@(reverse up-components))
                                                  :name nil :type nil :version nil :defaults p))))
              (if-let (simplified
                       (ignore-errors
                        (merge-pathnames*
                         (make-pathname :directory `(:relative ,@down-components)
                                        :defaults p)
                         (ensure-directory-pathname parent))))
                (return simplified)))
            (push (pop up-components) down-components)
            :finally (return p))))))

  (defun resolve-symlinks (path)
    "Do a best effort at resolving symlinks in PATH, returning a partially or totally resolved PATH."
    #-allegro (truenamize path)
    #+allegro
    (if (physical-pathname-p path)
        (or (ignore-errors (excl:pathname-resolve-symbolic-links path)) path)
        path))

  (defvar *resolve-symlinks* t
    "Determine whether or not ASDF resolves symlinks when defining systems.
Defaults to T.")

  (defun resolve-symlinks* (path)
    "RESOLVE-SYMLINKS in PATH iff *RESOLVE-SYMLINKS* is T (the default)."
    (if *resolve-symlinks*
        (and path (resolve-symlinks path))
        path)))


;;; Check pathname constraints
(with-upgradability ()
  (defun ensure-pathname
      (pathname &key
                  on-error
                  defaults type dot-dot namestring
                  empty-is-nil
                  want-pathname
                  want-logical want-physical ensure-physical
                  want-relative want-absolute ensure-absolute ensure-subpath
                  want-non-wild want-wild wilden
                  want-file want-directory ensure-directory
                  want-existing ensure-directories-exist
                  truename resolve-symlinks truenamize
       &aux (p pathname)) ;; mutable working copy, preserve original
    "Coerces its argument into a PATHNAME,
optionally doing some transformations and checking specified constraints.

If the argument is NIL, then NIL is returned unless the WANT-PATHNAME constraint is specified.

If the argument is a STRING, it is first converted to a pathname via
PARSE-UNIX-NAMESTRING, PARSE-NAMESTRING or PARSE-NATIVE-NAMESTRING respectively
depending on the NAMESTRING argument being :UNIX, :LISP or :NATIVE respectively,
or else by using CALL-FUNCTION on the NAMESTRING argument;
if :UNIX is specified (or NIL, the default, which specifies the same thing),
then PARSE-UNIX-NAMESTRING it is called with the keywords
DEFAULTS TYPE DOT-DOT ENSURE-DIRECTORY WANT-RELATIVE, and
the result is optionally merged into the DEFAULTS if ENSURE-ABSOLUTE is true.

The pathname passed or resulting from parsing the string
is then subjected to all the checks and transformations below are run.

Each non-nil constraint argument can be one of the symbols T, ERROR, CERROR or IGNORE.
The boolean T is an alias for ERROR.
ERROR means that an error will be raised if the constraint is not satisfied.
CERROR means that an continuable error will be raised if the constraint is not satisfied.
IGNORE means just return NIL instead of the pathname.

The ON-ERROR argument, if not NIL, is a function designator (as per CALL-FUNCTION)
that will be called with the the following arguments:
a generic format string for ensure pathname, the pathname,
the keyword argument corresponding to the failed check or transformation,
a format string for the reason ENSURE-PATHNAME failed,
and a list with arguments to that format string.
If ON-ERROR is NIL, ERROR is used instead, which does the right thing.
You could also pass (CERROR \"CONTINUE DESPITE FAILED CHECK\").

The transformations and constraint checks are done in this order,
which is also the order in the lambda-list:

EMPTY-IS-NIL returns NIL if the argument is an empty string.
WANT-PATHNAME checks that pathname (after parsing if needed) is not null.
Otherwise, if the pathname is NIL, ensure-pathname returns NIL.
WANT-LOGICAL checks that pathname is a LOGICAL-PATHNAME
WANT-PHYSICAL checks that pathname is not a LOGICAL-PATHNAME
ENSURE-PHYSICAL ensures that pathname is physical via TRANSLATE-LOGICAL-PATHNAME
WANT-RELATIVE checks that pathname has a relative directory component
WANT-ABSOLUTE checks that pathname does have an absolute directory component
ENSURE-ABSOLUTE merges with the DEFAULTS, then checks again
that the result absolute is an absolute pathname indeed.
ENSURE-SUBPATH checks that the pathname is a subpath of the DEFAULTS.
WANT-FILE checks that pathname has a non-nil FILE component
WANT-DIRECTORY checks that pathname has nil FILE and TYPE components
ENSURE-DIRECTORY uses ENSURE-DIRECTORY-PATHNAME to interpret
any file and type components as being actually a last directory component.
WANT-NON-WILD checks that pathname is not a wild pathname
WANT-WILD checks that pathname is a wild pathname
WILDEN merges the pathname with **/*.*.* if it is not wild
WANT-EXISTING checks that a file (or directory) exists with that pathname.
ENSURE-DIRECTORIES-EXIST creates any parent directory with ENSURE-DIRECTORIES-EXIST.
TRUENAME replaces the pathname by its truename, or errors if not possible.
RESOLVE-SYMLINKS replaces the pathname by a variant with symlinks resolved by RESOLVE-SYMLINKS.
TRUENAMIZE uses TRUENAMIZE to resolve as many symlinks as possible."
    (block nil
      (flet ((report-error (keyword description &rest arguments)
               (call-function (or on-error 'error)
                              "Invalid pathname ~S: ~*~?"
                              pathname keyword description arguments)))
        (macrolet ((err (constraint &rest arguments)
                     `(report-error ',(intern* constraint :keyword) ,@arguments))
                   (check (constraint condition &rest arguments)
                     `(when ,constraint
                        (unless ,condition (err ,constraint ,@arguments))))
                   (transform (transform condition expr)
                     `(when ,transform
                        (,@(if condition `(when ,condition) '(progn))
                         (setf p ,expr)))))
          (etypecase p
            ((or null pathname))
            (string
             (when (and (emptyp p) empty-is-nil)
               (return-from ensure-pathname nil))
             (setf p (case namestring
                       ((:unix nil)
                        (parse-unix-namestring
                         p :defaults defaults :type type :dot-dot dot-dot
                           :ensure-directory ensure-directory :want-relative want-relative))
                       ((:native)
                        (parse-native-namestring p))
                       ((:lisp)
                        (parse-namestring p))
                       (t
                        (call-function namestring p))))))
          (etypecase p
            (pathname)
            (null
             (check want-pathname (pathnamep p) "Expected a pathname, not NIL")
             (return nil)))
          (check want-logical (logical-pathname-p p) "Expected a logical pathname")
          (check want-physical (physical-pathname-p p) "Expected a physical pathname")
          (transform ensure-physical () (physicalize-pathname p))
          (check ensure-physical (physical-pathname-p p) "Could not translate to a physical pathname")
          (check want-relative (relative-pathname-p p) "Expected a relative pathname")
          (check want-absolute (absolute-pathname-p p) "Expected an absolute pathname")
          (transform ensure-absolute (not (absolute-pathname-p p))
                     (ensure-absolute-pathname p defaults (list #'report-error :ensure-absolute "~@?")))
          (check ensure-absolute (absolute-pathname-p p)
                 "Could not make into an absolute pathname even after merging with ~S" defaults)
          (check ensure-subpath (absolute-pathname-p defaults)
                 "cannot be checked to be a subpath of non-absolute pathname ~S" defaults)
          (check ensure-subpath (subpathp p defaults) "is not a sub pathname of ~S" defaults)
          (check want-file (file-pathname-p p) "Expected a file pathname")
          (check want-directory (directory-pathname-p p) "Expected a directory pathname")
          (transform ensure-directory (not (directory-pathname-p p)) (ensure-directory-pathname p))
          (check want-non-wild (not (wild-pathname-p p)) "Expected a non-wildcard pathname")
          (check want-wild (wild-pathname-p p) "Expected a wildcard pathname")
          (transform wilden (not (wild-pathname-p p)) (wilden p))
          (when want-existing
            (let ((existing (probe-file* p :truename truename)))
              (if existing
                  (when truename
                    (return existing))
                  (err want-existing "Expected an existing pathname"))))
          (when ensure-directories-exist (ensure-directories-exist p))
          (when truename
            (let ((truename (truename* p)))
              (if truename
                  (return truename)
                  (err truename "Can't get a truename for pathname"))))
          (transform resolve-symlinks () (resolve-symlinks p))
          (transform truenamize () (truenamize p))
          p)))))


;;; Pathname defaults
(with-upgradability ()
  (defun get-pathname-defaults (&optional (defaults *default-pathname-defaults*))
    "Find the actual DEFAULTS to use for pathnames, including
resolving them with respect to GETCWD if the DEFAULTS were relative"
    (or (absolute-pathname-p defaults)
        (merge-pathnames* defaults (getcwd))))

  (defun call-with-current-directory (dir thunk)
    "call the THUNK in a context where the current directory was changed to DIR, if not NIL.
Note that this operation is usually NOT thread-safe."
    (if dir
        (let* ((dir (resolve-symlinks* (get-pathname-defaults (pathname-directory-pathname dir))))
               (cwd (getcwd))
               (*default-pathname-defaults* dir))
          (chdir dir)
          (unwind-protect
               (funcall thunk)
            (chdir cwd)))
        (funcall thunk)))

  (defmacro with-current-directory ((&optional dir) &body body)
    "Call BODY while the POSIX current working directory is set to DIR"
    `(call-with-current-directory ,dir #'(lambda () ,@body))))


;;; Environment pathnames
(with-upgradability ()
  (defun inter-directory-separator ()
    "What character does the current OS conventionally uses to separate directories?"
    (os-cond ((os-unix-p) #\:) (t #\;)))

  (defun split-native-pathnames-string (string &rest constraints &key &allow-other-keys)
    "Given a string of pathnames specified in native OS syntax, separate them in a list,
check constraints and normalize each one as per ENSURE-PATHNAME,
where an empty string denotes NIL."
    (loop :for namestring :in (split-string string :separator (string (inter-directory-separator)))
          :collect (unless (emptyp namestring) (apply 'parse-native-namestring namestring constraints))))

  (defun getenv-pathname (x &rest constraints &key ensure-directory want-directory on-error &allow-other-keys)
    "Extract a pathname from a user-configured environment variable, as per native OS,
check constraints and normalize as per ENSURE-PATHNAME."
    ;; For backward compatibility with ASDF 2, want-directory implies ensure-directory
    (apply 'parse-native-namestring (getenvp x)
           :ensure-directory (or ensure-directory want-directory)
           :on-error (or on-error
                         `(error "In (~S ~S), invalid pathname ~*~S: ~*~?" getenv-pathname ,x))
           constraints))
  (defun getenv-pathnames (x &rest constraints &key on-error &allow-other-keys)
    "Extract a list of pathname from a user-configured environment variable, as per native OS,
check constraints and normalize each one as per ENSURE-PATHNAME.
       Any empty entries in the environment variable X will be returned as NILs."
    (unless (getf constraints :empty-is-nil t)
      (error "Cannot have EMPTY-IS-NIL false for GETENV-PATHNAMES."))
    (apply 'split-native-pathnames-string (getenvp x)
           :on-error (or on-error
                         `(error "In (~S ~S), invalid pathname ~*~S: ~*~?" getenv-pathnames ,x))
           :empty-is-nil t
           constraints))
  (defun getenv-absolute-directory (x)
    "Extract an absolute directory pathname from a user-configured environment variable,
as per native OS"
    (getenv-pathname x :want-absolute t :ensure-directory t))
  (defun getenv-absolute-directories (x)
    "Extract a list of absolute directories from a user-configured environment variable,
as per native OS.  Any empty entries in the environment variable X will be returned as
NILs."
    (getenv-pathnames x :want-absolute t :ensure-directory t))

  (defun lisp-implementation-directory (&key truename)
    "Where are the system files of the current installation of the CL implementation?"
    (declare (ignorable truename))
    (let ((dir
            #+abcl extensions:*lisp-home*
            #+(or allegro clasp ecl mkcl) #p"SYS:"
            #+clisp custom:*lib-directory*
            #+clozure #p"ccl:"
            #+cmucl (ignore-errors (pathname-parent-directory-pathname (truename #p"modules:")))
            #+gcl system::*system-directory*
            #+lispworks lispworks:*lispworks-directory*
            #+sbcl (if-let (it (find-symbol* :sbcl-homedir-pathname :sb-int nil))
                     (funcall it)
                     (getenv-pathname "SBCL_HOME" :ensure-directory t))
            #+scl (ignore-errors (pathname-parent-directory-pathname (truename #p"file://modules/")))
            #+xcl ext:*xcl-home*))
      (if (and dir truename)
          (truename* dir)
          dir)))

  (defun lisp-implementation-pathname-p (pathname)
    "Is the PATHNAME under the current installation of the CL implementation?"
    ;; Other builtin systems are those under the implementation directory
    (and (when pathname
           (if-let (impdir (lisp-implementation-directory))
             (or (subpathp pathname impdir)
                 (when *resolve-symlinks*
                   (if-let (truename (truename* pathname))
                     (if-let (trueimpdir (truename* impdir))
                       (subpathp truename trueimpdir)))))))
         t)))


;;; Simple filesystem operations
(with-upgradability ()
  (defun ensure-all-directories-exist (pathnames)
    "Ensure that for every pathname in PATHNAMES, we ensure its directories exist"
    (dolist (pathname pathnames)
      (when pathname
        (ensure-directories-exist (physicalize-pathname pathname)))))

  (defun delete-file-if-exists (x)
    "Delete a file X if it already exists"
    (when x (handler-case (delete-file x) (file-error () nil))))

  (defun rename-file-overwriting-target (source target)
    "Rename a file, overwriting any previous file with the TARGET name,
in an atomic way if the implementation allows."
    (let ((source (ensure-pathname source :namestring :lisp :ensure-physical t :want-file t))
          (target (ensure-pathname target :namestring :lisp :ensure-physical t :want-file t)))
      #+clisp ;; in recent enough versions of CLISP, :if-exists :overwrite would make it atomic
      (progn (funcall 'require "syscalls")
             (symbol-call :posix :copy-file source target :method :rename))
      #+(and sbcl os-windows) (delete-file-if-exists target) ;; not atomic
      #-clisp
      (rename-file source target
                   #+(or clasp clozure ecl) :if-exists
                   #+clozure :rename-and-delete #+(or clasp ecl) t)))

  (defun delete-empty-directory (directory-pathname)
    "Delete an empty directory"
    #+(or abcl digitool gcl) (delete-file directory-pathname)
    #+allegro (excl:delete-directory directory-pathname)
    #+clisp (ext:delete-directory directory-pathname)
    #+clozure (ccl::delete-empty-directory directory-pathname)
    #+(or cmucl scl) (multiple-value-bind (ok errno)
                       (unix:unix-rmdir (native-namestring directory-pathname))
                     (unless ok
                       #+cmucl (error "Error number ~A when trying to delete directory ~A"
                                    errno directory-pathname)
                       #+scl (error "~@<Error deleting ~S: ~A~@:>"
                                    directory-pathname (unix:get-unix-error-msg errno))))
    #+cormanlisp (win32:delete-directory directory-pathname)
    #+(or clasp ecl) (si:rmdir directory-pathname)
    #+genera (fs:delete-directory directory-pathname)
    #+lispworks (lw:delete-directory directory-pathname)
    #+mkcl (mkcl:rmdir directory-pathname)
    #+sbcl #.(if-let (dd (find-symbol* :delete-directory :sb-ext nil))
               `(,dd directory-pathname) ;; requires SBCL 1.0.44 or later
               `(progn (require :sb-posix) (symbol-call :sb-posix :rmdir directory-pathname)))
    #+xcl (symbol-call :uiop :run-program `("rmdir" ,(native-namestring directory-pathname)))
    #-(or abcl allegro clasp clisp clozure cmucl cormanlisp digitool ecl gcl genera lispworks mkcl sbcl scl xcl)
    (not-implemented-error 'delete-empty-directory "(on your platform)")) ; genera

  (defun delete-directory-tree (directory-pathname &key (validate nil validatep) (if-does-not-exist :error))
    "Delete a directory including all its recursive contents, aka rm -rf.

To reduce the risk of infortunate mistakes, DIRECTORY-PATHNAME must be
a physical non-wildcard directory pathname (not namestring).

If the directory does not exist, the IF-DOES-NOT-EXIST argument specifies what happens:
if it is :ERROR (the default), an error is signaled, whereas if it is :IGNORE, nothing is done.

Furthermore, before any deletion is attempted, the DIRECTORY-PATHNAME must pass
the validation function designated (as per ENSURE-FUNCTION) by the VALIDATE keyword argument
which in practice is thus compulsory, and validates by returning a non-NIL result.
If you're suicidal or extremely confident, just use :VALIDATE T."
    (check-type if-does-not-exist (member :error :ignore))
    (cond
      ((not (and (pathnamep directory-pathname) (directory-pathname-p directory-pathname)
                 (physical-pathname-p directory-pathname) (not (wild-pathname-p directory-pathname))))
       (error "~S was asked to delete ~S but it is not a physical non-wildcard directory pathname"
              'delete-directory-tree directory-pathname))
      ((not validatep)
       (error "~S was asked to delete ~S but was not provided a validation predicate"
              'delete-directory-tree directory-pathname))
      ((not (call-function validate directory-pathname))
       (error "~S was asked to delete ~S but it is not valid ~@[according to ~S~]"
              'delete-directory-tree directory-pathname validate))
      ((not (directory-exists-p directory-pathname))
       (ecase if-does-not-exist
         (:error
          (error "~S was asked to delete ~S but the directory does not exist"
              'delete-directory-tree directory-pathname))
         (:ignore nil)))
      #-(or allegro cmucl clozure genera sbcl scl)
      ((os-unix-p) ;; On Unix, don't recursively walk the directory and delete everything in Lisp,
       ;; except on implementations where we can prevent DIRECTORY from following symlinks;
       ;; instead spawn a standard external program to do the dirty work.
       (symbol-call :uiop :run-program `("rm" "-rf" ,(native-namestring directory-pathname))))
      (t
       ;; On supported implementation, call supported system functions
       #+allegro (symbol-call :excl.osi :delete-directory-and-files
                              directory-pathname :if-does-not-exist if-does-not-exist)
       #+clozure (ccl:delete-directory directory-pathname)
       #+genera (fs:delete-directory directory-pathname :confirm nil)
       #+sbcl #.(if-let (dd (find-symbol* :delete-directory :sb-ext nil))
                  `(,dd directory-pathname :recursive t) ;; requires SBCL 1.0.44 or later
                  '(error "~S requires SBCL 1.0.44 or later" 'delete-directory-tree))
       ;; Outside Unix or on CMUCL and SCL that can avoid following symlinks,
       ;; do things the hard way.
       #-(or allegro clozure genera sbcl)
       (let ((sub*directories
               (while-collecting (c)
                 (collect-sub*directories directory-pathname t t #'c))))
             (dolist (d (nreverse sub*directories))
               (map () 'delete-file (directory-files d))
               (delete-empty-directory d)))))))
;;;; ---------------------------------------------------------------------------
;;;; Utilities related to streams

(uiop/package:define-package :uiop/stream
  (:use :uiop/common-lisp :uiop/package :uiop/utility :uiop/os :uiop/pathname :uiop/filesystem)
  (:export
   #:*default-stream-element-type*
   #:*stdin* #:setup-stdin #:*stdout* #:setup-stdout #:*stderr* #:setup-stderr
   #:detect-encoding #:*encoding-detection-hook* #:always-default-encoding
   #:encoding-external-format #:*encoding-external-format-hook* #:default-encoding-external-format
   #:*default-encoding* #:*utf-8-external-format*
   #:with-safe-io-syntax #:call-with-safe-io-syntax #:safe-read-from-string
   #:with-output #:output-string #:with-input #:input-string
   #:with-input-file #:call-with-input-file #:with-output-file #:call-with-output-file
   #:null-device-pathname #:call-with-null-input #:with-null-input
   #:call-with-null-output #:with-null-output
   #:finish-outputs #:format! #:safe-format!
   #:copy-stream-to-stream #:concatenate-files #:copy-file
   #:slurp-stream-string #:slurp-stream-lines #:slurp-stream-line
   #:slurp-stream-forms #:slurp-stream-form
   #:read-file-string #:read-file-line #:read-file-lines #:safe-read-file-line
   #:read-file-forms #:read-file-form #:safe-read-file-form
   #:eval-input #:eval-thunk #:standard-eval-thunk
   #:println #:writeln
   #:file-stream-p #:file-or-synonym-stream-p
   ;; Temporary files
   #:*temporary-directory* #:temporary-directory #:default-temporary-directory
   #:setup-temporary-directory
   #:call-with-temporary-file #:with-temporary-file
   #:add-pathname-suffix #:tmpize-pathname
   #:call-with-staging-pathname #:with-staging-pathname))
(in-package :uiop/stream)

(with-upgradability ()
  (defvar *default-stream-element-type*
    (or #+(or abcl cmucl cormanlisp scl xcl) 'character
        #+lispworks 'lw:simple-char
        :default)
    "default element-type for open (depends on the current CL implementation)")

  (defvar *stdin* *standard-input*
    "the original standard input stream at startup")

  (defun setup-stdin ()
    (setf *stdin*
          #.(or #+clozure 'ccl::*stdin*
                #+(or cmucl scl) 'system:*stdin*
                #+(or clasp ecl) 'ext::+process-standard-input+
                #+sbcl 'sb-sys:*stdin*
                '*standard-input*)))

  (defvar *stdout* *standard-output*
    "the original standard output stream at startup")

  (defun setup-stdout ()
    (setf *stdout*
          #.(or #+clozure 'ccl::*stdout*
                #+(or cmucl scl) 'system:*stdout*
                #+(or clasp ecl) 'ext::+process-standard-output+
                #+sbcl 'sb-sys:*stdout*
                '*standard-output*)))

  (defvar *stderr* *error-output*
    "the original error output stream at startup")

  (defun setup-stderr ()
    (setf *stderr*
          #.(or #+allegro 'excl::*stderr*
                #+clozure 'ccl::*stderr*
                #+(or cmucl scl) 'system:*stderr*
                #+(or clasp ecl) 'ext::+process-error-output+
                #+sbcl 'sb-sys:*stderr*
                '*error-output*)))

  ;; Run them now. In image.lisp, we'll register them to be run at image restart.
  (setup-stdin) (setup-stdout) (setup-stderr))


;;; Encodings (mostly hooks only; full support requires asdf-encodings)
(with-upgradability ()
  (defparameter *default-encoding*
    ;; preserve explicit user changes to something other than the legacy default :default
    (or (if-let (previous (and (boundp '*default-encoding*) (symbol-value '*default-encoding*)))
          (unless (eq previous :default) previous))
        :utf-8)
    "Default encoding for source files.
The default value :utf-8 is the portable thing.
The legacy behavior was :default.
If you (asdf:load-system :asdf-encodings) then
you will have autodetection via *encoding-detection-hook* below,
reading emacs-style -*- coding: utf-8 -*- specifications,
and falling back to utf-8 or latin1 if nothing is specified.")

  (defparameter *utf-8-external-format*
    (if (featurep :asdf-unicode)
        (or #+clisp charset:utf-8 :utf-8)
        :default)
    "Default :external-format argument to pass to CL:OPEN and also
CL:LOAD or CL:COMPILE-FILE to best process a UTF-8 encoded file.
On modern implementations, this will decode UTF-8 code points as CL characters.
On legacy implementations, it may fall back on some 8-bit encoding,
with non-ASCII code points being read as several CL characters;
hopefully, if done consistently, that won't affect program behavior too much.")

  (defun always-default-encoding (pathname)
    "Trivial function to use as *encoding-detection-hook*,
always 'detects' the *default-encoding*"
    (declare (ignore pathname))
    *default-encoding*)

  (defvar *encoding-detection-hook* #'always-default-encoding
    "Hook for an extension to define a function to automatically detect a file's encoding")

  (defun detect-encoding (pathname)
    "Detects the encoding of a specified file, going through user-configurable hooks"
    (if (and pathname (not (directory-pathname-p pathname)) (probe-file* pathname))
        (funcall *encoding-detection-hook* pathname)
        *default-encoding*))

  (defun default-encoding-external-format (encoding)
    "Default, ignorant, function to transform a character ENCODING as a
portable keyword to an implementation-dependent EXTERNAL-FORMAT specification.
Load system ASDF-ENCODINGS to hook in a better one."
    (case encoding
      (:default :default) ;; for backward-compatibility only. Explicit usage discouraged.
      (:utf-8 *utf-8-external-format*)
      (otherwise
       (cerror "Continue using :external-format :default" (compatfmt "~@<Your ASDF component is using encoding ~S but it isn't recognized. Your system should :defsystem-depends-on (:asdf-encodings).~:>") encoding)
       :default)))

  (defvar *encoding-external-format-hook*
    #'default-encoding-external-format
    "Hook for an extension (e.g. ASDF-ENCODINGS) to define a better mapping
from non-default encodings to and implementation-defined external-format's")

  (defun encoding-external-format (encoding)
    "Transform a portable ENCODING keyword to an implementation-dependent EXTERNAL-FORMAT,
going through all the proper hooks."
    (funcall *encoding-external-format-hook* (or encoding *default-encoding*))))


;;; Safe syntax
(with-upgradability ()
  (defvar *standard-readtable* (with-standard-io-syntax *readtable*)
    "The standard readtable, implementing the syntax specified by the CLHS.
It must never be modified, though only good implementations will even enforce that.")

  (defmacro with-safe-io-syntax ((&key (package :cl)) &body body)
    "Establish safe CL reader options around the evaluation of BODY"
    `(call-with-safe-io-syntax #'(lambda () (let ((*package* (find-package ,package))) ,@body))))

  (defun call-with-safe-io-syntax (thunk &key (package :cl))
    (with-standard-io-syntax
      (let ((*package* (find-package package))
            (*read-default-float-format* 'double-float)
            (*print-readably* nil)
            (*read-eval* nil))
        (funcall thunk))))

  (defun safe-read-from-string (string &key (package :cl) (eof-error-p t) eof-value (start 0) end preserve-whitespace)
    "Read from STRING using a safe syntax, as per WITH-SAFE-IO-SYNTAX"
    (with-safe-io-syntax (:package package)
      (read-from-string string eof-error-p eof-value :start start :end end :preserve-whitespace preserve-whitespace))))

;;; Output helpers
(with-upgradability ()
  (defun call-with-output-file (pathname thunk
                                &key
                                  (element-type *default-stream-element-type*)
                                  (external-format *utf-8-external-format*)
                                  (if-exists :error)
                                  (if-does-not-exist :create))
    "Open FILE for input with given recognizes options, call THUNK with the resulting stream.
Other keys are accepted but discarded."
    (with-open-file (s pathname :direction :output
                                :element-type element-type
                                :external-format external-format
                                :if-exists if-exists
                                :if-does-not-exist if-does-not-exist)
      (funcall thunk s)))

  (defmacro with-output-file ((var pathname &rest keys
                               &key element-type external-format if-exists if-does-not-exist)
                              &body body)
    (declare (ignore element-type external-format if-exists if-does-not-exist))
    `(call-with-output-file ,pathname #'(lambda (,var) ,@body) ,@keys))

  (defun call-with-output (output function &key keys)
    "Calls FUNCTION with an actual stream argument,
behaving like FORMAT with respect to how stream designators are interpreted:
If OUTPUT is a STREAM, use it as the stream.
If OUTPUT is NIL, use a STRING-OUTPUT-STREAM as the stream, and return the resulting string.
If OUTPUT is T, use *STANDARD-OUTPUT* as the stream.
If OUTPUT is a STRING with a fill-pointer, use it as a string-output-stream.
If OUTPUT is a PATHNAME, open the file and write to it, passing KEYS to WITH-OUTPUT-FILE
-- this latter as an extension since ASDF 3.1.
Otherwise, signal an error."
    (etypecase output
      (null
       (with-output-to-string (stream) (funcall function stream)))
      ((eql t)
       (funcall function *standard-output*))
      (stream
       (funcall function output))
      (string
       (assert (fill-pointer output))
       (with-output-to-string (stream output) (funcall function stream)))
      (pathname
       (apply 'call-with-output-file output function keys))))

  (defmacro with-output ((output-var &optional (value output-var)) &body body)
    "Bind OUTPUT-VAR to an output stream, coercing VALUE (default: previous binding of OUTPUT-VAR)
as per FORMAT, and evaluate BODY within the scope of this binding."
    `(call-with-output ,value #'(lambda (,output-var) ,@body)))

  (defun output-string (string &optional output)
    "If the desired OUTPUT is not NIL, print the string to the output; otherwise return the string"
    (if output
        (with-output (output) (princ string output))
        string)))


;;; Input helpers
(with-upgradability ()
  (defun call-with-input-file (pathname thunk
                               &key
                                 (element-type *default-stream-element-type*)
                                 (external-format *utf-8-external-format*)
                                 (if-does-not-exist :error))
    "Open FILE for input with given recognizes options, call THUNK with the resulting stream.
Other keys are accepted but discarded."
    (with-open-file (s pathname :direction :input
                                :element-type element-type
                                :external-format external-format
                                :if-does-not-exist if-does-not-exist)
      (funcall thunk s)))

  (defmacro with-input-file ((var pathname &rest keys
                              &key element-type external-format if-does-not-exist)
                             &body body)
    (declare (ignore element-type external-format if-does-not-exist))
    `(call-with-input-file ,pathname #'(lambda (,var) ,@body) ,@keys))

  (defun call-with-input (input function &key keys)
    "Calls FUNCTION with an actual stream argument, interpreting
stream designators like READ, but also coercing strings to STRING-INPUT-STREAM,
and PATHNAME to FILE-STREAM.
If INPUT is a STREAM, use it as the stream.
If INPUT is NIL, use a *STANDARD-INPUT* as the stream.
If INPUT is T, use *TERMINAL-IO* as the stream.
If INPUT is a STRING, use it as a string-input-stream.
If INPUT is a PATHNAME, open it, passing KEYS to WITH-INPUT-FILE
-- the latter is an extension since ASDF 3.1.
Otherwise, signal an error."
    (etypecase input
      (null (funcall function *standard-input*))
      ((eql t) (funcall function *terminal-io*))
      (stream (funcall function input))
      (string (with-input-from-string (stream input) (funcall function stream)))
      (pathname (apply 'call-with-input-file input function keys))))

  (defmacro with-input ((input-var &optional (value input-var)) &body body)
    "Bind INPUT-VAR to an input stream, coercing VALUE (default: previous binding of INPUT-VAR)
as per CALL-WITH-INPUT, and evaluate BODY within the scope of this binding."
    `(call-with-input ,value #'(lambda (,input-var) ,@body)))

  (defun input-string (&optional input)
    "If the desired INPUT is a string, return that string; otherwise slurp the INPUT into a string
and return that"
    (if (stringp input)
        input
        (with-input (input) (funcall 'slurp-stream-string input)))))

;;; Null device
(with-upgradability ()
  (defun null-device-pathname ()
    "Pathname to a bit bucket device that discards any information written to it
and always returns EOF when read from"
    (os-cond
      ((os-unix-p) #p"/dev/null")
      ((os-windows-p) #p"NUL") ;; Q: how many Lisps accept the #p"NUL:" syntax?
      (t (error "No /dev/null on your OS"))))
  (defun call-with-null-input (fun &rest keys &key element-type external-format if-does-not-exist)
    "Call FUN with an input stream from the null device; pass keyword arguments to OPEN."
    (declare (ignore element-type external-format if-does-not-exist))
    (apply 'call-with-input-file (null-device-pathname) fun keys))
  (defmacro with-null-input ((var &rest keys
                              &key element-type external-format if-does-not-exist)
                             &body body)
    (declare (ignore element-type external-format if-does-not-exist))
    "Evaluate BODY in a context when VAR is bound to an input stream accessing the null device.
Pass keyword arguments to OPEN."
    `(call-with-null-input #'(lambda (,var) ,@body) ,@keys))
  (defun call-with-null-output (fun
                                &key (element-type *default-stream-element-type*)
                                  (external-format *utf-8-external-format*)
                                  (if-exists :overwrite)
                                  (if-does-not-exist :error))
    "Call FUN with an output stream to the null device; pass keyword arguments to OPEN."
    (call-with-output-file
     (null-device-pathname) fun
     :element-type element-type :external-format external-format
     :if-exists if-exists :if-does-not-exist if-does-not-exist))
  (defmacro with-null-output ((var &rest keys
                              &key element-type external-format if-does-not-exist if-exists)
                              &body body)
    "Evaluate BODY in a context when VAR is bound to an output stream accessing the null device.
Pass keyword arguments to OPEN."
    (declare (ignore element-type external-format if-exists if-does-not-exist))
    `(call-with-null-output #'(lambda (,var) ,@body) ,@keys)))

;;; Ensure output buffers are flushed
(with-upgradability ()
  (defun finish-outputs (&rest streams)
    "Finish output on the main output streams as well as any specified one.
Useful for portably flushing I/O before user input or program exit."
    ;; CCL notably buffers its stream output by default.
    (dolist (s (append streams
                       (list *stdout* *stderr* *error-output* *standard-output* *trace-output*
                             *debug-io* *terminal-io* *query-io*)))
      (ignore-errors (finish-output s)))
    (values))

  (defun format! (stream format &rest args)
    "Just like format, but call finish-outputs before and after the output."
    (finish-outputs stream)
    (apply 'format stream format args)
    (finish-outputs stream))

  (defun safe-format! (stream format &rest args)
    "Variant of FORMAT that is safe against both
dangerous syntax configuration and errors while printing."
    (with-safe-io-syntax ()
      (ignore-errors (apply 'format! stream format args))
      (finish-outputs stream)))) ; just in case format failed


;;; Simple Whole-Stream processing
(with-upgradability ()
  (defun copy-stream-to-stream (input output &key element-type buffer-size linewise prefix)
    "Copy the contents of the INPUT stream into the OUTPUT stream.
If LINEWISE is true, then read and copy the stream line by line, with an optional PREFIX.
Otherwise, using WRITE-SEQUENCE using a buffer of size BUFFER-SIZE."
    (with-open-stream (input input)
      (if linewise
          (loop* :for (line eof) = (multiple-value-list (read-line input nil nil))
                 :while line :do
                 (when prefix (princ prefix output))
                 (princ line output)
                 (unless eof (terpri output))
                 (finish-output output)
                 (when eof (return)))
          (loop
            :with buffer-size = (or buffer-size 8192)
            :with buffer = (make-array (list buffer-size) :element-type (or element-type 'character))
            :for end = (read-sequence buffer input)
            :until (zerop end)
            :do (write-sequence buffer output :end end)
                (when (< end buffer-size) (return))))))

  (defun concatenate-files (inputs output)
    "create a new OUTPUT file the contents of which a the concatenate of the INPUTS files."
    (with-open-file (o output :element-type '(unsigned-byte 8)
                              :direction :output :if-exists :rename-and-delete)
      (dolist (input inputs)
        (with-open-file (i input :element-type '(unsigned-byte 8)
                                 :direction :input :if-does-not-exist :error)
          (copy-stream-to-stream i o :element-type '(unsigned-byte 8))))))

  (defun copy-file (input output)
    "Copy contents of the INPUT file to the OUTPUT file"
    ;; Not available on LW personal edition or LW 6.0 on Mac: (lispworks:copy-file i f)
    #+allegro
    (excl.osi:copy-file input output)
    #+ecl
    (ext:copy-file input output)
    #-(or allegro ecl)
    (concatenate-files (list input) output))

  (defun slurp-stream-string (input &key (element-type 'character) stripped)
    "Read the contents of the INPUT stream as a string"
    (let ((string
            (with-open-stream (input input)
              (with-output-to-string (output)
                (copy-stream-to-stream input output :element-type element-type)))))
      (if stripped (stripln string) string)))

  (defun slurp-stream-lines (input &key count)
    "Read the contents of the INPUT stream as a list of lines, return those lines.

Note: relies on the Lisp's READ-LINE, but additionally removes any remaining CR
from the line-ending if the file or stream had CR+LF but Lisp only removed LF.

Read no more than COUNT lines."
    (check-type count (or null integer))
    (with-open-stream (input input)
      (loop :for n :from 0
            :for l = (and (or (not count) (< n count))
                          (read-line input nil nil))
            ;; stripln: to remove CR when the OS sends CRLF and Lisp only remove LF
            :while l :collect (stripln l))))

  (defun slurp-stream-line (input &key (at 0))
    "Read the contents of the INPUT stream as a list of lines,
then return the ACCESS-AT of that list of lines using the AT specifier.
PATH defaults to 0, i.e. return the first line.
PATH is typically an integer, or a list of an integer and a function.
If PATH is NIL, it will return all the lines in the file.

The stream will not be read beyond the Nth lines,
where N is the index specified by path
if path is either an integer or a list that starts with an integer."
    (access-at (slurp-stream-lines input :count (access-at-count at)) at))

  (defun slurp-stream-forms (input &key count)
    "Read the contents of the INPUT stream as a list of forms,
and return those forms.

If COUNT is null, read to the end of the stream;
if COUNT is an integer, stop after COUNT forms were read.

BEWARE: be sure to use WITH-SAFE-IO-SYNTAX, or some variant thereof"
    (check-type count (or null integer))
    (loop :with eof = '#:eof
          :for n :from 0
          :for form = (if (and count (>= n count))
                          eof
                          (read-preserving-whitespace input nil eof))
          :until (eq form eof) :collect form))

  (defun slurp-stream-form (input &key (at 0))
    "Read the contents of the INPUT stream as a list of forms,
then return the ACCESS-AT of these forms following the AT.
AT defaults to 0, i.e. return the first form.
AT is typically a list of integers.
If AT is NIL, it will return all the forms in the file.

The stream will not be read beyond the Nth form,
where N is the index specified by path,
if path is either an integer or a list that starts with an integer.

BEWARE: be sure to use WITH-SAFE-IO-SYNTAX, or some variant thereof"
    (access-at (slurp-stream-forms input :count (access-at-count at)) at))

  (defun read-file-string (file &rest keys)
    "Open FILE with option KEYS, read its contents as a string"
    (apply 'call-with-input-file file 'slurp-stream-string keys))

  (defun read-file-lines (file &rest keys)
    "Open FILE with option KEYS, read its contents as a list of lines
BEWARE: be sure to use WITH-SAFE-IO-SYNTAX, or some variant thereof"
    (apply 'call-with-input-file file 'slurp-stream-lines keys))

  (defun read-file-line (file &rest keys &key (at 0) &allow-other-keys)
    "Open input FILE with option KEYS (except AT),
and read its contents as per SLURP-STREAM-LINE with given AT specifier.
BEWARE: be sure to use WITH-SAFE-IO-SYNTAX, or some variant thereof"
    (apply 'call-with-input-file file
           #'(lambda (input) (slurp-stream-line input :at at))
           (remove-plist-key :at keys)))

  (defun read-file-forms (file &rest keys &key count &allow-other-keys)
    "Open input FILE with option KEYS (except COUNT),
and read its contents as per SLURP-STREAM-FORMS with given COUNT.
BEWARE: be sure to use WITH-SAFE-IO-SYNTAX, or some variant thereof"
    (apply 'call-with-input-file file
           #'(lambda (input) (slurp-stream-forms input :count count))
           (remove-plist-key :count keys)))

  (defun read-file-form (file &rest keys &key (at 0) &allow-other-keys)
    "Open input FILE with option KEYS (except AT),
and read its contents as per SLURP-STREAM-FORM with given AT specifier.
BEWARE: be sure to use WITH-SAFE-IO-SYNTAX, or some variant thereof"
    (apply 'call-with-input-file file
           #'(lambda (input) (slurp-stream-form input :at at))
           (remove-plist-key :at keys)))

  (defun safe-read-file-line (pathname &rest keys &key (package :cl) &allow-other-keys)
    "Reads the specified line from the top of a file using a safe standardized syntax.
Extracts the line using READ-FILE-LINE,
within an WITH-SAFE-IO-SYNTAX using the specified PACKAGE."
    (with-safe-io-syntax (:package package)
      (apply 'read-file-line pathname (remove-plist-key :package keys))))

  (defun safe-read-file-form (pathname &rest keys &key (package :cl) &allow-other-keys)
    "Reads the specified form from the top of a file using a safe standardized syntax.
Extracts the form using READ-FILE-FORM,
within an WITH-SAFE-IO-SYNTAX using the specified PACKAGE."
    (with-safe-io-syntax (:package package)
      (apply 'read-file-form pathname (remove-plist-key :package keys))))

  (defun eval-input (input)
    "Portably read and evaluate forms from INPUT, return the last values."
    (with-input (input)
      (loop :with results :with eof ='#:eof
            :for form = (read input nil eof)
            :until (eq form eof)
            :do (setf results (multiple-value-list (eval form)))
            :finally (return (values-list results)))))

  (defun eval-thunk (thunk)
    "Evaluate a THUNK of code:
If a function, FUNCALL it without arguments.
If a constant literal and not a sequence, return it.
If a cons or a symbol, EVAL it.
If a string, repeatedly read and evaluate from it, returning the last values."
    (etypecase thunk
      ((or boolean keyword number character pathname) thunk)
      ((or cons symbol) (eval thunk))
      (function (funcall thunk))
      (string (eval-input thunk))))

  (defun standard-eval-thunk (thunk &key (package :cl))
    "Like EVAL-THUNK, but in a more standardized evaluation context."
    ;; Note: it's "standard-" not "safe-", because evaluation is never safe.
    (when thunk
      (with-safe-io-syntax (:package package)
        (let ((*read-eval* t))
          (eval-thunk thunk))))))

(with-upgradability ()
  (defun println (x &optional (stream *standard-output*))
    "Variant of PRINC that also calls TERPRI afterwards"
    (princ x stream) (terpri stream) (finish-output stream) (values))

  (defun writeln (x &rest keys &key (stream *standard-output*) &allow-other-keys)
    "Variant of WRITE that also calls TERPRI afterwards"
    (apply 'write x keys) (terpri stream) (finish-output stream) (values)))


;;; Using temporary files
(with-upgradability ()
  (defun default-temporary-directory ()
    "Return a default directory to use for temporary files"
    (os-cond
      ((os-unix-p)
       (or (getenv-pathname "TMPDIR" :ensure-directory t)
           (parse-native-namestring "/tmp/")))
      ((os-windows-p)
       (getenv-pathname "TEMP" :ensure-directory t))
      (t (subpathname (user-homedir-pathname) "tmp/"))))

  (defvar *temporary-directory* nil "User-configurable location for temporary files")

  (defun temporary-directory ()
    "Return a directory to use for temporary files"
    (or *temporary-directory* (default-temporary-directory)))

  (defun setup-temporary-directory ()
    "Configure a default temporary directory to use."
    (setf *temporary-directory* (default-temporary-directory))
    #+gcl (setf system::*tmp-dir* *temporary-directory*))

  (defun call-with-temporary-file
      (thunk &key
               (want-stream-p t) (want-pathname-p t) (direction :io) keep after
               directory (type "tmp" typep) prefix (suffix (when typep "-tmp"))
               (element-type *default-stream-element-type*)
               (external-format *utf-8-external-format*))
    "Call a THUNK with stream and/or pathname arguments identifying a temporary file.

The temporary file's pathname will be based on concatenating
PREFIX (or \"tmp\" if it's NIL), a random alphanumeric string,
and optional SUFFIX (defaults to \"-tmp\" if a type was provided)
and TYPE (defaults to \"tmp\", using a dot as separator if not NIL),
within DIRECTORY (defaulting to the TEMPORARY-DIRECTORY) if the PREFIX isn't absolute.

The file will be open with specified DIRECTION (defaults to :IO),
ELEMENT-TYPE (defaults to *DEFAULT-STREAM-ELEMENT-TYPE*) and
EXTERNAL-FORMAT (defaults to *UTF-8-EXTERNAL-FORMAT*).
If WANT-STREAM-P is true (the defaults to T), then THUNK will then be CALL-FUNCTION'ed
with the stream and the pathname (if WANT-PATHNAME-P is true, defaults to T),
and stream will be closed after the THUNK exits (either normally or abnormally).
If WANT-STREAM-P is false, then WANT-PATHAME-P must be true, and then
THUNK is only CALL-FUNCTION'ed after the stream is closed, with the pathname as argument.
Upon exit of THUNK, the AFTER thunk if defined is CALL-FUNCTION'ed with the pathname as argument.
If AFTER is defined, its results are returned, otherwise, the results of THUNK are returned.
Finally, the file will be deleted, unless the KEEP argument when CALL-FUNCTION'ed returns true."
    #+xcl (declare (ignorable typep))
    (check-type direction (member :output :io))
    (assert (or want-stream-p want-pathname-p))
    (loop
      :with prefix-pn = (ensure-absolute-pathname
                         (or prefix "tmp")
                         (or (ensure-pathname
                              directory
                              :namestring :native
                              :ensure-directory t
                              :ensure-physical t)
                             #'temporary-directory))
      :with prefix-nns = (native-namestring prefix-pn)
      :with results = (progn (ensure-directories-exist prefix-pn)
                             ())
      :for counter :from (random (expt 36 #-gcl 8 #+gcl 5))
      :for pathname = (parse-native-namestring
                       (format nil "~A~36R~@[~A~]~@[.~A~]"
                               prefix-nns counter suffix (unless (eq type :unspecific) type)))
      :for okp = nil :do
        ;; TODO: on Unix, do something about umask
        ;; TODO: on Unix, audit the code so we make sure it uses O_CREAT|O_EXCL
        ;; TODO: on Unix, use CFFI and mkstemp --
        ;; except UIOP is precisely meant to not depend on CFFI or on anything! Grrrr.
        ;; Can we at least design some hook?
        (unwind-protect
             (progn
               (ensure-directories-exist pathname)
               (with-open-file (stream pathname
                                       :direction direction
                                       :element-type element-type
                                       :external-format external-format
                                       :if-exists nil :if-does-not-exist :create)
                 (when stream
                   (setf okp pathname)
                   (when want-stream-p
                     ;; Note: can't return directly from within with-open-file
                     ;; or the non-local return causes the file creation to be undone.
                     (setf results (multiple-value-list
                                    (if want-pathname-p
                                        (funcall thunk stream pathname)
                                        (funcall thunk stream)))))))
               (cond
                 ((not okp) nil)
                 (after (return (call-function after okp)))
                 ((and want-pathname-p (not want-stream-p)) (return (call-function thunk okp)))
                 (t (return (values-list results)))))
          (when (and okp (not (call-function keep)))
            (ignore-errors (delete-file-if-exists okp))))))

  (defmacro with-temporary-file ((&key (stream (gensym "STREAM") streamp)
                                    (pathname (gensym "PATHNAME") pathnamep)
                                    directory prefix suffix type
                                    keep direction element-type external-format)
                                 &body body)
    "Evaluate BODY where the symbols specified by keyword arguments
STREAM and PATHNAME (if respectively specified) are bound corresponding
to a newly created temporary file ready for I/O, as per CALL-WITH-TEMPORARY-FILE.
At least one of STREAM or PATHNAME must be specified.
If the STREAM is not specified, it will be closed before the BODY is evaluated.
If STREAM is specified, then the :CLOSE-STREAM label if it appears in the BODY,
separates forms run before and after the stream is closed.
The values of the last form of the BODY (not counting the separating :CLOSE-STREAM) are returned.
Upon success, the KEEP form is evaluated and the file is is deleted unless it evaluates to TRUE."
    (check-type stream symbol)
    (check-type pathname symbol)
    (assert (or streamp pathnamep))
    (let* ((afterp (position :close-stream body))
           (before (if afterp (subseq body 0 afterp) body))
           (after (when afterp (subseq body (1+ afterp))))
           (beforef (gensym "BEFORE"))
           (afterf (gensym "AFTER")))
      `(flet (,@(when before
                  `((,beforef (,@(when streamp `(,stream)) ,@(when pathnamep `(,pathname)))
                       ,@(when after `((declare (ignorable ,pathname))))
                       ,@before)))
              ,@(when after
                  (assert pathnamep)
                  `((,afterf (,pathname) ,@after))))
         #-gcl (declare (dynamic-extent ,@(when before `(#',beforef)) ,@(when after `(#',afterf))))
         (call-with-temporary-file
          ,(when before `#',beforef)
          :want-stream-p ,streamp
          :want-pathname-p ,pathnamep
          ,@(when direction `(:direction ,direction))
          ,@(when directory `(:directory ,directory))
          ,@(when prefix `(:prefix ,prefix))
          ,@(when suffix `(:suffix ,suffix))
          ,@(when type `(:type ,type))
          ,@(when keep `(:keep ,keep))
          ,@(when after `(:after #',afterf))
          ,@(when element-type `(:element-type ,element-type))
          ,@(when external-format `(:external-format ,external-format))))))

  (defun get-temporary-file (&key directory prefix suffix type)
    (with-temporary-file (:pathname pn :keep t
                          :directory directory :prefix prefix :suffix suffix :type type)
      pn))

  ;; Temporary pathnames in simple cases where no contention is assumed
  (defun add-pathname-suffix (pathname suffix &rest keys)
    "Add a SUFFIX to the name of a PATHNAME, return a new pathname.
Further KEYS can be passed to MAKE-PATHNAME."
    (apply 'make-pathname :name (strcat (pathname-name pathname) suffix)
                          :defaults pathname keys))

  (defun tmpize-pathname (x)
    "Return a new pathname modified from X by adding a trivial random suffix.
A new empty file with said temporary pathname is created, to ensure there is no
clash with any concurrent process attempting the same thing."
    (let* ((px (ensure-pathname x :ensure-physical t))
           (prefix (if-let (n (pathname-name px)) (strcat n "-tmp") "tmp"))
           (directory (pathname-directory-pathname px)))
      (get-temporary-file :directory directory :prefix prefix :type (pathname-type px))))

  (defun call-with-staging-pathname (pathname fun)
    "Calls FUN with a staging pathname, and atomically
renames the staging pathname to the PATHNAME in the end.
NB: this protects only against failure of the program, not against concurrent attempts.
For the latter case, we ought pick a random suffix and atomically open it."
    (let* ((pathname (pathname pathname))
           (staging (tmpize-pathname pathname)))
      (unwind-protect
           (multiple-value-prog1
               (funcall fun staging)
             (rename-file-overwriting-target staging pathname))
        (delete-file-if-exists staging))))

  (defmacro with-staging-pathname ((pathname-var &optional (pathname-value pathname-var)) &body body)
    "Trivial syntax wrapper for CALL-WITH-STAGING-PATHNAME"
    `(call-with-staging-pathname ,pathname-value #'(lambda (,pathname-var) ,@body))))

(with-upgradability ()
  (defun file-stream-p (stream)
    (typep stream 'file-stream))
  (defun file-or-synonym-stream-p (stream)
    (or (file-stream-p stream)
        (and (typep stream 'synonym-stream)
             (file-or-synonym-stream-p
              (symbol-value (synonym-stream-symbol stream)))))))
;;;; -------------------------------------------------------------------------
;;;; Starting, Stopping, Dumping a Lisp image

(uiop/package:define-package :uiop/image
  (:use :uiop/common-lisp :uiop/package :uiop/utility :uiop/pathname :uiop/stream :uiop/os)
  (:export
   #:*image-dumped-p* #:raw-command-line-arguments #:*command-line-arguments*
   #:command-line-arguments #:raw-command-line-arguments #:setup-command-line-arguments #:argv0
   #:*lisp-interaction*
   #:fatal-condition #:fatal-condition-p
   #:handle-fatal-condition
   #:call-with-fatal-condition-handler #:with-fatal-condition-handler
   #:*image-restore-hook* #:*image-prelude* #:*image-entry-point*
   #:*image-postlude* #:*image-dump-hook*
   #:quit #:die #:raw-print-backtrace #:print-backtrace #:print-condition-backtrace
   #:shell-boolean-exit
   #:register-image-restore-hook #:register-image-dump-hook
   #:call-image-restore-hook #:call-image-dump-hook
   #:restore-image #:dump-image #:create-image
))
(in-package :uiop/image)

(with-upgradability ()
  (defvar *lisp-interaction* t
    "Is this an interactive Lisp environment, or is it batch processing?")

  (defvar *command-line-arguments* nil
    "Command-line arguments")

  (defvar *image-dumped-p* nil ; may matter as to how to get to command-line-arguments
    "Is this a dumped image? As a standalone executable?")

  (defvar *image-restore-hook* nil
    "Functions to call (in reverse order) when the image is restored")

  (defvar *image-restored-p* nil
    "Has the image been restored? A boolean, or :in-progress while restoring, :in-regress while dumping")

  (defvar *image-prelude* nil
    "a form to evaluate, or string containing forms to read and evaluate
when the image is restarted, but before the entry point is called.")

  (defvar *image-entry-point* nil
    "a function with which to restart the dumped image when execution is restored from it.")

  (defvar *image-postlude* nil
    "a form to evaluate, or string containing forms to read and evaluate
before the image dump hooks are called and before the image is dumped.")

  (defvar *image-dump-hook* nil
    "Functions to call (in order) when before an image is dumped")

  (deftype fatal-condition ()
    `(and serious-condition #+clozure (not ccl:process-reset))))

;;; Exiting properly or im-
(with-upgradability ()
  (defun quit (&optional (code 0) (finish-output t))
    "Quits from the Lisp world, with the given exit status if provided.
This is designed to abstract away the implementation specific quit forms."
    (when finish-output ;; essential, for ClozureCL, and for standard compliance.
      (finish-outputs))
    #+(or abcl xcl) (ext:quit :status code)
    #+allegro (excl:exit code :quiet t)
    #+(or clasp ecl) (si:quit code)
    #+clisp (ext:quit code)
    #+clozure (ccl:quit code)
    #+cormanlisp (win32:exitprocess code)
    #+(or cmucl scl) (unix:unix-exit code)
    #+gcl (system:quit code)
    #+genera (error "~S: You probably don't want to Halt Genera. (code: ~S)" 'quit code)
    #+lispworks (lispworks:quit :status code :confirm nil :return nil :ignore-errors-p t)
    #+mcl (progn code (ccl:quit)) ;; or should we use FFI to call libc's exit(3) ?
    #+mkcl (mk-ext:quit :exit-code code)
    #+sbcl #.(let ((exit (find-symbol* :exit :sb-ext nil))
                   (quit (find-symbol* :quit :sb-ext nil)))
               (cond
                 (exit `(,exit :code code :abort (not finish-output)))
                 (quit `(,quit :unix-status code :recklessly-p (not finish-output)))))
    #-(or abcl allegro clasp clisp clozure cmucl ecl gcl genera lispworks mcl mkcl sbcl scl xcl)
    (error "~S called with exit code ~S but there's no quitting on this implementation" 'quit code))

  (defun die (code format &rest arguments)
    "Die in error with some error message"
    (with-safe-io-syntax ()
      (ignore-errors
       (format! *stderr* "~&~?~&" format arguments)))
    (quit code))

  (defun raw-print-backtrace (&key (stream *debug-io*) count condition)
    "Print a backtrace, directly accessing the implementation"
    (declare (ignorable stream count condition))
    #+abcl
    (loop :for i :from 0
          :for frame :in (sys:backtrace (or count most-positive-fixnum)) :do
            (safe-format! stream "~&~D: ~A~%" i frame))
    #+allegro
    (let ((*terminal-io* stream)
          (*standard-output* stream)
          (tpl:*zoom-print-circle* *print-circle*)
          (tpl:*zoom-print-level* *print-level*)
          (tpl:*zoom-print-length* *print-length*))
      (tpl:do-command "zoom"
        :from-read-eval-print-loop nil
        :count (or count t)
        :all t))
    #+(or clasp ecl mkcl)
    (let* ((top (si:ihs-top))
           (repeats (if count (min top count) top))
           (backtrace (loop :for ihs :from 0 :below top
                            :collect (list (si::ihs-fun ihs)
                                           (si::ihs-env ihs)))))
      (loop :for i :from 0 :below repeats
            :for frame :in (nreverse backtrace) :do
              (safe-format! stream "~&~D: ~S~%" i frame)))
    #+clisp
    (system::print-backtrace :out stream :limit count)
    #+(or clozure mcl)
    (let ((*debug-io* stream))
      #+clozure (ccl:print-call-history :count count :start-frame-number 1)
      #+mcl (ccl:print-call-history :detailed-p nil)
      (finish-output stream))
    #+(or cmucl scl)
    (let ((debug:*debug-print-level* *print-level*)
          (debug:*debug-print-length* *print-length*))
      (debug:backtrace (or count most-positive-fixnum) stream))
    #+gcl
    (let ((*debug-io* stream))
      (ignore-errors
       (with-safe-io-syntax ()
         (if condition
             (conditions::condition-backtrace condition)
             (system::simple-backtrace)))))
    #+lispworks
    (let ((dbg::*debugger-stack*
            (dbg::grab-stack nil :how-many (or count most-positive-fixnum)))
          (*debug-io* stream)
          (dbg:*debug-print-level* *print-level*)
          (dbg:*debug-print-length* *print-length*))
      (dbg:bug-backtrace nil))
    #+sbcl
    (sb-debug:print-backtrace :stream stream :count (or count most-positive-fixnum))
    #+xcl
    (loop :for i :from 0 :below (or count most-positive-fixnum)
          :for frame :in (extensions:backtrace-as-list) :do
            (safe-format! stream "~&~D: ~S~%" i frame)))

  (defun print-backtrace (&rest keys &key stream count condition)
    "Print a backtrace"
    (declare (ignore stream count condition))
    (with-safe-io-syntax (:package :cl)
      (let ((*print-readably* nil)
            (*print-circle* t)
            (*print-miser-width* 75)
            (*print-length* nil)
            (*print-level* nil)
            (*print-pretty* t))
        (ignore-errors (apply 'raw-print-backtrace keys)))))

  (defun print-condition-backtrace (condition &key (stream *stderr*) count)
    "Print a condition after a backtrace triggered by that condition"
    ;; We print the condition *after* the backtrace,
    ;; for the sake of who sees the backtrace at a terminal.
    ;; It is up to the caller to print the condition *before*, with some context.
    (print-backtrace :stream stream :count count :condition condition)
    (when condition
      (safe-format! stream "~&Above backtrace due to this condition:~%~A~&"
                    condition)))

  (defun fatal-condition-p (condition)
    "Is the CONDITION fatal?"
    (typep condition 'fatal-condition))

  (defun handle-fatal-condition (condition)
    "Handle a fatal CONDITION:
depending on whether *LISP-INTERACTION* is set, enter debugger or die"
    (cond
      (*lisp-interaction*
       (invoke-debugger condition))
      (t
       (safe-format! *stderr* "~&Fatal condition:~%~A~%" condition)
       (print-condition-backtrace condition :stream *stderr*)
       (die 99 "~A" condition))))

  (defun call-with-fatal-condition-handler (thunk)
    "Call THUNK in a context where fatal conditions are appropriately handled"
    (handler-bind ((fatal-condition #'handle-fatal-condition))
      (funcall thunk)))

  (defmacro with-fatal-condition-handler ((&optional) &body body)
    "Execute BODY in a context where fatal conditions are appropriately handled"
    `(call-with-fatal-condition-handler #'(lambda () ,@body)))

  (defun shell-boolean-exit (x)
    "Quit with a return code that is 0 iff argument X is true"
    (quit (if x 0 1))))


;;; Using image hooks
(with-upgradability ()
  (defun register-image-restore-hook (hook &optional (call-now-p t))
    "Regiter a hook function to be run when restoring a dumped image"
    (register-hook-function '*image-restore-hook* hook call-now-p))

  (defun register-image-dump-hook (hook &optional (call-now-p nil))
    "Register a the hook function to be run before to dump an image"
    (register-hook-function '*image-dump-hook* hook call-now-p))

  (defun call-image-restore-hook ()
    "Call the hook functions registered to be run when restoring a dumped image"
    (call-functions (reverse *image-restore-hook*)))

  (defun call-image-dump-hook ()
    "Call the hook functions registered to be run before to dump an image"
    (call-functions *image-dump-hook*)))


;;; Proper command-line arguments
(with-upgradability ()
  (defun raw-command-line-arguments ()
    "Find what the actual command line for this process was."
    #+abcl ext:*command-line-argument-list* ; Use 1.0.0 or later!
    #+allegro (sys:command-line-arguments) ; default: :application t
    #+(or clasp ecl) (loop :for i :from 0 :below (si:argc) :collect (si:argv i))
    #+clisp (coerce (ext:argv) 'list)
    #+clozure ccl:*command-line-argument-list*
    #+(or cmucl scl) extensions:*command-line-strings*
    #+gcl si:*command-args*
    #+(or genera mcl) nil
    #+lispworks sys:*line-arguments-list*
    #+mkcl (loop :for i :from 0 :below (mkcl:argc) :collect (mkcl:argv i))
    #+sbcl sb-ext:*posix-argv*
    #+xcl system:*argv*
    #-(or abcl allegro clasp clisp clozure cmucl ecl gcl genera lispworks mcl mkcl sbcl scl xcl)
    (not-implemented-error 'raw-command-line-arguments))

  (defun command-line-arguments (&optional (arguments (raw-command-line-arguments)))
    "Extract user arguments from command-line invocation of current process.
Assume the calling conventions of a generated script that uses --
if we are not called from a directly executable image."
    (block nil
      #+abcl (return arguments)
      ;; SBCL and Allegro already separate user arguments from implementation arguments.
      #-(or sbcl allegro)
      (unless (eq *image-dumped-p* :executable)
        ;; LispWorks command-line processing isn't transparent to the user
        ;; unless you create a standalone executable; in that case,
        ;; we rely on cl-launch or some other script to set the arguments for us.
        #+lispworks (return *command-line-arguments*)
        ;; On other implementations, on non-standalone executables,
        ;; we trust cl-launch or whichever script starts the program
        ;; to use -- as a delimiter between implementation arguments and user arguments.
        #-lispworks (setf arguments (member "--" arguments :test 'string-equal)))
      (rest arguments)))

  (defun argv0 ()
    "On supported implementations (most that matter), or when invoked by a proper wrapper script,
return a string that for the name with which the program was invoked, i.e. argv[0] in C.
Otherwise, return NIL."
    (cond
      ((eq *image-dumped-p* :executable) ; yes, this ARGV0 is our argv0 !
       ;; NB: not currently available on ABCL, Corman, Genera, MCL
       (or #+(or allegro clisp clozure cmucl gcl lispworks sbcl scl xcl)
           (first (raw-command-line-arguments))
           #+(or clasp ecl) (si:argv 0) #+mkcl (mkcl:argv 0)))
      (t ;; argv[0] is the name of the interpreter.
       ;; The wrapper script can export __CL_ARGV0. cl-launch does as of 4.0.1.8.
       (getenvp "__CL_ARGV0"))))

  (defun setup-command-line-arguments ()
    (setf *command-line-arguments* (command-line-arguments)))

  (defun restore-image (&key
                          (lisp-interaction *lisp-interaction*)
                          (restore-hook *image-restore-hook*)
                          (prelude *image-prelude*)
                          (entry-point *image-entry-point*)
                          (if-already-restored '(cerror "RUN RESTORE-IMAGE ANYWAY")))
    "From a freshly restarted Lisp image, restore the saved Lisp environment
by setting appropriate variables, running various hooks, and calling any specified entry point.

If the image has already been restored or is already being restored, as per *IMAGE-RESTORED-P*,
call the IF-ALREADY-RESTORED error handler (by default, a continuable error), and do return
immediately to the surrounding restore process if allowed to continue.

Then, comes the restore process itself:
First, call each function in the RESTORE-HOOK,
in the order they were registered with REGISTER-IMAGE-RESTORE-HOOK.
Second, evaluate the prelude, which is often Lisp text that is read,
as per EVAL-INPUT.
Third, call the ENTRY-POINT function, if any is specified, with no argument.

The restore process happens in a WITH-FATAL-CONDITION-HANDLER, so that if LISP-INTERACTION is NIL,
any unhandled error leads to a backtrace and an exit with an error status.
If LISP-INTERACTION is NIL, the process also exits when no error occurs:
if neither restart nor entry function is provided, the program will exit with status 0 (success);
if a function was provided, the program will exit after the function returns (if it returns),
with status 0 if and only if the primary return value of result is generalized boolean true,
and with status 1 if this value is NIL.

If LISP-INTERACTION is true, unhandled errors will take you to the debugger, and the result
of the function will be returned rather than interpreted as a boolean designating an exit code."
    (when *image-restored-p*
      (if if-already-restored
          (call-function if-already-restored "Image already ~:[being ~;~]restored"
                         (eq *image-restored-p* t))
          (return-from restore-image)))
    (with-fatal-condition-handler ()
      (setf *lisp-interaction* lisp-interaction)
      (setf *image-restore-hook* restore-hook)
      (setf *image-prelude* prelude)
      (setf *image-restored-p* :in-progress)
      (call-image-restore-hook)
      (standard-eval-thunk prelude)
      (setf *image-restored-p* t)
      (let ((results (multiple-value-list
                      (if entry-point
                          (call-function entry-point)
                          t))))
        (if lisp-interaction
            (values-list results)
            (shell-boolean-exit (first results)))))))


;;; Dumping an image

(with-upgradability ()
  (defun dump-image (filename &key output-name executable
                                (postlude *image-postlude*)
                                (dump-hook *image-dump-hook*)
                                #+clozure prepend-symbols #+clozure (purify t)
                                #+sbcl compression
                                #+(and sbcl os-windows) application-type)
    "Dump an image of the current Lisp environment at pathname FILENAME, with various options.

First, finalize the image, by evaluating the POSTLUDE as per EVAL-INPUT, then calling each of
 the functions in DUMP-HOOK, in reverse order of registration by REGISTER-DUMP-HOOK.

If EXECUTABLE is true, create an standalone executable program that calls RESTORE-IMAGE on startup.

Pass various implementation-defined options, such as PREPEND-SYMBOLS and PURITY on CCL,
or COMPRESSION on SBCL, and APPLICATION-TYPE on SBCL/Windows."
    ;; Note: at least SBCL saves only global values of variables in the heap image,
    ;; so make sure things you want to dump are NOT just local bindings shadowing the global values.
    (declare (ignorable filename output-name executable))
    (setf *image-dumped-p* (if executable :executable t))
    (setf *image-restored-p* :in-regress)
    (setf *image-postlude* postlude)
    (standard-eval-thunk *image-postlude*)
    (setf *image-dump-hook* dump-hook)
    (call-image-dump-hook)
    (setf *image-restored-p* nil)
    #-(or clisp clozure (and cmucl executable) lispworks sbcl scl)
    (when executable
      (error "Dumping an executable is not supported on this implementation! Aborting."))
    #+allegro
    (progn
      (sys:resize-areas :global-gc t :pack-heap t :sift-old-areas t :tenure t) ; :new 5000000
      (excl:dumplisp :name filename :suppress-allegro-cl-banner t))
    #+clisp
    (apply #'ext:saveinitmem filename
           :quiet t
           :start-package *package*
           :keep-global-handlers nil
           :executable (if executable 0 t) ;--- requires clisp 2.48 or later, still catches --clisp-x
           (when executable
             (list
              ;; :parse-options nil ;--- requires a non-standard patch to clisp.
              :norc t :script nil :init-function #'restore-image)))
    #+clozure
    (flet ((dump (prepend-kernel)
             (ccl:save-application filename :prepend-kernel prepend-kernel :purify purify
                                            :toplevel-function (when executable #'restore-image))))
      ;;(setf ccl::*application* (make-instance 'ccl::lisp-development-system))
      (if prepend-symbols
          (with-temporary-file (:prefix "ccl-symbols-" :direction :output :pathname path)
            (require 'elf)
            (funcall (fdefinition 'ccl::write-elf-symbols-to-file) path)
            (dump path))
          (dump t)))
    #+(or cmucl scl)
    (progn
      (ext:gc :full t)
      (setf ext:*batch-mode* nil)
      (setf ext::*gc-run-time* 0)
      (apply 'ext:save-lisp filename
             :allow-other-keys t ;; hush SCL and old versions of CMUCL
             #+(and cmucl executable) :executable #+(and cmucl executable) t
             (when executable '(:init-function restore-image :process-command-line nil
                                :quiet t :load-init-file nil :site-init nil))))
    #+gcl
    (progn
      (si::set-hole-size 500) (si::gbc nil) (si::sgc-on t)
      (si::save-system filename))
    #+lispworks
    (if executable
        (lispworks:deliver 'restore-image filename 0 :interface nil)
        (hcl:save-image filename :environment nil))
    #+sbcl
    (progn
      ;;(sb-pcl::precompile-random-code-segments) ;--- it is ugly slow at compile-time (!) when the initial core is a big CLOS program. If you want it, do it yourself
      (setf sb-ext::*gc-run-time* 0)
      (apply 'sb-ext:save-lisp-and-die filename
             :executable t ;--- always include the runtime that goes with the core
             (append
              (when compression (list :compression compression))
              ;;--- only save runtime-options for standalone executables
              (when executable (list :toplevel #'restore-image :save-runtime-options t))
              #+(and sbcl os-windows) ;; passing :application-type :gui will disable the console window.
              ;; the default is :console - only works with SBCL 1.1.15 or later.
              (when application-type (list :application-type application-type)))))
    #-(or allegro clisp clozure cmucl gcl lispworks sbcl scl)
    (error "Can't ~S ~S: UIOP doesn't support image dumping with ~A.~%"
           'dump-image filename (nth-value 1 (implementation-type))))

  (defun create-image (destination lisp-object-files
                       &key kind output-name prologue-code epilogue-code extra-object-files
                         (prelude () preludep) (postlude () postludep)
                         (entry-point () entry-point-p) build-args no-uiop)
    (declare (ignorable destination lisp-object-files extra-object-files kind output-name
                        prologue-code epilogue-code prelude preludep postlude postludep
                        entry-point entry-point-p build-args no-uiop))
    "On ECL, create an executable at pathname DESTINATION from the specified OBJECT-FILES and options"
    ;; Is it meaningful to run these in the current environment?
    ;; only if we also track the object files that constitute the "current" image,
    ;; and otherwise simulate dump-image, including quitting at the end.
    #-(or clasp ecl mkcl) (not-implemented-error 'create-image)
    #+(or clasp ecl mkcl)
    (let ((epilogue-code
           (if no-uiop
               epilogue-code
               (let ((forms
                      (append
                       (when epilogue-code `(,epilogue-code))
                       (when postludep `((setf *image-postlude* ',postlude)))
                       (when preludep `((setf *image-prelude* ',prelude)))
                       (when entry-point-p `((setf *image-entry-point* ',entry-point)))
                       (case kind
                         ((:image)
                          (setf kind :program) ;; to ECL, it's just another program.
                          `((setf *image-dumped-p* t)
                            (si::top-level #+(or clasp ecl) t) (quit)))
                         ((:program)
                          `((setf *image-dumped-p* :executable)
                            (shell-boolean-exit
                             (restore-image))))))))
                 (when forms `(progn ,@forms))))))
      #+(or clasp ecl) (check-type kind (member :dll :lib :static-library :program :object :fasl))
      (apply #+clasp 'cmp:builder #+clasp kind
             #+ecl 'c::builder #+ecl kind
             #+mkcl (ecase kind
                      ((:dll) 'compiler::build-shared-library)
                      ((:lib :static-library) 'compiler::build-static-library)
                      ((:fasl) 'compiler::build-bundle)
                      ((:program) 'compiler::build-program))
             (pathname destination)
             #+(or clasp ecl) :lisp-files #+mkcl :lisp-object-files (append lisp-object-files #+(or clasp ecl) extra-object-files)
             #+(or clasp ecl) :init-name #+(or clasp ecl) (c::compute-init-name (or output-name destination) :kind kind)
             (append
              (when prologue-code `(:prologue-code ,prologue-code))
              (when epilogue-code `(:epilogue-code ,epilogue-code))
              #+mkcl (when extra-object-files `(:object-files ,extra-object-files))
              build-args)))))


;;; Some universal image restore hooks
(with-upgradability ()
  (map () 'register-image-restore-hook
       '(setup-stdin setup-stdout setup-stderr
         setup-command-line-arguments setup-temporary-directory
         #+abcl detect-os)))
;;;; -------------------------------------------------------------------------
;;;; Support to build (compile and load) Lisp files

(uiop/package:define-package :uiop/lisp-build
  (:nicknames :asdf/lisp-build) ;; OBSOLETE, used by slime/contrib/swank-asdf.lisp
  (:use :uiop/common-lisp :uiop/package :uiop/utility
   :uiop/os :uiop/pathname :uiop/filesystem :uiop/stream :uiop/image)
  (:export
   ;; Variables
   #:*compile-file-warnings-behaviour* #:*compile-file-failure-behaviour*
   #:*output-translation-function*
   #:*optimization-settings* #:*previous-optimization-settings*
   #:*base-build-directory*
   #:compile-condition #:compile-file-error #:compile-warned-error #:compile-failed-error
   #:compile-warned-warning #:compile-failed-warning
   #:check-lisp-compile-results #:check-lisp-compile-warnings
   #:*uninteresting-conditions* #:*usual-uninteresting-conditions*
   #:*uninteresting-compiler-conditions* #:*uninteresting-loader-conditions*
   ;; Types
   #+sbcl #:sb-grovel-unknown-constant-condition
   ;; Functions & Macros
   #:get-optimization-settings #:proclaim-optimization-settings #:with-optimization-settings
   #:call-with-muffled-compiler-conditions #:with-muffled-compiler-conditions
   #:call-with-muffled-loader-conditions #:with-muffled-loader-conditions
   #:reify-simple-sexp #:unreify-simple-sexp
   #:reify-deferred-warnings #:unreify-deferred-warnings
   #:reset-deferred-warnings #:save-deferred-warnings #:check-deferred-warnings
   #:with-saved-deferred-warnings #:warnings-file-p #:warnings-file-type #:*warnings-file-type*
   #:enable-deferred-warnings-check #:disable-deferred-warnings-check
   #:current-lisp-file-pathname #:load-pathname
   #:lispize-pathname #:compile-file-type #:call-around-hook
   #:compile-file* #:compile-file-pathname* #:*compile-check*
   #:load* #:load-from-string #:combine-fasls)
  (:intern #:defaults #:failure-p #:warnings-p #:s #:y #:body))
(in-package :uiop/lisp-build)

(with-upgradability ()
  (defvar *compile-file-warnings-behaviour*
    (or #+clisp :ignore :warn)
    "How should ASDF react if it encounters a warning when compiling a file?
Valid values are :error, :warn, and :ignore.")

  (defvar *compile-file-failure-behaviour*
    (or #+(or mkcl sbcl) :error #+clisp :ignore :warn)
    "How should ASDF react if it encounters a failure (per the ANSI spec of COMPILE-FILE)
when compiling a file, which includes any non-style-warning warning.
Valid values are :error, :warn, and :ignore.
Note that ASDF ALWAYS raises an error if it fails to create an output file when compiling.")

  (defvar *base-build-directory* nil
    "When set to a non-null value, it should be an absolute directory pathname,
which will serve as the *DEFAULT-PATHNAME-DEFAULTS* around a COMPILE-FILE,
what more while the input-file is shortened if possible to ENOUGH-PATHNAME relative to it.
This can help you produce more deterministic output for FASLs."))

;;; Optimization settings
(with-upgradability ()
  (defvar *optimization-settings* nil
    "Optimization settings to be used by PROCLAIM-OPTIMIZATION-SETTINGS")
  (defvar *previous-optimization-settings* nil
    "Optimization settings saved by PROCLAIM-OPTIMIZATION-SETTINGS")
  (defparameter +optimization-variables+
    ;; TODO: allegro genera corman mcl
    (or #+(or abcl xcl) '(system::*speed* system::*space* system::*safety* system::*debug*)
        #+clisp '() ;; system::*optimize* is a constant hash-table! (with non-constant contents)
        #+clozure '(ccl::*nx-speed* ccl::*nx-space* ccl::*nx-safety*
                    ccl::*nx-debug* ccl::*nx-cspeed*)
        #+(or cmucl scl) '(c::*default-cookie*)
        #+clasp '()
        #+ecl (unless (use-ecl-byte-compiler-p) '(c::*speed* c::*space* c::*safety* c::*debug*))
        #+gcl '(compiler::*speed* compiler::*space* compiler::*compiler-new-safety* compiler::*debug*)
        #+lispworks '(compiler::*optimization-level*)
        #+mkcl '(si::*speed* si::*space* si::*safety* si::*debug*)
        #+sbcl '(sb-c::*policy*)))
  (defun get-optimization-settings ()
    "Get current compiler optimization settings, ready to PROCLAIM again"
    #-(or abcl allegro clasp clisp clozure cmucl ecl lispworks mkcl sbcl scl xcl)
    (warn "~S does not support ~S. Please help me fix that."
          'get-optimization-settings (implementation-type))
    #+(or abcl allegro clasp clisp clozure cmucl ecl lispworks mkcl sbcl scl xcl)
    (let ((settings '(speed space safety debug compilation-speed #+(or cmucl scl) c::brevity)))
      #.`(loop #+(or allegro clozure)
               ,@'(:with info = #+allegro (sys:declaration-information 'optimize)
                   #+clozure (ccl:declaration-information 'optimize nil))
               :for x :in settings
               ,@(or #+(or abcl clasp ecl gcl mkcl xcl) '(:for v :in +optimization-variables+))
               :for y = (or #+(or allegro clozure) (second (assoc x info)) ; normalize order
                            #+clisp (gethash x system::*optimize* 1)
                            #+(or abcl clasp ecl mkcl xcl) (symbol-value v)
                            #+(or cmucl scl) (slot-value c::*default-cookie*
                                                       (case x (compilation-speed 'c::cspeed)
                                                             (otherwise x)))
                            #+lispworks (slot-value compiler::*optimization-level* x)
                            #+sbcl (sb-c::policy-quality sb-c::*policy* x))
               :when y :collect (list x y))))
  (defun proclaim-optimization-settings ()
    "Proclaim the optimization settings in *OPTIMIZATION-SETTINGS*"
    (proclaim `(optimize ,@*optimization-settings*))
    (let ((settings (get-optimization-settings)))
      (unless (equal *previous-optimization-settings* settings)
        (setf *previous-optimization-settings* settings))))
  (defmacro with-optimization-settings ((&optional (settings *optimization-settings*)) &body body)
    #+(or allegro clisp)
    (let ((previous-settings (gensym "PREVIOUS-SETTINGS")))
      `(let ((,previous-settings (get-optimization-settings)))
         ,@(when settings `((proclaim `(optimize ,@,settings))))
         (unwind-protect (progn ,@body)
           (proclaim `(optimize ,@,previous-settings)))))
    #-(or allegro clisp)
    `(let ,(loop :for v :in +optimization-variables+ :collect `(,v ,v))
       ,@(when settings `((proclaim `(optimize ,@,settings))))
       ,@body)))


;;; Condition control
(with-upgradability ()
  #+sbcl
  (progn
    (defun sb-grovel-unknown-constant-condition-p (c)
      "Detect SB-GROVEL unknown-constant conditions on older versions of SBCL"
      (and (typep c 'sb-int:simple-style-warning)
           (string-enclosed-p
            "Couldn't grovel for "
            (simple-condition-format-control c)
            " (unknown to the C compiler).")))
    (deftype sb-grovel-unknown-constant-condition ()
      '(and style-warning (satisfies sb-grovel-unknown-constant-condition-p))))

  (defvar *usual-uninteresting-conditions*
    (append
     ;;#+clozure '(ccl:compiler-warning)
     #+cmucl '("Deleting unreachable code.")
     #+lispworks '("~S being redefined in ~A (previously in ~A)."
                   "~S defined more than once in ~A.") ;; lispworks gets confused by eval-when.
     #+sbcl
     '(sb-c::simple-compiler-note
       "&OPTIONAL and &KEY found in the same lambda list: ~S"
       #+sb-eval sb-kernel:lexical-environment-too-complex
       sb-kernel:undefined-alien-style-warning
       sb-grovel-unknown-constant-condition ; defined above.
       sb-ext:implicit-generic-function-warning ;; Controversial.
       sb-int:package-at-variance
       sb-kernel:uninteresting-redefinition
       ;; BEWARE: the below four are controversial to include here.
       sb-kernel:redefinition-with-defun
       sb-kernel:redefinition-with-defgeneric
       sb-kernel:redefinition-with-defmethod
       sb-kernel::redefinition-with-defmacro) ; not exported by old SBCLs
     '("No generic function ~S present when encountering macroexpansion of defmethod. Assuming it will be an instance of standard-generic-function.")) ;; from closer2mop
    "A suggested value to which to set or bind *uninteresting-conditions*.")

  (defvar *uninteresting-conditions* '()
    "Conditions that may be skipped while compiling or loading Lisp code.")
  (defvar *uninteresting-compiler-conditions* '()
    "Additional conditions that may be skipped while compiling Lisp code.")
  (defvar *uninteresting-loader-conditions*
    (append
     '("Overwriting already existing readtable ~S." ;; from named-readtables
       #(#:finalizers-off-warning :asdf-finalizers)) ;; from asdf-finalizers
     #+clisp '(clos::simple-gf-replacing-method-warning))
    "Additional conditions that may be skipped while loading Lisp code."))

;;;; ----- Filtering conditions while building -----
(with-upgradability ()
  (defun call-with-muffled-compiler-conditions (thunk)
    "Call given THUNK in a context where uninteresting conditions and compiler conditions are muffled"
    (call-with-muffled-conditions
     thunk (append *uninteresting-conditions* *uninteresting-compiler-conditions*)))
  (defmacro with-muffled-compiler-conditions ((&optional) &body body)
    "Trivial syntax for CALL-WITH-MUFFLED-COMPILER-CONDITIONS"
    `(call-with-muffled-compiler-conditions #'(lambda () ,@body)))
  (defun call-with-muffled-loader-conditions (thunk)
    "Call given THUNK in a context where uninteresting conditions and loader conditions are muffled"
    (call-with-muffled-conditions
     thunk (append *uninteresting-conditions* *uninteresting-loader-conditions*)))
  (defmacro with-muffled-loader-conditions ((&optional) &body body)
    "Trivial syntax for CALL-WITH-MUFFLED-LOADER-CONDITIONS"
    `(call-with-muffled-loader-conditions #'(lambda () ,@body))))


;;;; Handle warnings and failures
(with-upgradability ()
  (define-condition compile-condition (condition)
    ((context-format
      :initform nil :reader compile-condition-context-format :initarg :context-format)
     (context-arguments
      :initform nil :reader compile-condition-context-arguments :initarg :context-arguments)
     (description
      :initform nil :reader compile-condition-description :initarg :description))
    (:report (lambda (c s)
               (format s (compatfmt "~@<~A~@[ while ~?~]~@:>")
                       (or (compile-condition-description c) (type-of c))
                       (compile-condition-context-format c)
                       (compile-condition-context-arguments c)))))
  (define-condition compile-file-error (compile-condition error) ())
  (define-condition compile-warned-warning (compile-condition warning) ())
  (define-condition compile-warned-error (compile-condition error) ())
  (define-condition compile-failed-warning (compile-condition warning) ())
  (define-condition compile-failed-error (compile-condition error) ())

  (defun check-lisp-compile-warnings (warnings-p failure-p
                                                  &optional context-format context-arguments)
    "Given the warnings or failures as resulted from COMPILE-FILE or checking deferred warnings,
raise an error or warning as appropriate"
    (when failure-p
      (case *compile-file-failure-behaviour*
        (:warn (warn 'compile-failed-warning
                     :description "Lisp compilation failed"
                     :context-format context-format
                     :context-arguments context-arguments))
        (:error (error 'compile-failed-error
                       :description "Lisp compilation failed"
                       :context-format context-format
                       :context-arguments context-arguments))
        (:ignore nil)))
    (when warnings-p
      (case *compile-file-warnings-behaviour*
        (:warn (warn 'compile-warned-warning
                     :description "Lisp compilation had style-warnings"
                     :context-format context-format
                     :context-arguments context-arguments))
        (:error (error 'compile-warned-error
                       :description "Lisp compilation had style-warnings"
                       :context-format context-format
                       :context-arguments context-arguments))
        (:ignore nil))))

  (defun check-lisp-compile-results (output warnings-p failure-p
                                             &optional context-format context-arguments)
    "Given the results of COMPILE-FILE, raise an error or warning as appropriate"
    (unless output
      (error 'compile-file-error :context-format context-format :context-arguments context-arguments))
    (check-lisp-compile-warnings warnings-p failure-p context-format context-arguments)))


;;;; Deferred-warnings treatment, originally implemented by Douglas Katzman.
;;;
;;; To support an implementation, three functions must be implemented:
;;; reify-deferred-warnings unreify-deferred-warnings reset-deferred-warnings
;;; See their respective docstrings.
(with-upgradability ()
  (defun reify-simple-sexp (sexp)
    "Given a simple SEXP, return a representation of it as a portable SEXP.
Simple means made of symbols, numbers, characters, simple-strings, pathnames, cons cells."
    (etypecase sexp
      (symbol (reify-symbol sexp))
      ((or number character simple-string pathname) sexp)
      (cons (cons (reify-simple-sexp (car sexp)) (reify-simple-sexp (cdr sexp))))
      (simple-vector (vector (mapcar 'reify-simple-sexp (coerce sexp 'list))))))

  (defun unreify-simple-sexp (sexp)
    "Given the portable output of REIFY-SIMPLE-SEXP, return the simple SEXP it represents"
    (etypecase sexp
      ((or symbol number character simple-string pathname) sexp)
      (cons (cons (unreify-simple-sexp (car sexp)) (unreify-simple-sexp (cdr sexp))))
      ((simple-vector 2) (unreify-symbol sexp))
      ((simple-vector 1) (coerce (mapcar 'unreify-simple-sexp (aref sexp 0)) 'vector))))

  #+clozure
  (progn
    (defun reify-source-note (source-note)
      (when source-note
        (with-accessors ((source ccl::source-note-source) (filename ccl:source-note-filename)
                         (start-pos ccl:source-note-start-pos) (end-pos ccl:source-note-end-pos)) source-note
          (declare (ignorable source))
          (list :filename filename :start-pos start-pos :end-pos end-pos
                #|:source (reify-source-note source)|#))))
    (defun unreify-source-note (source-note)
      (when source-note
        (destructuring-bind (&key filename start-pos end-pos source) source-note
          (ccl::make-source-note :filename filename :start-pos start-pos :end-pos end-pos
                                 :source (unreify-source-note source)))))
    (defun unsymbolify-function-name (name)
      (if-let (setfed (gethash name ccl::%setf-function-name-inverses%))
        `(setf ,setfed)
        name))
    (defun symbolify-function-name (name)
      (if (and (consp name) (eq (first name) 'setf))
          (let ((setfed (second name)))
            (gethash setfed ccl::%setf-function-names%))
          name))
    (defun reify-function-name (function-name)
      (let ((name (or (first function-name) ;; defun: extract the name
                      (let ((sec (second function-name)))
                        (or (and (atom sec) sec) ; scoped method: drop scope
                            (first sec)))))) ; method: keep gf name, drop method specializers
        (list name)))
    (defun unreify-function-name (function-name)
      function-name)
    (defun nullify-non-literals (sexp)
      (typecase sexp
        ((or number character simple-string symbol pathname) sexp)
        (cons (cons (nullify-non-literals (car sexp))
                    (nullify-non-literals (cdr sexp))))
        (t nil)))
    (defun reify-deferred-warning (deferred-warning)
      (with-accessors ((warning-type ccl::compiler-warning-warning-type)
                       (args ccl::compiler-warning-args)
                       (source-note ccl:compiler-warning-source-note)
                       (function-name ccl:compiler-warning-function-name)) deferred-warning
        (list :warning-type warning-type :function-name (reify-function-name function-name)
              :source-note (reify-source-note source-note)
              :args (destructuring-bind (fun &rest more)
                        args
                      (cons (unsymbolify-function-name fun)
                            (nullify-non-literals more))))))
    (defun unreify-deferred-warning (reified-deferred-warning)
      (destructuring-bind (&key warning-type function-name source-note args)
          reified-deferred-warning
        (make-condition (or (cdr (ccl::assq warning-type ccl::*compiler-whining-conditions*))
                            'ccl::compiler-warning)
                        :function-name (unreify-function-name function-name)
                        :source-note (unreify-source-note source-note)
                        :warning-type warning-type
                        :args (destructuring-bind (fun . more) args
                                (cons (symbolify-function-name fun) more))))))
  #+(or cmucl scl)
  (defun reify-undefined-warning (warning)
    ;; Extracting undefined-warnings from the compilation-unit
    ;; To be passed through the above reify/unreify link, it must be a "simple-sexp"
    (list*
     (c::undefined-warning-kind warning)
     (c::undefined-warning-name warning)
     (c::undefined-warning-count warning)
     (mapcar
      #'(lambda (frob)
          ;; the lexenv slot can be ignored for reporting purposes
          `(:enclosing-source ,(c::compiler-error-context-enclosing-source frob)
            :source ,(c::compiler-error-context-source frob)
            :original-source ,(c::compiler-error-context-original-source frob)
            :context ,(c::compiler-error-context-context frob)
            :file-name ,(c::compiler-error-context-file-name frob) ; a pathname
            :file-position ,(c::compiler-error-context-file-position frob) ; an integer
            :original-source-path ,(c::compiler-error-context-original-source-path frob)))
      (c::undefined-warning-warnings warning))))

  #+sbcl
  (defun reify-undefined-warning (warning)
    ;; Extracting undefined-warnings from the compilation-unit
    ;; To be passed through the above reify/unreify link, it must be a "simple-sexp"
    (list*
     (sb-c::undefined-warning-kind warning)
     (sb-c::undefined-warning-name warning)
     (sb-c::undefined-warning-count warning)
     (mapcar
      #'(lambda (frob)
          ;; the lexenv slot can be ignored for reporting purposes
          `(:enclosing-source ,(sb-c::compiler-error-context-enclosing-source frob)
            :source ,(sb-c::compiler-error-context-source frob)
            :original-source ,(sb-c::compiler-error-context-original-source frob)
            :context ,(sb-c::compiler-error-context-context frob)
            :file-name ,(sb-c::compiler-error-context-file-name frob) ; a pathname
            :file-position ,(sb-c::compiler-error-context-file-position frob) ; an integer
            :original-source-path ,(sb-c::compiler-error-context-original-source-path frob)))
      (sb-c::undefined-warning-warnings warning))))

  (defun reify-deferred-warnings ()
    "return a portable S-expression, portably readable and writeable in any Common Lisp implementation
using READ within a WITH-SAFE-IO-SYNTAX, that represents the warnings currently deferred by
WITH-COMPILATION-UNIT. One of three functions required for deferred-warnings support in ASDF."
    #+allegro
    (list :functions-defined excl::.functions-defined.
          :functions-called excl::.functions-called.)
    #+clozure
    (mapcar 'reify-deferred-warning
            (if-let (dw ccl::*outstanding-deferred-warnings*)
              (let ((mdw (ccl::ensure-merged-deferred-warnings dw)))
                (ccl::deferred-warnings.warnings mdw))))
    #+(or cmucl scl)
    (when lisp::*in-compilation-unit*
      ;; Try to send nothing through the pipe if nothing needs to be accumulated
      `(,@(when c::*undefined-warnings*
            `((c::*undefined-warnings*
               ,@(mapcar #'reify-undefined-warning c::*undefined-warnings*))))
        ,@(loop :for what :in '(c::*compiler-error-count*
                                c::*compiler-warning-count*
                                c::*compiler-note-count*)
                :for value = (symbol-value what)
                :when (plusp value)
                  :collect `(,what . ,value))))
    #+sbcl
    (when sb-c::*in-compilation-unit*
      ;; Try to send nothing through the pipe if nothing needs to be accumulated
      `(,@(when sb-c::*undefined-warnings*
            `((sb-c::*undefined-warnings*
               ,@(mapcar #'reify-undefined-warning sb-c::*undefined-warnings*))))
        ,@(loop :for what :in '(sb-c::*aborted-compilation-unit-count*
                                sb-c::*compiler-error-count*
                                sb-c::*compiler-warning-count*
                                sb-c::*compiler-style-warning-count*
                                sb-c::*compiler-note-count*)
                :for value = (symbol-value what)
                :when (plusp value)
                  :collect `(,what . ,value)))))

  (defun unreify-deferred-warnings (reified-deferred-warnings)
    "given a S-expression created by REIFY-DEFERRED-WARNINGS, reinstantiate the corresponding
deferred warnings as to be handled at the end of the current WITH-COMPILATION-UNIT.
Handle any warning that has been resolved already,
such as an undefined function that has been defined since.
One of three functions required for deferred-warnings support in ASDF."
    (declare (ignorable reified-deferred-warnings))
    #+allegro
    (destructuring-bind (&key functions-defined functions-called)
        reified-deferred-warnings
      (setf excl::.functions-defined.
            (append functions-defined excl::.functions-defined.)
            excl::.functions-called.
            (append functions-called excl::.functions-called.)))
    #+clozure
    (let ((dw (or ccl::*outstanding-deferred-warnings*
                  (setf ccl::*outstanding-deferred-warnings* (ccl::%defer-warnings t)))))
      (appendf (ccl::deferred-warnings.warnings dw)
               (mapcar 'unreify-deferred-warning reified-deferred-warnings)))
    #+(or cmucl scl)
    (dolist (item reified-deferred-warnings)
      ;; Each item is (symbol . adjustment) where the adjustment depends on the symbol.
      ;; For *undefined-warnings*, the adjustment is a list of initargs.
      ;; For everything else, it's an integer.
      (destructuring-bind (symbol . adjustment) item
        (case symbol
          ((c::*undefined-warnings*)
           (setf c::*undefined-warnings*
                 (nconc (mapcan
                         #'(lambda (stuff)
                             (destructuring-bind (kind name count . rest) stuff
                               (unless (case kind (:function (fboundp name)))
                                 (list
                                  (c::make-undefined-warning
                                   :name name
                                   :kind kind
                                   :count count
                                   :warnings
                                   (mapcar #'(lambda (x)
                                               (apply #'c::make-compiler-error-context x))
                                           rest))))))
                         adjustment)
                        c::*undefined-warnings*)))
          (otherwise
           (set symbol (+ (symbol-value symbol) adjustment))))))
    #+sbcl
    (dolist (item reified-deferred-warnings)
      ;; Each item is (symbol . adjustment) where the adjustment depends on the symbol.
      ;; For *undefined-warnings*, the adjustment is a list of initargs.
      ;; For everything else, it's an integer.
      (destructuring-bind (symbol . adjustment) item
        (case symbol
          ((sb-c::*undefined-warnings*)
           (setf sb-c::*undefined-warnings*
                 (nconc (mapcan
                         #'(lambda (stuff)
                             (destructuring-bind (kind name count . rest) stuff
                               (unless (case kind (:function (fboundp name)))
                                 (list
                                  (sb-c::make-undefined-warning
                                   :name name
                                   :kind kind
                                   :count count
                                   :warnings
                                   (mapcar #'(lambda (x)
                                               (apply #'sb-c::make-compiler-error-context x))
                                           rest))))))
                         adjustment)
                        sb-c::*undefined-warnings*)))
          (otherwise
           (set symbol (+ (symbol-value symbol) adjustment)))))))

  (defun reset-deferred-warnings ()
    "Reset the set of deferred warnings to be handled at the end of the current WITH-COMPILATION-UNIT.
One of three functions required for deferred-warnings support in ASDF."
    #+allegro
    (setf excl::.functions-defined. nil
          excl::.functions-called. nil)
    #+clozure
    (if-let (dw ccl::*outstanding-deferred-warnings*)
      (let ((mdw (ccl::ensure-merged-deferred-warnings dw)))
        (setf (ccl::deferred-warnings.warnings mdw) nil)))
    #+(or cmucl scl)
    (when lisp::*in-compilation-unit*
      (setf c::*undefined-warnings* nil
            c::*compiler-error-count* 0
            c::*compiler-warning-count* 0
            c::*compiler-note-count* 0))
    #+sbcl
    (when sb-c::*in-compilation-unit*
      (setf sb-c::*undefined-warnings* nil
            sb-c::*aborted-compilation-unit-count* 0
            sb-c::*compiler-error-count* 0
            sb-c::*compiler-warning-count* 0
            sb-c::*compiler-style-warning-count* 0
            sb-c::*compiler-note-count* 0)))

  (defun save-deferred-warnings (warnings-file)
    "Save forward reference conditions so they may be issued at a latter time,
possibly in a different process."
    (with-open-file (s warnings-file :direction :output :if-exists :supersede
                       :element-type *default-stream-element-type*
                       :external-format *utf-8-external-format*)
      (with-safe-io-syntax ()
        (write (reify-deferred-warnings) :stream s :pretty t :readably t)
        (terpri s))))

  (defun warnings-file-type (&optional implementation-type)
    "The pathname type for warnings files on given IMPLEMENTATION-TYPE,
where NIL designates the current one"
    (case (or implementation-type *implementation-type*)
      ((:acl :allegro) "allegro-warnings")
      ;;((:clisp) "clisp-warnings")
      ((:cmu :cmucl) "cmucl-warnings")
      ((:sbcl) "sbcl-warnings")
      ((:clozure :ccl) "ccl-warnings")
      ((:scl) "scl-warnings")))

  (defvar *warnings-file-type* nil
    "Pathname type for warnings files, or NIL if disabled")

  (defun enable-deferred-warnings-check ()
    "Enable the saving of deferred warnings"
    (setf *warnings-file-type* (warnings-file-type)))

  (defun disable-deferred-warnings-check ()
    "Disable the saving of deferred warnings"
    (setf *warnings-file-type* nil))

  (defun warnings-file-p (file &optional implementation-type)
    "Is FILE a saved warnings file for the given IMPLEMENTATION-TYPE?
If that given type is NIL, use the currently configured *WARNINGS-FILE-TYPE* instead."
    (if-let (type (if implementation-type
                      (warnings-file-type implementation-type)
                      *warnings-file-type*))
      (equal (pathname-type file) type)))

  (defun check-deferred-warnings (files &optional context-format context-arguments)
    "Given a list of FILES containing deferred warnings saved by CALL-WITH-SAVED-DEFERRED-WARNINGS,
re-intern and raise any warnings that are still meaningful."
    (let ((file-errors nil)
          (failure-p nil)
          (warnings-p nil))
      (handler-bind
          ((warning #'(lambda (c)
                        (setf warnings-p t)
                        (unless (typep c 'style-warning)
                          (setf failure-p t)))))
        (with-compilation-unit (:override t)
          (reset-deferred-warnings)
          (dolist (file files)
            (unreify-deferred-warnings
             (handler-case (safe-read-file-form file)
               (error (c)
                 ;;(delete-file-if-exists file) ;; deleting forces rebuild but prevents debugging
                 (push c file-errors)
                 nil))))))
      (dolist (error file-errors) (error error))
      (check-lisp-compile-warnings
       (or failure-p warnings-p) failure-p context-format context-arguments)))

  #|
  Mini-guide to adding support for deferred warnings on an implementation.

  First, look at what such a warning looks like:

  (describe
  (handler-case
  (and (eval '(lambda () (some-undefined-function))) nil)
  (t (c) c)))

  Then you can grep for the condition type in your compiler sources
  and see how to catch those that have been deferred,
  and/or read, clear and restore the deferred list.

  Also look at
  (macroexpand-1 '(with-compilation-unit () foo))
  |#

  (defun call-with-saved-deferred-warnings (thunk warnings-file &key source-namestring)
    "If WARNINGS-FILE is not nil, record the deferred-warnings around a call to THUNK
and save those warnings to the given file for latter use,
possibly in a different process. Otherwise just call THUNK."
    (declare (ignorable source-namestring))
    (if warnings-file
        (with-compilation-unit (:override t #+sbcl :source-namestring #+sbcl source-namestring)
          (unwind-protect
               (let (#+sbcl (sb-c::*undefined-warnings* nil))
                 (multiple-value-prog1
                     (funcall thunk)
                   (save-deferred-warnings warnings-file)))
            (reset-deferred-warnings)))
        (funcall thunk)))

  (defmacro with-saved-deferred-warnings ((warnings-file &key source-namestring) &body body)
    "Trivial syntax for CALL-WITH-SAVED-DEFERRED-WARNINGS"
    `(call-with-saved-deferred-warnings
      #'(lambda () ,@body) ,warnings-file :source-namestring ,source-namestring)))


;;; from ASDF
(with-upgradability ()
  (defun current-lisp-file-pathname ()
    "Portably return the PATHNAME of the current Lisp source file being compiled or loaded"
    (or *compile-file-pathname* *load-pathname*))

  (defun load-pathname ()
    "Portably return the LOAD-PATHNAME of the current source file or fasl"
    *load-pathname*) ;; magic no longer needed for GCL.

  (defun lispize-pathname (input-file)
    "From a INPUT-FILE pathname, return a corresponding .lisp source pathname"
    (make-pathname :type "lisp" :defaults input-file))

  (defun compile-file-type (&rest keys)
    "pathname TYPE for lisp FASt Loading files"
    (declare (ignorable keys))
    #-(or clasp ecl mkcl) (load-time-value (pathname-type (compile-file-pathname "foo.lisp")))
    #+(or clasp ecl mkcl) (pathname-type (apply 'compile-file-pathname "foo" keys)))

  (defun call-around-hook (hook function)
    "Call a HOOK around the execution of FUNCTION"
    (call-function (or hook 'funcall) function))

  (defun compile-file-pathname* (input-file &rest keys &key output-file &allow-other-keys)
    "Variant of COMPILE-FILE-PATHNAME that works well with COMPILE-FILE*"
    (let* ((keys
             (remove-plist-keys `(#+(or (and allegro (not (version>= 8 2)))) :external-format
                                    ,@(unless output-file '(:output-file))) keys)))
      (if (absolute-pathname-p output-file)
          ;; what cfp should be doing, w/ mp* instead of mp
          (let* ((type (pathname-type (apply 'compile-file-type keys)))
                 (defaults (make-pathname
                            :type type :defaults (merge-pathnames* input-file))))
            (merge-pathnames* output-file defaults))
          (funcall *output-translation-function*
                   (apply 'compile-file-pathname input-file keys)))))

  (defvar *compile-check* nil
    "A hook for user-defined compile-time invariants")

  (defun* (compile-file*) (input-file &rest keys
                                      &key (compile-check *compile-check*) output-file warnings-file
                                      #+clisp lib-file #+(or clasp ecl mkcl) object-file #+sbcl emit-cfasl
                                      &allow-other-keys)
    "This function provides a portable wrapper around COMPILE-FILE.
It ensures that the OUTPUT-FILE value is only returned and
the file only actually created if the compilation was successful,
even though your implementation may not do that. It also checks an optional
user-provided consistency function COMPILE-CHECK to determine success;
it will call this function if not NIL at the end of the compilation
with the arguments sent to COMPILE-FILE*, except with :OUTPUT-FILE TMP-FILE
where TMP-FILE is the name of a temporary output-file.
It also checks two flags (with legacy british spelling from ASDF1),
*COMPILE-FILE-FAILURE-BEHAVIOUR* and *COMPILE-FILE-WARNINGS-BEHAVIOUR*
with appropriate implementation-dependent defaults,
and if a failure (respectively warnings) are reported by COMPILE-FILE,
it will consider that an error unless the respective behaviour flag
is one of :SUCCESS :WARN :IGNORE.
If WARNINGS-FILE is defined, deferred warnings are saved to that file.
On ECL or MKCL, it creates both the linkable object and loadable fasl files.
On implementations that erroneously do not recognize standard keyword arguments,
it will filter them appropriately."
    #+(or clasp ecl)
    (when (and object-file (equal (compile-file-type) (pathname object-file)))
      (format t "Whoa, some funky ASDF upgrade switched ~S calling convention for ~S and ~S~%"
              'compile-file* output-file object-file)
      (rotatef output-file object-file))
    (let* ((keywords (remove-plist-keys
                      `(:output-file :compile-check :warnings-file
                                     #+clisp :lib-file #+(or clasp ecl mkcl) :object-file) keys))
           (output-file
             (or output-file
                 (apply 'compile-file-pathname* input-file :output-file output-file keywords)))
           (physical-output-file (physicalize-pathname output-file))
           #+(or clasp ecl)
           (object-file
             (unless (use-ecl-byte-compiler-p)
               (or object-file
                   #+ecl (compile-file-pathname output-file :type :object)
                   #+clasp (compile-file-pathname output-file :output-type :object))))
           #+mkcl
           (object-file
             (or object-file
                 (compile-file-pathname output-file :fasl-p nil)))
           (tmp-file (tmpize-pathname physical-output-file))
           #+sbcl
           (cfasl-file (etypecase emit-cfasl
                         (null nil)
                         ((eql t) (make-pathname :type "cfasl" :defaults physical-output-file))
                         (string (parse-namestring emit-cfasl))
                         (pathname emit-cfasl)))
           #+sbcl
           (tmp-cfasl (when cfasl-file (make-pathname :type "cfasl" :defaults tmp-file)))
           #+clisp
           (tmp-lib (make-pathname :type "lib" :defaults tmp-file)))
      (multiple-value-bind (output-truename warnings-p failure-p)
          (with-enough-pathname (input-file :defaults *base-build-directory*)
            (with-saved-deferred-warnings (warnings-file :source-namestring (namestring input-file))
              (with-muffled-compiler-conditions ()
                (or #-(or clasp ecl mkcl)
                    (apply 'compile-file input-file :output-file tmp-file
                           #+sbcl (if emit-cfasl (list* :emit-cfasl tmp-cfasl keywords) keywords)
                           #-sbcl keywords)
                    #+ecl (apply 'compile-file input-file :output-file
                                (if object-file
                                    (list* object-file :system-p t keywords)
                                    (list* tmp-file keywords)))
                    #+clasp (apply 'compile-file input-file :output-file
                                  (if object-file
                                      (list* object-file :output-type :object #|:system-p t|# keywords)
                                      (list* tmp-file keywords)))
                    #+mkcl (apply 'compile-file input-file
                                  :output-file object-file :fasl-p nil keywords)))))
        (cond
          ((and output-truename
                (flet ((check-flag (flag behaviour)
                         (or (not flag) (member behaviour '(:success :warn :ignore)))))
                  (and (check-flag failure-p *compile-file-failure-behaviour*)
                       (check-flag warnings-p *compile-file-warnings-behaviour*)))
                (progn
                  #+(or clasp ecl mkcl)
                  (when (and #+(or clasp ecl) object-file)
                    (setf output-truename
                          (compiler::build-fasl tmp-file
                           #+(or clasp ecl) :lisp-files #+mkcl :lisp-object-files (list object-file))))
                  (or (not compile-check)
                      (apply compile-check input-file
                             :output-file output-truename
                             keywords))))
           (delete-file-if-exists physical-output-file)
           (when output-truename
             #+clasp (when output-truename (rename-file-overwriting-target tmp-file output-truename))
             ;; see CLISP bug 677
             #+clisp
             (progn
               (setf tmp-lib (make-pathname :type "lib" :defaults output-truename))
               (unless lib-file (setf lib-file (make-pathname :type "lib" :defaults physical-output-file)))
               (rename-file-overwriting-target tmp-lib lib-file))
             #+sbcl (when cfasl-file (rename-file-overwriting-target tmp-cfasl cfasl-file))
             (rename-file-overwriting-target output-truename physical-output-file)
             (setf output-truename (truename physical-output-file)))
           #+clasp (delete-file-if-exists tmp-file)
           #+clisp (progn (delete-file-if-exists tmp-file) ;; this one works around clisp BUG 677
                          (delete-file-if-exists tmp-lib))) ;; this one is "normal" defensive cleanup
          (t ;; error or failed check
           (delete-file-if-exists output-truename)
           #+clisp (delete-file-if-exists tmp-lib)
           #+sbcl (delete-file-if-exists tmp-cfasl)
           (setf output-truename nil)))
        (values output-truename warnings-p failure-p))))

  (defun load* (x &rest keys &key &allow-other-keys)
    "Portable wrapper around LOAD that properly handles loading from a stream."
    (with-muffled-loader-conditions ()
      (etypecase x
        ((or pathname string #-(or allegro clozure genera) stream #+clozure file-stream)
         (apply 'load x keys))
        ;; Genera can't load from a string-input-stream
        ;; ClozureCL 1.6 can only load from file input stream
        ;; Allegro 5, I don't remember but it must have been broken when I tested.
        #+(or allegro clozure genera)
        (stream ;; make do this way
         (let ((*package* *package*)
               (*readtable* *readtable*)
               (*load-pathname* nil)
               (*load-truename* nil))
           (eval-input x))))))

  (defun load-from-string (string)
    "Portably read and evaluate forms from a STRING."
    (with-input-from-string (s string) (load* s))))

;;; Links FASLs together
(with-upgradability ()
  (defun combine-fasls (inputs output)
    "Combine a list of FASLs INPUTS into a single FASL OUTPUT"
    #-(or abcl allegro clisp clozure cmucl lispworks sbcl scl xcl)
    (error "~A does not support ~S~%inputs ~S~%output  ~S"
           (implementation-type) 'combine-fasls inputs output)
    #+abcl (funcall 'sys::concatenate-fasls inputs output) ; requires ABCL 1.2.0
    #+(or allegro clisp cmucl sbcl scl xcl) (concatenate-files inputs output)
    #+clozure (ccl:fasl-concatenate output inputs :if-exists :supersede)
    #+lispworks
    (let (fasls)
      (unwind-protect
           (progn
             (loop :for i :in inputs
                   :for n :from 1
                   :for f = (add-pathname-suffix
                             output (format nil "-FASL~D" n))
                   :do (copy-file i f)
                       (push f fasls))
             (ignore-errors (lispworks:delete-system :fasls-to-concatenate))
             (eval `(scm:defsystem :fasls-to-concatenate
                      (:default-pathname ,(pathname-directory-pathname output))
                      :members
                      ,(loop :for f :in (reverse fasls)
                             :collect `(,(namestring f) :load-only t))))
             (scm:concatenate-system output :fasls-to-concatenate :force t))
        (loop :for f :in fasls :do (ignore-errors (delete-file f)))
        (ignore-errors (lispworks:delete-system :fasls-to-concatenate))))))
;;;; -------------------------------------------------------------------------
;;;; launch-program - semi-portably spawn asynchronous subprocesses

(uiop/package:define-package :uiop/launch-program
  (:use :uiop/common-lisp :uiop/package :uiop/utility
   :uiop/pathname :uiop/os :uiop/filesystem :uiop/stream)
  (:export
   ;;; Escaping the command invocation madness
   #:easy-sh-character-p #:escape-sh-token #:escape-sh-command
   #:escape-windows-token #:escape-windows-command
   #:escape-shell-token #:escape-shell-command
   #:escape-token #:escape-command

   ;;; launch-program
   #:launch-program
   #:close-streams #:process-alive-p #:terminate-process #:wait-process
   #:process-info-error-output #:process-info-input #:process-info-output #:process-info-pid))
(in-package :uiop/launch-program)

;;;; ----- Escaping strings for the shell -----
(with-upgradability ()
  (defun requires-escaping-p (token &key good-chars bad-chars)
    "Does this token require escaping, given the specification of
either good chars that don't need escaping or bad chars that do need escaping,
as either a recognizing function or a sequence of characters."
    (some
     (cond
       ((and good-chars bad-chars)
        (error "only one of good-chars and bad-chars can be provided"))
       ((typep good-chars 'function)
        (complement good-chars))
       ((typep bad-chars 'function)
        bad-chars)
       ((and good-chars (typep good-chars 'sequence))
        #'(lambda (c) (not (find c good-chars))))
       ((and bad-chars (typep bad-chars 'sequence))
        #'(lambda (c) (find c bad-chars)))
       (t (error "requires-escaping-p: no good-char criterion")))
     token))

  (defun escape-token (token &key stream quote good-chars bad-chars escaper)
    "Call the ESCAPER function on TOKEN string if it needs escaping as per
REQUIRES-ESCAPING-P using GOOD-CHARS and BAD-CHARS, otherwise output TOKEN,
using STREAM as output (or returning result as a string if NIL)"
    (if (requires-escaping-p token :good-chars good-chars :bad-chars bad-chars)
        (with-output (stream)
          (apply escaper token stream (when quote `(:quote ,quote))))
        (output-string token stream)))

  (defun escape-windows-token-within-double-quotes (x &optional s)
    "Escape a string token X within double-quotes
for use within a MS Windows command-line, outputing to S."
    (labels ((issue (c) (princ c s))
             (issue-backslash (n) (loop :repeat n :do (issue #\\))))
      (loop
        :initially (issue #\") :finally (issue #\")
        :with l = (length x) :with i = 0
        :for i+1 = (1+ i) :while (< i l) :do
          (case (char x i)
            ((#\") (issue-backslash 1) (issue #\") (setf i i+1))
            ((#\\)
             (let* ((j (and (< i+1 l) (position-if-not
                                       #'(lambda (c) (eql c #\\)) x :start i+1)))
                    (n (- (or j l) i)))
               (cond
                 ((null j)
                  (issue-backslash (* 2 n)) (setf i l))
                 ((and (< j l) (eql (char x j) #\"))
                  (issue-backslash (1+ (* 2 n))) (issue #\") (setf i (1+ j)))
                 (t
                  (issue-backslash n) (setf i j)))))
            (otherwise
             (issue (char x i)) (setf i i+1))))))

  (defun easy-windows-character-p (x)
    "Is X an \"easy\" character that does not require quoting by the shell?"
    (or (alphanumericp x) (find x "+-_.,@:/=")))

  (defun escape-windows-token (token &optional s)
    "Escape a string TOKEN within double-quotes if needed
for use within a MS Windows command-line, outputing to S."
    (escape-token token :stream s :good-chars #'easy-windows-character-p :quote nil
                        :escaper 'escape-windows-token-within-double-quotes))

  (defun escape-sh-token-within-double-quotes (x s &key (quote t))
    "Escape a string TOKEN within double-quotes
for use within a POSIX Bourne shell, outputing to S;
omit the outer double-quotes if key argument :QUOTE is NIL"
    (when quote (princ #\" s))
    (loop :for c :across x :do
      (when (find c "$`\\\"") (princ #\\ s))
      (princ c s))
    (when quote (princ #\" s)))

  (defun easy-sh-character-p (x)
    "Is X an \"easy\" character that does not require quoting by the shell?"
    (or (alphanumericp x) (find x "+-_.,%@:/=")))

  (defun escape-sh-token (token &optional s)
    "Escape a string TOKEN within double-quotes if needed
for use within a POSIX Bourne shell, outputing to S."
    (escape-token token :stream s :quote #\" :good-chars #'easy-sh-character-p
                        :escaper 'escape-sh-token-within-double-quotes))

  (defun escape-shell-token (token &optional s)
    "Escape a token for the current operating system shell"
    (os-cond
      ((os-unix-p) (escape-sh-token token s))
      ((os-windows-p) (escape-windows-token token s))))

  (defun escape-command (command &optional s
                                  (escaper 'escape-shell-token))
    "Given a COMMAND as a list of tokens, return a string of the
spaced, escaped tokens, using ESCAPER to escape."
    (etypecase command
      (string (output-string command s))
      (list (with-output (s)
              (loop :for first = t :then nil :for token :in command :do
                (unless first (princ #\space s))
                (funcall escaper token s))))))

  (defun escape-windows-command (command &optional s)
    "Escape a list of command-line arguments into a string suitable for parsing
by CommandLineToArgv in MS Windows"
    ;; http://msdn.microsoft.com/en-us/library/bb776391(v=vs.85).aspx
    ;; http://msdn.microsoft.com/en-us/library/17w5ykft(v=vs.85).aspx
    (escape-command command s 'escape-windows-token))

  (defun escape-sh-command (command &optional s)
    "Escape a list of command-line arguments into a string suitable for parsing
by /bin/sh in POSIX"
    (escape-command command s 'escape-sh-token))

  (defun escape-shell-command (command &optional stream)
    "Escape a command for the current operating system's shell"
    (escape-command command stream 'escape-shell-token)))


(with-upgradability ()
  ;;; Internal helpers for run-program
  (defun %normalize-io-specifier (specifier &optional role)
    "Normalizes a portable I/O specifier for LAUNCH-PROGRAM into an implementation-dependent
argument to pass to the internal RUN-PROGRAM"
    (declare (ignorable role))
    (typecase specifier
      (null (or #+(or allegro lispworks) (null-device-pathname)))
      (string (parse-native-namestring specifier))
      (pathname specifier)
      (stream specifier)
      ((eql :stream) :stream)
      ((eql :interactive)
       #+(or allegro lispworks) nil
       #+clisp :terminal
       #+(or abcl clozure cmucl ecl mkcl sbcl scl) t
       #-(or abcl clozure cmucl ecl mkcl sbcl scl allegro lispworks clisp)
       (not-implemented-error :interactive-output
                              "On this lisp implementation, cannot interpret ~a value of ~a"
                              specifier role))
      ((eql :output)
       (cond ((eq role :error-output)
              #+(or abcl allegro clozure cmucl ecl lispworks mkcl sbcl scl)
              :output
              #-(or abcl allegro clozure cmucl ecl lispworks mkcl sbcl scl)
              (not-implemented-error :error-output-redirect
                                     "Can't send ~a to ~a on this lisp implementation."
                                     role specifier))
             (t (parameter-error "~S IO specifier invalid for ~S" specifier role))))
      (otherwise
       (parameter-error "Incorrect I/O specifier ~S for ~S"
                        specifier role))))

  (defun %interactivep (input output error-output)
    (member :interactive (list input output error-output)))

  (defun %signal-to-exit-code (signum)
    (+ 128 signum))

  #+mkcl
  (defun %mkcl-signal-to-number (signal)
    (require :mk-unix)
    (symbol-value (find-symbol signal :mk-unix)))

  (defclass process-info ()
    ((process :initform nil)
     (input-stream :initform nil)
     (output-stream :initform nil)
     (bidir-stream :initform nil)
     (error-output-stream :initform nil)
     ;; For backward-compatibility, to maintain the property (zerop
     ;; exit-code) <-> success, an exit in response to a signal is
     ;; encoded as 128+signum.
     (exit-code :initform nil)
     ;; If the platform allows it, distinguish exiting with a code
     ;; >128 from exiting in response to a signal by setting this code
     (signal-code :initform nil)))

;;;---------------------------------------------------------------------------
;;; The following two helper functions take care of handling the IF-EXISTS and
;;; IF-DOES-NOT-EXIST arguments for RUN-PROGRAM. In particular, they process the
;;; :ERROR, :APPEND, and :SUPERSEDE arguments *here*, allowing the master
;;; function to treat input and output files unconditionally for reading and
;;; writing.
;;;---------------------------------------------------------------------------

  (defun %handle-if-exists (file if-exists)
    (when (or (stringp file) (pathnamep file))
      (ecase if-exists
        ((:append :supersede :error)
         (with-open-file (dummy file :direction :output :if-exists if-exists)
           (declare (ignorable dummy)))))))

  (defun %handle-if-does-not-exist (file if-does-not-exist)
    (when (or (stringp file) (pathnamep file))
      (ecase if-does-not-exist
        ((:create :error)
         (with-open-file (dummy file :direction :probe
                                :if-does-not-exist if-does-not-exist)
           (declare (ignorable dummy)))))))

  (defun process-info-error-output (process-info)
    (slot-value process-info 'error-output-stream))
  (defun process-info-input (process-info)
    (or (slot-value process-info 'bidir-stream)
        (slot-value process-info 'input-stream)))
  (defun process-info-output (process-info)
    (or (slot-value process-info 'bidir-stream)
        (slot-value process-info 'output-stream)))

  (defun process-info-pid (process-info)
    (let ((process (slot-value process-info 'process)))
      (declare (ignorable process))
      #+abcl (symbol-call :sys :process-pid process)
      #+allegro process
      #+clozure (ccl:external-process-id process)
      #+ecl (ext:external-process-pid process)
      #+(or cmucl scl) (ext:process-pid process)
      #+lispworks7+ (sys:pipe-pid process)
      #+(and lispworks (not lispworks7+)) process
      #+mkcl (mkcl:process-id process)
      #+sbcl (sb-ext:process-pid process)
      #-(or abcl allegro clozure cmucl ecl mkcl lispworks sbcl scl)
      (not-implemented-error 'process-info-pid)))

  (defun %process-status (process-info)
    (if-let (exit-code (slot-value process-info 'exit-code))
      (return-from %process-status
        (if-let (signal-code (slot-value process-info 'signal-code))
          (values :signaled signal-code)
          (values :exited exit-code))))
    #-(or allegro clozure cmucl ecl lispworks mkcl sbcl scl)
    (not-implemented-error '%process-status)
    (if-let (process (slot-value process-info 'process))
      (multiple-value-bind (status code)
          (progn
            #+allegro (multiple-value-bind (exit-code pid signal)
                          (sys:reap-os-subprocess :pid process :wait nil)
                        (assert pid)
                        (cond ((null exit-code) :running)
                              ((null signal) (values :exited exit-code))
                              (t (values :signaled signal))))
            #+clozure (ccl:external-process-status process)
            #+(or cmucl scl) (let ((status (ext:process-status process)))
                               (values status (if (member status '(:exited :signaled))
                                                  (ext:process-exit-code process))))
            #+ecl (ext:external-process-status process)
            #+lispworks
            ;; a signal is only returned on LispWorks 7+
            (multiple-value-bind (exit-code signal)
                (funcall #+lispworks7+ #'sys:pipe-exit-status
                         #-lispworks7+ #'sys:pid-exit-status
                         process :wait nil)
              (cond ((null exit-code) :running)
                    ((null signal) (values :exited exit-code))
                    (t (values :signaled signal))))
            #+mkcl (let ((status (mk-ext:process-status process))
                         (code (mk-ext:process-exit-code process)))
                     (if (stringp code)
                         (values :signaled (%mkcl-signal-to-number code))
                         (values status code)))
            #+sbcl (let ((status (sb-ext:process-status process)))
                     (values status (if (member status '(:exited :signaled))
                                        (sb-ext:process-exit-code process)))))
        (case status
          (:exited (setf (slot-value process-info 'exit-code) code))
          (:signaled (let ((%code (%signal-to-exit-code code)))
                       (setf (slot-value process-info 'exit-code) %code
                             (slot-value process-info 'signal-code) code))))
        (values status code))))

  (defun process-alive-p (process-info)
    "Check if a process has yet to exit."
    (unless (slot-value process-info 'exit-code)
      #+abcl (sys:process-alive-p (slot-value process-info 'process))
      #+(or cmucl scl) (ext:process-alive-p (slot-value process-info 'process))
      #+sbcl (sb-ext:process-alive-p (slot-value process-info 'process))
      #-(or abcl cmucl sbcl scl) (member (%process-status process-info)
                                         '(:running :sleeping))))

  (defun wait-process (process-info)
    "Wait for the process to terminate, if it is still running.
Otherwise, return immediately. An exit code (a number) will be
returned, with 0 indicating success, and anything else indicating
failure. If the process exits after receiving a signal, the exit code
will be the sum of 128 and the (positive) numeric signal code. A second
value may be returned in this case: the numeric signal code itself.
Any asynchronously spawned process requires this function to be run
before it is garbage-collected in order to free up resources that
might otherwise be irrevocably lost."
    (if-let (exit-code (slot-value process-info 'exit-code))
      (if-let (signal-code (slot-value process-info 'signal-code))
        (values exit-code signal-code)
        exit-code)
      (let ((process (slot-value process-info 'process)))
        #-(or abcl allegro clozure cmucl ecl lispworks mkcl sbcl scl)
        (not-implemented-error 'wait-process)
        (when process
          ;; 1- wait
          #+clozure (ccl::external-process-wait process)
          #+(or cmucl scl) (ext:process-wait process)
          #+sbcl (sb-ext:process-wait process)
          ;; 2- extract result
          (multiple-value-bind (exit-code signal-code)
              (progn
                #+abcl (sys:process-wait process)
                #+allegro (multiple-value-bind (exit-code pid signal)
                              (sys:reap-os-subprocess :pid process :wait t)
                            (assert pid)
                            (values exit-code signal))
                #+clozure (multiple-value-bind (status code)
                              (ccl:external-process-status process)
                            (if (eq status :signaled)
                                (values nil code)
                                code))
                #+(or cmucl scl) (let ((status (ext:process-status process))
                                       (code (ext:process-exit-code process)))
                                   (if (eq status :signaled)
                                       (values nil code)
                                       code))
                #+ecl (multiple-value-bind (status code)
                          (ext:external-process-wait process t)
                        (if (eq status :signaled)
                            (values nil code)
                            code))
                #+lispworks (funcall #+lispworks7+ #'sys:pipe-exit-status
                                     #-lispworks7+ #'sys:pid-exit-status
                                     process :wait t)
                #+mkcl (let ((code (mkcl:join-process process)))
                         (if (stringp code)
                             (values nil (%mkcl-signal-to-number code))
                             code))
                #+sbcl (let ((status (sb-ext:process-status process))
                             (code (sb-ext:process-exit-code process)))
                         (if (eq status :signaled)
                             (values nil code)
                             code)))
            (if signal-code
                (let ((%exit-code (%signal-to-exit-code signal-code)))
                  (setf (slot-value process-info 'exit-code) %exit-code
                        (slot-value process-info 'signal-code) signal-code)
                  (values %exit-code signal-code))
                (progn (setf (slot-value process-info 'exit-code) exit-code)
                       exit-code)))))))

  ;; WARNING: For signals other than SIGTERM and SIGKILL this may not
  ;; do what you expect it to. Sending SIGSTOP to a process spawned
  ;; via LAUNCH-PROGRAM, e.g., will stop the shell /bin/sh that is used
  ;; to run the command (via `sh -c command`) but not the actual
  ;; command.
  #+os-unix
  (defun %posix-send-signal (process-info signal)
    #+allegro (excl.osi:kill (slot-value process-info 'process) signal)
    #+clozure (ccl:signal-external-process (slot-value process-info 'process)
                                           signal :error-if-exited nil)
    #+(or cmucl scl) (ext:process-kill (slot-value process-info 'process) signal)
    #+sbcl (sb-ext:process-kill (slot-value process-info 'process) signal)
    #-(or allegro clozure cmucl sbcl scl)
    (if-let (pid (process-info-pid process-info))
      (symbol-call :uiop :run-program
                   (format nil "kill -~a ~a" signal pid) :ignore-error-status t)))

  ;;; this function never gets called on Windows, but the compiler cannot tell
  ;;; that. [2016/09/25:rpg]
  #+os-windows
  (defun %posix-send-signal (process-info signal)
    (declare (ignore process-info signal))
    (values))

  (defun terminate-process (process-info &key urgent)
    "Cause the process to exit. To that end, the process may or may
not be sent a signal, which it will find harder (or even impossible)
to ignore if URGENT is T. On some platforms, it may also be subject to
race conditions."
    (declare (ignorable urgent))
    #+abcl (sys:process-kill (slot-value process-info 'process))
    ;; On ECL, this will only work on versions later than 2016-09-06,
    ;; but we still want to compile on earlier versions, so we use symbol-call
    #+ecl (symbol-call :ext :terminate-process (slot-value process-info 'process) urgent)
    #+lispworks7+ (sys:pipe-kill-process (slot-value process-info 'process))
    #+mkcl (mk-ext:terminate-process (slot-value process-info 'process)
                                     :force urgent)
    #-(or abcl ecl lispworks7+ mkcl)
    (os-cond
     ((os-unix-p) (%posix-send-signal process-info (if urgent 9 15)))
     ((os-windows-p) (if-let (pid (process-info-pid process-info))
                       (symbol-call :uiop :run-program
                                    (format nil "taskkill ~:[~;/f ~]/pid ~a" urgent pid)
                                    :ignore-error-status t)))
     (t (not-implemented-error 'terminate-process))))

  (defun close-streams (process-info)
    "Close any stream that the process might own. Needs to be run
whenever streams were requested by passing :stream to :input, :output,
or :error-output."
    (dolist (stream
              (cons (slot-value process-info 'error-output-stream)
                    (if-let (bidir-stream (slot-value process-info 'bidir-stream))
                      (list bidir-stream)
                      (list (slot-value process-info 'input-stream)
                            (slot-value process-info 'output-stream)))))
      (when stream (close stream))))

  (defun launch-program (command &rest keys
                         &key
                           input (if-input-does-not-exist :error)
                           output (if-output-exists :supersede)
                           error-output (if-error-output-exists :supersede)
                           (element-type #-clozure *default-stream-element-type*
                                         #+clozure 'character)
                           (external-format *utf-8-external-format*)
                           directory
                           #+allegro separate-streams
                           &allow-other-keys)
    "Launch program specified by COMMAND,
either a list of strings specifying a program and list of arguments,
or a string specifying a shell command (/bin/sh on Unix, CMD.EXE on
Windows) _asynchronously_.

If OUTPUT is a pathname, a string designating a pathname, or NIL (the
default) designating the null device, the file at that path is used as
output.
If it's :INTERACTIVE, output is inherited from the current process;
beware that this may be different from your *STANDARD-OUTPUT*, and
under SLIME will be on your *inferior-lisp* buffer.  If it's T, output
goes to your current *STANDARD-OUTPUT* stream.  If it's :STREAM, a new
stream will be made available that can be accessed via
PROCESS-INFO-OUTPUT and read from. Otherwise, OUTPUT should be a value
that the underlying lisp implementation knows how to handle.

IF-OUTPUT-EXISTS, which is only meaningful if OUTPUT is a string or a
pathname, can take the values :ERROR, :APPEND, and :SUPERSEDE (the
default). The meaning of these values and their effect on the case
where OUTPUT does not exist, is analogous to the IF-EXISTS parameter
to OPEN with :DIRECTION :OUTPUT.

ERROR-OUTPUT is similar to OUTPUT. T designates the *ERROR-OUTPUT*,
:OUTPUT means redirecting the error output to the output stream,
and :STREAM causes a stream to be made available via
PROCESS-INFO-ERROR-OUTPUT.

IF-ERROR-OUTPUT-EXISTS is similar to IF-OUTPUT-EXIST, except that it
affects ERROR-OUTPUT rather than OUTPUT.

INPUT is similar to OUTPUT, except that T designates the
*STANDARD-INPUT* and a stream requested through the :STREAM keyword
would be available through PROCESS-INFO-INPUT.

IF-INPUT-DOES-NOT-EXIST, which is only meaningful if INPUT is a string
or a pathname, can take the values :CREATE and :ERROR (the
default). The meaning of these values is analogous to the
IF-DOES-NOT-EXIST parameter to OPEN with :DIRECTION :INPUT.

ELEMENT-TYPE and EXTERNAL-FORMAT are passed on to your Lisp
implementation, when applicable, for creation of the output stream.

LAUNCH-PROGRAM returns a PROCESS-INFO object."
    #-(or abcl allegro clozure cmucl ecl (and lispworks os-unix) mkcl sbcl scl)
    (progn command keys input output error-output directory element-type external-format
           if-input-does-not-exist if-output-exists if-error-output-exists ;; ignore
           (not-implemented-error 'launch-program))
    #+allegro
    (when (some #'(lambda (stream)
                    (and (streamp stream)
                         (not (file-stream-p stream))))
                (list input output error-output))
      (parameter-error "~S: Streams passed as I/O parameters need to be file streams on this lisp"
                       'launch-program))
    #+(or abcl clisp lispworks)
    (when (some #'streamp (list input output error-output))
      (parameter-error "~S: I/O parameters cannot be foreign streams on this lisp"
                       'launch-program))
    #+clisp
    (unless (eq error-output :interactive)
      (parameter-error "~S: The only admissible value for ~S is ~S on this lisp"
                       'launch-program :error-output :interactive))
    #+ecl
    (when (some #'(lambda (stream)
                    (and (streamp stream)
                         (not (file-or-synonym-stream-p stream))))
                (list input output error-output))
      (parameter-error "~S: Streams passed as I/O parameters need to be (synonymous with) file streams on this lisp"
                       'launch-program))
    #+(or abcl allegro clozure cmucl ecl (and lispworks os-unix) mkcl sbcl scl)
    (nest
     (progn ;; see comments for these functions
       (%handle-if-does-not-exist input if-input-does-not-exist)
       (%handle-if-exists output if-output-exists)
       (%handle-if-exists error-output if-error-output-exists))
     (let ((process-info (make-instance 'process-info))
           (input (%normalize-io-specifier input :input))
           (output (%normalize-io-specifier output :output))
           (error-output (%normalize-io-specifier error-output :error-output))
           #+(and allegro os-windows) (interactive (%interactivep input output error-output))
           (command
            (etypecase command
              #+os-unix (string `("/bin/sh" "-c" ,command))
              #+os-unix (list command)
              #+os-windows
              (string
               ;; NB: We add cmd /c here. Behavior without going through cmd is not well specified
               ;; when the command contains spaces or special characters:
               ;; IIUC, the system will use space as a separator,
               ;; but the C++ argv-decoding libraries won't, and
               ;; you're supposed to use an extra argument to CreateProcess to bridge the gap,
               ;; yet neither allegro nor clisp provide access to that argument.
               #+(or allegro clisp) (strcat "cmd /c " command)
               ;; On ClozureCL for Windows, we assume you are using
               ;; r15398 or later in 1.9 or later,
               ;; so that bug 858 is fixed http://trac.clozure.com/ccl/ticket/858
               ;; On SBCL, we assume the patch from fcae0fd (to be part of SBCL 1.3.13)
               #+(or clozure sbcl) (cons "cmd" (strcat "/c " command))
               ;; NB: On other Windows implementations, this is utterly bogus
               ;; except in the most trivial cases where no quoting is needed.
               ;; Use at your own risk.
               #-(or allegro clisp clozure sbcl)
               (parameter-error "~S doesn't support string commands on Windows on this lisp: ~S"
                                'launch-program command))
              #+os-windows
              (list
               #+allegro (escape-windows-command command)
               #-allegro command)))))
     #+(or abcl (and allegro os-unix) clozure cmucl ecl mkcl sbcl)
     (let ((program (car command))
           #-allegro (arguments (cdr command))))
     #+(and sbcl os-windows)
     (multiple-value-bind (arguments escape-arguments)
         (if (listp arguments)
             (values arguments t)
             (values (list arguments) nil)))
     #-(or allegro mkcl sbcl) (with-current-directory (directory))
     (multiple-value-bind
       #+(or abcl clozure cmucl sbcl scl) (process)
       #+allegro (in-or-io out-or-err err-or-pid pid-or-nil)
       #+ecl (stream code process)
       #+lispworks (io-or-pid err-or-nil #-lispworks7+ pid-or-nil)
       #+mkcl (stream process code)
       #.`(apply
           #+abcl 'sys:run-program
           #+allegro ,@'('excl:run-shell-command
                         #+os-unix (coerce (cons program command) 'vector)
                         #+os-windows command)
           #+clozure 'ccl:run-program
           #+(or cmucl ecl scl) 'ext:run-program
           #+lispworks ,@'('system:run-shell-command `("/usr/bin/env" ,@command)) ; full path needed
           #+mkcl 'mk-ext:run-program
           #+sbcl 'sb-ext:run-program
           #+(or abcl clozure cmucl ecl mkcl sbcl) ,@'(program arguments)
           #+(and sbcl os-windows) ,@'(:escape-arguments escape-arguments)
           :input input :if-input-does-not-exist :error
           :output output :if-output-exists :append
           ,(or #+(or allegro lispworks) :error-output :error) error-output
           ,(or #+(or allegro lispworks) :if-error-output-exists :if-error-exists) :append
           :wait nil :element-type element-type :external-format external-format
           :allow-other-keys t
           #+allegro ,@`(:directory directory
                         #+os-windows ,@'(:show-window (if interactive nil :hide)))
           #+lispworks ,@'(:save-exit-status t)
           #+mkcl ,@'(:directory (native-namestring directory))
           #-sbcl keys ;; on SBCL, don't pass :directory nil but remove it from the keys
           #+sbcl ,@'(:search t (if directory keys (remove-plist-key :directory keys)))))
     (labels ((prop (key value) (setf (slot-value process-info key) value)))
       #+allegro
       (cond
         (separate-streams
          (prop 'process pid-or-nil)
          (when (eq input :stream) (prop 'input-stream in-or-io))
          (when (eq output :stream) (prop 'output-stream out-or-err))
          (when (eq error-output :stream) (prop 'error-stream err-or-pid)))
         (t
          (prop 'process err-or-pid)
          (ecase (+ (if (eq input :stream) 1 0) (if (eq output :stream) 2 0))
            (0)
            (1 (prop 'input-stream in-or-io))
            (2 (prop 'output-stream in-or-io))
            (3 (prop 'bidir-stream in-or-io)))
          (when (eq error-output :stream)
            (prop 'error-stream out-or-err))))
       #+(or abcl clozure cmucl sbcl scl)
       (progn
         (prop 'process process)
         (when (eq input :stream)
           (nest
            (prop 'input-stream)
            #+abcl (symbol-call :sys :process-input)
            #+clozure (ccl:external-process-input-stream)
            #+(or cmucl scl) (ext:process-input)
            #+sbcl (sb-ext:process-input)
            process))
         (when (eq output :stream)
           (nest
            (prop 'output-stream)
            #+abcl (symbol-call :sys :process-output)
            #+clozure (ccl:external-process-output-stream)
            #+(or cmucl scl) (ext:process-output)
            #+sbcl (sb-ext:process-output)
            process))
         (when (eq error-output :stream)
           (nest
            (prop 'error-output-stream)
            #+abcl (symbol-call :sys :process-error)
            #+clozure (ccl:external-process-error-stream)
            #+(or cmucl scl) (ext:process-error)
            #+sbcl (sb-ext:process-error)
            process)))
       #+(or ecl mkcl)
       (let ((mode (+ (if (eq input :stream) 1 0) (if (eq output :stream) 2 0))))
         code ;; ignore
         (unless (zerop mode)
           (prop (case mode (1 'input-stream) (2 'output-stream) (3 'bidir-stream)) stream))
         (prop 'process process))
       #+lispworks
       (let ((mode (+ (if (eq input :stream) 1 0) (if (eq output :stream) 2 0))))
         (cond
           ((or (plusp mode) (eq error-output :stream))
            (prop 'process #+lispworks7+ io-or-pid #-lispworks7+ pid-or-nil)
            (when (plusp mode)
              (prop (ecase mode
                      (1 'input-stream)
                      (2 'output-stream)
                      (3 'bidir-stream)) io-or-pid))
            (when (eq error-output :stream)
              (prop 'error-stream err-or-nil)))
           ;; lispworks6 returns (pid), lispworks7 returns (io err pid) of which we keep io
           (t (prop 'process io-or-pid)))))
     process-info)))

;;;; -------------------------------------------------------------------------
;;;; run-program initially from xcvb-driver.

(uiop/package:define-package :uiop/run-program
  (:nicknames :asdf/run-program) ; OBSOLETE. Used by cl-sane, printv.
  (:use :uiop/common-lisp :uiop/package :uiop/utility :uiop/version
   :uiop/pathname :uiop/os :uiop/filesystem :uiop/stream :uiop/launch-program)
  (:export
   #:run-program
   #:slurp-input-stream #:vomit-output-stream
   #:subprocess-error
   #:subprocess-error-code #:subprocess-error-command #:subprocess-error-process)
  (:import-from :uiop/launch-program
   #:%handle-if-does-not-exist #:%handle-if-exists #:%interactivep
   #:input-stream #:output-stream #:error-output-stream))
(in-package :uiop/run-program)

;;;; Slurping a stream, typically the output of another program
(with-upgradability ()
  (defun call-stream-processor (fun processor stream)
    "Given FUN (typically SLURP-INPUT-STREAM or VOMIT-OUTPUT-STREAM,
a PROCESSOR specification which is either an atom or a list specifying
a processor an keyword arguments, call the specified processor with
the given STREAM as input"
    (if (consp processor)
        (apply fun (first processor) stream (rest processor))
        (funcall fun processor stream)))

  (defgeneric slurp-input-stream (processor input-stream &key)
    (:documentation
     "SLURP-INPUT-STREAM is a generic function with two positional arguments
PROCESSOR and INPUT-STREAM and additional keyword arguments, that consumes (slurps)
the contents of the INPUT-STREAM and processes them according to a method
specified by PROCESSOR.

Built-in methods include the following:
* if PROCESSOR is a function, it is called with the INPUT-STREAM as its argument
* if PROCESSOR is a list, its first element should be a function.  It will be applied to a cons of the
  INPUT-STREAM and the rest of the list.  That is (x . y) will be treated as
    \(APPLY x <stream> y\)
* if PROCESSOR is an output-stream, the contents of INPUT-STREAM is copied to the output-stream,
  per copy-stream-to-stream, with appropriate keyword arguments.
* if PROCESSOR is the symbol CL:STRING or the keyword :STRING, then the contents of INPUT-STREAM
  are returned as a string, as per SLURP-STREAM-STRING.
* if PROCESSOR is the keyword :LINES then the INPUT-STREAM will be handled by SLURP-STREAM-LINES.
* if PROCESSOR is the keyword :LINE then the INPUT-STREAM will be handled by SLURP-STREAM-LINE.
* if PROCESSOR is the keyword :FORMS then the INPUT-STREAM will be handled by SLURP-STREAM-FORMS.
* if PROCESSOR is the keyword :FORM then the INPUT-STREAM will be handled by SLURP-STREAM-FORM.
* if PROCESSOR is T, it is treated the same as *standard-output*. If it is NIL, NIL is returned.

Programmers are encouraged to define their own methods for this generic function."))

  #-genera
  (defmethod slurp-input-stream ((function function) input-stream &key)
    (funcall function input-stream))

  (defmethod slurp-input-stream ((list cons) input-stream &key)
    (apply (first list) input-stream (rest list)))

  #-genera
  (defmethod slurp-input-stream ((output-stream stream) input-stream
                                 &key linewise prefix (element-type 'character) buffer-size)
    (copy-stream-to-stream
     input-stream output-stream
     :linewise linewise :prefix prefix :element-type element-type :buffer-size buffer-size))

  (defmethod slurp-input-stream ((x (eql 'string)) stream &key stripped)
    (slurp-stream-string stream :stripped stripped))

  (defmethod slurp-input-stream ((x (eql :string)) stream &key stripped)
    (slurp-stream-string stream :stripped stripped))

  (defmethod slurp-input-stream ((x (eql :lines)) stream &key count)
    (slurp-stream-lines stream :count count))

  (defmethod slurp-input-stream ((x (eql :line)) stream &key (at 0))
    (slurp-stream-line stream :at at))

  (defmethod slurp-input-stream ((x (eql :forms)) stream &key count)
    (slurp-stream-forms stream :count count))

  (defmethod slurp-input-stream ((x (eql :form)) stream &key (at 0))
    (slurp-stream-form stream :at at))

  (defmethod slurp-input-stream ((x (eql t)) stream &rest keys &key &allow-other-keys)
    (apply 'slurp-input-stream *standard-output* stream keys))

  (defmethod slurp-input-stream ((x null) (stream t) &key)
    nil)

  (defmethod slurp-input-stream ((pathname pathname) input
                                 &key
                                   (element-type *default-stream-element-type*)
                                   (external-format *utf-8-external-format*)
                                   (if-exists :rename-and-delete)
                                   (if-does-not-exist :create)
                                   buffer-size
                                   linewise)
    (with-output-file (output pathname
                              :element-type element-type
                              :external-format external-format
                              :if-exists if-exists
                              :if-does-not-exist if-does-not-exist)
      (copy-stream-to-stream
       input output
       :element-type element-type :buffer-size buffer-size :linewise linewise)))

  (defmethod slurp-input-stream (x stream
                                 &key linewise prefix (element-type 'character) buffer-size)
    (declare (ignorable stream linewise prefix element-type buffer-size))
    (cond
      #+genera
      ((functionp x) (funcall x stream))
      #+genera
      ((output-stream-p x)
       (copy-stream-to-stream
        stream x
        :linewise linewise :prefix prefix :element-type element-type :buffer-size buffer-size))
      (t
       (error "Invalid ~S destination ~S" 'slurp-input-stream x)))))

;;;; Vomiting a stream, typically into the input of another program.
(with-upgradability ()
  (defgeneric vomit-output-stream (processor output-stream &key)
    (:documentation
     "VOMIT-OUTPUT-STREAM is a generic function with two positional arguments
PROCESSOR and OUTPUT-STREAM and additional keyword arguments, that produces (vomits)
some content onto the OUTPUT-STREAM, according to a method specified by PROCESSOR.

Built-in methods include the following:
* if PROCESSOR is a function, it is called with the OUTPUT-STREAM as its argument
* if PROCESSOR is a list, its first element should be a function.
  It will be applied to a cons of the OUTPUT-STREAM and the rest of the list.
  That is (x . y) will be treated as \(APPLY x <stream> y\)
* if PROCESSOR is an input-stream, its contents will be copied the OUTPUT-STREAM,
  per copy-stream-to-stream, with appropriate keyword arguments.
* if PROCESSOR is a string, its contents will be printed to the OUTPUT-STREAM.
* if PROCESSOR is T, it is treated the same as *standard-input*. If it is NIL, nothing is done.

Programmers are encouraged to define their own methods for this generic function."))

  #-genera
  (defmethod vomit-output-stream ((function function) output-stream &key)
    (funcall function output-stream))

  (defmethod vomit-output-stream ((list cons) output-stream &key)
    (apply (first list) output-stream (rest list)))

  #-genera
  (defmethod vomit-output-stream ((input-stream stream) output-stream
                                 &key linewise prefix (element-type 'character) buffer-size)
    (copy-stream-to-stream
     input-stream output-stream
     :linewise linewise :prefix prefix :element-type element-type :buffer-size buffer-size))

  (defmethod vomit-output-stream ((x string) stream &key fresh-line terpri)
    (princ x stream)
    (when fresh-line (fresh-line stream))
    (when terpri (terpri stream))
    (values))

  (defmethod vomit-output-stream ((x (eql t)) stream &rest keys &key &allow-other-keys)
    (apply 'vomit-output-stream *standard-input* stream keys))

  (defmethod vomit-output-stream ((x null) (stream t) &key)
    (values))

  (defmethod vomit-output-stream ((pathname pathname) input
                                 &key
                                   (element-type *default-stream-element-type*)
                                   (external-format *utf-8-external-format*)
                                   (if-exists :rename-and-delete)
                                   (if-does-not-exist :create)
                                   buffer-size
                                   linewise)
    (with-output-file (output pathname
                              :element-type element-type
                              :external-format external-format
                              :if-exists if-exists
                              :if-does-not-exist if-does-not-exist)
      (copy-stream-to-stream
       input output
       :element-type element-type :buffer-size buffer-size :linewise linewise)))

  (defmethod vomit-output-stream (x stream
                                 &key linewise prefix (element-type 'character) buffer-size)
    (declare (ignorable stream linewise prefix element-type buffer-size))
    (cond
      #+genera
      ((functionp x) (funcall x stream))
      #+genera
      ((input-stream-p x)
       (copy-stream-to-stream
        x stream
        :linewise linewise :prefix prefix :element-type element-type :buffer-size buffer-size))
      (t
       (error "Invalid ~S source ~S" 'vomit-output-stream x)))))


;;;; Run-program: synchronously run a program in a subprocess, handling input, output and error-output.
(with-upgradability ()
  (define-condition subprocess-error (error)
    ((code :initform nil :initarg :code :reader subprocess-error-code)
     (command :initform nil :initarg :command :reader subprocess-error-command)
     (process :initform nil :initarg :process :reader subprocess-error-process))
    (:report (lambda (condition stream)
               (format stream "Subprocess ~@[~S~% ~]~@[with command ~S~% ~]exited with error~@[ code ~D~]"
                       (subprocess-error-process condition)
                       (subprocess-error-command condition)
                       (subprocess-error-code condition)))))

  (defun %check-result (exit-code &key command process ignore-error-status)
    (unless ignore-error-status
      (unless (eql exit-code 0)
        (cerror "IGNORE-ERROR-STATUS"
                'subprocess-error :command command :code exit-code :process process)))
    exit-code)

  (defun %active-io-specifier-p (specifier)
    "Determines whether a run-program I/O specifier requires Lisp-side processing
via SLURP-INPUT-STREAM or VOMIT-OUTPUT-STREAM (return T),
or whether it's already taken care of by the implementation's underlying run-program."
    (not (typep specifier '(or null string pathname (member :interactive :output)
                            #+(or cmucl (and sbcl os-unix) scl) (or stream (eql t))
                            #+lispworks file-stream))))

  (defun %run-program (command &rest keys &key &allow-other-keys)
    "DEPRECATED. Use LAUNCH-PROGRAM instead."
    (apply 'launch-program command keys))

  (defun %call-with-program-io (gf tval stream-easy-p fun direction spec activep returner
                                &key
                                  (element-type #-clozure *default-stream-element-type* #+clozure 'character)
                                  (external-format *utf-8-external-format*) &allow-other-keys)
    ;; handle redirection for run-program and system
    ;; SPEC is the specification for the subprocess's input or output or error-output
    ;; TVAL is the value used if the spec is T
    ;; GF is the generic function to call to handle arbitrary values of SPEC
    ;; STREAM-EASY-P is T if we're going to use a RUN-PROGRAM that copies streams in the background
    ;; (it's only meaningful on CMUCL, SBCL, SCL that actually do it)
    ;; DIRECTION is :INPUT, :OUTPUT or :ERROR-OUTPUT for the direction of this io argument
    ;; FUN is a function of the new reduced spec and an activity function to call with a stream
    ;; when the subprocess is active and communicating through that stream.
    ;; ACTIVEP is a boolean true if we will get to run code while the process is running
    ;; ELEMENT-TYPE and EXTERNAL-FORMAT control what kind of temporary file we may open.
    ;; RETURNER is a function called with the value of the activity.
    ;; --- TODO (fare@tunes.org): handle if-output-exists and such when doing it the hard way.
    (declare (ignorable stream-easy-p))
    (let* ((actual-spec (if (eq spec t) tval spec))
           (activity-spec (if (eq actual-spec :output)
                              (ecase direction
                                ((:input :output)
                                 (error "~S not allowed as a ~S ~S spec"
                                        :output 'run-program direction))
                                ((:error-output)
                                 nil))
                              actual-spec)))
      (labels ((activity (stream)
                 (call-function returner (call-stream-processor gf activity-spec stream)))
               (easy-case ()
                 (funcall fun actual-spec nil))
               (hard-case ()
                 (if activep
                     (funcall fun :stream #'activity)
                     (with-temporary-file (:pathname tmp)
                       (ecase direction
                         (:input
                          (with-output-file (s tmp :if-exists :overwrite
                                               :external-format external-format
                                               :element-type element-type)
                            (activity s))
                          (funcall fun tmp nil))
                         ((:output :error-output)
                          (multiple-value-prog1 (funcall fun tmp nil)
                            (with-input-file (s tmp
                                               :external-format external-format
                                               :element-type element-type)
                              (activity s)))))))))
        (typecase activity-spec
          ((or null string pathname (eql :interactive))
           (easy-case))
          #+(or cmucl (and sbcl os-unix) scl) ;; streams are only easy on implementations that try very hard
          (stream
           (if stream-easy-p (easy-case) (hard-case)))
          (t
           (hard-case))))))

  (defmacro place-setter (place)
    (when place
      (let ((value (gensym)))
        `#'(lambda (,value) (setf ,place ,value)))))

  (defmacro with-program-input (((reduced-input-var
                                  &optional (input-activity-var (gensym) iavp))
                                 input-form &key setf stream-easy-p active keys) &body body)
    `(apply '%call-with-program-io 'vomit-output-stream *standard-input* ,stream-easy-p
            #'(lambda (,reduced-input-var ,input-activity-var)
                ,@(unless iavp `((declare (ignore ,input-activity-var))))
                ,@body)
            :input ,input-form ,active (place-setter ,setf) ,keys))

  (defmacro with-program-output (((reduced-output-var
                                  &optional (output-activity-var (gensym) oavp))
                                  output-form &key setf stream-easy-p active keys) &body body)
    `(apply '%call-with-program-io 'slurp-input-stream *standard-output* ,stream-easy-p
            #'(lambda (,reduced-output-var ,output-activity-var)
                ,@(unless oavp `((declare (ignore ,output-activity-var))))
                ,@body)
            :output ,output-form ,active (place-setter ,setf) ,keys))

  (defmacro with-program-error-output (((reduced-error-output-var
                                         &optional (error-output-activity-var (gensym) eoavp))
                                        error-output-form &key setf stream-easy-p active keys)
                                       &body body)
    `(apply '%call-with-program-io 'slurp-input-stream *error-output* ,stream-easy-p
            #'(lambda (,reduced-error-output-var ,error-output-activity-var)
                ,@(unless eoavp `((declare (ignore ,error-output-activity-var))))
                ,@body)
            :error-output ,error-output-form ,active (place-setter ,setf) ,keys))

  (defun %use-launch-program (command &rest keys
                           &key input output error-output ignore-error-status &allow-other-keys)
    ;; helper for RUN-PROGRAM when using LAUNCH-PROGRAM
    #+(or cormanlisp gcl (and lispworks os-windows) mcl xcl)
    (progn
      command keys input output error-output ignore-error-status ;; ignore
      (not-implemented-error '%use-launch-program))
    (when (member :stream (list input output error-output))
      (parameter-error "~S: ~S is not allowed as synchronous I/O redirection argument"
                       'run-program :stream))
    (let* ((active-input-p (%active-io-specifier-p input))
           (active-output-p (%active-io-specifier-p output))
           (active-error-output-p (%active-io-specifier-p error-output))
           (activity
             (cond
               (active-output-p :output)
               (active-input-p :input)
               (active-error-output-p :error-output)
               (t nil)))
           output-result error-output-result exit-code process-info)
      (with-program-output ((reduced-output output-activity)
                            output :keys keys :setf output-result
                            :stream-easy-p t :active (eq activity :output))
        (with-program-error-output ((reduced-error-output error-output-activity)
                                    error-output :keys keys :setf error-output-result
                                    :stream-easy-p t :active (eq activity :error-output))
          (with-program-input ((reduced-input input-activity)
                               input :keys keys
                               :stream-easy-p t :active (eq activity :input))
            (setf process-info
                  (apply 'launch-program command
                         :input reduced-input :output reduced-output
                         :error-output (if (eq error-output :output) :output reduced-error-output)
                         keys))
            (labels ((get-stream (stream-name &optional fallbackp)
                       (or (slot-value process-info stream-name)
                           (when fallbackp
                             (slot-value process-info 'bidir-stream))))
                     (run-activity (activity stream-name &optional fallbackp)
                       (if-let (stream (get-stream stream-name fallbackp))
                         (funcall activity stream)
                         (error 'subprocess-error
                                :code `(:missing ,stream-name)
                                :command command :process process-info))))
              (unwind-protect
                   (ecase activity
                     ((nil))
                     (:input (run-activity input-activity 'input-stream t))
                     (:output (run-activity output-activity 'output-stream t))
                     (:error-output (run-activity error-output-activity 'error-output-stream)))
                (close-streams process-info)
                (setf exit-code (wait-process process-info)))))))
      (%check-result exit-code
                     :command command :process process-info
                     :ignore-error-status ignore-error-status)
      (values output-result error-output-result exit-code)))

  (defun %normalize-system-command (command) ;; helper for %USE-SYSTEM
    (etypecase command
      (string
       (os-cond
        ((os-windows-p)
         #+(or allegro clisp ecl)
         (strcat "cmd" " /c " command)
         #-(or allegro clisp ecl) command)
        (t command)))
      (list (escape-shell-command
             (os-cond
              ((os-unix-p) (cons "exec" command))
              ((os-windows-p)
               #+(or allegro clisp ecl sbcl)
               (list* "cmd" "/c" command)
               #-(or allegro clisp ecl sbcl) command)
              (t command))))))

  (defun %redirected-system-command (command in out err directory) ;; helper for %USE-SYSTEM
    (flet ((redirect (spec operator)
             (let ((pathname
                     (typecase spec
                       (null (null-device-pathname))
                       (string (parse-native-namestring spec))
                       (pathname spec)
                       ((eql :output)
                        (unless (equal operator " 2>>")
                          (parameter-error "~S: only the ~S argument can be ~S"
                                           'run-program :error-output :output))
                        (return-from redirect '(" 2>&1"))))))
               (when pathname
                 (list operator " "
                       (escape-shell-token (native-namestring pathname)))))))
      (let* ((redirections (append (redirect in " <") (redirect out " >>") (redirect err " 2>>")))
             (normalized (%normalize-system-command command))
             (directory (or directory #+(or abcl xcl) (getcwd)))
             (chdir (when directory
                      (let ((dir-arg (escape-shell-token (native-namestring directory))))
                        (os-cond
                         ((os-unix-p) `("cd " ,dir-arg " ; "))
                         ((os-windows-p) `("cd /d " ,dir-arg " & ")))))))
        (reduce/strcat
         (os-cond
          ((os-unix-p) `(,@(when redirections `("exec " ,@redirections " ; ")) ,@chdir ,normalized))
          ((os-windows-p) `(,@chdir ,@redirections " " ,normalized)))))))

  (defun %system (command &rest keys &key directory
                                       input (if-input-does-not-exist :error)
                                       output (if-output-exists :supersede)
                                       error-output (if-error-output-exists :supersede)
                                       &allow-other-keys)
    "A portable abstraction of a low-level call to libc's system()."
    (declare (ignorable keys directory input if-input-does-not-exist output
                        if-output-exists error-output if-error-output-exists))
    #+(or abcl allegro clozure cmucl ecl (and lispworks os-unix) mkcl sbcl scl)
    (let (#+(or abcl ecl mkcl)
            (version (parse-version
                      #-abcl
                      (lisp-implementation-version)
                      #+abcl
                      (second (split-string (implementation-identifier) :separator '(#\-))))))
      (nest
       #+abcl (unless (lexicographic< '< version '(1 4 0)))
       #+ecl (unless (lexicographic<= '< version '(16 0 0)))
       #+mkcl (unless (lexicographic<= '< version '(1 1 9)))
       (return-from %system
         (wait-process
          (apply 'launch-program (%normalize-system-command command) keys)))))
    #+(or abcl clasp clisp cormanlisp ecl gcl genera (and lispworks os-windows) mkcl xcl)
    (let ((%command (%redirected-system-command command input output error-output directory)))
      ;; see comments for these functions
      (%handle-if-does-not-exist input if-input-does-not-exist)
      (%handle-if-exists output if-output-exists)
      (%handle-if-exists error-output if-error-output-exists)
      #+abcl (ext:run-shell-command %command)
      #+(or clasp ecl) (let ((*standard-input* *stdin*)
                             (*standard-output* *stdout*)
                             (*error-output* *stderr*))
                         (ext:system %command))
      #+clisp
      (let ((raw-exit-code
             (or
              #.`(#+os-windows ,@'(ext:run-shell-command %command)
                  #+os-unix ,@'(ext:run-program "/bin/sh" :arguments `("-c" ,%command))
                  :wait t :input :terminal :output :terminal)
              0)))
        (if (minusp raw-exit-code)
            (- 128 raw-exit-code)
            raw-exit-code))
      #+cormanlisp (win32:system %command)
      #+gcl (system:system %command)
      #+genera (not-implemented-error '%system)
      #+(and lispworks os-windows)
      (system:call-system %command :current-directory directory :wait t)
      #+mcl (ccl::with-cstrs ((%%command %command)) (_system %%command))
      #+mkcl (mkcl:system %command)
      #+xcl (system:%run-shell-command %command)))

  (defun %use-system (command &rest keys
                      &key input output error-output ignore-error-status &allow-other-keys)
    ;; helper for RUN-PROGRAM when using %system
    (let (output-result error-output-result exit-code)
      (with-program-output ((reduced-output)
                            output :keys keys :setf output-result)
        (with-program-error-output ((reduced-error-output)
                                    error-output :keys keys :setf error-output-result)
          (with-program-input ((reduced-input) input :keys keys)
            (setf exit-code (apply '%system command
                                   :input reduced-input :output reduced-output
                                   :error-output reduced-error-output keys)))))
      (%check-result exit-code
                     :command command
                     :ignore-error-status ignore-error-status)
      (values output-result error-output-result exit-code)))

  (defun run-program (command &rest keys
                       &key ignore-error-status (force-shell nil force-shell-suppliedp)
                         input (if-input-does-not-exist :error)
                         output (if-output-exists :supersede)
                         error-output (if-error-output-exists :supersede)
                         (element-type #-clozure *default-stream-element-type* #+clozure 'character)
                         (external-format *utf-8-external-format*)
                       &allow-other-keys)
    "Run program specified by COMMAND,
either a list of strings specifying a program and list of arguments,
or a string specifying a shell command (/bin/sh on Unix, CMD.EXE on Windows);
_synchronously_ process its output as specified and return the processing results
when the program and its output processing are complete.

Always call a shell (rather than directly execute the command when possible)
if FORCE-SHELL is specified.  Similarly, never call a shell if FORCE-SHELL is
specified to be NIL.

Signal a continuable SUBPROCESS-ERROR if the process wasn't successful (exit-code 0),
unless IGNORE-ERROR-STATUS is specified.

If OUTPUT is a pathname, a string designating a pathname, or NIL (the default)
designating the null device, the file at that path is used as output.
If it's :INTERACTIVE, output is inherited from the current process;
beware that this may be different from your *STANDARD-OUTPUT*,
and under SLIME will be on your *inferior-lisp* buffer.
If it's T, output goes to your current *STANDARD-OUTPUT* stream.
Otherwise, OUTPUT should be a value that is a suitable first argument to
SLURP-INPUT-STREAM (qv.), or a list of such a value and keyword arguments.
In this case, RUN-PROGRAM will create a temporary stream for the program output;
the program output, in that stream, will be processed by a call to SLURP-INPUT-STREAM,
using OUTPUT as the first argument (or the first element of OUTPUT, and the rest as keywords).
The primary value resulting from that call (or NIL if no call was needed)
will be the first value returned by RUN-PROGRAM.
E.g., using :OUTPUT :STRING will have it return the entire output stream as a string.
And using :OUTPUT '(:STRING :STRIPPED T) will have it return the same string
stripped of any ending newline.

IF-OUTPUT-EXISTS, which is only meaningful if OUTPUT is a string or a
pathname, can take the values :ERROR, :APPEND, and :SUPERSEDE (the
default). The meaning of these values and their effect on the case
where OUTPUT does not exist, is analogous to the IF-EXISTS parameter
to OPEN with :DIRECTION :OUTPUT.

ERROR-OUTPUT is similar to OUTPUT, except that the resulting value is returned
as the second value of RUN-PROGRAM. T designates the *ERROR-OUTPUT*.
Also :OUTPUT means redirecting the error output to the output stream,
in which case NIL is returned.

IF-ERROR-OUTPUT-EXISTS is similar to IF-OUTPUT-EXIST, except that it
affects ERROR-OUTPUT rather than OUTPUT.

INPUT is similar to OUTPUT, except that VOMIT-OUTPUT-STREAM is used,
no value is returned, and T designates the *STANDARD-INPUT*.

IF-INPUT-DOES-NOT-EXIST, which is only meaningful if INPUT is a string
or a pathname, can take the values :CREATE and :ERROR (the
default). The meaning of these values is analogous to the
IF-DOES-NOT-EXIST parameter to OPEN with :DIRECTION :INPUT.

ELEMENT-TYPE and EXTERNAL-FORMAT are passed on
to your Lisp implementation, when applicable, for creation of the output stream.

One and only one of the stream slurping or vomiting may or may not happen
in parallel in parallel with the subprocess,
depending on options and implementation,
and with priority being given to output processing.
Other streams are completely produced or consumed
before or after the subprocess is spawned, using temporary files.

RUN-PROGRAM returns 3 values:
0- the result of the OUTPUT slurping if any, or NIL
1- the result of the ERROR-OUTPUT slurping if any, or NIL
2- either 0 if the subprocess exited with success status,
or an indication of failure via the EXIT-CODE of the process"
    (declare (ignorable input output error-output if-input-does-not-exist if-output-exists
                        if-error-output-exists element-type external-format ignore-error-status))
    #-(or abcl allegro clasp clisp clozure cmucl cormanlisp ecl gcl lispworks mcl mkcl sbcl scl xcl)
    (not-implemented-error 'run-program)
    (apply (if (or force-shell
                   ;; Per doc string, set FORCE-SHELL to T if we get command as a string.
                   ;; But don't override user's specified preference. [2015/06/29:rpg]
                   (and (stringp command)
                        (or (not force-shell-suppliedp)
                            #-(or allegro clisp clozure sbcl) (os-cond ((os-windows-p) t))))
                   #+(or clasp clisp cormanlisp gcl (and lispworks os-windows) mcl xcl) t
                   ;; A race condition in ECL <= 16.0.0 prevents using ext:run-program
                   #+ecl #.(if-let (ver (parse-version (lisp-implementation-version)))
                                   (lexicographic<= '< ver '(16 0 0)))
                   #+(and lispworks os-unix) (%interactivep input output error-output))
               '%use-system '%use-launch-program)
           command keys)))

;;;; ---------------------------------------------------------------------------
;;;; Generic support for configuration files

(uiop/package:define-package :uiop/configuration
  (:recycle :uiop/configuration :asdf/configuration) ;; necessary to upgrade from 2.27.
  (:use :uiop/common-lisp :uiop/utility
   :uiop/os :uiop/pathname :uiop/filesystem :uiop/stream :uiop/image :uiop/lisp-build)
  (:export
   #:user-configuration-directories #:system-configuration-directories ;; implemented in backward-driver
   #:in-first-directory #:in-user-configuration-directory #:in-system-configuration-directory ;; idem
   #:get-folder-path
   #:xdg-data-home #:xdg-config-home #:xdg-data-dirs #:xdg-config-dirs
   #:xdg-cache-home #:xdg-runtime-dir #:system-config-pathnames
   #:filter-pathname-set #:xdg-data-pathnames #:xdg-config-pathnames
   #:find-preferred-file #:xdg-data-pathname #:xdg-config-pathname
   #:validate-configuration-form #:validate-configuration-file #:validate-configuration-directory
   #:configuration-inheritance-directive-p
   #:report-invalid-form #:invalid-configuration #:*ignored-configuration-form* #:*user-cache*
   #:*clear-configuration-hook* #:clear-configuration #:register-clear-configuration-hook
   #:resolve-location #:location-designator-p #:location-function-p #:*here-directory*
   #:resolve-relative-location #:resolve-absolute-location #:upgrade-configuration))
(in-package :uiop/configuration)

(with-upgradability ()
  (define-condition invalid-configuration ()
    ((form :reader condition-form :initarg :form)
     (location :reader condition-location :initarg :location)
     (format :reader condition-format :initarg :format)
     (arguments :reader condition-arguments :initarg :arguments :initform nil))
    (:report (lambda (c s)
               (format s (compatfmt "~@<~? (will be skipped)~@:>")
                       (condition-format c)
                       (list* (condition-form c) (condition-location c)
                              (condition-arguments c))))))

  (defun configuration-inheritance-directive-p (x)
    "Is X a configuration inheritance directive?"
    (let ((kw '(:inherit-configuration :ignore-inherited-configuration)))
      (or (member x kw)
          (and (length=n-p x 1) (member (car x) kw)))))

  (defun report-invalid-form (reporter &rest args)
    "Report an invalid form according to REPORTER and various ARGS"
    (etypecase reporter
      (null
       (apply 'error 'invalid-configuration args))
      (function
       (apply reporter args))
      ((or symbol string)
       (apply 'error reporter args))
      (cons
       (apply 'apply (append reporter args)))))

  (defvar *ignored-configuration-form* nil
    "Have configuration forms been ignored while parsing the configuration?")

  (defun validate-configuration-form (form tag directive-validator
                                            &key location invalid-form-reporter)
    "Validate a configuration FORM. By default it will raise an error if the
FORM is not valid.  Otherwise it will return the validated form.
     Arguments control the behavior:
     The configuration FORM should be of the form (TAG . <rest>)
     Each element of <rest> will be checked by first seeing if it's a configuration inheritance
directive (see CONFIGURATION-INHERITANCE-DIRECTIVE-P) then invoking DIRECTIVE-VALIDATOR
on it.
     In the event of an invalid form, INVALID-FORM-REPORTER will be used to control
reporting (see REPORT-INVALID-FORM) with LOCATION providing information about where
the configuration form appeared."
    (unless (and (consp form) (eq (car form) tag))
      (setf *ignored-configuration-form* t)
      (report-invalid-form invalid-form-reporter :form form :location location)
      (return-from validate-configuration-form nil))
    (loop :with inherit = 0 :with ignore-invalid-p = nil :with x = (list tag)
          :for directive :in (cdr form)
          :when (cond
                  ((configuration-inheritance-directive-p directive)
                   (incf inherit) t)
                  ((eq directive :ignore-invalid-entries)
                   (setf ignore-invalid-p t) t)
                  ((funcall directive-validator directive)
                   t)
                  (ignore-invalid-p
                   nil)
                  (t
                   (setf *ignored-configuration-form* t)
                   (report-invalid-form invalid-form-reporter :form directive :location location)
                   nil))
            :do (push directive x)
          :finally
             (unless (= inherit 1)
               (report-invalid-form invalid-form-reporter
                                    :form form :location location
                                    ;; we throw away the form and location arguments, hence the ~2*
                                    ;; this is necessary because of the report in INVALID-CONFIGURATION
                                    :format (compatfmt "~@<Invalid source registry ~S~@[ in ~S~]. ~
                                                        One and only one of ~S or ~S is required.~@:>")
                                    :arguments '(:inherit-configuration :ignore-inherited-configuration)))
             (return (nreverse x))))

  (defun validate-configuration-file (file validator &key description)
    "Validate a configuration FILE.  The configuration file should have only one s-expression
in it, which will be checked with the VALIDATOR FORM.  DESCRIPTION argument used for error
reporting."
    (let ((forms (read-file-forms file)))
      (unless (length=n-p forms 1)
        (error (compatfmt "~@<One and only one form allowed for ~A. Got: ~3i~_~S~@:>~%")
               description forms))
      (funcall validator (car forms) :location file)))

  (defun validate-configuration-directory (directory tag validator &key invalid-form-reporter)
    "Map the VALIDATOR across the .conf files in DIRECTORY, the TAG will
be applied to the results to yield a configuration form.  Current
values of TAG include :source-registry and :output-translations."
    (let ((files (sort (ignore-errors ;; SORT w/o COPY-LIST is OK: DIRECTORY returns a fresh list
                        (remove-if
                         'hidden-pathname-p
                         (directory* (make-pathname :name *wild* :type "conf" :defaults directory))))
                       #'string< :key #'namestring)))
      `(,tag
        ,@(loop :for file :in files :append
                                    (loop :with ignore-invalid-p = nil
                                          :for form :in (read-file-forms file)
                                          :when (eq form :ignore-invalid-entries)
                                            :do (setf ignore-invalid-p t)
                                          :else
                                            :when (funcall validator form)
                                              :collect form
                                          :else
                                            :when ignore-invalid-p
                                              :do (setf *ignored-configuration-form* t)
                                          :else
                                            :do (report-invalid-form invalid-form-reporter :form form :location file)))
        :inherit-configuration)))

  (defun resolve-relative-location (x &key ensure-directory wilden)
    "Given a designator X for an relative location, resolve it to a pathname."
    (ensure-pathname
     (etypecase x
       (null nil)
       (pathname x)
       (string (parse-unix-namestring
                x :ensure-directory ensure-directory))
       (cons
        (if (null (cdr x))
            (resolve-relative-location
             (car x) :ensure-directory ensure-directory :wilden wilden)
            (let* ((car (resolve-relative-location
                         (car x) :ensure-directory t :wilden nil)))
              (merge-pathnames*
               (resolve-relative-location
                (cdr x) :ensure-directory ensure-directory :wilden wilden)
               car))))
       ((eql :*/) *wild-directory*)
       ((eql :**/) *wild-inferiors*)
       ((eql :*.*.*) *wild-file*)
       ((eql :implementation)
        (parse-unix-namestring
         (implementation-identifier) :ensure-directory t))
       ((eql :implementation-type)
        (parse-unix-namestring
         (string-downcase (implementation-type)) :ensure-directory t))
       ((eql :hostname)
        (parse-unix-namestring (hostname) :ensure-directory t)))
     :wilden (and wilden (not (pathnamep x)) (not (member x '(:*/ :**/ :*.*.*))))
     :want-relative t))

  (defvar *here-directory* nil
    "This special variable is bound to the currect directory during calls to
PROCESS-SOURCE-REGISTRY in order that we be able to interpret the :here
directive.")

  (defvar *user-cache* nil
    "A specification as per RESOLVE-LOCATION of where the user keeps his FASL cache")

  (defun resolve-absolute-location (x &key ensure-directory wilden)
    "Given a designator X for an absolute location, resolve it to a pathname"
    (ensure-pathname
     (etypecase x
       (null nil)
       (pathname x)
       (string
        (let ((p #-mcl (parse-namestring x)
                 #+mcl (probe-posix x)))
          #+mcl (unless p (error "POSIX pathname ~S does not exist" x))
          (if ensure-directory (ensure-directory-pathname p) p)))
       (cons
        (return-from resolve-absolute-location
          (if (null (cdr x))
              (resolve-absolute-location
               (car x) :ensure-directory ensure-directory :wilden wilden)
              (merge-pathnames*
               (resolve-relative-location
                (cdr x) :ensure-directory ensure-directory :wilden wilden)
               (resolve-absolute-location
                (car x) :ensure-directory t :wilden nil)))))
       ((eql :root)
        ;; special magic! we return a relative pathname,
        ;; but what it means to the output-translations is
        ;; "relative to the root of the source pathname's host and device".
        (return-from resolve-absolute-location
          (let ((p (make-pathname :directory '(:relative))))
            (if wilden (wilden p) p))))
       ((eql :home) (user-homedir-pathname))
       ((eql :here) (resolve-absolute-location
                     (or *here-directory* (pathname-directory-pathname (load-pathname)))
                     :ensure-directory t :wilden nil))
       ((eql :user-cache) (resolve-absolute-location
                           *user-cache* :ensure-directory t :wilden nil)))
     :wilden (and wilden (not (pathnamep x)))
     :resolve-symlinks *resolve-symlinks*
     :want-absolute t))

  ;; Try to override declaration in previous versions of ASDF.
  (declaim (ftype (function (t &key (:directory boolean) (:wilden boolean)
                               (:ensure-directory boolean)) t) resolve-location))

  (defun* (resolve-location) (x &key ensure-directory wilden directory)
    "Resolve location designator X into a PATHNAME"
    ;; :directory backward compatibility, until 2014-01-16: accept directory as well as ensure-directory
    (loop* :with dirp = (or directory ensure-directory)
           :with (first . rest) = (if (atom x) (list x) x)
           :with path = (or (resolve-absolute-location
                             first :ensure-directory (and (or dirp rest) t)
                                   :wilden (and wilden (null rest)))
                            (return nil))
           :for (element . morep) :on rest
           :for dir = (and (or morep dirp) t)
           :for wild = (and wilden (not morep))
           :for sub = (merge-pathnames*
                       (resolve-relative-location
                        element :ensure-directory dir :wilden wild)
                       path)
           :do (setf path (if (absolute-pathname-p sub) (resolve-symlinks* sub) sub))
           :finally (return path)))

  (defun location-designator-p (x)
    "Is X a designator for a location?"
    ;; NIL means "skip this entry", or as an output translation, same as translation input.
    ;; T means "any input" for a translation, or as output, same as translation input.
    (flet ((absolute-component-p (c)
             (typep c '(or string pathname
                        (member :root :home :here :user-cache))))
           (relative-component-p (c)
             (typep c '(or string pathname
                        (member :*/ :**/ :*.*.* :implementation :implementation-type)))))
      (or (typep x 'boolean)
          (absolute-component-p x)
          (and (consp x) (absolute-component-p (first x)) (every #'relative-component-p (rest x))))))

  (defun location-function-p (x)
    "Is X the specification of a location function?"
    ;; Location functions are allowed in output translations, and notably used by ABCL for JAR file support.
    (and (length=n-p x 2) (eq (car x) :function)))

  (defvar *clear-configuration-hook* '())

  (defun register-clear-configuration-hook (hook-function &optional call-now-p)
    "Register a function to be called when clearing configuration"
    (register-hook-function '*clear-configuration-hook* hook-function call-now-p))

  (defun clear-configuration ()
    "Call the functions in *CLEAR-CONFIGURATION-HOOK*"
    (call-functions *clear-configuration-hook*))

  (register-image-dump-hook 'clear-configuration)

  (defun upgrade-configuration ()
    "If a previous version of ASDF failed to read some configuration, try again now."
    (when *ignored-configuration-form*
      (clear-configuration)
      (setf *ignored-configuration-form* nil)))


  (defun get-folder-path (folder)
    "Semi-portable implementation of a subset of LispWorks' sys:get-folder-path,
this function tries to locate the Windows FOLDER for one of
:LOCAL-APPDATA, :APPDATA or :COMMON-APPDATA.
     Returns NIL when the folder is not defined (e.g., not on Windows)."
    (or #+(and lispworks os-windows) (sys:get-folder-path folder)
        ;; read-windows-registry HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\Explorer\User Shell Folders\AppData
        (ecase folder
          (:local-appdata (or (getenv-absolute-directory "LOCALAPPDATA")
                              (subpathname* (get-folder-path :appdata) "Local")))
          (:appdata (getenv-absolute-directory "APPDATA"))
          (:common-appdata (or (getenv-absolute-directory "ALLUSERSAPPDATA")
                               (subpathname* (getenv-absolute-directory "ALLUSERSPROFILE") "Application Data/"))))))


  ;; Support for the XDG Base Directory Specification
  (defun xdg-data-home (&rest more)
    "Returns an absolute pathname for the directory containing user-specific data files.
MORE may contain specifications for a subpath relative to this directory: a
subpathname specification and keyword arguments as per RESOLVE-LOCATION \(see
also \"Configuration DSL\"\) in the ASDF manual."
    (resolve-absolute-location
     `(,(or (getenv-absolute-directory "XDG_DATA_HOME")
            (os-cond
             ((os-windows-p) (get-folder-path :local-appdata))
             (t (subpathname (user-homedir-pathname) ".local/share/"))))
       ,more)))

  (defun xdg-config-home (&rest more)
    "Returns a pathname for the directory containing user-specific configuration files.
MORE may contain specifications for a subpath relative to this directory: a
subpathname specification and keyword arguments as per RESOLVE-LOCATION \(see
also \"Configuration DSL\"\) in the ASDF manual."
    (resolve-absolute-location
     `(,(or (getenv-absolute-directory "XDG_CONFIG_HOME")
            (os-cond
             ((os-windows-p) (xdg-data-home "config/"))
             (t (subpathname (user-homedir-pathname) ".config/"))))
       ,more)))

  (defun xdg-data-dirs (&rest more)
    "The preference-ordered set of additional paths to search for data files.
Returns a list of absolute directory pathnames.
MORE may contain specifications for a subpath relative to these directories: a
subpathname specification and keyword arguments as per RESOLVE-LOCATION \(see
also \"Configuration DSL\"\) in the ASDF manual."
    (mapcar #'(lambda (d) (resolve-location `(,d ,more)))
            (or (getenv-absolute-directories "XDG_DATA_DIRS")
                (os-cond
                 ((os-windows-p) (mapcar 'get-folder-path '(:appdata :common-appdata)))
                 (t (mapcar 'parse-unix-namestring '("/usr/local/share/" "/usr/share/")))))))

  (defun xdg-config-dirs (&rest more)
    "The preference-ordered set of additional base paths to search for configuration files.
Returns a list of absolute directory pathnames.
MORE may contain specifications for a subpath relative to these directories:
subpathname specification and keyword arguments as per RESOLVE-LOCATION \(see
also \"Configuration DSL\"\) in the ASDF manual."
    (mapcar #'(lambda (d) (resolve-location `(,d ,more)))
            (or (getenv-absolute-directories "XDG_CONFIG_DIRS")
                (os-cond
                 ((os-windows-p) (xdg-data-dirs "config/"))
                 (t (mapcar 'parse-unix-namestring '("/etc/xdg/")))))))

  (defun xdg-cache-home (&rest more)
    "The base directory relative to which user specific non-essential data files should be stored.
Returns an absolute directory pathname.
MORE may contain specifications for a subpath relative to this directory: a
subpathname specification and keyword arguments as per RESOLVE-LOCATION \(see
also \"Configuration DSL\"\) in the ASDF manual."
    (resolve-absolute-location
     `(,(or (getenv-absolute-directory "XDG_CACHE_HOME")
            (os-cond
             ((os-windows-p) (xdg-data-home "cache/"))
             (t (subpathname* (user-homedir-pathname) ".cache/"))))
       ,more)))

  (defun xdg-runtime-dir (&rest more)
    "Pathname for user-specific non-essential runtime files and other file objects,
such as sockets, named pipes, etc.
Returns an absolute directory pathname.
MORE may contain specifications for a subpath relative to this directory: a
subpathname specification and keyword arguments as per RESOLVE-LOCATION \(see
also \"Configuration DSL\"\) in the ASDF manual."
    ;; The XDG spec says that if not provided by the login system, the application should
    ;; issue a warning and provide a replacement. UIOP is not equipped to do that and returns NIL.
    (resolve-absolute-location `(,(getenv-absolute-directory "XDG_RUNTIME_DIR") ,more)))

  ;;; NOTE: modified the docstring because "system user configuration
  ;;; directories" seems self-contradictory. I'm not sure my wording is right.
  (defun system-config-pathnames (&rest more)
    "Return a list of directories where are stored the system's default user configuration information.
MORE may contain specifications for a subpath relative to these directories: a
subpathname specification and keyword arguments as per RESOLVE-LOCATION \(see
also \"Configuration DSL\"\) in the ASDF manual."
    (declare (ignorable more))
    (os-cond
     ((os-unix-p) (list (resolve-absolute-location `(,(parse-unix-namestring "/etc/") ,more))))))

  (defun filter-pathname-set (dirs)
    "Parse strings as unix namestrings and remove duplicates and non absolute-pathnames in a list."
    (remove-duplicates (remove-if-not #'absolute-pathname-p dirs) :from-end t :test 'equal))

  (defun xdg-data-pathnames (&rest more)
    "Return a list of absolute pathnames for application data directories.  With APP,
returns directory for data for that application, without APP, returns the set of directories
for storing all application configurations.
MORE may contain specifications for a subpath relative to these directories: a
subpathname specification and keyword arguments as per RESOLVE-LOCATION \(see
also \"Configuration DSL\"\) in the ASDF manual."
    (filter-pathname-set
     `(,(xdg-data-home more)
       ,@(xdg-data-dirs more))))

  (defun xdg-config-pathnames (&rest more)
    "Return a list of pathnames for application configuration.
MORE may contain specifications for a subpath relative to these directories: a
subpathname specification and keyword arguments as per RESOLVE-LOCATION \(see
also \"Configuration DSL\"\) in the ASDF manual."
    (filter-pathname-set
     `(,(xdg-config-home more)
       ,@(xdg-config-dirs more))))

  (defun find-preferred-file (files &key (direction :input))
    "Find first file in the list of FILES that exists (for direction :input or :probe)
or just the first one (for direction :output or :io).
    Note that when we say \"file\" here, the files in question may be directories."
    (find-if (ecase direction ((:probe :input) 'probe-file*) ((:output :io) 'identity)) files))

  (defun xdg-data-pathname (&optional more (direction :input))
    (find-preferred-file (xdg-data-pathnames more) :direction direction))

  (defun xdg-config-pathname (&optional more (direction :input))
    (find-preferred-file (xdg-config-pathnames more) :direction direction))

  (defun compute-user-cache ()
    "Compute (and return) the location of the default user-cache for translate-output
objects. Side-effects for cached file location computation."
    (setf *user-cache* (xdg-cache-home "common-lisp" :implementation)))
  (register-image-restore-hook 'compute-user-cache))
;;; -------------------------------------------------------------------------
;;; Hacks for backward-compatibility with older versions of UIOP

(uiop/package:define-package :uiop/backward-driver
  (:recycle :uiop/backward-driver :asdf/backward-driver :uiop)
  (:use :uiop/common-lisp :uiop/package :uiop/utility :uiop/version
   :uiop/pathname :uiop/stream :uiop/os :uiop/image
   :uiop/run-program :uiop/lisp-build :uiop/configuration)
  (:export
   #:coerce-pathname
   #:user-configuration-directories #:system-configuration-directories
   #:in-first-directory #:in-user-configuration-directory #:in-system-configuration-directory
   #:version-compatible-p))
(in-package :uiop/backward-driver)

(eval-when (:compile-toplevel :load-toplevel :execute)
(with-deprecation ((version-deprecation *uiop-version* :style-warning "3.2.0" :warning "3.2.1"))
  ;; Backward compatibility with ASDF 2.000 to 2.26

  ;; For backward-compatibility only, for people using internals
  ;; Reported users in quicklisp 2015-11: hu.dwim.asdf (removed in next release)
  ;; Will be removed after 2015-12.
  (defun coerce-pathname (name &key type defaults)
    "DEPRECATED. Please use UIOP:PARSE-UNIX-NAMESTRING instead."
    (parse-unix-namestring name :type type :defaults defaults))

  ;; Backward compatibility for ASDF 2.27 to 3.1.4
  (defun user-configuration-directories ()
    "Return the current user's list of user configuration directories
for configuring common-lisp.
DEPRECATED. Use UIOP:XDG-CONFIG-PATHNAMES instead."
    (xdg-config-pathnames "common-lisp"))
  (defun system-configuration-directories ()
    "Return the list of system configuration directories for common-lisp.
DEPRECATED. Use UIOP:CONFIG-SYSTEM-PATHNAMES instead."
    (system-config-pathnames "common-lisp"))
  (defun in-first-directory (dirs x &key (direction :input))
    "Finds the first appropriate file named X in the list of DIRS for I/O
in DIRECTION \(which may be :INPUT, :OUTPUT, :IO, or :PROBE).
If direction is :INPUT or :PROBE, will return the first extant file named
X in one of the DIRS.
If direction is :OUTPUT or :IO, will simply return the file named X in the
first element of DIRS that exists. DEPRECATED."
    (find-preferred-file
     (mapcar #'(lambda (dir) (subpathname (ensure-directory-pathname dir) x)) dirs)
     :direction direction))
  (defun in-user-configuration-directory (x &key (direction :input))
    "Return the file named X in the user configuration directory for common-lisp.
DEPRECATED."
    (xdg-config-pathname `("common-lisp" ,x) direction))
  (defun in-system-configuration-directory (x &key (direction :input))
    "Return the pathname for the file named X under the system configuration directory
for common-lisp. DEPRECATED."
    (find-preferred-file (system-config-pathnames "common-lisp" x) :direction direction))


  ;; Backward compatibility with ASDF 1 to ASDF 2.32

  (defun version-compatible-p (provided-version required-version)
    "Is the provided version a compatible substitution for the required-version?
If major versions differ, it's not compatible.
If they are equal, then any later version is compatible,
with later being determined by a lexicographical comparison of minor numbers.
DEPRECATED."
    (let ((x (parse-version provided-version nil))
          (y (parse-version required-version nil)))
      (and x y (= (car x) (car y)) (lexicographic<= '< (cdr y) (cdr x)))))))

;;;; ---------------------------------------------------------------------------
;;;; Re-export all the functionality in UIOP

(uiop/package:define-package :uiop/driver
  (:nicknames :uiop :asdf/driver) ;; asdf/driver is obsolete (uiop isn't);
  ;; but asdf/driver is still used by swap-bytes, static-vectors.
  (:use :uiop/common-lisp)
   ;; NB: not reexporting uiop/common-lisp
   ;; which include all of CL with compatibility modifications on select platforms,
   ;; that could cause potential conflicts for packages that would :use (cl uiop)
   ;; or :use (closer-common-lisp uiop), etc.
  (:use-reexport
   :uiop/package :uiop/utility :uiop/version
   :uiop/os :uiop/pathname :uiop/filesystem :uiop/stream :uiop/image
   :uiop/launch-program :uiop/run-program
   :uiop/lisp-build :uiop/configuration :uiop/backward-driver))

;; Provide both lowercase and uppercase, to satisfy more people.
(provide "uiop") (provide "UIOP")
;;;; -------------------------------------------------------------------------
;;;; Handle upgrade as forward- and backward-compatibly as possible
;; See https://bugs.launchpad.net/asdf/+bug/485687

(uiop/package:define-package :asdf/upgrade
  (:recycle :asdf/upgrade :asdf)
  (:use :uiop/common-lisp :uiop)
  (:export
   #:asdf-version #:*previous-asdf-versions* #:*asdf-version*
   #:asdf-message #:*verbose-out*
   #:upgrading-p #:when-upgrading #:upgrade-asdf #:defparameter*
   #:*post-upgrade-cleanup-hook* #:cleanup-upgraded-asdf
   ;; There will be no symbol left behind!
   #:with-asdf-deprecation
   #:intern*)
  (:import-from :uiop/package #:intern* #:find-symbol*))
(in-package :asdf/upgrade)

;;; Special magic to detect if this is an upgrade

(with-upgradability ()
  (defun asdf-version ()
    "Exported interface to the version of ASDF currently installed. A string.
You can compare this string with e.g.: (ASDF:VERSION-SATISFIES (ASDF:ASDF-VERSION) \"3.4.5.67\")."
    (when (find-package :asdf)
      (or (symbol-value (find-symbol (string :*asdf-version*) :asdf))
          (let* ((revsym (find-symbol (string :*asdf-revision*) :asdf))
                 (rev (and revsym (boundp revsym) (symbol-value revsym))))
            (etypecase rev
              (string rev)
              (cons (format nil "~{~D~^.~}" rev))
              (null "1.0"))))))
  ;; This (private) variable contains a list of versions of previously loaded variants of ASDF,
  ;; from which ASDF was upgraded.
  ;; Important: define *p-a-v* /before/ *a-v* so that they initialize correctly.
  (defvar *previous-asdf-versions*
    (let ((previous (asdf-version)))
      (when previous
        ;; Punt on upgrade from ASDF1 or ASDF2, by renaming (or deleting) the package.
        (when (version< previous "2.27") ;; 2.27 is the first to have the :asdf3 feature.
          (let ((away (format nil "~A-~A" :asdf previous)))
            (rename-package :asdf away)
            (when *load-verbose*
              (format t "~&; Renamed old ~A package away to ~A~%" :asdf away))))
        (list previous))))
  ;; This public variable will be bound shortly to the currently loaded version of ASDF.
  (defvar *asdf-version* nil)
  ;; We need to clear systems from versions older than the one in this (private) parameter.
  ;; The latest incompatible defclass is 2.32.13 renaming a slot in component;
  ;; the latest incompatible gf change is in 3.1.7.20 (see redefined-functions below).
  (defparameter *oldest-forward-compatible-asdf-version* "3.1.7.20")
  ;; Semi-private variable: a designator for a stream on which to output ASDF progress messages
  (defvar *verbose-out* nil)
  ;; Private function by which ASDF outputs progress messages and warning messages:
  (defun asdf-message (format-string &rest format-args)
    (when *verbose-out* (apply 'format *verbose-out* format-string format-args)))
  ;; Private hook for functions to run after ASDF has upgraded itself from an older variant:
  (defvar *post-upgrade-cleanup-hook* ())
  ;; Private function to detect whether the current upgrade counts as an incompatible
  ;; data schema upgrade implying the need to drop data.
  (defun upgrading-p (&optional (oldest-compatible-version *oldest-forward-compatible-asdf-version*))
    (and *previous-asdf-versions*
         (version< (first *previous-asdf-versions*) oldest-compatible-version)))
  ;; Private variant of defparameter that works in presence of incompatible upgrades:
  ;; behaves like defvar in a compatible upgrade (e.g. reloading system after simple code change),
  ;; but behaves like defparameter if in presence of an incompatible upgrade.
  (defmacro defparameter* (var value &optional docstring (version *oldest-forward-compatible-asdf-version*))
    (let* ((name (string-trim "*" var))
           (valfun (intern (format nil "%~A-~A-~A" :compute name :value))))
      `(progn
         (defun ,valfun () ,value)
         (defvar ,var (,valfun) ,@(ensure-list docstring))
         (when (upgrading-p ,version)
           (setf ,var (,valfun))))))
  ;; Private macro to declare sections of code that are only compiled and run when upgrading.
  ;; The use of eval portably ensures that the code will not have adverse compile-time side-effects,
  ;; whereas the use of handler-bind portably ensures that it will not issue warnings when it runs.
  (defmacro when-upgrading ((&key (version *oldest-forward-compatible-asdf-version*)
                               (upgrading-p `(upgrading-p ,version)) when) &body body)
    "A wrapper macro for code that should only be run when upgrading a
previously-loaded version of ASDF."
    `(with-upgradability ()
       (when (and ,upgrading-p ,@(when when `(,when)))
         (handler-bind ((style-warning #'muffle-warning))
           (eval '(progn ,@body))))))
  ;; Only now can we safely update the version.
  (let* (;; For bug reporting sanity, please always bump this version when you modify this file.
         ;; Please also modify asdf.asd to reflect this change. make bump-version v=3.4.5.67.8
         ;; can help you do these changes in synch (look at the source for documentation).
         ;; Relying on its automation, the version is now redundantly present on top of asdf.lisp.
         ;; "3.4" would be the general branch for major version 3, minor version 4.
         ;; "3.4.5" would be an official release in the 3.4 branch.
         ;; "3.4.5.67" would be a development version in the official branch, on top of 3.4.5.
         ;; "3.4.5.0.8" would be your eighth local modification of official release 3.4.5
         ;; "3.4.5.67.8" would be your eighth local modification of development version 3.4.5.67
         (asdf-version "3.2.0")
         (existing-version (asdf-version)))
    (setf *asdf-version* asdf-version)
    (when (and existing-version (not (equal asdf-version existing-version)))
      (push existing-version *previous-asdf-versions*)
      (when (or *verbose-out* *load-verbose*)
        (format (or *verbose-out* *trace-output*)
                (compatfmt "~&~@<; ~@;Upgrading ASDF ~@[from version ~A ~]to version ~A~@:>~%")
                existing-version asdf-version)))))

;;; Upon upgrade, specially frob some functions and classes that are being incompatibly redefined
(when-upgrading ()
  (let ((redefined-functions ;; List of functions that changes incompatibly since 2.27:
         ;; gf signature changed (should NOT happen), defun that became a generic function,
         ;; method removed that will mess up with new ones (especially :around :before :after,
         ;; more specific or call-next-method'ed method) and/or semantics otherwise modified. Oops.
         ;; NB: it's too late to do anything about functions in UIOP!
         ;; If you introduce some critical incompatibility there, you must change the function name.
         ;; Note that we don't need do anything about functions that changed incompatibly
         ;; from ASDF 2.26 or earlier: we wholly punt on the entire ASDF package in such an upgrade.
         ;; Also note that we don't include the defgeneric=>defun, because they are
         ;; done directly with defun* and need not trigger a punt on data.
         ;; See discussion at https://gitlab.common-lisp.net/asdf/asdf/merge_requests/36
         '(#:component-depends-on #:input-files ;; methods removed before 3.1.2
           #:find-component ;; gf modified in 3.1.7.20
           ))
        (redefined-classes
         ;; redefining the classes causes interim circularities
         ;; with the old ASDF during upgrade, and many implementations bork
         '((#:compile-concatenated-source-op (#:operation) ()))))
    (loop :for name :in redefined-functions
      :for sym = (find-symbol* name :asdf nil)
      :do (when sym (fmakunbound sym)))
    (labels ((asym (x) (multiple-value-bind (s p)
                           (if (consp x) (values (car x) (cadr x)) (values x :asdf))
                         (find-symbol* s p nil)))
             (asyms (l) (mapcar #'asym l)))
      (loop* :for (name superclasses slots) :in redefined-classes
             :for sym = (find-symbol* name :asdf nil)
             :when (and sym (find-class sym))
             :do (eval `(defclass ,sym ,(asyms superclasses) ,(asyms slots)))))))


;;; Self-upgrade functions
(with-upgradability ()
  ;; This private function is called at the end of asdf/footer and ensures that,
  ;; *if* this loading of ASDF was an upgrade, then all registered cleanup functions will be called.
  (defun cleanup-upgraded-asdf (&optional (old-version (first *previous-asdf-versions*)))
    (let ((new-version (asdf-version)))
      (unless (equal old-version new-version)
        (push new-version *previous-asdf-versions*)
        (when old-version
          (if (version<= new-version old-version)
              (error (compatfmt "~&~@<; ~@;Downgraded ASDF from version ~A to version ~A~@:>~%")
                     old-version new-version)
              (asdf-message (compatfmt "~&~@<; ~@;Upgraded ASDF from version ~A to version ~A~@:>~%")
                            old-version new-version))
          ;; In case the previous version was too old to be forward-compatible, clear systems.
          ;; TODO: if needed, we may have to define a separate hook to run
          ;; in case of forward-compatible upgrade.
          ;; Or to move the tests forward-compatibility test inside each hook function?
          (unless (version<= *oldest-forward-compatible-asdf-version* old-version)
            (call-functions (reverse *post-upgrade-cleanup-hook*)))
          t))))

  (defun upgrade-asdf ()
    "Try to upgrade of ASDF. If a different version was used, return T.
   We need do that before we operate on anything that may possibly depend on ASDF."
    (let ((*load-print* nil)
          (*compile-print* nil))
      (handler-bind (((or style-warning) #'muffle-warning))
        (symbol-call :asdf :load-system :asdf :verbose nil))))

  (defmacro with-asdf-deprecation ((&rest keys &key &allow-other-keys) &body body)
    `(with-upgradability ()
       (with-deprecation ((version-deprecation *asdf-version* ,@keys))
         ,@body))))
;;;; -------------------------------------------------------------------------
;;;; Session cache

(uiop/package:define-package :asdf/cache
  (:use :uiop/common-lisp :uiop :asdf/upgrade)
  (:export #:get-file-stamp #:compute-file-stamp #:register-file-stamp
           #:set-asdf-cache-entry #:unset-asdf-cache-entry #:consult-asdf-cache
           #:do-asdf-cache #:normalize-namestring
           #:call-with-asdf-cache #:with-asdf-cache #:*asdf-cache*
           #:clear-configuration-and-retry #:retry))
(in-package :asdf/cache)

;;; The ASDF session cache is used to memoize some computations. It is instrumental in achieving:
;; * Consistency in the view of the world relied on by ASDF within a given session.
;;   Inconsistencies in file stamps, system definitions, etc., could cause infinite loops
;;   (a.k.a. stack overflows) and other erratic behavior.
;; * Speed and reliability of ASDF, with fewer side-effects from access to the filesystem, and
;;   no expensive recomputations of transitive dependencies for some input-files or output-files.
;; * Testability of ASDF with the ability to fake timestamps without actually touching files.

(with-upgradability ()
  ;; The session cache variable.
  ;; NIL when outside a session, an equal hash-table when inside a session.
  (defvar *asdf-cache* nil)

  ;; Set a session cache entry for KEY to a list of values VALUE-LIST, when inside a session.
  ;; Return those values.
  (defun set-asdf-cache-entry (key value-list)
    (values-list (if *asdf-cache*
                     (setf (gethash key *asdf-cache*) value-list)
                     value-list)))

  ;; Unset the session cache entry for KEY, when inside a session.
  (defun unset-asdf-cache-entry (key)
    (when *asdf-cache*
      (remhash key *asdf-cache*)))

  ;; Consult the session cache entry for KEY if present and in a session;
  ;; if not present, compute it by calling the THUNK,
  ;; and set the session cache entry accordingly, if in a session.
  ;; Return the values from the cache and/or the thunk computation.
  (defun consult-asdf-cache (key &optional thunk)
    (if *asdf-cache*
        (multiple-value-bind (results foundp) (gethash key *asdf-cache*)
          (if foundp
              (values-list results)
              (set-asdf-cache-entry key (multiple-value-list (call-function thunk)))))
        (call-function thunk)))

  ;; Syntactic sugar for consult-asdf-cache
  (defmacro do-asdf-cache (key &body body)
    `(consult-asdf-cache ,key #'(lambda () ,@body)))

  ;; Compute inside a ASDF session with a cache.
  ;; First, make sure an ASDF session is underway, by binding the session cache variable
  ;; to a new hash-table if it's currently null (or even if it isn't, if OVERRIDE is true).
  ;; Second, if a new session was started, establish restarts for retrying the overall computation.
  ;; Finally, consult the cache if a KEY was specified with the THUNK as a fallback when the cache
  ;; entry isn't found, or just call the THUNK if no KEY was specified.
  (defun call-with-asdf-cache (thunk &key override key)
    (let ((fun (if key #'(lambda () (consult-asdf-cache key thunk)) thunk)))
      (if (and *asdf-cache* (not override))
          (funcall fun)
          (loop
            (restart-case
                (let ((*asdf-cache* (make-hash-table :test 'equal)))
                  (return (funcall fun)))
              (retry ()
                :report (lambda (s)
                          (format s (compatfmt "~@<Retry ASDF operation.~@:>"))))
              (clear-configuration-and-retry ()
                :report (lambda (s)
                          (format s (compatfmt "~@<Retry ASDF operation after resetting the configuration.~@:>")))
                (clear-configuration)))))))

  ;; Syntactic sugar for call-with-asdf-cache
  (defmacro with-asdf-cache ((&key key override) &body body)
    `(call-with-asdf-cache #'(lambda () ,@body) :override ,override :key ,key))


  ;;; Define specific accessor for file (date) stamp.

  ;; Normalize a namestring for use as a key in the session cache.
  (defun normalize-namestring (pathname)
    (let ((resolved (resolve-symlinks*
                     (ensure-absolute-pathname
                      (physicalize-pathname pathname)
                      'get-pathname-defaults))))
      (with-pathname-defaults () (namestring resolved))))

  ;; Compute the file stamp for a normalized namestring
  (defun compute-file-stamp (normalized-namestring)
    (with-pathname-defaults ()
      (safe-file-write-date normalized-namestring)))

  ;; Override the time STAMP associated to a given FILE in the session cache.
  ;; If no STAMP is specified, recompute a new one from the filesystem.
  (defun register-file-stamp (file &optional (stamp nil stampp))
    (let* ((namestring (normalize-namestring file))
           (stamp (if stampp stamp (compute-file-stamp namestring))))
      (set-asdf-cache-entry `(get-file-stamp ,namestring) (list stamp))))

  ;; Get or compute a memoized stamp for given FILE from the session cache.
  (defun get-file-stamp (file)
    (when file
      (let ((namestring (normalize-namestring file)))
        (do-asdf-cache `(get-file-stamp ,namestring) (compute-file-stamp namestring))))))

;;;; -------------------------------------------------------------------------
;;;; Components

(uiop/package:define-package :asdf/component
  (:recycle :asdf/component :asdf/defsystem :asdf/find-system :asdf)
  (:use :uiop/common-lisp :uiop :asdf/upgrade)
  (:export
   #:component #:component-find-path
   #:component-name #:component-pathname #:component-relative-pathname
   #:component-parent #:component-system #:component-parent-pathname
   #:child-component #:parent-component #:module
   #:file-component
   #:source-file #:c-source-file #:java-source-file
   #:static-file #:doc-file #:html-file
   #:file-type
   #:source-file-type #:source-file-explicit-type ;; backward-compatibility
   #:component-in-order-to #:component-sideway-dependencies
   #:component-if-feature #:around-compile-hook
   #:component-description #:component-long-description
   #:component-version #:version-satisfies
   #:component-inline-methods ;; backward-compatibility only. DO NOT USE!
   #:component-operation-times ;; For internal use only.
   ;; portable ASDF encoding and implementation-specific external-format
   #:component-external-format #:component-encoding
   #:component-children-by-name #:component-children #:compute-children-by-name
   #:component-build-operation
   #:module-default-component-class
   #:module-components ;; backward-compatibility. DO NOT USE.
   #:sub-components

   ;; conditions
   #:system-definition-error ;; top level, moved here because this is the earliest place for it.
   #:duplicate-names

   ;; Internals we'd like to share with the ASDF package, especially for upgrade purposes
   #:name #:version #:description #:long-description #:author #:maintainer #:licence
   #:components-by-name #:components #:children #:children-by-name
   #:default-component-class #:source-file
   #:defsystem-depends-on ; This symbol retained for backward compatibility.
   #:sideway-dependencies #:if-feature #:in-order-to #:inline-methods
   #:relative-pathname #:absolute-pathname #:operation-times #:around-compile
   #:%encoding #:properties #:component-properties #:parent))
(in-package :asdf/component)

(with-upgradability ()
  (defgeneric component-name (component)
    (:documentation "Name of the COMPONENT, unique relative to its parent"))
  (defgeneric component-system (component)
    (:documentation "Top-level system containing the COMPONENT"))
  (defgeneric component-pathname (component)
    (:documentation "Pathname of the COMPONENT if any, or NIL."))
  (defgeneric component-relative-pathname (component)
    ;; in ASDF4, rename that to component-specified-pathname ?
    (:documentation "Specified pathname of the COMPONENT,
intended to be merged with the pathname of that component's parent if any, using merged-pathnames*.
Despite the function's name, the return value can be an absolute pathname, in which case the merge
will leave it unmodified."))
  (defgeneric component-external-format (component)
    (:documentation "The external-format of the COMPONENT.
By default, deduced from the COMPONENT-ENCODING."))
  (defgeneric component-encoding (component)
    (:documentation "The encoding of the COMPONENT. By default, only :utf-8 is supported.
Use asdf-encodings to support more encodings."))
  (defgeneric version-satisfies (component version)
    (:documentation "Check whether a COMPONENT satisfies the constraint of being at least as recent
as the specified VERSION, which must be a string of dot-separated natural numbers, or NIL."))
  (defgeneric component-version (component)
    (:documentation "Return the version of a COMPONENT, which must be a string of dot-separated
natural numbers, or NIL."))
  (defgeneric (setf component-version) (new-version component)
    (:documentation "Updates the version of a COMPONENT, which must be a string of dot-separated
natural numbers, or NIL."))
  (defgeneric component-parent (component)
    (:documentation "The parent of a child COMPONENT,
or NIL for top-level components (a.k.a. systems)"))
  ;; NIL is a designator for the absence of a component, in which case the parent is also absent.
  (defmethod component-parent ((component null)) nil)

  ;; Deprecated: Backward compatible way of computing the FILE-TYPE of a component.
  ;; TODO: find users, have them stop using that, remove it for ASDF4.
  (defgeneric source-file-type (component system)
    (:documentation "DEPRECATED. Use the FILE-TYPE of a COMPONENT instead."))

  (define-condition system-definition-error (error) ()
    ;; [this use of :report should be redundant, but unfortunately it's not.
    ;; cmucl's lisp::output-instance prefers the kernel:slot-class-print-function
    ;; over print-object; this is always conditions::%print-condition for
    ;; condition objects, which in turn does inheritance of :report options at
    ;; run-time.  fortunately, inheritance means we only need this kludge here in
    ;; order to fix all conditions that build on it.  -- rgr, 28-Jul-02.]
    #+cmucl (:report print-object))

  (define-condition duplicate-names (system-definition-error)
    ((name :initarg :name :reader duplicate-names-name))
    (:report (lambda (c s)
               (format s (compatfmt "~@<Error while defining system: multiple components are given same name ~S~@:>")
                       (duplicate-names-name c))))))


(with-upgradability ()
  (defclass component ()
    ((name :accessor component-name :initarg :name :type string :documentation
           "Component name: designator for a string composed of portable pathname characters")
     ;; We might want to constrain version with
     ;; :type (and string (satisfies parse-version))
     ;; but we cannot until we fix all systems that don't use it correctly!
     (version :accessor component-version :initarg :version :initform nil)
     (description :accessor component-description :initarg :description :initform nil)
     (long-description :accessor component-long-description :initarg :long-description :initform nil)
     (sideway-dependencies :accessor component-sideway-dependencies :initform nil)
     (if-feature :accessor component-if-feature :initform nil :initarg :if-feature)
     ;; In the ASDF object model, dependencies exist between *actions*,
     ;; where an action is a pair of an operation and a component.
     ;; Dependencies are represented as alists of operations
     ;; to a list where each entry is a pair of an operation and a list of component specifiers.
     ;; Up until ASDF 2.26.9, there used to be two kinds of dependencies:
     ;; in-order-to and do-first, each stored in its own slot. Now there is only in-order-to.
     ;; in-order-to used to represent things that modify the filesystem (such as compiling a fasl)
     ;; and do-first things that modify the current image (such as loading a fasl).
     ;; These are now unified because we now correctly propagate timestamps between dependencies.
     ;; Happily, no one seems to have used do-first too much (especially since until ASDF 2.017,
     ;; anything you specified was overridden by ASDF itself anyway), but the name in-order-to remains.
     ;; The names are bad, but they have been the official API since Dan Barlow's ASDF 1.52!
     ;; LispWorks's defsystem has caused-by and requires for in-order-to and do-first respectively.
     ;; Maybe rename the slots in ASDF? But that's not very backward-compatible.
     ;; See our ASDF 2 paper for more complete explanations.
     (in-order-to :initform nil :initarg :in-order-to
                  :accessor component-in-order-to)
     ;; Methods defined using the "inline" style inside a defsystem form:
     ;; we store them here so we can delete them when the system is re-evaluated.
     (inline-methods :accessor component-inline-methods :initform nil)
     ;; ASDF4: rename it from relative-pathname to specified-pathname. It need not be relative.
     ;; There is no initform and no direct accessor for this specified pathname,
     ;; so we only access the information through appropriate methods, after it has been processed.
     ;; Unhappily, some braindead systems directly access the slot. Make them stop before ASDF4.
     (relative-pathname :initarg :pathname)
     ;; The absolute-pathname is computed based on relative-pathname and parent pathname.
     ;; The slot is but a cache used by component-pathname.
     (absolute-pathname)
     (operation-times :initform (make-hash-table)
                      :accessor component-operation-times)
     (around-compile :initarg :around-compile)
     ;; Properties are for backward-compatibility with ASDF2 only. DO NOT USE!
     (properties :accessor component-properties :initarg :properties
                 :initform nil)
     (%encoding :accessor %component-encoding :initform nil :initarg :encoding)
     ;; For backward-compatibility, this slot is part of component rather than of child-component. ASDF4: stop it.
     (parent :initarg :parent :initform nil :reader component-parent)
     (build-operation
      :initarg :build-operation :initform nil :reader component-build-operation))
    (:documentation "Base class for all components of a build"))

  (defun component-find-path (component)
    "Return a path from a root system to the COMPONENT.
The return value is a list of component NAMES; a list of strings."
    (check-type component (or null component))
    (reverse
     (loop :for c = component :then (component-parent c)
           :while c :collect (component-name c))))

  (defmethod print-object ((c component) stream)
    (print-unreadable-object (c stream :type t :identity nil)
      (format stream "~{~S~^ ~}" (component-find-path c))))

  (defmethod component-system ((component component))
    (if-let (system (component-parent component))
      (component-system system)
      component)))


;;;; Component hierarchy within a system
;; The tree typically but not necessarily follows the filesystem hierarchy.
(with-upgradability ()
  (defclass child-component (component) ()
    (:documentation "A CHILD-COMPONENT is a COMPONENT that may be part of
a PARENT-COMPONENT."))

  (defclass file-component (child-component)
    ((type :accessor file-type :initarg :type)) ; no default
    (:documentation "a COMPONENT that represents a file"))
  (defclass source-file (file-component)
    ((type :accessor source-file-explicit-type ;; backward-compatibility
           :initform nil))) ;; NB: many systems have come to rely on this default.
  (defclass c-source-file (source-file)
    ((type :initform "c")))
  (defclass java-source-file (source-file)
    ((type :initform "java")))
  (defclass static-file (source-file)
    ((type :initform nil))
    (:documentation "Component for a file to be included as is in the build output"))
  (defclass doc-file (static-file) ())
  (defclass html-file (doc-file)
    ((type :initform "html")))

  (defclass parent-component (component)
    ((children
      :initform nil
      :initarg :components
      :reader module-components ; backward-compatibility
      :accessor component-children)
     (children-by-name
      :reader module-components-by-name ; backward-compatibility
      :accessor component-children-by-name)
     (default-component-class
      :initform nil
      :initarg :default-component-class
      :accessor module-default-component-class))
  (:documentation "A PARENT-COMPONENT is a component that may have children.")))

(with-upgradability ()
  ;; (Private) Function that given a PARENT component,
  ;; the list of children of which has been initialized,
  ;; compute the hash-table in slot children-by-name that allows to retrieve its children by name.
  ;; If ONLY-IF-NEEDED-P is defined, skip any (re)computation if the slot is already populated.
  (defun compute-children-by-name (parent &key only-if-needed-p)
    (unless (and only-if-needed-p (slot-boundp parent 'children-by-name))
      (let ((hash (make-hash-table :test 'equal)))
        (setf (component-children-by-name parent) hash)
        (loop :for c :in (component-children parent)
              :for name = (component-name c)
              :for previous = (gethash name hash)
              :do (when previous (error 'duplicate-names :name name))
                  (setf (gethash name hash) c))
        hash))))

(with-upgradability ()
  (defclass module (child-component parent-component)
    (#+clisp (components)) ;; backward compatibility during upgrade only
    (:documentation "A module is a intermediate component with both a parent and children,
typically but not necessarily representing the files in a subdirectory of the build source.")))


;;;; component pathnames
(with-upgradability ()
  (defgeneric component-parent-pathname (component)
    (:documentation "The pathname of the COMPONENT's parent, if any, or NIL"))
  (defmethod component-parent-pathname (component)
    (component-pathname (component-parent component)))

  ;; The default method for component-pathname tries to extract a cached precomputed
  ;; absolute-pathname from the relevant slot, and if not, computes it by merging the
  ;; component-relative-pathname (which should be component-specified-pathname, it can be absolute)
  ;; with the directory of the component-parent-pathname.
  (defmethod component-pathname ((component component))
    (if (slot-boundp component 'absolute-pathname)
        (slot-value component 'absolute-pathname)
        (let ((pathname
                (merge-pathnames*
                 (component-relative-pathname component)
                 (pathname-directory-pathname (component-parent-pathname component)))))
          (unless (or (null pathname) (absolute-pathname-p pathname))
            (error (compatfmt "~@<Invalid relative pathname ~S for component ~S~@:>")
                   pathname (component-find-path component)))
          (setf (slot-value component 'absolute-pathname) pathname)
          pathname)))

  ;; Default method for component-relative-pathname:
  ;; combine the contents of slot relative-pathname (from specified initarg :pathname)
  ;; with the appropriate source-file-type, which defaults to the file-type of the component.
  (defmethod component-relative-pathname ((component component))
    ;; SOURCE-FILE-TYPE below is strictly for backward-compatibility with ASDF1.
    ;; We ought to be able to extract this from the component alone with FILE-TYPE.
    ;; TODO: track who uses it in Quicklisp, and have them not use it anymore;
    ;; maybe issue a WARNING (then eventually CERROR) if the two methods diverge?
    (parse-unix-namestring
     (or (and (slot-boundp component 'relative-pathname)
              (slot-value component 'relative-pathname))
         (component-name component))
     :want-relative t
     :type (source-file-type component (component-system component))
     :defaults (component-parent-pathname component)))

  (defmethod source-file-type ((component parent-component) (system parent-component))
    :directory)

  (defmethod source-file-type ((component file-component) (system parent-component))
    (file-type component)))


;;;; Encodings
(with-upgradability ()
  (defmethod component-encoding ((c component))
    (or (loop :for x = c :then (component-parent x)
              :while x :thereis (%component-encoding x))
        (detect-encoding (component-pathname c))))

  (defmethod component-external-format ((c component))
    (encoding-external-format (component-encoding c))))


;;;; around-compile-hook
(with-upgradability ()
  (defgeneric around-compile-hook (component)
    (:documentation "An optional hook function that will be called with one argument, a thunk.
The hook function must call the thunk, that will compile code from the component, and may or may not
also evaluate the compiled results. The hook function may establish dynamic variable bindings around
this compilation, or check its results, etc."))
  (defmethod around-compile-hook ((c component))
    (cond
      ((slot-boundp c 'around-compile)
       (slot-value c 'around-compile))
      ((component-parent c)
       (around-compile-hook (component-parent c))))))


;;;; version-satisfies
(with-upgradability ()
  ;; short-circuit testing of null version specifications.
  ;; this is an all-pass, without warning
  (defmethod version-satisfies :around ((c t) (version null))
    t)
  (defmethod version-satisfies ((c component) version)
    (unless (and version (slot-boundp c 'version) (component-version c))
      (when version
        (warn "Requested version ~S but ~S has no version" version c))
      (return-from version-satisfies nil))
    (version-satisfies (component-version c) version))

  (defmethod version-satisfies ((cver string) version)
    (version<= version cver)))


;;; all sub-components (of a given type)
(with-upgradability ()
  (defun sub-components (component &key (type t))
    "Compute the transitive sub-components of given COMPONENT that are of given TYPE"
    (while-collecting (c)
      (labels ((recurse (x)
                 (when (if-let (it (component-if-feature x)) (featurep it) t)
                   (when (typep x type)
                     (c x))
                   (when (typep x 'parent-component)
                     (map () #'recurse (component-children x))))))
        (recurse component)))))

;;;; -------------------------------------------------------------------------
;;;; Systems

(uiop/package:define-package :asdf/system
  (:recycle :asdf :asdf/system)
  (:use :uiop/common-lisp :uiop :asdf/upgrade :asdf/component)
  (:export
   #:system #:proto-system
   #:system-source-file #:system-source-directory #:system-relative-pathname
   #:reset-system
   #:system-description #:system-long-description
   #:system-author #:system-maintainer #:system-licence #:system-license
   #:system-defsystem-depends-on #:system-depends-on #:system-weakly-depends-on
   #:component-build-pathname #:build-pathname
   #:component-entry-point #:entry-point
   #:homepage #:system-homepage
   #:bug-tracker #:system-bug-tracker
   #:mailto #:system-mailto
   #:long-name #:system-long-name
   #:source-control #:system-source-control
   #:find-system #:builtin-system-p)) ;; forward-reference, defined in find-system
(in-package :asdf/system)

(with-upgradability ()
  ;; The method is actually defined in asdf/find-system,
  ;; but we declare the function here to avoid a forward reference.
  (defgeneric find-system (system &optional error-p)
    (:documentation "Given a system designator, find the actual corresponding system object.
If no system is found, then signal an error if ERROR-P is true (the default), or else return NIL.
A system designator is usually a string (conventionally all lowercase) or a symbol, designating
the same system as its downcased name; it can also be a system object (designating itself)."))
  (defgeneric system-source-file (system)
    (:documentation "Return the source file in which system is defined."))
  ;; This is bad design, but was the easiest kluge I found to let the user specify that
  ;; some special actions create outputs at locations controled by the user that are not affected
  ;; by the usual output-translations.
  ;; TODO: Fix operate to stop passing flags to operation (which in the current design shouldn't
  ;; have any flags, since the stamp cache, etc., can't distinguish them), and instead insert
  ;; *there* the ability of specifying special output paths, not in the system definition.
  (defgeneric component-build-pathname (component)
    (:documentation "The COMPONENT-BUILD-PATHNAME, when defined and not null, specifies the
output pathname for the action using the COMPONENT-BUILD-OPERATION.

NB: This interface is subject to change. Please contact ASDF maintainers if you use it."))

  ;; TODO: Should this have been made a SYSTEM-ENTRY-POINT instead?
  (defgeneric component-entry-point (component)
    (:documentation "The COMPONENT-ENTRY-POINT, when defined, specifies what function to call
(with no argument) when running an image dumped from the COMPONENT.

NB: This interface is subject to change. Please contact ASDF maintainers if you use it."))
  (defmethod component-entry-point ((c component))
    nil))


;;;; The system class

(with-upgradability ()
  (defclass proto-system () ; slots to keep when resetting a system
    ;; To preserve identity for all objects, we'd need keep the components slots
    ;; but also to modify parse-component-form to reset the recycled objects.
    ((name) (source-file) #|(children) (children-by-names)|#)
    (:documentation "PROTO-SYSTEM defines the elements of identity that are preserved when
a SYSTEM is redefined and its class is modified."))

  (defclass system (module proto-system)
    ;; Backward-compatibility: inherit from module. ASDF4: only inherit from parent-component.
    (;; {,long-}description is now inherited from component, but we add the legacy accessors
     (description :accessor system-description)
     (long-description :accessor system-long-description)
     (author :accessor system-author :initarg :author :initform nil)
     (maintainer :accessor system-maintainer :initarg :maintainer :initform nil)
     (licence :accessor system-licence :initarg :licence
              :accessor system-license :initarg :license :initform nil)
     (homepage :accessor system-homepage :initarg :homepage :initform nil)
     (bug-tracker :accessor system-bug-tracker :initarg :bug-tracker :initform nil)
     (mailto :accessor system-mailto :initarg :mailto :initform nil)
     (long-name :accessor system-long-name :initarg :long-name :initform nil)
     ;; Conventions for this slot aren't clear yet as of ASDF 2.27, but whenever they are, they will be enforced.
     ;; I'm introducing the slot before the conventions are set for maximum compatibility.
     (source-control :accessor system-source-control :initarg :source-control :initform nil)
     (builtin-system-p :accessor builtin-system-p :initform nil :initarg :builtin-system-p)
     (build-pathname
      :initform nil :initarg :build-pathname :accessor component-build-pathname)
     (entry-point
      :initform nil :initarg :entry-point :accessor component-entry-point)
     (source-file :initform nil :initarg :source-file :accessor system-source-file)
     (defsystem-depends-on :reader system-defsystem-depends-on :initarg :defsystem-depends-on
                           :initform nil)
     ;; these two are specially set in parse-component-form, so have no :INITARGs.
     (depends-on :reader system-depends-on :initform nil)
     (weakly-depends-on :reader system-weakly-depends-on :initform nil))
    (:documentation "SYSTEM is the base class for top-level components that users may request
ASDF to build."))


  (defun reset-system (system &rest keys &key &allow-other-keys)
    "Erase any data from a SYSTEM except its basic identity, then reinitialize it
based on supplied KEYS."
    (change-class (change-class system 'proto-system) 'system)
    (apply 'reinitialize-instance system keys)))


;;;; Pathnames

(with-upgradability ()
  ;; Resolve a system designator to a system before extracting its system-source-file
  (defmethod system-source-file ((system-name string))
    (system-source-file (find-system system-name)))
  (defmethod system-source-file ((system-name symbol))
    (when system-name
      (system-source-file (find-system system-name))))

  (defun system-source-directory (system-designator)
    "Return a pathname object corresponding to the directory
in which the system specification (.asd file) is located."
    (pathname-directory-pathname (system-source-file system-designator)))

  (defun* (system-relative-pathname) (system name &key type)
    "Given a SYSTEM, and a (Unix-style relative path) NAME of a file (or directory) of given TYPE,
return the absolute pathname of a corresponding file under that system's source code pathname."
    (subpathname (system-source-directory system) name :type type))

  (defmethod component-pathname ((system system))
    "Given a SYSTEM, and a (Unix-style relative path) NAME of a file (or directory) of given TYPE,
return the absolute pathname of a corresponding file under that system's source code pathname."
    (let ((pathname (or (call-next-method) (system-source-directory system))))
      (unless (and (slot-boundp system 'relative-pathname) ;; backward-compatibility with ASDF1-age
                   (slot-value system 'relative-pathname)) ;; systems that directly access this slot.
        (setf (slot-value system 'relative-pathname) pathname))
      pathname))

  ;; The default method of component-relative-pathname for a system:
  ;; if a pathname was specified in the .asd file, it must be relative to the .asd file
  ;; (actually, to its truename* if *resolve-symlinks* it true, the default).
  ;; The method will return an *absolute* pathname, once again showing that the historical name
  ;; component-relative-pathname is misleading and should have been component-specified-pathname.
  (defmethod component-relative-pathname ((system system))
    (parse-unix-namestring
     (and (slot-boundp system 'relative-pathname)
          (slot-value system 'relative-pathname))
     :want-relative t
     :type :directory
     :ensure-absolute t
     :defaults (system-source-directory system)))

  ;; A system has no parent; if some method wants to make a path "relative to its parent",
  ;; it will instead be relative to the system itself.
  (defmethod component-parent-pathname ((system system))
    (system-source-directory system))

  ;; Most components don't have a specified component-build-pathname, and therefore
  ;; no magic redirection of their output that disregards the output-translations.
  (defmethod component-build-pathname ((c component))
    nil))

;;;; -------------------------------------------------------------------------
;;;; Finding systems

(uiop/package:define-package :asdf/find-system
  (:recycle :asdf/find-system :asdf)
  (:use :uiop/common-lisp :uiop :asdf/upgrade
    :asdf/cache :asdf/component :asdf/system)
  (:export
   #:remove-entry-from-registry #:coerce-entry-to-directory
   #:coerce-name #:primary-system-name #:coerce-filename
   #:find-system #:locate-system #:load-asd
   #:system-registered-p #:registered-system #:register-system
   #:registered-systems* #:registered-systems
   #:clear-system #:map-systems
   #:missing-component #:missing-requires #:missing-parent
   #:formatted-system-definition-error #:format-control #:format-arguments #:sysdef-error
   #:load-system-definition-error #:error-name #:error-pathname #:error-condition
   #:*system-definition-search-functions* #:search-for-system-definition
   #:*central-registry* #:probe-asd #:sysdef-central-registry-search
   #:find-system-if-being-defined
   #:contrib-sysdef-search #:sysdef-find-asdf ;; backward compatibility symbols, functions removed
   #:sysdef-preloaded-system-search #:register-preloaded-system #:*preloaded-systems*
   #:mark-component-preloaded ;; forward reference to asdf/operate
   #:sysdef-immutable-system-search #:register-immutable-system #:*immutable-systems*
   #:*defined-systems* #:clear-defined-systems
   ;; defined in source-registry, but specially mentioned here:
   #:initialize-source-registry #:sysdef-source-registry-search))
(in-package :asdf/find-system)

(with-upgradability ()
  (declaim (ftype (function (&optional t) t) initialize-source-registry)) ; forward reference

  (define-condition missing-component (system-definition-error)
    ((requires :initform "(unnamed)" :reader missing-requires :initarg :requires)
     (parent :initform nil :reader missing-parent :initarg :parent)))

  (define-condition formatted-system-definition-error (system-definition-error)
    ((format-control :initarg :format-control :reader format-control)
     (format-arguments :initarg :format-arguments :reader format-arguments))
    (:report (lambda (c s)
               (apply 'format s (format-control c) (format-arguments c)))))

  (define-condition load-system-definition-error (system-definition-error)
    ((name :initarg :name :reader error-name)
     (pathname :initarg :pathname :reader error-pathname)
     (condition :initarg :condition :reader error-condition))
    (:report (lambda (c s)
               (format s (compatfmt "~@<Error while trying to load definition for system ~A from pathname ~A: ~3i~_~A~@:>")
                       (error-name c) (error-pathname c) (error-condition c)))))

  (defun sysdef-error (format &rest arguments)
    (error 'formatted-system-definition-error :format-control
           format :format-arguments arguments))


  ;;; Canonicalizing system names

  (defun coerce-name (name)
    "Given a designator for a component NAME, return the name as a string.
The designator can be a COMPONENT (designing its name; note that a SYSTEM is a component),
a SYMBOL (designing its name, downcased), or a STRING (designing itself)."
    (typecase name
      (component (component-name name))
      (symbol (string-downcase name))
      (string name)
      (t (sysdef-error (compatfmt "~@<Invalid component designator: ~3i~_~A~@:>") name))))

  (defun primary-system-name (name)
    "Given a system designator NAME, return the name of the corresponding primary system,
after which the .asd file is named. That's the first component when dividing the name
as a string by / slashes."
    (first (split-string (coerce-name name) :separator "/")))

  (defun coerce-filename (name)
    "Coerce a system designator NAME into a string suitable as a filename component.
The (current) transformation is to replace characters /:\\ each by --,
the former being forbidden in a filename component.
NB: The onus is unhappily on the user to avoid clashes."
    (frob-substrings (coerce-name name) '("/" ":" "\\") "--"))


  ;;; Registry of Defined Systems

  (defvar *defined-systems* (make-hash-table :test 'equal)
    "This is a hash table whose keys are strings -- the
names of systems -- and whose values are pairs, the first
element of which is a universal-time indicating when the
system definition was last updated, and the second element
of which is a system object.
  A system is referred to as \"registered\" if it is present
in this table.")

  (defun system-registered-p (name)
    "Return a generalized boolean that is true if a system of given NAME was registered already.
NAME is a system designator, to be normalized by COERCE-NAME.
The value returned if true is a pair of a timestamp and a system object."
    (gethash (coerce-name name) *defined-systems*))

  (defun registered-system (name)
    "Return a system of given NAME that was registered already,
if such a system exists.  NAME is a system designator, to be
normalized by COERCE-NAME. The value returned is a system object,
or NIL if not found."
    (cdr (system-registered-p name)))

  (defun registered-systems* ()
    "Return a list containing every registered system (as a system object)."
    (loop :for registered :being :the :hash-values :of *defined-systems*
          :collect (cdr registered)))

  (defun registered-systems ()
    "Return a list of the names of every registered system."
    (mapcar 'coerce-name (registered-systems*)))

  (defun register-system (system)
    "Given a SYSTEM object, register it."
    (check-type system system)
    (let ((name (component-name system)))
      (check-type name string)
      (asdf-message (compatfmt "~&~@<; ~@;Registering ~3i~_~A~@:>~%") system)
      (unless (eq system (registered-system name))
        (setf (gethash name *defined-systems*)
              (cons (ignore-errors (get-file-stamp (system-source-file system)))
                    system)))))

  (defun map-systems (fn)
    "Apply FN to each defined system.

FN should be a function of one argument. It will be
called with an object of type asdf:system."
    (loop :for registered :being :the :hash-values :of *defined-systems*
          :do (funcall fn (cdr registered))))


  ;;; Preloaded systems: in the image even if you can't find source files backing them.

  (defvar *preloaded-systems* (make-hash-table :test 'equal)
    "Registration table for preloaded systems.")

  (declaim (ftype (function (t) t) mark-component-preloaded)) ; defined in asdf/operate

  (defun make-preloaded-system (name keys)
    "Make a preloaded system of given NAME with build information from KEYS"
    (let ((system (apply 'make-instance (getf keys :class 'system)
                         :name name :source-file (getf keys :source-file)
                         (remove-plist-keys '(:class :name :source-file) keys))))
      (mark-component-preloaded system)
      system))

  (defun sysdef-preloaded-system-search (requested)
    "If REQUESTED names a system registered as preloaded, return a new system
with its registration information."
    (let ((name (coerce-name requested)))
      (multiple-value-bind (keys foundp) (gethash name *preloaded-systems*)
        (when foundp
          (make-preloaded-system name keys)))))

  (defun ensure-preloaded-system-registered (name)
    "If there isn't a registered _defined_ system of given NAME,
and a there is a registered _preloaded_ system of given NAME,
then define and register said preloaded system."
    (if-let (system (and (not (registered-system name)) (sysdef-preloaded-system-search name)))
      (register-system system)))

  (defun register-preloaded-system (system-name &rest keys &key (version t) &allow-other-keys)
    "Register a system as being preloaded. If the system has not been loaded from the filesystem
yet, or if its build information is later cleared with CLEAR-SYSTEM, a dummy system will be
registered without backing filesystem information, based on KEYS (e.g. to provide a VERSION).
If VERSION is the default T, and a system was already loaded, then its version will be preserved."
    (let ((name (coerce-name system-name)))
      (when (eql version t)
        (if-let (system (registered-system name))
          (setf (getf keys :version) (component-version system))))
      (setf (gethash name *preloaded-systems*) keys)
      (ensure-preloaded-system-registered system-name)))


  ;;; Immutable systems: in the image and can't be reloaded from source.

  (defvar *immutable-systems* nil
    "A hash-set (equal hash-table mapping keys to T) of systems that are immutable,
i.e. already loaded in memory and not to be refreshed from the filesystem.
They will be treated specially by find-system, and passed as :force-not argument to make-plan.

For instance, to can deliver an image with many systems precompiled, that *will not* check the
filesystem for them every time a user loads an extension, what more risk a problematic upgrade
 or catastrophic downgrade, before you dump an image, you may use:
   (map () 'asdf:register-immutable-system (asdf:already-loaded-systems))

Note that direct access to this variable from outside ASDF is not supported.
Please call REGISTER-IMMUTABLE-SYSTEM to add new immutable systems, and
contact maintainers if you need a stable API to do more than that.")

  (defun sysdef-immutable-system-search (requested)
    (let ((name (coerce-name requested)))
      (when (and *immutable-systems* (gethash name *immutable-systems*))
        (or (registered-system requested)
            (error 'formatted-system-definition-error
                   :format-control "Requested system ~A registered as an immutable-system, ~
but not even registered as defined"
                   :format-arguments (list name))))))

  (defun register-immutable-system (system-name &rest keys)
    "Register SYSTEM-NAME as preloaded and immutable.
It will automatically be considered as passed to FORCE-NOT in a plan."
    (let ((system-name (coerce-name system-name)))
      (apply 'register-preloaded-system system-name keys)
      (unless *immutable-systems*
        (setf *immutable-systems* (list-to-hash-set nil)))
      (setf (gethash system-name *immutable-systems*) t)))


  ;;; Making systems undefined.

  (defun clear-system (system)
    "Clear the entry for a SYSTEM in the database of systems previously defined.
However if the system was registered as PRELOADED (which it is if it is IMMUTABLE),
then a new system with the same name will be defined and registered in its place
from which build details will have been cleared.
Note that this does NOT in any way cause any of the code of the system to be unloaded.
Returns T if system was or is now undefined, NIL if a new preloaded system was redefined."
    ;; There is no "unload" operation in Common Lisp, and
    ;; a general such operation cannot be portably written,
    ;; considering how much CL relies on side-effects to global data structures.
    (let ((name (coerce-name system)))
      (remhash name *defined-systems*)
      (unset-asdf-cache-entry `(find-system ,name))
      (not (ensure-preloaded-system-registered name))))

  (defun clear-defined-systems ()
    "Clear all currently registered defined systems.
Preloaded systems (including immutable ones) will be reset, other systems will be de-registered."
    (loop :for name :being :the :hash-keys :of *defined-systems*
          :unless (member name '("asdf" "uiop") :test 'equal) :do (clear-system name)))


  ;;; Searching for system definitions

  ;; For the sake of keeping things reasonably neat, we adopt a convention that
  ;; only symbols are to be pushed to this list (rather than e.g. function objects),
  ;; which makes upgrade easier. Also, the name of these symbols shall start with SYSDEF-
  (defvar *system-definition-search-functions* '()
    "A list that controls the ways that ASDF looks for system definitions.
It contains symbols to be funcalled in order, with a requested system name as argument,
until one returns a non-NIL result (if any), which must then be a fully initialized system object
with that name.")

  ;; Initialize and/or upgrade the *system-definition-search-functions*
  ;; so it doesn't contain obsolete symbols, and does contain the current ones.
  (defun cleanup-system-definition-search-functions ()
    (setf *system-definition-search-functions*
          (append
           ;; Remove known-incompatible sysdef functions from old versions of asdf.
           ;; Order matters, so we can't just use set-difference.
           (let ((obsolete
                  '(contrib-sysdef-search sysdef-find-asdf sysdef-preloaded-system-search)))
             (remove-if #'(lambda (x) (member x obsolete)) *system-definition-search-functions*))
           ;; Tuck our defaults at the end of the list if they were absent.
           ;; This is imperfect, in case they were removed on purpose,
           ;; but then it will be the responsibility of whoever removes these symmbols
           ;; to upgrade asdf before he does such a thing rather than after.
           (remove-if #'(lambda (x) (member x *system-definition-search-functions*))
                      '(sysdef-central-registry-search
                        sysdef-source-registry-search)))))
  (cleanup-system-definition-search-functions)

  ;; This (private) function does the search for a system definition using *s-d-s-f*;
  ;; it is to be called by locate-system.
  (defun search-for-system-definition (system)
    ;; Search for valid definitions of the system available in the current session.
    ;; Previous definitions as registered in *defined-systems* MUST NOT be considered;
    ;; they will be reconciled by locate-system then find-system.
    ;; There are two special treatments: first, specially search for objects being defined
    ;; in the current session, to avoid definition races between several files;
    ;; second, specially search for immutable systems, so they cannot be redefined.
    ;; Finally, use the search functions specified in *system-definition-search-functions*.
    (let ((name (coerce-name system)))
      (flet ((try (f) (if-let ((x (funcall f name))) (return-from search-for-system-definition x))))
        (try 'find-system-if-being-defined)
        (try 'sysdef-immutable-system-search)
        (map () #'try *system-definition-search-functions*))))


  ;;; The legacy way of finding a system: the *central-registry*

  ;; This variable contains a list of directories to be lazily searched for the requested asd
  ;; by sysdef-central-registry-search.
  (defvar *central-registry* nil
    "A list of 'system directory designators' ASDF uses to find systems.

A 'system directory designator' is a pathname or an expression
which evaluates to a pathname. For example:

    (setf asdf:*central-registry*
          (list '*default-pathname-defaults*
                #p\"/home/me/cl/systems/\"
                #p\"/usr/share/common-lisp/systems/\"))

This variable is for backward compatibility.
Going forward, we recommend new users should be using the source-registry.")

  ;; Function to look for an asd file of given NAME under a directory provided by DEFAULTS.
  ;; Return the truename of that file if it is found and TRUENAME is true.
  ;; Return NIL if the file is not found.
  ;; On Windows, follow shortcuts to .asd files.
  (defun probe-asd (name defaults &key truename)
    (block nil
      (when (directory-pathname-p defaults)
        (if-let (file (probe-file*
                       (ensure-absolute-pathname
                        (parse-unix-namestring name :type "asd")
                        #'(lambda () (ensure-absolute-pathname defaults 'get-pathname-defaults nil))
                        nil)
                       :truename truename))
          (return file))
        #-(or clisp genera) ; clisp doesn't need it, plain genera doesn't have read-sequence(!)
        (os-cond
         ((os-windows-p)
          (when (physical-pathname-p defaults)
            (let ((shortcut
                    (make-pathname
                     :defaults defaults :case :local
                     :name (strcat name ".asd")
                     :type "lnk")))
              (when (probe-file* shortcut)
                (ensure-pathname (parse-windows-shortcut shortcut) :namestring :native)))))))))

  ;; Function to push onto *s-d-s-f* to use the *central-registry*
  (defun sysdef-central-registry-search (system)
    (let ((name (primary-system-name system))
          (to-remove nil)
          (to-replace nil))
      (block nil
        (unwind-protect
             (dolist (dir *central-registry*)
               (let ((defaults (eval dir))
                     directorized)
                 (when defaults
                   (cond ((directory-pathname-p defaults)
                          (let* ((file (probe-asd name defaults :truename *resolve-symlinks*)))
                            (when file
                              (return file))))
                         (t
                          (restart-case
                              (let* ((*print-circle* nil)
                                     (message
                                       (format nil
                                               (compatfmt "~@<While searching for system ~S: ~3i~_~S evaluated to ~S which is not an absolute directory.~@:>")
                                               system dir defaults)))
                                (error message))
                            (remove-entry-from-registry ()
                              :report "Remove entry from *central-registry* and continue"
                              (push dir to-remove))
                            (coerce-entry-to-directory ()
                              :test (lambda (c) (declare (ignore c))
                                      (and (not (directory-pathname-p defaults))
                                           (directory-pathname-p
                                            (setf directorized
                                                  (ensure-directory-pathname defaults)))))
                              :report (lambda (s)
                                        (format s (compatfmt "~@<Coerce entry to ~a, replace ~a and continue.~@:>")
                                                directorized dir))
                              (push (cons dir directorized) to-replace))))))))
          ;; cleanup
          (dolist (dir to-remove)
            (setf *central-registry* (remove dir *central-registry*)))
          (dolist (pair to-replace)
            (let* ((current (car pair))
                   (new (cdr pair))
                   (position (position current *central-registry*)))
              (setf *central-registry*
                    (append (subseq *central-registry* 0 position)
                            (list new)
                            (subseq *central-registry* (1+ position))))))))))


  ;;; Methods for find-system

  ;; Reject NIL as a system designator.
  (defmethod find-system ((name null) &optional (error-p t))
    (when error-p
      (sysdef-error (compatfmt "~@<NIL is not a valid system name~@:>"))))

  ;; Default method for find-system: resolve the argument using COERCE-NAME.
  (defmethod find-system (name &optional (error-p t))
    (find-system (coerce-name name) error-p))

  (defun find-system-if-being-defined (name)
    ;; This function finds systems being defined *in the current ASDF session*, as embodied by
    ;; its session cache, even before they are fully defined and registered in *defined-systems*.
    ;; The purpose of this function is to prevent races between two files that might otherwise
    ;; try overwrite each other's system objects, resulting in infinite loops and stack overflow.
    ;; This function explicitly MUST NOT find definitions merely registered in previous sessions.
    ;; NB: this function depends on a corresponding side-effect in parse-defsystem;
    ;; the precise protocol between the two functions may change in the future (or not).
    (first (gethash `(find-system ,(coerce-name name)) *asdf-cache*)))

  (defun load-asd (pathname
                   &key name (external-format (encoding-external-format (detect-encoding pathname)))
                   &aux (readtable *readtable*) (print-pprint-dispatch *print-pprint-dispatch*))
    "Load system definitions from PATHNAME.
NAME if supplied is the name of a system expected to be defined in that file.

Do NOT try to load a .asd file directly with CL:LOAD. Always use ASDF:LOAD-ASD."
    (with-asdf-cache ()
      (with-standard-io-syntax
        (let ((*package* (find-package :asdf-user))
              ;; Note that our backward-compatible *readtable* is
              ;; a global readtable that gets globally side-effected. Ouch.
              ;; Same for the *print-pprint-dispatch* table.
              ;; We should do something about that for ASDF3 if possible, or else ASDF4.
              (*readtable* readtable)
              (*print-pprint-dispatch* print-pprint-dispatch)
              (*print-readably* nil)
              (*default-pathname-defaults*
                ;; resolve logical-pathnames so they won't wreak havoc in parsing namestrings.
                (pathname-directory-pathname (physicalize-pathname pathname))))
          (handler-bind
              (((and error (not missing-component))
                 #'(lambda (condition)
                     (error 'load-system-definition-error
                            :name name :pathname pathname :condition condition))))
            (asdf-message (compatfmt "~&~@<; ~@;Loading system definition~@[ for ~A~] from ~A~@:>~%")
                          name pathname)
            (load* pathname :external-format external-format))))))

  (defvar *old-asdf-systems* (make-hash-table :test 'equal))

  ;; (Private) function to check that a system that was found isn't an asdf downgrade.
  ;; Returns T if everything went right, NIL if the system was an ASDF of the same or older version,
  ;; that shall not be loaded. Also issue a warning if it was a strictly older version of ASDF.
  (defun check-not-old-asdf-system (name pathname)
    (or (not (equal name "asdf"))
        (null pathname)
        (let* ((version-pathname (subpathname pathname "version.lisp-expr"))
               (version (and (probe-file* version-pathname :truename nil)
                             (read-file-form version-pathname)))
               (old-version (asdf-version)))
          (cond
            ((version< old-version version) t) ;; newer version: good!
            ((equal old-version version) nil) ;; same version: don't load, but don't warn
            (t ;; old version: bad
             (ensure-gethash
              (list (namestring pathname) version) *old-asdf-systems*
              #'(lambda ()
                 (let ((old-pathname (system-source-file (registered-system "asdf"))))
                   (warn "~@<~
        You are using ASDF version ~A ~:[(probably from (require \"asdf\") ~
        or loaded by quicklisp)~;from ~:*~S~] and have an older version of ASDF ~
        ~:[(and older than 2.27 at that)~;~:*~A~] registered at ~S. ~
        Having an ASDF installed and registered is the normal way of configuring ASDF to upgrade itself, ~
        and having an old version registered is a configuration error. ~
        ASDF will ignore this configured system rather than downgrade itself. ~
        In the future, you may want to either: ~
        (a) upgrade this configured ASDF to a newer version, ~
        (b) install a newer ASDF and register it in front of the former in your configuration, or ~
        (c) uninstall or unregister this and any other old version of ASDF from your configuration. ~
        Note that the older ASDF might be registered implicitly through configuration inherited ~
        from your system installation, in which case you might have to specify ~
        :ignore-inherited-configuration in your in your ~~/.config/common-lisp/source-registry.conf ~
        or other source-registry configuration file, environment variable or lisp parameter. ~
        Indeed, a likely offender is an obsolete version of the cl-asdf debian or ubuntu package, ~
        that you might want to upgrade (if a recent enough version is available) ~
        or else remove altogether (since most implementations ship with a recent asdf); ~
        if you lack the system administration rights to upgrade or remove this package, ~
        then you might indeed want to either install and register a more recent version, ~
        or use :ignore-inherited-configuration to avoid registering the old one. ~
        Please consult ASDF documentation and/or experts.~@:>~%"
                         old-version old-pathname version pathname))))
             nil))))) ;; only issue the warning the first time, but always return nil

  (defun locate-system (name)
    "Given a system NAME designator, try to locate where to load the system from.
Returns five values: FOUNDP FOUND-SYSTEM PATHNAME PREVIOUS PREVIOUS-TIME
FOUNDP is true when a system was found,
either a new unregistered one or a previously registered one.
FOUND-SYSTEM when not null is a SYSTEM object that may be REGISTER-SYSTEM'ed.
PATHNAME when not null is a path from which to load the system,
either associated with FOUND-SYSTEM, or with the PREVIOUS system.
PREVIOUS when not null is a previously loaded SYSTEM object of same name.
PREVIOUS-TIME when not null is the time at which the PREVIOUS system was loaded."
    (with-asdf-cache () ;; NB: We don't cache the results. We once used to, but it wasn't useful,
      ;; and keeping a negative cache was a bug (see lp#1335323), which required
      ;; explicit invalidation in clear-system and find-system (when unsucccessful).
      (let* ((name (coerce-name name))
             (in-memory (system-registered-p name)) ; load from disk if absent or newer on disk
             (previous (cdr in-memory))
             (previous (and (typep previous 'system) previous))
             (previous-time (car in-memory))
             (found (search-for-system-definition name))
             (found-system (and (typep found 'system) found))
             (pathname (ensure-pathname
                        (or (and (typep found '(or pathname string)) (pathname found))
                            (system-source-file found-system)
                            (system-source-file previous))
                        :want-absolute t :resolve-symlinks *resolve-symlinks*))
             (foundp (and (or found-system pathname previous) t)))
        (check-type found (or null pathname system))
        (unless (check-not-old-asdf-system name pathname)
          (check-type previous system) ;; asdf is preloaded, so there should be a previous one.
          (setf found-system nil pathname nil))
        (values foundp found-system pathname previous previous-time))))

  ;; Main method for find-system: first, make sure the computation is memoized in a session cache.
  ;; unless the system is immutable, use locate-system to find the primary system;
  ;; reconcile the finding (if any) with any previous definition (in a previous session,
  ;; preloaded, with a previous configuration, or before filesystem changes), and
  ;; load a found .asd if appropriate. Finally, update registration table and return results.
  (defmethod find-system ((name string) &optional (error-p t))
    (with-asdf-cache (:key `(find-system ,name))
      (let ((primary-name (primary-system-name name)))
        (unless (equal name primary-name)
          (find-system primary-name nil)))
      (or (and *immutable-systems* (gethash name *immutable-systems*) (registered-system name))
          (multiple-value-bind (foundp found-system pathname previous previous-time)
              (locate-system name)
            (assert (eq foundp (and (or found-system pathname previous) t)))
            (let ((previous-pathname (system-source-file previous))
                  (system (or previous found-system)))
              (when (and found-system (not previous))
                (register-system found-system))
              (when (and system pathname)
                (setf (system-source-file system) pathname))
              (when (and pathname
                         (let ((stamp (get-file-stamp pathname)))
                           (and stamp
                                (not (and previous
                                          (or (pathname-equal pathname previous-pathname)
                                              (and pathname previous-pathname
                                                   (pathname-equal
                                                    (physicalize-pathname pathname)
                                                    (physicalize-pathname previous-pathname))))
                                          (stamp<= stamp previous-time))))))
                ;; Only load when it's a pathname that is different or has newer content.
                (load-asd pathname :name name)))
            ;; Try again after having loaded from disk if needed
            (let ((in-memory (system-registered-p name)))
              (cond
                (in-memory
                 (when pathname
                   (setf (car in-memory) (get-file-stamp pathname)))
                 (cdr in-memory))
                (error-p
                 (error 'missing-component :requires name))
                (t
                 (return-from find-system nil)))))))))
;;;; -------------------------------------------------------------------------
;;;; Finding components

(uiop/package:define-package :asdf/find-component
  (:recycle :asdf/find-component :asdf)
  (:use :uiop/common-lisp :uiop :asdf/upgrade :asdf/cache
   :asdf/component :asdf/system :asdf/find-system)
  (:export
   #:find-component
   #:resolve-dependency-name #:resolve-dependency-spec
   #:resolve-dependency-combination
   ;; Conditions
   #:missing-component #:missing-component-of-version #:retry
   #:missing-dependency #:missing-dependency-of-version
   #:missing-requires #:missing-parent
   #:missing-required-by #:missing-version))
(in-package :asdf/find-component)

;;;; Missing component conditions

(with-upgradability ()
  (define-condition missing-component-of-version (missing-component)
    ((version :initform nil :reader missing-version :initarg :version)))

  (define-condition missing-dependency (missing-component)
    ((required-by :initarg :required-by :reader missing-required-by)))

  (defmethod print-object ((c missing-dependency) s)
    (format s (compatfmt "~@<~A, required by ~A~@:>")
            (call-next-method c nil) (missing-required-by c)))

  (define-condition missing-dependency-of-version (missing-dependency
                                                   missing-component-of-version)
    ())

  (defmethod print-object ((c missing-component) s)
    (format s (compatfmt "~@<Component ~S not found~@[ in ~A~]~@:>")
            (missing-requires c)
            (when (missing-parent c)
              (coerce-name (missing-parent c)))))

  (defmethod print-object ((c missing-component-of-version) s)
    (format s (compatfmt "~@<Component ~S does not match version ~A~@[ in ~A~]~@:>")
            (missing-requires c)
            (missing-version c)
            (when (missing-parent c)
              (coerce-name (missing-parent c))))))


;;;; Finding components

(with-upgradability ()
  (defgeneric find-component (base path &key registered)
    (:documentation "Find a component by resolving the PATH starting from BASE parent.
If REGISTERED is true, only search currently registered systems."))
  (defgeneric resolve-dependency-combination (component combinator arguments)
    (:documentation "Return a component satisfying the dependency specification (COMBINATOR . ARGUMENTS)
in the context of COMPONENT"))

  ;; Methods for find-component

  ;; If the base component is a string, resolve it as a system, then if not nil follow the path.
  (defmethod find-component ((base string) path &key registered)
    (if-let ((s (if registered
                    (registered-system base)
                    (find-system base nil))))
      (find-component s path :registered registered)))

  ;; If the base component is a symbol, coerce it to a name if not nil, and resolve that.
  ;; If nil, use the path as base if not nil, or else return nil.
  (defmethod find-component ((base symbol) path &key registered)
    (cond
      (base (find-component (coerce-name base) path :registered registered))
      (path (find-component path nil :registered registered))
      (t    nil)))

  ;; If the base component is a cons cell, resolve its car, and add its cdr to the path.
  (defmethod find-component ((base cons) path &key registered)
    (find-component (car base) (cons (cdr base) path) :registered registered))

  ;; If the base component is a parent-component and the path a string, find the named child.
  (defmethod find-component ((parent parent-component) (name string) &key registered)
    (declare (ignorable registered))
    (compute-children-by-name parent :only-if-needed-p t)
    (values (gethash name (component-children-by-name parent))))

  ;; If the path is a symbol, coerce it to a name if non-nil, or else just return the base.
  (defmethod find-component (base (name symbol) &key registered)
    (if name
        (find-component base (coerce-name name) :registered registered)
        base))

  ;; If the path is a cons, first resolve its car as path, then its cdr.
  (defmethod find-component ((c component) (name cons) &key registered)
    (find-component (find-component c (car name) :registered registered)
                    (cdr name) :registered registered))

  ;; If the path is a component, return it, disregarding the base.
  (defmethod find-component ((base t) (actual component) &key registered)
    (declare (ignorable registered))
    actual)

  ;; Resolve dependency NAME in the context of a COMPONENT, with given optional VERSION constraint.
  ;; This (private) function is used below by RESOLVE-DEPENDENCY-SPEC and by the :VERSION spec.
  (defun resolve-dependency-name (component name &optional version)
    (loop
      (restart-case
          (return
            (let ((comp (find-component (component-parent component) name)))
              (unless comp
                (error 'missing-dependency
                       :required-by component
                       :requires name))
              (when version
                (unless (version-satisfies comp version)
                  (error 'missing-dependency-of-version
                         :required-by component
                         :version version
                         :requires name)))
              comp))
        (retry ()
          :report (lambda (s)
                    (format s (compatfmt "~@<Retry loading ~3i~_~A.~@:>") name))
          :test
          (lambda (c)
            (or (null c)
                (and (typep c 'missing-dependency)
                     (eq (missing-required-by c) component)
                     (equal (missing-requires c) name))))
          (unless (component-parent component)
            (let ((name (coerce-name name)))
              (unset-asdf-cache-entry `(find-system ,name))))))))

  ;; Resolve dependency specification DEP-SPEC in the context of COMPONENT.
  ;; This is notably used by MAP-DIRECT-DEPENDENCIES to process the results of COMPONENT-DEPENDS-ON
  ;; and by PARSE-DEFSYSTEM to process DEFSYSTEM-DEPENDS-ON.
  (defun resolve-dependency-spec (component dep-spec)
    (let ((component (find-component () component)))
      (if (atom dep-spec)
          (resolve-dependency-name component dep-spec)
          (resolve-dependency-combination component (car dep-spec) (cdr dep-spec)))))

  ;; Methods for RESOLVE-DEPENDENCY-COMBINATION to parse lists as dependency specifications.
  (defmethod resolve-dependency-combination (component combinator arguments)
    (parameter-error (compatfmt "~@<In ~S, bad dependency ~S for ~S~@:>")
                     'resolve-dependency-combination (cons combinator arguments) component))

  (defmethod resolve-dependency-combination (component (combinator (eql :feature)) arguments)
    (when (featurep (first arguments))
      (resolve-dependency-spec component (second arguments))))

  (defmethod resolve-dependency-combination (component (combinator (eql :version)) arguments)
    (resolve-dependency-name component (first arguments) (second arguments)))) ;; See lp#527788

;;;; -------------------------------------------------------------------------
;;;; Operations

(uiop/package:define-package :asdf/operation
  (:recycle :asdf/operation :asdf/action :asdf) ;; asdf/action for FEATURE pre 2.31.5.
  (:use :uiop/common-lisp :uiop :asdf/upgrade :asdf/find-system)
  (:export
   #:operation
   #:*operations* #:make-operation #:find-operation
   #:feature)) ;; TODO: stop exporting the deprecated FEATURE feature.
(in-package :asdf/operation)

;;; Operation Classes
(when-upgrading (:version "2.27" :when (find-class 'operation nil))
  ;; override any obsolete shared-initialize method when upgrading from ASDF2.
  (defmethod shared-initialize :after ((o operation) (slot-names t) &key)
    (values)))

(with-upgradability ()
  (defclass operation ()
    ()
    (:documentation "The base class for all ASDF operations.

ASDF does NOT and never did distinguish between multiple operations of the same class.
Therefore, all slots of all operations MUST have :allocation :class and no initargs. No exceptions.
"))

  (defvar *in-make-operation* nil)

  (defun check-operation-constructor ()
    "Enforce that OPERATION instances must be created with MAKE-OPERATION."
    (unless *in-make-operation*
      (sysdef-error "OPERATION instances must only be created through MAKE-OPERATION.")))

  (defmethod print-object ((o operation) stream)
    (print-unreadable-object (o stream :type t :identity nil)))

  ;;; Override previous methods (from 3.1.7 and earlier) and add proper error checking.
  (defmethod initialize-instance :after ((o operation) &rest initargs &key &allow-other-keys)
    (unless (null initargs)
      (parameter-error "~S does not accept initargs" 'operation))))


;;; make-operation, find-operation

(with-upgradability ()
  ;; A table to memoize instances of a given operation. There shall be only one.
  (defparameter* *operations* (make-hash-table :test 'equal))

  ;; A memoizing way of creating instances of operation.
  (defun make-operation (operation-class)
    "This function creates and memoizes an instance of OPERATION-CLASS.
All operation instances MUST be created through this function.

Use of INITARGS is not supported at this time."
    (let ((class (coerce-class operation-class
                               :package :asdf/interface :super 'operation :error 'sysdef-error))
          (*in-make-operation* t))
      (ensure-gethash class *operations* `(make-instance ,class))))

  ;; This function is mostly for backward and forward compatibility:
  ;; operations used to preserve the operation-original-initargs of the context,
  ;; and may in the future preserve some operation-canonical-initargs.
  ;; Still, the treatment of NIL as a disabling context is useful in some cases.
  (defgeneric find-operation (context spec)
    (:documentation "Find an operation by resolving the SPEC in the CONTEXT"))
  (defmethod find-operation ((context t) (spec operation))
    spec)
  (defmethod find-operation ((context t) (spec symbol))
    (when spec ;; NIL designates itself, i.e. absence of operation
      (make-operation spec))) ;; TODO: preserve the (operation-canonical-initargs context)
  (defmethod find-operation ((context t) (spec string))
    (make-operation spec))) ;; TODO: preserve the (operation-canonical-initargs context)

;;;; -------------------------------------------------------------------------
;;;; Actions

(uiop/package:define-package :asdf/action
  (:nicknames :asdf-action)
  (:recycle :asdf/action :asdf)
  (:use :uiop/common-lisp :uiop :asdf/upgrade
   :asdf/component :asdf/system #:asdf/cache :asdf/find-system :asdf/find-component :asdf/operation)
  (:import-from :asdf/operation #:check-operation-constructor)
  (:export
   #:action #:define-convenience-action-methods
   #:action-description
   #:downward-operation #:upward-operation #:sideway-operation #:selfward-operation #:non-propagating-operation
   #:component-depends-on
   #:input-files #:output-files #:output-file #:operation-done-p
   #:action-status #:action-stamp #:action-done-p
   #:action-operation #:action-component #:make-action
   #:component-operation-time #:mark-operation-done #:compute-action-stamp
   #:perform #:perform-with-restarts #:retry #:accept
   #:action-path #:find-action #:stamp #:done-p
   #:operation-definition-warning #:operation-definition-error ;; condition
   ))
(in-package :asdf/action)

(eval-when (#-lispworks :compile-toplevel :load-toplevel :execute) ;; LispWorks issues spurious warning

  (deftype action ()
    "A pair of operation and component uniquely identifies a node in the dependency graph
of steps to be performed while building a system."
    '(cons operation component))

  (deftype operation-designator ()
    "An operation designates itself. NIL designates a context-dependent current operation,
and a class-name or class designates the canonical instance of the designated class."
    '(or operation null symbol class)))

;;; these are pseudo accessors -- let us abstract away the CONS cell representation of plan
;;; actions.
(with-upgradability ()
  (defun make-action (operation component)
    (cons operation component))
  (defun action-operation (action)
    (car action))
  (defun action-component (action)
    (cdr action)))

;;;; Reified representation for storage or debugging. Note: an action is identified by its class.
(with-upgradability ()
  (defun action-path (action)
    "A readable data structure that identifies the action."
    (let ((o (action-operation action))
          (c (action-component action)))
      (cons (type-of o) (component-find-path c))))
  (defun find-action (path)
    "Reconstitute an action from its action-path"
    (destructuring-bind (o . c) path (make-action (make-operation o) (find-component () c)))))

;;;; Convenience methods
(with-upgradability ()
  ;; A macro that defines convenience methods for a generic function (gf) that
  ;; dispatches on operation and component.  The convenience methods allow users
  ;; to call the gf with operation and/or component designators, that the
  ;; methods will resolve into actual operation and component objects, so that
  ;; the users can interact using readable designators, but developers only have
  ;; to write methods that handle operation and component objects.
  ;; FUNCTION is the generic function name
  ;; FORMALS is its list of arguments, which must include OPERATION and COMPONENT.
  ;; IF-NO-OPERATION is a form (defaults to NIL) describing what to do if no operation is found.
  ;; IF-NO-COMPONENT is a form (defaults to NIL) describing what to do if no component is found.
  (defmacro define-convenience-action-methods
      (function formals &key if-no-operation if-no-component)
    (let* ((rest (gensym "REST"))
           (found (gensym "FOUND"))
           (keyp (equal (last formals) '(&key)))
           (formals-no-key (if keyp (butlast formals) formals))
           (len (length formals-no-key))
           (operation 'operation)
           (component 'component)
           (opix (position operation formals))
           (coix (position component formals))
           (prefix (subseq formals 0 opix))
           (suffix (subseq formals (1+ coix) len))
           (more-args (when keyp `(&rest ,rest &key &allow-other-keys))))
      (assert (and (integerp opix) (integerp coix) (= coix (1+ opix))))
      (flet ((next-method (o c)
               (if keyp
                   `(apply ',function ,@prefix ,o ,c ,@suffix ,rest)
                   `(,function ,@prefix ,o ,c ,@suffix))))
        `(progn
           (defmethod ,function (,@prefix (,operation string) ,component ,@suffix ,@more-args)
             (let ((,component (find-component () ,component))) ;; do it first, for defsystem-depends-on
               ,(next-method `(safe-read-from-string ,operation :package :asdf/interface) component)))
           (defmethod ,function (,@prefix (,operation symbol) ,component ,@suffix ,@more-args)
             (if ,operation
                 ,(next-method
                   `(make-operation ,operation)
                   `(or (find-component () ,component) ,if-no-component))
                 ,if-no-operation))
           (defmethod ,function (,@prefix (,operation operation) ,component ,@suffix ,@more-args)
             (if (typep ,component 'component)
                 (error "No defined method for ~S on ~/asdf-action:format-action/"
                        ',function (make-action ,operation ,component))
                 (if-let (,found (find-component () ,component))
                    ,(next-method operation found)
                    ,if-no-component))))))))


;;;; self-description
(with-upgradability ()
  (defgeneric action-description (operation component)
    (:documentation "returns a phrase that describes performing this operation
on this component, e.g. \"loading /a/b/c\".
You can put together sentences using this phrase."))
  (defmethod action-description (operation component)
    (format nil (compatfmt "~@<~A on ~A~@:>")
            operation component))

  (defun format-action (stream action &optional colon-p at-sign-p)
    "FORMAT helper to display an action's action-description.
Use it in FORMAT control strings as ~/asdf-action:format-action/"
    (assert (null colon-p)) (assert (null at-sign-p))
    (destructuring-bind (operation . component) action
      (princ (action-description operation component) stream))))


;;;; Dependencies
(with-upgradability ()
  (defgeneric component-depends-on (operation component) ;; ASDF4: rename to component-dependencies
    (:documentation
     "Returns a list of dependencies needed by the component to perform
    the operation.  A dependency has one of the following forms:

      (<operation> <component>*), where <operation> is an operation designator
        with respect to FIND-OPERATION in the context of the OPERATION argument,
        and each <component> is a component designator with respect to
        FIND-COMPONENT in the context of the COMPONENT argument,
        and means that the component depends on
        <operation> having been performed on each <component>;

        [Note: an <operation> is an operation designator -- it can be either an
        operation name or an operation object.  Similarly, a <component> may be
        a component name or a component object.  Also note that, the degenerate
        case of (<operation>) is a no-op.]

    Methods specialized on subclasses of existing component types
    should usually append the results of CALL-NEXT-METHOD to the list."))
  (define-convenience-action-methods component-depends-on (operation component))

  (defmethod component-depends-on :around ((o operation) (c component))
    (do-asdf-cache `(component-depends-on ,o ,c)
      (call-next-method))))


;;;; upward-operation, downward-operation, sideway-operation, selfward-operation
;; These together handle actions that propagate along the component hierarchy or operation universe.
(with-upgradability ()
  (defclass downward-operation (operation)
    ((downward-operation
      :initform nil :reader downward-operation
      :type operation-designator :allocation :class))
    (:documentation "A DOWNWARD-OPERATION's dependencies propagate down the component hierarchy.
I.e., if O is a DOWNWARD-OPERATION and its DOWNWARD-OPERATION slot designates operation D, then
the action (O . M) of O on module M will depends on each of (D . C) for each child C of module M.
The default value for slot DOWNWARD-OPERATION is NIL, which designates the operation O itself.
E.g. in order for a MODULE to be loaded with LOAD-OP (resp. compiled with COMPILE-OP), all the
children of the MODULE must have been loaded with LOAD-OP (resp. compiled with COMPILE-OP."))
  (defun downward-operation-depends-on (o c)
    `((,(or (downward-operation o) o) ,@(component-children c))))
  (defmethod component-depends-on ((o downward-operation) (c parent-component))
    `(,@(downward-operation-depends-on o c) ,@(call-next-method)))

  (defclass upward-operation (operation)
    ((upward-operation
      :initform nil :reader upward-operation
      :type operation-designator :allocation :class))
    (:documentation "An UPWARD-OPERATION has dependencies that propagate up the component hierarchy.
I.e., if O is an instance of UPWARD-OPERATION, and its UPWARD-OPERATION slot designates operation U,
then the action (O . C) of O on a component C that has the parent P will depends on (U . P).
The default value for slot UPWARD-OPERATION is NIL, which designates the operation O itself.
E.g. in order for a COMPONENT to be prepared for loading or compiling with PREPARE-OP, its PARENT
must first be prepared for loading or compiling with PREPARE-OP."))
  ;; For backward-compatibility reasons, a system inherits from module and is a child-component
  ;; so we must guard against this case. ASDF4: remove that.
  (defun upward-operation-depends-on (o c)
    (if-let (p (component-parent c)) `((,(or (upward-operation o) o) ,p))))
  (defmethod component-depends-on ((o upward-operation) (c child-component))
    `(,@(upward-operation-depends-on o c) ,@(call-next-method)))

  (defclass sideway-operation (operation)
    ((sideway-operation
      :initform nil :reader sideway-operation
      :type operation-designator :allocation :class))
    (:documentation "A SIDEWAY-OPERATION has dependencies that propagate \"sideway\" to siblings
that a component depends on. I.e. if O is a SIDEWAY-OPERATION, and its SIDEWAY-OPERATION slot
designates operation S (where NIL designates O itself), then the action (O . C) of O on component C
depends on each of (S . D) where D is a declared dependency of C.
E.g. in order for a COMPONENT to be prepared for loading or compiling with PREPARE-OP,
each of its declared dependencies must first be loaded as by LOAD-OP."))
  (defun sideway-operation-depends-on (o c)
    `((,(or (sideway-operation o) o) ,@(component-sideway-dependencies c))))
  (defmethod component-depends-on ((o sideway-operation) (c component))
    `(,@(sideway-operation-depends-on o c) ,@(call-next-method)))

  (defclass selfward-operation (operation)
    ((selfward-operation
      ;; NB: no :initform -- if an operation depends on others, it must explicitly specify which
      :type (or operation-designator list) :reader selfward-operation :allocation :class))
    (:documentation "A SELFWARD-OPERATION depends on another operation on the same component.
I.e., if O is a SELFWARD-OPERATION, and its SELFWARD-OPERATION designates a list of operations L,
then the action (O . C) of O on component C depends on each (S . C) for S in L.
E.g. before a component may be loaded by LOAD-OP, it must have been compiled by COMPILE-OP.
A operation-designator designates a singleton list of the designated operation;
a list of operation-designators designates the list of designated operations;
NIL is not a valid operation designator in that context.  Note that any dependency
ordering between the operations in a list of SELFWARD-OPERATION should be specified separately
in the respective operation's COMPONENT-DEPENDS-ON methods so that they be scheduled properly."))
  (defun selfward-operation-depends-on (o c)
    (loop :for op :in (ensure-list (selfward-operation o)) :collect `(,op ,c)))
  (defmethod component-depends-on ((o selfward-operation) (c component))
    `(,@(selfward-operation-depends-on o c) ,@(call-next-method)))

  (defclass non-propagating-operation (operation)
    ()
    (:documentation "A NON-PROPAGATING-OPERATION is an operation that propagates
no dependencies whatsoever.  It is supplied in order that the programmer be able
to specify that s/he is intentionally specifying an operation which invokes no
dependencies.")))


;;;---------------------------------------------------------------------------
;;; Help programmers catch obsolete OPERATION subclasses
;;;---------------------------------------------------------------------------
(with-upgradability ()
  (define-condition operation-definition-warning (simple-warning)
    ()
    (:documentation "Warning condition related to definition of obsolete OPERATION objects."))

  (define-condition operation-definition-error (simple-error)
    ()
    (:documentation "Error condition related to definition of incorrect OPERATION objects."))

  (defmethod initialize-instance :before ((o operation) &key)
    (check-operation-constructor)
    (unless (typep o '(or downward-operation upward-operation sideway-operation
                          selfward-operation non-propagating-operation))
      (warn 'operation-definition-warning
            :format-control
            "No dependency propagating scheme specified for operation class ~S.
The class needs to be updated for ASDF 3.1 and specify appropriate propagation mixins."
            :format-arguments (list (type-of o)))))

  (defmethod initialize-instance :before ((o non-propagating-operation) &key)
    (when (typep o '(or downward-operation upward-operation sideway-operation selfward-operation))
      (error 'operation-definition-error
             :format-control
             "Inconsistent class: ~S
  NON-PROPAGATING-OPERATION is incompatible with propagating operation classes as superclasses."
             :format-arguments
             (list (type-of o)))))

  (defun backward-compatible-depends-on (o c)
    "DEPRECATED: all subclasses of OPERATION used in ASDF should inherit from one of
 DOWNWARD-OPERATION UPWARD-OPERATION SIDEWAY-OPERATION SELFWARD-OPERATION NON-PROPAGATING-OPERATION.
 The function BACKWARD-COMPATIBLE-DEPENDS-ON temporarily provides ASDF2 behaviour for those that
 don't. In the future this functionality will be removed, and the default will be no propagation."
    (uiop/version::notify-deprecated-function
     (version-deprecation *asdf-version* :style-warning "3.2")
     'backward-compatible-depends-on)
    `(,@(sideway-operation-depends-on o c)
      ,@(when (typep c 'parent-component) (downward-operation-depends-on o c))))

  (defmethod component-depends-on ((o operation) (c component))
    `(;; Normal behavior, to allow user-specified in-order-to dependencies
      ,@(cdr (assoc (type-of o) (component-in-order-to c)))
        ;; For backward-compatibility with ASDF2, any operation that doesn't specify propagation
        ;; or non-propagation through an appropriate mixin will be downward and sideway.
        ,@(unless (typep o '(or downward-operation upward-operation sideway-operation
                             selfward-operation non-propagating-operation))
            (backward-compatible-depends-on o c))))

  (defmethod downward-operation ((o operation)) nil)
  (defmethod sideway-operation ((o operation)) nil))


;;;---------------------------------------------------------------------------
;;; End of OPERATION class checking
;;;---------------------------------------------------------------------------


;;;; Inputs, Outputs, and invisible dependencies
(with-upgradability ()
  (defgeneric output-files (operation component)
    (:documentation "Methods for this function return two values: a list of output files
corresponding to this action, and a boolean indicating if they have already been subjected
to relevant output translations and should not be further translated.

Methods on PERFORM *must* call this function to determine where their outputs are to be located.
They may rely on the order of the files to discriminate between outputs.
"))
  (defgeneric input-files (operation component)
    (:documentation "A list of input files corresponding to this action.

Methods on PERFORM *must* call this function to determine where their inputs are located.
They may rely on the order of the files to discriminate between inputs.
"))
  (defgeneric operation-done-p (operation component)
    (:documentation "Returns a boolean which is NIL if the action must be performed (again)."))
  (define-convenience-action-methods output-files (operation component))
  (define-convenience-action-methods input-files (operation component))
  (define-convenience-action-methods operation-done-p (operation component))

  (defmethod operation-done-p ((o operation) (c component))
    t)

  ;; Translate output files, unless asked not to. Memoize the result.
  (defmethod output-files :around ((operation t) (component t))
    (do-asdf-cache `(output-files ,operation ,component)
      (values
       (multiple-value-bind (pathnames fixedp) (call-next-method)
         ;; 1- Make sure we have absolute pathnames
         (let* ((directory (pathname-directory-pathname
                            (component-pathname (find-component () component))))
                (absolute-pathnames
                  (loop
                    :for pathname :in pathnames
                    :collect (ensure-absolute-pathname pathname directory))))
           ;; 2- Translate those pathnames as required
           (if fixedp
               absolute-pathnames
               (mapcar *output-translation-function* absolute-pathnames))))
       t)))
  (defmethod output-files ((o operation) (c component))
    nil)
  (defun output-file (operation component)
    "The unique output file of performing OPERATION on COMPONENT"
    (let ((files (output-files operation component)))
      (assert (length=n-p files 1))
      (first files)))

  ;; Memoize input files.
  (defmethod input-files :around (operation component)
    (do-asdf-cache `(input-files ,operation ,component)
      (call-next-method)))

  ;; By default an action has no input-files.
  (defmethod input-files ((o operation) (c component))
    nil)

  ;; An action with a selfward-operation by default gets its input-files from the output-files of
  ;; the actions using selfward-operations it depends on (and the same component),
  ;; or if there are none, on the component-pathname of the component if it's a file
  ;; -- and then on the results of the next-method.
  (defmethod input-files ((o selfward-operation) (c component))
    `(,@(or (loop :for dep-o :in (ensure-list (selfward-operation o))
                  :append (or (output-files dep-o c) (input-files dep-o c)))
            (if-let ((pathname (component-pathname c)))
              (and (file-pathname-p pathname) (list pathname))))
      ,@(call-next-method))))


;;;; Done performing
(with-upgradability ()
  ;; ASDF4: hide it behind plan-action-stamp
  (defgeneric component-operation-time (operation component)
    (:documentation "Return the timestamp for when an action was last performed"))
  (defgeneric (setf component-operation-time) (time operation component)
    (:documentation "Update the timestamp for when an action was last performed"))
  (define-convenience-action-methods component-operation-time (operation component))

  ;; ASDF4: hide it behind (setf plan-action-stamp)
  (defgeneric mark-operation-done (operation component)
    (:documentation "Mark a action as having been just done.

Updates the action's COMPONENT-OPERATION-TIME to match the COMPUTE-ACTION-STAMP
using the JUST-DONE flag."))
  (defgeneric compute-action-stamp (plan operation component &key just-done)
    (:documentation "Has this action been successfully done already,
and at what known timestamp has it been done at or will it be done at?
* PLAN is a plan object modelling future effects of actions,
  or NIL to denote what actually happened.
* OPERATION and COMPONENT denote the action.
Takes keyword JUST-DONE:
* JUST-DONE is a boolean that is true if the action was just successfully performed,
  at which point we want compute the actual stamp and warn if files are missing;
  otherwise we are making plans, anticipating the effects of the action.
Returns two values:
* a STAMP saying when it was done or will be done,
  or T if the action involves files that need to be recomputed.
* a boolean DONE-P that indicates whether the action has actually been done,
  and both its output-files and its in-image side-effects are up to date."))

  (defclass action-status ()
    ((stamp
      :initarg :stamp :reader action-stamp
      :documentation "STAMP associated with the ACTION if it has been completed already
in some previous image, or T if it needs to be done.")
     (done-p
      :initarg :done-p :reader action-done-p
      :documentation "a boolean, true iff the action was already done (before any planned action)."))
    (:documentation "Status of an action"))

  (defmethod print-object ((status action-status) stream)
    (print-unreadable-object (status stream :type t)
      (with-slots (stamp done-p) status
        (format stream "~@{~S~^ ~}" :stamp stamp :done-p done-p))))

  (defmethod component-operation-time ((o operation) (c component))
    (gethash o (component-operation-times c)))

  (defmethod (setf component-operation-time) (stamp (o operation) (c component))
    (setf (gethash o (component-operation-times c)) stamp))

  (defmethod mark-operation-done ((o operation) (c component))
    (setf (component-operation-time o c) (compute-action-stamp nil o c :just-done t))))


;;;; Perform
(with-upgradability ()
  (defgeneric perform (operation component)
    (:documentation "PERFORM an action, consuming its input-files and building its output-files"))
  (define-convenience-action-methods perform (operation component))

  (defmethod perform :before ((o operation) (c component))
    (ensure-all-directories-exist (output-files o c)))
  (defmethod perform :after ((o operation) (c component))
    (mark-operation-done o c))
  (defmethod perform ((o operation) (c parent-component))
    nil)
  (defmethod perform ((o operation) (c source-file))
    ;; For backward compatibility, don't error on operations that don't specify propagation.
    (when (typep o '(or downward-operation upward-operation sideway-operation
                     selfward-operation non-propagating-operation))
      (sysdef-error
       (compatfmt "~@<Required method ~S not implemented for ~/asdf-action:format-action/~@:>")
       'perform (make-action o c))))

  ;; The restarts of the perform-with-restarts variant matter in an interactive context.
  ;; The retry strategies of p-w-r itself, and/or the background workers of a multiprocess build
  ;; may call perform directly rather than call p-w-r.
  (defgeneric perform-with-restarts (operation component)
    (:documentation "PERFORM an action in a context where suitable restarts are in place."))
  (defmethod perform-with-restarts (operation component)
    (perform operation component))
  (defmethod perform-with-restarts :around (operation component)
    (loop
      (restart-case
          (return (call-next-method))
        (retry ()
          :report
          (lambda (s)
            (format s (compatfmt "~@<Retry ~A.~@:>")
                    (action-description operation component))))
        (accept ()
          :report
          (lambda (s)
            (format s (compatfmt "~@<Continue, treating ~A as having been successful.~@:>")
                    (action-description operation component)))
          (mark-operation-done operation component)
          (return))))))
;;;; -------------------------------------------------------------------------
;;;; Actions to build Common Lisp software

(uiop/package:define-package :asdf/lisp-action
  (:recycle :asdf/lisp-action :asdf)
  (:use :uiop/common-lisp :uiop :asdf/upgrade :asdf/cache
   :asdf/component :asdf/system :asdf/find-component :asdf/find-system
   :asdf/operation :asdf/action)
  (:export
   #:try-recompiling
   #:cl-source-file #:cl-source-file.cl #:cl-source-file.lsp
   #:basic-load-op #:basic-compile-op
   #:load-op #:prepare-op #:compile-op #:test-op #:load-source-op #:prepare-source-op
   #:call-with-around-compile-hook
   #:perform-lisp-compilation #:perform-lisp-load-fasl #:perform-lisp-load-source
   #:lisp-compilation-output-files))
(in-package :asdf/lisp-action)


;;;; Component classes
(with-upgradability ()
  (defclass cl-source-file (source-file)
    ((type :initform "lisp"))
    (:documentation "Component class for a Common Lisp source file (using type \"lisp\")"))
  (defclass cl-source-file.cl (cl-source-file)
    ((type :initform "cl"))
    (:documentation "Component class for a Common Lisp source file using type \"cl\""))
  (defclass cl-source-file.lsp (cl-source-file)
    ((type :initform "lsp"))
    (:documentation "Component class for a Common Lisp source file using type \"lsp\"")))


;;;; Operation classes
(with-upgradability ()
  (defclass basic-load-op (operation) ()
    (:documentation "Base class for operations that apply the load-time effects of a file"))
  (defclass basic-compile-op (operation) ()
    (:documentation "Base class for operations that apply the compile-time effects of a file")))


;;; Our default operations: loading into the current lisp image
(with-upgradability ()
  (defclass prepare-op (upward-operation sideway-operation)
    ((sideway-operation :initform 'load-op :allocation :class))
    (:documentation "Load the dependencies for the COMPILE-OP or LOAD-OP of a given COMPONENT."))
  (defclass load-op (basic-load-op downward-operation selfward-operation)
    ;; NB: even though compile-op depends on prepare-op it is not needed-in-image-p,
    ;; so we need to directly depend on prepare-op for its side-effects in the current image.
    ((selfward-operation :initform '(prepare-op compile-op) :allocation :class))
    (:documentation "Operation for loading the compiled FASL for a Lisp file"))
  (defclass compile-op (basic-compile-op downward-operation selfward-operation)
    ((selfward-operation :initform 'prepare-op :allocation :class))
    (:documentation "Operation for compiling a Lisp file to a FASL"))


  (defclass prepare-source-op (upward-operation sideway-operation)
    ((sideway-operation :initform 'load-source-op :allocation :class))
    (:documentation "Operation for loading the dependencies of a Lisp file as source."))
  (defclass load-source-op (basic-load-op downward-operation selfward-operation)
    ((selfward-operation :initform 'prepare-source-op :allocation :class))
    (:documentation "Operation for loading a Lisp file as source."))

  (defclass test-op (selfward-operation)
    ((selfward-operation :initform 'load-op :allocation :class))
    (:documentation "Operation for running the tests for system.
If the tests fail, an error will be signaled.")))


;;;; Methods for prepare-op, compile-op and load-op

;;; prepare-op
(with-upgradability ()
  (defmethod action-description ((o prepare-op) (c component))
    (format nil (compatfmt "~@<loading dependencies of ~3i~_~A~@:>") c))
  (defmethod perform ((o prepare-op) (c component))
    nil)
  (defmethod input-files ((o prepare-op) (s system))
    (if-let (it (system-source-file s)) (list it))))

;;; compile-op
(with-upgradability ()
  (defmethod action-description ((o compile-op) (c component))
    (format nil (compatfmt "~@<compiling ~3i~_~A~@:>") c))
  (defmethod action-description ((o compile-op) (c parent-component))
    (format nil (compatfmt "~@<completing compilation for ~3i~_~A~@:>") c))
  (defgeneric call-with-around-compile-hook (component thunk)
    (:documentation "A method to be called around the PERFORM'ing of actions that apply the
compile-time side-effects of file (i.e., COMPILE-OP or LOAD-SOURCE-OP). This method can be used
to setup readtables and other variables that control reading, macroexpanding, and compiling, etc.
Note that it will NOT be called around the performing of LOAD-OP."))
  (defmethod call-with-around-compile-hook ((c component) function)
    (call-around-hook (around-compile-hook c) function))
  (defun perform-lisp-compilation (o c)
    "Perform the compilation of the Lisp file associated to the specified action (O . C)."
    (let (;; Before 2.26.53, that was unfortunately component-pathname. Now,
          ;; we consult input-files, the first of which should be the one to compile-file
          (input-file (first (input-files o c)))
          ;; On some implementations, there are more than one output-file,
          ;; but the first one should always be the primary fasl that gets loaded.
          (outputs (output-files o c)))
      (multiple-value-bind (output warnings-p failure-p)
          (destructuring-bind
              (output-file
               &optional
                 #+(or clasp ecl mkcl) object-file
                 #+clisp lib-file
                 warnings-file &rest rest) outputs
            ;; Allow for extra outputs that are not of type warnings-file
            ;; The way we do it is kludgy. In ASDF4, output-files shall not be positional.
            (declare (ignore rest))
            (when warnings-file
              (unless (equal (pathname-type warnings-file) (warnings-file-type))
                (setf warnings-file nil)))
            (call-with-around-compile-hook
             c #'(lambda (&rest flags)
                   (apply 'compile-file* input-file
                          :output-file output-file
                          :external-format (component-external-format c)
                          :warnings-file warnings-file
                          (append
                           #+clisp (list :lib-file lib-file)
                           #+(or clasp ecl mkcl) (list :object-file object-file)
                           flags)))))
        (check-lisp-compile-results output warnings-p failure-p
                                    "~/asdf-action::format-action/" (list (cons o c))))))
  (defun report-file-p (f)
    "Is F a build report file containing, e.g., warnings to check?"
    (equalp (pathname-type f) "build-report"))
  (defun perform-lisp-warnings-check (o c)
    "Check the warnings associated with the dependencies of an action."
    (let* ((expected-warnings-files (remove-if-not #'warnings-file-p (input-files o c)))
           (actual-warnings-files (loop :for w :in expected-warnings-files
                                        :when (get-file-stamp w)
                                          :collect w
                                        :else :do (warn "Missing warnings file ~S while ~A"
                                                        w (action-description o c)))))
      (check-deferred-warnings actual-warnings-files)
      (let* ((output (output-files o c))
             (report (find-if #'report-file-p output)))
        (when report
          (with-open-file (s report :direction :output :if-exists :supersede)
            (format s ":success~%"))))))
  (defmethod perform ((o compile-op) (c cl-source-file))
    (perform-lisp-compilation o c))
  (defun lisp-compilation-output-files (o c)
    "Compute the output-files for compiling the Lisp file for the specified action (O . C),
an OPERATION and a COMPONENT."
    (let* ((i (first (input-files o c)))
           (f (compile-file-pathname
               i #+clasp :output-type #+ecl :type #+(or clasp ecl) :fasl
               #+mkcl :fasl-p #+mkcl t)))
      `(,f ;; the fasl is the primary output, in first position
        #+clasp
        ,@(unless nil ;; was (use-ecl-byte-compiler-p)
            `(,(compile-file-pathname i :output-type :object)))
        #+clisp
        ,@`(,(make-pathname :type "lib" :defaults f))
        #+ecl
        ,@(unless (use-ecl-byte-compiler-p)
            `(,(compile-file-pathname i :type :object)))
        #+mkcl
        ,(compile-file-pathname i :fasl-p nil) ;; object file
        ,@(when (and *warnings-file-type* (not (builtin-system-p (component-system c))))
            `(,(make-pathname :type *warnings-file-type* :defaults f))))))
  (defmethod output-files ((o compile-op) (c cl-source-file))
    (lisp-compilation-output-files o c))
  (defmethod perform ((o compile-op) (c static-file))
    nil)

  ;; Performing compile-op on a system will check the deferred warnings for the system
  (defmethod perform ((o compile-op) (c system))
    (when (and *warnings-file-type* (not (builtin-system-p c)))
      (perform-lisp-warnings-check o c)))
  (defmethod input-files ((o compile-op) (c system))
    (when (and *warnings-file-type* (not (builtin-system-p c)))
      ;; The most correct way to do it would be to use:
      ;; (traverse-sub-actions o c :other-systems nil :keep-operation 'compile-op :keep-component 'cl-source-file)
      ;; but it's expensive and we don't care too much about file order or ASDF extensions.
      (loop :for sub :in (sub-components c :type 'cl-source-file)
            :nconc (remove-if-not 'warnings-file-p (output-files o sub)))))
  (defmethod output-files ((o compile-op) (c system))
    (when (and *warnings-file-type* (not (builtin-system-p c)))
      (if-let ((pathname (component-pathname c)))
        (list (subpathname pathname (coerce-filename c) :type "build-report"))))))

;;; load-op
(with-upgradability ()
  (defmethod action-description ((o load-op) (c cl-source-file))
    (format nil (compatfmt "~@<loading FASL for ~3i~_~A~@:>") c))
  (defmethod action-description ((o load-op) (c parent-component))
    (format nil (compatfmt "~@<completing load for ~3i~_~A~@:>") c))
  (defmethod action-description ((o load-op) (c component))
    (format nil (compatfmt "~@<loading ~3i~_~A~@:>") c))
  (defmethod perform-with-restarts ((o load-op) (c cl-source-file))
    (loop
      (restart-case
          (return (call-next-method))
        (try-recompiling ()
          :report (lambda (s)
                    (format s "Recompile ~a and try loading it again"
                            (component-name c)))
          (perform (find-operation o 'compile-op) c)))))
  (defun perform-lisp-load-fasl (o c)
    "Perform the loading of a FASL associated to specified action (O . C),
an OPERATION and a COMPONENT."
    (if-let (fasl (first (input-files o c)))
      (load* fasl)))
  (defmethod perform ((o load-op) (c cl-source-file))
    (perform-lisp-load-fasl o c))
  (defmethod perform ((o load-op) (c static-file))
    nil))


;;;; prepare-source-op, load-source-op

;;; prepare-source-op
(with-upgradability ()
  (defmethod action-description ((o prepare-source-op) (c component))
    (format nil (compatfmt "~@<loading source for dependencies of ~3i~_~A~@:>") c))
  (defmethod input-files ((o prepare-source-op) (s system))
    (if-let (it (system-source-file s)) (list it)))
  (defmethod perform ((o prepare-source-op) (c component))
    nil))

;;; load-source-op
(with-upgradability ()
  (defmethod action-description ((o load-source-op) (c component))
    (format nil (compatfmt "~@<Loading source of ~3i~_~A~@:>") c))
  (defmethod action-description ((o load-source-op) (c parent-component))
    (format nil (compatfmt "~@<Loaded source of ~3i~_~A~@:>") c))
  (defun perform-lisp-load-source (o c)
    "Perform the loading of a Lisp file as associated to specified action (O . C)"
    (call-with-around-compile-hook
     c #'(lambda ()
           (load* (first (input-files o c))
                  :external-format (component-external-format c)))))

  (defmethod perform ((o load-source-op) (c cl-source-file))
    (perform-lisp-load-source o c))
  (defmethod perform ((o load-source-op) (c static-file))
    nil))


;;;; test-op
(with-upgradability ()
  (defmethod perform ((o test-op) (c component))
    nil)
  (defmethod operation-done-p ((o test-op) (c system))
    "Testing a system is _never_ done."
    nil))
;;;; -------------------------------------------------------------------------
;;;; Plan

(uiop/package:define-package :asdf/plan
  (:recycle :asdf/plan :asdf)
  (:use :uiop/common-lisp :uiop :asdf/upgrade
   :asdf/component :asdf/operation :asdf/system
   :asdf/cache :asdf/find-system :asdf/find-component
   :asdf/operation :asdf/action :asdf/lisp-action)
  (:export
   #:component-operation-time
   #:plan #:plan-traversal #:sequential-plan #:*default-plan-class*
   #:planned-action-status #:plan-action-status #:action-already-done-p
   #:circular-dependency #:circular-dependency-actions
   #:needed-in-image-p
   #:action-index #:action-planned-p #:action-valid-p
   #:plan-record-dependency
   #:normalize-forced-systems #:action-forced-p #:action-forced-not-p
   #:map-direct-dependencies #:reduce-direct-dependencies #:direct-dependencies
   #:compute-action-stamp #:traverse-action
   #:circular-dependency #:circular-dependency-actions
   #:call-while-visiting-action #:while-visiting-action
   #:make-plan #:plan-actions #:perform-plan #:plan-operates-on-p
   #:planned-p #:index #:forced #:forced-not #:total-action-count
   #:planned-action-count #:planned-output-action-count #:visited-actions
   #:visiting-action-set #:visiting-action-list #:plan-actions-r
   #:required-components #:filtered-sequential-plan
   #:plan-system
   #:plan-action-filter #:plan-component-type #:plan-keep-operation #:plan-keep-component
   #:traverse-actions #:traverse-sub-actions))
(in-package :asdf/plan)

;;;; Generic plan traversal class
(with-upgradability ()
  (defclass plan () ()
    (:documentation "Base class for a plan based on which ASDF can build a system"))
  (defclass plan-traversal (plan)
    (;; The system for which the plan is computed
     (system :initform nil :initarg :system :accessor plan-system)
     ;; Table of systems specified via :force arguments
     (forced :initform nil :initarg :force :accessor plan-forced)
     ;; Table of systems specified via :force-not argument (and/or immutable)
     (forced-not :initform nil :initarg :force-not :accessor plan-forced-not)
     ;; Counts of total actions in plan
     (total-action-count :initform 0 :accessor plan-total-action-count)
     ;; Count of actions that need to be performed
     (planned-action-count :initform 0 :accessor plan-planned-action-count)
     ;; Count of actions that need to be performed that have a non-empty list of output-files.
     (planned-output-action-count :initform 0 :accessor plan-planned-output-action-count)
     ;; Table that to actions already visited while walking the dependencies associates status
     (visited-actions :initform (make-hash-table :test 'equal) :accessor plan-visited-actions)
     ;; Actions that depend on those being currently walked through, to detect circularities
     (visiting-action-set ;; as a set
      :initform (make-hash-table :test 'equal) :accessor plan-visiting-action-set)
     (visiting-action-list :initform () :accessor plan-visiting-action-list)) ;; as a list
    (:documentation "Base class for plans that simply traverse dependencies")))


;;;; Planned action status
(with-upgradability ()
  (defgeneric plan-action-status (plan operation component)
    (:documentation "Returns the ACTION-STATUS associated to
the action of OPERATION on COMPONENT in the PLAN"))

  (defgeneric (setf plan-action-status) (new-status plan operation component)
    (:documentation "Sets the ACTION-STATUS associated to
the action of OPERATION on COMPONENT in the PLAN"))

  (defclass planned-action-status (action-status)
    ((planned-p
      :initarg :planned-p :reader action-planned-p
      :documentation "a boolean, true iff the action was included in the plan.")
     (index
      :initarg :index :reader action-index
      :documentation "an integer, counting all traversed actions in traversal order."))
    (:documentation "Status of an action in a plan"))

  (defmethod print-object ((status planned-action-status) stream)
    (print-unreadable-object (status stream :type t :identity nil)
      (with-slots (stamp done-p planned-p index) status
        (format stream "~@{~S~^ ~}" :stamp stamp :done-p done-p :planned-p planned-p :index index))))

  (defmethod action-planned-p ((action-status t))
    t) ; default method for non planned-action-status objects

  (defun action-already-done-p (plan operation component)
    "According to this plan, is this action already done and up to date?"
    (action-done-p (plan-action-status plan operation component)))

  (defmethod plan-action-status ((plan null) (o operation) (c component))
    (multiple-value-bind (stamp done-p) (component-operation-time o c)
      (make-instance 'action-status :stamp stamp :done-p done-p)))

  (defmethod (setf plan-action-status) (new-status (plan null) (o operation) (c component))
    (let ((times (component-operation-times c)))
      (if (action-done-p new-status)
          (remhash o times)
          (setf (gethash o times) (action-stamp new-status))))
    new-status))


;;;; forcing
(with-upgradability ()
  (defgeneric action-forced-p (plan operation component)
    (:documentation "Is this action forced to happen in this plan?"))
  (defgeneric action-forced-not-p (plan operation component)
    (:documentation "Is this action forced to not happen in this plan?
Takes precedence over action-forced-p."))

  (defun normalize-forced-systems (force system)
    "Given a SYSTEM on which operate is called and the specified FORCE argument,
extract a hash-set of systems that are forced, or a predicate on system names,
or NIL if none are forced, or :ALL if all are."
    (etypecase force
      ((or (member nil :all) hash-table function) force)
      (cons (list-to-hash-set (mapcar #'coerce-name force)))
      ((eql t) (when system (list-to-hash-set (list (coerce-name system)))))))

  (defun normalize-forced-not-systems (force-not system)
    "Given a SYSTEM on which operate is called, the specified FORCE-NOT argument,
and the set of IMMUTABLE systems, extract a hash-set of systems that are effectively forced-not,
or predicate on system names, or NIL if none are forced, or :ALL if all are."
    (let ((requested
            (etypecase force-not
              ((or (member nil :all) hash-table function) force-not)
              (cons (list-to-hash-set (mapcar #'coerce-name force-not)))
              ((eql t) (if system (let ((name (coerce-name system)))
                                    #'(lambda (x) (not (equal x name))))
                           :all)))))
      (if (and *immutable-systems* requested)
          #'(lambda (x) (or (call-function requested x)
                            (call-function *immutable-systems* x)))
          (or *immutable-systems* requested))))

  ;; TODO: shouldn't we be looking up the primary system name, rather than the system name?
  (defun action-override-p (plan operation component override-accessor)
    "Given a plan, an action, and a function that given the plan accesses a set of overrides
(i.e. force or force-not), see if the override applies to the current action."
    (declare (ignore operation))
    (call-function (funcall override-accessor plan)
                   (coerce-name (component-system (find-component () component)))))

  (defmethod action-forced-p (plan operation component)
    (and
     ;; Did the user ask us to re-perform the action?
     (action-override-p plan operation component 'plan-forced)
     ;; You really can't force a builtin system and :all doesn't apply to it,
     ;; except if it's the specifically the system currently being built.
     (not (let ((system (component-system component)))
            (and (builtin-system-p system)
                 (not (eq system (plan-system plan))))))))

  (defmethod action-forced-not-p (plan operation component)
    ;; Did the user ask us to not re-perform the action?
    ;; NB: force-not takes precedence over force, as it should
    (action-override-p plan operation component 'plan-forced-not))

  (defmethod action-forced-p ((plan null) (operation operation) (component component))
    nil)

  (defmethod action-forced-not-p ((plan null) (operation operation) (component component))
    nil))


;;;; action-valid-p
(with-upgradability ()
  (defgeneric action-valid-p (plan operation component)
    (:documentation "Is this action valid to include amongst dependencies?"))
  ;; :if-feature will invalidate actions on components for which the features don't apply.
  (defmethod action-valid-p ((plan t) (o operation) (c component))
    (if-let (it (component-if-feature c)) (featurep it) t))
  ;; If either the operation or component was resolved to nil, the action is invalid.
  (defmethod action-valid-p ((plan t) (o null) (c t)) nil)
  (defmethod action-valid-p ((plan t) (o t) (c null)) nil)
  ;; If the plan is null, i.e., we're looking at reality,
  ;; then any action with actual operation and component objects is valid.
  (defmethod action-valid-p ((plan null) (o operation) (c component)) t))

;;;; Is the action needed in this image?
(with-upgradability ()
  (defgeneric needed-in-image-p (operation component)
    (:documentation "Is the action of OPERATION on COMPONENT needed in the current image
to be meaningful, or could it just as well have been done in another Lisp image?"))

  (defmethod needed-in-image-p ((o operation) (c component))
    ;; We presume that actions that modify the filesystem don't need be run
    ;; in the current image if they have already been done in another,
    ;; and can be run in another process (e.g. a fork),
    ;; whereas those that don't are meant to side-effect the current image and can't.
    (not (output-files o c))))


;;;; Visiting dependencies of an action and computing action stamps
(with-upgradability ()
  (defun* (map-direct-dependencies) (plan operation component fun)
    "Call FUN on all the valid dependencies of the given action in the given plan"
    (loop* :for (dep-o-spec . dep-c-specs) :in (component-depends-on operation component)
           :for dep-o = (find-operation operation dep-o-spec)
           :when dep-o
           :do (loop :for dep-c-spec :in dep-c-specs
                     :for dep-c = (and dep-c-spec (resolve-dependency-spec component dep-c-spec))
                     :when (and dep-c (action-valid-p plan dep-o dep-c))
                       :do (funcall fun dep-o dep-c))))

  (defun* (reduce-direct-dependencies) (plan operation component combinator seed)
    "Reduce the direct dependencies to a value computed by iteratively calling COMBINATOR
for each dependency action on the dependency's operation and component and an accumulator
initialized with SEED."
    (map-direct-dependencies
     plan operation component
     #'(lambda (dep-o dep-c)
         (setf seed (funcall combinator dep-o dep-c seed))))
    seed)

  (defun* (direct-dependencies) (plan operation component)
    "Compute a list of the direct dependencies of the action within the plan"
    (reverse (reduce-direct-dependencies plan operation component #'acons nil)))

  ;; In a distant future, get-file-stamp, component-operation-time and latest-stamp
  ;; shall also be parametrized by the plan, or by a second model object,
  ;; so they need not refer to the state of the filesystem,
  ;; and the stamps could be cryptographic checksums rather than timestamps.
  ;; Such a change remarkably would only affect COMPUTE-ACTION-STAMP.

  (defmethod compute-action-stamp (plan (o operation) (c component) &key just-done)
    ;; Given an action, figure out at what time in the past it has been done,
    ;; or if it has just been done, return the time that it has.
    ;; Returns two values:
    ;; 1- the TIMESTAMP of the action if it has already been done and is up to date,
    ;;   or T is either hasn't been done or is out of date.
    ;; 2- the DONE-IN-IMAGE-P boolean flag that is T if the action has already been done
    ;;   in the current image, or NIL if it hasn't.
    ;; Note that if e.g. LOAD-OP only depends on up-to-date files, but
    ;; hasn't been done in the current image yet, then it can have a non-T timestamp,
    ;; yet a NIL done-in-image-p flag: we can predict what timestamp it will have once loaded,
    ;; i.e. that of the input-files.
    (nest
     (block ())
     (let ((dep-stamp ; collect timestamp from dependencies (or T if forced or out-of-date)
             (reduce-direct-dependencies
              plan o c
              #'(lambda (o c stamp)
                  (if-let (it (plan-action-status plan o c))
                    (latest-stamp stamp (action-stamp it))
                    t))
              nil)))
       ;; out-of-date dependency: don't bother expensively querying the filesystem
       (when (and (eq dep-stamp t) (not just-done)) (return (values t nil))))
     ;; collect timestamps from inputs, and exit early if any is missing
     (let* ((in-files (input-files o c))
            (in-stamps (mapcar #'get-file-stamp in-files))
            (missing-in (loop :for f :in in-files :for s :in in-stamps :unless s :collect f))
            (latest-in (stamps-latest (cons dep-stamp in-stamps))))
       (when (and missing-in (not just-done)) (return (values t nil))))
     ;; collect timestamps from outputs, and exit early if any is missing
     (let* ((out-files (remove-if 'null (output-files o c)))
            (out-stamps (mapcar (if just-done 'register-file-stamp 'get-file-stamp) out-files))
            (missing-out (loop :for f :in out-files :for s :in out-stamps :unless s :collect f))
            (earliest-out (stamps-earliest out-stamps)))
       (when (and missing-out (not just-done)) (return (values t nil))))
     (let* (;; There are three kinds of actions:
            (out-op (and out-files t)) ; those that create files on the filesystem
            ;;(image-op (and in-files (null out-files))) ; those that load stuff into the image
            ;;(null-op (and (null out-files) (null in-files))) ; placeholders that do nothing
            ;; When was the thing last actually done? (Now, or ask.)
            (op-time (or just-done (component-operation-time o c)))
            ;; Time stamps from the files at hand, and whether any is missing
            (all-present (not (or missing-in missing-out)))
            ;; Has any input changed since we last generated the files?
            (up-to-date-p (stamp<= latest-in earliest-out))
            ;; If everything is up to date, the latest of inputs and outputs is our stamp
            (done-stamp (stamps-latest (cons latest-in out-stamps))))
       ;; Warn if some files are missing:
       ;; either our model is wrong or some other process is messing with our files.
       (when (and just-done (not all-present))
         (warn "~A completed without ~:[~*~;~*its input file~:p~2:*~{ ~S~}~*~]~
                ~:[~; or ~]~:[~*~;~*its output file~:p~2:*~{ ~S~}~*~]"
               (action-description o c)
               missing-in (length missing-in) (and missing-in missing-out)
               missing-out (length missing-out))))
     ;; Note that we use stamp<= instead of stamp< to play nice with generated files.
     ;; Any race condition is intrinsic to the limited timestamp resolution.
     (if (or just-done ;; The done-stamp is valid: if we're just done, or
             ;; if all filesystem effects are up-to-date and there's no invalidating reason.
             (and all-present up-to-date-p (operation-done-p o c) (not (action-forced-p plan o c))))
         (values done-stamp ;; return the hard-earned timestamp
                 (or just-done
                     out-op ;; a file-creating op is done when all files are up to date
                     ;; a image-effecting a placeholder op is done when it was actually run,
                     (and op-time (eql op-time done-stamp)))) ;; with the matching stamp
         ;; done-stamp invalid: return a timestamp in an indefinite future, action not done yet
         (values t nil)))))


;;;; Generic support for plan-traversal
(with-upgradability ()
  (defmethod initialize-instance :after ((plan plan-traversal)
                                         &key force force-not system
                                         &allow-other-keys)
    (with-slots (forced forced-not) plan
      (setf forced (normalize-forced-systems force system))
      (setf forced-not (normalize-forced-not-systems force-not system))))

  (defgeneric plan-actions (plan)
    (:documentation "Extract from a plan a list of actions to perform in sequence"))
  (defmethod plan-actions ((plan list))
    plan)

  (defmethod (setf plan-action-status) (new-status (p plan-traversal) (o operation) (c component))
    (setf (gethash (cons o c) (plan-visited-actions p)) new-status))

  (defmethod plan-action-status ((p plan-traversal) (o operation) (c component))
    (or (and (action-forced-not-p p o c) (plan-action-status nil o c))
        (values (gethash (cons o c) (plan-visited-actions p)))))

  (defmethod action-valid-p ((p plan-traversal) (o operation) (s system))
    (and (not (action-forced-not-p p o s)) (call-next-method)))

  (defgeneric plan-record-dependency (plan operation component)
    (:documentation "Record an action as a dependency in the current plan")))


;;;; Detection of circular dependencies
(with-upgradability ()
  (define-condition circular-dependency (system-definition-error)
    ((actions :initarg :actions :reader circular-dependency-actions))
    (:report (lambda (c s)
               (format s (compatfmt "~@<Circular dependency: ~3i~_~S~@:>")
                       (circular-dependency-actions c)))))

  (defgeneric call-while-visiting-action (plan operation component function)
    (:documentation "Detect circular dependencies"))

  (defmethod call-while-visiting-action ((plan plan-traversal) operation component fun)
    (with-accessors ((action-set plan-visiting-action-set)
                     (action-list plan-visiting-action-list)) plan
      (let ((action (make-action operation component)))
        (when (gethash action action-set)
          (error 'circular-dependency :actions
                 (member action (reverse action-list) :test 'equal)))
        (setf (gethash action action-set) t)
        (push action action-list)
        (unwind-protect
             (funcall fun)
          (pop action-list)
          (setf (gethash action action-set) nil)))))

  ;; Syntactic sugar for call-while-visiting-action
  (defmacro while-visiting-action ((p o c) &body body)
    `(call-while-visiting-action ,p ,o ,c #'(lambda () ,@body))))


;;;; Actual traversal: traverse-action
(with-upgradability ()
  (defgeneric traverse-action (plan operation component needed-in-image-p))

  ;; TRAVERSE-ACTION, in the context of a given PLAN object that accumulates dependency data,
  ;; visits the action defined by its OPERATION and COMPONENT arguments,
  ;; and all its transitive dependencies (unless already visited),
  ;; in the context of the action being (or not) NEEDED-IN-IMAGE-P,
  ;; i.e. needs to be done in the current image vs merely have been done in a previous image.
  ;; For actions that are up-to-date, it returns a STAMP identifying the state of the action
  ;; (that's timestamp, but it could be a cryptographic digest in some ASDF extension),
  ;; or T if the action needs to be done again.
  ;;
  ;; Note that for an XCVB-like plan with one-image-per-file-outputting-action,
  ;; the below method would be insufficient, since it assumes a single image
  ;; to traverse each node at most twice; non-niip actions would be traversed only once,
  ;; but niip nodes could be traversed once per image, i.e. once plus once per non-niip action.

  (defmethod traverse-action (plan operation component needed-in-image-p)
    (block nil
      ;; ACTION-VALID-P among other things, handles forcing logic, including FORCE-NOT,
      ;; and IF-FEATURE filtering.
      (unless (action-valid-p plan operation component) (return nil))
      ;; the following hook is needed by POIU, which tracks a full dependency graph,
      ;; instead of just a dependency order as in vanilla ASDF
      (plan-record-dependency plan operation component)
      ;; needed in image distinguishes b/w things that must happen in the
      ;; current image and those things that simply need to have been done in a previous one.
      (let* ((aniip (needed-in-image-p operation component)) ; action-specific needed-in-image
             ;; effective niip: meaningful for the action and required by the plan as traversed
             (eniip (and aniip needed-in-image-p))
             ;; status: have we traversed that action previously, and if so what was its status?
             (status (plan-action-status plan operation component)))
        (when (and status (or (action-done-p status) (action-planned-p status) (not eniip)))
          (return (action-stamp status))) ; Already visited with sufficient need-in-image level!
        (labels ((visit-action (niip) ; We may visit the action twice, once with niip NIL, then T
                   (map-direct-dependencies ; recursively traverse dependencies
                    plan operation component #'(lambda (o c) (traverse-action plan o c niip)))
                   (multiple-value-bind (stamp done-p) ; AFTER dependencies have been traversed,
                       (compute-action-stamp plan operation component) ; compute action stamp
                     (let ((add-to-plan-p (or (eql stamp t) (and niip (not done-p)))))
                       (cond ; it needs be done if it's out of date or needed in image but absent
                         ((and add-to-plan-p (not niip)) ; if we need to do it,
                          (visit-action t)) ; then we need to do it *in the (current) image*!
                         (t
                          (setf (plan-action-status plan operation component) ; update status:
                                (make-instance
                                 'planned-action-status
                                 :stamp stamp ; computed stamp
                                 :done-p (and done-p (not add-to-plan-p)) ; done *and* up-to-date?
                                 :planned-p add-to-plan-p ; included in list of things to be done?
                                 :index (if status ; index of action amongst all nodes in traversal
                                            (action-index status) ;; if already visited, keep index
                                            (incf (plan-total-action-count plan))))) ; else new index
                          (when (and done-p (not add-to-plan-p))
                            (setf (component-operation-time operation component) stamp))
                          (when add-to-plan-p ; if it needs to be added to the plan,
                            (incf (plan-planned-action-count plan)) ; count it
                            (unless aniip ; if it's output-producing,
                              (incf (plan-planned-output-action-count plan)))) ; count it
                          stamp)))))) ; return the stamp
          (while-visiting-action (plan operation component) ; maintain context, handle circularity.
            (visit-action eniip))))))) ; visit the action


;;;; Sequential plans (the default)
(with-upgradability ()
  (defclass sequential-plan (plan-traversal)
    ((actions-r :initform nil :accessor plan-actions-r))
    (:documentation "Simplest, default plan class, accumulating a sequence of actions"))

  (defmethod plan-actions ((plan sequential-plan))
    (reverse (plan-actions-r plan)))

  ;; No need to record a dependency to build a full graph, just accumulate nodes in order.
  (defmethod plan-record-dependency ((plan sequential-plan) (o operation) (c component))
    (values))

  (defmethod (setf plan-action-status) :after
      (new-status (p sequential-plan) (o operation) (c component))
    (when (action-planned-p new-status)
      (push (make-action o c) (plan-actions-r p)))))


;;;; High-level interface: traverse, perform-plan, plan-operates-on-p
(with-upgradability ()
  (defgeneric make-plan (plan-class operation component &key &allow-other-keys)
    (:documentation "Generate and return a plan for performing OPERATION on COMPONENT."))
  (define-convenience-action-methods make-plan (plan-class operation component &key))

  (defgeneric perform-plan (plan &key)
    (:documentation "Actually perform a plan and build the requested actions"))
  (defgeneric plan-operates-on-p (plan component)
    (:documentation "Does this PLAN include any operation on given COMPONENT?"))

  (defvar *default-plan-class* 'sequential-plan
    "The default plan class to use when building with ASDF")

  (defmethod make-plan (plan-class (o operation) (c component) &rest keys &key &allow-other-keys)
    (let ((plan (apply 'make-instance (or plan-class *default-plan-class*)
                       :system (component-system c) keys)))
      (traverse-action plan o c t)
      plan))

  (defmethod perform-plan :around ((plan t) &key)
    #+xcl (declare (ignorable plan))
    (let ((*package* *package*)
          (*readtable* *readtable*))
      (with-compilation-unit () ;; backward-compatibility.
        (call-next-method))))   ;; Going forward, see deferred-warning support in lisp-build.

  (defmethod perform-plan ((plan t) &rest keys &key &allow-other-keys)
    (apply 'perform-plan (plan-actions plan) keys))

  (defmethod perform-plan ((steps list) &key force &allow-other-keys)
    (loop* :for action :in steps
           :as o = (action-operation action)
           :as c = (action-component action)
           :when (or force (not (nth-value 1 (compute-action-stamp nil o c))))
           :do (perform-with-restarts o c)))

  (defmethod plan-operates-on-p ((plan plan-traversal) (component-path list))
    (plan-operates-on-p (plan-actions plan) component-path))

  (defmethod plan-operates-on-p ((plan list) (component-path list))
    (find component-path (mapcar 'action-component plan)
          :test 'equal :key 'component-find-path)))


;;;; Incidental traversals

;;; Making a FILTERED-SEQUENTIAL-PLAN can be used to, e.g., all of the source
;;; files required by a bundling operation.
(with-upgradability ()
  (defclass filtered-sequential-plan (sequential-plan)
    ((action-filter :initform t :initarg :action-filter :reader plan-action-filter)
     (component-type :initform t :initarg :component-type :reader plan-component-type)
     (keep-operation :initform t :initarg :keep-operation :reader plan-keep-operation)
     (keep-component :initform t :initarg :keep-component :reader plan-keep-component))
    (:documentation "A variant of SEQUENTIAL-PLAN that only records a subset of actions."))

  (defmethod initialize-instance :after ((plan filtered-sequential-plan)
                                         &key force force-not
                                         other-systems)
    (declare (ignore force force-not))
    ;; Ignore force and force-not, rely on other-systems:
    ;; force traversal of what we're interested in, i.e. current system or also others;
    ;; force-not traversal of what we're not interested in, i.e. other systems unless other-systems.
    (with-slots (forced forced-not action-filter system) plan
      (setf forced (normalize-forced-systems (if other-systems :all t) system))
      (setf forced-not (normalize-forced-not-systems (if other-systems nil t) system))
      (setf action-filter (ensure-function action-filter))))

  (defmethod action-valid-p ((plan filtered-sequential-plan) o c)
    (and (funcall (plan-action-filter plan) o c)
         (typep c (plan-component-type plan))
         (call-next-method)))

  (defun* (traverse-actions) (actions &rest keys &key plan-class &allow-other-keys)
    "Given a list of actions, build a plan with these actions as roots."
    (let ((plan (apply 'make-instance (or plan-class 'filtered-sequential-plan) keys)))
      (loop* :for action :in actions
             :as o = (action-operation action)
             :as c = (action-component action)
             :do (traverse-action plan o c t))
      plan))

  (defgeneric traverse-sub-actions (operation component &key &allow-other-keys))
  (define-convenience-action-methods traverse-sub-actions (operation component &key))
  (defmethod traverse-sub-actions ((operation operation) (component component)
                                   &rest keys &key &allow-other-keys)
    (apply 'traverse-actions (direct-dependencies t operation component)
           :system (component-system component) keys))

  (defmethod plan-actions ((plan filtered-sequential-plan))
    (with-slots (keep-operation keep-component) plan
      (loop* :for action :in (call-next-method)
             :as o = (action-operation action)
             :as c = (action-component action)
             :when (and (typep o keep-operation) (typep c keep-component))
             :collect (make-action o c))))

  (defun* (required-components) (system &rest keys &key (goal-operation 'load-op) &allow-other-keys)
    "Given a SYSTEM and a GOAL-OPERATION (default LOAD-OP), traverse the dependencies and
return a list of the components involved in building the desired action."
    (remove-duplicates
     (mapcar 'action-component
             (plan-actions
              (apply 'traverse-sub-actions goal-operation system
                     (remove-plist-key :goal-operation keys))))
     :from-end t)))

;;;; -------------------------------------------------------------------------
;;;; Invoking Operations

(uiop/package:define-package :asdf/operate
  (:recycle :asdf/operate :asdf)
  (:use :uiop/common-lisp :uiop :asdf/upgrade :asdf/cache
   :asdf/component :asdf/system :asdf/operation :asdf/action
   :asdf/find-system :asdf/find-component :asdf/lisp-action :asdf/plan)
  (:export
   #:operate #:oos
   #:build-op #:make
   #:load-system #:load-systems #:load-systems*
   #:compile-system #:test-system #:require-system
   #:*load-system-operation* #:module-provide-asdf
   #:component-loaded-p #:already-loaded-systems))
(in-package :asdf/operate)

(with-upgradability ()
  (defgeneric operate (operation component &key &allow-other-keys)
    (:documentation
     "Operate does mainly four things for the user:

1. Resolves the OPERATION designator into an operation object.
   OPERATION is typically a symbol denoting an operation class, instantiated with MAKE-OPERATION.
2. Resolves the COMPONENT designator into a component object.
   COMPONENT is typically a string or symbol naming a system, loaded from disk using FIND-SYSTEM.
3. It then calls MAKE-PLAN with the operation and system as arguments.
4. Finally calls PERFORM-PLAN on the resulting plan to actually build the system.

The entire computation is wrapped in WITH-COMPILATION-UNIT and error handling code.
If a VERSION argument is supplied, then operate also ensures that the system found satisfies it
using the VERSION-SATISFIES method.
If a PLAN-CLASS argument is supplied, that class is used for the plan.

The :FORCE or :FORCE-NOT argument to OPERATE can be:
  T to force the inside of the specified system to be rebuilt (resp. not),
    without recursively forcing the other systems we depend on.
  :ALL to force all systems including other systems we depend on to be rebuilt (resp. not).
  (SYSTEM1 SYSTEM2 ... SYSTEMN) to force systems named in a given list
:FORCE-NOT has precedence over :FORCE; builtin systems cannot be forced.

For backward compatibility, all keyword arguments are passed to MAKE-OPERATION
when instantiating a new operation, that will in turn be inherited by new operations.
But do NOT depend on it, for this is deprecated behavior."))

  (define-convenience-action-methods operate (operation component &key)
    :if-no-component (error 'missing-component :requires component))

  (defvar *in-operate* nil
    "Are we in operate?")

  ;; This method ensures that an ASDF upgrade is attempted as the very first thing,
  ;; with suitable state preservation in case in case it actually happens,
  ;; and that a few suitable dynamic bindings are established.
  (defmethod operate :around (operation component &rest keys
                              &key verbose
                                (on-warnings *compile-file-warnings-behaviour*)
                                (on-failure *compile-file-failure-behaviour*) &allow-other-keys)
    (nest
     (with-asdf-cache ())
     (let ((in-operate *in-operate*)
           (*in-operate* t)
           (operation-remaker ;; how to remake the operation after ASDF was upgraded (if it was)
            (etypecase operation
              (operation (let ((name (type-of operation)))
                           #'(lambda () (make-operation name))))
              ((or symbol string) (constantly operation))))
           (component-path (typecase component ;; to remake the component after ASDF upgrade
                             (component (component-find-path component))
                             (t component)))))
     ;; Before we operate on any system, make sure ASDF is up-to-date,
     ;; for if an upgrade is ever attempted at any later time, there may be BIG trouble.
     (progn
       (unless in-operate
         (when (upgrade-asdf)
           ;; If we were upgraded, restart OPERATE the hardest of ways, for
           ;; its function may have been redefined.
           (return-from operate
             (apply 'operate (funcall operation-remaker) component-path keys)))))
      ;; Setup proper bindings around any operate call.
     (let* ((*verbose-out* (and verbose *standard-output*))
            (*compile-file-warnings-behaviour* on-warnings)
            (*compile-file-failure-behaviour* on-failure))
       (call-next-method))))

  (defmethod operate :before ((operation operation) (component component)
                              &key version &allow-other-keys)
    (unless (version-satisfies component version)
      (error 'missing-component-of-version :requires component :version version)))

  (defmethod operate ((operation operation) (component component)
                      &rest keys &key plan-class &allow-other-keys)
    (let ((plan (apply 'make-plan plan-class operation component keys)))
      (apply 'perform-plan plan keys)
      (values operation plan)))

  (defun oos (operation component &rest args &key &allow-other-keys)
    (apply 'operate operation component args))

  (setf (documentation 'oos 'function)
        (format nil "Short for _operate on system_ and an alias for the OPERATE function.~%~%~a"
                (documentation 'operate 'function))))


;;;; Common operations
(with-upgradability ()
  (defvar *load-system-operation* 'load-op
    "Operation used by ASDF:LOAD-SYSTEM. By default, ASDF:LOAD-OP.
You may override it with e.g. ASDF:LOAD-BUNDLE-OP from asdf/bundle
or ASDF:LOAD-SOURCE-OP if your fasl loading is somehow broken.

The default operation may change in the future if we implement a
component-directed strategy for how to load or compile systems.")

  ;; In prepare-op for a system, propagate *load-system-operation* rather than load-op
  (defmethod component-depends-on ((o prepare-op) (s system))
    (loop :for (do . dc) :in (call-next-method)
          :collect (cons (if (eq do 'load-op) *load-system-operation* do) dc)))

  (defclass build-op (non-propagating-operation) ()
    (:documentation "Since ASDF3, BUILD-OP is the recommended 'master' operation,
to operate by default on a system or component, via the function BUILD.
Its meaning is configurable via the :BUILD-OPERATION option of a component.
which typically specifies the name of a specific operation to which to delegate the build,
as a symbol or as a string later read as a symbol (after loading the defsystem-depends-on);
if NIL is specified (the default), BUILD-OP falls back to the *LOAD-SYSTEM-OPERATION*
that will load the system in the current image, and its typically LOAD-OP."))
  (defmethod component-depends-on ((o build-op) (c component))
    `((,(or (component-build-operation c) *load-system-operation*) ,c)
      ,@(call-next-method)))

  (defun make (system &rest keys)
    "The recommended way to interact with ASDF3.1 is via (ASDF:MAKE :FOO).
It will build system FOO using the operation BUILD-OP,
the meaning of which is configurable by the system, and
defaults to *LOAD-SYSTEM-OPERATION*, usually LOAD-OP,
to load it in current image."
    (apply 'operate 'build-op system keys)
    t)

  (defun load-system (system &rest keys &key force force-not verbose version &allow-other-keys)
    "Shorthand for `(operate 'asdf:load-op system)`. See OPERATE for details."
    (declare (ignore force force-not verbose version))
    (apply 'operate *load-system-operation* system keys)
    t)

  (defun load-systems* (systems &rest keys)
    "Loading multiple systems at once."
    (dolist (s systems) (apply 'load-system s keys)))

  (defun load-systems (&rest systems)
    "Loading multiple systems at once."
    (load-systems* systems))

  (defun compile-system (system &rest args &key force force-not verbose version &allow-other-keys)
    "Shorthand for `(asdf:operate 'asdf:compile-op system)`. See OPERATE for details."
    (declare (ignore force force-not verbose version))
    (apply 'operate 'compile-op system args)
    t)

  (defun test-system (system &rest args &key force force-not verbose version &allow-other-keys)
    "Shorthand for `(asdf:operate 'asdf:test-op system)`. See OPERATE for details."
    (declare (ignore force force-not verbose version))
    (apply 'operate 'test-op system args)
    t))

;;;;; Define the function REQUIRE-SYSTEM, that, similarly to REQUIRE,
;; only tries to load its specified target if it's not loaded yet.
(with-upgradability ()
  (defun component-loaded-p (component)
    "Has the given COMPONENT been successfully loaded in the current image (yet)?
Note that this returns true even if the component is not up to date."
    (if-let ((component (find-component component () :registered t)))
      (action-already-done-p nil (make-operation 'load-op) component)))

  (defun already-loaded-systems ()
    "return a list of the names of the systems that have been successfully loaded so far"
    (mapcar 'coerce-name (remove-if-not 'component-loaded-p (registered-systems*))))

  (defun require-system (system &rest keys &key &allow-other-keys)
    "Ensure the specified SYSTEM is loaded, passing the KEYS to OPERATE, but do not update the
system or its dependencies if they have already been loaded."
    (unless (component-loaded-p system)
      (apply 'load-system system :force-not (already-loaded-systems) keys))))


;;;; Define the class REQUIRE-SYSTEM, to be hooked into CL:REQUIRE when possible,
;; i.e. for ABCL, CLISP, ClozureCL, CMUCL, ECL, MKCL and SBCL
;; Note that despite the two being homonyms, the _function_ require-system
;; and the _class_ require-system are quite distinct entities, fulfilling independent purposes.
(with-upgradability ()
  (defvar *modules-being-required* nil)

  (defclass require-system (system)
    ((module :initarg :module :initform nil :accessor required-module))
    (:documentation "A SYSTEM subclass whose processing is handled by
the implementation's REQUIRE rather than by internal ASDF mechanisms."))

  (defmethod perform ((o compile-op) (c require-system))
    nil)

  (defmethod perform ((o load-op) (s require-system))
    (let* ((module (or (required-module s) (coerce-name s)))
           (*modules-being-required* (cons module *modules-being-required*)))
      (assert (null (component-children s)))
      ;; CMUCL likes its module names to be all upcase.
      (require (nest #+cmucl (string-upcase) module))))

  (defmethod resolve-dependency-combination (component (combinator (eql :require)) arguments)
    (unless (and (length=n-p arguments 1)
                 (typep (car arguments) '(or string (and symbol (not null)))))
      (parameter-error (compatfmt "~@<In ~S, bad dependency ~S for ~S. ~S takes one argument, a string or non-null symbol~@:>")
                       'resolve-dependency-combination
                       (cons combinator arguments) component combinator))
    ;; :require must be prepared for some implementations providing modules using ASDF,
    ;; as SBCL used to do, and others may might do. Thus, the system provided in the end
    ;; would be a downcased name as per module-provide-asdf above. For the same reason,
    ;; we cannot assume that the system in the end will be of type require-system,
    ;; but must check whether we can use find-system and short-circuit cl:require.
    ;; Otherwise, calling cl:require could result in nasty reentrant calls between
    ;; cl:require and asdf:operate that could potentially blow up the stack,
    ;; all the while defeating the consistency of the dependency graph.
    (let* ((module (car arguments)) ;; NB: we already checked that it was not null
           (name (string-downcase module))
           (system (find-system name nil)))
      (or system (let ((system (make-instance 'require-system :name name)))
                   (register-system system)
                   system))))

  (defun module-provide-asdf (name)
    ;; We must use string-downcase, because modules are traditionally specified as symbols,
    ;; that implementations traditionally normalize as uppercase, for which we seek a system
    ;; with a name that is traditionally in lowercase. Case is lost along the way. That's fine.
    ;; We could make complex, non-portable rules to try to preserve case, and just documenting
    ;; them would be a hell that it would be a disservice to inflict on users.
    (let ((module (string-downcase name)))
      (unless (member module *modules-being-required* :test 'equal)
        (let ((*modules-being-required* (cons module *modules-being-required*))
              #+sbcl (sb-impl::*requiring* (remove module sb-impl::*requiring* :test 'equal)))
          (handler-bind
              ((style-warning #'muffle-warning)
               (missing-component (constantly nil))
               (fatal-condition
                #'(lambda (e)
                    (format *error-output* (compatfmt "~@<ASDF could not load ~(~A~) because ~A.~@:>~%")
                            name e))))
            (let ((*verbose-out* (make-broadcast-stream)))
              (let ((system (find-system module nil)))
                (when system
                  (require-system system :verbose nil)
                  t)))))))))


;;;; Some upgrade magic
(with-upgradability ()
  (defun restart-upgraded-asdf ()
    ;; If we're in the middle of something, restart it.
    (let ((systems-being-defined
           (when *asdf-cache*
             (prog1
                 (loop :for k :being :the hash-keys :of *asdf-cache*
                   :when (eq (first k) 'find-system) :collect (second k))
               (clrhash *asdf-cache*)))))
      ;; Regardless, clear defined systems, since they might be invalid
      ;; after an incompatible ASDF upgrade.
      (clear-defined-systems)
      ;; The configuration also may have to be upgraded.
      (upgrade-configuration)
      ;; If we were in the middle of an operation, be sure to restore the system being defined.
      (dolist (s systems-being-defined) (find-system s nil))))
  (register-hook-function '*post-upgrade-cleanup-hook* 'restart-upgraded-asdf)

  ;; The following function's symbol is from asdf/find-system.
  ;; It is defined here to resolve what would otherwise be forward package references.
  (defun mark-component-preloaded (component)
    "Mark a component as preloaded."
    (let ((component (find-component component nil :registered t)))
      ;; Recurse to children, so asdf/plan will hopefully be happy.
      (map () 'mark-component-preloaded (component-children component))
      ;; Mark the timestamps of the common lisp-action operations as 0.
      (let ((times (component-operation-times component)))
        (dolist (o '(load-op compile-op prepare-op))
          (setf (gethash (make-operation o) times) 0))))))

;;;; -------------------------------------------------------------------------
;;;; Defsystem

(uiop/package:define-package :asdf/parse-defsystem
  (:recycle :asdf/parse-defsystem :asdf/defsystem :asdf)
  (:nicknames :asdf/defsystem) ;; previous name, to be compatible with, in case anyone cares
  (:use :uiop/common-lisp :asdf/driver :asdf/upgrade
   :asdf/cache :asdf/component :asdf/system
   :asdf/find-system :asdf/find-component :asdf/action :asdf/lisp-action :asdf/operate)
  (:import-from :asdf/system #:depends-on #:weakly-depends-on)
  (:export
   #:defsystem #:register-system-definition
   #:class-for-type #:*default-component-class*
   #:determine-system-directory #:parse-component-form
   #:non-toplevel-system #:non-system-system #:bad-system-name
   #:sysdef-error-component #:check-component-input))
(in-package :asdf/parse-defsystem)

;;; Pathname
(with-upgradability ()
  (defun determine-system-directory (pathname)
    ;; The defsystem macro calls this function to determine the pathname of a system as follows:
    ;; 1. If the pathname argument is an pathname object (NOT a namestring),
    ;;    that is already an absolute pathname, return it.
    ;; 2. Otherwise, the directory containing the LOAD-PATHNAME
    ;;    is considered (as deduced from e.g. *LOAD-PATHNAME*), and
    ;;    if it is indeed available and an absolute pathname, then
    ;;    the PATHNAME argument is normalized to a relative pathname
    ;;    as per PARSE-UNIX-NAMESTRING (with ENSURE-DIRECTORY T)
    ;;    and merged into that DIRECTORY as per SUBPATHNAME.
    ;;    Note: avoid *COMPILE-FILE-PATHNAME* because the .asd is loaded as source,
    ;;    but may be from within the EVAL-WHEN of a file compilation.
    ;; If no absolute pathname was found, we return NIL.
    (check-type pathname (or null string pathname))
    (pathname-directory-pathname
     (resolve-symlinks*
      (ensure-absolute-pathname
       (parse-unix-namestring pathname :type :directory)
       #'(lambda () (ensure-absolute-pathname
                     (load-pathname) 'get-pathname-defaults nil))
       nil)))))


;;; Component class
(with-upgradability ()
  ;; What :file gets interpreted as, unless overridden by a :default-component-class
  (defvar *default-component-class* 'cl-source-file)

  (defun class-for-type (parent type)
      (or (coerce-class type :package :asdf/interface :super 'component :error nil)
          (and (eq type :file)
               (coerce-class
                (or (loop :for p = parent :then (component-parent p) :while p
                      :thereis (module-default-component-class p))
                    *default-component-class*)
                :package :asdf/interface :super 'component :error nil))
          (sysdef-error "don't recognize component type ~S" type))))


;;; Check inputs
(with-upgradability ()
  (define-condition non-system-system (system-definition-error)
    ((name :initarg :name :reader non-system-system-name)
     (class-name :initarg :class-name :reader non-system-system-class-name))
    (:report (lambda (c s)
               (format s (compatfmt "~@<Error while defining system ~S: class ~S isn't a subclass of ~S~@:>")
                       (non-system-system-name c) (non-system-system-class-name c) 'system))))

  (define-condition non-toplevel-system (system-definition-error)
    ((parent :initarg :parent :reader non-toplevel-system-parent)
     (name :initarg :name :reader non-toplevel-system-name))
    (:report (lambda (c s)
               (format s (compatfmt "~@<Error while defining system: component ~S claims to have a system ~S as a child~@:>")
                       (non-toplevel-system-parent c) (non-toplevel-system-name c)))))

  (define-condition bad-system-name (warning)
    ((name :initarg :name :reader component-name)
     (source-file :initarg :source-file :reader system-source-file))
    (:report (lambda (c s)
               (let* ((file (system-source-file c))
                      (name (component-name c))
                      (asd (pathname-name file)))
                 (format s (compatfmt "~@<System definition file ~S contains definition for system ~S. ~
Please only define ~S and secondary systems with a name starting with ~S (e.g. ~S) in that file.~@:>")
                       file name asd (strcat asd "/") (strcat asd "/test"))))))

  (defun sysdef-error-component (msg type name value)
    (sysdef-error (strcat msg (compatfmt "~&~@<The value specified for ~(~A~) ~A is ~S~@:>"))
                  type name value))

  (defun check-component-input (type name weakly-depends-on
                                depends-on components)
    "A partial test of the values of a component."
    (unless (listp depends-on)
      (sysdef-error-component ":depends-on must be a list."
                              type name depends-on))
    (unless (listp weakly-depends-on)
      (sysdef-error-component ":weakly-depends-on must be a list."
                              type name weakly-depends-on))
    (unless (listp components)
      (sysdef-error-component ":components must be NIL or a list of components."
                              type name components)))

  ;; Given a form used as :version specification, in the context of a system definition
  ;; in a file at PATHNAME, for given COMPONENT with given PARENT, normalize the form
  ;; to an acceptable ASDF-format version.
  (defun* (normalize-version) (form &key pathname component parent)
    (labels ((invalid (&optional (continuation "using NIL instead"))
               (warn (compatfmt "~@<Invalid :version specifier ~S~@[ for component ~S~]~@[ in ~S~]~@[ from file ~S~]~@[, ~A~]~@:>")
                     form component parent pathname continuation))
             (invalid-parse (control &rest args)
               (unless (if-let (target (find-component parent component)) (builtin-system-p target))
                 (apply 'warn control args)
                 (invalid))))
      (if-let (v (typecase form
                   ((or string null) form)
                   (real
                    (invalid "Substituting a string")
                    (format nil "~D" form)) ;; 1.0 becomes "1.0"
                   (cons
                    (case (first form)
                      ((:read-file-form)
                       (destructuring-bind (subpath &key (at 0)) (rest form)
                         (safe-read-file-form (subpathname pathname subpath)
                                              :at at :package :asdf-user)))
                      ((:read-file-line)
                       (destructuring-bind (subpath &key (at 0)) (rest form)
                         (safe-read-file-line (subpathname pathname subpath)
                                              :at at)))
                      (otherwise
                       (invalid))))
                   (t
                    (invalid))))
        (if-let (pv (parse-version v #'invalid-parse))
          (unparse-version pv)
          (invalid))))))


;;; "inline methods"
(with-upgradability ()
  (defparameter* +asdf-methods+
    '(perform-with-restarts perform explain output-files operation-done-p))

  (defun %remove-component-inline-methods (component)
    (dolist (name +asdf-methods+)
      (map ()
           ;; this is inefficient as most of the stored
           ;; methods will not be for this particular gf
           ;; But this is hardly performance-critical
           #'(lambda (m)
               (remove-method (symbol-function name) m))
           (component-inline-methods component)))
    (component-inline-methods component) nil)

  (defun %define-component-inline-methods (ret rest)
    (loop* :for (key value) :on rest :by #'cddr
           :for name = (and (keywordp key) (find key +asdf-methods+ :test 'string=))
           :when name :do
           (destructuring-bind (op &rest body) value
             (loop :for arg = (pop body)
                   :while (atom arg)
                   :collect arg :into qualifiers
                   :finally
                      (destructuring-bind (o c) arg
                        (pushnew
                         (eval `(defmethod ,name ,@qualifiers ((,o ,op) (,c (eql ,ret))) ,@body))
                         (component-inline-methods ret)))))))

  (defun %refresh-component-inline-methods (component rest)
    ;; clear methods, then add the new ones
    (%remove-component-inline-methods component)
    (%define-component-inline-methods component rest)))


;;; Main parsing function
(with-upgradability ()
  (defun parse-dependency-def (dd)
    (if (listp dd)
        (case (first dd)
          (:feature
           (unless (= (length dd) 3)
             (sysdef-error "Ill-formed feature dependency: ~s" dd))
           (let ((embedded (parse-dependency-def (third dd))))
             `(:feature ,(second dd) ,embedded)))
          (feature
           (sysdef-error "`feature' has been removed from the dependency spec language of ASDF. Use :feature instead in ~s." dd))
          (:require
           (unless (= (length dd) 2)
             (sysdef-error "Ill-formed require dependency: ~s" dd))
           dd)
          (:version
           (unless (= (length dd) 3)
             (sysdef-error "Ill-formed version dependency: ~s" dd))
           `(:version ,(coerce-name (second dd)) ,(third dd)))
          (otherwise (sysdef-error "Ill-formed dependency: ~s" dd)))
      (coerce-name dd)))

  (defun parse-dependency-defs (dd-list)
    "Parse the dependency defs in DD-LIST into canonical form by translating all
system names contained using COERCE-NAME. Return the result."
    (mapcar 'parse-dependency-def dd-list))

  (defun* (parse-component-form) (parent options &key previous-serial-component)
    (destructuring-bind
        (type name &rest rest &key
                                (builtin-system-p () bspp)
                                ;; the following list of keywords is reproduced below in the
                                ;; remove-plist-keys form.  important to keep them in sync
                                components pathname perform explain output-files operation-done-p
                                weakly-depends-on depends-on serial
                                do-first if-component-dep-fails version
                                ;; list ends
         &allow-other-keys) options
      (declare (ignore perform explain output-files operation-done-p builtin-system-p))
      (check-component-input type name weakly-depends-on depends-on components)
      (when (and parent
                 (find-component parent name)
                 (not ;; ignore the same object when rereading the defsystem
                  (typep (find-component parent name)
                         (class-for-type parent type))))
        (error 'duplicate-names :name name))
      (when do-first (error "DO-FIRST is not supported anymore as of ASDF 3"))
      (let* ((name (coerce-name name))
             (args `(:name ,name
                     :pathname ,pathname
                     ,@(when parent `(:parent ,parent))
                     ,@(remove-plist-keys
                        '(:components :pathname :if-component-dep-fails :version
                          :perform :explain :output-files :operation-done-p
                          :weakly-depends-on :depends-on :serial)
                        rest)))
             (component (find-component parent name))
             (class (class-for-type parent type)))
        (when (and parent (subtypep class 'system))
          (error 'non-toplevel-system :parent parent :name name))
        (if component ; preserve identity
            (apply 'reinitialize-instance component args)
            (setf component (apply 'make-instance class args)))
        (component-pathname component) ; eagerly compute the absolute pathname
        (when (typep component 'system)
          ;; cache information for introspection
          (setf (slot-value component 'depends-on)
                (parse-dependency-defs depends-on)
                (slot-value component 'weakly-depends-on)
                ;; these must be a list of systems, cannot be features or versioned systems
                (mapcar 'coerce-name weakly-depends-on)))
        (let ((sysfile (system-source-file (component-system component)))) ;; requires the previous
          (when (and (typep component 'system) (not bspp))
            (setf (builtin-system-p component) (lisp-implementation-pathname-p sysfile)))
          (setf version (normalize-version version :component name :parent parent :pathname sysfile)))
        ;; Don't use the accessor: kluge to avoid upgrade issue on CCL 1.8.
        ;; A better fix is required.
        (setf (slot-value component 'version) version)
        (when (typep component 'parent-component)
          (setf (component-children component)
                (loop
                  :with previous-component = nil
                  :for c-form :in components
                  :for c = (parse-component-form component c-form
                                                 :previous-serial-component previous-component)
                  :for name = (component-name c)
                  :collect c
                  :when serial :do (setf previous-component name)))
          (compute-children-by-name component))
        (when previous-serial-component
          (push previous-serial-component depends-on))
        (when weakly-depends-on
          ;; ASDF4: deprecate this feature and remove it.
          (appendf depends-on
                   (remove-if (complement #'(lambda (x) (find-system x nil))) weakly-depends-on)))
        ;; Used by POIU. ASDF4: rename to component-depends-on?
        (setf (component-sideway-dependencies component) depends-on)
        (%refresh-component-inline-methods component rest)
        (when if-component-dep-fails
          (error "The system definition for ~S uses deprecated ~
            ASDF option :IF-COMPONENT-DEP-FAILS. ~
            Starting with ASDF 3, please use :IF-FEATURE instead"
           (coerce-name (component-system component))))
        component)))

  (defun register-system-definition
      (name &rest options &key pathname (class 'system) (source-file () sfp)
                            defsystem-depends-on &allow-other-keys)
    ;; The system must be registered before we parse the body,
    ;; otherwise we recur when trying to find an existing system
    ;; of the same name to reuse options (e.g. pathname) from.
    ;; To avoid infinite recursion in cases where you defsystem a system
    ;; that is registered to a different location to find-system,
    ;; we also need to remember it in the asdf-cache.
    (nest
     (with-asdf-cache ())
     (let* ((name (coerce-name name))
            (source-file (if sfp source-file (resolve-symlinks* (load-pathname))))
            (asd-name (and source-file
                           (equalp "asd" (pathname-type source-file))
                           (pathname-name source-file)))
            (primary-name (primary-system-name name)))
       (when (and asd-name (not (equal asd-name primary-name)))
         (warn (make-condition 'bad-system-name :source-file source-file :name name))))
     (let* (;; NB: handle defsystem-depends-on BEFORE to create the system object,
            ;; so that in case it fails, there is no incomplete object polluting the build.
            (checked-defsystem-depends-on
             (let* ((dep-forms (parse-dependency-defs defsystem-depends-on))
                    (deps (loop :for spec :in dep-forms
                            :when (resolve-dependency-spec nil spec)
                            :collect :it)))
               (load-systems* deps)
               dep-forms))
            (registered (system-registered-p name))
            (registered! (if registered
                             (rplaca registered (get-file-stamp source-file))
                             (register-system
                              (make-instance 'system :name name :source-file source-file))))
            (system (reset-system (cdr registered!)
                                  :name name :source-file source-file))
            (component-options
             (append
              (remove-plist-keys '(:defsystem-depends-on :class) options)
              ;; cache defsystem-depends-on in canonical form
              (when checked-defsystem-depends-on
                `(:defsystem-depends-on ,checked-defsystem-depends-on))))
            (directory (determine-system-directory pathname)))
       ;; This works hand in hand with asdf/find-system:find-system-if-being-defined:
       (set-asdf-cache-entry `(find-system ,name) (list system)))
     ;; We change-class AFTER we loaded the defsystem-depends-on
     ;; since the class might be defined as part of those.
     (let ((class (class-for-type nil class)))
       (unless (subtypep class 'system)
         (error 'non-system-system :name name :class-name (class-name class)))
       (unless (eq (type-of system) class)
         (change-class system class)))
     (parse-component-form nil (list* :module name :pathname directory component-options))))

  (defmacro defsystem (name &body options)
    `(apply 'register-system-definition ',name ',options)))
;;;; -------------------------------------------------------------------------
;;;; ASDF-Bundle

(uiop/package:define-package :asdf/bundle
  (:recycle :asdf/bundle :asdf)
  (:use :uiop/common-lisp :uiop :asdf/upgrade
   :asdf/component :asdf/system :asdf/find-system :asdf/find-component :asdf/operation
   :asdf/action :asdf/lisp-action :asdf/plan :asdf/operate :asdf/defsystem)
  (:export
   #:bundle-op #:bundle-type #:program-system
   #:bundle-system #:bundle-pathname-type #:direct-dependency-files
   #:monolithic-op #:monolithic-bundle-op #:operation-monolithic-p
   #:basic-compile-bundle-op #:prepare-bundle-op
   #:compile-bundle-op #:load-bundle-op #:monolithic-compile-bundle-op #:monolithic-load-bundle-op
   #:lib-op #:monolithic-lib-op
   #:dll-op #:monolithic-dll-op
   #:deliver-asd-op #:monolithic-deliver-asd-op
   #:program-op #:image-op #:compiled-file #:precompiled-system #:prebuilt-system
   #:user-system-p #:user-system #:trivial-system-p
   #:prologue-code #:epilogue-code #:static-library))
(in-package :asdf/bundle)

(with-upgradability ()
  (defclass bundle-op (basic-compile-op)
    ;; NB: use of instance-allocated slots for operations is DEPRECATED
    ;; and only supported in a temporary fashion for backward compatibility.
    ;; Supported replacement: Define slots on program-system instead.
    ((bundle-type :initform :no-output-file :reader bundle-type :allocation :class))
    (:documentation "base class for operations that bundle outputs from multiple components"))

  (defclass monolithic-op (operation) ()
    (:documentation "A MONOLITHIC operation operates on a system *and all of its
dependencies*.  So, for example, a monolithic concatenate operation will
concatenate together a system's components and all of its dependencies, but a
simple concatenate operation will concatenate only the components of the system
itself."))

  (defclass monolithic-bundle-op (bundle-op monolithic-op)
    ;; Old style way of specifying prologue and epilogue on ECL: in the monolithic operation.
    ;; DEPRECATED. Supported replacement: Define slots on program-system instead.
    ((prologue-code :initform nil :accessor prologue-code)
     (epilogue-code :initform nil :accessor epilogue-code))
    (:documentation "operations that are both monolithic-op and bundle-op"))

  (defclass program-system (system)
    ;; New style (ASDF3.1) way of specifying prologue and epilogue on ECL: in the system
    ((prologue-code :initform nil :initarg :prologue-code :reader prologue-code)
     (epilogue-code :initform nil :initarg :epilogue-code :reader epilogue-code)
     (no-uiop :initform nil :initarg :no-uiop :reader no-uiop)
     (prefix-lisp-object-files :initarg :prefix-lisp-object-files
                               :initform nil :accessor prefix-lisp-object-files)
     (postfix-lisp-object-files :initarg :postfix-lisp-object-files
                                :initform nil :accessor postfix-lisp-object-files)
     (extra-object-files :initarg :extra-object-files
                         :initform nil :accessor extra-object-files)
     (extra-build-args :initarg :extra-build-args
                       :initform nil :accessor extra-build-args)))

  (defmethod prologue-code ((x system)) nil)
  (defmethod epilogue-code ((x system)) nil)
  (defmethod no-uiop ((x system)) nil)
  (defmethod prefix-lisp-object-files ((x system)) nil)
  (defmethod postfix-lisp-object-files ((x system)) nil)
  (defmethod extra-object-files ((x system)) nil)
  (defmethod extra-build-args ((x system)) nil)

  (defclass link-op (bundle-op) ()
    (:documentation "Abstract operation for linking files together"))

  (defclass gather-operation (bundle-op)
    ((gather-operation :initform nil :allocation :class :reader gather-operation)
     (gather-type :initform :no-output-file :allocation :class :reader gather-type))
    (:documentation "Abstract operation for gathering many input files from a system"))

  (defun operation-monolithic-p (op)
    (typep op 'monolithic-op))

  ;; Dependencies of a gather-op are the actions of the dependent operation
  ;; for all the (sorted) required components for loading the system.
  ;; Monolithic operations typically use lib-op as the dependent operation,
  ;; and all system-level dependencies as required components.
  ;; Non-monolithic operations typically use compile-op as the dependent operation,
  ;; and all transitive sub-components as required components (excluding other systems).
  (defmethod component-depends-on ((o gather-operation) (s system))
    (let* ((mono (operation-monolithic-p o))
           (go (make-operation (or (gather-operation o) 'compile-op)))
           (bundle-p (typep go 'bundle-op))
           ;; In a non-mono operation, don't recurse to other systems.
           ;; In a mono operation gathering bundles, don't recurse inside systems.
           (component-type (if mono (if bundle-p 'system t) '(not system)))
           ;; In the end, only keep system bundles or non-system bundles, depending.
           (keep-component (if bundle-p 'system '(not system)))
           (deps
            ;; Required-components only looks at the dependencies of an action, excluding the action
            ;; itself, so it may be safely used by an action recursing on its dependencies (which
            ;; may or may not be an overdesigned API, since in practice we never use it that way).
            ;; Therefore, if we use :goal-operation 'load-op :keep-operation 'load-op, which looks
            ;; cleaner, we will miss the load-op on the requested system itself, which doesn't
            ;; matter for a regular system, but matters, a lot, for a package-inferred-system.
            ;; Using load-op as the goal operation and basic-compile-op as the keep-operation works
            ;; for our needs of gathering all the files we want to include in a bundle.
            ;; Note that we use basic-compile-op rather than compile-op so it will still work on
            ;; systems when *load-system-operation* is load-bundle-op.
            (required-components
             s :other-systems mono :component-type component-type :keep-component keep-component
             :goal-operation 'load-op :keep-operation 'basic-compile-op)))
      `((,go ,@deps) ,@(call-next-method))))

  ;; Create a single fasl for the entire library
  (defclass basic-compile-bundle-op (bundle-op)
    ((gather-type :initform #-(or clasp ecl mkcl) :fasl #+(or clasp ecl mkcl) :object
                  :allocation :class)
     (bundle-type :initform :fasl :allocation :class))
    (:documentation "Base class for compiling into a bundle"))

  ;; Analog to prepare-op, for load-bundle-op and compile-bundle-op
  (defclass prepare-bundle-op (sideway-operation)
    ((sideway-operation
      :initform #+(or clasp ecl mkcl) 'load-bundle-op #-(or clasp ecl mkcl) 'load-op
      :allocation :class))
    (:documentation "Operation class for loading the bundles of a system's dependencies"))

  (defclass lib-op (link-op gather-operation non-propagating-operation)
    ((gather-type :initform :object :allocation :class)
     (bundle-type :initform :lib :allocation :class))
    (:documentation "Compile the system and produce a linkable static library (.a/.lib)
for all the linkable object files associated with the system. Compare with DLL-OP.

On most implementations, these object files only include extensions to the runtime
written in C or another language with a compiler producing linkable object files.
On CLASP, ECL, MKCL, these object files _also_ include the contents of Lisp files
themselves. In any case, this operation will produce what you need to further build
a static runtime for your system, or a dynamic library to load in an existing runtime."))

  ;; What works: on ECL, CLASP(?), MKCL, we link the many .o files from the system into the .so;
  ;; on other implementations, we combine (usually concatenate) the .fasl files into one.
  (defclass compile-bundle-op (basic-compile-bundle-op selfward-operation gather-operation
                                                       #+(or clasp ecl mkcl) link-op)
    ((selfward-operation :initform '(prepare-bundle-op) :allocation :class))
    (:documentation "This operator is an alternative to COMPILE-OP. Build a system
and all of its dependencies, but build only a single (\"monolithic\") FASL, instead
of one per source file, which may be more resource efficient.  That monolithic
FASL should be loaded with LOAD-BUNDLE-OP, rather than LOAD-OP."))

  (defclass load-bundle-op (basic-load-op selfward-operation)
    ((selfward-operation :initform '(prepare-bundle-op compile-bundle-op) :allocation :class))
    (:documentation "This operator is an alternative to LOAD-OP. Build a system
and all of its dependencies, using COMPILE-BUNDLE-OP. The difference with
respect to LOAD-OP is that it builds only a single FASL, which may be
faster and more resource efficient."))

  ;; NB: since the monolithic-op's can't be sideway-operation's,
  ;; if we wanted lib-op, dll-op, deliver-asd-op to be sideway-operation's,
  ;; we'd have to have the monolithic-op not inherit from the main op,
  ;; but instead inherit from a basic-FOO-op as with basic-compile-bundle-op above.

  (defclass dll-op (link-op gather-operation non-propagating-operation)
    ((gather-type :initform :object :allocation :class)
     (bundle-type :initform :dll :allocation :class))
    (:documentation "Compile the system and produce a dynamic loadable library (.so/.dll)
for all the linkable object files associated with the system. Compare with LIB-OP."))

  (defclass deliver-asd-op (basic-compile-op selfward-operation)
    ((selfward-operation
      ;; TODO: implement link-op on all implementations, and make that
      ;; '(compile-bundle-op lib-op #-(or clasp ecl mkcl) dll-op)
      :initform '(compile-bundle-op #+(or clasp ecl mkcl) lib-op)
      :allocation :class))
    (:documentation "produce an asd file for delivering the system as a single fasl"))


  (defclass monolithic-deliver-asd-op (deliver-asd-op monolithic-bundle-op)
    ((selfward-operation
      ;; TODO: implement link-op on all implementations, and make that
      ;; '(monolithic-compile-bundle-op monolithic-lib-op #-(or clasp ecl mkcl) monolithic-dll-op)
      :initform '(monolithic-compile-bundle-op #+(or clasp ecl mkcl) monolithic-lib-op)
      :allocation :class))
    (:documentation "produce fasl and asd files for combined system and dependencies."))

  (defclass monolithic-compile-bundle-op
      (basic-compile-bundle-op monolithic-bundle-op
       #+(or clasp ecl mkcl) link-op gather-operation non-propagating-operation)
    ()
    (:documentation "Create a single fasl for the system and its dependencies."))

  (defclass monolithic-load-bundle-op (load-bundle-op monolithic-bundle-op)
    ((selfward-operation :initform 'monolithic-compile-bundle-op :allocation :class))
    (:documentation "Load a single fasl for the system and its dependencies."))

  (defclass monolithic-lib-op (lib-op monolithic-bundle-op non-propagating-operation)
    ((gather-type :initform :object :allocation :class))
    (:documentation "Compile the system and produce a linkable static library (.a/.lib)
for all the linkable object files associated with the system or its dependencies. See LIB-OP."))

  (defclass monolithic-dll-op (dll-op monolithic-bundle-op non-propagating-operation)
    ((gather-type :initform :object :allocation :class))
    (:documentation "Compile the system and produce a dynamic loadable library (.so/.dll)
for all the linkable object files associated with the system or its dependencies. See LIB-OP"))

  (defclass image-op (monolithic-bundle-op selfward-operation
                      #+(or clasp ecl mkcl) link-op #+(or clasp ecl mkcl) gather-operation)
    ((bundle-type :initform :image :allocation :class)
     (gather-operation :initform 'lib-op :allocation :class)
     #+(or clasp ecl mkcl) (gather-type :initform :static-library :allocation :class)
     (selfward-operation :initform '(#-(or clasp ecl mkcl) load-op) :allocation :class))
    (:documentation "create an image file from the system and its dependencies"))

  (defclass program-op (image-op)
    ((bundle-type :initform :program :allocation :class))
    (:documentation "create an executable file from the system and its dependencies"))

  ;; From the ASDF-internal bundle-type identifier, get a filesystem-usable pathname type.
  (defun bundle-pathname-type (bundle-type)
    (etypecase bundle-type
      ((or null string) ;; pass through nil or string literal
       bundle-type)
      ((eql :no-output-file) ;; marker for a bundle-type that has NO output file
       (error "No output file, therefore no pathname type"))
      ((eql :fasl) ;; the type of a fasl
       #-(or clasp ecl mkcl) (compile-file-type) ; on image-based platforms, used as input and output
       #+(or clasp ecl mkcl) "fasb") ; on C-linking platforms, only used as output for system bundles
      ((member :image)
       #+allegro "dxl"
       #+(and clisp os-windows) "exe"
       #-(or allegro (and clisp os-windows)) "image")
      ;; NB: on CLASP and ECL these implementations, we better agree with
      ;; (compile-file-type :type bundle-type))
      ((eql :object) ;; the type of a linkable object file
       (os-cond ((os-unix-p) "o")
                ((os-windows-p) (if (featurep '(:or :mingw32 :mingw64)) "o" "obj"))))
      ((member :lib :static-library) ;; the type of a linkable library
       (os-cond ((os-unix-p) "a")
                ((os-windows-p) (if (featurep '(:or :mingw32 :mingw64)) "a" "lib"))))
      ((member :dll :shared-library) ;; the type of a shared library
       (os-cond ((os-macosx-p) "dylib") ((os-unix-p) "so") ((os-windows-p) "dll")))
      ((eql :program) ;; the type of an executable program
       (os-cond ((os-unix-p) nil) ((os-windows-p) "exe")))))

  ;; Compute the output-files for a given bundle action
  (defun bundle-output-files (o c)
    (let ((bundle-type (bundle-type o)))
      (unless (or (eq bundle-type :no-output-file) ;; NIL already means something regarding type.
                  (and (null (input-files o c)) (not (member bundle-type '(:image :program)))))
        (let ((name (or (component-build-pathname c)
                        (let ((suffix
                               (unless (typep o 'program-op)
                                 ;; "." is no good separator for Logical Pathnames, so we use "--"
                                 (if (operation-monolithic-p o)
                                     "--all-systems"
                                     ;; These use a different type .fasb or .a instead of .fasl
                                     #-(or clasp ecl mkcl) "--system"))))
                          (format nil "~A~@[~A~]" (component-name c) suffix))))
              (type (bundle-pathname-type bundle-type)))
          (values (list (subpathname (component-pathname c) name :type type))
                  (eq (class-of o) (coerce-class (component-build-operation c)
                                                 :package :asdf/interface
                                                 :super 'operation
                                                 :error nil)))))))

  (defmethod output-files ((o bundle-op) (c system))
    (bundle-output-files o c))

  #-(or clasp ecl mkcl)
  (progn
    (defmethod perform ((o image-op) (c system))
      (dump-image (output-file o c) :executable (typep o 'program-op)))
    (defmethod perform :before ((o program-op) (c system))
      (setf *image-entry-point* (ensure-function (component-entry-point c)))))

  (defclass compiled-file (file-component)
    ((type :initform #-(or clasp ecl mkcl) (compile-file-type) #+(or clasp ecl mkcl) "fasb"))
    (:documentation "Class for a file that is already compiled,
e.g. as part of the implementation, of an outer build system that calls into ASDF,
or of opaque libraries shipped along the source code."))

  (defclass precompiled-system (system)
    ((build-pathname :initarg :fasl))
    (:documentation "Class For a system that is delivered as a precompiled fasl"))

  (defclass prebuilt-system (system)
    ((build-pathname :initarg :static-library :initarg :lib
                     :accessor prebuilt-system-static-library))
    (:documentation "Class for a system delivered with a linkable static library (.a/.lib)")))


;;;
;;; BUNDLE-OP
;;;
;;; This operation takes all components from one or more systems and
;;; creates a single output file, which may be
;;; a FASL, a statically linked library, a shared library, etc.
;;; The different targets are defined by specialization.
;;;
(when-upgrading (:version "3.2.0")
  ;; Cancel any previously defined method
  (defmethod initialize-instance :after ((instance bundle-op) &rest initargs &key &allow-other-keys)
    (declare (ignore initargs))))

(with-upgradability ()
  (defgeneric trivial-system-p (component))

  (defun user-system-p (s)
    (and (typep s 'system)
         (not (builtin-system-p s))
         (not (trivial-system-p s)))))

(eval-when (#-lispworks :compile-toplevel :load-toplevel :execute)
  (deftype user-system () '(and system (satisfies user-system-p))))

;;;
;;; First we handle monolithic bundles.
;;; These are standalone systems which contain everything,
;;; including other ASDF systems required by the current one.
;;; A PROGRAM is always monolithic.
;;;
;;; MONOLITHIC SHARED LIBRARIES, PROGRAMS, FASL
;;;
(with-upgradability ()
  (defun direct-dependency-files (o c &key (test 'identity) (key 'output-files) &allow-other-keys)
    ;; This function selects output files from direct dependencies;
    ;; your component-depends-on method must gather the correct dependencies in the correct order.
    (while-collecting (collect)
      (map-direct-dependencies
       t o c #'(lambda (sub-o sub-c)
                 (loop :for f :in (funcall key sub-o sub-c)
                       :when (funcall test f) :do (collect f))))))

  (defun pathname-type-equal-function (type)
    #'(lambda (p) (equalp (pathname-type p) type)))

  (defmethod input-files ((o gather-operation) (c system))
    (unless (eq (bundle-type o) :no-output-file)
      (direct-dependency-files
       o c :key 'output-files
           :test (pathname-type-equal-function (bundle-pathname-type (gather-type o))))))

  ;; Find the operation that produces a given bundle-type
  (defun select-bundle-operation (type &optional monolithic)
    (ecase type
      ((:dll :shared-library)
       (if monolithic 'monolithic-dll-op 'dll-op))
      ((:lib :static-library)
       (if monolithic 'monolithic-lib-op 'lib-op))
      ((:fasl)
       (if monolithic 'monolithic-compile-bundle-op 'compile-bundle-op))
      ((:image)
       'image-op)
      ((:program)
       'program-op))))

;;;
;;; LOAD-BUNDLE-OP
;;;
;;; This is like ASDF's LOAD-OP, but using bundle fasl files.
;;;
(with-upgradability ()
  (defmethod component-depends-on ((o load-bundle-op) (c system))
    `((,o ,@(component-sideway-dependencies c))
      (,(if (user-system-p c) 'compile-bundle-op 'load-op) ,c)
      ,@(call-next-method)))

  (defmethod input-files ((o load-bundle-op) (c system))
    (when (user-system-p c)
      (output-files (find-operation o 'compile-bundle-op) c)))

  (defmethod perform ((o load-bundle-op) (c system))
    (when (input-files o c)
      (perform-lisp-load-fasl o c)))

  (defmethod mark-operation-done :after ((o load-bundle-op) (c system))
    (mark-operation-done (find-operation o 'load-op) c)))

;;;
;;; PRECOMPILED FILES
;;;
;;; This component can be used to distribute ASDF systems in precompiled form.
;;; Only useful when the dependencies have also been precompiled.
;;;
(with-upgradability ()
  (defmethod trivial-system-p ((s system))
    (every #'(lambda (c) (typep c 'compiled-file)) (component-children s)))

  (defmethod input-files ((o operation) (c compiled-file))
    (list (component-pathname c)))
  (defmethod perform ((o load-op) (c compiled-file))
    (perform-lisp-load-fasl o c))
  (defmethod perform ((o load-source-op) (c compiled-file))
    (perform (find-operation o 'load-op) c))
  (defmethod perform ((o operation) (c compiled-file))
    nil))

;;;
;;; Pre-built systems
;;;
(with-upgradability ()
  (defmethod trivial-system-p ((s prebuilt-system))
    t)

  (defmethod perform ((o link-op) (c prebuilt-system))
    nil)

  (defmethod perform ((o basic-compile-bundle-op) (c prebuilt-system))
    nil)

  (defmethod perform ((o lib-op) (c prebuilt-system))
    nil)

  (defmethod perform ((o dll-op) (c prebuilt-system))
    nil)

  (defmethod component-depends-on ((o gather-operation) (c prebuilt-system))
    nil)

  (defmethod output-files ((o lib-op) (c prebuilt-system))
    (values (list (prebuilt-system-static-library c)) t)))


;;;
;;; PREBUILT SYSTEM CREATOR
;;;
(with-upgradability ()
  (defmethod output-files ((o deliver-asd-op) (s system))
    (list (make-pathname :name (component-name s) :type "asd"
                         :defaults (component-pathname s))))

  (defmethod perform ((o deliver-asd-op) (s system))
    (let* ((inputs (input-files o s))
           (fasl (first inputs))
           (library (second inputs))
           (asd (first (output-files o s)))
           (name (if (and fasl asd) (pathname-name asd) (return-from perform)))
           (version (component-version s))
           (dependencies
             (if (operation-monolithic-p o)
                 ;; We want only dependencies, and we use basic-load-op rather than load-op so that
                 ;; this will keep working on systems when *load-system-operation* is load-bundle-op
                 (remove-if-not 'builtin-system-p
                                (required-components s :component-type 'system
                                                       :keep-operation 'basic-load-op))
                 (while-collecting (x) ;; resolve the sideway-dependencies of s
                   (map-direct-dependencies
                    t 'load-op s
                    #'(lambda (o c)
                        (when (and (typep o 'load-op) (typep c 'system))
                          (x c)))))))
           (depends-on (mapcar 'coerce-name dependencies)))
      (when (pathname-equal asd (system-source-file s))
        (cerror "overwrite the asd file"
                "~/asdf-action:format-action/ is going to overwrite the system definition file ~S ~
which is probably not what you want; you probably need to tweak your output translations."
                (cons o s) asd))
      (with-open-file (s asd :direction :output :if-exists :supersede
                             :if-does-not-exist :create)
        (format s ";;; Prebuilt~:[~; monolithic~] ASDF definition for system ~A~%"
                (operation-monolithic-p o) name)
        (format s ";;; Built for ~A ~A on a ~A/~A ~A~%"
                (lisp-implementation-type)
                (lisp-implementation-version)
                (software-type)
                (machine-type)
                (software-version))
        (let ((*package* (find-package :asdf-user)))
          (pprint `(defsystem ,name
                     :class prebuilt-system
                     :version ,version
                     :depends-on ,depends-on
                     :components ((:compiled-file ,(pathname-name fasl)))
                     ,@(when library `(:lib ,(file-namestring library))))
                  s)
          (terpri s)))))

  #-(or clasp ecl mkcl)
  (defmethod perform ((o basic-compile-bundle-op) (c system))
    (let* ((input-files (input-files o c))
           (fasl-files (remove (compile-file-type) input-files :key #'pathname-type :test-not #'equalp))
           (non-fasl-files (remove (compile-file-type) input-files :key #'pathname-type :test #'equalp))
           (output-files (output-files o c))
           (output-file (first output-files)))
      (assert (eq (not input-files) (not output-files)))
      (when input-files
        (when non-fasl-files
          (error "On ~A, asdf/bundle can only bundle FASL files, but these were also produced: ~S"
                 (implementation-type) non-fasl-files))
        (when (or (prologue-code c) (epilogue-code c))
          (error "prologue-code and epilogue-code are not supported on ~A"
                 (implementation-type)))
        (with-staging-pathname (output-file)
          (combine-fasls fasl-files output-file)))))

  (defmethod input-files ((o load-op) (s precompiled-system))
    (bundle-output-files (find-operation o 'compile-bundle-op) s))

  (defmethod perform ((o load-op) (s precompiled-system))
    (perform-lisp-load-fasl o s))

  (defmethod component-depends-on ((o load-bundle-op) (s precompiled-system))
    #+xcl (declare (ignorable o))
    `((load-op ,s) ,@(call-next-method))))

#| ;; Example use:
(asdf:defsystem :precompiled-asdf-utils :class asdf::precompiled-system :fasl (asdf:apply-output-translations (asdf:system-relative-pathname :asdf-utils "asdf-utils.system.fasl")))
(asdf:load-system :precompiled-asdf-utils)
|#

#+(or clasp ecl mkcl)
(with-upgradability ()

  #+ecl ;; doesn't work on clasp or mkcl (yet?).
  (unless (use-ecl-byte-compiler-p)
    (setf *load-system-operation* 'load-bundle-op))

  (defun system-module-pathname (module)
    (let ((name (coerce-name module)))
      (some
       'file-exists-p
       (list
        #+clasp (compile-file-pathname (make-pathname :name name :defaults "sys:") :output-type :object)
        #+ecl (compile-file-pathname (make-pathname :name name :defaults "sys:") :type :lib)
        #+ecl (compile-file-pathname (make-pathname :name name :defaults "sys:") :type :object)
        #+mkcl (make-pathname :name name :type (bundle-pathname-type :lib) :defaults #p"sys:")
        #+mkcl (make-pathname :name name :type (bundle-pathname-type :lib) :defaults #p"sys:contrib;")))))

  (defun make-prebuilt-system (name &optional (pathname (system-module-pathname name)))
    "Creates a prebuilt-system if PATHNAME isn't NIL."
    (when pathname
      (make-instance 'prebuilt-system
                     :name (coerce-name name)
                     :static-library (resolve-symlinks* pathname))))

  (defmethod component-depends-on :around ((o image-op) (c system))
    (destructuring-bind ((lib-op . deps)) (call-next-method)
      (labels ((has-it-p (x) (find x deps :test 'equal :key 'coerce-name))
               (ensure-linkable-system (x)
		 (unless (has-it-p x)
                   (or (if-let (s (find-system x))
                         (and (system-source-directory x)
                              (list s)))
                       (if-let (p (system-module-pathname x))
                         (list (make-prebuilt-system x p)))))))
        `((,lib-op
           ,@(unless (no-uiop c)
               (append (ensure-linkable-system "cmp")
                       (or (ensure-linkable-system "uiop")
                           (ensure-linkable-system "asdf"))))
           ,@deps)))))

  (defmethod perform ((o link-op) (c system))
    (let* ((object-files (input-files o c))
           (output (output-files o c))
           (bundle (first output))
           (programp (typep o 'program-op))
           (kind (bundle-type o)))
      (when output
        (apply 'create-image
               bundle (append
                       (when programp (prefix-lisp-object-files c))
                       object-files
                       (when programp (postfix-lisp-object-files c)))
               :kind kind
               :prologue-code (when programp (prologue-code c))
               :epilogue-code (when programp (epilogue-code c))
               :build-args (when programp (extra-build-args c))
               :extra-object-files (when programp (extra-object-files c))
               :no-uiop (no-uiop c)
               (when programp `(:entry-point ,(component-entry-point c))))))))
;;;; -------------------------------------------------------------------------
;;;; Concatenate-source

(uiop/package:define-package :asdf/concatenate-source
  (:recycle :asdf/concatenate-source :asdf)
  (:use :uiop/common-lisp :uiop :asdf/upgrade
   :asdf/component :asdf/operation
   :asdf/system :asdf/find-system
   :asdf/action :asdf/lisp-action :asdf/plan :asdf/bundle)
  (:export
   #:concatenate-source-op
   #:load-concatenated-source-op
   #:compile-concatenated-source-op
   #:load-compiled-concatenated-source-op
   #:monolithic-concatenate-source-op
   #:monolithic-load-concatenated-source-op
   #:monolithic-compile-concatenated-source-op
   #:monolithic-load-compiled-concatenated-source-op))
(in-package :asdf/concatenate-source)

;;;
;;; Concatenate sources
;;;
(with-upgradability ()
  ;; Base classes for both regular and monolithic concatenate-source operations
  (defclass basic-concatenate-source-op (bundle-op)
    ((bundle-type :initform "lisp" :allocation :class)))
  (defclass basic-load-concatenated-source-op (basic-load-op selfward-operation) ())
  (defclass basic-compile-concatenated-source-op (basic-compile-op selfward-operation) ())
  (defclass basic-load-compiled-concatenated-source-op (basic-load-op selfward-operation) ())

  ;; Regular concatenate-source operations
  (defclass concatenate-source-op (basic-concatenate-source-op non-propagating-operation) ()
    (:documentation "Operation to concatenate all sources in a system into a single file"))
  (defclass load-concatenated-source-op (basic-load-concatenated-source-op)
    ((selfward-operation :initform '(prepare-op concatenate-source-op) :allocation :class))
    (:documentation "Operation to load the result of concatenate-source-op as source"))
  (defclass compile-concatenated-source-op (basic-compile-concatenated-source-op)
    ((selfward-operation :initform '(prepare-op concatenate-source-op) :allocation :class))
    (:documentation "Operation to compile the result of concatenate-source-op"))
  (defclass load-compiled-concatenated-source-op (basic-load-compiled-concatenated-source-op)
    ((selfward-operation :initform '(prepare-op compile-concatenated-source-op) :allocation :class))
    (:documentation "Operation to load the result of compile-concatenated-source-op"))

  (defclass monolithic-concatenate-source-op
      (basic-concatenate-source-op monolithic-bundle-op non-propagating-operation) ()
    (:documentation "Operation to concatenate all sources in a system and its dependencies
into a single file"))
  (defclass monolithic-load-concatenated-source-op (basic-load-concatenated-source-op)
    ((selfward-operation :initform 'monolithic-concatenate-source-op :allocation :class))
    (:documentation "Operation to load the result of monolithic-concatenate-source-op as source"))
  (defclass monolithic-compile-concatenated-source-op (basic-compile-concatenated-source-op)
    ((selfward-operation :initform 'monolithic-concatenate-source-op :allocation :class))
    (:documentation "Operation to compile the result of monolithic-concatenate-source-op"))
  (defclass monolithic-load-compiled-concatenated-source-op
      (basic-load-compiled-concatenated-source-op)
    ((selfward-operation :initform 'monolithic-compile-concatenated-source-op :allocation :class))
    (:documentation "Operation to load the result of monolithic-compile-concatenated-source-op"))

  (defmethod input-files ((operation basic-concatenate-source-op) (s system))
    (loop :with encoding = (or (component-encoding s) *default-encoding*)
          :with other-encodings = '()
          :with around-compile = (around-compile-hook s)
          :with other-around-compile = '()
          :for c :in (required-components  ;; see note about similar call to required-components
                      s :goal-operation 'load-op ;;  in bundle.lisp
                        :keep-operation 'basic-compile-op
                        :other-systems (operation-monolithic-p operation))
          :append
          (when (typep c 'cl-source-file)
            (let ((e (component-encoding c)))
              (unless (equal e encoding)
                (let ((a (assoc e other-encodings)))
                  (if a (push (component-find-path c) (cdr a))
                      (push (list a (component-find-path c)) other-encodings)))))
            (unless (equal around-compile (around-compile-hook c))
              (push (component-find-path c) other-around-compile))
            (input-files (make-operation 'compile-op) c)) :into inputs
          :finally
             (when other-encodings
               (warn "~S uses encoding ~A but has sources that use these encodings:~{ ~A~}"
                     operation encoding
                     (mapcar #'(lambda (x) (cons (car x) (list (reverse (cdr x)))))
                             other-encodings)))
             (when other-around-compile
               (warn "~S uses around-compile hook ~A but has sources that use these hooks: ~A"
                     operation around-compile other-around-compile))
             (return inputs)))
  (defmethod output-files ((o basic-compile-concatenated-source-op) (s system))
    (lisp-compilation-output-files o s))

  (defmethod perform ((o basic-concatenate-source-op) (s system))
    (let* ((ins (input-files o s))
           (out (output-file o s))
           (tmp (tmpize-pathname out)))
      (concatenate-files ins tmp)
      (rename-file-overwriting-target tmp out)))
  (defmethod perform ((o basic-load-concatenated-source-op) (s system))
    (perform-lisp-load-source o s))
  (defmethod perform ((o basic-compile-concatenated-source-op) (s system))
    (perform-lisp-compilation o s))
  (defmethod perform ((o basic-load-compiled-concatenated-source-op) (s system))
    (perform-lisp-load-fasl o s)))

;;;; ---------------------------------------------------------------------------
;;;; asdf-output-translations

(uiop/package:define-package :asdf/output-translations
  (:recycle :asdf/output-translations :asdf)
  (:use :uiop/common-lisp :uiop :asdf/upgrade)
  (:export
   #:*output-translations* #:*output-translations-parameter*
   #:invalid-output-translation
   #:output-translations #:output-translations-initialized-p
   #:initialize-output-translations #:clear-output-translations
   #:disable-output-translations #:ensure-output-translations
   #:apply-output-translations
   #:validate-output-translations-directive #:validate-output-translations-form
   #:validate-output-translations-file #:validate-output-translations-directory
   #:parse-output-translations-string #:wrapping-output-translations
   #:user-output-translations-pathname #:system-output-translations-pathname
   #:user-output-translations-directory-pathname #:system-output-translations-directory-pathname
   #:environment-output-translations #:process-output-translations
   #:compute-output-translations
   #+abcl #:translate-jar-pathname
   ))
(in-package :asdf/output-translations)

;; (setf output-translations) between 2.27 and 3.0.3 was using a defsetf macro
;; for the sake of obsolete versions of GCL 2.6. Make sure it doesn't come to haunt us.
(when-upgrading (:version "3.1.2") (fmakunbound '(setf output-translations)))

(with-upgradability ()
  (define-condition invalid-output-translation (invalid-configuration warning)
    ((format :initform (compatfmt "~@<Invalid asdf output-translation ~S~@[ in ~S~]~@{ ~@?~}~@:>"))))

  (defvar *output-translations* ()
    "Either NIL (for uninitialized), or a list of one element,
said element itself being a sorted list of mappings.
Each mapping is a pair of a source pathname and destination pathname,
and the order is by decreasing length of namestring of the source pathname.")

  (defun output-translations ()
    "Return the configured output-translations, if any"
    (car *output-translations*))

  ;; Set the output-translations, by sorting the provided new-value.
  (defun set-output-translations (new-value)
    (setf *output-translations*
          (list
           (stable-sort (copy-list new-value) #'>
                        :key #'(lambda (x)
                                 (etypecase (car x)
                                   ((eql t) -1)
                                   (pathname
                                    (let ((directory
                                           (normalize-pathname-directory-component
                                            (pathname-directory (car x)))))
                                      (if (listp directory) (length directory) 0))))))))
    new-value)
  (defun (setf output-translations) (new-value) (set-output-translations new-value))

  (defun output-translations-initialized-p ()
    "Have the output-translations been initialized yet?"
    (and *output-translations* t))

  (defun clear-output-translations ()
    "Undoes any initialization of the output translations."
    (setf *output-translations* '())
    (values))
  (register-clear-configuration-hook 'clear-output-translations)


  ;;; Validation of the configuration directives...

  (defun validate-output-translations-directive (directive)
    (or (member directive '(:enable-user-cache :disable-cache nil))
        (and (consp directive)
             (or (and (length=n-p directive 2)
                      (or (and (eq (first directive) :include)
                               (typep (second directive) '(or string pathname null)))
                          (and (location-designator-p (first directive))
                               (or (location-designator-p (second directive))
                                   (location-function-p (second directive))))))
                 (and (length=n-p directive 1)
                      (location-designator-p (first directive)))))))

  (defun validate-output-translations-form (form &key location)
    (validate-configuration-form
     form
     :output-translations
     'validate-output-translations-directive
     :location location :invalid-form-reporter 'invalid-output-translation))

  (defun validate-output-translations-file (file)
    (validate-configuration-file
     file 'validate-output-translations-form :description "output translations"))

  (defun validate-output-translations-directory (directory)
    (validate-configuration-directory
     directory :output-translations 'validate-output-translations-directive
               :invalid-form-reporter 'invalid-output-translation))


  ;;; Parse the ASDF_OUTPUT_TRANSLATIONS environment variable and/or some file contents
  (defun parse-output-translations-string (string &key location)
    (cond
      ((or (null string) (equal string ""))
       '(:output-translations :inherit-configuration))
      ((not (stringp string))
       (error (compatfmt "~@<Environment string isn't: ~3i~_~S~@:>") string))
      ((eql (char string 0) #\")
       (parse-output-translations-string (read-from-string string) :location location))
      ((eql (char string 0) #\()
       (validate-output-translations-form (read-from-string string) :location location))
      (t
       (loop
         :with inherit = nil
         :with directives = ()
         :with start = 0
         :with end = (length string)
         :with source = nil
         :with separator = (inter-directory-separator)
         :for i = (or (position separator string :start start) end) :do
           (let ((s (subseq string start i)))
             (cond
               (source
                (push (list source (if (equal "" s) nil s)) directives)
                (setf source nil))
               ((equal "" s)
                (when inherit
                  (error (compatfmt "~@<Only one inherited configuration allowed: ~3i~_~S~@:>")
                         string))
                (setf inherit t)
                (push :inherit-configuration directives))
               (t
                (setf source s)))
             (setf start (1+ i))
             (when (> start end)
               (when source
                 (error (compatfmt "~@<Uneven number of components in source to destination mapping: ~3i~_~S~@:>")
                        string))
               (unless inherit
                 (push :ignore-inherited-configuration directives))
               (return `(:output-translations ,@(nreverse directives)))))))))


  ;; The default sources of configuration for output-translations
  (defparameter* *default-output-translations*
    '(environment-output-translations
      user-output-translations-pathname
      user-output-translations-directory-pathname
      system-output-translations-pathname
      system-output-translations-directory-pathname))

  ;; Compulsory implementation-dependent wrapping for the translations:
  ;; handle implementation-provided systems.
  (defun wrapping-output-translations ()
    `(:output-translations
    ;; Some implementations have precompiled ASDF systems,
    ;; so we must disable translations for implementation paths.
      #+(or clasp #|clozure|# ecl mkcl sbcl)
      ,@(let ((h (resolve-symlinks* (lisp-implementation-directory))))
          (when h `(((,h ,*wild-path*) ()))))
      #+mkcl (,(translate-logical-pathname "CONTRIB:") ())
      ;; All-import, here is where we want user stuff to be:
      :inherit-configuration
      ;; These are for convenience, and can be overridden by the user:
      #+abcl (#p"/___jar___file___root___/**/*.*" (:user-cache #p"**/*.*"))
      #+abcl (#p"jar:file:/**/*.jar!/**/*.*" (:function translate-jar-pathname))
      ;; We enable the user cache by default, and here is the place we do:
      :enable-user-cache))

  ;; Relative pathnames of output-translations configuration to XDG configuration directory
  (defparameter *output-translations-file* (parse-unix-namestring "common-lisp/asdf-output-translations.conf"))
  (defparameter *output-translations-directory* (parse-unix-namestring "common-lisp/asdf-output-translations.conf.d/"))

  ;; Locating various configuration pathnames, depending on input or output intent.
  (defun user-output-translations-pathname (&key (direction :input))
    (xdg-config-pathname *output-translations-file* direction))
  (defun system-output-translations-pathname (&key (direction :input))
    (find-preferred-file (system-config-pathnames *output-translations-file*)
                         :direction direction))
  (defun user-output-translations-directory-pathname (&key (direction :input))
    (xdg-config-pathname *output-translations-directory* direction))
  (defun system-output-translations-directory-pathname (&key (direction :input))
    (find-preferred-file (system-config-pathnames *output-translations-directory*)
                         :direction direction))
  (defun environment-output-translations ()
    (getenv "ASDF_OUTPUT_TRANSLATIONS"))


  ;;; Processing the configuration.

  (defgeneric process-output-translations (spec &key inherit collect))

  (defun inherit-output-translations (inherit &key collect)
    (when inherit
      (process-output-translations (first inherit) :collect collect :inherit (rest inherit))))

  (defun* (process-output-translations-directive) (directive &key inherit collect)
    (if (atom directive)
        (ecase directive
          ((:enable-user-cache)
           (process-output-translations-directive '(t :user-cache) :collect collect))
          ((:disable-cache)
           (process-output-translations-directive '(t t) :collect collect))
          ((:inherit-configuration)
           (inherit-output-translations inherit :collect collect))
          ((:ignore-inherited-configuration :ignore-invalid-entries nil)
           nil))
        (let ((src (first directive))
              (dst (second directive)))
          (if (eq src :include)
              (when dst
                (process-output-translations (pathname dst) :inherit nil :collect collect))
              (when src
                (let ((trusrc (or (eql src t)
                                  (let ((loc (resolve-location src :ensure-directory t :wilden t)))
                                    (if (absolute-pathname-p loc) (resolve-symlinks* loc) loc)))))
                  (cond
                    ((location-function-p dst)
                     (funcall collect
                              (list trusrc (ensure-function (second dst)))))
                    ((typep dst 'boolean)
                     (funcall collect (list trusrc t)))
                    (t
                     (let* ((trudst (resolve-location dst :ensure-directory t :wilden t)))
                       (funcall collect (list trudst t))
                       (funcall collect (list trusrc trudst)))))))))))

  (defmethod process-output-translations ((x symbol) &key
                                                       (inherit *default-output-translations*)
                                                       collect)
    (process-output-translations (funcall x) :inherit inherit :collect collect))
  (defmethod process-output-translations ((pathname pathname) &key inherit collect)
    (cond
      ((directory-pathname-p pathname)
       (process-output-translations (validate-output-translations-directory pathname)
                                    :inherit inherit :collect collect))
      ((probe-file* pathname :truename *resolve-symlinks*)
       (process-output-translations (validate-output-translations-file pathname)
                                    :inherit inherit :collect collect))
      (t
       (inherit-output-translations inherit :collect collect))))
  (defmethod process-output-translations ((string string) &key inherit collect)
    (process-output-translations (parse-output-translations-string string)
                                 :inherit inherit :collect collect))
  (defmethod process-output-translations ((x null) &key inherit collect)
    (inherit-output-translations inherit :collect collect))
  (defmethod process-output-translations ((form cons) &key inherit collect)
    (dolist (directive (cdr (validate-output-translations-form form)))
      (process-output-translations-directive directive :inherit inherit :collect collect)))


  ;;; Top-level entry-points to configure output-translations

  (defun compute-output-translations (&optional parameter)
    "read the configuration, return it"
    (remove-duplicates
     (while-collecting (c)
       (inherit-output-translations
        `(wrapping-output-translations ,parameter ,@*default-output-translations*) :collect #'c))
     :test 'equal :from-end t))

  ;; Saving the user-provided parameter to output-translations, if any,
  ;; so we can recompute the translations after code upgrade.
  (defvar *output-translations-parameter* nil)

  ;; Main entry-point for users.
  (defun initialize-output-translations (&optional (parameter *output-translations-parameter*))
    "read the configuration, initialize the internal configuration variable,
return the configuration"
    (setf *output-translations-parameter* parameter
          (output-translations) (compute-output-translations parameter)))

  (defun disable-output-translations ()
    "Initialize output translations in a way that maps every file to itself,
effectively disabling the output translation facility."
    (initialize-output-translations
     '(:output-translations :disable-cache :ignore-inherited-configuration)))

  ;; checks an initial variable to see whether the state is initialized
  ;; or cleared. In the former case, return current configuration; in
  ;; the latter, initialize.  ASDF will call this function at the start
  ;; of (asdf:find-system).
  (defun ensure-output-translations ()
    (if (output-translations-initialized-p)
        (output-translations)
        (initialize-output-translations)))


  ;; Top-level entry-point to _use_ output-translations
  (defun* (apply-output-translations) (path)
    (etypecase path
      (logical-pathname
       path)
      ((or pathname string)
       (ensure-output-translations)
       (loop* :with p = (resolve-symlinks* path)
              :for (source destination) :in (car *output-translations*)
              :for root = (when (or (eq source t)
                                    (and (pathnamep source)
                                         (not (absolute-pathname-p source))))
                            (pathname-root p))
              :for absolute-source = (cond
                                       ((eq source t) (wilden root))
                                       (root (merge-pathnames* source root))
                                       (t source))
              :when (or (eq source t) (pathname-match-p p absolute-source))
              :return (translate-pathname* p absolute-source destination root source)
              :finally (return p)))))


  ;; Hook into uiop's output-translation mechanism
  #-cormanlisp
  (setf *output-translation-function* 'apply-output-translations)


  ;;; Implementation-dependent hacks
  #+abcl ;; ABCL: make it possible to use systems provided in the ABCL jar.
  (defun translate-jar-pathname (source wildcard)
    (declare (ignore wildcard))
    (flet ((normalize-device (pathname)
             (if (find :windows *features*)
                 pathname
                 (make-pathname :defaults pathname :device :unspecific))))
      (let* ((jar
               (pathname (first (pathname-device source))))
             (target-root-directory-namestring
               (format nil "/___jar___file___root___/~@[~A/~]"
                       (and (find :windows *features*)
                            (pathname-device jar))))
             (relative-source
               (relativize-pathname-directory source))
             (relative-jar
               (relativize-pathname-directory (ensure-directory-pathname jar)))
             (target-root-directory
               (normalize-device
                (pathname-directory-pathname
                 (parse-namestring target-root-directory-namestring))))
             (target-root
               (merge-pathnames* relative-jar target-root-directory))
             (target
               (merge-pathnames* relative-source target-root)))
        (normalize-device (apply-output-translations target))))))

;;;; -----------------------------------------------------------------
;;;; Source Registry Configuration, by Francois-Rene Rideau
;;;; See the Manual and https://bugs.launchpad.net/asdf/+bug/485918

(uiop/package:define-package :asdf/source-registry
  (:recycle :asdf/source-registry :asdf)
  (:use :uiop/common-lisp :uiop :asdf/upgrade :asdf/find-system)
  (:export
   #:*source-registry-parameter* #:*default-source-registries*
   #:invalid-source-registry
   #:source-registry-initialized-p
   #:initialize-source-registry #:clear-source-registry #:*source-registry*
   #:ensure-source-registry #:*source-registry-parameter*
   #:*default-source-registry-exclusions* #:*source-registry-exclusions*
   #:*wild-asd* #:directory-asd-files #:register-asd-directory
   #:*recurse-beyond-asds* #:collect-asds-in-directory #:collect-sub*directories-asd-files
   #:validate-source-registry-directive #:validate-source-registry-form
   #:validate-source-registry-file #:validate-source-registry-directory
   #:parse-source-registry-string #:wrapping-source-registry
   #:default-user-source-registry #:default-system-source-registry
   #:user-source-registry #:system-source-registry
   #:user-source-registry-directory #:system-source-registry-directory
   #:environment-source-registry #:process-source-registry #:inherit-source-registry
   #:compute-source-registry #:flatten-source-registry
   #:sysdef-source-registry-search))
(in-package :asdf/source-registry)

(with-upgradability ()
  (define-condition invalid-source-registry (invalid-configuration warning)
    ((format :initform (compatfmt "~@<Invalid source registry ~S~@[ in ~S~]~@{ ~@?~}~@:>"))))

  ;; Default list of directories under which the source-registry tree search won't recurse
  (defvar *default-source-registry-exclusions*
    '(;;-- Using ack 1.2 exclusions
      ".bzr" ".cdv"
      ;; "~.dep" "~.dot" "~.nib" "~.plst" ; we don't support ack wildcards
      ".git" ".hg" ".pc" ".svn" "CVS" "RCS" "SCCS" "_darcs"
      "_sgbak" "autom4te.cache" "cover_db" "_build"
      ;;-- debian often builds stuff under the debian directory... BAD.
      "debian"))

  ;; Actual list of directories under which the source-registry tree search won't recurse
  (defvar *source-registry-exclusions* *default-source-registry-exclusions*)

  ;; The state of the source-registry after search in configured locations
  (defvar *source-registry* nil
    "Either NIL (for uninitialized), or an equal hash-table, mapping
system names to pathnames of .asd files")

  ;; Saving the user-provided parameter to the source-registry, if any,
  ;; so we can recompute the source-registry after code upgrade.
  (defvar *source-registry-parameter* nil)

  (defun source-registry-initialized-p ()
    (typep *source-registry* 'hash-table))

  (defun clear-source-registry ()
    "Undoes any initialization of the source registry."
    (setf *source-registry* nil)
    (values))
  (register-clear-configuration-hook 'clear-source-registry)

  (defparameter *wild-asd*
    (make-pathname :directory nil :name *wild* :type "asd" :version :newest))

  (defun directory-asd-files (directory)
    (directory-files directory *wild-asd*))

  (defun collect-asds-in-directory (directory collect)
    (let ((asds (directory-asd-files directory)))
      (map () collect asds)
      asds))

  (defvar *recurse-beyond-asds* t
    "Should :tree entries of the source-registry recurse in subdirectories
after having found a .asd file? True by default.")

  ;; When walking down a filesystem tree, if in a directory there is a .cl-source-registry.cache,
  ;; read its contents instead of further recursively querying the filesystem.
  (defun process-source-registry-cache (directory collect)
    (let ((cache (ignore-errors
                  (safe-read-file-form (subpathname directory ".cl-source-registry.cache")))))
      (when (and (listp cache) (eq :source-registry-cache (first cache)))
        (loop :for s :in (rest cache) :do (funcall collect (subpathname directory s)))
        t)))

  (defun collect-sub*directories-asd-files
      (directory &key (exclude *default-source-registry-exclusions*) collect
                   (recurse-beyond-asds *recurse-beyond-asds*) ignore-cache)
    (let ((visited (make-hash-table :test 'equalp)))
      (flet ((collectp (dir)
               (unless (and (not ignore-cache) (process-source-registry-cache directory collect))
                 (let ((asds (collect-asds-in-directory dir collect)))
                   (or recurse-beyond-asds (not asds)))))
             (recursep (x)                    ; x will be a directory pathname
               (and
                (not (member (car (last (pathname-directory x))) exclude :test #'equal))
                (flet ((pathname-key (x)
                         (namestring (truename* x))))
                  (let ((visitedp (gethash (pathname-key x) visited)))
                    (if visitedp nil
                        (setf (gethash (pathname-key x) visited) t)))))))
      (collect-sub*directories directory #'collectp #'recursep (constantly nil)))))


  ;;; Validate the configuration forms

  (defun validate-source-registry-directive (directive)
    (or (member directive '(:default-registry))
        (and (consp directive)
             (let ((rest (rest directive)))
               (case (first directive)
                 ((:include :directory :tree)
                  (and (length=n-p rest 1)
                       (location-designator-p (first rest))))
                 ((:exclude :also-exclude)
                  (every #'stringp rest))
                 ((:default-registry)
                  (null rest)))))))

  (defun validate-source-registry-form (form &key location)
    (validate-configuration-form
     form :source-registry 'validate-source-registry-directive
          :location location :invalid-form-reporter 'invalid-source-registry))

  (defun validate-source-registry-file (file)
    (validate-configuration-file
     file 'validate-source-registry-form :description "a source registry"))

  (defun validate-source-registry-directory (directory)
    (validate-configuration-directory
     directory :source-registry 'validate-source-registry-directive
               :invalid-form-reporter 'invalid-source-registry))


  ;;; Parse the configuration string

  (defun parse-source-registry-string (string &key location)
    (cond
      ((or (null string) (equal string ""))
       '(:source-registry :inherit-configuration))
      ((not (stringp string))
       (error (compatfmt "~@<Environment string isn't: ~3i~_~S~@:>") string))
      ((find (char string 0) "\"(")
       (validate-source-registry-form (read-from-string string) :location location))
      (t
       (loop
         :with inherit = nil
         :with directives = ()
         :with start = 0
         :with end = (length string)
         :with separator = (inter-directory-separator)
         :for pos = (position separator string :start start) :do
           (let ((s (subseq string start (or pos end))))
             (flet ((check (dir)
                      (unless (absolute-pathname-p dir)
                        (error (compatfmt "~@<source-registry string must specify absolute pathnames: ~3i~_~S~@:>") string))
                      dir))
               (cond
                 ((equal "" s) ; empty element: inherit
                  (when inherit
                    (error (compatfmt "~@<Only one inherited configuration allowed: ~3i~_~S~@:>")
                           string))
                  (setf inherit t)
                  (push ':inherit-configuration directives))
                 ((string-suffix-p s "//") ;; TODO: allow for doubling of separator even outside Unix?
                  (push `(:tree ,(check (subseq s 0 (- (length s) 2)))) directives))
                 (t
                  (push `(:directory ,(check s)) directives))))
             (cond
               (pos
                (setf start (1+ pos)))
               (t
                (unless inherit
                  (push '(:ignore-inherited-configuration) directives))
                (return `(:source-registry ,@(nreverse directives))))))))))

  (defun register-asd-directory (directory &key recurse exclude collect)
    (if (not recurse)
        (collect-asds-in-directory directory collect)
        (collect-sub*directories-asd-files
         directory :exclude exclude :collect collect)))

  (defparameter* *default-source-registries*
    '(environment-source-registry
      user-source-registry
      user-source-registry-directory
      default-user-source-registry
      system-source-registry
      system-source-registry-directory
      default-system-source-registry)
    "List of default source registries" "3.1.0.102")

  (defparameter *source-registry-file* (parse-unix-namestring "common-lisp/source-registry.conf"))
  (defparameter *source-registry-directory* (parse-unix-namestring "common-lisp/source-registry.conf.d/"))

  (defun wrapping-source-registry ()
    `(:source-registry
      #+(or clasp ecl sbcl) (:tree ,(resolve-symlinks* (lisp-implementation-directory)))
      :inherit-configuration
      #+mkcl (:tree ,(translate-logical-pathname "SYS:"))
      #+cmucl (:tree #p"modules:")
      #+scl (:tree #p"file://modules/")))
  (defun default-user-source-registry ()
    `(:source-registry
      (:tree (:home "common-lisp/"))
      #+sbcl (:directory (:home ".sbcl/systems/"))
      (:directory ,(xdg-data-home "common-lisp/systems/"))
      (:tree ,(xdg-data-home "common-lisp/source/"))
      :inherit-configuration))
  (defun default-system-source-registry ()
    `(:source-registry
      ,@(loop :for dir :in (xdg-data-dirs "common-lisp/")
              :collect `(:directory (,dir "systems/"))
              :collect `(:tree (,dir "source/")))
      :inherit-configuration))
  (defun user-source-registry (&key (direction :input))
    (xdg-config-pathname *source-registry-file* direction))
  (defun system-source-registry (&key (direction :input))
    (find-preferred-file (system-config-pathnames *source-registry-file*)
                         :direction direction))
  (defun user-source-registry-directory (&key (direction :input))
    (xdg-config-pathname *source-registry-directory* direction))
  (defun system-source-registry-directory (&key (direction :input))
    (find-preferred-file (system-config-pathnames *source-registry-directory*)
                         :direction direction))
  (defun environment-source-registry ()
    (getenv "CL_SOURCE_REGISTRY"))


  ;;; Process the source-registry configuration

  (defgeneric process-source-registry (spec &key inherit register))

  (defun* (inherit-source-registry) (inherit &key register)
    (when inherit
      (process-source-registry (first inherit) :register register :inherit (rest inherit))))

  (defun* (process-source-registry-directive) (directive &key inherit register)
    (destructuring-bind (kw &rest rest) (if (consp directive) directive (list directive))
      (ecase kw
        ((:include)
         (destructuring-bind (pathname) rest
           (process-source-registry (resolve-location pathname) :inherit nil :register register)))
        ((:directory)
         (destructuring-bind (pathname) rest
           (when pathname
             (funcall register (resolve-location pathname :ensure-directory t)))))
        ((:tree)
         (destructuring-bind (pathname) rest
           (when pathname
             (funcall register (resolve-location pathname :ensure-directory t)
                      :recurse t :exclude *source-registry-exclusions*))))
        ((:exclude)
         (setf *source-registry-exclusions* rest))
        ((:also-exclude)
         (appendf *source-registry-exclusions* rest))
        ((:default-registry)
         (inherit-source-registry
          '(default-user-source-registry default-system-source-registry) :register register))
        ((:inherit-configuration)
         (inherit-source-registry inherit :register register))
        ((:ignore-inherited-configuration)
         nil)))
    nil)

  (defmethod process-source-registry ((x symbol) &key inherit register)
    (process-source-registry (funcall x) :inherit inherit :register register))
  (defmethod process-source-registry ((pathname pathname) &key inherit register)
    (cond
      ((directory-pathname-p pathname)
       (let ((*here-directory* (resolve-symlinks* pathname)))
         (process-source-registry (validate-source-registry-directory pathname)
                                  :inherit inherit :register register)))
      ((probe-file* pathname :truename *resolve-symlinks*)
       (let ((*here-directory* (pathname-directory-pathname pathname)))
         (process-source-registry (validate-source-registry-file pathname)
                                  :inherit inherit :register register)))
      (t
       (inherit-source-registry inherit :register register))))
  (defmethod process-source-registry ((string string) &key inherit register)
    (process-source-registry (parse-source-registry-string string)
                             :inherit inherit :register register))
  (defmethod process-source-registry ((x null) &key inherit register)
    (inherit-source-registry inherit :register register))
  (defmethod process-source-registry ((form cons) &key inherit register)
    (let ((*source-registry-exclusions* *default-source-registry-exclusions*))
      (dolist (directive (cdr (validate-source-registry-form form)))
        (process-source-registry-directive directive :inherit inherit :register register))))


  ;; Flatten the user-provided configuration into an ordered list of directories and trees
  (defun flatten-source-registry (&optional (parameter *source-registry-parameter*))
    (remove-duplicates
     (while-collecting (collect)
       (with-pathname-defaults () ;; be location-independent
         (inherit-source-registry
          `(wrapping-source-registry
            ,parameter
            ,@*default-source-registries*)
          :register #'(lambda (directory &key recurse exclude)
                        (collect (list directory :recurse recurse :exclude exclude))))))
     :test 'equal :from-end t))

  ;; Will read the configuration and initialize all internal variables.
  (defun compute-source-registry (&optional (parameter *source-registry-parameter*)
                                    (registry *source-registry*))
    (dolist (entry (flatten-source-registry parameter))
      (destructuring-bind (directory &key recurse exclude) entry
        (let* ((h (make-hash-table :test 'equal))) ; table to detect duplicates
          (register-asd-directory
           directory :recurse recurse :exclude exclude :collect
           #'(lambda (asd)
               (let* ((name (pathname-name asd))
                      (name (if (typep asd 'logical-pathname)
                                ;; logical pathnames are upper-case,
                                ;; at least in the CLHS and on SBCL,
                                ;; yet (coerce-name :foo) is lower-case.
                                ;; won't work well with (load-system "Foo")
                                ;; instead of (load-system 'foo)
                                (string-downcase name)
                                name)))
                 (cond
                   ((gethash name registry) ; already shadowed by something else
                    nil)
                   ((gethash name h) ; conflict at current level
                    (when *verbose-out*
                      (warn (compatfmt "~@<In source-registry entry ~A~@[/~*~] ~
                                found several entries for ~A - picking ~S over ~S~:>")
                            directory recurse name (gethash name h) asd)))
                   (t
                    (setf (gethash name registry) asd)
                    (setf (gethash name h) asd))))))
          h)))
    (values))

  (defun initialize-source-registry (&optional (parameter *source-registry-parameter*))
    ;; Record the parameter used to configure the registry
    (setf *source-registry-parameter* parameter)
    ;; Clear the previous registry database:
    (setf *source-registry* (make-hash-table :test 'equal))
    ;; Do it!
    (compute-source-registry parameter))

  ;; Checks an initial variable to see whether the state is initialized
  ;; or cleared. In the former case, return current configuration; in
  ;; the latter, initialize.  ASDF will call this function at the start
  ;; of (asdf:find-system) to make sure the source registry is initialized.
  ;; However, it will do so *without* a parameter, at which point it
  ;; will be too late to provide a parameter to this function, though
  ;; you may override the configuration explicitly by calling
  ;; initialize-source-registry directly with your parameter.
  (defun ensure-source-registry (&optional parameter)
    (unless (source-registry-initialized-p)
      (initialize-source-registry parameter))
    (values))

  (defun sysdef-source-registry-search (system)
    (ensure-source-registry)
    (values (gethash (primary-system-name system) *source-registry*))))


;;;; -------------------------------------------------------------------------
;;;; Package systems in the style of quick-build or faslpath

(uiop:define-package :asdf/package-inferred-system
  (:recycle :asdf/package-inferred-system :asdf/package-system :asdf)
  (:use :uiop/common-lisp :uiop
        :asdf/defsystem ;; Using the old name of :asdf/parse-defsystem for compatibility
        :asdf/upgrade :asdf/component :asdf/system :asdf/find-system :asdf/lisp-action)
  (:export
   #:package-inferred-system #:sysdef-package-inferred-system-search
   #:package-system ;; backward compatibility only. To be removed.
   #:register-system-packages
   #:*defpackage-forms* #:*package-inferred-systems* #:package-inferred-system-missing-package-error))
(in-package :asdf/package-inferred-system)

(with-upgradability ()
  ;; The names of the recognized defpackage forms.
  (defparameter *defpackage-forms* '(defpackage define-package))

  (defun initial-package-inferred-systems-table ()
    ;; Mark all existing packages are preloaded.
    (let ((h (make-hash-table :test 'equal)))
      (dolist (p (list-all-packages))
        (dolist (n (package-names p))
          (setf (gethash n h) t)))
      h))

  ;; Mapping from package names to systems that provide them.
  (defvar *package-inferred-systems* (initial-package-inferred-systems-table))

  (defclass package-inferred-system (system)
    ()
    (:documentation "Class for primary systems for which secondary systems are automatically
in the one-file, one-file, one-system style: system names are mapped to files under the primary
system's system-source-directory, dependencies are inferred from the first defpackage form in
every such file"))

  ;; DEPRECATED. For backward compatibility only. To be removed in an upcoming release:
  (defclass package-system (package-inferred-system) ())

  ;; Is a given form recognizable as a defpackage form?
  (defun defpackage-form-p (form)
    (and (consp form)
         (member (car form) *defpackage-forms*)))

  ;; Find the first defpackage form in a stream, if any
  (defun stream-defpackage-form (stream)
    (loop :for form = (read stream nil nil) :while form
          :when (defpackage-form-p form) :return form))

  (defun file-defpackage-form (file)
    "Return the first DEFPACKAGE form in FILE."
    (with-input-file (f file)
      (stream-defpackage-form f)))

  (define-condition package-inferred-system-missing-package-error (system-definition-error)
    ((system :initarg :system :reader error-system)
     (pathname :initarg :pathname :reader error-pathname))
    (:report (lambda (c s)
               (format s (compatfmt "~@<No package form found while ~
                                     trying to define package-inferred-system ~A from file ~A~>")
                       (error-system c) (error-pathname c)))))

  (defun package-dependencies (defpackage-form)
    "Return a list of packages depended on by the package
defined in DEFPACKAGE-FORM.  A package is depended upon if
the DEFPACKAGE-FORM uses it or imports a symbol from it."
    (assert (defpackage-form-p defpackage-form))
    (remove-duplicates
     (while-collecting (dep)
       (loop* :for (option . arguments) :in (cddr defpackage-form) :do
              (ecase option
                ((:use :mix :reexport :use-reexport :mix-reexport)
                 (dolist (p arguments) (dep (string p))))
                ((:import-from :shadowing-import-from)
                 (dep (string (first arguments))))
                ((:nicknames :documentation :shadow :export :intern :unintern :recycle)))))
     :from-end t :test 'equal))

  (defun package-designator-name (package)
    "Normalize a package designator to a string"
    (etypecase package
      (package (package-name package))
      (string package)
      (symbol (string package))))

  (defun register-system-packages (system packages)
    "Register SYSTEM as providing PACKAGES."
    (let ((name (or (eq system t) (coerce-name system))))
      (dolist (p (ensure-list packages))
        (setf (gethash (package-designator-name p) *package-inferred-systems*) name))))

  (defun package-name-system (package-name)
    "Return the name of the SYSTEM providing PACKAGE-NAME, if such exists,
otherwise return a default system name computed from PACKAGE-NAME."
    (check-type package-name string)
    (or (gethash package-name *package-inferred-systems*)
        (string-downcase package-name)))

  ;; Given a file in package-inferred-system style, find its dependencies
  (defun package-inferred-system-file-dependencies (file &optional system)
    (if-let (defpackage-form (file-defpackage-form file))
      (remove t (mapcar 'package-name-system (package-dependencies defpackage-form)))
      (error 'package-inferred-system-missing-package-error :system system :pathname file)))

  ;; Given package-inferred-system object, check whether its specification matches
  ;; the provided parameters
  (defun same-package-inferred-system-p (system name directory subpath around-compile dependencies)
    (and (eq (type-of system) 'package-inferred-system)
         (equal (component-name system) name)
         (pathname-equal directory (component-pathname system))
         (equal dependencies (component-sideway-dependencies system))
         (equal around-compile (around-compile-hook system))
         (let ((children (component-children system)))
           (and (length=n-p children 1)
                (let ((child (first children)))
                  (and (eq (type-of child) 'cl-source-file)
                       (equal (component-name child) "lisp")
                       (and (slot-boundp child 'relative-pathname)
                            (equal (slot-value child 'relative-pathname) subpath))))))))

  ;; sysdef search function to push into *system-definition-search-functions*
  (defun sysdef-package-inferred-system-search (system)
    (let ((primary (primary-system-name system)))
      (unless (equal primary system)
        (let ((top (find-system primary nil)))
          (when (typep top 'package-inferred-system)
            (if-let (dir (component-pathname top))
              (let* ((sub (subseq system (1+ (length primary))))
                     (f (probe-file* (subpathname dir sub :type "lisp")
                                     :truename *resolve-symlinks*)))
                (when (file-pathname-p f)
                  (let ((dependencies (package-inferred-system-file-dependencies f system))
                        (previous (registered-system system))
                        (around-compile (around-compile-hook top)))
                    (if (same-package-inferred-system-p previous system dir sub around-compile dependencies)
                        previous
                        (eval `(defsystem ,system
                                 :class package-inferred-system
                                 :source-file nil
                                 :pathname ,dir
                                 :depends-on ,dependencies
                                 :around-compile ,around-compile
                                 :components ((cl-source-file "lisp" :pathname ,sub)))))))))))))))

(with-upgradability ()
  (pushnew 'sysdef-package-inferred-system-search *system-definition-search-functions*)
  (setf *system-definition-search-functions*
        (remove (find-symbol* :sysdef-package-system-search :asdf/package-system nil)
                *system-definition-search-functions*)))
;;;; -------------------------------------------------------------------------
;;; Backward-compatible interfaces

(uiop/package:define-package :asdf/backward-interface
  (:recycle :asdf/backward-interface :asdf)
  (:use :uiop/common-lisp :uiop :asdf/upgrade
   :asdf/component :asdf/system :asdf/find-system :asdf/operation :asdf/action
   :asdf/lisp-action :asdf/plan :asdf/operate :asdf/output-translations)
  (:export
   #:*asdf-verbose*
   #:operation-error #:compile-error #:compile-failed #:compile-warned
   #:error-component #:error-operation #:traverse
   #:component-load-dependencies
   #:enable-asdf-binary-locations-compatibility
   #:operation-on-failure #:operation-on-warnings #:on-failure #:on-warnings
   #:component-property
   #:run-shell-command
   #:system-definition-pathname
   #:explain))
(in-package :asdf/backward-interface)

;; NB: the warning status of these functions may have to be distinguished later,
;; as some get removed faster than the others in client code.
(with-asdf-deprecation (:style-warning "3.2")

  ;; These conditions from ASDF 1 and 2 are used by many packages in Quicklisp;
  ;; but ASDF3 replaced them with somewhat different variants of uiop:compile-condition
  ;; that do not involve ASDF actions.
  ;; TODO: find the offenders and stop them.
  (progn
    (define-condition operation-error (error) ;; Bad, backward-compatible name
      ;; Used by SBCL, cffi-tests, clsql-mysql, clsql-uffi, qt, elephant, uffi-tests, sb-grovel
      ((component :reader error-component :initarg :component)
       (operation :reader error-operation :initarg :operation))
      (:report (lambda (c s)
                 (format s (compatfmt "~@<~A while invoking ~A on ~A~@:>")
                         (type-of c) (error-operation c) (error-component c)))))
    (define-condition compile-error (operation-error) ())
    (define-condition compile-failed (compile-error) ())
    (define-condition compile-warned (compile-error) ()))

  ;; In Quicklisp 2015-05, still used by lisp-executable, staple, repl-utilities, cffi
  (defun component-load-dependencies (component) ;; from ASDF 2.000 to 2.26
    "DEPRECATED. Please use COMPONENT-SIDEWAY-DEPENDENCIES instead; or better,
define your operations with proper use of SIDEWAY-OPERATION, SELFWARD-OPERATION,
or define methods on PREPARE-OP, etc."
    ;; Old deprecated name for the same thing. Please update your software.
    (component-sideway-dependencies component))

  ;; These old interfaces from ASDF1 have never been very meaningful
  ;; but are still used in obscure places.
  ;; In Quicklisp 2015-05, still used by cl-protobufs and clx.
  (defgeneric operation-on-warnings (operation)
    (:documentation "DEPRECATED. Please use UIOP:*COMPILE-FILE-WARNINGS-BEHAVIOUR* instead."))
  (defgeneric operation-on-failure (operation)
    (:documentation "DEPRECATED. Please use UIOP:*COMPILE-FILE-FAILURE-BEHAVIOUR* instead."))
  (defgeneric (setf operation-on-warnings) (x operation)
    (:documentation "DEPRECATED. Please SETF UIOP:*COMPILE-FILE-WARNINGS-BEHAVIOUR* instead."))
  (defgeneric (setf operation-on-failure) (x operation)
    (:documentation "DEPRECATED. Please SETF UIOP:*COMPILE-FILE-FAILURE-BEHAVIOUR* instead."))
  (progn
    (defmethod operation-on-warnings ((o operation))
      *compile-file-warnings-behaviour*)
    (defmethod operation-on-failure ((o operation))
      *compile-file-failure-behaviour*)
    (defmethod (setf operation-on-warnings) (x (o operation))
      (setf *compile-file-warnings-behaviour* x))
    (defmethod (setf operation-on-failure) (x (o operation))
      (setf *compile-file-failure-behaviour* x)))

  ;; Quicklisp 2015-05: Still used by SLIME's swank-asdf (!), common-lisp-stat,
  ;; js-parser, osicat, babel, staple, weblocks, cl-png, plain-odbc, autoproject,
  ;; cl-blapack, com.informatimago, cells-gtk3, asdf-dependency-grovel,
  ;; cl-glfw, cffi, jwacs, montezuma
  (defun system-definition-pathname (x)
    ;; As of 2.014.8, we mean to make this function obsolete,
    ;; but that won't happen until all clients have been updated.
    "DEPRECATED. This function used to expose ASDF internals with subtle
differences with respect to user expectations, that have been refactored
away since. We recommend you use ASDF:SYSTEM-SOURCE-FILE instead for a
mostly compatible replacement that we're supporting, or even
ASDF:SYSTEM-SOURCE-DIRECTORY or ASDF:SYSTEM-RELATIVE-PATHNAME
if that's whay you mean." ;;)
    (system-source-file x))

  ;; TRAVERSE is the function used to compute a plan in ASDF 1 and 2.
  ;; It was never officially exposed but some people still used it.
  (defgeneric traverse (operation component &key &allow-other-keys)
    (:documentation
     "DEPRECATED. Use MAKE-PLAN and PLAN-ACTIONS, or REQUIRED-COMPONENTS,
or some other supported interface instead.

Generate and return a plan for performing OPERATION on COMPONENT.

The plan returned is a list of dotted-pairs. Each pair is the CONS
of ASDF operation object and a COMPONENT object. The pairs will be
processed in order by OPERATE."))
  (progn
    (define-convenience-action-methods traverse (operation component &key)))
  (defmethod traverse ((o operation) (c component) &rest keys &key plan-class &allow-other-keys)
    (plan-actions (apply 'make-plan plan-class o c keys)))


  ;; ASDF-Binary-Locations compatibility
  ;; This remains supported for legacy user, but not recommended for new users.
  ;; We suspect there are no more legacy users in 2016.
  (defun enable-asdf-binary-locations-compatibility
      (&key
         (centralize-lisp-binaries nil)
         (default-toplevel-directory
             ;; Use ".cache/common-lisp/" instead ???
             (subpathname (user-homedir-pathname) ".fasls/"))
         (include-per-user-information nil)
         (map-all-source-files (or #+(or clasp clisp ecl mkcl) t nil))
         (source-to-target-mappings nil)
         (file-types `(,(compile-file-type)
                        "build-report"
                        #+clasp (compile-file-type :output-type :object)
                        #+ecl (compile-file-type :type :object)
                        #+mkcl (compile-file-type :fasl-p nil)
                        #+clisp "lib" #+sbcl "cfasl"
                        #+sbcl "sbcl-warnings" #+clozure "ccl-warnings")))
    "DEPRECATED. Use asdf-output-translations instead."
    #+(or clasp clisp ecl mkcl)
    (when (null map-all-source-files)
      (error "asdf:enable-asdf-binary-locations-compatibility doesn't support :map-all-source-files nil on CLISP, ECL and MKCL"))
    (let* ((patterns (if map-all-source-files (list *wild-file*)
                         (loop :for type :in file-types
                           :collect (make-pathname :type type :defaults *wild-file*))))
           (destination-directory
            (if centralize-lisp-binaries
                `(,default-toplevel-directory
                     ,@(when include-per-user-information
                             (cdr (pathname-directory (user-homedir-pathname))))
                     :implementation ,*wild-inferiors*)
                `(:root ,*wild-inferiors* :implementation))))
      (initialize-output-translations
       `(:output-translations
         ,@source-to-target-mappings
         #+abcl (#p"jar:file:/**/*.jar!/**/*.*" (:function translate-jar-pathname))
         #+abcl (#p"/___jar___file___root___/**/*.*" (,@destination-directory))
         ,@(loop :for pattern :in patterns
             :collect `((:root ,*wild-inferiors* ,pattern)
                        (,@destination-directory ,pattern)))
         (t t)
         :ignore-inherited-configuration))))
  (progn
    (defmethod operate :before (operation-class system &rest args &key &allow-other-keys)
      (declare (ignore operation-class system args))
      (when (find-symbol* '#:output-files-for-system-and-operation :asdf nil)
        (error "ASDF 2 is not compatible with ASDF-BINARY-LOCATIONS, which you are using.
ASDF 2 now achieves the same purpose with its builtin ASDF-OUTPUT-TRANSLATIONS,
which should be easier to configure. Please stop using ASDF-BINARY-LOCATIONS,
and instead use ASDF-OUTPUT-TRANSLATIONS. See the ASDF manual for details.
In case you insist on preserving your previous A-B-L configuration, but
do not know how to achieve the same effect with A-O-T, you may use function
ASDF:ENABLE-ASDF-BINARY-LOCATIONS-COMPATIBILITY as documented in the manual;
call that function where you would otherwise have loaded and configured A-B-L."))))


  ;; run-shell-command from ASDF 2, lightly fixed from ASDF 1, copied from MK-DEFSYSTEM. Die!
  (defun run-shell-command (control-string &rest args)
    "PLEASE DO NOT USE. This function is not just DEPRECATED, but also dysfunctional.
Please use UIOP:RUN-PROGRAM instead."
    #-(and ecl os-windows)
    (let ((command (apply 'format nil control-string args)))
      (asdf-message "; $ ~A~%" command)
      (let ((exit-code
             (ignore-errors
               (nth-value 2 (run-program command :force-shell t :ignore-error-status t
                                         :output *verbose-out*)))))
        (typecase exit-code
          ((integer 0 255) exit-code)
          (t 255))))
    #+(and ecl os-windows)
    (not-implemented-error "run-shell-command" "for ECL on Windows."))

  ;; HOW do we get rid of variables??? With a symbol-macro that issues a warning?
  ;; In Quicklisp 2015-05, cl-protobufs still uses it, but that should be fixed in next version.
  (progn
    (defvar *asdf-verbose* nil)) ;; backward-compatibility with ASDF2 only. Unused.

  ;; Do NOT use in new code. NOT SUPPORTED.
  ;; NB: When this goes away, remove the slot PROPERTY in COMPONENT.
  ;; In Quicklisp 2014-05, it's still used by yaclml, amazon-ecs, blackthorn-engine, cl-tidy.
  ;; See TODO for further cleanups required before to get rid of it.
  (defgeneric component-property (component property))
  (defgeneric (setf component-property) (new-value component property))

  (defmethod component-property ((c component) property)
    (cdr (assoc property (slot-value c 'properties) :test #'equal)))

  (defmethod (setf component-property) (new-value (c component) property)
    (let ((a (assoc property (slot-value c 'properties) :test #'equal)))
      (if a
          (setf (cdr a) new-value)
          (setf (slot-value c 'properties)
                (acons property new-value (slot-value c 'properties)))))
    new-value)


  ;; This method survives from ASDF 1, but really it is superseded by action-description.
  (defgeneric explain (operation component)
    (:documentation "Display a message describing an action.

DEPRECATED. Use ASDF:ACTION-DESCRIPTION and/or ASDF::FORMAT-ACTION instead."))
  (progn
    (define-convenience-action-methods explain (operation component)))
  (defmethod explain ((o operation) (c component))
    (asdf-message (compatfmt "~&~@<; ~@;~A~:>~%") (action-description o c))))
;;;; -------------------------------------------------------------------------
;;; Internal hacks for backward-compatibility

(uiop/package:define-package :asdf/backward-internals
  (:recycle :asdf/backward-internals :asdf)
  (:use :uiop/common-lisp :uiop :asdf/upgrade :asdf/find-system)
  (:export #:load-sysdef))
(in-package :asdf/backward-internals)

(with-asdf-deprecation (:style-warning "3.2")
  (defun load-sysdef (name pathname)
    (declare (ignore name pathname))
    ;; Needed for backward compatibility with swank-asdf from SLIME 2015-12-01 or older.
    (error "Use asdf:load-asd instead of asdf::load-sysdef")))
;;;; ---------------------------------------------------------------------------
;;;; Handle ASDF package upgrade, including implementation-dependent magic.

(uiop/package:define-package :asdf/interface
  (:nicknames :asdf :asdf-utilities)
  (:recycle :asdf/interface :asdf)
  (:unintern
   #:loaded-systems ; makes for annoying SLIME completion
   #:output-files-for-system-and-operation) ; ASDF-BINARY-LOCATION function we use to detect ABL
  (:use :uiop/common-lisp :uiop :asdf/upgrade :asdf/cache
   :asdf/component :asdf/system :asdf/find-system :asdf/find-component
   :asdf/operation :asdf/action :asdf/lisp-action
   :asdf/output-translations :asdf/source-registry
   :asdf/plan :asdf/operate :asdf/parse-defsystem :asdf/bundle :asdf/concatenate-source
   :asdf/backward-internals :asdf/backward-interface :asdf/package-inferred-system)
  ;; Note: (1) we are NOT automatically reexporting everything from previous packages.
  ;; (2) we only reexport UIOP functionality when backward-compatibility requires it.
  (:export
   #:defsystem #:find-system #:load-asd #:locate-system #:coerce-name #:primary-system-name
   #:oos #:operate #:make-plan #:perform-plan #:sequential-plan
   #:system-definition-pathname
   #:search-for-system-definition #:find-component #:component-find-path
   #:compile-system #:load-system #:load-systems #:load-systems*
   #:require-system #:test-system #:clear-system
   #:operation #:make-operation #:find-operation
   #:upward-operation #:downward-operation #:sideway-operation #:selfward-operation
                      #:non-propagating-operation
   #:build-op #:make
   #:load-op #:prepare-op #:compile-op
   #:prepare-source-op #:load-source-op #:test-op
   #:feature #:version #:version-satisfies #:upgrade-asdf
   #:implementation-identifier #:implementation-type #:hostname
   #:input-files #:output-files #:output-file #:perform #:perform-with-restarts
   #:operation-done-p #:explain #:action-description #:component-sideway-dependencies
   #:needed-in-image-p
   #:component-load-dependencies #:run-shell-command ; deprecated, do not use
   #:bundle-op #:monolithic-bundle-op #:precompiled-system #:compiled-file #:bundle-system
   #:program-system
   #:basic-compile-bundle-op #:prepare-bundle-op
   #:compile-bundle-op #:load-bundle-op #:monolithic-compile-bundle-op #:monolithic-load-bundle-op
   #:lib-op #:dll-op #:deliver-asd-op #:program-op #:image-op
   #:monolithic-lib-op #:monolithic-dll-op #:monolithic-deliver-asd-op
   #:concatenate-source-op
   #:load-concatenated-source-op
   #:compile-concatenated-source-op
   #:load-compiled-concatenated-source-op
   #:monolithic-concatenate-source-op
   #:monolithic-load-concatenated-source-op
   #:monolithic-compile-concatenated-source-op
   #:monolithic-load-compiled-concatenated-source-op
   #:operation-monolithic-p
   #:required-components
   #:component-loaded-p

   #:component #:parent-component #:child-component #:system #:module
   #:file-component #:source-file #:c-source-file #:java-source-file
   #:cl-source-file #:cl-source-file.cl #:cl-source-file.lsp
   #:static-file #:doc-file #:html-file
   #:file-type #:source-file-type

   #:register-preloaded-system #:sysdef-preloaded-system-search
   #:register-immutable-system #:sysdef-immutable-system-search

   #:package-inferred-system #:register-system-packages
   #:package-system ;; backward-compatibility during migration, to be removed in a further release.

   #:component-children          ; component accessors
   #:component-children-by-name
   #:component-pathname
   #:component-relative-pathname
   #:component-name
   #:component-version
   #:component-parent
   #:component-system
   #:component-encoding
   #:component-external-format

   #:component-depends-on ; backward-compatible name rather than action-depends-on
   #:module-components ; backward-compatibility
   #:operation-on-warnings #:operation-on-failure ; backward-compatibility
   #:component-property ; backward-compatibility
   #:traverse ; backward-compatibility

   #:system-description
   #:system-long-description
   #:system-author
   #:system-maintainer
   #:system-license
   #:system-licence
   #:system-source-file
   #:system-source-directory
   #:system-relative-pathname
   #:system-homepage
   #:system-mailto
   #:system-bug-tracker
   #:system-long-name
   #:system-source-control
   #:map-systems
   #:system-defsystem-depends-on
   #:system-depends-on
   #:system-weakly-depends-on

   #:*system-definition-search-functions*   ; variables
   #:*central-registry*
   #:*compile-file-warnings-behaviour*
   #:*compile-file-failure-behaviour*
   #:*resolve-symlinks*
   #:*load-system-operation*
   #:*asdf-verbose* ;; unused. For backward-compatibility only.
   #:*verbose-out*

   #:asdf-version

   #:compile-condition #:compile-file-error #:compile-warned-error #:compile-failed-error
   #:compile-warned-warning #:compile-failed-warning
   #:operation-error #:compile-failed #:compile-warned #:compile-error ;; backward compatibility
   #:error-name
   #:error-pathname
   #:load-system-definition-error
   #:error-component #:error-operation
   #:system-definition-error
   #:missing-component
   #:missing-component-of-version
   #:missing-dependency
   #:missing-dependency-of-version
   #:circular-dependency        ; errors
   #:duplicate-names #:non-toplevel-system #:non-system-system #:bad-system-name
   #:package-inferred-system-missing-package-error
   #:operation-definition-warning #:operation-definition-error

   #:try-recompiling ; restarts
   #:retry
   #:accept
   #:coerce-entry-to-directory
   #:remove-entry-from-registry
   #:clear-configuration-and-retry


   #:*encoding-detection-hook*
   #:*encoding-external-format-hook*
   #:*default-encoding*
   #:*utf-8-external-format*

   #:clear-configuration
   #:*output-translations-parameter*
   #:initialize-output-translations
   #:disable-output-translations
   #:clear-output-translations
   #:ensure-output-translations
   #:apply-output-translations
   #:compile-file*
   #:compile-file-pathname*
   #:*warnings-file-type* #:enable-deferred-warnings-check #:disable-deferred-warnings-check
   #:enable-asdf-binary-locations-compatibility
   #:*default-source-registries*
   #:*source-registry-parameter*
   #:initialize-source-registry
   #:compute-source-registry
   #:clear-source-registry
   #:ensure-source-registry
   #:process-source-registry
   #:system-registered-p #:registered-systems #:already-loaded-systems
   #:resolve-location
   #:asdf-message
   #:*user-cache*
   #:user-output-translations-pathname
   #:system-output-translations-pathname
   #:user-output-translations-directory-pathname
   #:system-output-translations-directory-pathname
   #:user-source-registry
   #:system-source-registry
   #:user-source-registry-directory
   #:system-source-registry-directory
   ))

;;;; ---------------------------------------------------------------------------
;;;; ASDF-USER, where the action happens.

(uiop/package:define-package :asdf/user
  (:nicknames :asdf-user)
  ;; NB: releases before 3.1.2 this :use'd only uiop/package instead of uiop below.
  ;; They also :use'd uiop/common-lisp, that reexports common-lisp and is not included in uiop.
  ;; ASDF3 releases from 2.27 to 2.31 called uiop asdf-driver and asdf/foo uiop/foo.
  ;; ASDF1 and ASDF2 releases (2.26 and earlier) create a temporary package
  ;; that only :use's :cl and :asdf
  (:use :uiop/common-lisp :uiop :asdf/interface))
;;;; -----------------------------------------------------------------------
;;;; ASDF Footer: last words and cleanup

(uiop/package:define-package :asdf/footer
  (:recycle :asdf/footer :asdf)
  (:use :uiop/common-lisp :uiop
        :asdf/upgrade :asdf/find-system :asdf/operate :asdf/bundle)
  ;; Happily, all those implementations all have the same module-provider hook interface.
  #+(or abcl clasp cmucl clozure ecl mkcl sbcl)
  (:import-from #+abcl :sys #+(or clasp cmucl ecl) :ext #+clozure :ccl #+mkcl :mk-ext #+sbcl sb-ext
		#:*module-provider-functions*
		#+ecl #:*load-hooks*)
  #+(or clasp mkcl) (:import-from :si #:*load-hooks*))

(in-package :asdf/footer)

;;;; Register ASDF itself and all its subsystems as preloaded.
(with-upgradability ()
  (dolist (s '("asdf" "uiop" "asdf-package-system"))
    ;; Don't bother with these system names, no one relies on them anymore:
    ;; "asdf-utils" "asdf-bundle" "asdf-driver" "asdf-defsystem"
    (register-preloaded-system s :version *asdf-version*)))


;;;; Hook ASDF into the implementation's REQUIRE and other entry points.
#+(or abcl clasp clisp clozure cmucl ecl mkcl sbcl)
(with-upgradability ()
  ;; Hook into CL:REQUIRE.
  #-clisp (pushnew 'module-provide-asdf *module-provider-functions*)
  #+clisp (if-let (x (find-symbol* '#:*module-provider-functions* :custom nil))
            (eval `(pushnew 'module-provide-asdf ,x)))

  #+(or clasp ecl mkcl)
  (progn
    (pushnew '("fasb" . si::load-binary) *load-hooks* :test 'equal :key 'car)

    #+os-windows
    (unless (assoc "asd" *load-hooks* :test 'equal)
      (appendf *load-hooks* '(("asd" . si::load-source))))

    ;; Wrap module provider functions in an idempotent, upgrade friendly way
    (defvar *wrapped-module-provider* (make-hash-table))
    (setf (gethash 'module-provide-asdf *wrapped-module-provider*) 'module-provide-asdf)
    (defun wrap-module-provider (provider name)
      (let ((results (multiple-value-list (funcall provider name))))
	(when (first results) (register-preloaded-system (coerce-name name)))
	(values-list results)))
    (defun wrap-module-provider-function (provider)
      (ensure-gethash provider *wrapped-module-provider*
		      (constantly
		       #'(lambda (module-name)
			   (wrap-module-provider provider module-name)))))
    (setf *module-provider-functions*
	  (mapcar #'wrap-module-provider-function *module-provider-functions*))))

#+cmucl ;; Hook into the CMUCL herald.
(with-upgradability ()
  (defun herald-asdf (stream)
    (format stream "    ASDF ~A" (asdf-version)))
  (setf (getf ext:*herald-items* :asdf) '(herald-asdf)))


;;;; Done!
(with-upgradability ()
  #+allegro ;; restore *w-o-n-r-c* setting as saved in uiop/common-lisp
  (when (boundp 'excl:*warn-on-nested-reader-conditionals*)
    (setf excl:*warn-on-nested-reader-conditionals* uiop/common-lisp::*acl-warn-save*))

  ;; Advertise the features we provide.
  (dolist (f '(:asdf :asdf2 :asdf3 :asdf3.1 :asdf3.2 :asdf-package-system)) (pushnew f *features*))

  ;; Provide both lowercase and uppercase, to satisfy more people, especially LispWorks users.
  (provide "asdf") (provide "ASDF")

  ;; Finally, call a function that will cleanup in case this is an upgrade of an older ASDF.
  (cleanup-upgraded-asdf))

(when *load-verbose*
  (asdf-message ";; ASDF, version ~a~%" (asdf-version)))
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3
;;;; END FILE ./reference/ccl/tools/asdf.lisp
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4n









;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4n









;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4n









;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4n











\;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1
;;;; BEGIN FILE ./reference/ccl/tools/defsystem.lisp
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2
;;; -*- Mode: Lisp; Package: make -*-
;;; -*- Mode: CLtL; Syntax: Common-Lisp -*-

;;; DEFSYSTEM 3.4 Interim.

;;; defsystem.lisp --

;;; ****************************************************************
;;; MAKE -- A Portable Defsystem Implementation ********************
;;; ****************************************************************

;;; This is a portable system definition facility for Common Lisp.
;;; Though home-grown, the syntax was inspired by fond memories of the
;;; defsystem facility on Symbolics 3600's. The exhaustive lists of
;;; filename extensions for various lisps and the idea to have one
;;; "operate-on-system" function instead of separate "compile-system"
;;; and "load-system" functions were taken from Xerox Corp.'s PCL
;;; system.

;;; This system improves on both PCL and Symbolics defsystem utilities
;;; by performing a topological sort of the graph of file-dependency
;;; constraints. Thus, the components of the system need not be listed
;;; in any special order, because the defsystem command reorganizes them
;;; based on their constraints. It includes all the standard bells and
;;; whistles, such as not recompiling a binary file that is up to date
;;; (unless the user specifies that all files should be recompiled).

;;; Originally written by Mark Kantrowitz, School of Computer Science,
;;; Carnegie Mellon University, October 1989.

;;; MK:DEFSYSTEM 3.3 Interim
;;;
;;; Copyright (c) 1989 - 1999 Mark Kantrowitz. All rights reserved.
;;;               1999 - 2004 Mark Kantrowitz and Marco Antoniotti. All
;;;                           rights reserved.

;;; Use, copying, modification, merging, publishing, distribution
;;; and/or sale of this software, source and/or binary files and
;;; associated documentation files (the "Software") and of derivative
;;; works based upon this Software are permitted, as long as the
;;; following conditions are met:

;;;    o this copyright notice is included intact and is prominently
;;;      visible in the Software
;;;    o if modifications have been made to the source code of the
;;;      this package that have not been adopted for inclusion in the
;;;      official version of the Software as maintained by the Copyright
;;;      holders, then the modified package MUST CLEARLY identify that
;;;      such package is a non-standard and non-official version of
;;;      the Software.  Furthermore, it is strongly encouraged that any
;;;      modifications made to the Software be sent via e-mail to the
;;;      MK-DEFSYSTEM maintainers for consideration of inclusion in the
;;;      official MK-DEFSYSTEM package.

;;; THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
;;; EXPRESSED OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
;;; MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT.
;;; IN NO EVENT SHALL M. KANTROWITZ AND M. ANTONIOTTI BE LIABLE FOR ANY
;;; CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
;;; TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
;;; SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

;;; Except as contained in this notice, the names of M. Kantrowitz and
;;; M. Antoniotti shall not be used in advertising or otherwise to promote
;;; the sale, use or other dealings in this Software without prior written
;;; authorization from M. Kantrowitz and M. Antoniotti.


;;; Please send bug reports, comments and suggestions to <marcoxa@cons.org>.

;;; ********************************
;;; Change Log *********************
;;; ********************************
;;;
;;; Note: Several of the fixes from 30-JAN-91 and 31-JAN-91 were done in
;;; September and October 1990, but not documented until January 1991.
;;;
;;; akd  = Abdel Kader Diagne <diagne@dfki.uni-sb.de>
;;; as   = Andreas Stolcke <stolcke@ICSI.Berkeley.EDU>
;;; bha  = Brian Anderson <bha@atc.boeing.com>
;;; brad = Brad Miller <miller@cs.rochester.edu>
;;; bw   = Robert Wilhelm <wilhelm@rpal.rockwell.com>
;;; djc  = Daniel J. Clancy <clancy@cs.utexas.edu>
;;; fdmm = Fernando D. Mato Mira <matomira@di.epfl.ch>
;;; gc   = Guillaume Cartier <cartier@math.uqam.ca>
;;; gi   = Gabriel Inaebnit <inaebnit@research.abb.ch>
;;; gpw  = George Williams <george@hsvaic.boeing.com>
;;; hkt  = Rick Taube <hkt@cm-next-8.stanford.edu>
;;; ik   = Ik Su Yoo <ik@ctt.bellcore.com>
;;; jk   = John_Kolojejchick@MORK.CIMDS.RI.CMU.EDU
;;; kt   = Kevin Thompson <kthompso@ptolemy.arc.nasa.gov>
;;; kc   = Kaelin Colclasure <kaelin@bridge.com>
;;; kmr  = Kevin M. Rosenberg <kevin@rosenberg.net>
;;; lmh  = Liam M. Healy <Liam.Healy@nrl.navy.mil>
;;; mc   = Matthew Cornell <cornell@unix1.cs.umass.edu>
;;; oc   = Oliver Christ <oli@adler.ims.uni-stuttgart.de>
;;; rs   = Ralph P. Sobek <ralph@vega.laas.fr>
;;; rs2  = Richard Segal <segal@cs.washington.edu>
;;; sb   = Sean Boisen <sboisen@bbn.com>
;;; ss   = Steve Strassman <straz@cambridge.apple.com>
;;; tar  = Thomas A. Russ <tar@isi.edu>
;;; toni = Anton Beschta <toni%l4@ztivax.siemens.com>
;;; yc   = Yang Chen <yangchen%iris.usc.edu@usc.edu>
;;;
;;; Thanks to Steve Strassmann <straz@media-lab.media.mit.edu> and
;;; Sean Boisen <sboisen@BBN.COM> for detailed bug reports and
;;; miscellaneous assistance. Thanks also to Gabriel Inaebnit
;;; <inaebnit@research.abb.ch> for help with VAXLisp bugs.
;;;
;;; 05-NOV-90  hkt  Changed canonicalize-system-name to make system
;;;                 names package independent. Interns them in the
;;;                 keyword package. Thus either strings or symbols may
;;;                 be used to name systems from the user's point of view.
;;; 05-NOV-90  hkt  Added definition FIND-SYSTEM to allow OOS to
;;;                 work on systems whose definition hasn't been loaded yet.
;;; 05-NOV-90  hkt  Added definitions COMPILE-SYSTEM and LOAD-SYSTEM
;;;                 as alternates to OOS for naive users.
;;; 05-NOV-90  hkt  Shadowing-import of 'defsystem in Allegro CL 3.1 [NeXT]
;;;                 into USER package instead of import.
;;; 15-NOV-90  mk   Changed package name to "MAKE", eliminating "DEFSYSTEM"
;;;                 to avoid conflicts with allegro, symbolics packages
;;;                 named "DEFSYSTEM".
;;; 30-JAN-91  mk   Modified append-directories to work with the
;;;                 logical-pathnames system.
;;; 30-JAN-91  mk   Append-directories now works with Sun CL4.0. Also, fixed
;;;                 bug wrt Lucid 4.0's pathnames (which changed from lcl3.0
;;;                 -- 4.0 uses a list for the directory slot, whereas
;;;                 3.0 required a string). Possible fix to symbolics bug.
;;; 30-JAN-91  mk   Defined NEW-REQUIRE to make redefinition of REQUIRE
;;;                 cleaner. Replaced all calls to REQUIRE in this file with
;;;                 calls to NEW-REQUIRE, which should avoid compiler warnings.
;;; 30-JAN-91  mk   In VAXLisp, when we redefine lisp:require, the compiler
;;;                 no longer automatically executes require forms when it
;;;                 encounters them in a file. The user can always wrap an
;;;                 (eval-when (compile load eval) ...) around the require
;;;                 form. Alternately, see commented out code near the
;;;                 redefinition of lisp:require which redefines it as a
;;;                 macro instead.
;;; 30-JAN-91  mk   Added parameter :version to operate-on-system. If it is
;;;                 a number, that number is used as part of the binary
;;;                 directory name as the place to store and load files.
;;;                 If NIL (the default), uses regular binary directory.
;;;                 If T, tries to find the most recent version of the
;;;                 binary directory.
;;; 30-JAN-91  mk   Added global variable *use-timeouts* (default: t), which
;;;                 specifies whether timeouts should be used in
;;;                 Y-OR-N-P-WAIT. This is provided for users whose lisps
;;;                 don't handle read-char-no-hang properly, so that they
;;;                 can set it to NIL to disable the timeouts. Usually the
;;;                 reason for this is the lisp is run on top of UNIX,
;;;                 which buffers input LINES (and provides input editing).
;;;                 To get around this we could always turn CBREAK mode
;;;                 on and off, but there's no way to do this in a portable
;;;                 manner.
;;; 30-JAN-91  mk   Fixed bug where in :test t mode it was actually providing
;;;                 the system, instead of faking it.
;;; 30-JAN-91  mk   Changed storage of system definitions to a hash table.
;;;                 Changed canonicalize-system-name to coerce the system
;;;                 names to uppercase strings. Since we're no longer using
;;;                 get, there's no need to intern the names as symbols,
;;;                 and strings don't have packages to cause problems.
;;;                 Added UNDEFSYSTEM, DEFINED-SYSTEMS, and DESCRIBE-SYSTEM.
;;;                 Added :delete-binaries command.
;;; 31-JAN-91  mk   Franz Allegro CL has a defsystem in the USER package,
;;;                 so we need to do a shadowing import to avoid name
;;;                 conflicts.
;;; 31-JAN-91  mk   Fixed bug in compile-and-load-operation where it was
;;;                 only loading newly compiled files.
;;; 31-JAN-91  mk   Added :load-time slot to components to record the
;;;                 file-write-date of the binary/source file that was loaded.
;;;                 Now knows "when" (which date version) the file was loaded.
;;;                 Added keyword :minimal-load and global *minimal-load*
;;;                 to enable defsystem to avoid reloading unmodified files.
;;;                 Note that if B depends on A, but A is up to date and
;;;                 loaded and the user specified :minimal-load T, then A
;;;                 will not be loaded even if B needs to be compiled. So
;;;                 if A is an initializations file, say, then the user should
;;;                 not specify :minimal-load T.
;;; 31-JAN-91  mk   Added :load-only slot to components. If this slot is
;;;                 specified as non-NIL, skips over any attempts to compile
;;;                 the files in the component. (Loading the file satisfies
;;;                 the need to recompile.)
;;; 31-JAN-91  mk   Eliminated use of set-alist-lookup and alist-lookup,
;;;                 replacing it with hash tables. It was too much bother,
;;;                 and rather brittle too.
;;; 31-JAN-91  mk   Defined #@ macro character for use with AFS @sys
;;;                 feature simulator. #@"directory" is then synonymous
;;;                 with (afs-binary-directory "directory").
;;; 31-JAN-91  mk   Added :private-file type of module. It is similar to
;;;                 :file, but has an absolute pathname. This allows you
;;;                 to specify a different version of a file in a system
;;;                 (e.g., if you're working on the file in your home
;;;                 directory) without completely rewriting the system
;;;                 definition.
;;; 31-JAN-91  mk   Operations on systems, such as :compile and :load,
;;;                 now propagate to subsystems the system depends on
;;;                 if *operations-propagate-to-subsystems* is T (the default)
;;;                 and the systems were defined using either defsystem
;;;                 or as a :system component of another system. Thus if
;;;                 a system depends on another, it can now recompile the
;;;                 other.
;;; 01-FEB-91  mk   Added default definitions of PROVIDE/REQUIRE/*MODULES*
;;;                 for lisps that have thrown away these definitions in
;;;                 accordance with CLtL2.
;;; 01-FEB-91  mk   Added :compile-only slot to components. Analogous to
;;;                 :load-only. If :compile-only is T, will not load the
;;;                 file on operation :compile. Either compiles or loads
;;;                 the file, but not both. In other words, compiling the
;;;                 file satisfies the demand to load it. This is useful
;;;                 for PCL defmethod and defclass definitions, which wrap
;;;                 an (eval-when (compile load eval) ...) around the body
;;;                 of the definition -- we save time by not loading the
;;;                 compiled code, since the eval-when forces it to be
;;;                 loaded. Note that this may not be entirely safe, since
;;;                 CLtL2 has added a :load keyword to compile-file, and
;;;                 some lisps may maintain a separate environment for
;;;                 the compiler. This feature is for the person who asked
;;;                 that a :COMPILE-SATISFIES-LOAD keyword be added to
;;;                 modules. It's named :COMPILE-ONLY instead to match
;;;                 :LOAD-ONLY.
;;; 11-FEB-91  mk   Now adds :mk-defsystem to features list, to allow
;;;                 special cased loading of defsystem if not already
;;;                 present.
;;; 19-FEB-91  duff Added filename extension for hp9000/300's running Lucid.
;;; 26-FEB-91  mk   Distinguish between toplevel systems (defined with
;;;                 defsystem) and systems defined as a :system module
;;;                 of a defsystem. The former can depend only on systems,
;;;                 while the latter can depend on anything at the same
;;;                 level.
;;; 12-MAR-91  mk   Added :subsystem component type to be a system with
;;;                 pathnames relative to its parent component.
;;; 12-MAR-91  mk   Uncommented :device :absolute for CMU pathnames, so
;;;                 that the leading slash is included.
;;; 12-MAR-91  brad Patches for Allegro 4.0.1 on Sparc.
;;; 12-MAR-91  mk   Changed definition of format-justified-string so that
;;;                 it no longer depends on the ~<~> format directives,
;;;                 because Allegro 4.0.1 has a bug which doesn't support
;;;                 them. Anyway, the new definition is twice as fast
;;;                 and conses half as much as FORMAT.
;;; 12-MAR-91 toni  Remove nils from list in expand-component-components.
;;; 12-MAR-91 bw    If the default-package and system have the same name,
;;;                 and the package is not loaded, this could lead to
;;;                 infinite loops, so we bomb out with an error.
;;;                 Fixed bug in default packages.
;;; 13-MAR-91 mk    Added global *providing-blocks-load-propagation* to
;;;                 control whether system dependencies are loaded if they
;;;                 have already been provided.
;;; 13-MAR-91 brad  In-package is a macro in CLtL2 lisps, so we change
;;;                 the package manually in operate-on-component.
;;; 15-MAR-91 mk    Modified *central-registry* to be either a single
;;;                 directory pathname, or a list of directory pathnames
;;;                 to be checked in order.
;;; 15-MAR-91 rs    Added afs-source-directory to handle versions when
;;;                 compiling C code under lisp. Other minor changes to
;;;                 translate-version and operate-on-system.
;;; 21-MAR-91 gi    Fixed bug in defined-systems.
;;; 22-MAR-91 mk    Replaced append-directories with new version that works
;;;                 by actually appending the directories, after massaging
;;;                 them into the proper format. This should work for all
;;;                 CLtL2-compliant lisps.
;;; 09-APR-91 djc   Missing package prefix for lp:pathname-host-type.
;;;                 Modified component-full-pathname to work for logical
;;;                 pathnames.
;;; 09-APR-91 mk    Added *dont-redefine-require* to control whether
;;;                 REQUIRE is redefined. Fixed minor bugs in redefinition
;;;                 of require.
;;; 12-APR-91 mk    (pathname-host nil) causes an error in MCL 2.0b1
;;; 12-APR-91 mc    Ported to MCL2.0b1.
;;; 16-APR-91 mk    Fixed bug in needs-loading where load-time and
;;;                 file-write-date got swapped.
;;; 16-APR-91 mk    If the component is load-only, defsystem shouldn't
;;;                 tell you that there is no binary and ask you if you
;;;                 want to load the source.
;;; 17-APR-91 mc    Two additional operations for MCL.
;;; 21-APR-91 mk    Added feature requested by ik. *files-missing-is-an-error*
;;;                 new global variable which controls whether files (source
;;;                 and binary) missing cause a continuable error or just a
;;;                 warning.
;;; 21-APR-91 mk    Modified load-file-operation to allow compilation of source
;;;                 files during load if the binary files are old or
;;;                 non-existent. This adds a :compile-during-load keyword to
;;;                 oos, and load-system. Global *compile-during-load* sets
;;;                 the default (currently :query).
;;; 21-APR-91 mk    Modified find-system so that there is a preference for
;;;                 loading system files from disk, even if the system is
;;;                 already defined in the environment.
;;; 25-APR-91 mk    Removed load-time slot from component defstruct and added
;;;                 function COMPONENT-LOAD-TIME to store the load times in a
;;;                 hash table. This is safer than the old definition because
;;;                 it doesn't wipe out load times every time the system is
;;;                 redefined.
;;; 25-APR-91 mk    Completely rewrote load-file-operation. Fixed some bugs
;;;                 in :compile-during-load and in the behavior of defsystem
;;;                 when multiple users are compiling and loading a system
;;;                 instead of just a single user.
;;; 16-MAY-91 mk    Modified FIND-SYSTEM to do the right thing if the system
;;;                 definition file cannot be found.
;;; 16-MAY-91 mk    Added globals *source-pathname-default* and
;;;                 *binary-pathname-default* to contain default values for
;;;                 :source-pathname and :binary-pathname. For example, set
;;;                 *source-pathname-default* to "" to avoid having to type
;;;                 :source-pathname "" all the time.
;;; 27-MAY-91 mk    Fixed bug in new-append-directories where directory
;;;                 components of the form "foo4.0" would appear as "foo4",
;;;                 since pathname-name truncates the type. Changed
;;;                 pathname-name to file-namestring.
;;;  3-JUN-91 gc    Small bug in new-append-directories; replace (when
;;;                 abs-name) with (when (not (null-string abs-name)))
;;;  4-JUN-91 mk    Additional small change to new-append-directories for
;;;                 getting the device from the relative pname if the abs
;;;                 pname is "". This is to fix a small behavior in CMU CL old
;;;                 compiler. Also changed (when (not (null-string abs-name)))
;;;                 to have an (and abs-name) in there.
;;;  8-JAN-92 sb    Added filename extension for defsystem under Lucid Common
;;;                 Lisp/SGO 3.0.1+.
;;;  8-JAN-92 mk    Changed the definition of prompt-string to work around an
;;;                 AKCL bug. Essentially, AKCL doesn't default the colinc to
;;;                 1 if the colnum is provided, so we hard code it.
;;;  8-JAN-92 rs    (pathname-directory (pathname "")) returns '(:relative) in
;;;                 Lucid, instead of NIL. Changed new-append-directories and
;;;                 test-new-append-directories to reflect this.
;;;  8-JAN-92 mk    Fixed problem related to *load-source-if-no-binary*.
;;;                 compile-and-load-source-if-no-binary wasn't checking for
;;;                 the existence of the binary if this variable was true,
;;;                 causing the file to not be compiled.
;;;  8-JAN-92 mk    Fixed problem with null-string being called on a pathname
;;;                 by returning NIL if the argument isn't a string.
;;;  3-NOV-93 mk    In Allegro 4.2, pathname device is :unspecific by default.
;;; 11-NOV-93 fdmm  Fixed package definition lock problem when redefining
;;;                 REQUIRE on ACL.
;;; 11-NOV-93 fdmm  Added machine and software types for SGI and IRIX. It is
;;;                 important to distinguish the OS version and CPU type in
;;;                 SGI+ACL, since ACL 4.1 on IRIX 4.x and ACL 4.2 on IRIX 5.x
;;;                 have incompatible .fasl files.
;;; 01-APR-94 fdmm  Fixed warning problem when redefining REQUIRE on LispWorks.
;;; 01-NOV-94 fdmm  Replaced (software-type) call in ACL by code extracting
;;;                 the interesting parts from (software-version) [deleted
;;;                 machine name and id].
;;; 03-NOV-94 fdmm  Added a hook (*compile-file-function*), that is funcalled
;;;                 by compile-file-operation, so as to support other languages
;;;                 running on top of Common Lisp.
;;;                 The default is to compile  Common Lisp.
;;; 03-NOV-94 fdmm  Added SCHEME-COMPILE-FILE, so that defsystem can now
;;;                 compile Pseudoscheme files.
;;; 04-NOV-94 fdmm  Added the exported generic function SET-LANGUAGE, to
;;;                 have a clean, easy to extend  interface for telling
;;;                 defsystem which language to assume for compilation.
;;;                 Currently supported arguments: :common-lisp, :scheme.
;;; 11-NOV-94 kc    Ported to Allegro CL for Windows 2.0 (ACLPC) and CLISP.
;;; 18-NOV-94 fdmm  Changed the entry *filename-extensions* for LispWorks
;;;                 to support any platform.
;;;                 Added entries for :mcl and :clisp too.
;;; 16-DEC-94 fdmm  Added and entry for CMU CL on SGI to *filename-extensions*.
;;; 16-DEC-94 fdmm  Added OS version identification for CMU CL on SGI.
;;; 16-DEC-94 fdmm  For CMU CL 17 : Bypassed make-pathnames call fix
;;;                 in NEW-APPEND-DIRECTORIES.
;;; 16-DEC-94 fdmm  Added HOME-SUBDIRECTORY to fix CMU's ignorance about `~'
;;;                 when specifying registries.
;;; 16-DEC-94 fdmm  For CMU CL 17 : Bypassed :device fix in make-pathnames call
;;;                 in COMPONENT-FULL-PATHNAME. This fix was also reported
;;;                 by kc on 12-NOV-94. CMU CL 17 now supports CLtL2 pathnames.
;;; 16-DEC-94 fdmm  Removed a quote before the call to read in the readmacro
;;;                 #@. This fixes a really annoying misfeature (couldn't do
;;;                 #@(concatenate 'string "foo/" "bar"), for example).
;;; 03-JAN-95 fdmm  Do not include :pcl in *features* if :clos is there.
;;;  2-MAR-95 mk    Modified fdmm's *central-registry* change to use
;;;                 user-homedir-pathname and to be a bit more generic in the
;;;                 pathnames.
;;;  2-MAR-95 mk    Modified fdmm's updates to *filename-extensions* to handle
;;;                 any CMU CL binary extensions.
;;;  2-MAR-95 mk    Make kc's port to ACLPC a little more generic.
;;;  2-MAR-95 mk    djc reported a bug, in which GET-SYSTEM was not returning
;;;                 a system despite the system's just having been loaded.
;;;                 The system name specified in the :depends-on was a
;;;                 lowercase string. I am assuming that the system name
;;;                 in the defsystem form was a symbol (I haven't verified
;;;                 that this was the case with djc, but it is the only
;;;                 reasonable conclusion). So, CANONICALIZE-SYSTEM-NAME
;;;                 was storing the system in the hash table as an
;;;                 uppercase string, but attempting to retrieve it as a
;;;                 lowercase string. This behavior actually isn't a bug,
;;;                 but a user error. It was intended as a feature to
;;;                 allow users to use strings for system names when
;;;                 they wanted to distinguish between two different systems
;;;                 named "foo.system" and "Foo.system". However, this
;;;                 user error indicates that this was a bad design decision.
;;;                 Accordingly, CANONICALIZE-SYSTEM-NAME now uppercases
;;;                 even strings for retrieving systems, and the comparison
;;;                 in *modules* is now case-insensitive. The result of
;;;                 this change is if the user cannot have distinct
;;;                 systems in "Foo.system" and "foo.system" named "Foo" and
;;;                 "foo", because they will clobber each other. There is
;;;                 still case-sensitivity on the filenames (i.e., if the
;;;                 system file is named "Foo.system" and you use "foo" in
;;;                 the :depends-on, it won't find it). We didn't take the
;;;                 further step of requiring system filenames to be lowercase
;;;                 because we actually find this kind of case-sensitivity
;;;                 to be useful, when maintaining two different versions
;;;                 of the same system.
;;;  7-MAR-95 mk    Added simplistic handling of logical pathnames. Also
;;;                 modified new-append-directories so that it'll try to
;;;                 split up pathname directories that are strings into a
;;;                 list of the directory components. Such directories aren't
;;;                 ANSI CL, but some non-conforming implementations do it.
;;;  7-MAR-95 mk    Added :proclamations to defsystem form, which can be used
;;;                 to set the compiler optimization level before compilation.
;;;                 For example,
;;;                  :proclamations '(optimize (safety 3) (speed 3) (space 0))
;;;  7-MAR-95 mk    Defsystem now tells the user when it reloads the system
;;;                 definition.
;;;  7-MAR-95 mk    Fixed problem pointed out by yc. If
;;;                 *source-pathname-default* is "" and there is no explicit
;;;                 :source-pathname specified for a file, the file could
;;;                 wind up with an empty file name. In other words, this
;;;                 global default shouldn't apply to :file components. Added
;;;                 explicit test for null strings, and when present replaced
;;;                 them with NIL (for binary as well as source, and also for
;;;                 :private-file components).
;;;  7-MAR-95 tar   Fixed defsystem to work on TI Explorers (TI CL).
;;;  7-MAR-95 jk    Added machine-type-translation for Decstation 5000/200
;;;                 under Allegro 3.1
;;;  7-MAR-95 as    Fixed bug in AKCL-1-615 in which defsystem added a
;;;                 subdirectory "RELATIVE" to all filenames.
;;;  7-MAR-95 mk    Added new test to test-new-append-directories to catch the
;;;                 error fixed by as. Essentially, this error occurs when the
;;;                 absolute-pathname has no directory (i.e., it has a single
;;;                 pathname component as in "foo" and not "foo/bar"). If
;;;                 RELATIVE ever shows up in the Result, we now know to
;;;                 add an extra conditionalization to prevent abs-keyword
;;;                 from being set to :relative.
;;;  7-MAR-95 ss    Miscellaneous fixes for MCL 2.0 final.
;;;                 *compile-file-verbose* not in MCL, *version variables
;;;                 need to occur before AFS-SOURCE-DIRECTORY definition,
;;;                 and certain code needed to be in the CCL: package.
;;;  8-MAR-95 mk    Y-OR-N-P-WAIT uses a busy-waiting. On Lisp systems where
;;;                 the time functions cons, such as CMU CL, this can cause a
;;;                 lot of ugly garbage collection messages. Modified the
;;;                 waiting to include calls to SLEEP, which should reduce
;;;                 some of the consing.
;;;  8-MAR-95 mk    Replaced fdmm's SET-LANGUAGE enhancement with a more
;;;                 general extension, along the lines suggested by akd.
;;;                 Defsystem now allows components to specify a :language
;;;                 slot, such as :language :lisp, :language :scheme. This
;;;                 slot is inherited (with the default being :lisp), and is
;;;                 used to obtain compilation and loading functions for
;;;                 components, as well as source and binary extensions. The
;;;                 compilation and loading functions can be overridden by
;;;                 specifying a :compiler or :loader in the system
;;;                 definition. Also added :documentation slot to the system
;;;                 definition.
;;;                    Where this comes in real handy is if one has a
;;;                 compiler-compiler implemented in Lisp, and wants the
;;;                 system to use the compiler-compiler to create a parser
;;;                 from a grammar and then compile parser. To do this one
;;;                 would create a module with components that looked
;;;                 something like this:
;;;		  ((:module cc :components ("compiler-compiler"))
;;;		   (:module gr :compiler 'cc :loader #'ignore
;;;			    :source-extension "gra"
;;;			    :binary-extension "lisp"
;;;			    :depends-on (cc)
;;;			    :components ("sample-grammar"))
;;;		   (:module parser :depends-on (gr)
;;;			    :components ("sample-grammar")))
;;;                 Defsystem would then compile and load the compiler, use
;;;                 it (the function cc) to compile the grammar into a parser,
;;;                 and then compile the parser. The only tricky part is
;;;                 cc is defined by the system, and one can't include #'cc
;;;                 in the system definition. However, one could include
;;;                 a call to mk:define-language in the compiler-compiler file,
;;;                 and define :cc as a language. This is the prefered method.
;;;  8-MAR-95 mk    New definition of topological-sort suggested by rs2. This
;;;                 version avoids the call to SORT, but in practice isn't
;;;                 much faster. However, it avoids the need to maintain a
;;;                 TIME slot in the topsort-node structure.
;;;  8-MAR-95 mk    rs2 also pointed out that the calls to MAKE-PATHNAME and
;;;                 NAMESTRING in COMPONENT-FULL-PATHNAME are a major reason
;;;                 why defsystem is slow. Accordingly, I've changed
;;;                 COMPONENT-FULL-PATHNAME to include a call to NAMESTRING
;;;                 (and removed all other calls to NAMESTRING), and also made
;;;                 a few changes to minimize the number of calls to
;;;                 COMPONENT-FULL-PATHNAME, such as memoizing it. See To Do
;;;                 below for other related comments.
;;;  8-MAR-95 mk    Added special hack requested by Steve Strassman, which
;;;                 allows one to specify absolute pathnames in the shorthand
;;;                 for a list of components, and have defsystem recognize
;;;                 which are absolute and which are relative.
;;;                 I actually think this would be a good idea, but I haven't
;;;                 tested it, so it is disabled by default. Search for
;;;                 *enable-straz-absolute-string-hack* to enable it.
;;;  8-MAR-95 kt    Fixed problem with EXPORT in AKCL 1.603, in which it wasn't
;;;                 properly exporting the value of the global export
;;;                 variables.
;;;  8-MAR-95 mk    Added UNMUNGE-LUCID to fix nasty problem with COMPILE-FILE
;;;                 in Lucid. Lucid apparently tries to merge the :output-file
;;;                 with the source file when the :output-file is a relative
;;;                 pathname. Wierd, and definitely non-standard.
;;;  9-MAR-95 mk    Changed ALLEGRO-MAKE-SYSTEM-FASL to also include the files
;;;                 in any systems the system depends on, as per a
;;;                 request of oc.
;;;  9-MAR-95 mk    Some version of CMU CL couldn't hack a call to
;;;                 MAKE-PATHNAME with :host NIL. I'm not sure which version
;;;                 it is, but the current version doesn't have this problem.
;;;                 If given :host nil, it defaults the host to
;;;                 COMMON-LISP::*UNIX-HOST*. So I haven't "fixed" this
;;;                 problem.
;;;  9-MAR-95 mk    Integrated top-level commands for Allegro designed by bha
;;;                 into the code, with slight modifications.
;;;  9-MAR-95 mk    Instead of having COMPUTE-SYSTEM-PATH check the current
;;;                 directory in a hard-coded fashion, include the current
;;;                 directory in the *central-registry*, as suggested by
;;;                 bha and others.
;;;  9-MAR-95 bha   Support for Logical Pathnames in Allegro.
;;;  9-MAR-95 mk    Added modified version of bha's DEFSYSPATH idea.
;;; 13-MAR-95 mk    Added a macro for the simple serial case, where a system
;;;                 (or module) is simple a list of files, each of which
;;;                 depends on the previous one. If the value of :components
;;;                 is a list beginning with :serial, it expands each
;;;                 component and makes it depend on the previous component.
;;;                 For example, (:serial "foo" "bar" "baz") would create a
;;;                 set of components where "baz" depended on "bar" and "bar"
;;;                 on "foo".
;;; 13-MAR-95 mk    *** Now version 3.0. This version is a interim bug-fix and
;;;                 update, since I do not have the time right now to complete
;;;                 the complete overhaul and redesign.
;;;                 Major changes in 3.0 include CMU CL 17, CLISP, ACLPC, TI,
;;;                 LispWorks and ACL(SGI) support, bug fixes for ACL 4.1/4.2.
;;; 14-MAR-95 fdmm  Finally added the bit of code to discriminate cleanly
;;;                 among different lisps without relying on (software-version)
;;;                 idiosyncracies.
;;;                 You can now customize COMPILER-TYPE-TRANSLATION so that
;;;                 AFS-BINARY-DIRECTORY can return a different value for
;;;                 different lisps on the same platform.
;;;                 If you use only one compiler, do not care about supporting
;;;                 code for multiple versions of it, and want less verbose
;;;                 directory names, just set *MULTIPLE-LISP-SUPPORT* to nil.
;;; 17-MAR-95 lmh   Added EVAL-WHEN for one of the MAKE-PACKAGE calls.
;;;                 CMU CL's RUN-PROGRAM is in the extensions package.
;;;                 ABSOLUTE-FILE-NAMESTRING-P was missing :test keyword
;;;                 Rearranged conditionalization in DIRECTORY-TO-LIST to
;;;                 suppress compiler warnings in CMU CL.
;;; 17-MAR-95 mk    Added conditionalizations to avoid certain CMU CL compiler
;;;                 warnings reported by lmh.
;;; 19990610  ma    Added shadowing of 'HARDCOPY-SYSTEM' for LW Personal Ed.

;;; 19991211  ma    NEW VERSION 4.0 started.
;;; 19991211  ma    Merged in changes requested by T. Russ of
;;;                 ISI. Please refer to the special "ISI" comments to
;;;                 understand these changes
;;; 20000228 ma     The symbols FIND-SYSTEM, LOAD-SYSTEM, DEFSYSTEM,
;;;                 COMPILE-SYSTEM and HARDCOPY-SYSTEM are no longer
;;;                 imported in the COMMON-LISP-USER package.
;;;                 Cfr. the definitions of *EXPORTS* and
;;;                 *SPECIAL-EXPORTS*.
;;; 2000-07-21 rlt  Add COMPILER-OPTIONS to defstruct to allow user to
;;;                 specify special compiler options for a particular
;;;                 component.
;;; 2002-01-08 kmr  Changed allegro symbols to lowercase to support
;;;                 case-sensitive images

;;;---------------------------------------------------------------------------
;;; ISI Comments
;;;
;;; 19991211 Marco Antoniotti
;;; These comments come from the "ISI Branch".  I believe I did
;;; include the :load-always extension correctly.  The other commets
;;; seem superseded by other changes made to the system in the
;;; following years.  Some others are now useless with newer systems
;;; (e.g. filename truncation for new Windows based CL
;;; implementations.)

;;;  1-OCT-92 tar   Fixed problem with TI Lisp machines and append-directory.
;;;  1-OCT-92 tar   Made major modifications to compile-file-operation and
;;;                 load-file-operation to reduce the number of probe-file
;;;                 and write-date inquiries.  This makes the system run much
;;;                 faster through slow network connections.
;;; 13-OCT-92 tar   Added :load-always slot to components. If this slot is
;;;                 specified as non-NIL, always loads the component.
;;;                 This does not trigger dependent compilation.
;;;                 (This can be useful when macro definitions needed
;;;                 during compilation are changed by later files.  In
;;;                 this case, not reloading up-to-date files can
;;;                 cause different results.)
;;; 28-OCT-93 tar   Allegro 4.2 causes an error on (pathname-device nil)
;;; 14-SEP-94 tar   Disable importing of symbols into (CL-)USER package
;;;                 to minimize conflicts with other defsystem utilities.
;;; 10-NOV-94 tar   Added filename truncation code to support Franz Allegro
;;;                 PC with it's 8 character filename limitation.
;;; 15-MAY-98 tar   Changed host attribute for pathnames to support LispWorks
;;;                 (Windows) pathnames which reference other Drives.  Also
;;;                 updated file name convention.
;;;  9-NOV-98 tar   Updated new-append-directories for Lucid 5.0
;;;


;;; ********************************
;;; Ports **************************
;;; ********************************
;;;
;;;    DEFSYSTEM has been tested (successfully) in the following lisps:
;;;       CMU Common Lisp (M2.9 15-Aug-90, Compiler M1.8 15-Aug-90)
;;;       CMU Common Lisp (14-Dec-90 beta, Python Compiler 0.0 PMAX/Mach)
;;;       CMU Common Lisp 17f (Python 1.0)
;;;       Franz Allegro Common Lisp 3.1.12 (ExCL 3/30/90)
;;;       Franz Allegro Common Lisp 4.0/4.1/4.2
;;;       Franz Allegro Common Lisp for Windows (2.0)
;;;       Lucid Common Lisp (Version 2.1 6-DEC-87)
;;;       Lucid Common Lisp (3.0 [SPARC,SUN3])
;;;       Lucid Common Lisp (4.0 [SPARC,SUN3])
;;;       VAXLisp (v2.2) [VAX/VMS]
;;;       VAXLisp (v3.1)
;;;       Harlequin LispWorks
;;;       CLISP (CLISP3 [SPARC])
;;;       Symbolics XL12000 (Genera 8.3)
;;;       Scieneer Common Lisp (SCL) 1.1
;;;       Macintosh Common Lisp
;;;       ECL
;;;
;;;    DEFSYSTEM needs to be tested in the following lisps:
;;;       OpenMCL
;;;       Symbolics Common Lisp (8.0)
;;;       KCL (June 3, 1987 or later)
;;;       AKCL (1.86, June 30, 1987 or later)
;;;       TI (Release 4.1 or later)
;;;       Ibuki Common Lisp (01/01, October 15, 1987)
;;;       Golden Common Lisp (3.1 IBM-PC)
;;;       HP Common Lisp (same as Lucid?)
;;;       Procyon Common Lisp

;;; ********************************
;;; To Do **************************
;;; ********************************
;;;
;;; COMPONENT-FULL-PATHNAME is a major source of slowness in the system
;;; because of all the calls to the expensive operations MAKE-PATHNAME
;;; and NAMESTRING. To improve performance, DEFSYSTEM should be reworked
;;; to avoid any need to call MAKE-PATHNAME and NAMESTRING, as the logical
;;; pathnames package does. Unfortunately, I don't have the time to do this
;;; right now. Instead, I installed a temporary improvement by memoizing
;;; COMPONENT-FULL-PATHNAME to cache previous calls to the function on
;;; a component by component and type by type basis. The cache is
;;; cleared before each call to OOS, in case filename extensions change.
;;; But DEFSYSTEM should really be reworked to avoid this problem and
;;; ensure greater portability and to also handle logical pathnames.
;;;
;;; Also, PROBE-FILE and FILE-WRITE-DATE are other sources of slowness.
;;; Perhaps by also memoizing FILE-WRITE-DATE and reimplementing PROBE-FILE
;;; in terms of FILE-WRITE-DATE, can achieve a further speed-up. This was
;;; suggested by Steven Feist (feist@ils.nwu.edu).
;;;
;;; True CLtL2 logical pathnames support -- can't do it, because CLtL2
;;; doesn't have all the necessary primitives, and even in Allegro CL 4.2
;;;   (namestring #l"foo:bar;baz.lisp")
;;; does not work properly.
;;;
;;; Create separate stand-alone documentation for defsystem, and also
;;; a test suite.
;;;
;;; Change SYSTEM to be a class instead of a struct, and make it a little
;;; more generic, so that it permits alternate system definitions.
;;; Replace OPERATE-ON-SYSTEM with MAP-SYSTEM (args: function, system-name,
;;; &rest options)
;;;
;;; Add a patch directory mechanism. Perhaps have several directories
;;; with code in them, and the first one with the specified file wins?
;;; LOAD-PATCHES function.
;;;
;;; Need way to load old binaries even if source is newer.
;;;
;;; Allow defpackage forms/package definitions in the defsystem? If
;;; a package not defined, look for and load a file named package.pkg?
;;;
;;; need to port for GNU CL (ala kcl)?
;;;
;;; Someone asked whether one can have :file components at top-level. I believe
;;; this is the case, but should double-check that it is possible (and if
;;; not, make it so).
;;;
;;; A common error/misconception seems to involve assuming that :system
;;; components should include the name of the system file, and that
;;; defsystem will automatically load the file containing the system
;;; definition and propagate operations to it. Perhaps this would be a
;;; nice feature to add.
;;;
;;; If a module is :load-only t, then it should not execute its :finally-do
;;; and :initially-do clauses during compilation operations, unless the
;;; module's files happen to be loaded during the operation.
;;;
;;; System Class. Customizable delimiters.
;;;
;;; Load a system (while not loading anything already loaded)
;;; and inform the user of out of date fasls with the choice
;;; to load the old fasl or recompile and then load the new
;;; fasl?
;;;
;;; modify compile-file-operation to handle a query keyword....
;;;
;;; Perhaps systems should keep around the file-write-date of the system
;;; definition file, to prevent excessive reloading of the system definition?
;;;
;;; load-file-operation needs to be completely reworked to simplify the
;;; logic of when files get loaded or not.
;;;
;;; Need to revamp output: Nesting and indenting verbose output doesn't
;;; seem cool, especially when output overflows the 80-column margins.
;;;
;;; Document various ways of writing a system. simple (short) form
;;; (where :components is just a list of filenames) in addition to verbose.
;;; Put documentation strings in code.
;;;
;;; :load-time for modules and systems -- maybe record the time the system
;;; was loaded/compiled here and print it in describe-system?
;;;
;;; Make it easy to define new functions that operate on a system. For
;;; example, a function that prints out a list of files that have changed,
;;; hardcopy-system, edit-system, etc.
;;;
;;; If a user wants to have identical systems for different lisps, do we
;;; force the user to use logical pathnames? Or maybe we should write a
;;; generic-pathnames package that parses any pathname format into a
;;; uniform underlying format (i.e., pull the relevant code out of
;;; logical-pathnames.lisp and clean it up a bit).
;;;
;;;    Verify that Mac pathnames now work with append-directories.
;;;
;;; A common human error is to violate the modularization by making a file
;;; in one module depend on a file in another module, instead of making
;;; one module depend on the other. This is caught because the dependency
;;; isn't found. However, is there any way to provide a more informative
;;; error message? Probably not, especially if the system has multiple
;;; files of the same name.
;;;
;;; For a module none of whose files needed to be compiled, have it print out
;;; "no files need recompilation".
;;;
;;; Write a system date/time to a file? (version information) I.e., if the
;;; filesystem supports file version numbers, write an auxiliary file to
;;; the system definition file that specifies versions of the system and
;;; the version numbers of the associated files.
;;;
;;; Add idea of a patch directory.
;;;
;;; In verbose printout, have it log a date/time at start and end of
;;; compilation:
;;;     Compiling system "test" on 31-Jan-91 21:46:47
;;;     by Defsystem version v2.0 01-FEB-91.
;;;
;;; Define other :force options:
;;;    :query    allows user to specify that a file not normally compiled
;;;              should be. OR
;;;    :confirm  allows user to specify that a file normally compiled
;;;              shouldn't be. AND
;;;
;;; We currently assume that compilation-load dependencies and if-changed
;;; dependencies are identical. However, in some cases this might not be
;;; true. For example, if we change a macro we have to recompile functions
;;; that depend on it (except in lisps that automatically do this, such
;;; as the new CMU Common Lisp), but not if we change a function. Splitting
;;; these apart (with appropriate defaulting) would be nice, but not worth
;;; doing immediately since it may save only a couple of file recompilations,
;;; while making defsystem much more complex than it already is.
;;;
;;; Current dependencies are limited to siblings. Maybe we should allow
;;; nephews and uncles? So long as it is still a DAG, we can sort it.
;;; Answer: No. The current setup enforces a structure on the modularity.
;;; Otherwise, why should we have modules if we're going to ignore it?
;;;
;;; Currently a file is recompiled more or less if the source is newer
;;; than the binary or if the file depends on a file that has changed
;;; (i.e., was recompiled in this session of a system operation).
;;; Neil Goldman <goldman@isi.edu> has pointed out that whether a file
;;; needs recompilation is really independent of the current session of
;;; a system operation, and depends only on the file-write-dates of the
;;; source and binary files for a system. Thus a file should require
;;; recompilation in the following circumstances:
;;;   1. If a file's source is newer than its binary, or
;;;   2. If a file's source is not newer than its binary, but the file
;;;      depends directly or indirectly on a module (or file) that is newer.
;;;      For a regular file use the file-write-date (FWD) of the source or
;;;      binary, whichever is more recent. For a load-only file, use the only
;;;      available FWD. For a module, use the most recent (max) FWD of any of
;;;      its components.
;;; The impact of this is that instead of using a boolean CHANGED variable
;;; throughout the code, we need to allow CHANGED to be NIL/T/<FWD> or
;;; maybe just the FWD timestamp, and to use the value of CHANGED in
;;; needs-compilation decisions. (Use of NIL/T as values is an optimization.
;;; The FWD timestamp which indicates the most recent time of any changes
;;; should be sufficient.) This will affect not just the
;;; compile-file-operation, but also the load-file-operation because of
;;; compilation during load. Also, since FWDs will be used more prevalently,
;;; we probably should couple this change with the inclusion of load-times
;;; in the component defstruct. This is a tricky and involved change, and
;;; requires more thought, since there are subtle cases where it might not
;;; be correct. For now, the change will have to wait until the DEFSYSTEM
;;; redesign.

;;; ********************************************************************
;;; How to Use this System *********************************************
;;; ********************************************************************

;;; To use this system,
;;; 1. If you want to have a central registry of system definitions,
;;;    modify the value of the variable *central-registry* below.
;;; 2. Load this file (defsystem.lisp) in either source or compiled form,
;;; 3. Load the file containing the "defsystem" definition of your system,
;;; 4. Use the function "operate-on-system" to do things to your system.

;;; For more information, see the documentation and examples in
;;; lisp-utilities.ps.

;;; ********************************
;;; Usage Comments *****************
;;; ********************************

;;; If you use symbols in the system definition file, they get interned in
;;; the COMMON-LISP-USER package, which can lead to name conflicts when
;;; the system itself seeks to export the same symbol to the COMMON-LISP-USER
;;; package. The workaround is to use strings instead of symbols for the
;;; names of components in the system definition file. In the major overhaul,
;;; perhaps the user should be precluded from using symbols for such
;;; identifiers.
;;;
;;; If you include a tilde in the :source-pathname in Allegro, as in "~/lisp",
;;; file name expansion is much slower than if you use the full pathname,
;;; as in "/user/USERID/lisp".
;;;


;;; ****************************************************************
;;; Lisp Code ******************************************************
;;; ****************************************************************

;;; ********************************
;;; Massage CLtL2 onto *features* **
;;; ********************************
;;; Let's be smart about CLtL2 compatible Lisps:
(eval-when (compile load eval)
  #+(or (and allegro-version>= (version>= 4 0)) :mcl :openmcl :sbcl)
  (pushnew :cltl2 *features*))

;;; ********************************
;;; Provide/Require/*modules* ******
;;; ********************************

;;; Since CLtL2 has dropped require and provide from the language, some
;;; lisps may not have the functions PROVIDE and REQUIRE and the
;;; global *MODULES*. So if lisp::provide and user::provide are not
;;; defined, we define our own.

;;; Hmmm. CMU CL old compiler gives bogus warnings here about functions
;;; and variables not being declared or bound, apparently because it
;;; sees that (or (fboundp 'lisp::require) (fboundp 'user::require)) returns
;;; T, so it doesn't really bother when compiling the body of the unless.
;;; The new compiler does this properly, so I'm not going to bother
;;; working around this.

;;; Some Lisp implementations return bogus warnings about assuming
;;; *MODULE-FILES* and *LIBRARY* to be special, and CANONICALIZE-MODULE-NAME
;;; and MODULE-FILES being undefined. Don't worry about them.

;;; Now that ANSI CL includes PROVIDE and REQUIRE again, is this code
;;; necessary?

#-(or :CMU
      :vms
      :mcl
      :openmcl
      :lispworks
      :clisp
      :gcl
      :sbcl
      :cormanlisp
      :scl
      (and allegro-version>= (version>= 4 1)))
(eval-when #-(or :lucid)
           (:compile-toplevel :load-toplevel :execute)
	   #+(or :lucid)
           (compile load eval)

  (unless (or (fboundp 'lisp::require)
	      (fboundp 'user::require)

	      #+(and :excl (and allegro-version>= (version>= 4 0)))
	      (fboundp 'cltl1::require)

	      #+:lispworks
	      (fboundp 'system::require))

    #-:lispworks
    (in-package "LISP")
    #+:lispworks
    (in-package "SYSTEM")

    (export '(*modules* provide require))

    ;; Documentation strings taken almost literally from CLtL1.

    (defvar *modules* ()
      "List of names of the modules that have been loaded into Lisp so far.
     It is used by PROVIDE and REQUIRE.")

    ;; We provide two different ways to define modules. The default way
    ;; is to put either a source or binary file with the same name
    ;; as the module in the library directory. The other way is to define
    ;; the list of files in the module with defmodule.

    ;; The directory listed in *library* is implementation dependent,
    ;; and is intended to be used by Lisp manufacturers as a place to
    ;; store their implementation dependent packages.
    ;; Lisp users should use systems and *central-registry* to store
    ;; their packages -- it is intended that *central-registry* is
    ;; set by the user, while *library* is set by the lisp.

    (defvar *library* nil		; "/usr/local/lisp/Modules/"
      "Directory within the file system containing files, where the name
     of a file is the same as the name of the module it contains.")

    (defvar *module-files* (make-hash-table :test #'equal)
      "Hash table mapping from module names to list of files for the
     module. REQUIRE loads these files in order.")

    (defun canonicalize-module-name (name)
      ;; if symbol, string-downcase the printrep to make nicer filenames.
      (if (stringp name) name (string-downcase (string name))))

    (defmacro defmodule (name &rest files)
      "Defines a module NAME to load the specified FILES in order."
      `(setf (gethash (canonicalize-module-name ,name) *module-files*)
	     ',files))
    (defun module-files (name)
      (gethash name *module-files*))

    (defun provide (name)
      "Adds a new module name to the list of modules maintained in the
     variable *modules*, thereby indicating that the module has been
     loaded. Name may be a string or symbol -- strings are case-senstive,
     while symbols are treated like lowercase strings. Returns T if
     NAME was not already present, NIL otherwise."
      (let ((module (canonicalize-module-name name)))
	(unless (find module *modules* :test #'string=)
	  ;; Module not present. Add it and return T to signify that it
	  ;; was added.
	  (push module *modules*)
	  t)))

    (defun require (name &optional pathname)
      "Tests whether a module is already present. If the module is not
     present, loads the appropriate file or set of files. The pathname
     argument, if present, is a single pathname or list of pathnames
     whose files are to be loaded in order, left to right. If the
     pathname is nil, the system first checks if a module was defined
     using defmodule and uses the pathnames so defined. If that fails,
     it looks in the library directory for a file with name the same
     as that of the module. Returns T if it loads the module."
      (let ((module (canonicalize-module-name name)))
	(unless (find module *modules* :test #'string=)
	  ;; Module is not already present.
	  (when (and pathname (not (listp pathname)))
	    ;; If there's a pathname or pathnames, ensure that it's a list.
	    (setf pathname (list pathname)))
	  (unless pathname
	    ;; If there's no pathname, try for a defmodule definition.
	    (setf pathname (module-files module)))
	  (unless pathname
	    ;; If there's still no pathname, try the library directory.
	    (when *library*
	      (setf pathname (concatenate 'string *library* module))
	      ;; Test if the file exists.
	      ;; We assume that the lisp will default the file type
	      ;; appropriately. If it doesn't, use #+".fasl" or some
	      ;; such in the concatenate form above.
	      (if (probe-file pathname)
		  ;; If it exists, ensure we've got a list
		  (setf pathname (list pathname))
		  ;; If the library file doesn't exist, we don't want
		  ;; a load error.
		  (setf pathname nil))))
	  ;; Now that we've got the list of pathnames, let's load them.
	  (dolist (pname pathname t)
	    (load pname :verbose nil))))))
  ) ; eval-when

;;; ********************************
;;; Set up Package *****************
;;; ********************************


;;; Unfortunately, lots of lisps have their own defsystems, some more
;;; primitive than others, all uncompatible, and all in the DEFSYSTEM
;;; package. To avoid name conflicts, we've decided to name this the
;;; MAKE package. A nice side-effect is that the short nickname
;;; MK is my initials.

#+(or clisp cormanlisp ecl (and gcl defpackage) sbcl)
(defpackage "MAKE" (:use "COMMON-LISP") (:nicknames "MK"))

#-(or :sbcl :cltl2 :lispworks :ecl :scl)
(in-package "MAKE" :nicknames '("MK"))

;;; For CLtL2 compatible lisps...
#+(and :excl :allegro-v4.0 :cltl2)
(defpackage "MAKE" (:nicknames "MK" "make" "mk") (:use :common-lisp)
	    (:import-from cltl1 *modules* provide require))

;;; *** Marco Antoniotti <marcoxa@icsi.berkeley.edu> 19970105
;;; In Allegro 4.1, 'provide' and 'require' are not external in
;;; 'CLTL1'.  However they are in 'COMMON-LISP'.  Hence the change.
#+(and :excl :allegro-v4.1 :cltl2)
(defpackage "MAKE" (:nicknames "MK" "make" "mk") (:use :common-lisp) )

#+(and :excl :allegro-version>= (version>= 4 2))
(defpackage "MAKE" (:nicknames "MK" "make" "mk") (:use :common-lisp))

#+:lispworks
(defpackage "MAKE" (:nicknames "MK") (:use "COMMON-LISP")
	    (:import-from system *modules* provide require)
	    (:export "DEFSYSTEM" "COMPILE-SYSTEM" "LOAD-SYSTEM"
		     "DEFINE-LANGUAGE" "*MULTIPLE-LISP-SUPPORT*"))

#+:mcl
(defpackage "MAKE" (:nicknames "MK") (:use "COMMON-LISP")
  (:import-from ccl *modules* provide require))

;;; *** Marco Antoniotti <marcoxa@icsi.berkeley.edu> 19951012
;;; The code below, is originally executed also for CMUCL. However I
;;; believe this is wrong, since CMUCL comes with its own defpackage.
;;; I added the extra :CMU in the 'or'.
#+(and :cltl2 (not (or :cmu :clisp :sbcl
		       (and :excl (or :allegro-v4.0 :allegro-v4.1))
		       :mcl)))
(eval-when (compile load eval)
  (unless (find-package "MAKE")
    (make-package "MAKE" :nicknames '("MK") :use '("COMMON-LISP"))))

;;; *** Marco Antoniotti <marcoxa@icsi.berkeley.edu> 19951012
;;; Here I add the proper defpackage for CMU
#+:CMU
(defpackage "MAKE" (:use "COMMON-LISP" "CONDITIONS")
  (:nicknames "MK"))

#+:sbcl
(defpackage "MAKE" (:use "COMMON-LISP")
  (:nicknames "MK"))

#+:scl
(defpackage :make (:use :common-lisp)
  (:nicknames :mk))

#+(or :cltl2 :lispworks :scl)
(eval-when (compile load eval)
  (in-package "MAKE"))

#+ecl
(in-package "MAKE")

;;; *** Marco Antoniotti <marcoxa@icsi.berkeley.edu> 19970105
;;; 'provide' is not esternal in 'CLTL1' in Allegro v 4.1
#+(and :excl :allegro-v4.0 :cltl2)
(cltl1:provide 'make)
#+(and :excl :allegro-v4.0 :cltl2)
(provide 'make)

#+:openmcl
(cl:provide 'make)

#+(and :mcl (not :openmcl))
(ccl:provide 'make)

#+(and :cltl2 (not (or (and :excl (or :allegro-v4.0 :allegro-v4.1)) :mcl)))
(provide 'make)

#+:lispworks
(provide 'make)

#-(or :cltl2 :lispworks)
(provide 'make)

(pushnew :mk-defsystem *features*)

;;; Some compatibility issues.  Mostly for CormanLisp.
;;; 2002-02-20 Marco Antoniotti

#+cormanlisp
(defun compile-file-pathname (pathname-designator)
 (merge-pathnames (make-pathname :type "fasl")
		  (etypecase pathname-designator
		    (pathname pathname-designator)
		    (string (parse-namestring pathname-designator))
		    ;; We need FILE-STREAM here as well.
		    )))

#+cormanlisp
(defun file-namestring (pathname-designator)
  (let ((p (etypecase pathname-designator
	     (pathname pathname-designator)
	     (string (parse-namestring pathname-designator))
	     ;; We need FILE-STREAM here as well.
	     )))
    (namestring (make-pathname :directory ()
			       :name (pathname-name p)
			       :type (pathname-type p)
			       :version (pathname-version p)))))

;;; The external interface consists of *exports* and *other-exports*.

;;; AKCL (at least 1.603) grabs all the (export) forms and puts them up top in
;;; the compile form, so that you can't use a defvar with a default value and
;;; then a succeeding export as well.

(eval-when (compile load eval)
   (defvar *special-exports* nil)
   (defvar *exports* nil)
   (defvar *other-exports* nil)

   (export (setq *exports*
		 '(operate-on-system
		   oos
		   afs-binary-directory afs-source-directory
		   files-in-system)))
   (export (setq *special-exports*
		 '()))
   (export (setq *other-exports*
		 '(*central-registry*
		   *bin-subdir*

		   add-registry-location
		   find-system
		   defsystem compile-system load-system hardcopy-system

                   system-definition-pathname

                   missing-component
                   missing-component-name
                   missing-component-component
                   missing-module
                   missing-system

                   register-foreign-system

		   machine-type-translation
		   software-type-translation
		   compiler-type-translation
		   ;; require
		   define-language
		   allegro-make-system-fasl
		   files-which-need-compilation
		   undefsystem
		   defined-systems
		   describe-system clean-system edit-system ;hardcopy-system
		   system-source-size make-system-tag-table
		   *defsystem-version*
		   *compile-during-load*
		   *minimal-load*
		   *dont-redefine-require*
		   *files-missing-is-an-error*
		   *reload-systems-from-disk*
		   *source-pathname-default*
		   *binary-pathname-default*
		   *multiple-lisp-support*
		   ))))


;;; We import these symbols into the USER package to make them
;;; easier to use. Since some lisps have already defined defsystem
;;; in the user package, we may have to shadowing-import it.
#|
#-(or :sbcl :cmu :ccl :allegro :excl :lispworks :symbolics)
(eval-when (compile load eval)
  (import *exports* #-(or :cltl2 :lispworks) "USER"
	            #+(or :cltl2 :lispworks) "COMMON-LISP-USER")
  (import *special-exports* #-(or :cltl2 :lispworks) "USER"
	                    #+(or :cltl2 :lispworks) "COMMON-LISP-USER"))
#+(or :sbcl :cmu :ccl :allegro :excl :lispworks :symbolics)
(eval-when (compile load eval)
  (import *exports* #-(or :cltl2 :lispworks) "USER"
	            #+(or :cltl2 :lispworks) "COMMON-LISP-USER")
  (shadowing-import *special-exports*
		    #-(or :cltl2 :lispworks) "USER"
		    #+(or :cltl2 :lispworks) "COMMON-LISP-USER"))
|#

#-(or :PCL :CLOS :scl)
(when (find-package "PCL")
  (pushnew :pcl *modules*)
  (pushnew :pcl *features*))

;;; ********************************
;;; Defsystem Version **************
;;; ********************************
(defparameter *defsystem-version* "3.3 Interim, 2002-06-13"
  "Current version number/date for Defsystem.")

;;; ********************************
;;; Customizable System Parameters *
;;; ********************************

(defvar *dont-redefine-require* nil
  "If T, prevents the redefinition of REQUIRE. This is useful for
   lisps that treat REQUIRE specially in the compiler.")

(defvar *multiple-lisp-support* t
  "If T, afs-binary-directory will try to return a name dependent
   on the particular lisp compiler version being used.")

;;; home-subdirectory --
;;; HOME-SUBDIRECTORY is used only in *central-registry* below.
;;; Note that CMU CL 17e does not understand the ~/ shorthand for home
;;; directories.
;;;
;;; Note:
;;; 20020220 Marco Antoniotti
;;; The #-cormanlisp version is the original one, which is broken anyway, since
;;; it is UNIX dependent.
;;; I added the kludgy #+cormalisp (v 1.5) one, since it is missing
;;; the ANSI USER-HOMEDIR-PATHNAME function.
#-cormanlisp
(defun home-subdirectory (directory)
  (concatenate 'string
	#+(or :sbcl :cmu :scl)
	"home:"
	#-(or :sbcl :cmu :scl)
	(let ((homedir (user-homedir-pathname)))
	  (or (and homedir (namestring homedir))
	      "~/"))
	directory))

#+cormanlisp
(defun home-subdirectory (directory)
  (declare (type string directory))
  (concatenate 'string "C:\\" directory))

;;; The following function is available for users to add
;;;   (setq mk:*central-registry* (defsys-env-search-path))
;;; to Lisp init files in order to use the value of the DEFSYSPATH
;;; instead of directly coding it in the file.
#+:allegro
(defun defsys-env-search-path ()
  "This function grabs the value of the DEFSYSPATH environment variable
   and breaks the search path into a list of paths."
  (remove-duplicates (split-string (sys:getenv "DEFSYSPATH") :item #\:)
		     :test #'string-equal))

;;; Change this variable to set up the location of a central
;;; repository for system definitions if you want one.
;;; This is a defvar to allow users to change the value in their
;;; lisp init files without worrying about it reverting if they
;;; reload defsystem for some reason.

;;; Note that if a form is included in the registry list, it will be evaluated
;;; in COMPUTE-SYSTEM-PATH to return the appropriate directory to check.

(defvar *central-registry*
  `(;; Current directory
    "./"
    #+:LUCID     (working-directory)
    #+ACLPC      (current-directory)
    #+:allegro   (excl:current-directory)
    #+:sbcl      (progn *default-pathname-defaults*)
    #+(or :cmu :scl)       (ext:default-directory)
    ;; *** Marco Antoniotti <marcoxa@icsi.berkeley.edu>
    ;; Somehow it is better to qualify default-directory in CMU with
    ;; the appropriate package (i.e. "EXTENSIONS".)
    ;; Same for Allegro.
    #+(and :lispworks (not :lispworks4))
    ,(multiple-value-bind (major minor)
			  #-:lispworks-personal-edition
			  (system::lispworks-version)
			  #+:lispworks-personal-edition
			  (values system::*major-version-number*
				  system::*minor-version-number*)
       (if (or (> major 3)
	       (and (= major 3) (> minor 2))
	       (and (= major 3) (= minor 2)
		    (equal (lisp-implementation-version) "3.2.1")))
	   `(make-pathname :directory
			   ,(find-symbol "*CURRENT-WORKING-DIRECTORY*"
					 (find-package "SYSTEM")))
           (find-symbol "*CURRENT-WORKING-DIRECTORY*"
                        (find-package "LW"))))
    #+:lispworks4
    (hcl:get-working-directory)
    ;; Home directory
    #-sbcl
    (mk::home-subdirectory "lisp/systems/")

    ;; Global registry
    "/usr/local/lisp/Registry/")
  "Central directory of system definitions. May be either a single
   directory pathname, or a list of directory pathnames to be checked
   after the local directory.")


(defun add-registry-location (pathname)
  "Adds a path to the central registry."
  (pushnew pathname *central-registry* :test #'equal))

(defvar *bin-subdir* ".bin/"
  "The subdirectory of an AFS directory where the binaries are really kept.")

;;; These variables set up defaults for operate-on-system, and are used
;;; for communication in lieu of parameter passing. Yes, this is bad,
;;; but it keeps the interface small. Also, in the case of the -if-no-binary
;;; variables, parameter passing would require multiple value returns
;;; from some functions. Why make life complicated?
(defvar *tell-user-when-done* nil
  "If T, system will print ...DONE at the end of an operation")
(defvar *oos-verbose* nil
  "Operate on System Verbose Mode")
(defvar *oos-test* nil
  "Operate on System Test Mode")
(defvar *load-source-if-no-binary* nil
  "If T, system will try loading the source if the binary is missing")
(defvar *bother-user-if-no-binary* t
  "If T, the system will ask the user whether to load the source if
   the binary is missing")
(defvar *load-source-instead-of-binary* nil
  "If T, the system will load the source file instead of the binary.")
(defvar *compile-during-load* :query
  "If T, the system will compile source files during load if the
   binary file is missing. If :query, it will ask the user for
   permission first.")
(defvar *minimal-load* nil
  "If T, the system tries to avoid reloading files that were already loaded
   and up to date.")

(defvar *files-missing-is-an-error* t
  "If both the source and binary files are missing, signal a continuable
   error instead of just a warning.")

(defvar *operations-propagate-to-subsystems* t
  "If T, operations like :COMPILE and :LOAD propagate to subsystems
   of a system that are defined either using a component-type of :system
   or by another defsystem form.")

;;; Particular to CMULisp
(defvar *compile-error-file-type* "err"
  "File type of compilation error file in cmulisp")
(defvar *cmu-errors-to-terminal* t
  "Argument to :errors-to-terminal in compile-file in cmulisp")
(defvar *cmu-errors-to-file* t
  "If T, cmulisp will write an error file during compilation")

;;; ********************************
;;; Global Variables ***************
;;; ********************************

;;; Massage people's *features* into better shape.
(eval-when (compile load eval)
  (dolist (feature *features*)
    (when (and (symbolp feature)   ; 3600
               (equal (symbol-name feature) "CMU"))
      (pushnew :CMU *features*)))

  #+Lucid
  (when (search "IBM RT PC" (machine-type))
    (pushnew :ibm-rt-pc *features*))
  )

;;; *filename-extensions* is a cons of the source and binary extensions.
(defvar *filename-extensions*
  (car `(#+(and Symbolics Lispm)              ("lisp" . "bin")
         #+(and dec common vax (not ultrix))  ("LSP"  . "FAS")
         #+(and dec common vax ultrix)        ("lsp"  . "fas")
 	 #+ACLPC                              ("lsp"  . "fsl")
 	 #+CLISP                              ("lsp"  . "fas")
         #+KCL                                ("lsp"  . "o")
         #+ECL                                ("lsp"  . "so")
         #+IBCL                               ("lsp"  . "o")
         #+Xerox                              ("lisp" . "dfasl")
	 ;; Lucid on Silicon Graphics
	 #+(and Lucid MIPS)                   ("lisp" . "mbin")
	 ;; the entry for (and lucid hp300) must precede
	 ;; that of (and lucid mc68000) for hp9000/300's running lucid,
	 ;; since *features* on hp9000/300's also include the :mc68000
	 ;; feature.
	 #+(and lucid hp300)                  ("lisp" . "6bin")
         #+(and Lucid MC68000)                ("lisp" . "lbin")
         #+(and Lucid Vax)                    ("lisp" . "vbin")
         #+(and Lucid Prime)                  ("lisp" . "pbin")
         #+(and Lucid SUNRise)                ("lisp" . "sbin")
         #+(and Lucid SPARC)                  ("lisp" . "sbin")
         #+(and Lucid :IBM-RT-PC)             ("lisp" . "bbin")
	 ;; PA is Precision Architecture, HP's 9000/800 RISC cpu
	 #+(and Lucid PA)		      ("lisp" . "hbin")
         #+excl ("cl"   . ,(pathname-type (compile-file-pathname "foo.cl")))
         #+(or :cmu :scl)  ("lisp" . ,(or (c:backend-fasl-file-type c:*backend*) "fasl"))
;	 #+(and :CMU (not (or :sgi :sparc)))  ("lisp" . "fasl")
;        #+(and :CMU :sgi)                    ("lisp" . "sgif")
;        #+(and :CMU :sparc)                  ("lisp" . "sparcf")
	 #+PRIME                              ("lisp" . "pbin")
         #+HP                                 ("l"    . "b")
         #+TI ("lisp" . #.(string (si::local-binary-file-type)))
         #+:gclisp                            ("LSP"  . "F2S")
         #+pyramid                            ("clisp" . "o")

	 ;; Harlequin LispWorks
	 #+:lispworks 	      ("lisp" . ,COMPILER:*FASL-EXTENSION-STRING*)
;        #+(and :sun4 :lispworks)             ("lisp" . "wfasl")
;        #+(and :mips :lispworks)             ("lisp" . "mfasl")
         #+:mcl                               ("lisp" . ,(pathname-type (compile-file-pathname "foo.lisp")))
         #+:coral                             ("lisp" . "fasl")

         ;; Otherwise,
         ("lisp" . ,(pathname-type (compile-file-pathname "foo.lisp")))))
  "Filename extensions for Common Lisp. A cons of the form
   (Source-Extension . Binary-Extension). If the system is
   unknown (as in *features* not known), defaults to lisp and fasl.")

(defvar *system-extension*
  ;; MS-DOS systems can only handle three character extensions.
  #-ACLPC "system"
  #+ACLPC "sys"
  "The filename extension to use with systems.")

;;; The above variables and code should be extended to allow a list of
;;; valid extensions for each lisp implementation, instead of a single
;;; extension. When writing a file, the first extension should be used.
;;; But when searching for a file, every extension in the list should
;;; be used. For example, CMU Common Lisp recognizes "lisp" "l" "cl" and
;;; "lsp" (*load-source-types*) as source code extensions, and
;;; (c:backend-fasl-file-type c:*backend*)
;;; (c:backend-byte-fasl-file-type c:*backend*)
;;; and "fasl" as binary (object) file extensions (*load-object-types*).

;;; Note that the above code is used below in the LANGUAGE defstruct.

;;; There is no real support for this variable being nil, so don't change it.
;;; Note that in any event, the toplevel system (defined with defsystem)
;;; will have its dependencies delayed. Not having dependencies delayed
;;; might be useful if we define several systems within one defsystem.
(defvar *system-dependencies-delayed* t
  "If T, system dependencies are expanded at run time")

;;; Replace this with consp, dammit!
(defun non-empty-listp (list)
  (and list (listp list)))

;;; ********************************
;;; Component Operation Definition *
;;; ********************************
(eval-when (:compile-toplevel :load-toplevel :execute)
(defvar *version-dir* nil
  "The version subdir. bound in operate-on-system.")
(defvar *version-replace* nil
  "The version replace. bound in operate-on-system.")
(defvar *version* nil
  "Default version."))

(defvar *component-operations* (make-hash-table :test #'equal)
  "Hash table of (operation-name function) pairs.")
(defun component-operation (name &optional operation)
  (if operation
      (setf (gethash name *component-operations*) operation)
      (gethash name *component-operations*)))

;;; ********************************
;;; AFS @sys immitator *************
;;; ********************************

;;; mc 11-Apr-91: Bashes MCL's point reader, so commented out.
#-:mcl
(eval-when (compile load eval)
  ;; Define #@"foo" as a shorthand for (afs-binary-directory "foo").
  ;; For example,
  ;;    <cl> #@"foo"
  ;;    "foo/.bin/rt_mach/"
  (set-dispatch-macro-character
   #\# #\@
   #'(lambda (stream char arg)
       (declare (ignore char arg))
       `(afs-binary-directory ,(read stream t nil t)))))

(defvar *find-irix-version-script*
    "\"1,4 d\\
s/^[^M]*IRIX Execution Environment 1, *[a-zA-Z]* *\\([^ ]*\\)/\\1/p\\
/./,$ d\\
\"")

(defun operating-system-version ()
  #+(and :sgi :excl)
  (let* ((full-version (software-version))
	 (blank-pos (search " " full-version))
	 (os (subseq full-version 0 blank-pos))
	 (version-rest (subseq full-version
			       (1+ blank-pos)))
	 os-version)
    (setq blank-pos (search " " version-rest))
    (setq version-rest (subseq version-rest
			       (1+ blank-pos)))
    (setq blank-pos (search " " version-rest))
    (setq os-version (subseq version-rest 0 blank-pos))
    (setq version-rest (subseq version-rest
			       (1+ blank-pos)))
    (setq blank-pos (search " " version-rest))
    (setq version-rest (subseq version-rest
			       (1+ blank-pos)))
    (concatenate 'string
      os " " os-version))      ; " " version-rest
  #+(and :sgi :cmu :sbcl)
  (concatenate 'string
    (software-type)
    (software-version))
  #+(and :lispworks :irix)
  (let ((soft-type (software-type)))
    (if (equalp soft-type "IRIX5")
        (progn
          (foreign:call-system
	    (format nil "versions ~A | sed -e ~A > ~A"
                         "eoe1"
                         *find-irix-version-script*
                         "irix-version")
	    "/bin/csh")
          (with-open-file (s "irix-version")
                          (format nil "IRIX ~S"
				  (read s))))
      soft-type))
  #-(or (and :excl :sgi) (and :cmu :sgi) (and :lispworks :irix))
  (software-type))

(defun compiler-version ()
  #+:lispworks (concatenate 'string
		"lispworks" " " (lisp-implementation-version))
  #+excl      (concatenate 'string
		"excl" " " excl::*common-lisp-version-number*)
  #+sbcl      (concatenate 'string
			   "sbcl" " " (lisp-implementation-version))
  #+cmu       (concatenate 'string
		"cmu" " " (lisp-implementation-version))
  #+scl       (concatenate 'string
		"scl" " " (lisp-implementation-version))

  #+kcl       "kcl"
  #+IBCL      "ibcl"
  #+akcl      "akcl"
  #+gcl       "gcl"
  #+ecl       "ecl"
  #+lucid     "lucid"
  #+ACLPC     "aclpc"
  #+CLISP     "clisp"
  #+Xerox     "xerox"
  #+symbolics "symbolics"
  #+mcl       "mcl"
  #+coral     "coral"
  #+gclisp    "gclisp"
  )

(defun afs-binary-directory (root-directory)
  ;; Function for obtaining the directory AFS's @sys feature would have
  ;; chosen when we're not in AFS. This function is useful as the argument
  ;; to :binary-pathname in defsystem. For example,
  ;; :binary-pathname (afs-binary-directory "scanner/")
  (let ((machine (machine-type-translation
		  #-(and :sgi :allegro-version>= (version>= 4 2))
		  (machine-type)
		  #+(and :sgi :allegro-version>= (version>= 4 2))
		  (machine-version)))
	(software (software-type-translation
		   #-(and :sgi (or :cmu :sbcl :scl
				   (and :allegro-version>= (version>= 4 2))))
		   (software-type)
		   #+(and :sgi (or :cmu :sbcl :scl
				   (and :allegro-version>= (version>= 4 2))))
		   (operating-system-version)))
	(lisp (compiler-type-translation (compiler-version))))
    ;; pmax_mach rt_mach sun3_35 sun3_mach vax_mach
    (setq root-directory (namestring root-directory))
    (setq root-directory (ensure-trailing-slash root-directory))
    (format nil "~A~@[~A~]~@[~A/~]"
	    root-directory
	    *bin-subdir*
	    (if *multiple-lisp-support*
		(afs-component machine software lisp)
	      (afs-component machine software)))))

(defun afs-source-directory (root-directory &optional version-flag)
  ;; Function for obtaining the directory AFS's @sys feature would have
  ;; chosen when we're not in AFS. This function is useful as the argument
  ;; to :source-pathname in defsystem.
  (setq root-directory (namestring root-directory))
  (setq root-directory (ensure-trailing-slash root-directory))
  (format nil "~A~@[~A/~]"
          root-directory
          (and version-flag (translate-version *version*))))

(defun null-string (s)
  (when (stringp s)
    (string-equal s "")))

(defun ensure-trailing-slash (dir)
  (if (and dir
	   (not (null-string dir))
	   (not (char= (char dir
			     (1- (length dir)))
		       #\/))
	   (not (char= (char dir
			     (1- (length dir)))
		       #\\))
	   )
      (concatenate 'string dir "/")
      dir))

(defun afs-component (machine software &optional lisp)
  (format nil "~@[~A~]~@[_~A~]~@[_~A~]"
	    machine
	    (or software "mach")
	    lisp))

(defvar *machine-type-alist* (make-hash-table :test #'equal)
  "Hash table for retrieving the machine-type")
(defun machine-type-translation (name &optional operation)
  (if operation
      (setf (gethash (string-upcase name) *machine-type-alist*) operation)
      (gethash (string-upcase name) *machine-type-alist*)))

(machine-type-translation "IBM RT PC"                        "rt")
(machine-type-translation "DEC 3100"                         "pmax")
(machine-type-translation "DEC VAX-11"                       "vax")
(machine-type-translation "DECstation"                       "pmax")
(machine-type-translation "Sun3"                             "sun3")
(machine-type-translation "Sun-4"                            "sun4")
(machine-type-translation "MIPS Risc"                        "mips")
(machine-type-translation "SGI"                              "sgi")
(machine-type-translation "Silicon Graphics Iris 4D"         "sgi")
(machine-type-translation "Silicon Graphics Iris 4D (R3000)" "sgi")
(machine-type-translation "Silicon Graphics Iris 4D (R4000)" "sgi")
(machine-type-translation "Silicon Graphics Iris 4D (R4400)" "sgi")
(machine-type-translation "IP22"                             "sgi")
;;; MIPS R4000 Processor Chip Revision: 3.0
;;; MIPS R4400 Processor Chip Revision: 5.0
;;; MIPS R4600 Processor Chip Revision: 1.0
(machine-type-translation "IP20"                             "sgi")
;;; MIPS R4000 Processor Chip Revision: 3.0
(machine-type-translation "IP17"                             "sgi")
;;; MIPS R4000 Processor Chip Revision: 2.2
(machine-type-translation "IP12"                             "sgi")
;;; MIPS R2000A/R3000 Processor Chip Revision: 3.0
(machine-type-translation "IP7"                              "sgi")
;;; MIPS R2000A/R3000 Processor Chip Revision: 3.0

(machine-type-translation "x86"                              "x86")
;;; ACL
(machine-type-translation "IBM PC Compatible"                "x86")
;;; LW
(machine-type-translation "I686"                             "x86")
;;; LW
(machine-type-translation "PC/386"                           "x86")
;;; CLisp Win32

#+(and :lucid :sun :mc68000)
(machine-type-translation "unknown"     "sun3")


(defvar *software-type-alist* (make-hash-table :test #'equal)
  "Hash table for retrieving the software-type")
(defun software-type-translation (name &optional operation)
  (if operation
      (setf (gethash (string-upcase name) *software-type-alist*) operation)
      (gethash (string-upcase name) *software-type-alist*)))

(software-type-translation "BSD UNIX"      "mach") ; "unix"
(software-type-translation "Ultrix"        "mach") ; "ultrix"
(software-type-translation "SunOS"         "SunOS")
(software-type-translation "MACH/4.3BSD"   "mach")
(software-type-translation "IRIX System V" "irix") ; (software-type)
(software-type-translation "IRIX5"         "irix5")
;;(software-type-translation "IRIX liasg5 5.2 02282016 IP22 mips" "irix5") ; (software-version)

(software-type-translation "IRIX 5.2" "irix5")
(software-type-translation "IRIX 5.3" "irix5")
(software-type-translation "IRIX5.2"  "irix5")
(software-type-translation "IRIX5.3"  "irix5")

(software-type-translation "Linux" "linux") ; Lispworks for Linux
(software-type-translation "Linux 2.x, Redhat 6.x and 7.x" "linux") ; ACL
(software-type-translation "Microsoft Windows 9x/Me and NT/2000/XP" "win32")
(software-type-translation "Windows NT" "win32") ; LW for Windows
(software-type-translation "ANSI C program" "ansi-c") ; CLISP
(software-type-translation "C compiler" "ansi-c") ; CLISP for Win32

(software-type-translation nil             "")

#+:lucid
(software-type-translation "Unix"
			   #+:lcl4.0 "4.0"
			   #+(and :lcl3.0 (not :lcl4.0)) "3.0")

(defvar *compiler-type-alist* (make-hash-table :test #'equal)
  "Hash table for retrieving the Common Lisp type")
(defun compiler-type-translation (name &optional operation)
  (if operation
      (setf (gethash (string-upcase name) *compiler-type-alist*) operation)
    (gethash (string-upcase name) *compiler-type-alist*)))

(compiler-type-translation "lispworks 3.2.1"         "lispworks")
(compiler-type-translation "lispworks 3.2.60 beta 6" "lispworks")
(compiler-type-translation "lispworks 4.2.0"         "lispworks")

#+allegro
(eval-when (:compile-toplevel :load-toplevel :execute)
  (unless (or (find :case-sensitive common-lisp:*features*)
	      (find :case-insensitive common-lisp:*features*))
    (if (or (eq excl:*current-case-mode* :case-sensitive-lower)
	    (eq excl:*current-case-mode* :case-sensitive-upper))
	(push :case-sensitive common-lisp:*features*)
      (push :case-insensitive common-lisp:*features*))))


#+(and allegro case-sensitive ics)
(compiler-type-translation "excl 6.1" "excl-m")
#+(and allegro case-sensitive (not ics))
(compiler-type-translation "excl 6.1" "excl-m8")

#+(and allegro case-insensitive ics)
(compiler-type-translation "excl 6.1" "excl-a")
#+(and allegro case-insensitive (not ics))
(compiler-type-translation "excl 6.1" "excl-a8")

(compiler-type-translation "excl 4.2" "excl")
(compiler-type-translation "excl 4.1" "excl")
(compiler-type-translation "cmu 17f" "cmu")
(compiler-type-translation "cmu 17e" "cmu")
(compiler-type-translation "cmu 17d" "cmu")

;;; ********************************
;;; System Names *******************
;;; ********************************

;;; If you use strings for system names, be sure to use the same case
;;; as it appears on disk, if the filesystem is case sensitive.
(defun canonicalize-system-name (name)
  ;; Originally we were storing systems using GET. This meant that the
  ;; name of a system had to be a symbol, so we interned the symbols
  ;; in the keyword package to avoid package dependencies. Now that we're
  ;; storing the systems in a hash table, we've switched to using strings.
  ;; Since the hash table is case sensitive, we use uppercase strings.
  ;; (Names of modules and files may be symbols or strings.)
  #||(if (keywordp name)
      name
      (intern (string-upcase (string name)) "KEYWORD"))||#
  (if (stringp name) (string-upcase name) (string-upcase (string name))))

(defvar *defined-systems* (make-hash-table :test #'equal)
  "Hash table containing the definitions of all known systems.")

(defun get-system (name)
  "Returns the definition of the system named NAME."
  (gethash (canonicalize-system-name name) *defined-systems*))

(defsetf get-system (name) (value)
  `(setf (gethash (canonicalize-system-name ,name) *defined-systems*) ,value))

(defun undefsystem (name)
  "Removes the definition of the system named NAME."
  (setf (get-system name) nil))

(defun defined-systems ()
  "Returns a list of defined systems."
  (let ((result nil))
    (maphash #'(lambda (key value)
		 (declare (ignore key))
		 (push value result))
	     *defined-systems*)
    result))

;;; ********************************
;;; Directory Pathname Hacking *****
;;; ********************************

;;; Unix example: An absolute directory starts with / while a
;;; relative directory doesn't. A directory ends with /, while
;;; a file's pathname doesn't. This is important 'cause
;;; (pathname-directory "foo/bar") will return "foo" and not "foo/".

;;; I haven't been able to test the fix to the problem with symbolics
;;; hosts. Essentially, append-directories seems to have been tacking
;;; the default host onto the front of the pathname (e.g., mk::source-pathname
;;; gets a "B:" on front) and this overrides the :host specified in the
;;; component. The value of :host should override that specified in
;;; the :source-pathname and the default file server. If this doesn't
;;; fix things, specifying the host in the root pathname "F:>root-dir>"
;;; may be a good workaround.

;;; Need to verify that merging of pathnames where modules are located
;;; on different devices (in VMS-based VAXLisp) now works.

;;; Merge-pathnames works for VMS systems. In VMS systems, the directory
;;; part is enclosed in square brackets, e.g.,
;;; 	"[root.child.child_child]" or "[root.][child.][child_child]"
;;; To concatenate directories merge-pathnames works as follows:
;;; 	(merge-pathnames "" "[root]")               ==> "[root]"
;;; 	(merge-pathnames "[root.]" "[son]file.ext") ==> "[root.son]file.ext"
;;; 	(merge-pathnames "[root.]file.ext" "[son]") ==> "[root.son]file.ext"
;;; 	(merge-pathnames "[root]file.ext" "[son]")  ==> "[root]file.ext"
;;; Thus the problem with the #-VMS code was that it was merging x y into
;;; [[x]][y] instead of [x][y] or [x]y.

;;; Miscellaneous notes:
;;;   On GCLisp, the following are equivalent:
;;;       "\\root\\subdir\\BAZ"
;;;       "/root/subdir/BAZ"
;;;   On VAXLisp, the following are equivalent:
;;;       "[root.subdir]BAZ"
;;;       "[root.][subdir]BAZ"
;;; Use #+:vaxlisp for VAXLisp 3.0, #+(and vms dec common vax) for v2.2

(defun new-append-directories (absolute-dir relative-dir)
  ;; Version of append-directories for CLtL2-compliant lisps. In particular,
  ;; they must conform to section 23.1.3 "Structured Directories". We are
  ;; willing to fix minor aberations in this function, but not major ones.
  ;; Tested in Allegro CL 4.0 (SPARC), Allegro CL 3.1.12 (DEC 3100),
  ;; CMU CL old and new compilers, Lucid 3.0, Lucid 4.0.
  (setf absolute-dir (or absolute-dir "")
	relative-dir (or relative-dir ""))
  (let* ((abs-dir (pathname absolute-dir))
	 (rel-dir (pathname relative-dir))
	 (host (pathname-host abs-dir))
	 (device (if (null-string absolute-dir) ; fix for CMU CL old compiler
		     (pathname-device rel-dir)
		   (pathname-device abs-dir)))
	 (abs-directory (directory-to-list (pathname-directory abs-dir)))
	 (abs-keyword (when (keywordp (car abs-directory))
			(pop abs-directory)))
	 ;; Stig (July 2001):
	 ;; Somehow CLISP dies on the next line, but NIL is ok.
	 (abs-name (ignore-errors (file-namestring abs-dir))) ; was pathname-name
	 (rel-directory (directory-to-list (pathname-directory rel-dir)))
	 (rel-keyword (when (keywordp (car rel-directory))
			(pop rel-directory)))
         #-(or :MCL :sbcl :clisp) (rel-file (file-namestring rel-dir))
	 ;; Stig (July 2001);
	 ;; These values seems to help clisp as well
	 #+(or :MCL :sbcl :clisp) (rel-name (pathname-name rel-dir))
	 #+(or :MCL :sbcl :clisp) (rel-type (pathname-type rel-dir))
	 (directory nil))

    ;; TI Common Lisp pathnames can return garbage for file names because
    ;; of bizarreness in the merging of defaults.  The following code makes
    ;; sure that the name is a valid name by comparing it with the
    ;; pathname-name.  It also strips TI specific extensions and handles
    ;; the necessary case conversion.  TI maps upper back into lower case
    ;; for unix files!
    #+TI (if (search (pathname-name abs-dir) abs-name :test #'string-equal)
	     (setf abs-name (string-right-trim "." (string-upcase abs-name)))
	     (setf abs-name nil))
    #+TI (if (search (pathname-name rel-dir) rel-file :test #'string-equal)
	     (setf rel-file (string-right-trim "." (string-upcase rel-file)))
	     (setf rel-file nil))
    ;; Allegro v4.0/4.1 parses "/foo" into :directory '(:absolute :root)
    ;; and filename "foo". The namestring of a pathname with
    ;; directory '(:absolute :root "foo") ignores everything after the
    ;; :root.
    #+(and allegro-version>= (version>= 4 0))
    (when (eq (car abs-directory) :root) (pop abs-directory))
    #+(and allegro-version>= (version>= 4 0))
    (when (eq (car rel-directory) :root) (pop rel-directory))

    (when (and abs-name (not (null-string abs-name))) ; was abs-name
      (cond ((and (null abs-directory) (null abs-keyword))
	     #-(or :lucid :kcl :akcl TI) (setf abs-keyword :relative)
	     (setf abs-directory (list abs-name)))
	    (t
	     (setf abs-directory (append abs-directory (list abs-name))))))
    (when (and (null abs-directory)
	       (or (null abs-keyword)
		   ;; In Lucid, an abs-dir of nil gets a keyword of
		   ;; :relative since (pathname-directory (pathname ""))
		   ;; returns (:relative) instead of nil.
		   #+:lucid (eq abs-keyword :relative))
	       rel-keyword)
      ;; The following feature switches seem necessary in CMUCL
      ;; Marco Antoniotti 19990707
      #+(or :sbcl :CMU)
      (if (typep abs-dir 'logical-pathname)
	  (setf abs-keyword :absolute)
	  (setf abs-keyword rel-keyword))
      #-(or :sbcl :CMU)
      (setf abs-keyword rel-keyword))
    (setf directory (append abs-directory rel-directory))
    (when abs-keyword (setf directory (cons abs-keyword directory)))
    (namestring
     (make-pathname :host host
		    :device device
                    :directory
                    directory
		    :name
		    #-(or :sbcl :MCL :clisp) rel-file
		    #+(or :sbcl :MCL :clisp) rel-name

		    #+(or :sbcl :MCL :clisp) :type
		    #+(or :sbcl :MCL :clisp) rel-type
		    ))))

(defun directory-to-list (directory)
  ;; The directory should be a list, but nonstandard implementations have
  ;; been known to use a vector or even a string.
  (cond ((listp directory)
	 directory)
	((stringp directory)
	 (cond ((find #\; directory)
		;; It's probably a logical pathname, so split at the
		;; semicolons:
		(split-string directory :item #\;))
               #+MCL
	       ((and (find #\: directory)
		     (not (find #\/ directory)))
		;; It's probably a MCL pathname, so split at the colons.
		(split-string directory :item #\:))
	       (t
		;; It's probably a unix pathname, so split at the slash.
		(split-string directory :item #\/))))
	(t
	 (coerce directory 'list))))


(defparameter *append-dirs-tests*
  '("~/foo/" "baz/bar.lisp"
     "~/foo" "baz/bar.lisp"
     "/foo/bar/" "baz/barf.lisp"
     "/foo/bar/" "/baz/barf.lisp"
     "foo/bar/" "baz/barf.lisp"
     "foo/bar" "baz/barf.lisp"
     "foo/bar" "/baz/barf.lisp"
     "foo/bar/" "/baz/barf.lisp"
     "/foo/bar/" nil
     "foo/bar/" nil
     "foo/bar" nil
     "foo" nil
     "foo" ""
     nil "baz/barf.lisp"
     nil "/baz/barf.lisp"
     nil nil))

(defun test-new-append-directories (&optional (test-dirs *append-dirs-tests*))
  (do* ((dir-list test-dirs (cddr dir-list))
	(abs-dir (car dir-list) (car dir-list))
	(rel-dir (cadr dir-list) (cadr dir-list)))
      ((null dir-list) (values))
    (format t "~&ABS: ~S ~18TREL: ~S ~41TResult: ~S"
	    abs-dir rel-dir (new-append-directories abs-dir rel-dir))))

#||
<cl> (test-new-append-directories)

ABS: "~/foo/"     REL: "baz/bar.lisp"    Result: "/usr0/mkant/foo/baz/bar.lisp"
ABS: "~/foo"      REL: "baz/bar.lisp"    Result: "/usr0/mkant/foo/baz/bar.lisp"
ABS: "/foo/bar/"  REL: "baz/barf.lisp"   Result: "/foo/bar/baz/barf.lisp"
ABS: "/foo/bar/"  REL: "/baz/barf.lisp"  Result: "/foo/bar/baz/barf.lisp"
ABS: "foo/bar/"   REL: "baz/barf.lisp"   Result: "foo/bar/baz/barf.lisp"
ABS: "foo/bar"    REL: "baz/barf.lisp"   Result: "foo/bar/baz/barf.lisp"
ABS: "foo/bar"    REL: "/baz/barf.lisp"  Result: "foo/bar/baz/barf.lisp"
ABS: "foo/bar/"   REL: "/baz/barf.lisp"  Result: "foo/bar/baz/barf.lisp"
ABS: "/foo/bar/"  REL: NIL               Result: "/foo/bar/"
ABS: "foo/bar/"   REL: NIL               Result: "foo/bar/"
ABS: "foo/bar"    REL: NIL               Result: "foo/bar/"
ABS: "foo"        REL: NIL               Result: "foo/"
ABS: "foo"        REL: ""                Result: "foo/"
ABS: NIL          REL: "baz/barf.lisp"   Result: "baz/barf.lisp"
ABS: NIL          REL: "/baz/barf.lisp"  Result: "/baz/barf.lisp"
ABS: NIL          REL: NIL               Result: ""

||#


(defun append-directories (absolute-directory relative-directory)
  "There is no CL primitive for tacking a subdirectory onto a directory.
   We need such a function because defsystem has both absolute and
   relative pathnames in the modules. This is a somewhat ugly hack which
   seems to work most of the time. We assume that ABSOLUTE-DIRECTORY
   is a directory, with no filename stuck on the end. Relative-directory,
   however, may have a filename stuck on the end."
  (when (or absolute-directory relative-directory)
    (cond
     ;; KMR commented out because: when appending two logical pathnames,
     ;; using this code translates the first logical pathname then appends
     ;; the second logical pathname -- an error.
     #|
      ;; We need a reliable way to determine if a pathname is logical.
      ;; Allegro 4.1 does not recognize the syntax of a logical pathname
      ;;  as being logical unless its logical host is already defined.

      #+(or (and allegro-version>= (version>= 4 1))
	    :logical-pathnames-mk)
      ((and absolute-directory
	    (logical-pathname-p absolute-directory)
	    relative-directory)
       ;; For use with logical pathnames package.
       (append-logical-directories-mk absolute-directory relative-directory))
     |#
      ((namestring-probably-logical absolute-directory)
       ;; A simplistic stab at handling logical pathnames
       (append-logical-pnames absolute-directory relative-directory))
      (t
       ;; In VMS, merge-pathnames actually does what we want!!!
       #+:VMS
       (namestring (merge-pathnames (or absolute-directory "")
				    (or relative-directory "")))
       #+:macl1.3.2
       (namestring (make-pathname :directory absolute-directory
				  :name relative-directory))
       ;; Cross your fingers and pray.
       #-(or :VMS :macl1.3.2)
       (new-append-directories absolute-directory relative-directory)))))

#+:logical-pathnames-mk
(defun append-logical-directories-mk (absolute-dir relative-dir)
  (lp:append-logical-directories absolute-dir relative-dir))


;;; append-logical-pathnames-mk --
;;; The following is probably still bogus and it does not solve the
;;; problem of appending two logical pathnames.
;;; Anyway, as per suggetsion by KMR, the function is not called
;;; anymore.
;;; Hopefully this will not cause problems for ACL.

#+(and (and allegro-version>= (version>= 4 1))
       (not :logical-pathnames-mk))
(defun append-logical-directories-mk (absolute-dir relative-dir)
  ;; We know absolute-dir and relative-dir are non nil.  Moreover
  ;; absolute-dir is a logical pathname.
  (setq absolute-dir (logical-pathname absolute-dir))
  (etypecase relative-dir
    (string (setq relative-dir (parse-namestring relative-dir)))
    (pathname #| do nothing |#))

  (translate-logical-pathname
   (merge-pathnames relative-dir absolute-dir)))

#| Old version 2002-03-02
#+(and (and allegro-version>= (version>= 4 1))
       (not :logical-pathnames-mk))
(defun append-logical-directories-mk (absolute-dir relative-dir)
  ;; We know absolute-dir and relative-dir are non nil.  Moreover
  ;; absolute-dir is a logical pathname.
  (setq absolute-dir (logical-pathname absolute-dir))
  (etypecase relative-dir
    (string (setq relative-dir (parse-namestring relative-dir)))
    (pathname #| do nothing |#))

  (translate-logical-pathname
   (make-pathname
    :host (or (pathname-host absolute-dir)
	      (pathname-host relative-dir))
    :directory (append (pathname-directory absolute-dir)
		       (cdr (pathname-directory relative-dir)))
    :name (or (pathname-name absolute-dir)
	      (pathname-name relative-dir))
    :type (or (pathname-type absolute-dir)
	      (pathname-type relative-dir))
    :version (or (pathname-version absolute-dir)
		 (pathname-version relative-dir)))))

;; Old version
#+(and (and allegro-version>= (version>= 4 1))
       (not :logical-pathnames-mk))
(defun append-logical-directories-mk (absolute-dir relative-dir)
  (when (or absolute-dir relative-dir)
    (setq absolute-dir (logical-pathname (or absolute-dir ""))
	  relative-dir (logical-pathname (or relative-dir "")))
    (translate-logical-pathname
     (make-pathname
      :host (or (pathname-host absolute-dir)
		(pathname-host relative-dir))
      :directory (append (pathname-directory absolute-dir)
			 (cdr (pathname-directory relative-dir)))
      :name (or (pathname-name absolute-dir)
		(pathname-name relative-dir))
      :type (or (pathname-type absolute-dir)
		(pathname-type relative-dir))
      :version (or (pathname-version absolute-dir)
		   (pathname-version relative-dir))))))
|#

;;; determines if string or pathname object is logical
#+:logical-pathnames-mk
(defun logical-pathname-p (thing)
  (eq (lp:pathname-host-type thing) :logical))

;;; From Kevin Layer for 4.1final.
#+(and (and allegro-version>= (version>= 4 1))
       (not :logical-pathnames-mk))
(defun logical-pathname-p (thing)
  (typep (parse-namestring thing) 'logical-pathname))

(defun pathname-logical-p (thing)
  (typecase thing
    (logical-pathname t)
    #+clisp ; CLisp has non conformant Logical Pathnames.
    (pathname (pathname-logical-p (namestring thing)))
    (string (and (= 1 (count #\: thing)) ; Shortcut.
		 (ignore-errors (translate-logical-pathname thing))
		 t))
    (t nil)))

;;; This affects only one thing.
;;; 19990707 Marco Antoniotti
;;; old version

(defun namestring-probably-logical (namestring)
  (and (stringp namestring)
       ;; unix pathnames don't have embedded semicolons
       (find #\; namestring)))
#||
;;; New version
(defun namestring-probably-logical (namestring)
  (and (stringp namestring)
       (typep (parse-namestring namestring) 'logical-pathname)))


;;; New new version
;;; 20000321 Marco Antoniotti
(defun namestring-probably-logical (namestring)
  (pathname-logical-p namestring))
||#

(defun append-logical-pnames (absolute relative)
  (declare (type (or null string pathname) absolute relative))
  (let ((abs (if absolute
		 #-clisp (namestring absolute)
		 #+clisp absolute ;; Stig (July 2001): hack to avoid CLISP from translating the whole string
		 ""))
	(rel (if relative (namestring relative) ""))
	)
    ;; Make sure the absolute directory ends with a semicolon unless
    ;; the pieces are null strings
    (unless (or (null-string abs) (null-string rel)
		(char= (char abs (1- (length abs)))
		       #\;))
      (setq abs (concatenate 'string abs ";")))
    ;; Return the concatenate pathnames
    (concatenate 'string abs rel)))

#||
;;; This was a try at appending a subdirectory onto a directory.
;;; It failed. We're keeping this around to prevent future mistakes
;;; of a similar sort.
(defun merge-directories (absolute-directory relative-directory)
  ;; replace concatenate with something more intelligent
  ;; i.e., concatenation won't work with some directories.
  ;; it should also behave well if the parent directory
  ;; has a filename at the end, or if the relative-directory ain't relative
  (when absolute-directory
    (setq absolute-directory (pathname-directory absolute-directory)))
  (concatenate 'string
	       (or absolute-directory "")
	       (or relative-directory "")))
||#

#||
<cl> (defun d (d n) (namestring (make-pathname :directory d :name n)))

D
<cl> (d "~/foo/" "baz/bar.lisp")
"/usr0/mkant/foo/baz/bar.lisp"

<cl> (d "~/foo" "baz/bar.lisp")
"/usr0/mkant/foo/baz/bar.lisp"

<cl> (d "/foo/bar/" "baz/barf.lisp")
"/foo/bar/baz/barf.lisp"

<cl> (d "foo/bar/" "baz/barf.lisp")
"foo/bar/baz/barf.lisp"

<cl> (d "foo/bar" "baz/barf.lisp")
"foo/bar/baz/barf.lisp"

<cl> (d "foo/bar" "/baz/barf.lisp")
"foo/bar//baz/barf.lisp"

<cl> (d "foo/bar" nil)
"foo/bar/"

<cl> (d nil "baz/barf.lisp")
"baz/barf.lisp"

<cl> (d nil nil)
""

||#

;;; The following is a change proposed by DTC for SCL.
;;; Maybe it could be used all the time.

#-scl
(defun new-file-type (pathname type)
  ;; why not (make-pathname :type type :defaults pathname)?
  (make-pathname
   :host (pathname-host pathname)
   :device (pathname-device pathname)
   :directory (pathname-directory pathname)
   :name (pathname-name pathname)
   :type type
   :version (pathname-version pathname)))


#+scl
(defun new-file-type (pathname type)
  ;; why not (make-pathname :type type :defaults pathname)?
  (make-pathname
   :host (pathname-host pathname :case :common)
   :device (pathname-device pathname :case :common)
   :directory (pathname-directory pathname :case :common)
   :name (pathname-name pathname :case :common)
   :type (string-upcase type)
   :version (pathname-version pathname :case :common)))



;;; ********************************
;;; Component Defstruct ************
;;; ********************************
(defvar *source-pathname-default* nil
  "Default value of :source-pathname keyword in DEFSYSTEM. Set this to
   \"\" to avoid having to type :source-pathname \"\" all the time.")

(defvar *binary-pathname-default* nil
  "Default value of :binary-pathname keyword in DEFSYSTEM.")

;;; Removed TIME slot, which has been made unnecessary by the new definition
;;; of topological-sort.

(defstruct (topological-sort-node (:conc-name topsort-))
  (color :white :type (member :gray :black :white))
  ;; time
  )

(defstruct (component (:include topological-sort-node)
                      (:print-function print-component))
  (type :file     ; to pacify the CMUCL compiler (:type is alway supplied)
	:type (member :defsystem
		      :system
		      :subsystem
		      :module
		      :file
		      :private-file
		      ))
  (name nil :type (or symbol string))
  (indent 0 :type (mod 1024))		; Number of characters of indent in
					; verbose output to the user.
  host					; The pathname host (i.e., "/../a").
  device				; The pathname device.
  source-root-dir			; Relative or absolute (starts
					; with "/"), directory or file
					; (ends with "/").
  (source-pathname *source-pathname-default*)
  source-extension			; A string, e.g., "lisp"
					; if NIL, inherit
  (binary-pathname *binary-pathname-default*)
  binary-root-dir
  binary-extension			; A string, e.g., "fasl". If
					; NIL, uses default for
					; machine-type.
  package				; Package for use-package.

  ;; The following three slots are used to provide for alternate compilation
  ;; and loading functions for the files contained within a component. If
  ;; a component has a compiler or a loader specified, those functions are
  ;; used. Otherwise the functions are derived from the language. If no
  ;; language is specified, it defaults to Common Lisp (:lisp). Other current
  ;; possible languages include :scheme (PseudoScheme) and :c, but the user
  ;; can define additional language mappings. Compilation functions should
  ;; accept a pathname argument and a :output-file keyword; loading functions
  ;; just a pathname argument. The default functions are #'compile-file and
  ;; #'load. Unlike fdmm's SET-LANGUAGE macro, this allows a defsystem to
  ;; mix languages.
  (language nil :type (or null symbol))
  (compiler nil :type (or null symbol function))
  (loader   nil :type (or null symbol function))
  (compiler-options nil :type list)	; A list of compiler options to
                                        ; use for compiling this
                                        ; component.  These must be
                                        ; keyword options supported by
                                        ; the compiler.

  (components () :type list)		; A list of components
					; comprising this component's
					; definition.
  (depends-on () :type list)		; A list of the components
					; this one depends on. may
					; refer only to the components
					; at the same level as this
					; one.
  proclamations				; Compiler options, such as
					; '(optimize (safety 3)).
  initially-do				; Form to evaluate before the
					; operation.
  finally-do				; Form to evaluate after the operation.
  compile-form				; For foreign libraries.
  load-form				; For foreign libraries.

  ;; load-time				; The file-write-date of the
					; binary/source file loaded.

  ;; If load-only is T, will not compile the file on operation :compile.
  ;; In other words, for files which are :load-only T, loading the file
  ;; satisfies any demand to recompile.
  load-only				; If T, will not compile this
					; file on operation :compile.
  ;; If compile-only is T, will not load the file on operation :compile.
  ;; Either compiles or loads the file, but not both. In other words,
  ;; compiling the file satisfies the demand to load it. This is useful
  ;; for PCL defmethod and defclass definitions, which wrap a
  ;; (eval-when (compile load eval) ...) around the body of the definition.
  ;; This saves time in some lisps.
  compile-only				; If T, will not load this
					; file on operation :compile.
  #|| ISI Extension ||#
  load-always				; If T, will force loading
					; even if file has not
					; changed.
  ;; PVE: add banner
  (banner nil :type (or null string))

  (documentation nil :type (or null string)) ; Optional documentation slot
  )


;;; To allow dependencies from "foreign systems" like ASDF or one of
;;; the proprietary ones like ACL or LW.

(defstruct (foreign-system (:include component (type :system)))
  kind ; This is a keyword: (member :asdf :pcl :lispworks-common-defsystem ...)
  object ; The actual foreign system object.
  )


(defun register-foreign-system (name &key representation kind)
  (declare (type (or symbol string) name))
  (let ((fs (make-foreign-system :name name
                                 :kind kind
                                 :object representation)))
    (setf (get-system name) fs)))



(define-condition missing-component (simple-condition)
  ((name :reader missing-component-name
         :initarg :name)
   (component :reader missing-component-component
              :initarg :component)
   )
  (:default-initargs :component nil)
  (:report (lambda (mmc stream)
	     (format stream "MK:DEFSYSTEM: missing component ~S for ~S."
                     (missing-component-name mmc)
                     (missing-component-component mmc))))
  )

(define-condition missing-module (missing-component)
  ()
  (:report (lambda (mmc stream)
	     (format stream "MK:DEFSYSTEM: missing module ~S for ~S."
                     (missing-component-name mmc)
                     (missing-component-component mmc))))
  )

(define-condition missing-system (missing-module)
  ()
  (:report (lambda (msc stream)
	     (format stream "MK:DEFSYSTEM: missing system ~S~@[ for S~]."
                     (missing-component-name msc)
                     (missing-component-component msc))))
  )



(defvar *file-load-time-table* (make-hash-table :test #'equal)
  "Hash table of file-write-dates for the system definitions and
   files in the system definitions.")
(defun component-load-time (component)
  (when component
    (etypecase component
      (string    (gethash component *file-load-time-table*))
      (pathname (gethash (namestring component) *file-load-time-table*))
      (component
       (ecase (component-type component)
	 (:defsystem
	  (let* ((name (component-name component))
		 (path (when name (compute-system-path name nil))))
	    (declare (type (or string pathname null) path))
	    (when path
	      (gethash (namestring path) *file-load-time-table*))))
	 ((:file :private-file)
	  ;; Use only :source pathname to identify component's
	  ;; load time.
	  (let ((path (component-full-pathname component :source)))
	    (when path
	      (gethash path *file-load-time-table*)))))))))

#-(or :cmu)
(defsetf component-load-time (component) (value)
  `(when ,component
    (etypecase ,component
      (string   (setf (gethash ,component *file-load-time-table*) ,value))
      (pathname (setf (gethash (namestring (the pathname ,component))
			       *file-load-time-table*)
		      ,value))
      (component
       (ecase (component-type ,component)
	 (:defsystem
	  (let* ((name (component-name ,component))
		 (path (when name (compute-system-path name nil))))
	    (declare (type (or string pathname null) path))
	    (when path
	      (setf (gethash (namestring path) *file-load-time-table*)
		    ,value))))
	 ((:file :private-file)
	  ;; Use only :source pathname to identify file.
	  (let ((path (component-full-pathname ,component :source)))
	    (when path
	      (setf (gethash path *file-load-time-table*)
		    ,value)))))))
    ,value))

#+(or :cmu)
(defun (setf component-load-time) (value component)
  (declare
   (type (or null string pathname component) component)
   (type (or unsigned-byte null) value))
  (when component
    (etypecase component
      (string   (setf (gethash component *file-load-time-table*) value))
      (pathname (setf (gethash (namestring (the pathname component))
			       *file-load-time-table*)
		      value))
      (component
       (ecase (component-type component)
	 (:defsystem
	     (let* ((name (component-name component))
		    (path (when name (compute-system-path name nil))))
	       (declare (type (or string pathname null) path))
	       (when path
		 (setf (gethash (namestring path) *file-load-time-table*)
		       value))))
	 ((:file :private-file)
	  ;; Use only :source pathname to identify file.
	  (let ((path (component-full-pathname component :source)))
	    (when path
	      (setf (gethash path *file-load-time-table*)
		    value)))))))
    value))


;;; compute-system-path --

(defun compute-system-path (module-name definition-pname)
  (let* ((file-pathname
	  (make-pathname :name (etypecase module-name
				 (symbol (string-downcase
					  (string module-name)))
				 (string module-name))
			 :type *system-extension*))
         (lib-file-pathname
	  (make-pathname :directory (list :relative module-name)
                         :name (etypecase module-name
				 (symbol (string-downcase
					  (string module-name)))
				 (string module-name))
			 :type *system-extension*))
         )
    (or (when definition-pname		; given pathname for system def
	  (probe-file definition-pname))
	;; Then the central registry. Note that we also check the current
	;; directory in the registry, but the above check is hard-coded.
	(cond (*central-registry*
	       (if (listp *central-registry*)
		   (dolist (registry *central-registry*)
		     (let ((file (or (probe-file
				      (append-directories (if (consp registry)
							      (eval registry)
							      registry)
						          file-pathname))
                                     (probe-file
				      (append-directories (if (consp registry)
							      (eval registry)
							      registry)
						          lib-file-pathname))
                                     ))
                           )
		       (when file (return file))))
		   (or (probe-file (append-directories *central-registry*
						       file-pathname))
                       (probe-file (append-directories *central-registry*
						       lib-file-pathname))
                       ))
               )
	      (t
	       ;; No central registry. Assume current working directory.
	       ;; Maybe this should be an error?
	       (or (probe-file file-pathname)
                   (probe-file lib-file-pathname)))))
    ))


(defun system-definition-pathname (system-name)
  (let ((system (ignore-errors (find-system system-name :error))))
    (if system
        (let ((system-def-pathname
               (make-pathname :type "system"
                              :defaults (pathname (component-full-pathname system :source))))
              )
          (values system-def-pathname
                  (probe-file system-def-pathname)))
        (values nil nil))))
         
         


#|

(defun compute-system-path (module-name definition-pname)
  (let* ((filename (format nil "~A.~A"
			   (if (symbolp module-name)
			       (string-downcase (string module-name))
			     module-name)
			   *system-extension*)))
    (or (when definition-pname		; given pathname for system def
	  (probe-file definition-pname))
	;; Then the central registry. Note that we also check the current
	;; directory in the registry, but the above check is hard-coded.
	(cond (*central-registry*
	       (if (listp *central-registry*)
		   (dolist (registry *central-registry*)
		     (let ((file (probe-file
				  (append-directories (if (consp registry)
							  (eval registry)
							registry)
						      filename))))
		       (when file (return file))))
		 (probe-file (append-directories *central-registry*
						 filename))))
	      (t
	       ;; No central registry. Assume current working directory.
	       ;; Maybe this should be an error?
	       (probe-file filename))))))
|#


(defvar *reload-systems-from-disk* t
  "If T, always tries to reload newer system definitions from disk.
   Otherwise first tries to find the system definition in the current
   environment.")

(defun find-system (system-name &optional (mode :ask) definition-pname)
  "Returns the system named SYSTEM-NAME.
If not already loaded, loads it, depending on the value of
*RELOAD-SYSTEMS-FROM-DISK* and of the value of MODE. MODE can be :ASK,
:ERROR, :LOAD-OR-NIL, or :LOAD. :ASK is the default.
This allows OPERATE-ON-SYSTEM to work on non-loaded as well as
loaded system definitions. DEFINITION-PNAME is the pathname for
the system definition, if provided."
  (ecase mode
    (:ask
     (or (get-system system-name)
	 (when (y-or-n-p-wait
		#\y 20
		"System ~A not loaded. Shall I try loading it? "
		system-name)
	   (find-system system-name :load definition-pname))))
    (:error
     (or (get-system system-name)
	 (error 'missing-system :name system-name)))
    (:load-or-nil
     (let ((system (get-system system-name)))
       (or (unless *reload-systems-from-disk* system)
	   ;; If SYSTEM-NAME is a symbol, it will lowercase the
	   ;; symbol's string.
	   ;; If SYSTEM-NAME is a string, it doesn't change the case of the
	   ;; string. So if case matters in the filename, use strings, not
	   ;; symbols, wherever the system is named.
           (when (foreign-system-p system)
             (warn "Foreign system ~S cannot be reloaded by MK:DEFSYSTEM." system)
             (return-from find-system nil))
	   (let ((path (compute-system-path system-name definition-pname)))
	     (when (and path
			(or (null system)
			    (null (component-load-time path))
			    (< (component-load-time path)
			       (file-write-date path))))
	       (tell-user-generic
		(format nil "Loading system ~A from file ~A"
			system-name
			path))
	       (load path)
	       (setf system (get-system system-name))
	       (when system
		 (setf (component-load-time path)
		       (file-write-date path))))
	     system)
	   system)))
    (:load
     (or (unless *reload-systems-from-disk* (get-system system-name))
         (when (foreign-system-p (get-system system-name))
           (warn "Foreign system ~S cannot be reloaded by MK:DEFSYSTEM." system-name)
           (return-from find-system nil))
	 (or (find-system system-name :load-or-nil definition-pname)
	     (error "Can't find system named ~s." system-name))))))


(defun print-component (component stream depth)
  (declare (ignore depth))
  (format stream "#<~:@(~A~): ~A>"
          (component-type component)
          (component-name component)))


(defun describe-system (name &optional (stream *standard-output*))
  "Prints a description of the system to the stream. If NAME is the
   name of a system, gets it and prints a description of the system.
   If NAME is a component, prints a description of the component."
  (let ((system (if (typep name 'component) name (find-system name :load))))
    (format stream "~&~A ~A: ~
                    ~@[~&   Host: ~A~]~
                    ~@[~&   Device: ~A~]~
                    ~@[~&   Package: ~A~]~
                    ~&   Source: ~@[~A~] ~@[~A~] ~@[~A~]~
                    ~&   Binary: ~@[~A~] ~@[~A~] ~@[~A~]~
                    ~@[~&   Depends On: ~A ~]~&   Components: ~{~15T~A~&~}"
	    (component-type system)
	    (component-name system)
	    (component-host system)
	    (component-device system)
	    (component-package system)
	    (component-root-dir system :source)
	    (component-pathname system :source)
	    (component-extension system :source)
	    (component-root-dir system :binary)
	    (component-pathname system :binary)
	    (component-extension system :binary)
	    (component-depends-on system)
	    (component-components system))
    #||(when recursive
      (dolist (component (component-components system))
	(describe-system component stream recursive)))||#
    system))

(defun canonicalize-component-name (component)
  ;; Within the component, the name is a string.
  (if (typep (component-name component) 'string)
      ;; Unnecessary to change it, so just return it, same case
      (component-name component)
    ;; Otherwise, make it a downcase string -- important since file
    ;; names are often constructed from component names, and unix
    ;; prefers lowercase as a default.
    (setf (component-name component)
	  (string-downcase (string (component-name component))))))

(defun component-pathname (component type)
  (when component
    (ecase type
      (:source (component-source-pathname component))
      (:binary (component-binary-pathname component))
      (:error  (component-error-pathname component)))))
(defun component-error-pathname (component)
  (let ((binary (component-pathname component :binary)))
    (new-file-type binary *compile-error-file-type*)))
(defsetf component-pathname (component type) (value)
  `(when ,component
     (ecase ,type
       (:source (setf (component-source-pathname ,component) ,value))
       (:binary (setf (component-binary-pathname ,component) ,value)))))

(defun component-root-dir (component type)
  (when component
    (ecase type
      (:source (component-source-root-dir component))
      ((:binary :error) (component-binary-root-dir component))
      )))
(defsetf component-root-dir (component type) (value)
  `(when ,component
     (ecase ,type
       (:source (setf (component-source-root-dir ,component) ,value))
       (:binary (setf (component-binary-root-dir ,component) ,value)))))

(defvar *source-pathnames-table* (make-hash-table :test #'equal)
  "Table which maps from components to full source pathnames.")
(defvar *binary-pathnames-table* (make-hash-table :test #'equal)
  "Table which maps from components to full binary pathnames.")
(defparameter *reset-full-pathname-table* t
  "If T, clears the full-pathname tables before each call to
   OPERATE-ON-SYSTEM. Setting this to NIL may yield faster performance
   after multiple calls to LOAD-SYSTEM and COMPILE-SYSTEM, but could
   result in changes to system and language definitions to not take
   effect, and so should be used with caution.")
(defun clear-full-pathname-tables ()
  (clrhash *source-pathnames-table*)
  (clrhash *binary-pathnames-table*))

(defun component-full-pathname (component type &optional (version *version*))
  (when component
    (case type
      (:source
       (let ((old (gethash component *source-pathnames-table*)))
	 (or old
	     (let ((new (component-full-pathname-i component type version)))
	       (setf (gethash component *source-pathnames-table*) new)
	       new))))
      (:binary
        (let ((old (gethash component *binary-pathnames-table*)))
	 (or old
	     (let ((new (component-full-pathname-i component type version)))
	       (setf (gethash component *binary-pathnames-table*) new)
	       new))))
      (otherwise
       (component-full-pathname-i component type version)))))

(defun component-full-pathname-i (component type &optional (version *version*)
					    &aux version-dir version-replace)
  ;; If the pathname-type is :binary and the root pathname is null,
  ;; distribute the binaries among the sources (= use :source pathname).
  ;; This assumes that the component's :source pathname has been set
  ;; before the :binary one.
  (if version
      (multiple-value-setq (version-dir version-replace)
	(translate-version version))
      (setq version-dir *version-dir* version-replace *version-replace*))
  (let ((pathname
	 (append-directories
	  (if version-replace
	      version-dir
	      (append-directories (component-root-dir component type)
				  version-dir))
	  (component-pathname component type))))

    ;; When a logical pathname is used, it must first be translated to
    ;; a physical pathname. This isn't strictly correct. What should happen
    ;; is we fill in the appropriate slots of the logical pathname, and
    ;; then return the logical pathname for use by compile-file & friends.
    ;; But calling translate-logical-pathname to return the actual pathname
    ;; should do for now.

    ;; (format t "pathname = ~A~%" pathname)
    ;; (format t "type = ~S~%" (component-extension component type))

    ;; 20000303 Marco Antoniotti
    ;; Changed the following according to suggestion by Ray Toy.  I
    ;; just collapsed the tests for "logical-pathname-ness" into a
    ;; single test (heavy, but probably very portable) and added the
    ;; :name argument to the MAKE-PATHNAME in the MERGE-PATHNAMES
    ;; beacuse of possible null names (e.g. :defsystem components)
    ;; causing problems with the subsequenct call to NAMESTRING.
    (cond ((pathname-logical-p pathname) ; See definition of test above.
	   (setf pathname
		 (merge-pathnames pathname
				  (make-pathname
				   :name (component-name component)
				   :type (component-extension component
							      type))))
	   ;;(format t "new path = ~A~%" pathname)
	   (namestring (translate-logical-pathname pathname)))
	  (t
	   (namestring
	    (make-pathname :host (when (component-host component)
				   ;; MCL2.0b1 and ACLPC cause an error on
				   ;; (pathname-host nil)
				   (pathname-host (component-host component)
						  #+scl :case #+scl :common
						  ))
			   :directory (pathname-directory pathname
						  #+scl :case #+scl :common
						  )
			   ;; Use :directory instead of :defaults
			   :name (pathname-name pathname
						  #+scl :case #+scl :common
						  )
			   :type #-scl (component-extension component type)
			         #+scl (string-upcase
					(component-extension component type))
			   :device
			   #+sbcl
			   :unspecific
			   #-(or :sbcl)
			   (let ((dev (component-device component)))
			     (if dev
                                 (pathname-device dev
						  #+scl :case #+scl :common
						  )
                                 (pathname-device pathname
						  #+scl :case #+scl :common
						  )))
			   ;; :version :newest
			   ))))))

;;; What about CMU17 :device :unspecific in the above?

(defun translate-version (version)
  ;; Value returns the version directory and whether it replaces
  ;; the entire root (t) or is a subdirectory.
  ;; Version may be nil to signify no subdirectory,
  ;; a symbol, such as alpha, beta, omega, :alpha, mark, which
  ;; specifies a subdirectory of the root, or
  ;; a string, which replaces the root.
  (cond ((null version)
	 (values "" nil))
	((symbolp version)
	 (values (let ((sversion (string version)))
		   (if (find-if #'lower-case-p sversion)
		       sversion
		       (string-downcase sversion)))
		 nil))
	((stringp version)
	 (values version t))
	(t (error "~&; Illegal version ~S" version))))

(defun component-extension (component type &key local)
  (ecase type
    (:source (or (component-source-extension component)
		 (unless local
		   (default-source-extension component)))) ; system default
    (:binary (or (component-binary-extension component)
		 (unless local
		   (default-binary-extension component)))) ; system default
    (:error  *compile-error-file-type*)))
(defsetf component-extension (component type) (value)
  `(ecase ,type
     (:source (setf (component-source-extension ,component) ,value))
     (:binary (setf (component-binary-extension ,component) ,value))
     (:error  (setf *compile-error-file-type* ,value))))

;;; ********************************
;;; System Definition **************
;;; ********************************
(defun create-component (type name definition-body &optional parent (indent 0))
  (let ((component (apply #'make-component
			  :type type
			  :name name
			  :indent indent definition-body)))
    ;; Set up :load-only attribute
    (unless (find :load-only definition-body)
      ;; If the :load-only attribute wasn't specified,
      ;; inherit it from the parent. If no parent, default it to nil.
      (setf (component-load-only component)
	    (when parent
	      (component-load-only parent))))
    ;; Set up :compile-only attribute
    (unless (find :compile-only definition-body)
      ;; If the :compile-only attribute wasn't specified,
      ;; inherit it from the parent. If no parent, default it to nil.
      (setf (component-compile-only component)
	    (when parent
	      (component-compile-only parent))))

    ;; Set up :compiler-options attribute
    (unless (find :compiler-options definition-body)
      ;; If the :compiler-option attribute wasn't specified,
      ;; inherit it from the parent.  If no parent, default it to NIL.
      (setf (component-compiler-options component)
	    (when parent
	      (component-compiler-options parent))))

    #|| ISI Extension ||#
    ;; Set up :load-always attribute
    (unless (find :load-always definition-body)
      ;; If the :load-always attribute wasn't specified,
      ;; inherit it from the parent. If no parent, default it to nil.
      (setf (component-load-always component)
	    (when parent
	      (component-load-always parent))))

    ;; Initializations/after makes
    (canonicalize-component-name component)

    ;; Inherit package from parent if not specified.
    (setf (component-package component)
	  (or (component-package component)
	      (when parent (component-package parent))))

    ;; Type specific setup:
    (when (or (eq type :defsystem) (eq type :system) (eq type :subsystem))
      (setf (get-system name) component))

    ;; Set up the component's pathname
    (create-component-pathnames component parent)

    ;; If there are any components of the component, expand them too.
    (expand-component-components component (+ indent 2))

    ;; Make depends-on refer to structs instead of names.
    (link-component-depends-on (component-components component))

    ;; Design Decision: Topologically sort the dependency graph at
    ;; time of definition instead of at time of use. Probably saves a
    ;; little bit of time for the user.

    ;; Topological Sort the components at this level.
    (setf (component-components component)
          (topological-sort (component-components component)))

    ;; Return the component.
    component))


;;; defsystem --
;;; The main macro.
;;;
;;; 2002-11-22 Marco Antoniotti
;;; Added code to achieve a first cut "pathname less" operation,
;;; following the ideas in ASDF.  If the DEFSYSTEM form is loaded from
;;; a file, then the location of the file (intended as a directory) is
;;; computed from *LOAD-PATHNAME* and stored as the :SOURCE-PATHNAME
;;; of the system.

(defmacro defsystem (name &rest definition-body)
  (unless (find :source-pathname definition-body)
    (setf definition-body
	  (list* :source-pathname
		 '(when *load-pathname*
		        (make-pathname :name nil
			               :type nil
			               :defaults *load-pathname*))
		 definition-body)))
  `(create-component :defsystem ',name ',definition-body nil 0))

(defun create-component-pathnames (component parent)
  ;; Set up language-specific defaults
  (setf (component-language component)
	(or (component-language component) ; for local defaulting
	    (when parent		; parent's default
	      (component-language parent))))
  (setf (component-compiler component)
	(or (component-compiler component) ; for local defaulting
	    (when parent		; parent's default
	      (component-compiler parent))))
  (setf (component-loader component)
	(or (component-loader component) ; for local defaulting
	    (when parent		; parent's default
	      (component-loader parent))))

  ;; Evaluate the root dir arg
  (setf (component-root-dir component :source)
	(eval (component-root-dir component :source)))
  (setf (component-root-dir component :binary)
	(eval (component-root-dir component :binary)))

  ;; Evaluate the pathname arg
  (setf (component-pathname component :source)
	(eval (component-pathname component :source)))
  (setf (component-pathname component :binary)
	(eval (component-pathname component :binary)))

  ;; Pass along the host and devices
  (setf (component-host component)
	(or (component-host component)
	    (when parent (component-host parent))))
  (setf (component-device component)
	(or (component-device component)
	    (when parent (component-device parent))))

  ;; Set up extension defaults
  (setf (component-extension component :source)
	(or (component-extension component :source :local t) ; local default
	    (when parent		; parent's default
	      (component-extension parent :source))))
  (setf (component-extension component :binary)
	(or (component-extension component :binary  :local t) ; local default
	    (when parent		; parent's default
	      (component-extension parent :binary))))

  ;; Set up pathname defaults -- expand with parent
  ;; We must set up the source pathname before the binary pathname
  ;; to allow distribution of binaries among the sources to work.
  (generate-component-pathname component parent :source)
  (generate-component-pathname component parent :binary))

;; maybe file's inheriting of pathnames should be moved elsewhere?
(defun generate-component-pathname (component parent pathname-type)
  ;; Pieces together a pathname for the component based on its component-type.
  ;; Assumes source defined first.
  ;; Null binary pathnames inherit from source instead of the component's
  ;; name. This allows binaries to be distributed among the source if
  ;; binary pathnames are not specified. Or if the root directory is
  ;; specified for binaries, but no module directories, it inherits
  ;; parallel directory structure.
  (case (component-type component)
    ((:defsystem :system)		; Absolute Pathname
     ;; Set the root-dir to be the absolute pathname
     (setf (component-root-dir component pathname-type)
	   (or (component-pathname component pathname-type)
	       (when (eq pathname-type :binary)
		 ;; When the binary root is nil, use source.
		 (component-root-dir component :source))) )
     ;; Set the relative pathname to be nil
     (setf (component-pathname component pathname-type)
	   nil));; should this be "" instead?
    ;; If the name of the component-pathname is nil, it
    ;; defaults to the name of the component. Use "" to
    ;; avoid this defaulting.
    (:private-file                      ; Absolute Pathname
     ;; Root-dir is the directory part of the pathname
     (setf (component-root-dir component pathname-type)
	   ""
	   #+ignore(or (when (component-pathname component pathname-type)
			 (pathname-directory
			  (component-pathname component pathname-type)))
		       (when (eq pathname-type :binary)
			 ;; When the binary root is nil, use source.
			 (component-root-dir component :source)))
	   )
     ;; If *SOURCE-PATHNAME-DEFAULT* or *BINARY-PATHNAME-DEFAULT* is "",
     ;; then COMPONENT-SOURCE-PATHNAME or COMPONENT-BINARY-PATHNAME could
     ;; wind up being "", which is wrong for :file components. So replace
     ;; them with NIL.
     (when (null-string (component-pathname component pathname-type))
       (setf (component-pathname component pathname-type) nil))
     ;; The relative pathname is the name part
     (setf (component-pathname component pathname-type)
	   (or (when (and (eq pathname-type :binary)
			  (null (component-pathname component :binary)))
		 ;; When the binary-pathname is nil use source.
		 (component-pathname component :source))
	       (or (when (component-pathname component pathname-type)
;		     (pathname-name )
		     (component-pathname component pathname-type))
		   (component-name component)))))
    ((:module :subsystem)			; Pathname relative to parent.
     ;; Inherit root-dir from parent
     (setf (component-root-dir component pathname-type)
	   (component-root-dir parent pathname-type))
     ;; Tack the relative-dir onto the pathname
     (setf (component-pathname component pathname-type)
	   (or (when (and (eq pathname-type :binary)
			  (null (component-pathname component :binary)))
		 ;; When the binary-pathname is nil use source.
		 (component-pathname component :source))
	       (append-directories
		(component-pathname parent pathname-type)
		(or (component-pathname component pathname-type)
		    (component-name component))))))
    (:file				; Pathname relative to parent.
     ;; Inherit root-dir from parent
     (setf (component-root-dir component pathname-type)
	   (component-root-dir parent pathname-type))
     ;; If *SOURCE-PATHNAME-DEFAULT* or *BINARY-PATHNAME-DEFAULT* is "",
     ;; then COMPONENT-SOURCE-PATHNAME or COMPONENT-BINARY-PATHNAME could
     ;; wind up being "", which is wrong for :file components. So replace
     ;; them with NIL.
     (when (null-string (component-pathname component pathname-type))
       (setf (component-pathname component pathname-type) nil))
     ;; Tack the relative-dir onto the pathname
     (setf (component-pathname component pathname-type)
	   (or (append-directories
		(component-pathname parent pathname-type)
		(or (component-pathname component pathname-type)
		    (component-name component)
		    (when (eq pathname-type :binary)
		      ;; When the binary-pathname is nil use source.
		      (component-pathname component :source)))))))
    ))

#|| ;; old version
(defun expand-component-components (component &optional (indent 0))
  (let ((definitions (component-components component)))
    (setf (component-components component)
	  (remove-if #'null
		     (mapcar #'(lambda (definition)
				 (expand-component-definition definition
							      component
							      indent))
			     definitions)))))
||#
;; new version
(defun expand-component-components (component &optional (indent 0))
  (let ((definitions (component-components component)))
    (if (eq (car definitions) :serial)
	(setf (component-components component)
	      (expand-serial-component-chain (cdr definitions)
					     component indent))
	(setf (component-components component)
	      (expand-component-definitions definitions component indent)))))

(defun expand-component-definitions (definitions parent &optional (indent 0))
  (let ((components nil))
    (dolist (definition definitions)
      (let ((new (expand-component-definition definition parent indent)))
	(when new (push new components))))
    (nreverse components)))

(defun expand-serial-component-chain (definitions parent &optional (indent 0))
  (let ((previous nil)
	(components nil))
    (dolist (definition definitions)
      (let ((new (expand-component-definition definition parent indent)))
	(when new
	  ;; Make this component depend on the previous one. Since
	  ;; we don't know the form of the definition, we have to
	  ;; expand it first.
	  (when previous (pushnew previous (component-depends-on new)))
	  ;; The dependencies will be linked later, so we use the name
	  ;; instead of the actual component.
	  (setq previous (component-name new))
	  ;; Save the new component.
	  (push new components))))
    ;; Return the list of expanded components, in appropriate order.
    (nreverse components)))


(defparameter *enable-straz-absolute-string-hack* nil
  "Special hack requested by Steve Strassman, where the shorthand
   that specifies a list of components as a list of strings also
   recognizes absolute pathnames and treats them as files of type
   :private-file instead of type :file. Defaults to NIL, because I
   haven't tested this.")
(defun absolute-file-namestring-p (string)
  ;; If a FILE namestring starts with a slash, or is a logical pathname
  ;; as implied by the existence of a colon in the filename, assume it
  ;; represents an absolute pathname.
  (or (find #\: string :test #'char=)
      (and (not (null-string string))
	   (char= (char string 0) #\/))))

(defun expand-component-definition (definition parent &optional (indent 0))
  ;; Should do some checking for malformed definitions here.
  (cond ((null definition) nil)
        ((stringp definition)
         ;; Strings are assumed to be of type :file
	 (if (and *enable-straz-absolute-string-hack*
		  (absolute-file-namestring-p definition))
	     ;; Special hack for Straz
	     (create-component :private-file definition nil parent indent)
	   ;; Normal behavior
	   (create-component :file definition nil parent indent)))
        ((and (listp definition)
              (not (member (car definition)
			   '(:defsystem :system :subsystem
			     :module :file :private-file))))
         ;; Lists whose first element is not a component type
         ;; are assumed to be of type :file
         (create-component :file
			   (car definition)
			   (cdr definition)
			   parent
			   indent))
        ((listp definition)
         ;; Otherwise, it is (we hope) a normal form definition
         (create-component (car definition)   ; type
                           (cadr definition)  ; name
                           (cddr definition)  ; definition body
                           parent             ; parent
			   indent)            ; indent
         )))

(defun link-component-depends-on (components)
  (dolist (component components)
    (unless (and *system-dependencies-delayed*
                 (eq (component-type component) :defsystem))
      (setf (component-depends-on component)
            (mapcar #'(lambda (dependency)
			(let ((parent (find (string dependency) components
					    :key #'component-name
					    :test #'string-equal)))
			  (cond (parent parent)
				;; make it more intelligent about the following
				(t (warn "Dependency ~S of component ~S not found."
					 dependency component)))))

                    (component-depends-on component))))))

;;; ********************************
;;; Topological Sort the Graph *****
;;; ********************************

;;; New version of topological sort suggested by rs2. Even though
;;; this version avoids the call to sort, in practice it isn't faster. It
;;; does, however, eliminate the need to have a TIME slot in the
;;; topological-sort-node defstruct.
(defun topological-sort (list &aux (sorted-list nil))
  (labels ((dfs-visit (znode)
	      (setf (topsort-color znode) :gray)
	      (unless (and *system-dependencies-delayed*
			   (eq (component-type znode) :system))
		(dolist (child (component-depends-on znode))
		  (cond ((eq (topsort-color child) :white)
			 (dfs-visit child))
			((eq (topsort-color child) :gray)
			 (format t "~&Detected cycle containing ~A" child)))))
	      (setf (topsort-color znode) :black)
	      (push znode sorted-list)))
    (dolist (znode list)
      (setf (topsort-color znode) :white))
    (dolist (znode list)
      (when (eq (topsort-color znode) :white)
        (dfs-visit znode)))
    (nreverse sorted-list)))

#||
;;; Older version of topological sort.
(defun topological-sort (list &aux (time 0))
  ;; The algorithm works by calling depth-first-search to compute the
  ;; blackening times for each vertex, and then sorts the vertices into
  ;; reverse order by blackening time.
  (labels ((dfs-visit (node)
	      (setf (topsort-color node) 'gray)
	      (unless (and *system-dependencies-delayed*
			   (eq (component-type node) :defsystem))
		(dolist (child (component-depends-on node))
		  (cond ((eq (topsort-color child) 'white)
			 (dfs-visit child))
			((eq (topsort-color child) 'gray)
			 (format t "~&Detected cycle containing ~A" child)))))
		      (setf (topsort-color node) 'black)
		      (setf (topsort-time node) time)
		      (incf time)))
    (dolist (node list)
      (setf (topsort-color node) 'white))
    (dolist (node list)
      (when (eq (topsort-color node) 'white)
        (dfs-visit node)))
    (sort list #'< :key #'topsort-time)))
||#

;;; ********************************
;;; Output to User *****************
;;; ********************************
;;; All output to the user is via the tell-user functions.

(defun split-string (string &key (item #\space) (test #'char=))
  ;; Splits the string into substrings at spaces.
  (let ((len (length string))
	(index 0) result)
    (dotimes (i len
		(progn (unless (= index len)
			 (push (subseq string index) result))
		       (reverse result)))
      (when (funcall test (char string i) item)
	(unless (= index i);; two spaces in a row
	  (push (subseq string index i) result))
	(setf index (1+ i))))))

;; probably should remove the ",1" entirely. But AKCL 1.243 dies on it
;; because of an AKCL bug.
;; KGK suggests using an 8 instead, but 1 does nicely.
(defun prompt-string (component)
  (format nil "; ~:[~;TEST:~]~V,1@T "
	  *oos-test*
	  (component-indent component)))

#||
(defun format-justified-string (prompt contents)
  (format t (concatenate 'string
			 "~%"
			 prompt
			 "-~{~<~%" prompt " ~1,80:; ~A~>~^~}")
	  (split-string contents))
  (finish-output *standard-output*))
||#

(defun format-justified-string (prompt contents &optional (width 80)
				       (stream *standard-output*))
  (let ((prompt-length (+ 2 (length prompt))))
    (cond ((< (+ prompt-length (length contents)) width)
	   (format stream "~%~A- ~A" prompt contents))
	  (t
	   (format stream "~%~A-" prompt)
	   (do* ((cursor prompt-length)
		 (contents (split-string contents) (cdr contents))
		 (content (car contents) (car contents))
		 (content-length (1+ (length content)) (1+ (length content))))
	       ((null contents))
	     (cond ((< (+ cursor content-length) width)
		    (incf cursor content-length)
		    (format stream " ~A" content))
		   (t
		    (setf cursor (+ prompt-length content-length))
		    (format stream "~%~A  ~A" prompt content)))))))
  (finish-output stream))

(defun tell-user (what component &optional type no-dots force)
  (when (or *oos-verbose* force)
    (format-justified-string (prompt-string component)
     (format nil "~A ~(~A~) ~@[\"~A\"~] ~:[~;...~]"
	     ;; To have better messages, wrap the following around the
	     ;; case statement:
	     ;;(if (find (component-type component)
	     ;;    '(:defsystem :system :subsystem :module))
	     ;;  "Checking"
	     ;;  (case ...))
	     ;; This gets around the problem of DEFSYSTEM reporting
	     ;; that it's loading a module, when it eventually never
	     ;; loads any of the files of the module.
	     (case what
	       ((compile :compile)
		(if (component-load-only component)
		    ;; If it is :load-only t, we're loading.
		    "Loading"
		    ;; Otherwise we're compiling.
		    "Compiling"))
	       ((load :load) "Loading")
	       (otherwise what))
	     (component-type component)
	     (or (when type
		   (component-full-pathname component type))
		 (component-name component))
	     (and *tell-user-when-done*
		  (not no-dots))))))

(defun tell-user-done (component &optional force no-dots)
  ;; test is no longer really used, but we're leaving it in.
  (when (and *tell-user-when-done*
	     (or *oos-verbose* force))
    (format t "~&~A~:[~;...~] Done."
	    (prompt-string component) (not no-dots))
    (finish-output *standard-output*)))

(defmacro with-tell-user ((what component &optional type no-dots force) &body body)
  `(progn
     (tell-user ,what ,component ,type ,no-dots ,force)
     ,@body
     (tell-user-done ,component ,force ,no-dots)))

(defun tell-user-no-files (component &optional force)
  (when (or *oos-verbose* force)
    (format-justified-string (prompt-string component)
      (format nil "Source file ~A ~
             ~:[and binary file ~A ~;~]not found, not loading."
	      (component-full-pathname component :source)
	      (or *load-source-if-no-binary* *load-source-instead-of-binary*)
	      (component-full-pathname component :binary)))))

(defun tell-user-require-system (name parent)
  (when *oos-verbose*
    (format t "~&; ~:[~;TEST:~] - System ~A requires ~S"
	    *oos-test* (component-name parent) name)
    (finish-output *standard-output*)))

(defun tell-user-generic (string)
  (when *oos-verbose*
    (format t "~&; ~:[~;TEST:~] - ~A"
	    *oos-test* string)
    (finish-output *standard-output*)))

;;; ********************************
;;; Y-OR-N-P-WAIT ******************
;;; ********************************
;;; Y-OR-N-P-WAIT is like Y-OR-N-P, but will timeout after a specified
;;; number of seconds. I should really replace this with a call to
;;; the Y-OR-N-P-WAIT defined in the query.cl package and include that
;;; instead.

(defparameter *use-timeouts* t
  "If T, timeouts in Y-OR-N-P-WAIT are enabled. Otherwise it behaves
   like Y-OR-N-P. This is provided for users whose lisps don't handle
   read-char-no-hang properly.")

(defparameter *clear-input-before-query* t
  "If T, y-or-n-p-wait will clear the input before printing the prompt
   and asking the user for input.")

;;; The higher *sleep-amount* is, the less consing, but the lower the
;;; responsiveness.
(defparameter *sleep-amount* #-CMU 0.1 #+CMU 1.0
    "Amount of time to sleep between checking query-io. In multiprocessing
     Lisps, this allows other processes to continue while we busy-wait. If
     0, skips call to SLEEP.")

(defun internal-real-time-in-seconds ()
  (get-universal-time))

(defun read-char-wait (&optional (timeout 20) input-stream
                                 (eof-error-p t) eof-value
                                 &aux peek)
  (do ((start (internal-real-time-in-seconds)))
      ((or (setq peek (listen input-stream))
           (< (+ start timeout) (internal-real-time-in-seconds)))
       (when peek
         ;; was read-char-no-hang
         (read-char input-stream eof-error-p eof-value)))
    (unless (zerop *sleep-amount*)
      (sleep *sleep-amount*))))

;;; Lots of lisps, especially those that run on top of UNIX, do not get
;;; their input one character at a time, but a whole line at a time because
;;; of the buffering done by the UNIX system. This causes y-or-n-p-wait
;;; to not always work as expected.
;;;
;;; I wish lisp did all its own buffering (turning off UNIX input line
;;; buffering by putting the UNIX into CBREAK mode). Of course, this means
;;; that we lose input editing, but why can't the lisp implement this?

(defun y-or-n-p-wait (&optional (default #\y) (timeout 20)
				format-string &rest args)
  "Y-OR-N-P-WAIT prints the message, if any, and reads characters from
   *QUERY-IO* until the user enters y, Y or space as an affirmative, or either
   n or N as a negative answer, or the timeout occurs. It asks again if
   you enter any other characters."
  (when *clear-input-before-query* (clear-input *query-io*))
  (when format-string
    (fresh-line *query-io*)
    (apply #'format *query-io* format-string args)
    ;; FINISH-OUTPUT needed for CMU and other places which don't handle
    ;; output streams nicely. This prevents it from continuing and
    ;; reading the query until the prompt has been printed.
    (finish-output *query-io*))
  (loop
   (let* ((read-char (if *use-timeouts*
			 (read-char-wait timeout *query-io* nil nil)
			 (read-char *query-io*)))
	  (char (or read-char default)))
     ;; We need to ignore #\newline because otherwise the bugs in
     ;; clear-input will cause y-or-n-p-wait to print the "Type ..."
     ;; message every time... *sigh*
     ;; Anyway, we might want to use this to ignore whitespace once
     ;; clear-input is fixed.
     (unless (find char '(#\tab #\newline #\return))
       (when (null read-char)
	 (format *query-io* "~@[~A~]" default)
	 (finish-output *query-io*))
       (cond ((null char) (return t))
	     ((find char '(#\y #\Y #\space) :test #'char=) (return t))
	     ((find char '(#\n #\N) :test #'char=) (return nil))
	     (t
	      (when *clear-input-before-query* (clear-input *query-io*))
	      (format *query-io* "~&Type \"y\" for yes or \"n\" for no. ")
	      (when format-string
		(fresh-line *query-io*)
		(apply #'format *query-io* format-string args))
	      (finish-output *query-io*)))))))

#||
(y-or-n-p-wait #\y 20 "What? ")
(progn (format t "~&hi") (finish-output)
       (y-or-n-p-wait #\y 10 "1? ")
       (y-or-n-p-wait #\n 10 "2? "))
||#
;;; ********************************
;;; Operate on System **************
;;; ********************************
;;; Operate-on-system
;;; Operation is :compile, 'compile, :load or 'load
;;; Force is :all or :new-source or :new-source-and-dependents or a list of
;;; specific modules.
;;;    :all (or T) forces a recompilation of every file in the system
;;;    :new-source-and-dependents compiles only those files whose
;;;          sources have changed or who depend on recompiled files.
;;;    :new-source compiles only those files whose sources have changed
;;;    A list of modules means that only those modules and their
;;;    dependents are recompiled.
;;; Test is T to print out what it would do without actually doing it.
;;;      Note: it automatically sets verbose to T if test is T.
;;; Verbose is T to print out what it is doing (compiling, loading of
;;;      modules and files) as it does it.
;;; Dribble should be the pathname of the dribble file if you want to
;;; dribble the compilation.
;;; Load-source-instead-of-binary is T to load .lisp instead of binary files.
;;; Version may be nil to signify no subdirectory,
;;; a symbol, such as alpha, beta, omega, :alpha, mark, which
;;; specifies a subdirectory of the root, or
;;; a string, which replaces the root.

(defun operate-on-system (name operation
			       &key
			       force
			       (version *version*)
			       (test *oos-test*) (verbose *oos-verbose*)
                               (load-source-instead-of-binary
				*load-source-instead-of-binary*)
                               (load-source-if-no-binary
				*load-source-if-no-binary*)
			       (bother-user-if-no-binary
				*bother-user-if-no-binary*)
			       (compile-during-load *compile-during-load*)
			       dribble
			       (minimal-load *minimal-load*)
			       (override-compilation-unit t)
			       )
  (declare #-(or :cltl2 :ansi-cl) (ignore override-compilation-unit))
  (unwind-protect
      ;; Protect the undribble.
      (#+(or :cltl2 :ansi-cl) with-compilation-unit
	 #+(or :cltl2 :ansi-cl) (:override override-compilation-unit)
	 #-(or :cltl2 :ansi-cl) progn
	(when *reset-full-pathname-table* (clear-full-pathname-tables))
	(when dribble (dribble dribble))
	(when test (setq verbose t))
	(when (null force)		; defaults
	  (case operation
	    ((load :load) (setq force :all))
	    ((compile :compile) (setq force :new-source-and-dependents))
	    (t (setq force :all))))
	;; Some CL implementations have a variable called *compile-verbose*
	;; or *compile-file-verbose*.
	(multiple-value-bind (*version-dir* *version-replace*)
	    (translate-version version)
	  ;; CL implementations may uniformly default this to nil
	  (let ((*load-verbose* #-common-lisp-controller t
				#+common-lisp-controller nil) ; nil
		#-(or MCL CMU CLISP ECL :sbcl lispworks scl)
		(*compile-file-verbose* t) ; nil
		#+common-lisp-controller
		(*compile-print* nil)
		#+(and common-lisp-controller cmu)
		(ext:*compile-progress* nil)
		#+(and common-lisp-controller cmu)
		(ext:*require-verbose* nil)
		#+(and common-lisp-controller cmu)
		(ext:*gc-verbose* nil)

		(*compile-verbose* #-common-lisp-controller t
				   #+common-lisp-controller nil) ; nil
		(*version* version)
		(*oos-verbose* verbose)
		(*oos-test* test)
		(*load-source-if-no-binary* load-source-if-no-binary)
		(*compile-during-load* compile-during-load)
		(*bother-user-if-no-binary* bother-user-if-no-binary)
		(*load-source-instead-of-binary* load-source-instead-of-binary)
		(*minimal-load* minimal-load)
		(system (if (and (component-p name)
                                 (member (component-type name) '(:system :defsystem :subsystem)))
                            name
                            (find-system name :load))))
	    #-(or CMU CLISP :sbcl :lispworks :cormanlisp scl)
	    (declare (special *compile-verbose* #-MCL *compile-file-verbose*)
		     #-openmcl (ignore *compile-verbose*
				       #-MCL *compile-file-verbose*)
		     #-openmcl (optimize (inhibit-warnings 3)))
	    (unless (component-operation operation)
	      (error "Operation ~A undefined." operation))
	    (operate-on-component system operation force))))
    (when dribble (dribble))))


(defun compile-system (name &key force
			    (version *version*)
			    (test *oos-test*) (verbose *oos-verbose*)
			    (load-source-instead-of-binary
			     *load-source-instead-of-binary*)
			    (load-source-if-no-binary
			     *load-source-if-no-binary*)
			    (bother-user-if-no-binary
			     *bother-user-if-no-binary*)
			    (compile-during-load *compile-during-load*)
			    dribble
			    (minimal-load *minimal-load*))
  ;; For users who are confused by OOS.
  (operate-on-system
   name :compile
   :force force
   :version version
   :test test
   :verbose verbose
   :load-source-instead-of-binary load-source-instead-of-binary
   :load-source-if-no-binary load-source-if-no-binary
   :bother-user-if-no-binary bother-user-if-no-binary
   :compile-during-load compile-during-load
   :dribble dribble
   :minimal-load minimal-load))

(defun load-system (name &key force
			 (version *version*)
			 (test *oos-test*) (verbose *oos-verbose*)
			 (load-source-instead-of-binary
			  *load-source-instead-of-binary*)
			 (load-source-if-no-binary *load-source-if-no-binary*)
			 (bother-user-if-no-binary *bother-user-if-no-binary*)
			 (compile-during-load *compile-during-load*)
			 dribble
			 (minimal-load *minimal-load*))
  ;; For users who are confused by OOS.
  (operate-on-system
   name :load
   :force force
   :version version
   :test test
   :verbose verbose
   :load-source-instead-of-binary load-source-instead-of-binary
   :load-source-if-no-binary load-source-if-no-binary
   :bother-user-if-no-binary bother-user-if-no-binary
   :compile-during-load compile-during-load
   :dribble dribble
   :minimal-load minimal-load))

(defun clean-system (name &key (force :all)
			 (version *version*)
			 (test *oos-test*) (verbose *oos-verbose*)
			 dribble)
  "Deletes all the binaries in the system."
  ;; For users who are confused by OOS.
  (operate-on-system
   name :delete-binaries
   :force force
   :version version
   :test test
   :verbose verbose
   :dribble dribble))

(defun edit-system
    (name &key force
	       (version *version*)
	       (test *oos-test*)
	       (verbose *oos-verbose*)
	       dribble)

  (operate-on-system
   name :edit
   :force force
   :version version
   :test test
   :verbose verbose
   :dribble dribble))

(defun hardcopy-system
    (name &key force
	       (version *version*)
	       (test *oos-test*)
	       (verbose *oos-verbose*)
	       dribble)

  (operate-on-system
   name :hardcopy
   :force force
   :version version
   :test test
   :verbose verbose
   :dribble dribble))

(defun operate-on-component (component operation force &aux changed)
  ;; Returns T if something changed and had to be compiled.
  (let ((type (component-type component))
	(old-package (package-name *package*)))

    (unwind-protect
	;; Protect old-package.
	(progn
	  ;; Use the correct package.
	  (when (component-package component)
	    (tell-user-generic (format nil "Using package ~A"
				       (component-package component)))
	    (unless *oos-test*
	      (unless (find-package (component-package component))
		;; If the package name is the same as the name of the system,
		;; and the package is not defined, this would lead to an
		;; infinite loop, so bomb out with an error.
		(when (string-equal (string (component-package component))
				    (component-name component))
		  (format t "~%Component ~A not loaded:~%"
			  (component-name component))
		  (error  "  Package ~A is not defined"
			  (component-package component)))
		;; If package not found, try using REQUIRE to load it.
		(new-require (component-package component)))
	      ;; This was USE-PACKAGE, but should be IN-PACKAGE.
	      ;; Actually, CLtL2 lisps define in-package as a macro,
	      ;; so we'll set the package manually.
	      ;; (in-package (component-package component))
	      (let ((package (find-package (component-package component))))
		(when package
		  (setf *package* package)))))
	  #+mk-original
	  (when (eq type :defsystem)	; maybe :system too?
	    (operate-on-system-dependencies component operation force))
	  (when (or (eq type :defsystem) (eq type :system))
	    (operate-on-system-dependencies component operation force))

	  ;; Do any compiler proclamations
	  (when (component-proclamations component)
	    (tell-user-generic (format nil "Doing proclamations for ~A"
				       (component-name component)))
	    (or *oos-test*
		(proclaim (component-proclamations component))))

	  ;; Do any initial actions
	  (when (component-initially-do component)
	    (tell-user-generic (format nil "Doing initializations for ~A"
				       (component-name component)))
	    (or *oos-test*
		(eval (component-initially-do component))))

	  ;; If operation is :compile and load-only is T, this would change
	  ;; the operation to load. Only, this would mean that a module would
	  ;; be considered to have changed if it was :load-only and had to be
	  ;; loaded, and then dependents would be recompiled -- this doesn't
	  ;; seem right. So instead, we propagate the :load-only attribute
	  ;; to the components, and modify compile-file-operation so that
	  ;; it won't compile the files (and modify tell-user to say "Loading"
	  ;; instead of "Compiling" for load-only modules).
	  #||
	  (when (and (find operation '(:compile compile))
		     (component-load-only component))
	    (setf operation :load))
	  ||#

	  ;; Do operation and set changed flag if necessary.
	  (setq changed
		(case type
		  ((:file :private-file)
		   (funcall (component-operation operation) component force))
		  ((:module :system :subsystem :defsystem)
		   (operate-on-components component operation force changed))))

	  ;; Do any final actions
	  (when (component-finally-do component)
	    (tell-user-generic (format nil "Doing finalizations for ~A"
				       (component-name component)))
	    (or *oos-test*
		(eval (component-finally-do component))))

	  ;; add the banner if needed
	  #+(or cmu scl)
	  (when (component-banner component)
	    (unless (stringp (component-banner component))
	      (error "The banner should be a string, it is: ~S"
	             (component-banner component)))
	    (setf (getf ext:*herald-items*
			(intern (string-upcase  (component-name component))
				(find-package :keyword)))
		  (list
		     (component-banner component)))))

      ;; Reset the package. (Cleanup form of unwind-protect.)
      ;;(in-package old-package)
      (setf *package* (find-package old-package)))

    ;; Provide the loaded system
    (when (or (eq type :defsystem) (eq type :system) (eq type :subsystem))
      (tell-user-generic (format nil "Providing system ~A~%"
				 (component-name component)))
      (or *oos-test*
	  (provide (canonicalize-system-name (component-name component))))))

  ;; Return non-NIL if something changed in this component and hence had
  ;; to be recompiled. This is only used as a boolean.
  changed)

(defvar *force* nil)
(defvar *providing-blocks-load-propagation* t
  "If T, if a system dependency exists on *modules*, it is not loaded.")

(defun operate-on-system-dependencies (component operation &optional force)
  (when *system-dependencies-delayed*
    (let ((*force* force))
      (dolist (system (component-depends-on component))
	;; For each system that this system depends on, if it is a
	;; defined system (either via defsystem or component type :system),
	;; and propagation is turned on, propagates the operation to the
	;; subsystem. Otherwise runs require (my version) on that system
	;; to load it (needed since we may be depending on a lisp
	;; dependent package).
	;; Explores the system tree in a DFS manner.
	(cond ((and *operations-propagate-to-subsystems*
		    (not (listp system))
		    ;; The subsystem is a defined system.
		    (find-system system :load-or-nil))
	       ;; Call OOS on it. Since *system-dependencies-delayed* is
	       ;; T, the :depends-on slot is filled with the names of
	       ;; systems, not defstructs.
	       ;; Aside from system, operation, force, for everything else
	       ;; we rely on the globals.
	       (unless (and *providing-blocks-load-propagation*
			    ;; If *providing-blocks-load-propagation* is T,
			    ;; the system dependency must not exist in the
			    ;; *modules* for it to be loaded. Note that
			    ;; the dependencies are implicitly systems.
			    (find operation '(load :load))
			    ;; (or (eq force :all) (eq force t))
			    (find (canonicalize-system-name system)
				  *modules* :test #'string-equal))
                 
		 (operate-on-system system operation :force force)))

	      ((listp system)
               ;; If the SYSTEM is a list then its contents are as follows.
               ;;
               ;;    (<name> <definition-pathname> <action> <version>)
               ;;
	       (tell-user-require-system
		(cond ((and (null (first system)) (null (second system)))
		       (third system))
		      (t system))
		component)
	       (or *oos-test* (new-require (first system)
                                           nil
					   (eval (second system))
					   (third system)
					   (or (fourth system)
					       *version*))))
	      (t
	       (tell-user-require-system system component)
	       (or *oos-test* (new-require system))))))))

;;; Modules can depend only on siblings. If a module should depend
;;; on an uncle, then the parent module should depend on that uncle
;;; instead. Likewise a module should depend on a sibling, not a niece
;;; or nephew. Modules also cannot depend on cousins. Modules cannot
;;; depend on parents, since that is circular.

(defun module-depends-on-changed (module changed)
  (dolist (dependent (component-depends-on module))
    (when (member dependent changed)
      (return t))))

(defun operate-on-components (component operation force changed)
  (with-tell-user (operation component)
    (if (component-components component)
	(dolist (module (component-components component))
	  (when (operate-on-component module operation
		  (cond ((and (module-depends-on-changed module changed)
			      #||(some #'(lambda (dependent)
					(member dependent changed))
				    (component-depends-on module))||#
			      (or (non-empty-listp force)
				  (eq force :new-source-and-dependents)))
			 ;; The component depends on a changed file
			 ;; and force agrees.
			 (if (eq force :new-source-and-dependents)
			     :new-source-all
			   :all))
			((and (non-empty-listp force)
			      (member (component-name module) force
				      :test #'string-equal :key #'string))
			 ;; Force is a list of modules
			 ;; and the component is one of them.
			 :all)
			(t force)))
	    (push module changed)))
	(case operation
	  ((compile :compile)
	   (eval (component-compile-form component)))
	  ((load :load)
	   (eval (component-load-form component))))))
  ;; This is only used as a boolean.
  changed)

;;; ********************************
;;; New Require ********************
;;; ********************************

;;; This needs cleaning.  Obviously the code is a left over from the
;;; time people did not know how to use packages in a proper way or
;;; CLs were shaky in their implementation.

;;; First of all we need this. (Commented out for the time being)
;;; (shadow '(cl:require))


(defvar *old-require* nil)

;;; All calls to require in this file have been replaced with calls
;;; to new-require to avoid compiler warnings and make this less of
;;; a tangled mess.

(defun new-require (module-name
		    &optional
		    pathname
		    definition-pname
		    default-action
		    (version *version*))
  ;; If the pathname is present, this behaves like the old require.
  (unless (and module-name
	       (find (string module-name)
		     *modules* :test #'string=))
    (handler-case
        (cond (pathname
	       (funcall *old-require* module-name pathname))
	      ;; If the system is defined, load it.
	      ((find-system module-name :load-or-nil definition-pname)
	       (operate-on-system
	        module-name :load
	        :force *force*
	        :version version
	        :test *oos-test*
	        :verbose *oos-verbose*
	        :load-source-if-no-binary *load-source-if-no-binary*
	        :bother-user-if-no-binary *bother-user-if-no-binary*
	        :compile-during-load *compile-during-load*
	        :load-source-instead-of-binary *load-source-instead-of-binary*
	        :minimal-load *minimal-load*))
	      ;; If there's a default action, do it. This could be a progn which
	      ;; loads a file that does everything.
	      ((and default-action
		    (eval default-action)))
	      ;; If no system definition file, try regular require.
	      ;; had last arg  PATHNAME, but this wasn't really necessary.
	      ((funcall *old-require* module-name))
	      ;; If no default action, print a warning or error message.
	      (t
	       #||
	       (format t "~&Warning: System ~A doesn't seem to be defined..."
	               module-name)
	       ||#
	       (error 'missing-system :name module-name)))
      (missing-module (mmc) (signal mmc)) ; Resignal.
      (error (e)
             (declare (ignore e))
	     ;; Signal a (maybe wrong) MISSING-SYSTEM.
	     (error 'missing-system :name module-name)))
    ))


;;; Note that in some lisps, when the compiler sees a REQUIRE form at
;;; top level it immediately executes it. This is as if an
;;; (eval-when (compile load eval) ...) were wrapped around the REQUIRE
;;; form. I don't see any easy way to do this without making REQUIRE
;;; a macro.
;;;
;;; For example, in VAXLisp, if a (require 'streams) form is at the top of
;;; a file in the system, compiling the system doesn't wind up loading the
;;; streams module. If the (require 'streams) form is included within an
;;; (eval-when (compile load eval) ...) then everything is OK.
;;;
;;; So perhaps we should replace the redefinition of lisp:require
;;; with the following macro definition:
#||
(unless *old-require*
  (setf *old-require*
	(symbol-function #-(or :lispworks
			       :sbcl
			       (and :excl :allegro-v4.0)) 'lisp:require
			 #+:sbcl 'cl:require
			 #+:lispworks 'system:::require
			 #+(and :excl :allegro-v4.0) 'cltl1:require))

  (let (#+(or :CCL :openmcl) (ccl:*warn-if-redefine-kernel* nil))
    ;; Note that lots of lisps barf if we redefine a function from
    ;; the LISP package. So what we do is define a macro with an
    ;; unused name, and use (setf macro-function) to redefine
    ;; lisp:require without compiler warnings. If the lisp doesn't
    ;; do the right thing, try just replacing require-as-macro
    ;; with lisp:require.
    (defmacro require-as-macro (module-name
				&optional pathname definition-pname
				default-action (version '*version*))
      `(eval-when (compile load eval)
	 (new-require ,module-name ,pathname ,definition-pname
		      ,default-action ,version)))
    (setf (macro-function #-(and :excl :sbcl :allegro-v4.0) 'lisp:require
			  #+:sbcl 'cl:require
			  #+(and :excl :allegro-v4.0) 'cltl1:require)
	  (macro-function 'require-as-macro))))
||#
;;; This will almost certainly fix the problem, but will cause problems
;;; if anybody does a funcall on #'require.

;;; Redefine old require to call the new require.
(eval-when #-(or :lucid) (:load-toplevel :execute)
	   #+(or :lucid) (load eval)
(unless *old-require*
  (setf *old-require*
	(symbol-function
	 #-(or (and :excl :allegro-v4.0) :mcl :openmcl :sbcl :lispworks) 'lisp:require
	 #+(and :excl :allegro-v4.0) 'cltl1:require
	 #+:sbcl 'cl:require
	 #+:lispworks3.1 'common-lisp::require
	 #+(and :lispworks (not :lispworks3.1)) 'system::require
	 #+:openmcl 'cl:require
	 #+(and :mcl (not :openmcl)) 'ccl:require
	 ))

  (unless *dont-redefine-require*
    (let (#+(or :mcl :openmcl (and :CCL (not :lispworks)))
	  (ccl:*warn-if-redefine-kernel* nil))
      #-(or (and allegro-version>= (version>= 4 1)) :lispworks)
      (setf (symbol-function
	     #-(or (and :excl :allegro-v4.0) :mcl :openmcl :sbcl :lispworks) 'lisp:require
	     #+(and :excl :allegro-v4.0) 'cltl1:require
	     #+:lispworks3.1 'common-lisp::require
	     #+:sbcl 'cl:require
	     #+(and :lispworks (not :lispworks3.1)) 'system::require
	     #+:openmcl 'cl:require
	     #+(and :mcl (not :openmcl)) 'ccl:require
	     )
	    (symbol-function 'new-require))
      #+:lispworks
      (let ((warn-packs system::*packages-for-warn-on-redefinition*))
	(declare (special system::*packages-for-warn-on-redefinition*))
	(setq system::*packages-for-warn-on-redefinition* nil)
	(setf (symbol-function
	       #+:lispworks3.1 'common-lisp::require
	       #-:lispworks3.1 'system::require
	       )
	      (symbol-function 'new-require))
	(setq system::*packages-for-warn-on-redefinition* warn-packs))
      #+(and allegro-version>= (version>= 4 1))
      (excl:without-package-locks
       (setf (symbol-function 'lisp:require)
	 (symbol-function 'new-require))))))
)

;;; ********************************
;;; Language-Dependent Characteristics
;;; ********************************
;;; This section is used for defining language-specific behavior of
;;; defsystem. If the user changes a language definition, it should
;;; take effect immediately -- they shouldn't have to reload the
;;; system definition file for the changes to take effect.

(defvar *language-table* (make-hash-table :test #'equal)
  "Hash table that maps from languages to language structures.")
(defun find-language (name)
  (gethash name *language-table*))

(defstruct (language (:print-function print-language))
  name			; The name of the language (a keyword)
  compiler		; The function used to compile files in the language
  loader		; The function used to load files in the language
  source-extension	; Filename extensions for source files
  binary-extension	; Filename extensions for binary files
)

(defun print-language (language stream depth)
  (declare (ignore depth))
  (format stream "#<~:@(~A~): ~A ~A>"
          (language-name language)
          (language-source-extension language)
	  (language-binary-extension language)))

(defun compile-function (component)
  (or (component-compiler component)
      (let ((language (find-language (or (component-language component)
					 :lisp))))
	(when language (language-compiler language)))
      #'compile-file))

(defun load-function (component)
  (or (component-loader component)
      (let ((language (find-language (or (component-language component)
					 :lisp))))
	(when language (language-loader language)))
      #'load))

(defun default-source-extension (component)
  (let ((language (find-language (or (component-language component)
				     :lisp))))
    (or (when language (language-source-extension language))
	(car *filename-extensions*))))

(defun default-binary-extension (component)
  (let ((language (find-language (or (component-language component)
				     :lisp))))
    (or (when language (language-binary-extension language))
	(cdr *filename-extensions*))))

(defmacro define-language (name &key compiler loader
				source-extension binary-extension)
  (let ((language (gensym "LANGUAGE")))
    `(let ((,language (make-language :name ,name
				     :compiler ,compiler
				     :loader ,loader
				     :source-extension ,source-extension
				     :binary-extension ,binary-extension)))
       (setf (gethash ,name *language-table*) ,language)
       ,name)))

#||
;;; Test System for verifying multi-language capabilities.
(defsystem foo
  :language :lisp
  :components ((:module c :language :c :components ("foo" "bar"))
	       (:module lisp :components ("baz" "barf"))))

||#

;;; *** Lisp Language Definition
(define-language :lisp
  :compiler #'compile-file
  :loader #'load
  :source-extension (car *filename-extensions*)
  :binary-extension (cdr *filename-extensions*))

;;; *** PseudoScheme Language Definition
(defun scheme-compile-file (filename &rest args)
  (let ((scheme-package (find-package '#:scheme)))
    (apply (symbol-function (find-symbol (symbol-name 'compile-file)
					 scheme-package))
	   filename
	   (funcall (symbol-function
		     (find-symbol (symbol-name '#:interaction-environment)
				  scheme-package)))
	   args)))

(define-language :scheme
  :compiler #'scheme-compile-file
  :loader #'load
  :source-extension "scm"
  :binary-extension "bin")

;;; *** C Language Definition

;;; This is very basic. Somebody else who needs it can add in support
;;; for header files, libraries, different C compilers, etc. For example,
;;; we might add a COMPILER-OPTIONS slot to the component defstruct.

(defparameter *c-compiler* "gcc")
#-(or symbolics (and :lispworks :harlequin-pc-lisp ))

(defun run-unix-program (program arguments)
  ;; arguments should be a list of strings, where each element is a
  ;; command-line option to send to the program.
  #+:lucid (run-program program :arguments arguments)
  #+:allegro (excl:run-shell-command
	      (format nil "~A~@[ ~{~A~^ ~}~]"
		      program arguments))
  #+(or :kcl :ecl) (system (format nil "~A~@[ ~{~A~^ ~}~]" program arguments))
  #+(or :cmu :scl) (extensions:run-program program arguments)
  #+:openmcl (ccl:run-program program arguments)
  #+:sbcl (sb-ext:run-program program arguments)
  #+:lispworks (foreign:call-system-showing-output
		(format nil "~A~@[ ~{~A~^ ~}~]" program arguments))
  #+clisp (#+lisp=cl ext:run-program #-lisp=cl lisp:run-program
                     program :arguments arguments)
  )

#+(or symbolics (and :lispworks :harlequin-pc-lisp))
(defun run-unix-program (program arguments)
  (declare (ignore program arguments))
  (error "MK::RUN-UNIX-PROGRAM: this does not seem to be a UN*X system.")
  )

#||
(defun c-compile-file (filename &rest args &key output-file error-file)
  ;; gcc -c foo.c -o foo.o
  (declare (ignore args))
  (run-unix-program *c-compiler*
		    (format nil "-c ~A~@[ -o ~A~]"
			    filename
			    output-file)))
||#

#||
(defun c-compile-file (filename &rest args &key output-file error-file)
  ;; gcc -c foo.c -o foo.o
  (declare (ignore args error-file))
  (run-unix-program *c-compiler*
		    `("-c" ,filename ,@(if output-file `("-o" ,output-file)))))
||#


;;; The following code was inserted to improve C compiler support (at
;;; least under Linux/GCC).
;;; Thanks to Espen S Johnsen.
;;;
;;; 20001118 Marco Antoniotti.

(defun default-output-pathname (path1 path2 type)
  (if (eq path1 t)
      (translate-logical-pathname
       (merge-pathnames (make-pathname :type type) (pathname path2)))
      (translate-logical-pathname (pathname path1))))


(defun run-compiler (program
		     arguments
		     output-file
		     error-file
		     error-output
		     verbose)
  #-(or cmu scl) (declare (ignore error-file error-output))

  (flet ((make-useable-stream (&rest streams)
	   (apply #'make-broadcast-stream (delete nil streams)))
	 )
    (let (#+(or cmu scl) (error-file error-file)
	  #+(or cmu scl) (error-file-stream nil)
	  (verbose-stream nil)
	  (old-timestamp (file-write-date output-file))
	  (fatal-error nil)
	  (output-file-written nil)
	  )
      (unwind-protect
	   (progn
	     #+(or cmu scl)
	     (setf error-file
		   (when error-file
		     (default-output-pathname error-file
			                      output-file
                     		              *compile-error-file-type*))

		   error-file-stream
		   (and error-file
			(open error-file
			      :direction :output
			      :if-exists :supersede)))

	     (setf verbose-stream
		   (make-useable-stream
		    #+cmu error-file-stream
		    (and verbose *trace-output*)))

	     (format verbose-stream "Running ~A~@[ ~{~A~^ ~}~]~%"
		     program
		     arguments)

	     (setf fatal-error
		   #-(or cmu scl)
		   (and (run-unix-program program arguments) nil) ; Incomplete.
		   #+(or cmu scl)
		   (let* ((error-output
			   (make-useable-stream error-file-stream
						(if (eq error-output t)
						    *error-output*
						  error-output)))
			  (process
			   (ext:run-program program arguments
					    :error error-output)))
		     (not (zerop (ext:process-exit-code process)))))

	     (setf output-file-written
		   (and (probe-file output-file)
			(not (eql old-timestamp
				  (file-write-date output-file)))))


	     (when output-file-written
	       (format verbose-stream "~A written~%" output-file))
	     (format verbose-stream "Running of ~A finished~%"
		     program)
	     (values (and output-file-written output-file)
		     fatal-error
		     fatal-error))

	#+(or cmu scl)
	(when error-file
	  (close error-file-stream)
	  (unless (or fatal-error (not output-file-written))
	    (delete-file error-file)))

	(values (and output-file-written output-file)
		fatal-error
		fatal-error)))))


(defun c-compile-file (filename &rest args
				&key
				(output-file t)
				(error-file t)
				(error-output t)
				(verbose *compile-verbose*)
				debug
				link
				optimize
				cflags
				definitions
				include-paths
				library-paths
				libraries
				(error t))
  (declare (ignore args))

  (flet ((map-options (flag options &optional (func #'identity))
	   (mapcar #'(lambda (option)
		       (format nil "~A~A" flag (funcall func option)))
		   options))
	 )
    (let* ((output-file (default-output-pathname output-file filename "o"))
	   (arguments
	    `(,@(when (not link) '("-c"))
	      ,@(when debug '("-g"))
	      ,@(when optimize (list (format nil "-O~D" optimize)))
	      ,@cflags
	      ,@(map-options
		 "-D" definitions
		 #'(lambda (definition)
		     (if (atom definition)
			 definition
		       (apply #'format nil "~A=~A" definition))))
	      ,@(map-options "-I" include-paths #'truename)
	      ,(namestring (truename filename))
	      "-o"
	      ,(namestring (translate-logical-pathname output-file))
	      ,@(map-options "-L" library-paths #'truename)
	      ,@(map-options "-l" libraries))))

      (multiple-value-bind (output-file warnings fatal-errors)
	  (run-compiler *c-compiler*
			arguments
			output-file
			error-file
			error-output
			verbose)
	(if (and error (or (not output-file) fatal-errors))
	    (error "Compilation failed")
	    (values output-file warnings fatal-errors))))))


(define-language :c
  :compiler #'c-compile-file
  :loader #+:lucid #'load-foreign-files
          #+:allegro #'load
          #+(or :cmu :scl) #'alien:load-foreign
          #+:sbcl #'sb-alien:load-foreign
	  #+(and :lispworks :unix (not :linux)) #'link-load:read-foreign-modules
	  #+(and :lispworks (or (not :unix) :linux)) #'fli:register-module
          #+(or :ecl :gcl :kcl) #'load ; should be enough.
          #-(or :lucid
		:allegro
		:cmu
		:sbcl
		:scl
		:lispworks
		:ecl :gcl :kcl)
	  (lambda (&rest args)
	    (declare (ignore args))
	    (cerror "Continue returning NIL."
		    "Loader not defined for C foreign libraries in ~A ~A."
		    (lisp-implementation-type)
		    (lisp-implementation-version)))
  :source-extension "c"
  :binary-extension "o")

#||
;;; FDMM's changes, which we've replaced.
(defvar *compile-file-function* #'cl-compile-file)

#+(or :clos :pcl)
(defmethod set-language ((lang (eql :common-lisp)))
  (setq *compile-file-function* #'cl-compile-file))

#+(or :clos :pcl)
(defmethod set-language ((lang (eql :scheme)))
  (setq *compile-file-function #'scheme-compile-file))
||#

;;; ********************************
;;; Component Operations ***********
;;; ********************************
;;; Define :compile/compile and :load/load operations
(eval-when (load eval)
(component-operation :compile  'compile-and-load-operation)
(component-operation 'compile  'compile-and-load-operation)
(component-operation :load     'load-file-operation)
(component-operation 'load     'load-file-operation)
)

(defun compile-and-load-operation (component force)
  ;; FORCE was CHANGED. this caused defsystem during compilation to only
  ;; load files that it immediately compiled.
  (let ((changed (compile-file-operation component force)))
    ;; Return T if the file had to be recompiled and reloaded.
    (if (and changed (component-compile-only component))
	;; For files which are :compile-only T, compiling the file
	;; satisfies the need to load.
	changed
	;; If the file wasn't compiled, or :compile-only is nil,
	;; check to see if it needs to be loaded.
	(and (load-file-operation component force) ; FORCE was CHANGED ???
	     changed))))

(defun unmunge-lucid (namestring)
  ;; Lucid's implementation of COMPILE-FILE is non-standard, in that
  ;; when the :output-file is a relative pathname, it tries to munge
  ;; it with the directory of the source file. For example,
  ;; (compile-file "src/globals.lisp" :output-file "bin/globals.sbin")
  ;; tries to stick the file in "./src/bin/globals.sbin" instead of
  ;; "./bin/globals.sbin" like any normal lisp. This hack seems to fix the
  ;; problem. I wouldn't have expected this problem to occur with any
  ;; use of defsystem, but some defsystem users are depending on
  ;; using relative pathnames (at least three folks reported the problem).
  (cond ((null-string namestring) namestring)
	((char= (char namestring 0) #\/)
	 ;; It's an absolute namestring
	 namestring)
	(t
	 ;; Ugly, but seems to fix the problem.
	 (concatenate 'string "./" namestring))))

(defun compile-file-operation (component force)
  ;; Returns T if the file had to be compiled.
  (let ((must-compile
	 ;; For files which are :load-only T, loading the file
	 ;; satisfies the demand to recompile.
	 (and (null (component-load-only component)) ; not load-only
	      (or (find force '(:all :new-source-all t) :test #'eq)
		  (and (find force '(:new-source :new-source-and-dependents)
			     :test #'eq)
		       (needs-compilation component)))))
	(source-pname (component-full-pathname component :source)))

    (cond ((and must-compile (probe-file source-pname))
	   (with-tell-user ("Compiling source" component :source)
	     (let ((output-file
		    #+:lucid
		     (unmunge-lucid (component-full-pathname component
							     :binary))
		     #-:lucid
		     (component-full-pathname component :binary)))

	       ;; make certain the directory we need to write to
	       ;; exists [pvaneynd@debian.org 20001114]
	       ;; Added PATHNAME-HOST following suggestion by John
	       ;; DeSoi [marcoxa@sourceforge.net 20020529]

	       (ensure-directories-exist
		(make-pathname
		 :host (pathname-host output-file)
		 :directory (pathname-directory output-file)))

	       (or *oos-test*
		   (apply (compile-function component)
			  source-pname
			  :output-file
			  output-file
			  #+(or :cmu :scl) :error-file
			  #+(or :cmu :scl) (and *cmu-errors-to-file*
						(component-full-pathname component
									 :error))
			  #+CMU
			  :error-output
			  #+CMU
			  *cmu-errors-to-terminal*
			  (component-compiler-options component)
			  ))))
	   must-compile)
	  (must-compile
	   (tell-user "Source file not found. Not compiling"
		      component :source :no-dots :force)
	   nil)
	  (t nil))))

(defun needs-compilation (component)
  ;; If there is no binary, or it is older than the source
  ;; file, then the component needs to be compiled.
  ;; Otherwise we only need to recompile if it depends on a file that changed.
  (let ((source-pname (component-full-pathname component :source))
	(binary-pname (component-full-pathname component :binary)))
    (and
     ;; source must exist
     (probe-file source-pname)
     (or
      ;; no binary
      (null (probe-file binary-pname))
      ;; old binary
      (< (file-write-date binary-pname)
	 (file-write-date source-pname))))))

(defun needs-loading (component &optional (check-source t) (check-binary t))
  ;; Compares the component's load-time against the file-write-date of
  ;; the files on disk.
  (let ((load-time (component-load-time component))
	(source-pname (component-full-pathname component :source))
	(binary-pname (component-full-pathname component :binary)))
    (or
     #|| ISI Extension ||#
     (component-load-always component)

     ;; File never loaded.
     (null load-time)
     ;; Binary is newer.
     (when (and check-binary
		(probe-file binary-pname))
       (< load-time
	  (file-write-date binary-pname)))
     ;; Source is newer.
     (when (and check-source
		(probe-file source-pname))
       (< load-time
	  (file-write-date source-pname))))))

;;; Need to completely rework this function...
(defun load-file-operation (component force)
  ;; Returns T if the file had to be loaded
  (let* ((binary-pname (component-full-pathname component :binary))
	 (source-pname (component-full-pathname component :source))
	 (binary-exists (probe-file binary-pname))
	 (source-exists (probe-file source-pname))
	 (source-needs-loading (needs-loading component t nil))
	 (binary-needs-loading (needs-loading component nil t))
	 ;; needs-compilation has an implicit source-exists in it.
	 (needs-compilation (if (component-load-only component)
				source-needs-loading
				(needs-compilation component)))
	 (check-for-new-source
	  ;; If force is :new-source*, we're checking for files
	  ;; whose source is newer than the compiled versions.
	  (find force '(:new-source :new-source-and-dependents :new-source-all)
		:test #'eq))
	 (load-binary (or (find force '(:all :new-source-all t) :test #'eq)
			  binary-needs-loading))
	 (load-source
	  (or *load-source-instead-of-binary*
	      (and load-binary (component-load-only component))
	      (and check-for-new-source needs-compilation)))
	 (compile-and-load
	  (and needs-compilation (or load-binary check-for-new-source)
	       (compile-and-load-source-if-no-binary component))))
    ;; When we're trying to minimize the files loaded to only those
    ;; that need be, restrict the values of load-source and load-binary
    ;; so that we only load the component if the files are newer than
    ;; the load-time.
    (when *minimal-load*
      (when load-source (setf load-source source-needs-loading))
      (when load-binary (setf load-binary binary-needs-loading)))

    (when (or load-source load-binary compile-and-load)
      (cond (compile-and-load
	     ;; If we're loading the binary and it is old or nonexistent,
	     ;; and the user says yes, compile and load the source.
	     (compile-file-operation component t)
	     (with-tell-user ("Loading binary"   component :binary)
	       (or *oos-test*
		   (progn
		     (funcall (load-function component) binary-pname)
		     (setf (component-load-time component)
			   (file-write-date binary-pname)))))
	     t)
	    ((and source-exists
		  (or (and load-source	; implicit needs-comp...
			   (or *load-source-instead-of-binary*
			       (component-load-only component)
			       (not *compile-during-load*)))
		      (and load-binary (not binary-exists)
			   (load-source-if-no-binary component))))
	     ;; Load the source if the source exists and:
	     ;;   o  we're loading binary and it doesn't exist
	     ;;   o  we're forcing it
	     ;;   o  we're loading new source and user wasn't asked to compile
	     (with-tell-user ("Loading source" component :source)
	       (or *oos-test*
		   (progn
		     (funcall (load-function component) source-pname)
		     (setf (component-load-time component)
			   (file-write-date source-pname)))))
	     t)
	    ((and binary-exists load-binary)
	     (with-tell-user ("Loading binary"   component :binary)
	       (or *oos-test*
		   (progn
		     (funcall (load-function component) binary-pname)
		     (setf (component-load-time component)
			   (file-write-date binary-pname)))))
	     t)
	    ((and (not binary-exists) (not source-exists))
	     (tell-user-no-files component :force)
	     (when *files-missing-is-an-error*
	       (cerror "Continue, ignoring missing files."
		       "~&Source file ~S ~:[and binary file ~S ~;~]do not exist."
		       source-pname
		       (or *load-source-if-no-binary*
			   *load-source-instead-of-binary*)
		       binary-pname))
	     nil)
	    (t
	     nil)))))

(eval-when (load eval)
(component-operation :clean    'delete-binaries-operation)
(component-operation 'clean    'delete-binaries-operation)
(component-operation :delete-binaries     'delete-binaries-operation)
(component-operation 'delete-binaries     'delete-binaries-operation)
)
(defun delete-binaries-operation (component force)
  (when (or (eq force :all)
	    (eq force t)
	    (and (find force '(:new-source :new-source-and-dependents
					   :new-source-all)
		       :test #'eq)
		 (needs-compilation component)))
    (let ((binary-pname (component-full-pathname component :binary)))
      (when (probe-file binary-pname)
	(with-tell-user ("Deleting binary"   component :binary)
			(or *oos-test*
			    (delete-file binary-pname)))))))


;; when the operation = :compile, we can assume the binary exists in test mode.
;;	((and *oos-test*
;;	      (eq operation :compile)
;;	      (probe-file (component-full-pathname component :source)))
;;	 (with-tell-user ("Loading binary"   component :binary)))

(defun binary-exists (component)
  (probe-file (component-full-pathname component :binary)))

;;; or old-binary
(defun compile-and-load-source-if-no-binary (component)
  (when (not (or *load-source-instead-of-binary*
		 (and *load-source-if-no-binary*
		      (not (binary-exists component)))))
    (cond ((component-load-only component)
	   #||
	   (let ((prompt (prompt-string component)))
	     (format t "~A- File ~A is load-only, ~
                        ~&~A  not compiling."
		     prompt
		     (component-full-pathname component :source)
		     prompt))
	   ||#
	   nil)
	  ((eq *compile-during-load* :query)
	   (let* ((prompt (prompt-string component))
		  (compile-source
		   (y-or-n-p-wait
		    #\y 30
		    "~A- Binary file ~A is old or does not exist. ~
                     ~&~A  Compile (and load) source file ~A instead? "
		    prompt
		    (component-full-pathname component :binary)
		    prompt
		    (component-full-pathname component :source))))
	     (unless (y-or-n-p-wait
		      #\y 30
		      "~A- Should I bother you if this happens again? "
		      prompt)
	       (setq *compile-during-load*
		     (y-or-n-p-wait
		      #\y 30
		      "~A- Should I compile and load or not? "
		      prompt)))		; was compile-source, then t
	     compile-source))
	  (*compile-during-load*)
	  (t nil))))

(defun load-source-if-no-binary (component)
  (and (not *load-source-instead-of-binary*)
       (or (and *load-source-if-no-binary*
		(not (binary-exists component)))
	   (component-load-only component)
	   (when *bother-user-if-no-binary*
	     (let* ((prompt (prompt-string component))
		    (load-source
		     (y-or-n-p-wait #\y 30
		      "~A- Binary file ~A does not exist. ~
                       ~&~A  Load source file ~A instead? "
		      prompt
		      (component-full-pathname component :binary)
		      prompt
		      (component-full-pathname component :source))))
	       (setq *bother-user-if-no-binary*
		     (y-or-n-p-wait #\n 30
		      "~A- Should I bother you if this happens again? "
		      prompt ))
	       (unless *bother-user-if-no-binary*
		 (setq *load-source-if-no-binary* load-source))
	       load-source)))))

;;; ********************************
;;; Allegro Toplevel Commands ******
;;; ********************************
;;; Creates toplevel command aliases for Allegro CL.
#+:allegro
(top-level:alias ("compile-system" 8)
  (system &key force (minimal-load mk:*minimal-load*)
	  test verbose version)
  "Compile the specified system"

  (mk:compile-system system :force force
		     :minimal-load minimal-load
		     :test test :verbose verbose
		     :version version))

#+:allegro
(top-level:alias ("load-system" 5)
  (system &key force (minimal-load mk:*minimal-load*)
	  (compile-during-load mk:*compile-during-load*)
	  test verbose version)
  "Compile the specified system"

  (mk:load-system system :force force
		  :minimal-load minimal-load
		  :compile-during-load compile-during-load
		  :test test :verbose verbose
		  :version version))

#+:allegro
(top-level:alias ("show-system" 5) (system)
  "Show information about the specified system."

  (mk:describe-system system))

#+:allegro
(top-level:alias ("describe-system" 9) (system)
  "Show information about the specified system."

  (mk:describe-system system))

#+:allegro
(top-level:alias ("system-source-size" 9) (system)
  "Show size information about source files in the specified system."

  (mk:system-source-size system))

#+:allegro
(top-level:alias ("clean-system" 6)
  (system &key force test verbose version)
  "Delete binaries in the specified system."

  (mk:clean-system system :force force
		   :test test :verbose verbose
		   :version version))

#+:allegro
(top-level:alias ("edit-system" 7)
  (system &key force test verbose version)
  "Load system source files into Emacs."

  (mk:edit-system system :force force
		  :test test :verbose verbose
		  :version version))

#+:allegro
(top-level:alias ("hardcopy-system" 9)
  (system &key force test verbose version)
  "Hardcopy files in the specified system."

  (mk:hardcopy-system system :force force
		      :test test :verbose verbose
		      :version version))

#+:allegro
(top-level:alias ("make-system-tag-table" 13) (system)
  "Make an Emacs TAGS file for source files in specified system."

  (mk:make-system-tag-table system))


;;; ********************************
;;; Allegro Make System Fasl *******
;;; ********************************
#+:excl
(defun allegro-make-system-fasl (system destination
					&optional (include-dependents t))
  (excl:shell
   (format nil "rm -f ~A; cat~{ ~A~} > ~A"
	   destination
	   (if include-dependents
	       (files-in-system-and-dependents system :all :binary)
	       (files-in-system system :all :binary))
	   destination)))

(defun files-which-need-compilation (system)
  (mapcar #'(lambda (comp) (component-full-pathname comp :source))
	  (remove nil
		  (file-components-in-component
		   (find-system system :load) :new-source))))

(defun files-in-system-and-dependents (name &optional (force :all)
					    (type :source) version)
  ;; Returns a list of the pathnames in system and dependents in load order.
  (let ((system (find-system name :load)))
    (multiple-value-bind (*version-dir* *version-replace*)
	(translate-version version)
      (let ((*version* version))
	(let ((result (file-pathnames-in-component system type force)))
	  (dolist (dependent (reverse (component-depends-on system)))
	    (setq result
		  (append (files-in-system-and-dependents dependent
							  force type version)
			  result)))
	  result)))))

(defun files-in-system (name &optional (force :all) (type :source) version)
  ;; Returns a list of the pathnames in system in load order.
  (let ((system (if (and (component-p name)
                         (member (component-type name) '(:defsystem :system :subsystem)))
                    name
                    (find-system name :load))))
    (multiple-value-bind (*version-dir* *version-replace*)
	(translate-version version)
      (let ((*version* version))
	(file-pathnames-in-component system type force)))))

(defun file-pathnames-in-component (component type &optional (force :all))
  (mapcar #'(lambda (comp) (component-full-pathname comp type))
	  (file-components-in-component component force)))

(defun file-components-in-component (component &optional (force :all)
					       &aux result changed)
  (case (component-type component)
    ((:file :private-file)
     (when (setq changed
		 (or (find force '(:all t) :test #'eq)
		     (and (not (non-empty-listp force))
			  (needs-compilation component))))
       (setq result
	     (list component))))
    ((:module :system :subsystem :defsystem)
     (dolist (module (component-components component))
       (multiple-value-bind (r c)
	   (file-components-in-component
	    module
	    (cond ((and (some #'(lambda (dependent)
				  (member dependent changed))
			      (component-depends-on module))
			(or (non-empty-listp force)
			    (eq force :new-source-and-dependents)))
		   ;; The component depends on a changed file and force agrees.
		   :all)
		  ((and (non-empty-listp force)
			(member (component-name module) force
				:test #'string-equal :key #'string))
		   ;; Force is a list of modules and the component is
		   ;; one of them.
		   :all)
		  (t force)))
	 (when c
	   (push module changed)
	   (setq result (append result r)))))))
  (values result changed))

(setf (symbol-function 'oos) (symbol-function 'operate-on-system))

;;; ********************************
;;; Additional Component Operations
;;; ********************************

;;; *** Edit Operation ***

;;; Should this conditionalization be (or :mcl (and :CCL (not :lispworks)))?
#|
#+:ccl
(defun edit-operation (component force)
  "Always returns nil, i.e. component not changed."
  (declare (ignore force))
  ;;
  (let* ((full-pathname (make::component-full-pathname component :source))
         (already-editing\? #+:mcl (dolist (w (CCL:windows :class
							   'fred-window))
                                    (when (equal (CCL:window-filename w)
                                                 full-pathname)
                                      (return w)))
                           #-:mcl nil))
    (if already-editing\?
      #+:mcl (CCL:window-select already-editing\?) #-:mcl nil
      (ed full-pathname)))
  nil)

#+:allegro
(defun edit-operation (component force)
  "Edit a component - always returns nil, i.e. component not changed."
  (declare (ignore force))
  (let ((full-pathname (component-full-pathname component :source)))
    (ed full-pathname))
  nil)

#+(or :ccl :allegro)
(make::component-operation :edit 'edit-operation)
#+(or :ccl :allegro)
(make::component-operation 'edit 'edit-operation)
|#

;;; *** Hardcopy System ***
(defparameter *print-command* "enscript -2Gr" ; "lpr"
  "Command to use for printing files on UNIX systems.")
#+:allegro
(defun hardcopy-operation (component force)
  "Hardcopy a component - always returns nil, i.e. component not changed."
  (declare (ignore force))
  (let ((full-pathname (component-full-pathname component :source)))
    (excl:run-shell-command (format nil "~A ~A"
				    *print-command* full-pathname)))
  nil)

#+:allegro
(make::component-operation :hardcopy 'hardcopy-operation)
#+:allegro
(make::component-operation 'hardcopy 'hardcopy-operation)


;;; *** System Source Size ***

(defun system-source-size (system-name &optional (force :all))
  "Prints a short report and returns the size in bytes of the source files in
   <system-name>."
  (let* ((file-list (files-in-system system-name force :source))
         (total-size (file-list-size file-list)))
    (format t "~&~a/~a (~:d file~:p) totals ~:d byte~:p (~:d kB)"
            system-name force (length file-list)
            total-size (round total-size 1024))
    total-size))

(defun file-list-size (file-list)
  "Returns the size in bytes of the files in <file-list>."
  ;;
  (let ((total-size 0))
    (dolist (file file-list)
      (with-open-file (stream file)
        (incf total-size (file-length stream))))
    total-size))

;;; *** System Tag Table ***

#+:allegro
(defun make-system-tag-table (system-name)
  "Makes an Emacs tag table using the GNU etags program."
  (let ((files-in-system (files-in-system system-name :all :source)))

    (format t "~&Making tag table...")
    (excl:run-shell-command (format nil "etags ~{~a ~}" files-in-system))
    (format t "done.~%")))


;;; end of file -- defsystem.lisp --
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3
;;;; END FILE ./reference/ccl/tools/defsystem.lisp
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4n









;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4n









;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4n









;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4n









